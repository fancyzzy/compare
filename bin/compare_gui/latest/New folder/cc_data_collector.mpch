/************************* MADSIX INFORMATION *************************/
/* MADSIX STYLE VERSION: 3.7                                          */
/* UPDATED BY MADSIX VERSION: 3.7.2                                   */
/* USED LOADMODULE: PB04AD10                                          */
/* PSEUDO CODE: INLINE                                                */
/********************* END OF MADSIX INFORMATION **********************/
/*********************** COPYRIGHT INFORMATION ************************/
/*                                                                    */
/*                                                                    */
/*       INFORMATION INCLUDED IN THIS DOCUMENT IS THE EXCLUSIVE       */
/*       PROPERTY OF ALCATEL NV OR OF A COMPANY OF THE ALCATEL        */
/*       NV GROUP. COPYING, USE OR DISCLOSURE OF ITS CONTENTS,        */
/*       EVEN IN PART, ARE NOT PERMITTED WITHOUT THE PRIOR            */
/*       WRITTEN AGREEMENT OF THE PROPRIETOR.                         */
/*                                                                    */
/*                                                                    */
/******************** END OF COPYRIGHT INFORMATION ********************/
/*********************** SHORT IDENTIFICATION *************************/
/*                                                                    */
/*        CCCC   CCCC  DDDD    CCCC                                   */
/*       C      C      D   D  C                                       */

/*       C      C      D   D  C                                       */
/*       C      C      D   D  C                                       */
/*       C      C      D   D  C                                       */
/*        CCCC   CCCC  DDDD    CCCC                                   */
/*                                                                    */
/******************* END OF SHORT IDENTIFICATION **********************/
/**********************************************************************/
/*                                                                    */
/*    FMM_PROCEDURE_HEADER: CC DATA COLLECTOR                         */
/*                                                                    */
/*    DESCRIPTIVE NAME    : MSF-CC_DATA_COLLECTOR                     */
/*                                                                    */
/*    REG NUMBER          : 26701                                     */
/*                                                                    */
/*    PDS MEMBER          : FT58ZXXX                                  */
/*                                                                    */
/*    PROGRAMMERS         : CHEN ZHANGYI                              */
/*                          ZHU  JUN                                  */
/*    CREATED             : 29/03/05                                  */
/*                                                                    */
/*    LAST UPDATED        : 06/06/06                                  */
/*                                                                    */
/*--------------------------------------------------------------------*/
/*                                                                    */
/*    FILE DOCUMENT:         CATEG.: REG NO.:       ED.   PDS MEMBER: */
/*                                                  NO.:  (CIPHER,    */
/*                                                         VARIANT,   */
/*                                                         PCS)       */
/*                                                                    */
/*    PK DOCUMENT   (STAND ALONE)    XXX XXXXX XXXX XX    XXXX        */
/*    PW DOCUMENT   (STAND ALONE)    XXX XXXXX XXXX XX    XXXX        */
/*    DESCRIPTOR (FMM)     FMMD-     215 26731            FT7D AL 01  */
/*    SOURCE (CHILL)        MSF-     215 26701            FT58 AL 01  */
/*    SPS, OBJECT (LINKED)   MO-     215 26713      G2    FT6L AZ 03  */
/*    LOADM                                               FG95 ZX 01  */
/*    CMD STR                                             FKUP ZX 01  */
/*    PKGEDIT/MAPEDIT                                     FHVQ ZX 01  */
/*                                                                    */
/*--------------------------------------------------------------------*/
/*                                                                    */
/*    FMM IDENTIFICATION       -    0157                              */
/*                                                                    */
/************************ END OF FMM HEADER ***************************/
/**********************************************************************/
/*                START OF TOP LEVEL DOCUMENTATION                    */
/**********************************************************************/
/*
1. DESCRIPTIVE NAME - FMM
   ----------------------

MSF-CC_DATA_COLLECTOR

2. FUNCTIONAL DESCRIPTION
   ----------------------

THERE IS A TERMINOLOGY USED IN THIS FMM WHICH IS QUITE IMPORTANT TO
KNOW:

THE FMM VERSION OF THE COUNTERS ARE CALLED CCI (COUNTERS CENTRALISED
IMAGES) AND THIS IS REFLECTED IN MODE AND VARIABLE DEFINITIONS.

IT MAY ALSO HELP TO NOTE THAT VARIABLES AND PROCEDURES THAT DEAL WITH
THE COUNTER DATA RECEIVED FROM POLLING ARE GENERALLY REFERRED TO
AS TYPEN  OR TN E.G M_CCI_TYPE2 OR M_T1_PTR, WHEREAS PROCEDURES AND
DATA PERTAINING TO THE HISTORY FILE ARE GENERALLY TYPE_N, E.G TYPE_19.

CERTAIN GLOBAL VARIABLES WILL EVENTUALLY BE MOVED INTO THE FSM AFTER
DEBUGGING (E.G Z_POLL_STEP).

AN EXPLANATION OF SOME OF THE MAIN DATA NAMES SHOULD CLARIFY
UNDERSTANDING.

POLL_STEP; THIS THE POLLING ACTIVITY IN PROGRESS, DETAILED POLLING OF
           THE DTCS FOR EXAMPLE.
PROC_INST; THE PROCESS INSTANCE THAT IS ONGOING DURING A POLLING CYCLE
           IS ALWAYS 1 FOR G1 AND IN THE RANGE 1 TO 4 FOR G2.

\* THIS IS THE MADSIX GENERATED XPA AREA                              *\



MESSAGES USED IN SUPERVISOR_PROCESS: G_S_FT58YX_CC_DATA_COLLECTOR

 0017_SM_ACT_REQ - YTQLAA01                BASIC MESSAGE
     Q_S1000_CCDC_FSM                      RECEIVED

 0018_SM_ACT_CNF - YV96AA01                DIRECTED MESSAGE
     Q_S1000_CCDC_FSM                      SEND

 0019_INIT_REQ - YV97AA03                  BASIC MESSAGE
     Q_S1000_CCDC_FSM                      RECEIVED

 0020_INIT_CNF - YV98AA01                  DIRECTED MESSAGE
     Q_S1000_CCDC_FSM                      SEND

 0121_OPEN_FILE - YTMDAA01                 BASIC MESSAGE
     Q_S0816_OPEN_HIS_FILE                 SEND

 0122_FILE_OPENED - YTMEAA01               DIRECTED MESSAGE
     Q_S0816_OPEN_HIS_FILE                 RECEIVED

 0123_READ_REC - YTMFAA01                  DIRECTED MESSAGE
     Q_S0820_READ_HIST_FILE                SEND

 0124_READ_REC_CNF - YTMGAA01              DIRECTED MESSAGE
     Q_S0308_WAIT_0124_READ_REC_CNF        RECEIVED

 0125_WRITE_REC - YTMHAA01                 DIRECTED MESSAGE
     Q_S0822_WRITE_HIST_FILE               SEND

 0126_WRITE_REC_CNF - YTMJAA01             DIRECTED MESSAGE
     Q_S0304_WAIT_0126_WRITE_REC_CNF       RECEIVED

 0127_CLOSE_FILE - YTMKAA01                DIRECTED MESSAGE
     Q_S0812_CLOSE_HIS_FILE                SEND

 0128_FILE_CLOSED - YTMLAA01               DIRECTED MESSAGE
     Q_S1000_CCDC_FSM                      RECEIVED
     Q_S0812_CLOSE_HIS_FILE                RECEIVED
     Q_S0308_WAIT_0124_READ_REC_CNF        RECEIVED
     Q_S0304_WAIT_0126_WRITE_REC_CNF       RECEIVED

 0192_PM_LDC_AVAIL - YXY1AA01              BASIC MESSAGE
     Q_S1000_CCDC_FSM                      RECEIVED

00193_PM_POLLING - YXY2ADXX                BASIC MESSAGE
     UNKNOWN                               SEND

 0194_PM_DATA_TRANSF - YXY3AD01            DIRECTED MESSAGE
     Q_S1000_CCDC_FSM                      RECEIVED

 0316_FILE_HNDL_REQ - ABTXAA01             BASIC MESSAGE
     Q_S0850_DO_FILE_ACTION                SEND

 0317_FILE_HNDL_CNF - ABT1AA01             DIRECTED MESSAGE
     Q_S0850_DO_FILE_ACTION                RECEIVED

00507_ENVELOPE_MSG - AG6JAAXX              BASIC MESSAGE
     UNKNOWN                               SEND

00508_ENVELOPE_MSGB - AG6KAAXX             BASIC MESSAGE
     UNKNOWN                               SEND

 0889_AH_LOCAL_ALARM_IND - EFE3AD01        BASIC MESSAGE
     Q_S0596_CALC_ALERT_THRES              SEND

01070_PM_HO_REQ - FQMNADXX                 BASIC MESSAGE
     UNKNOWN                               SEND

 1080_PM_CC_ACT_REQ - FT6DAD02             BASIC MESSAGE
     Q_S1000_CCDC_FSM                      RECEIVED

 1081_PM_CC_ACT_CNF - FT6EAD02             DIRECTED MESSAGE
     Q_S0910_START_STOP_JOB                SEND

 1082_PM_POLL_COMPL - FT6FAP01             BASIC MESSAGE
     Q_S0660_DO_NEXT_POLL_ACTION           SEND

 1089_PM_LDC_DER_AVAIL - FWH7AD02          BASIC MESSAGE
     Q_S0612_LDC_AVAILABLE                 SEND

 1090_PM_POLL_ONLY - FWH8AD03              BASIC MESSAGE
     Q_S1000_CCDC_FSM                      RECEIVED

 1091_PM_CC_LDC_ACT_REQ - FXK5AD03         BASIC MESSAGE
     Q_S1000_CCDC_FSM                      RECEIVED

 1092_PM_CC_LDC_ACT_CNF - FXK6AD02         DIRECTED MESSAGE
     Q_S1000_CCDC_FSM                      SEND

01141_PM_POLL_DETAILED_REQ - HXL7AHXX      BASIC MESSAGE
     UNKNOWN                               SEND

 1142_PM_DETAILED_DATA - HXL8AH01          DIRECTED MESSAGE
     Q_S1000_CCDC_FSM                      RECEIVED

01186_PM_T180_POLLING_REQ - JUR3APXX       BASIC MESSAGE
     UNKNOWN                               SEND

 1187_PM_T180_POLLING_RSP - JUR4AP01       DIRECTED MESSAGE
     Q_S1000_CCDC_FSM                      RECEIVED

 1188_PM_CCI_REF_REQ - JUR5AP01            BASIC MESSAGE
     Q_S1000_CCDC_FSM                      RECEIVED

 1189_PM_CCI_REF_RSP - JUR6AP01            BASIC MESSAGE
     Q_S1000_CCDC_FSM                      SEND
     
01407_PM_T26_POLLING_REQ - LW2CAV01        BASIC MESSAGE
     UNKNOWN                               SEND

 1408_PM_T26_POLLING_RSP - LW2DAV01        DIRECTED MESSAGE
     Q_S1000_CCDC_FSM                      RECEIVED

 1440_PM_EME_POLLING_REQ - MBQ3AW01        BASIC MESSAGE
     UNKNOWN                               SEND

 1441_PM_EME_POLLING_RSP - MBQ4AW01        DIRECTED MESSAGE
     Q_S1000_CCDC_FSM                      RECEIVED

 6836_TIME_OUT - NSCLAA01                  DIRECTED MESSAGE
     Q_S1000_CCDC_FSM                      RECEIVED
     Q_S0004_WAIT_BEFORE_RETRYING          RECEIVED


DATA BASE ACCESSES USED IN SUPERVISOR_PROCESS:
G_S_FT58YX_CC_DATA_COLLECTOR

R_PM_ACT
     Q_S0170_MOD_R_PM_ACT                   MODIFY
     Q_S0150_GET_R_PM_ACT_TASK              GET
     Q_S0160_GET_R_PM_ACT_RUNNING           GET

R_OML_LNK
     Q_S0401_UPD_T7_INVALID                 GET

R_TSL_LNK
     Q_S0401_UPD_T7_INVALID                 GET

R_RSL_LNK
     Q_S0131_GET_R_RSL_LNK                  GET
     Q_S0401_UPD_T7_INVALID                 GET

R_TRX_MGT
     Q_S0127_GET_R_TRX_MGT_RSL              GET

R_CE_DYST
     Q_S0130_GET_R_CE_DYST                  GET

R_CONF_CE
     Q_S0120_GET_R_CONF_CE                  GET

R_CIC_CODE
     Q_S1000_CCDC_FSM                       GET

R_AL_CLDAT
     Q_S0596_CALC_ALERT_THRES               GET

R_AL_CLGBL
     Q_S0596_CALC_ALERT_THRES               GET

R_CELL_MGT
     Q_S0126_GET_R_CELL_MGT_CELL            GET

R_PM_FILES
     Q_S0200_HIS_UPD_REQ                    GET
     Q_S0140_MOD_R_PM_FILES                 MODIFY
     Q_S0122_PREPARE_R_PM_FILES             GET, MODIFY

R_N7_CONF
     Q_S1000_CCDC_FSM                       GET

R_PM_SC_G2
     Q_S0160_CELL_IN_SCOPE                  GET
     Q_S0155_GET_CELL_SCOPE                 GET


SSMS CALLED FROM SUPERVISOR_PROCESS: G_S_FT58YX_CC_DATA_COLLECTOR

          YTBGAA
          YTBNAA
          YTB4AB
          YTBRAD
          GDY4ZQ
\* END OF THE MADSIX GENERATED XPA AREA                              *\
*/
/**********************************************************************/
/*                END OF TOP LEVEL DOCUMENTATION                      */
/**********************************************************************/
/********************** CHANGE REPORT HISTORY *************************/
/*                                                                    */
/*                                                                    */
/*                                                                    */
/**********************************************************************/
/*--------------------------------------------------------------------*/
/* UPDATED BY   | DATE      | FAULT REP  | CHANGE REQ  | GSM-VERSION  */
/*--------------------------------------------------------------------*/
/*              |           |            |             |              */
/*--------------------------------------------------------------------*/
/*              |           |            |             |              */
/****************** END OF CHANGE REPORT HISTORY **********************/
/************** MODULE UPDATE REPORT FOR FAST REBUILD *****************/
/*                                                                   **/
/**********************************************************************/
/* PCS CHG  |  DATE    | UPDATED BY                                  **/
/*===================================================================**/
/* FT58ZQ2A | 15.09.99 | L DIERICK                                   **/
/*===================================================================**/
/*          | FIRST DELIVERY CCDC SPLIT /DMD YTL3AQ33  STEP 1        **/
/*===================================================================**/
/* FT58ZQ2B | 15.09.99 | L DIERICK                                   **/
/*===================================================================**/
/*          | CORRECTION T180 INVALIDITY                             **/
/*===================================================================**/
/* FT58ZQ2C | 15.09.99 | L DIERICK                                   **/
/*===================================================================**/
/* 053.TELS1| NEW VARIABLE KEEPING THE STATUS OF THE FILE (OPEN/CLOSE)*/
/*          | SET IN S0818/S0304 AND CHECKED IN S0814                **/
/*===================================================================**/
/* FT58ZQ03 | 01.10.99 | L DIERICK                                   **/
/*===================================================================**/
/*          | FIRST DELIVERY CRQ FILE FORMAT YTL3AQ34  STEP 1        **/
/*===================================================================**/
/* FT58ZQ3A | 11.10.99 | L DIERICK                                   **/
/*===================================================================**/
/*          | TYPE 180 : ALL CTRS INVALID IN 3TH PERIOD HFILE AFTER  **/
/*          | INVALID POLLING RESPONSE FROM TCHRM IN 2ND PERIOD      **/
/*          | (ONLY C400 SHOULD BE PUT INVALID)                      **/
/*          | Q_S0433_CHECK_INVALIDITY_T180  MODIFIED                **/
/*===================================================================**/
/* FT58ZQ3B | 28.10.99 | L DIERICK                                   **/
/*===================================================================**/
/*          | TYPE 180 : HIST FILE NOT RECREATED IF INV REC LENGTH   **/
/*===================================================================**/
/* FT58ZQ3C | 04.11.99 | S DONIZETTI                                 **/
/*===================================================================**/
/*          | TYPE 180 : C400 ALWAYS SET TO INVALID                  **/
/*          | Q_S0433_CHECK_INVALIDITY_T180  MODIFIED                **/
/*===================================================================**/
/* FT58ZQ3D | 14.12.99 | L DIERICK                                   **/
/*===================================================================**/
/* FR066529 | TYPE 180 CAUSES PING PONG RESTART AFTER TAKEOVER       **/
/*          | Q_S0870_INITIALISE_HISTORY  MODIFIED                   **/
/*          | Q_S0866_DELETE_INCOMPLETE  MODIFIED                    **/
/*===================================================================**/
/* FT58ZQ3E | 30.03.00 | L DIERICK                                   **/
/*===================================================================**/
/*          | R_PM_SC_G1 REMOVED (REMOVED IN DMD AQ44 AND AQ61)      **/
/* FR75500  | POLLING REQUEST FOR T180 MUST NOT BE SENT TO S-CPR,    **/
/*          | BUT TO TCHRM ON DTCS ONLY                              **/
/*===================================================================**/
/* FT58ZT3G | 07.01.02 | PBLO                                        **/
/*===================================================================**/
/*          | (UPDATES BY SWANNA: FIND IT YOURSELVE)                 **/
/*          | ADDED TRCINFO (TRACE INFO)                             **/
/*===================================================================**/
/* FT58ZT3H | 07.01.02 | PBLO                                        **/
/*===================================================================**/
/*          | CORRECTED CONDITION FOR NBR_ATTEMPTS IN S0930          **/
/*          | ASSURED POLLING DEBUG COUNTERS ARE NOT RESET DURING    **/
/*          | POLLING: DUE TO PARALLELISM, COUNTERS ARE NOT RELIABLE **/
/*          | IN THAT CASE                                           **/
/*          | + ADDED CONDITION FOR INCREMENTING ATTEMPTS IN S0602   **/
/*          | (WITTS B7pp/0102 CONTINUED)                            **/
/*===================================================================**/
/* FT58ZT3I | 04.03.02 | PIETER BLOMMAERT                            **/
/*===================================================================**/
/*          | WITTS 72/0261: ADD PHHR: HISTORY FILE HEADER RECORD    **/
/*          | (PROBABLY) LAST PM BSC MODULE UPDATE AND IMPROVEMENT   **/
/*          | BY MYSELF.                                             **/
/*===================================================================**/
/*          |                                                        **/
/*===================================================================**/
/*          | ADDITIONAL CORRECTION OF MY LAST UPDATEE FOR HIS_READ  **/
/*===================================================================**/
/* FT58ZT3K | 23.08.02 | NAIKA                                       **/
/*===================================================================**/
/*          | ARTS 20/116090: THE STATE OF THE RSLS ON THE OSI CPR   **/
/*          | DOES NOT REFLECT THE REAL (STABLE) STATE OF THE RSL    **/
/*          | RSL STATE IS TAKEN FROM TCU                            **/
/*===================================================================**/
/* FT58AV01 | 06.09.02 | CHEN ZHANGYI                                **/
/*===================================================================**/
/*          | FIRST DELIVERY OF B8                                   **/
/*===================================================================**/
/* FT58AV02 | 17.09.02 | CHEN ZHANGYI                                **/
/*===================================================================**/
/*          | CHANGE H_S_FT58ZT_CC_DATA_COLLECTOR TO                 **/
/*          | H_S_FT58AV_CC_DATA_COLLECTOR                           **/
/*===================================================================**/
/* FT58AV2A | 28.09.02 | CHEN ZHANGYI                                **/
/*===================================================================**/
/*          | CORRECT GEN PROT ERR IN PROCEDURE                      **/
/*          | Q_S0410_CLEAR_MEMORY                                   **/
/*===================================================================**/
/* FT58AV2B | 21.11.02 | CHEN ZHANGYI                                **/
/*===================================================================**/
/*          | UPDATE BASE ON DATA MODEL AV07                         **/
/*===================================================================**/
/* FT58AV2C | 26.12.02 | CHEN ZHANGYI                                **/
/*===================================================================**/
/*          | CORRECT WITTS 76: TYPE 26 RESULT FILE                  **/
/*===================================================================**/
/* FT58AV2D | 13.06.03 | CHEN ZHANGYI                                **/
/*===================================================================**/
/*          | CORRECT FR 36/128518:                                  **/
/*          | MODIFY PROCEDURE Q_S0860_RESET_CCI_RSMB,               **/
/*          | ADD THE RESET OF CCI OF TYPE110 BSS COUNTERS.          **/
/*===================================================================**/
/* FT58ZV01 | 26.06.03 | CHEN ZHANGYI                                **/
/*===================================================================**/
/*          | CORRECT FR 36/123574:                                  **/
/*          | MODIFY PROCEDURE Q_S0660_DO_NEXT_POLL_ACTION,          **/
/*          | MODIFY R_PM_FILES.D_HIS_UPD BEFORE AND AFTER UPDATE    **/
/*          | TYPE 180 HISTORY FILE, SEND 1082 TO MECO AFTER UPDATE  **/
/*          | TYPE 180 HISTORY FILE.                                 **/
/*===================================================================**/
/* FT58YV01 | 11.02.03 | CHEN ZHANGYI                                **/
/*===================================================================**/
/*          | FIRST DELIVERY OF B8 PKG 6                             **/
/*===================================================================**/
/* FT58YV1A | 13.06.03 | CHEN ZHANGYI                                **/
/*===================================================================**/
/*          | MERGE CORRECTIION OF FR 36/128518 FROM B8P1:           **/
/*          | MODIFY MODULE Q_S0860_RESET_CCI_RSMB,                  **/
/*          | ADD THE RESET OF CCI OF TYPE110 BSS COUNTERS.          **/
/*===================================================================**/
/* FT58YV1B | 26.06.03 | CHEN ZHANGYI                                **/
/*===================================================================**/
/*          | MERGE CORRECTIION OF FR 36/123574 FROM B8P5:           **/
/*          | MODIFY PROCEDURE Q_S0660_DO_NEXT_POLL_ACTION,          **/
/*          | MODIFY R_PM_FILES.D_HIS_UPD BEFORE AND AFTER UPDATE    **/
/*          | TYPE 180 HISTORY FILE, SEND 1082 TO MECO AFTER UPDATE  **/
/*          | TYPE 180 HISTORY FILE.                                 **/
/*===================================================================**/
/* FT58YV02 | 22.08.03 | CHEN ZHANGYI                                **/
/*===================================================================**/
/*          | IMPACT BY DMD AV57: M_SBLT_TSL REMOVED.                **/
/*          | ZM_SBLT_TSL IS CREATED TO REPLACE M_SBLT_TSL           **/
/*          | MODIFY PROCEDURE Q_S0401_UPD_T7_INVALID                **/
/*===================================================================**/
/* FT58YV2A | 22.08.03 | CHEN ZHANGYI                                **/
/*===================================================================**/
/*          | IMPACT BY DMD AV58: M_SBLT_TSL RECOVERT.               **/
/*          | MODIFY PROCEDURE Q_S0401_UPD_T7_INVALID                **/
/*===================================================================**/
/* FT58AW01 | 01.04.04 | CHEN ZHANGYI                                **/
/*===================================================================**/
/*          | UPDATED FOR B9 PKG1.                                   **/
/*===================================================================**/
/* FT58ZW01 | 08.09.04 | CHEN ZHANGYI                                **/
/*===================================================================**/
/*          | UPDATED FOR B9 PKG2.                                   **/
/*===================================================================**/
/* FT58XV01 | 04.11.04 | CHEN ZHANGYI                                **/
/*===================================================================**/
/*          | FIRST DELIVERY OF MX B8PROTO                           **/
/*===================================================================**/
/* FT58XV1C | 21.02.05 | CHEN ZHANGYI                                **/
/*===================================================================**/
/*          | CHANGE FOR MXBSC CPF E2RL                              **/
/*===================================================================**/
/* FT58XV10 | 21.02.05 | CHEN ZHANGYI                                **/
/*===================================================================**/
/*          | FIRST DELIVERY FOR MX B8FULL                           **/
/*===================================================================**/
/* FT58YW01 | 06.06.05 | ZHU JUN                                     **/
/*===================================================================**/
/*           WITTS 5463,WITTS 5464                                   **/
/*===================================================================**/
/* FT58XVAJ | 05.08.10 | ZHU Jun                                     **/
/*===================================================================**/
/*           WITTS 5724,WITTS 5771                                   **/
/*===================================================================**/
/* FT58XVAJ | 05.09.13 | ZHU Jun                                     **/
/*===================================================================**/
/*           ADD COMMON TRACE                                        **/
/*===================================================================**/
/* FT58YW1J | 05.10.10 | ZHU Jun                                     **/
/*===================================================================**/
/*           WA for CR20/170806, CCDC won't send out 1543 to trigger **/
/*           message 1544 which sometimes without userbuffer, and    **/
/*           may lead to OCPR crash                                  **/
/*===================================================================**/
/* FT58YW1K   | 05.10.25 | ZHU Jun                                   **/
/*===================================================================**/
/*           ADD ER6329                                              **/
/*===================================================================**/
/* FT58YW13   | 05.11.07 | ZHU Jun                                   **/
/*===================================================================**/
/*           REMOVE WA for CR20/170806 and ER6329 based on THE WA.   **/
/*===================================================================**/
/* FT58YWDC   | 06.01.13 | ZHU Jun                                   **/
/*===================================================================**/
/*           WITTS 6612                                              **/
/*===================================================================**/
/*===================================================================**/
/* FT58ZX01 | 15/05/06 | MALA                                        **/
/* REASON   | FIRST DELIVERY FOR MX B10                              **/
/*===================================================================**/
/* FT58ZX1B | 05/06/06 | MALA                                        **/
/* REASON   | ER264 CHANGE IN MODE"CM_FY32_PM_MAX_CIC                **/
/*===================================================================**/
/* FT58YX01 | 30/06/06 | MALA                                        **/
/* REASON   | FIRST DELIVERY FOR B10MXMR2                            **/
/*===================================================================**/
/* FT58YX02 | 26/07/06 | AKSHAY                                      **/
/* REASON   | ER508,ER509 IMPLEMENTED IN MR2 MT                      **/
/*            DMD IMPACT FOR YTL3YX07                                **/
/*===================================================================**/
/* FT58YX2A | 07/09/06 | AKSHAY                                      **/
/* REASON   | CR746 DMD IMPACT FOR YTL3YX10                          **/
/*===================================================================**/
/* FT58YX1C | 05/12/06 | MALA                                        **/
/* REASON   | CR1158:VCEID OF SLH CHANGED FROM 1301&1302 TO 1305&1306**/
/*===================================================================**/
/* FT58YX1D | 08/01/07 | MALA                                        **/
/* REASON   | DELIVERED FOR -ER01268 SEND LCEID OF OCPR IN 1694 MSG  **/ 
/*            FILED                                                  **/
/*===================================================================**/
/* FT58YX1C | 05.06.19 | MALA                                        **/
/*===================================================================**/
/*           TO MAKE IT INLINE WITH PM.CHH(FR185495)                 **/
/*===================================================================**/
/* FT58ZX1D | 25/08/06 | SRINIVAS				     **/
/* REASON   | MERGE FROM B9 MX AW30I FOR FR20/176777                 **/
/*===================================================================**/
/* FT58ZX1E | 11/09/06 | SRINIVAS				     **/
/* REASON   | MERGE FROM B9 MX AW30K FOR FR20/192118                 **/
/*===================================================================**/
/* FT58ZX1F | 25/09/06 | MALA                                        **/
/* REASON   | RT Trace CR620                                         **/
/*===================================================================**/
/* FT58ZX1G | 10/10/06 | SRINIVAS				     **/
/* REASON   | MERGE FROM PATCH FOR ER865                             **/
/*===================================================================**/
/* FT58ZX1H | 23/10/06 | SRINIVAS				     **/
/* REASON   | DMD IMPACT ZX13                                        **/
/*===================================================================**/
/* FT58ZX1I | 01/12/06 | SRINIVAS				     **/
/* REASON   | RT Trace CR1037                                        **/
/*===================================================================**/
/* FT58ZX1J | 29/01/07 | AKSHAY 				     **/
/*          | MERGE FROM B10G2 AX01O FOR FR20/201332 FR20/192118     **/
/*          | EXTRA DEBUG INFORMATION IS NOT INCLUDED.               **/
/*===================================================================**/
/* FT58ZX1K | 09/02/07 | SRINIVAS 				     **/
/*          | ER1549 TO MAKE IT INLINE WITH LATEST PM.CHH            **/
/*===================================================================**/
/* FT58ZX1L | 09/03/07 | MALA                                        **/
/*          | ER1650 TO MAKE IT INLINE WITH LATEST PM.CHH            **/
/*===================================================================**/
/* FT58AZ01 | 27/07/07 | SRINIVAS                                    **/
/*          | FIRST DELIVERY FOR B11 MX MR1                          **/
/*===================================================================**/
/* FT58AZ03 | 23/11/07 | SRINIVAS                                    **/
/*          | B11 IP FEATURE                                         **/
/*===================================================================**/
/* FT58ZZ5E | 18/09/09 | AMRITPAL                                    **/
/*          | FR36/284712                                            **/
/*          | DELIVERED ON AZ10J/002 DMD ZZ51                        **/
/*===================================================================**/
/* FT58AZXX | 08/01/10 | AMITABH                                     **/
/*          | MERGE FOR CR20/279046                                  **/
/*===================================================================**/
/* FG58XXXX | 01/03/10 | SRINIVAS                                    **/
/*          | CR20/286418 - More Incoming liks per cell              **/
/*===================================================================**/
/* FT58AZXX | WI_ZZ5H | 29/01/10 | AMRITPAL                          **/
/*          | CR36/288765 MERGE                                      **/
/*===================================================================**/
/* FT58AZXX | WI_ZZ5K | 24/05/10 | AMITABH                           **/
/*          | FR36/294836 MERGE FROM AZ07B                           **/
/*===================================================================**/
/* FT58AZXX | WI_ZZ5M | 07/06/10 | AMRITPAL                          **/
/*          | FR36/297674 FR36/296461                                **/
/*          | FR36/297674 FR36/296461                                **/ 
/*===================================================================**/
/* FT58AZXX | WI_ZZ5P | 16/08/10 | RAJASHRI                          **/
/* REASON   | CR20/289215                                            **/
/* PACKAGE  | AZ11A/001                                              **/ 
/*===================================================================**/
/* FT58AZXX | WI_ZZAB | 06/08/10 | RAJASHRI                          **/
/* REASON   | CR - 298730 | IURG                                     **/
/* PACKAGE  | AZ20A_003                                              **/
/*===================================================================**/
/* FT58AZXX | WI_AL1A | 20/10/10 | VINEELA                           **/
/* REASON   | MERGE FOR CR20/289215 CR20/294214                      **/
/* PACKAGE  | AL01A/001                                              **/
/* FT58AZXX | WI_ZZAC | 08/09/10 | AMITABH                           **/
/* REASON   | MERGE FROM AZ10A/002                                   **/ 
/* PACKAGE  | AZ20A_005                                              **/
/*===================================================================**/
/* FT58AZXX | WI_ZZAI | 11/07/11 | ATMARAM                           **/
/* REASON   | DMD IMPACT ZZ79                                        **/
/* PACKAGE  | AZ20N/001                                              **/
/*===================================================================**/
/* FT58AZXX | WI_AL02 | 06/01/11 | VINEELA                           **/
/* REASON   | MERGE FOR CR36/302024, CR36/303052 FROM                **/
/*          | B11_MX_MR2_ED2 AZ20E/001                               **/
/* PACKAGE  | AL02A/001                                              **/
/*===================================================================**/
/* FT58AZXX | WI_AL2D | 08/04/11 | ATMARAM                           **/
/* REASON   | FR36/307843                                            **/
/*          | PM.CHH & DMD AL11A IMPACT                              **/
/* PACKAGE  | AL02C/001                                              **/
/*===================================================================**/
/* FT58AZXX | WI_AL2G | 24/06/11 | ATMARAM                           **/
/* REASON   | IMAPCTED BY DMD AL14                                   **/
/* PACKAGE  | AL02G/001                                              **/
/*===================================================================**/
/* FT58AZXX | WI_AL2G | 19/07/11 | ATMARAM                           **/
/* REASON   | IMAPCTED BY DMD AL15                                   **/
/* PACKAGE  | AL15B/001                                              **/
/*===================================================================**/
/* FT58AZXX | WI_ALFB | 21/09/2011 | ATMARAM                         **/
/* REASON   | PM.CHH IMPACT & 3BKA36CBR312499                        **/
/* PACKAGE  | AL15D/001                                              **/
/*===================================================================**/
/* FT58AZXX | WI_AL04 | 08/11/2011 | SWARNA                          **/
/* REASON   | PM.CHH IMPACT & DMD IMPACT                             **/
/* PACKAGE  | AL04A/001                                              **/
/*===================================================================**/
/* FT58AZXX | WI_AL04 | 23/12/2011 | BALA                            **/
/* REASON   | PM.CHH IMPACT & DMD IMPACT FOR CR20/313054             **/
/* PACKAGE  | AL04B/001                                              **/
/*===================================================================**/
/* FT58AZXX | WI_AL04 | 12/01/2012 | KARTEEK                         **/
/* REASON   | IMPACTED FOR DCTPD00614277                             **/
/* PACKAGE  | AL04C/001                                              **/
/*===================================================================**/
/* FT58AZXX | WI_AL04 | 07/03/2012 | BALA                            **/
/* REASON   | IMPACTED FOR DCTPD00646615                             **/
/* PACKAGE  | AL04D/002                                              **/
/*===================================================================**/
/* FT58AZXX | WI_AL4F | 17/02/2012 | KAVYA                           **/
/* REASON   | IMPACTED FOR DCT633131.01 & CRI596704.01               **/
/* PACKAGE  | AL04E/001                                              **/
/*===================================================================**/
/* FT58AZXX | WI_AL4G | 12/03/2012 |                                 **/
/* REASON   | IMPACTED FOR CR649460, DCT646615                       **/
/*              & DCT609262                                          **/
/* PACKAGE  | AL04F/001                                              **/
/*===================================================================**/
/* FT58AZXX | WI_AL04 | 15/03/2012 | KARTEEK                         **/
/* REASON   | IMPACTED FOR DCTPD00652631                             **/
/* PACKAGE  | AL04G/001                                              **/
/*===================================================================**/
/* FT58AZXX | WI_ALEA | 18/05/2012 | KAVYA                           **/
/* REASON   | IMPACTED FOR DMD AL95, CR599628 & PM.CHH               **/
/* PACKAGE  | AL16F/001                                              **/
/*===================================================================**/
/* FT58AZXX | WI_AL6D | 16/06/2012 | KAVYA                           **/
/* REASON   | IMPACTED FOR DMD AL62, DCTPD00605005 & PM.CHH          **/
/* PACKAGE  | AL06B/001                                              **/
/*===================================================================**/
/* FT58AZXX | WI_AL6E | 29/06/2012 | KAVYA                           **/
/* REASON   | IMPACTED FOR DMD AL63, 2. DCTPD00754169 & PM.CHH       **/
/* PACKAGE  | AL06C/001                                              **/
/*===================================================================**/
/* FT58AZAL | WI_AL6F | 20/07/2012 | NUPUR                           **/
/* REASON   |DCTPD00763810,AL04K merge & PM.CHH                      **/ 
/* PACKAGE  | AL06D/001                                              **/
/*===================================================================**/
/* FT58AZAL | WI_AL8B | 11/01/2013 | INDIRA                          **/
/* REASON   | DCTPD00879393                                          **/ 
/* PACKAGE  | AL08H/001                                              **/

/**********************************************************************/
/*                                                                    */
/*  ERROR POINTS FOR FMM - MSF-CC_DATA_COLLECTOR                      */
/*                                                                    */
/**********************************************************************/
/*ERROR *  INPUT MSG * ERROR REASON   * ERROR TYPE                    */
/*POINT *   OR CALL  *                *                               */
/**********************************************************************/
/* 01   * Q_S0024    * NO RSMB        * NREC, M_ERT1068               */

/* 02   * Q_S0108    * MOD R_PM_FILES * REC,  M_ERT0009               */
/* 03   * Q_S0112    * MOD R_PM_ACT   * REC,  M_ERT0009               */
/* 04   * Q_S0112    * MOD R_PM_ACT   * REC,  M_ERT0009               */
/* 05   * Q_S0112    * GET R_PM_ACT   * REC,  M_ERT0009               */
/* 06   * Q_S0116    * GET R_PM_FILES * REC,  M_ERT0009               */
/* 07   * Q_S0304    * 0125_WRITE_REC * REC,  M_ERT0039               */
/* 08   * Q_S0308    * 0123_READ_REC  * REC,  M_ERT0039               */
/* 09   * Q_S0397    * INVALID SEQ NBR* REC,  M_ERT0039               */
/* 10   * Q_S0400    * INVALID LDC TYP* REC,  M_ERT0019               */

/* 11   * Q_S0404    * INVALID SEQ NBR* REC,  M_ERT0019               */
/* 12   * Q_S0405    * INVALID LDC    * REC,  M_ERT0019               */
/* 13   * Q_S0410    * NULL HISTORY   * REC,  M_ERT0006               */
/* 14   * Q_S0451    * INVAL NBR CELLS* REC,  M_ERT0019               */
/* 15   * Q_S0452    * INVAL NBR CELLS* REC,  M_ERT0019               */
/* 16   * Q_S0453    * INVAL NBR CELLS* REC,  M_ERT0019               */
/* 17   * Q_S0454    * INVAL NBR CELLS* REC,  M_ERT0019               */
/* 18   * Q_S0460    * INVAL NBR CELLS* REC,  M_ERT0019               */
/* 19   * Q_S0465    * INVAL NBR CELLS* REC,  M_ERT0019               */

/* 21   * Q_S0473    * INVAL NBR CELLS* REC,  M_ERT0019               */
/* 22   * Q_S0474    * INVAL NBR CELLS* REC,  M_ERT0019               */
/* 23   * Q_S0485    * INVAL NBR CELLS* REC,  M_ERT0019               */
/* 25   * Q_S0490    * INVAL NBR CELLS* REC,  M_ERT0019               */

/* 30   * Q_S0506    * INVAL NBR CELLS* REC,  M_ERT0019               */
/* 31   * Q_S0509    * INVAL NBR CELLS* REC,  M_ERT0019               */
/* 32   * Q_S0509    * INVAL NBR CELLS* REC,  M_ERT0019               */
/* 33   * Q_S0512    * INVAL NBR CELLS* REC,  M_ERT0019               */
/* 34   * Q_S0513    * INVAL NBR CELLS* REC,  M_ERT0019               */
/* 35   * Q_S0514    * INVAL NBR CELLS* REC,  M_ERT0019               */
/* 36   * Q_S0516    * INVAL NBR CELLS* REC,  M_ERT0019               */
/* 37   * Q_S0522    * INVAL NBR CELLS* REC,  M_ERT0019               */
/* 38   * Q_S0525    * INVAL NBR TRXS * REC,  M_ERT0019               */
/* 39   * Q_S0530    * INVAL NBR TRXS * REC,  M_ERT0019               */

/* 40   * Q_S0550    * INVAL NBR CELLS* REC,  M_ERT0019               */
/* 41   * Q_S0550    * INVAL NBR CELLS* REC,  M_ERT0019               */
/* 42   * Q_S0550    * INVAL NBR CELLS* REC,  M_ERT0019               */
/* 43   * Q_S0550    * INVAL NBR CELLS* REC,  M_ERT0019               */
/* 44   * Q_S0550    * INVAL NBR CELLS* REC,  M_ERT0019               */
/* 44   * Q_S0580    * INVAL NBR CELLS* REC,  M_ERT0019               */
/* 45   * Q_S0581    * INVAL NBR CELLS* REC,  M_ERT0019               */
/* 46   * Q_S0585    * INVAL NBR CELLS* REC,  M_ERT0019               */
/* 47   * Q_S0586    * INVAL NBR CELLS* REC,  M_ERT0019               */
/* 48   * Q_S0587    * INVAL NBR CELLS* REC,  M_ERT0019               */
/* 49   * Q_S0590    * INVAL NBR TRXS * REC,  M_ERT0019               */

/* 50   * Q_S0595    * INVAL NBR TRXS * REC,  M_ERT0019               */

/* 60   * Q_S0814    * 0128_CLOSE_FILE* REC,  M_ERT0040               */
/* 61   * Q_S0818    * 0122_FILE_OPEN * REC,  M_ERT0038               */

/* 70   * Q_S1000    * UNEX MSG 1080  * REC,  M_ERT0019               */
/* 71   * Q_S1000    * UNEX MSG 1091  * REC,  M_ERT0019               */
/*      *            *                *                               */
/**********************************************************************/

/**********************************************************************/
/*                                                                    */
/*          1.   HEADER SECTION                                       */
/*                                                                    */
/**********************************************************************/
/**********************************************************************/
/*                                                                    */
/*          2.   DESCRIPTOR REFERENCE SECTION                         */
/*                                                                    */
/**********************************************************************/

DEFINE_FMM USING DESCRIPTOR FT7DALXX;

/**********************************************************************/
/*              SUPERVISOR PART                                       */
/**********************************************************************/
/**********************************************************************/
/*                                                                    */
/*          4.   SUPERVISOR MODULE                                    */
/*                                                                    */
/**********************************************************************/

H_S_FT58ZZ_CC_DATA_COLLECTOR: SUPERVISOR_MODULE;

/**********************************************************************/
/*                                                                    */
/*          4.1  INCLUDE REQUIRED OS MODES,                           */
/*               SYNONYMS, AND ALL OS PRIMITIVES                      */
/*                                                                    */
/**********************************************************************/

/* MX */
INCLUDE MPINC (FY32ZZXX);

/**********************************************************************/
/*                                                                    */
/*          4.2  DATA SUBMODEL OR RELATION INVOCATION                 */
/*                                                                    */
/**********************************************************************/
INVOKE RELATION (R_AL_CLDAT,
                 R_AL_CLGBL,
                 R_BTS_TEL,
                 R_CE_DYST,
                 R_CELL_MGT,
                 R_CIC_CODE,
                 R_CONF_CE,
                 R_N7_CONF,
                 R_OML_LNK,
                 R_PM_ACT,
                 R_PM_FILES,
                 R_PM_SC_G2,
                 R_RSL_LNK,
                 R_TRX_MGT,
                 R_BSS_PAR2,
                 R_F_ACCESS,
                 R_CP_LOG, /* ADDED FOR FR226053 */
                 R_TP_HW,
                 R_BSC_INFO,/*MXMR2*/
                 R_ABIS_INF,/*MXMR2*/
                 R_BEQ_MGT,/*MXMR2*/
                 R_TC_MGT); /*MXMR2*/

/**********************************************************************/
/*                                                                    */
/*          4.3  INVOKE REQUIRED MODES AND SYNONYMS                   */
/*                                                                    */
/**********************************************************************/
INVOKE MODE    (M_ACCESS,
                M_ALERTER_ALARM_DATA,
                M_CPL_CODE,
                M_EBT0009_DBASE_ACC_FAIL,
                M_EBT0019_INC_MESS_DATA,
                M_EBT0038_OPEN_FILE_FLT,
                M_EBT0039_READ_REC_FLT,
                M_EBT0040_CLOSE_FILE_FLT,
                M_FCB_INFO,
                M_MB_OWNER,
                M_MEM_PARMS,
                M_ORIGINAL_ROUTE_INFO,
                M_PM_CELL_ID_CGI,
                M_LONG,
                M_PM_CNTR,
                M_PM_RFM_T180_SERV_CTRS,
               /*START: DCT 649460 W.A.*/
               /* M_PM_RFM_UB_T180,*/
               /*END: DCT 649460 W.A.*/
                M_PM_TCH_T180_SERV_CTRS,
               /*START: DCT 649460 W.A.*/
               /* M_PM_TCH_UB_T180,*/
               /*END: DCT 649460 W.A.*/
                M_PM_UB_T180,
                M_RESULT,
                M_SYS_REC_HEAD,
                M_TIMER_PARMS,
                M_USDA,
                M_PROC_CODE, /*ADD BY ZHUJ FOR WITTS5724*/
                M_CP_LOG_INDEX,/*ADDED FOR FR226053*/
                M_PM_LINK_TYPE,
                /*START: VAMOS MODE NTO OK*/
                /*commented in AL11*/
                M_TCU_TYPE_37_CELL,
                M_TCU_TYPE32_ARRAY,
                M_TCU_TYPE34_ARRAY,
                /* M_TCU_TYPE_110_PER_CELL, */
                M_ALERTER_CNTRS,
                M_TCU_CNTRS_TYPE_19,
                M_TCU_TYPE_37_PER_CELL,
                /*END: VAMOS MODE NTO OK*/
                M_TYPE_110_CTRS_9,
                /* BEGIN: CR 605005 */
                M_TYPE_110_CTRS_10,
                M_MXPF_CPI_MPPMSPMCPUOVLDRDATA,
                M_INVOKE_ID,
                M_MXPF_FMMID,
                M_MXPF_SRVCODE,
                M_MXPF_TIMEVALUE,
                M_MXPF_TIMEVALUE_CONTENT,
                M_MXPF_PMSBDTYPE,
                M_MXPF_GEOADDR,
                M_MXPF_BDCPUOVLINDIC,
                M_MXPF_CPIMSGPAYLOADHEADER,
                /* END: CR 605005 */
                );

INVOKE MODE (   M_PM_DATA_VALIDITY,
                M_PM_LIST_OF_CELLS,
                M_LAC_CI,
                M_FDIR,
                M_BSC_RELEASE,
                M_GEN_TIME,
                M_RESULT,
                M_FILE_NAMEVERSION,
                M_RTTRACE_CLASS, 
                M_RTTRACE_SCLASS_PM,
                M_TRC_ID,       /*FOR RT TRACE*/
                M_TRC_INFO,     /*FOR RT TRACE*/
                M_TRC_FILENAME,  /*FOR RT TRACE*/
                /*A-FLEX CHANGES*/
                /* Commented for CR20/279046*/ 
                /*M_TCU_TYPE_110_PER_MSC,*/
                /* Commneted for CR20/279046*/
                M_TCU_TYPE_110_NRI_ARR,
                /*A-FLEX CHANGES*/
                M_R_PM_ACT,
                M_R_PM_SC_G2,
                M_R_RSL_LNK,
                M_R_CE_DYST,
                M_R_TRX_MGT,
		/* BEGIN CR:745699 */
                M_TCU_TYPE_110_OLC_LONG,
                M_TCU_TYPE_110_OLC_INT,
                M_TCH_TYPE_110_OLC
                /* END CR:745699 */
                );


INVOKE SYNONYM (M_ACT_TAKEOVER_SIG,
                M_CPR_ACTIVE,
                M_CPR_STANDBY,
                M_DB_NFTUPIS,
                M_DB_NFTUPLE,
                M_DB_TUPHELD,
                M_DB_SUCCESS,
                M_ERC5_USER_NREC,
                M_ERC6_USER_REC,
                M_ERT0009_DBASE_ACC_FAIL,
                M_ERT1068_NO_UMEM_BLOCK,
                M_ERT0038_OPEN_FILE_FLT,
                M_ERT0039_READ_REC_FLT,
                M_ERT0040_CLOSE_FILE_FLT,
                M_ERT0019_INC_MESS_DATA,
                M_FMM_ID_NULL,
                M_INI_RESTART,
                M_INI_SYST_REST,
                M_LCE_ID_NULL,
                M_NO_BUFFER,
                M_SBLT_OML,
                M_SBLT_RSL,
                M_SBLT_TSL,
                M_SBLT_NULL,
		 M_FS_CPI,
                M_VCE_ID_CPI,
                /* BEGIN: CR 605005 */
                M_MXPF_MPPMSPMCPUOVLD_SRVCODE
                /* END: CR 605005 */);

INVOKE SYNONYM (M_FS_DER_RESULTS_HANDLER,
                M_FS_DUMMY,
                M_FS_MEAS_COORDINATOR,
                M_FS_CENTRAL_ALERTER,
                M_FI_CC_DATA_COLLECTOR,
                M_FS_DTC_TRF_LDC,
                M_FS_TCU_TRF_LDC,
                M_FS_CPR_N_7_LDC,
                M_FS_DTC_N_7_LDC,
                M_FS_LME_X25,
                M_FS_SMS_CB_MASTER,
                M_FS_TCHRM_LDC,
                M_MAX_ALERTER_CELLS_TO_REPORT,
                M_NULL_CELL_IDX,
                M_NULL_CELL_ID,
                M_PM_MAX_N7,
                M_TIMER_IDENT_NULL,
                M_RID_R_PM_ACT,
                M_RID_R_PM_SC_G2,
                M_RID_R_PM_FILES,
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
         /*     M_BSC_RELEASE_REL_B9 */
                M_BSC_RELEASE_REL_B10,
                M_FS_TC_MGT,
                M_BSS_TRANSPORT_MODE_IP,/*MXMR2*/
             /*AM START:CR650353*/
                M_RID_R_SCCP_CNF,
  		M_MAX_RRH_PER_OLC,
                M_MAX_TRX_PER_OLC,
             /*AM END:CR650353*/
             /*START : DTC513 overload alarm*/
                M_RID_R_RSL_LNK,
		M_RID_R_CE_DYST,
                M_RID_R_TRX_MGT
             /*END : DTC513 overload alarm */
                 );
/* END: ADD-WIPRO-B10-MR1-CHANGE */
/*RT Trace*/        
SEIZE TRC_BSC_PM1 <> C ( 
                           M_TRC_FILENAME LOC, 
                           LONG_INT, 
                           LONG_INT,
                           M_TRC_ID LOC,
                           M_TRC_INFO LOC,
                           LONG_INT,
                           LONG_INT,
                           LONG_INT);
SEIZE TRC_BSC_PM2 <> C ( 
                           M_TRC_FILENAME LOC, 
                           LONG_INT, 
                           LONG_INT,
                           M_TRC_ID LOC,
                           M_TRC_INFO LOC,
                           LONG_INT,
                           LONG_INT,
                           LONG_INT);        
SEIZE TRC_BSC_PM3 <> C ( 
                           M_TRC_FILENAME LOC, 
                           LONG_INT, 
                           LONG_INT,
                           M_TRC_ID LOC,
                           M_TRC_INFO LOC,
                           LONG_INT,
                           LONG_INT,
                           LONG_INT);
SEIZE TRC_BSC_API1 <> C ( 
                           M_TRC_FILENAME LOC, 
                           LONG_INT, 
                           LONG_INT,
                           M_TRC_ID LOC,
                           M_TRC_INFO LOC,
                           LONG_INT,
                           LONG_INT,
                           LONG_INT);  
SEIZE TRC_BSC_API2 <> C ( 
                           M_TRC_FILENAME LOC, 
                           LONG_INT, 
                           LONG_INT,
                           M_TRC_ID LOC,
                           M_TRC_INFO LOC,
                           LONG_INT,
                           LONG_INT,
                           LONG_INT);        
SEIZE TRC_BSC_BUF1 <> C ( M_TRC_FILENAME LOC,
                           LONG_INT,
                           LONG_INT,
                           LONG_INT,
                           M_TRC_ID LOC,
                           PTR,
                           INT
                          );
SEIZE TRC_BSC_BUF2 <> C ( M_TRC_FILENAME LOC,
                           LONG_INT,
                           LONG_INT,
                           LONG_INT,
                           M_TRC_ID LOC,
                           PTR,
                           INT
                          );
SEIZE TRC_BSC_BUF3 <> C ( M_TRC_FILENAME LOC,
                           LONG_INT,
                           LONG_INT,
                           LONG_INT,
                           M_TRC_ID LOC,
                           PTR,
                           INT
                          );


/**********************************************************************/
/*                                                                    */
/*          4.4  LOCAL MODE DEFINITIONS                               */
/*                                                                    */
/**********************************************************************/
/**********************************************************************/
/*                      REAL TIME TRACE                               */
/**********************************************************************/

/*ADD BY ZHUJ BEGIN*/
SYN FILENAME M_TRC_FILENAME = 'CCDC_FMM       ';
NEWMODE ZM_TRACEID = ARRAY(SET(
                             IMSD,/*INTERNAL SENDING MESSAGE*/
                             IMCS,/*INTERNAL CONSUME MESSGE*/
                             EMSN,/*INTER-PROCESS SENDING MESSAGE*/
                             EMRV,/*INTER-PROCESS RECEIVED MESSAGE*/
                             ERIR,/*DATA RECIVED FROM INTERFACE WRONG*/
                             ERRC,/*ERROR WHICH LEADS TO SYSTEM CRASH*/
                             NORM,/*NORMAL TRACE*/
                             DUMP,/*NORMAL MEMORY DUMP*/
                             WARN)/*WARNING MESSAGE*/
                             ) M_TRC_ID;
SYN TRACEID ZM_TRACEID = (:
                          (IMSD): 'IMSD ',
                          (IMCS): 'IMCS ',
                          (EMSN): 'EMSN ',
                          (EMRV): 'EMRV ',
                          (ERIR): 'ERIR ',
                          (ERRC): 'ERRC ',
                          (NORM): 'NORM ',
                          (DUMP): 'DUMP ',
                          (WARN): 'WARN '
                         :);  
NEWMODE ZM_INT_TO_LN_INT = STRUCT (CASE OF
                      : ZB_LONG_INT LONG_INT,/* MODE CONVERSION */ 
                      : ZB_LOW_INT  INT,
                        ZB_HIGH_INT INT      /* LONG INTEGER.    */   
                      ESAC);                  	                        
                         
/*                                                                    */
/*
 * CUMULATIVE COUNTER IMAGES - THESE POINTERS REFERENCE DATASEGMENT
 * =========================   STRUCTURES ARE THOSE OF THE HISTORY
 *                             FILE.
 */


SEIZE GET_INVOKE_ID   <> C (M_INVOKE_ID LOC);

#ifdef  MXELITE   
SYN NULL = PTR(H'0000_0000);
#endif

NEWMODE M_T1_1_PTR   = REF CM_FY32_HIS_TYPE_01_CELL_BUF;
NEWMODE M_T1_2_PTR   = REF CM_FY32_HIS_TYPE_01_TRX_BUF;

NEWMODE M_T2_PTR     = REF CM_FY32_HIS_TYPE_02_BUF;

NEWMODE M_T3_PTR     = REF CM_FY32_HIS_TYPE_03_BUF;

NEWMODE M_T4_PTR     = REF CM_FY32_HIS_TYPE_04_BUF;

NEWMODE M_T5_PTR     = REF CM_FY32_HIS_TYPE_05A_BUF;
NEWMODE M_T5_2_PTR   = REF CM_FY32_HIS_TYPE_05B_BUF;

NEWMODE M_T6_PTR     = REF CM_FY32_HIS_TYPE_06_BUF;

NEWMODE M_T7_PTR     = REF CM_FY32_HIS_TYPE_07_BUF;
/*CR36/236932*/
NEWMODE M_T72_PTR     = REF CM_FY32_HIS_TYPE_072_BUF;
/*CR36/236932*/
NEWMODE M_T8_PTR     = REF CM_FY32_HIS_TYPE_08_BUF;

NEWMODE M_T9_PTR     = REF CM_FY32_HIS_TYPE_09_BUF;

NEWMODE M_T18_PTR    = REF CM_FY32_HIS_TYPE_18_BSC_BUF;
NEWMODE M_T18_2_PTR  = REF CM_FY32_HIS_TYPE_18_CIC_BUF;

NEWMODE M_T19_PTR    = REF CM_FY32_HIS_TYPE_19_BUF;

NEWMODE M_T25_PTR    = REF CM_FY32_HIS_TYPE_25_BUF;

NEWMODE M_T26_PTR    = REF CM_FY32_HIS_TYPE_26A_BUF;
NEWMODE M_T26_2_PTR  = REF CM_FY32_HIS_TYPE_26B_BUF;

NEWMODE M_T27_PTR    = REF CM_FY32_HIS_TYPE_27_BUF;

NEWMODE M_T28_PTR    = REF CM_FY32_HIS_TYPE_28_BUF;
NEWMODE M_T29_PTR    = REF CM_FY32_HIS_TYPE_29_BUF;
NEWMODE M_T30_PTR    = REF M_HIS_TYPE_30;

NEWMODE M_T32_PTR    = REF CM_FY32_HIS_TYPE_32_BUF;

NEWMODE M_T33_PTR    = REF CM_FY32_HIS_TYPE_33_BUF;

NEWMODE M_T34_PTR    = REF CM_FY32_HIS_TYPE_34_1_BUF;
NEWMODE M_T34_2_PTR  = REF CM_FY32_HIS_TYPE_34_2_BUF;
/* BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE */  
NEWMODE M_T35_0_PTR    = REF CM_FY32_HIS_TYPE_35_0_BUF;
NEWMODE M_T35_4_PTR    = REF CM_FY32_HIS_TYPE_35_4_BUF;
/* CR20/225233 */
NEWMODE M_T35_3_PTR    = REF CM_FY32_HIS_TYPE_35_3_BUF;
/* CR20/225233 */
NEWMODE M_T35_5_PTR    = REF CM_FY32_HIS_TYPE_35_5_BUF;
/*START : CR20/284751 BTS FRQ SYNCH */
NEWMODE M_T35_6_PTR    = REF CM_FY32_HIS_TYPE_35_6_BUF;
/*END : CR20/284751 BTS FRQ SYNCH   */
/* START : WIPRO B11 IP MR0 PKG1 */
NEWMODE M_T35_7_PTR    = REF CM_FY32_HIS_TYPE_35_7_BUF;
NEWMODE M_T35_8_PTR    = REF CM_FY32_HIS_TYPE_35_8_BUF;
/*START: IURG FEATURE*/
NEWMODE M_T36_PTR    = REF CM_FY32_HIS_TYPE_36_BUF;
/*END : IURG FEATURE*/
/* BEGIN  : B12 VAMOS */
NEWMODE M_T37_0_PTR    = REF CM_FY32_HIS_TYPE_37_0_BUF;
/*CRI # 00823248.01*/
NEWMODE M_T37_0_TEMP_PTR    = REF CM_FY32_TEMP_37_0_BUF;

/*begin CR1098364 MC1408/MC1409 improv*/
NEWMODE ZM_PM_VMC_NB_CTRS = STRUCT (
          B_VMC001A     LONG_INT,
          B_VMC001B     LONG_INT,
          B_VMC001C     LONG_INT,
          B_VMC001D     LONG_INT
          );
NEWMODE ZM_PM_VMS_NB_CTRS_ARRAY = ARRAY (1 : M_MAX_CELLS_PER_BSC)
                     ZM_PM_VMC_NB_CTRS;
                     
NEWMODE ZM_PM_VMC_NB_POLL_CTRS = STRUCT (
          ZB_VMC001A     LONG_INT,
          ZB_VMC001B     LONG_INT,
          ZB_VMC001C     LONG_INT,
          ZB_VMC001D     LONG_INT
          );                          

NEWMODE ZM_TMP_MC1408X_MC1409X_CNTRS = STRUCT (
          B_CNTR_C1408A     M_STA_DPVAL,
          B_CNTR_C1408B     M_STA_DPVAL,
          B_CNTR_C1408C     M_STA_DPVAL,
          B_CNTR_C1408D     M_STA_DPVAL,
          B_CNTR_C1409A     M_STA_DPVAL,
          B_CNTR_C1409B     M_STA_DPVAL,
          B_CNTR_C1409C     M_STA_DPVAL,
          B_CNTR_C1409D     M_STA_DPVAL
          );

NEWMODE ZM_TMP_MC1408X_MC1409X_CTRS_ARRAY = 
                        ARRAY(1 : M_MAX_CELLS_PER_BSC)
                         ZM_TMP_MC1408X_MC1409X_CNTRS;
/*end CR1098364 MC1408/MC1409 improv*/

/*begin CR1098364 MC1408/MC1409 improv*/
NEWMODE M_T37_VMC_001_PTR    = REF ZM_PM_VMS_NB_CTRS_ARRAY;
NEWMODE M_TMP_MC1408_9_PTR   = REF ZM_TMP_MC1408X_MC1409X_CTRS_ARRAY;
/*end CR1098364 MC1408/MC1409 improv*/

NEWMODE M_T37_1_PTR    = REF CM_FY32_HIS_TYPE_37_1_BUF;
/* END : B12 VAMOS */
/* END : WIPRO B11 IP MR0 PKG1 */
/* END: ADD-WIPRO-B10-MX-MR2-CHANGE */  
NEWMODE M_T110_1_PTR = REF CM_FY32_HIS_TYPE_110_1A_BUF;
NEWMODE M_T110_1_2_PTR = REF CM_FY32_HIS_TYPE_110_1B_BUF;

NEWMODE M_T110_2_PTR = REF CM_FY32_HIS_TYPE_110_2_BUF;
NEWMODE M_T110_3_PTR = REF CM_FY32_HIS_TYPE_110_3_BUF;
NEWMODE M_T110_4_PTR = REF CM_FY32_HIS_TYPE_110_4_BUF;
/*START: MC COUNTERS*/
NEWMODE M_T110_4_2_PTR = REF CM_FY32_HIS_TYPE_110_4_2_BUF;
/*END: MC COUNTERS*/
NEWMODE M_T110_5_PTR = REF CM_FY32_HIS_TYPE_110_5_BUF;
NEWMODE M_T110_6_PTR = REF CM_FY32_HIS_TYPE_110_6_BUF;
/* CR20/209493 START */
/* NEWMODE M_T110_7_PTR = REF CM_FY32_HIS_TYPE_110_7_BUF; */
NEWMODE M_T110_7_PTR = REF CM_FY32_HIS_TYPE_110_7_1A_BUF;
NEWMODE M_T110_7_2_PTR = REF CM_FY32_HIS_TYPE_110_7_1B_BUF;
/* CR20/209493 END */
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
NEWMODE M_T110_8_PTR = REF CM_FY32_HIS_TYPE_110_8_BUF;
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
/*ADDED FOR GSL COUNTERS MEMO*/
NEWMODE M_T110_9_PTR = REF CM_FY32_HIS_TYPE_110_9_BUF;
/*ADDED FOR GSL COUNTERS MEMO*/
/*ADDED FOR A-FLEX NRI COUNTERS*/
NEWMODE M_T110_10_PTR = REF CM_FY32_HIS_TYPE_110_10_BUF;
/*ADDED FOR A-FLEX NRI COUNTERS*/
/*START : AUPOIP FEATURE */
NEWMODE M_T110_11_PTR = REF CM_FY32_HIS_TYPE_110_11_BUF;
NEWMODE M_T110_12_PTR = REF CM_FY32_HIS_TYPE_110_12_BUF;
/* END : AUPOIP FEATURE */

/*BEGIN : CR20_313054 */
NEWMODE M_T110_13_PTR = REF CM_FY32_HIS_TYPE_110_13_BUF;
/*END : CR20_313054 */

/*BEGIN : CR 605005 */
NEWMODE M_T110_14_PTR = REF CM_FY32_HIS_TYPE_110_14_BUF;
/*END : CR 605005 */

/*BEGIN : CR :745699*/
NEWMODE M_T110_15_1_PTR = REF CM_FY32_HIS_TYPE_110_15_1_BUF;
NEWMODE M_T110_15_2_PTR = REF CM_FY32_HIS_TYPE_110_15_2_BUF;
/*END : CR:745699*/

/*begin CR1238146 A-GPS*/
NEWMODE M_T110_18_PTR    = REF CM_FY32_HIS_TYPE_110_18_BUF;
/*end CR1238146 A-GPS*/

/*START Rework_CRI # 01037014.01 */
NEWMODE M_T110_MC1531_PTR = REF ZM_PM_TCH_CELL_CTRS_1531;
/*END Rework_CRI # 01037014.01*/

/*START CR MOCN */
NEWMODE M_T110_17_PTR = REF CM_FY32_HIS_TYPE_110_17_BUF;
/*END CR MOCN */


NEWMODE M_T180_1_PTR = REF ZM_TRAFF_FLOW_CELL_INFO;
NEWMODE M_T180_2_PTR = REF ZM_TRAFF_FLOW_DATA;

/* CR20/209493 START */
/* NEWMODE ZM_DS_PTR_ARR  = ARRAY (1:38) PTR; */
/* START : WIPRO B11 IP MR0 PKG1 */
/* NEWMODE ZM_DS_PTR_ARR  = ARRAY (1:39) PTR; */
/*CR36/236932*/
/*NEWMODE ZM_DS_PTR_ARR  = ARRAY (1:45) PTR; */
/*CR36/236932*/
/*AFLEX CHANGES */
/*START: MC Counters*/
/*NEWMODE ZM_DS_PTR_ARR  = ARRAY (1:46) PTR;*/
/*START: CR20/284751 BTS FRQ SYNCH */
/*NEWMODE ZM_DS_PTR_ARR  = ARRAY (1:47) PTR;*/
/*NEWMODE ZM_DS_PTR_ARR  = ARRAY (1:48) PTR;*/
/*END: CR20/284751 BTS FRQ SYNCH*/
/*START : CR302024 RFI4448*/
/*START : IURG FEATURE*/
/*NEWMODE ZM_DS_PTR_ARR  = ARRAY (1:47) PTR;*/
/*NEWMODE ZM_DS_PTR_ARR  = ARRAY (1:49) PTR;*/
/* START : B12 VAMOS */
/*CHANGE : CR20/313054 */
/*CHANGE : CR 605005 */	
/* BEGIN CR:745699 */
/*NEWMODE ZM_DS_PTR_ARR  = ARRAY (1:55) PTR;*/
/*NEWMODE ZM_DS_PTR_ARR  = ARRAY (1:58) PTR;*/
/*NEWMODE ZM_DS_PTR_ARR  = ARRAY (1:59) PTR;*/
/*START CR MOCN */
/*NEWMODE ZM_DS_PTR_ARR  = ARRAY (1:62) PTR;*/
/*NEWMODE ZM_DS_PTR_ARR  = ARRAY (1:63) PTR;*/
/*END CR MOCN */
NEWMODE ZM_DS_PTR_ARR  = ARRAY (1:64) PTR;
/*END CR 745699 */ 
/* END : B12 VAMOS */
/*END :IURG FEATURE*/
/*END : CR302024 RFI4448*/
/*END: MC Counters*/
/*AFLEX CHANGES*/
/* END : WIPRO B11 IP MR0 PKG1 */
/* CR20/209493 END */
/*
 * TCU ALERTER COUNTERS (KEPT IN DS)
 */

NEWMODE M_ALERT = STRUCT(
        B_TA_V        M_PM_DATA_VALIDITY,
        B_CELL_IDX    M_CELL_IDX,
        B_ALERT_CNT   M_ALERTER_CNTRS);

NEWMODE M_CCI_ALERTER = ARRAY (1:CM_FY32_MAX_CELLS_PER_BSC)
                                 M_ALERT;

/*
 * CCDC POLLING STATE - THE POLLING STATE CONSISTS OF A GLOBAL DATA
 * ==================   STRUCTURE, EACH POSITION IN WHICH IS REFERRED
 *                      TO AS A POLLING SLOT.
 */
SYNMODE ZM_INT   = INT;
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
SYNMODE ZM_CELL_INDEX_VALUE = RANGE(1L:700L/*500CR312499*/);
SYNMODE ZM_TRX_INDEX_VALUE = RANGE(1L:1000L);
/* END: ADD-WIPRO-B10-MR1-CHANGE */
SYNMODE ZM_CELL_INDEX_VALUE_INT = RANGE(1:700);

SYN ZM_TC_ACK_RCVD BOOL = FALSE;
/* START : WIPRO B11 IP MR0 PKG1 */
SYN ZM_TC_IP_ACK_RCVD BOOL = FALSE;
/* SRINIVAS: CHANGED DUE TO MODE INCOMPATIBLILITY */
/* IN CALL TO INTERFACE PROC */
/*NEWMODE ZM_TC_SET = SET ( E_TC_MTP2,
                          E_TC_IP,
                          E_INVALID_TC_MTP2,
                          E_INVALID_TC_IP,
                          E_TC_MTP2_TIMEOUT,
                          E_TC_IP_TIMEOUT); */

SYN E_TC_MTP2 = 0;
SYN E_TC_IP   = 1;
/* START: 3BKA36CBR236941*/
/*SYN E_INVALID_TC_MTP2 = 2;
SYN E_INVALID_TC_IP   = 3;
SYN E_TC_MTP2_TIMEOUT = 4;
SYN E_TC_IP_TIMEOUT = 5;*/
/* END: 3BKA36CBR236941*/

/* END : WIPRO B11 IP MR0 PKG1 */
SYN ZS_NULL_PROC_INST ZM_PROC_INST = (:.ZB_LCE_ID   :M_LCE_ID_NULL,
                                       .ZB_LDC_TYPE: M_FS_DUMMY,
                                       .ZB_REF_NBR:  ZS_NULL,
                                       .ZB_TIMER_ID: M_TIMER_IDENT_NULL,
                         /*BEGIN CR #1529787 DELAY 0.1S FOR EVERY PROC*/
                                 .ZB_DELAY_TIMER_ID: M_TIMER_IDENT_NULL,
                         /*END CR #1529787*/ 
                                       .ZB_SEQ_NBR:  1,
                                       .ZB_POLL_STEP: ZE_NO_POLL,
                                       .ZB_NB_ATTEMPTS: 0,
                               /* BEGIN: ADD-WIPRO-B10-MR2-CHANGE */
                                       .ZB_TC_ACK_RCVD: ZM_TC_ACK_RCVD,
                               /* START : WIPRO B11 IP MR0 PKG1 */
                                       .ZB_TC_IP_ACK_RCVD: 
                                                   ZM_TC_IP_ACK_RCVD,
                               /* END : WIPRO B11 IP MR0 PKG1 */
                               /*: for FR 3BKA36FBR224825*/
                                       .ZB_TC_ID:0,
                               /*: for FR 3BKA36FBR224825*/
                               /* END: ADD-WIPRO-B10-MR2-CHANGE */
			   /* BEGIN: CR 605005 */
			   .ZB_SERVICE_ID: ZS_NULL
			   /* END : CR 605005 */
                                    :);

SYN ZS_INIT_VAL_MATE ZM_VAL_MATE = (:.ZB_LDC_TYPE: M_FMM_SELECTOR(0),
                                     .ZB_LCE_ID:   M_LCE_ID_NULL,
                                     .ZB_VAL:      M_BYTE(H'FF)
                                     :);
NEWMODE ZM_PROC_INST = STRUCT(
                      ZB_LCE_ID      M_LCE_ID,
                      ZB_LDC_TYPE    M_FMM_SELECTOR,
                      ZB_REF_NBR     INT,
                      ZB_TIMER_ID    M_TIMER_IDENT,
        /*BEGIN CR #1529787: DELAY 0.1S FOR EVERY PROC */
                  ZB_DELAY_TIMER_ID    M_TIMER_IDENT,
       /*END CR #1529787*/ 
                      ZB_SEQ_NBR     INT,
                      ZB_POLL_STEP   ZM_CCDC_POLL_SEQ,
                      ZB_NB_ATTEMPTS INT,
/* BEGIN: ADD-WIPRO-B10-MR2-CHANGE */                      
/* START : WIPRO B11 IP MR0 PKG1 */
                      ZB_TC_ACK_RCVD BOOL,
                      ZB_TC_IP_ACK_RCVD BOOL,
                      /*: for FR 3BKA36FBR224825*/
                      ZB_TC_ID   M_TC_ID,
                      /*: for FR 3BKA36FBR224825*/
		  /* BEGIN: CR 605005 */
		    ZB_SERVICE_ID M_MXPF_SRVORNTFCODE      
                     /* END: CR 605005 */ 					  
                      );
/* END : WIPRO B11 IP MR0 PKG1 */
/* END: ADD-WIPRO-B10-MR2-CHANGE */                      



SYN ZS_WAIT_TIME_DB = 3;  /* 300MSECS */

/* BEGIN: CR 605005 */

SYN ZS_RETRY_HW_AUDIT_REQ =  1; 

/* END: CR 605005 */

SYN ZS_MAX_PARA_POLL   = 3;
/* BEGIN: CHANGE-WIPRO-FR 20/192118 RETRY-6ALLCE */
/*SYN ZS_MAX_POLL_ATTMPT = 3;*/
SYN ZS_MAX_POLL_ATTMPT = 6;
/* END: CHANGE-WIPRO-FR 20/192118 RETRY-6ALLCE */
 
NEWMODE ZM_PROC_NBR = RANGE(1:ZS_MAX_PARA_POLL);

NEWMODE ZM_POLLING_PROCESSES = ARRAY(ZM_PROC_NBR) ZM_PROC_INST;

/* BEGIN : CR 605005 */

/* NEWMODE ZM_AUDIT_STAT = SET(ZE_AUDIT_REQ_INCOMPLETE,
                            ZE_AUDIT_REQ_COMPLETE,
                            ZE_AUDIT_REP_COMPLETE);  */

NEWMODE ZM_AUDIT_STAT = SET(ZE_PM_CPI_AUDIT_IDLE,
                            ZE_PM_CPI_AUDIT_REQ,
                            ZE_PM_CPI_AUDIT_REQ_ACK,
                            ZE_PM_CPI_AUDIT_REQ_NACK,
                            ZE_PM_CPI_AUDIT_REP_ACK,
                            ZE_PM_CPI_AUDIT_REP_NACK);

/* END : CR 605005 */

NEWMODE ZM_POLL_RSP = SET(ZE_DET,
                          ZE_STD,
                          ZE_T26,
                          /* ADD IN MXB8 BEGIN */
                          ZE_TP,
                          /* ADD IN MXB8 END */
                          /*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE */
                          ZE_TC,
                          ZE_TC_ACK,
                          /* END: ADD-WIPRO-B10-MX-MR2-CHANGE */
                          /* START : WIPRO B11 IP MR0 PKG1 */
                          ZE_TC_IP,
                          ZE_TC_IP_ACK,
                          ZE_TCSL_MR,
                          /* END : WIPRO B11 IP MR0 PKG1 */
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
                          ZE_M3UA_LM,
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
/*START: IURG FEATURE */
			  ZE_IURG,
/*END : IURG FEATURE */

                          ZE_TR_FLOW,
                          ZE_EME,
                          /**/
                          ZE_STD_TRX
                          /**/);

/*
 * CCDC POLLING SEQUENCE - THE POLLING SEQUENCE DEFINES THE ORDER IN
 * =====================   THE LDC TYPES (FMM SELECTORS) ARE POLLED.
 *
 */

NEWMODE ZM_CCDC_POLL_SEQ = SET(ZE_NO_POLL,
                               ZE_POLL_DTC_STANDARD,
                               ZE_POLL_DTC_STAN_TRX,
                               ZE_POLL_DTC_DETAIL,
                               ZE_POLL_TCU_STANDARD,
                               ZE_POLL_TCU_DETAIL,
                               ZE_POLL_TCU_T26,
                             /*ZE_POLL_DTC_N7_STANDARD,DEL MXB8*/
                               ZE_POLL_TCH_STANDARD,
                               ZE_POLL_CPR_N7_STANDARD,
                               ZE_POLL_X25_STANDARD,
                               ZE_POLL_SMS_STANDARD,
                               /* ADD IN MXB8 BEGIN */
                               ZE_POLL_TP_N7,
                               ZE_POLL_TP_HDLC,
                           /* START : WIPRO B11 IP MR0 PKG1 */
                               ZE_POLL_TP_IPOE1,
			  /*START : AUPOIP FEATURE */
			                 /* START : 256 MGW IP Addresses ./
			  	       ZE_POLL_TP_AUPOIP_MGW_TC_CTR,
                       /. CHG : 256 MGW IP Addresses */
        	                     ZE_POLL_TP_AUPOIP_MGW_CTR1,
        	       	             ZE_POLL_TP_AUPOIP_MGW_CTR2,
        	       	             ZE_POLL_TP_AUPOIP_MGW_CTR3,
        	       	             ZE_POLL_TP_AUPOIP_MGW_CTR4,
        	       	             ZE_POLL_TP_AUPOIP_MGW_CTR5,
        	       	             ZE_POLL_TP_AUPOIP_MGW_CTR6,
        	       	             ZE_POLL_TP_AUPOIP_TC_CTR,
                      /* END : 256 MGW IP Addresses */
    		
			/* BEGIN : FR36/307843 */
			       /*ZE_POLL_TP_AUPOIP_BTS_CTR,*/
				ZE_POLL_TP_AUPOIP_BTS_CTR_1,
				ZE_POLL_TP_AUPOIP_BTS_CTR_2,
			/* END : FR36/307843 */
			  /* END : AUPOIP FEATURE */
                           /* END : WIPRO B11 IP MR0 PKG1 */ 
                             /* ADD IN MXB8 END */
                             /*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE */
                               ZE_POLL_TC_MTP2,
                               ZE_POLL_OMCP_N7,
                           /* START : WIPRO B11 IP MR0 PKG1 */
                               ZE_POLL_TC_IP,
                               ZE_POLL_TCSL_MR,
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
                               ZE_POLL_M3UA_LM,
/*START : IURG FEATURE */
			       ZE_POLL_IURG,
/*END : IURG FEATURE */
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */                               
                           /* END : WIPRO B11 IP MR0 PKG1 */
                             /*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE */
                               ZE_POLL_TRAFFIC_FLOW,
                               ZE_POLL_TCU_EME,
			   /* BEGIN: CR 605005 */
	         	   ZE_POLL_PM_CPI,
			   /* END: CR 605005 */
                               ZE_POLL_COMPLETE
							   );

/*
 * SYNMODES
 */

SYNMODE ZM_CIS_PER_TCU  = ARRAY(1:CM_FY32_MAX_CELLS_PER_TCU) M_CELL_IDX;

SYNMODE ZM_TRXS_PER_TCU = ARRAY(1:CM_FY32_PM_MAX_TRX_PER_TCU) M_TRX_IDX;

SYNMODE ZM_CCDC_STATE   = SET(ZE_INIT,
                              ZE_STANDBY,
                              ZE_ACTIVE);

SYNMODE ZM_ERR_BUF_MODE = STRUCT(
           CASE OF
                : B_ER_BUF0009    M_EBT0009_DBASE_ACC_FAIL,
                : B_ER_BUF0019    M_EBT0019_INC_MESS_DATA,
                : B_ER_BUF0038    M_EBT0038_OPEN_FILE_FLT,
                : B_ER_BUF0039    M_EBT0039_READ_REC_FLT,
                : B_ER_BUF0040    M_EBT0040_CLOSE_FILE_FLT,
                : B_ER_NO_DATA    M_USDA
           ESAC);


NEWMODE ZM_BUFFER_ATTRIBUTES=
       STRUCT(
         ZB_TOTAL_RECORDS   INT,
         ZB_RECORD_SIZE     INT,
         ZB_RECS_PER_BUF    INT,
         ZB_RECS_WRITTEN    INT
             );
/* BEGIN CR:74569 */			 
NEWMODE ZM_OLC_BUFFER_ATTRIBUTES=
		STRUCT(
         ZB_TOTAL_RECORDS   LONG_INT,
         ZB_RECORD_SIZE     LONG_INT,
         ZB_RECS_PER_BUF    LONG_INT,
         ZB_RECS_WRITTEN    LONG_INT
             );	 
/* END CR:745699 */
SYNMODE ZM_BYTE_MASK   = ARRAY(1:2048) BIN(8);
SYNMODE ZM_INT_MASK    = ARRAY(1:119) INT;

SYNMODE ZM_MSG_0507_ENVELOPE_MSG = STRUCT(
                     B_HEADER       M_MSG_HEAD,
                     B_ELMT_STRUCT  T_MSG_0507_MODE,
                     B_MSG_BUF_TAIL M_ORIGINAL_ROUTE_INFO);

NEWMODE ZM_MSG_0508_ENVELOPE_MSGB  =  STRUCT (
                                B_HEADER         M_MSG_HEAD,
                                B_NOT_USED       INT, /* M_PATH_ID */
                                /* MX */
                                B_BUFFER_PTR     PTR,
                                B_BUFFER_LEN     INT,
                                
                                B_ELMT_STRUCT    T_MSG_0508_MODE,
                                B_MSG_BUF_TAIL   M_ORIGINAL_ROUTE_INFO);

NEWMODE ZM_UBUF_VA_SCOPE_MSG = STRUCT(
                           ZB_FMM_ID M_FMM_ID,
                           ZB_DATA   M_PM_LIST_OF_CELLS
                                 );
NEWMODE ZM_VAL_MATE = STRUCT(
                            ZB_LDC_TYPE M_FMM_SELECTOR,
                            ZB_LCE_ID   M_LCE_ID,
                            ZB_VAL      M_BYTE
                                 );

NEWMODE ZM_ADD_CTRS = SET(ZE_ALL_INV,
                          ZE_ALL_VAL,
                          ZE_400_INV);

/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
/*BEGIN: CR20/286418 - More incoming links per cell */
/*SYN ZS_MAX_180_CELLS   = 10300L;*/
SYN ZS_MAX_180_CELLS   = 16000L/*10918CR312499*/;
/*END: CR20/286418 - More incoming links per cell */
/* END: ADD-WIPRO-B10-MR1-CHANGE */
SYN ZS_DUMMY           = 0;

NEWMODE ZM_180_COUNTERS = SET(E_C400_INC_HO_REQ,
                              E_C401_INC_HO_ATPT,
                              E_C402_INC_HO_SUCC);

NEWMODE ZM_180_CTRS_ARR = ARRAY(ZM_180_COUNTERS) M_STA_DPVAL;

/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
NEWMODE ZM_TRAFF_FLOW_DATA = ARRAY(ZM_TRAFF_FLOW_LEN)  
                                           ZM_180_CTRS_ARR;
SYNMODE ZM_TRAFF_FLOW_LEN = RANGE(1L:ZS_MAX_180_CELLS);
NEWMODE ZM_ACTIV_CELLS = ARRAY(1 : 700/*500CR312499*/) INT;
/* END: ADD-WIPRO-B10-MR1-CHANGE */
NEWMODE ZM_CELL_AND_NEXT = STRUCT ( B_NEXT_PAIR INT,
                                    B_SERV_CELL M_PM_CELL_ID_CGI);

/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
NEWMODE ZM_TRAFF_FLOW_CELLS = ARRAY (1L:ZS_MAX_180_CELLS)
                                              ZM_CELL_AND_NEXT;
/* END: ADD-WIPRO-B10-MR1-CHANGE */

NEWMODE ZM_TRAFF_FLOW_CELL_INFO = STRUCT(
                                   B_ACTIV_CELLS ZM_ACTIV_CELLS,
                                   B_NEXT        ZM_TRAFF_FLOW_CELLS);

SYN ZS_MAX_REC_IN_BLOCK  = 11; /*CHENZY B9, OLD 12: FOR TYPE 180*/
SYN ZS_MAX_ARR_IDX       =  8;

NEWMODE ZM_HIS_TYPE_180 = STRUCT(
               B_HEAD            M_SYS_REC_HEAD,
               B_CELL_IDX        M_CELL_IDX,
               B_NBR_SERV_CELLS  INT,
               B_CELL_DATA       ARRAY (1:8) STRUCT(
                                       ZB_CELL_NEXT ZM_CELL_AND_NEXT,
                                       ZB_CTRS      ZM_180_CTRS_ARR));

/*BEGIN: CR20/286418 - More incoming links per cell */
/*SYN M_MAX_SERVING_CELLS = 64;*/
SYN M_MAX_SERVING_CELLS = 700/*500CR312499*/;

NEWMODE ZM_PM_UB_T180 = STRUCT(
            B_FMM_ID          M_FMM_ID,
            B_BUF_HEADER      M_PM_BUFFER_HEADER,
            B_NBR_CELLS       RANGE(0:CM_FY32_MAX_CELLS_PER_BSC),
            B_TRFFLW_DATA     ARRAY(7:8192) M_BYTE);

/*END: CR20/286418 - More incoming links per cell */

/*
NEWMODE M_PM_UB_T180 = STRUCT(
            B_FMM_ID          M_FMM_ID,
            B_BUF_HEADER      M_PM_BUFFER_HEADER,
            B_NBR_CELLS       RANGE(0:CM_FY32_MAX_CELLS_PER_BSC),
            B_TRFFLW_DATA     ARRAY(7:2048) M_BYTE);

NEWMODE M_PM_TCH_T180_SERV_CTRS = STRUCT(
                      B_SERVING_CELL_ID   M_LAC_CI,
                      B_C400_HO_REQ       M_PM_CNTR);

NEWMODE M_PM_TCH_UB_T180 = STRUCT(
                      B_TARGET_CELL_IDX   M_CELL_IDX,
                      B_NBR_SERVING_CELLS RANGE(0:M_MAX_SERVING_CELLS),
                      B_SERV_CELLS_DATA   ARRAY(1:M_MAX_SERVING_CELLS)
                                               M_PM_TCH_T180_SERV_CTRS);

NEWMODE M_PM_RFM_T180_SERV_CTRS = STRUCT(
                      B_SERVING_CELL_ID   M_LAC_CI,
                      B_C400_HO_REQ       M_PM_CNTR,
                      B_C401_HO_ATPT      M_PM_CNTR,
                      B_C402_HO_SUCC      M_PM_CNTR);

NEWMODE M_PM_RFM_UB_T180 = STRUCT(
                      B_TARGET_CELL_IDX   M_CELL_IDX,
                      B_NBR_SERVING_CELLS RANGE(0:M_MAX_SERVING_CELLS),
                      B_SERV_CELLS_DATA   ARRAY(1:M_MAX_SERVING_CELLS)
                                               M_PM_RFM_T180_SERV_CTRS);
*/
/*START: DCT 649460 W.A.*/
SYN ZM_PM_MAX_SERVING_CELLS = 500;

SYNMODE ZM_SERV_CELLS_DATA_TCH = ARRAY (1:ZM_PM_MAX_SERVING_CELLS)
   M_PM_TCH_T180_SERV_CTRS;

NEWMODE ZM_PM_TCH_UB_T180 = STRUCT (
                                   B_TARGET_CELL_IDX M_CELL_IDX ,
                                   B_NBR_SERVING_CELLS RANGE(
                                      0:ZM_PM_MAX_SERVING_CELLS) ,
                                   B_SERV_CELLS_DATA
                                      ZM_SERV_CELLS_DATA_TCH );

NEWMODE ZM_PM_RFM_UB_T180 = STRUCT (
                                   B_TARGET_CELL_IDX M_CELL_IDX ,
                                   B_NBR_SERVING_CELLS RANGE(
                                      0:ZM_PM_MAX_SERVING_CELLS) ,
                                   B_SERV_CELLS_DATA
                                      ZM_SERV_CELLS_DATA_RFM );

SYNMODE ZM_SERV_CELLS_DATA_RFM = ARRAY (1:ZM_PM_MAX_SERVING_CELLS)
   M_PM_RFM_T180_SERV_CTRS;
/*END: DCT 649460 W.A.*/

NEWMODE ZM_POLLING_INFO_SET = SET(
  ZE_NBR_POLL_REQTS,
  ZE_NBR_1ST_REPLIES,
  ZE_NBR_2ND_REPLIES,
  ZE_NBR_3RD_REPLIES
  );

SYN ZS_MAX_REC_SIZE = 256;

NEWMODE ZM_PHHR = STRUCT(
  CASE OF
    : ZB_RAW         ARRAY(1:ZS_MAX_REC_SIZE) M_BYTE,
    : ZB_SYS_HEAD    M_SYS_REC_HEAD,
      ZB_BSC_RELEASE M_BSC_RELEASE,
      ZB_FILE_NO     M_FILE_NBR, /* DETERMINES ALSO TYPE */
      ZB_CREAT_TIME  M_GEN_TIME,
      ZB_REC_SIZE    INT
  ESAC);

NEWMODE ZM_LONG_INT_BYTE  = STRUCT(
      CASE  OF
	  : ZB_LONG             M_LONG,
	  :ZB_LI		INT,
	    ZB_HI		INT,
          : ZB_BYTE1            M_BYTE,
	  ZB_BYTE2		M_BYTE,
	  ZB_BYTE3		M_BYTE,
	   ZB_BYTE4		M_BYTE 
       ESAC)
	;

/*begin improv for 00981139 DTC 513 overload*/
NEWMODE ZM_DTC_STD_INVALID_UPDATED = STRUCT (
         ZB_T110_DTC_DEP  BOOL,
         ZB_T110_DTC_IND  BOOL,
         ZB_T110_DTC_BSSAP  BOOL,
         ZB_T110_M3UA_DTC  BOOL,         
         ZB_T25_DTC  BOOL,
         ZB_T110_15_OLC_DTC  BOOL,
         ZB_0300_T1_DTC  BOOL,
         ZB_0300_T19_DTC  BOOL,
         ZB_0300_T28_DTC  BOOL,
         ZB_0300_T29_DTC  BOOL,
         ZB_0300_T34_DTC  BOOL,
         ZB_T6_DTC  BOOL,
         ZB_DTC_TRX  BOOL
);

NEWMODE ZM_DTC_OL_PTR = REF ZM_DTC_STD_INVALID_UPDATED;
/*end improv for 00981139 DTC 513 overload*/


/* ################ GENERAL TRACE INFO (TRCINFO.TDB) ################ */
NEWMODE ZM_TRACE_TEXT  = CHAR(40);

/* CHENZY: CHANGE TWIN FILE BEGIN */

NEWMODE ZM_EXT_FILE_NAME = ARRAY(1:4) CHAR;

NEWMODE ZM_FULL_FILE_NAME = STRUCT(
    CASE OF
     :ZB_FULL_FILE_NAME M_FILE_NAMEVERSION,
     :ZB_FILE_NAME      M_FILE_NAME,
      ZB_EXT_FILE_NAME  ZM_EXT_FILE_NAME
    ESAC);
/* CHENZY: CHANGE TWIN FILE END */

NEWMODE ZM_LONG_DPVAL = STRUCT( CASE OF : ZB_LONG LONG_INT,
                                        : ZB_LOW INT,
                                          ZB_HIGH INT
                                          ESAC);

/*
 * SYNONYMS
 * ========
 */

SYN ZS_NULL_EXT_FILE_NAME ZM_EXT_FILE_NAME = (:'.','0','0','A':);

SYN ZS_BASE_PCS               = 16640;
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
SYN ZS_1ST_FREE_501     = 501; /*old 265*/
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
SYN ZS_MAX_SLC_N7       = 16;

SYN ZS_GET_FIRST        BOOL = TRUE;
SYN ZS_GET_IN_SEQ       BOOL = FALSE;

/* INVALID VALUE FOR COUNTERS   */
SYN ZS_FFFF = H'FFFF;
SYN ZS_FFFE = H'FFFE;
/*CRI # 00823248.01*/
SYN ZS_FF   = H'FF;
SYN ZS_FE   = H'FE;

SYN ZS_MAX_BUFFER_SIZE  = 2000;

/*BEGIN CR #1529787: DELAY 0.1S FOR EVERY PROC */
SYN ZS_DELAY_FOR_PROC = 1;
/*END CR #1529787*/

/* POLLING/TIMERS  */
SYN ZS_DELETE_HF_DELAY_TENTHS     = 10;
SYN ZS_LDC_RESPONSE_PERIOD_TENTHS = 50;          /* POLL WAIT = 5S */
/*: for FR 3BKA36FBR224825*/
SYN ZS_TC_RESPONSE_PERIOD_TENTHS = 280; 
/*: for FR 3BKA36FBR224825*/
/* BEGIN: CR 605005 */

SYN ZS_SEC = 10;

SYN ZS_TIME_HW_AUDIT_REQ            = (120 * ZS_SEC),
    ZS_TIME_HW_AUDIT_REP            = (120 * ZS_SEC),
    ZS_TIME_RETRY_HW_AUDIT_REQ      = (50 * ZS_SEC);
/* END: CR 605005 */
SYN ZS_MAX_PARALLEL_POLL          = 3;
SYN ZS_MAX_POLLING_RETRIES        = 3;
SYN ZS_MAX_RETRY                  = 3;
SYN ZS_OPEN_HF_DELAY_TENTHS       = 150;
/*ADDED for FR 20/221196*/
/*SYN ZS_START_POLL_DELAY_TENTHS  = 120;*/ /* CHENZY B9, OLD 100 */
SYN ZS_START_POLL_DELAY_TENTHS    = 150; /* CHENZY B9, OLD 100 */
/*ADDED for FR 20/221196*/

/*  GENERAL SYNS  */
/* START : WIPRO B11 IP MR0 PKG1 */
/* SYN ZS_MAX_TYPE_DTC_BUFF   = 3;*/
SYN ZS_MAX_TYPE_DTC_BUFF   = 4;
/* END : WIPRO B11 IP MR0 PKG1 */
SYN ZS_NULL                = -1;

/* CHENZY B9 BEGIN */
SYN ZS_NULL_CGI M_PM_CELL_ID_CGI_ARRAY = (:(*):H'FF:);
SYN ZS_DUMMY_CGI M_PM_CELL_ID_CGI_ARRAY = (:(*):0:);
/* CHENZY B9 END */

/* ################ GENERAL TRACE INFO (TRCINFO.TDB) ################ */
SYN ZS_TRACE_KEY_PROC = H'0AAA;
SYN ZS_TRACE_KEY_TEXT = H'0AAB;
SYN ZS_TRACE_KEY_AREA = H'0AAC;
SYN ZS_TRACE_KEY_RELS = H'0AAD;

SYN ZS_TRACE_HEAD ZM_TRACE_TEXT =
 'CC_DATA_COLLECTOR - Pieter.Blommaert@'//C'13'//C'00'//' ';
/*1234567890123456789012345678901234567   8      9       0  */
SYN ZS_TRC_POLLING_INFO ZM_TRACE_TEXT =
 'POLLING_INFO: NBR_REQUESTS, 1/2/3 RETRY'//C'00';
/*123456789012345678901234567890123456789   0  */

/**********************************************************************/
/*                                                                    */
/*          4.5  LOCAL DATA DEFINITIONS AND DECLARATIONS              */
/*                                                                    */
/**********************************************************************/
DCL TRACEINFO              M_TRC_INFO; /*RT TRACE*/
DCL Z_BUFFER_ATTRIB        ZM_BUFFER_ATTRIBUTES;
/* BEGIN CR:745699 */
DCL Z_OLC_BUFFER_ATTRIB    ZM_OLC_BUFFER_ATTRIBUTES;
/* END CR:745699 */
DCL Z_CCDC_STATE           ZM_CCDC_STATE;
DCL Z_CELL_LIST            M_PM_LIST_OF_CELLS;
DCL Z_T26_CELL_LIST        M_PM_LIST_OF_CELLS;
DCL Z_DISK_PROC_ID         M_PROCESS_ID;
DCL Z_ENV_MSG_CONTENT      M_ENV_MSG_CONTENT;
DCL Z_FILE_OPEN            BOOL;
DCL Z_HIS_FCB              M_FCB_INFO;
DCL Z_MSG_BUF_PTR          PTR;
DCL Z_OTHER_DISK           M_DRIVE_NO;
DCL Z_OWN_PID              M_PROCESS_ID;
DCL Z_OWN_DISK             M_DRIVE_NO;
DCL Z_UPDATE_PM_FILES      BOOL;
/* BEGIN: ADD-WIPRO-B10-MR2-CHANGE */
/*START: FR CRI00596704*/
/*DCL Z_TC_IDX      M_TC_ID;
DCL Z_TC_ID       M_TC_ID;*/
/*DCL ZQ_TC_ID_RCD M_TC_ID;*/
DCL Z_TC_IDX_MTP2     M_TC_ID;
DCL Z_TC_IDX_IP       M_TC_ID;
DCL Z_TC_ID_MTP2      M_TC_ID;
DCL Z_TC_ID_IP        M_TC_ID;
/*END: FR CRI00596704*/
DCL Z_TC_POLL_FIRST BOOL;
/* END: ADD-WIPRO-B10-MR2-CHANGE */
/* CURRENT POLLING STATE  */
/* =====================  */

DCL Z_POLL_PROCESS     ZM_POLLING_PROCESSES;
/* THE POLLING IS DIVIDED INTO STEPS */
DCL Z_POLL_STEP        ZM_CCDC_POLL_SEQ;
DCL Z_VAL_MATE         ARRAY (1:5) ZM_VAL_MATE;
DCL Z_1ST_FREE         INT;
DCL Z_PHHR             ZM_PHHR; /* PM HISTORY FILE HEADER RECORD */

/* PBLO: PUT IN ARRAY FOR EASY DUMPING */
DCL Z_POLLING_INFO     ARRAY(ZM_POLLING_INFO_SET) M_STA_DPVAL;
/*
DCL Z_NBR_POLL_REQTS   M_STA_DPVAL;
DCL Z_NBR_1ST_REPLIES  M_STA_DPVAL;
DCL Z_NBR_2ND_REPLIES  M_STA_DPVAL;
DCL Z_NBR_3RD_REPLIES  M_STA_DPVAL;
*/


/* LOCAL COUNTERS CENTRALISED IMAGES (CCI) */
/* ======================================= */

DCL Z_T1_PTR        M_T1_1_PTR;
DCL Z_T1_2_PTR      M_T1_2_PTR;
DCL Z_T2_PTR        M_T2_PTR;
DCL Z_T3_PTR        M_T3_PTR;
DCL Z_T4_PTR        M_T4_PTR;
DCL Z_T5_PTR        M_T5_PTR;
DCL Z_T5_2_PTR      M_T5_2_PTR;
DCL Z_T6_PTR        M_T6_PTR;
DCL Z_T7_PTR        M_T7_PTR;
/*CR36/236932*/
DCL Z_T72_PTR       M_T72_PTR;
/*CR36/236932*/
DCL Z_T8_PTR        M_T8_PTR;
DCL Z_T9_PTR        M_T9_PTR;
DCL Z_T18_PTR       M_T18_PTR;
DCL Z_T18_2_PTR     M_T18_2_PTR;
DCL Z_T19_PTR       M_T19_PTR;
DCL Z_T25_PTR       M_T25_PTR;
DCL Z_T26_PTR       M_T26_PTR;
DCL Z_T26_2_PTR     M_T26_2_PTR;
DCL Z_T27_PTR       M_T27_PTR;
DCL Z_T28_PTR       M_T28_PTR;
DCL Z_T29_PTR       M_T29_PTR;
DCL Z_T30_PTR       M_T30_PTR;
DCL Z_T32_PTR       M_T32_PTR;
DCL Z_T33_PTR       M_T33_PTR;
DCL Z_T34_PTR       M_T34_PTR;
DCL Z_T34_2_PTR     M_T34_2_PTR;
/*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE*/
DCL Z_T35_0_PTR       M_T35_0_PTR;
DCL Z_T35_4_PTR       M_T35_4_PTR;
/* CR20/225233 */
DCL Z_T35_3_PTR       M_T35_3_PTR;
/* CR20/225233 */
DCL Z_T35_5_PTR       M_T35_5_PTR;
/*START: CR20/284751 BTS FRQ SYNCH */
DCL Z_T35_6_PTR       M_T35_6_PTR;
/*END:CR20/284751 BTS FRQ SYNCH */
/* START : WIPRO B11 IP MR0 PKG1 */
DCL Z_T35_7_PTR       M_T35_7_PTR;
DCL Z_T35_8_PTR       M_T35_8_PTR;
/* START : IURG FEATURE */
DCL Z_T36_PTR       M_T36_PTR;
/*END : IURG FEATURE */
/* START : B12 VAMOS */
DCL Z_T37_0_PTR       M_T37_0_PTR;
/*CRI # 00823248.01*/
DCL Z_T37_0_TEMP_PTR    M_T37_0_TEMP_PTR;
DCL Z_T37_1_PTR       M_T37_1_PTR;
/*END : B12 VAMOS */
/* END : WIPRO B11 IP MR0 PKG1 */
/*begin CR1098364 MC1408/MC1409 improv*/
DCL Z_T37_VMC_001_PTR M_T37_VMC_001_PTR;
DCL Z_TMP_MC1408_9_PTR M_TMP_MC1408_9_PTR;
/*end CR1098364 MC1408/MC1409 improv*/
/*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE*/
DCL Z_T110_1_PTR    M_T110_1_PTR;
/* SPECIAL POINTER TO CATER FOR THE INABILITY TO GET A  */
/* BIG ENOUGH SPACE IN MEMORY.                          */
DCL Z_T110_1_2_PTR  M_T110_1_2_PTR;
DCL Z_T110_2_PTR    M_T110_2_PTR;
DCL Z_T110_3_PTR    M_T110_3_PTR;
DCL Z_T110_4_PTR    M_T110_4_PTR;
/*START: MC COUNTERS*/
DCL Z_T110_4_2_PTR    M_T110_4_2_PTR;
/*END: MC COUNTERS*/
DCL Z_T110_5_PTR    M_T110_5_PTR;
DCL Z_T110_6_PTR    M_T110_6_PTR;
/* CR20/209493 START */
DCL Z_T110_7_PTR    M_T110_7_PTR;
DCL Z_T110_7_2_PTR  M_T110_7_2_PTR;
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
DCL Z_T110_8_PTR    M_T110_8_PTR;
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
/*ADDED FOR GSL COUNTERS MEMO*/
DCL Z_T110_9_PTR    M_T110_9_PTR;
/*ADDED FOR GSL COUNTERS MEMO*/
/* CR20/209493 END */ 
/*ADDED FOR A-FLEX NRI COUNTERS*/
DCL Z_T110_10_PTR    M_T110_10_PTR;
/*ADDED FOR A-FLEX NRI COUNTERS*/
/*START : AUPOIP FEATURE */
DCL Z_T110_11_PTR    M_T110_11_PTR;
DCL Z_T110_12_PTR    M_T110_12_PTR;
/* END : AUPOIP FEATURE */
/* BEGIN: CR20_313054 */
DCL Z_T110_13_PTR    M_T110_13_PTR;
/* END: CR20_313054 */
/* BEGIN: CR 605005 */
DCL Z_T110_14_PTR    M_T110_14_PTR;
/* END: CR 605005 */

/*begin CR1238146 A-GPS*/
DCL Z_T110_18_PTR    M_T110_18_PTR;
/*end CR1238146 A-GPS*/

/*BEGIN : CR :745699 */
DCL Z_T110_15_1_PTR M_T110_15_1_PTR;
DCL Z_T110_15_2_PTR M_T110_15_2_PTR;
/*END : CR:745699*/
DCL Z_T110_MC1531_PTR  M_T110_MC1531_PTR;

/*START CR MOCN */
DCL Z_T110_17_PTR M_T110_17_PTR;
/*END CR MOCN */

DCL Z_T180_1_PTR    M_T180_1_PTR;
DCL Z_T180_2_PTR    M_T180_2_PTR;
/*begin improv for 00981139 DTC 513 overload*/
DCL Z_DTC_OL_PTR    ZM_DTC_OL_PTR;
/*end improv for 00981139 DTC 513 overload*/

DCL Z_DS_PTR_ARR  ZM_DS_PTR_ARR;
DCL Z_CCI_ALERT     M_CCI_ALERTER;

/* BEGIN : CR 605005 */

DCL Z_AUDIT_STAT   ZM_AUDIT_STAT;

/* END: CR 605005 */

/*begin CR1098364 MC1408/MC1409 improv*/
DCL Z_TOTAL_VAMOS_CALL_NB_ZONE ZM_PM_VMS_NB_CTRS_ARRAY;
DCL Z_TMP_MC1408X_MC1409X_ZONE ZM_TMP_MC1408X_MC1409X_CTRS_ARRAY;
/*end CR1098364 MC1408/MC1409 improv*/

/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
/* DECLARE VARIABLES GLOBALLY */
DCL Z_CM_FY32_HIS_TYPE_01_CELL_BUF CM_FY32_HIS_TYPE_01_CELL_BUF;
DCL Z_CM_FY32_HIS_TYPE_01_TRX_BUF CM_FY32_HIS_TYPE_01_TRX_BUF;
DCL Z_CM_FY32_HIS_TYPE_02_BUF CM_FY32_HIS_TYPE_02_BUF;
DCL Z_CM_FY32_HIS_TYPE_03_BUF CM_FY32_HIS_TYPE_03_BUF;
DCL Z_CM_FY32_HIS_TYPE_04_BUF CM_FY32_HIS_TYPE_04_BUF;
DCL Z_CM_FY32_HIS_TYPE_05A_BUF CM_FY32_HIS_TYPE_05A_BUF;
DCL Z_CM_FY32_HIS_TYPE_05B_BUF CM_FY32_HIS_TYPE_05B_BUF;
DCL Z_CM_FY32_HIS_TYPE_06_BUF CM_FY32_HIS_TYPE_06_BUF;
DCL Z_CM_FY32_HIS_TYPE_07_BUF CM_FY32_HIS_TYPE_07_BUF;
/*CR36/236932*/
DCL Z_CM_FY32_HIS_TYPE_072_BUF CM_FY32_HIS_TYPE_072_BUF;
/*CR36/236932*/
DCL Z_CM_FY32_HIS_TYPE_08_BUF CM_FY32_HIS_TYPE_08_BUF;
DCL Z_CM_FY32_HIS_TYPE_09_BUF CM_FY32_HIS_TYPE_09_BUF;
DCL Z_CM_FY32_HIS_TYPE_18_BSC_BUF CM_FY32_HIS_TYPE_18_BSC_BUF;
DCL Z_CM_FY32_HIS_TYPE_18_CIC_BUF CM_FY32_HIS_TYPE_18_CIC_BUF;
DCL Z_CM_FY32_HIS_TYPE_19_BUF CM_FY32_HIS_TYPE_19_BUF;
DCL Z_CM_FY32_HIS_TYPE_25_BUF CM_FY32_HIS_TYPE_25_BUF;
DCL Z_CM_FY32_HIS_TYPE_26A_BUF CM_FY32_HIS_TYPE_26A_BUF;
DCL Z_CM_FY32_HIS_TYPE_26B_BUF CM_FY32_HIS_TYPE_26B_BUF;
DCL Z_CM_FY32_HIS_TYPE_27_BUF CM_FY32_HIS_TYPE_27_BUF;
DCL Z_CM_FY32_HIS_TYPE_28_BUF CM_FY32_HIS_TYPE_28_BUF;
DCL Z_CM_FY32_HIS_TYPE_29_BUF CM_FY32_HIS_TYPE_29_BUF;
DCL Z_M_HIS_TYPE_30           M_HIS_TYPE_30;
DCL Z_CM_FY32_HIS_TYPE_32_BUF CM_FY32_HIS_TYPE_32_BUF;
DCL Z_CM_FY32_HIS_TYPE_33_BUF CM_FY32_HIS_TYPE_33_BUF;
DCL Z_CM_FY32_HIS_TYPE_34_1_BUF CM_FY32_HIS_TYPE_34_1_BUF;
DCL Z_CM_FY32_HIS_TYPE_34_2_BUF CM_FY32_HIS_TYPE_34_2_BUF;
/* BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE */    
DCL Z_CM_FY32_HIS_TYPE_35_0_BUF CM_FY32_HIS_TYPE_35_0_BUF;
DCL Z_CM_FY32_HIS_TYPE_35_4_BUF CM_FY32_HIS_TYPE_35_4_BUF;
/* CR20/225233 */
DCL Z_CM_FY32_HIS_TYPE_35_3_BUF CM_FY32_HIS_TYPE_35_3_BUF;
/* CR20/225233 */
DCL Z_CM_FY32_HIS_TYPE_35_5_BUF CM_FY32_HIS_TYPE_35_5_BUF;
/*START: CR20/284751 BTS FRQ SYNCH */
DCL Z_CM_FY32_HIS_TYPE_35_6_BUF CM_FY32_HIS_TYPE_35_6_BUF;
/*END: CR20/284751 BTS FRQ SYNCH */
/* START : WIPRO B11 IP MR0 PKG1 */
DCL Z_CM_FY32_HIS_TYPE_35_7_BUF CM_FY32_HIS_TYPE_35_7_BUF;
DCL Z_CM_FY32_HIS_TYPE_35_8_BUF CM_FY32_HIS_TYPE_35_8_BUF;
/*START: IURG FEATURE*/
DCL Z_CM_FY32_HIS_TYPE_36_BUF CM_FY32_HIS_TYPE_36_BUF;
/*END :IURG FEATURE*/
/*START: B12 VAMOS */
DCL Z_CM_FY32_HIS_TYPE_37_0_BUF CM_FY32_HIS_TYPE_37_0_BUF;
/*CRI # 00823248.01*/
DCL Z_CM_FY32_TEMP_37_0_BUF CM_FY32_TEMP_37_0_BUF;
DCL Z_CM_FY32_HIS_TYPE_37_1_BUF CM_FY32_HIS_TYPE_37_1_BUF;
/*END : B12 VAMOS */
/* END : WIPRO B11 IP MR0 PKG1 */
/* END: ADD-WIPRO-B10-MX-MR2-CHANGE */    
DCL Z_CM_FY32_HIS_TYPE_110_1A_BUF CM_FY32_HIS_TYPE_110_1A_BUF;
DCL Z_CM_FY32_HIS_TYPE_110_1B_BUF CM_FY32_HIS_TYPE_110_1B_BUF;
DCL Z_CM_FY32_HIS_TYPE_110_2_BUF CM_FY32_HIS_TYPE_110_2_BUF;
DCL Z_CM_FY32_HIS_TYPE_110_3_BUF CM_FY32_HIS_TYPE_110_3_BUF;
DCL Z_CM_FY32_HIS_TYPE_110_4_BUF CM_FY32_HIS_TYPE_110_4_BUF;
/*START: MC Counters*/
DCL Z_CM_FY32_HIS_TYPE_110_4_2_BUF CM_FY32_HIS_TYPE_110_4_2_BUF;
/*END: MC Counters*/
DCL Z_CM_FY32_HIS_TYPE_110_5_BUF CM_FY32_HIS_TYPE_110_5_BUF;
DCL Z_CM_FY32_HIS_TYPE_110_6_BUF CM_FY32_HIS_TYPE_110_6_BUF;
/* CR20/209493 START */
/* DCL Z_CM_FY32_HIS_TYPE_110_7_BUF CM_FY32_HIS_TYPE_110_7_BUF; */
DCL Z_CM_FY32_HIS_TYPE_110_7_1A_BUF CM_FY32_HIS_TYPE_110_7_1A_BUF;
DCL Z_CM_FY32_HIS_TYPE_110_7_1B_BUF CM_FY32_HIS_TYPE_110_7_1B_BUF;
/* CR20/209493 END */
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
DCL Z_CM_FY32_HIS_TYPE_110_8_BUF CM_FY32_HIS_TYPE_110_8_BUF;
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
/*ADDED FOR GSL COUNTERS MEMO*/
DCL Z_CM_FY32_HIS_TYPE_110_9_BUF CM_FY32_HIS_TYPE_110_9_BUF;
/*ADDED FOR GSL COUNTERS MEMO*/
/*ADDED FOR A-FLEX NRI COUNTERS*/
DCL Z_CM_FY32_HIS_TYPE_110_10_BUF CM_FY32_HIS_TYPE_110_10_BUF;
/*START : AUPOIP FEATURE */
DCL Z_CM_FY32_HIS_TYPE_110_11_BUF CM_FY32_HIS_TYPE_110_11_BUF;
DCL Z_CM_FY32_HIS_TYPE_110_12_BUF CM_FY32_HIS_TYPE_110_12_BUF;
/* END : AUPOIP FEATURE */
/* BEGIN: CR20_313054 */
DCL Z_CM_FY32_HIS_TYPE_110_13_BUF CM_FY32_HIS_TYPE_110_13_BUF;
/* END: CR20_313054 */
/* BEGIN: CR 605005 */
DCL Z_CM_FY32_HIS_TYPE_110_14_BUF CM_FY32_HIS_TYPE_110_14_BUF;
/* END: CR 605005 */

/*BEGIN : CR:745699 */
DCL Z_CM_FY32_HIS_TYPE_110_15_1_BUF CM_FY32_HIS_TYPE_110_15_1_BUF;
DCL Z_CM_FY32_HIS_TYPE_110_15_2_BUF CM_FY32_HIS_TYPE_110_15_2_BUF;
/*END : CR:745699 */

/*begin CR1238146 A-GPS*/
DCL Z_CM_FY32_HIS_TYPE_110_18_BUF CM_FY32_HIS_TYPE_110_18_BUF;
/*end CR1238146 A-GPS*/

DCL Z_VAR_TCH_CTRS_1531 ZM_PM_TCH_CELL_CTRS_1531;

/*START CR MOCN */
DCL Z_CM_FY32_HIS_TYPE_110_17_BUF CM_FY32_HIS_TYPE_110_17_BUF;
/*END CR MOCN */

/*ADDED FOR A-FLEX NRI COUNTERS*/
DCL Z_ZM_TRAFF_FLOW_CELL_INFO ZM_TRAFF_FLOW_CELL_INFO;
DCL Z_ZM_TRAFF_FLOW_DATA ZM_TRAFF_FLOW_DATA;

/*begin improv for 00981139 DTC 513 overload*/
DCL Z_DTC_OL_IMROV_SWITCH ZM_DTC_STD_INVALID_UPDATED;
/*end improv for 00981139 DTC 513 overload*/

/* END: ADD-WIPRO-B10-MR1-CHANGE */
/* TEMPORARY OR DEBUG VARIABLES */
/* ============================ */

DCL Z_CIS_PER_TCU      ZM_CIS_PER_TCU;
DCL Z_CURR_LDC_TYPE    M_FMM_SELECTOR;
DCL Z_CURR_LDC_LCE     M_LCE_ID;
DCL Z_192_MSGS_RXD     INT;

/* ################ GENERAL TRACE INFO (TRCINFO.TDB) ################ */
DCL Z_TRACE_SIZE          INT;
DCL Z_TRACE_KEY           INT;
DCL Z_TRACE_REL           M_RID;
DCL Z_TRACE_PTR           PTR;
/*START : DTC513 overload alarm */
DCL Z_FA_RSL_LNK            ZM_DLS_REL_INFO;
DCL Z_FA_CE_DYST            ZM_DLS_REL_INFO;
DCL Z_FA_TRX_MGT            ZM_DLS_REL_INFO;
/*END : DTC513 overload alarm */
SYN ZS_API_SUB_CLASS_PM = 7;   /*FOR API CLASS*/
SYN ZS_FST_SUB_CLASS_PM = 7;   /*FOR FST CLASS*/
SYN ZS_ERR_SUB_CLASS_PM = 9;   /*FOR ERR CLASS*/

 /* FR 176777 DEBUG */
/*Commented for FR 20/192118*/  
/*NEWMODE ZM_DEBUG_STRUCT = STRUCT(
                ZB_TIMER_EXPIRY_RETRY3_TCU        M_STA_DPVAL,
                ZB_WRONG_SEQ_NUM_TCU              M_STA_DPVAL,
                ZB_TIMER_EXPIRY_RETRY3_TCHRM      M_STA_DPVAL,
                ZB_WRONG_SEQ_NUM_TCHRM            M_STA_DPVAL,
                ZB_TIMER_EXPIRY_RETRY3_DTC        M_STA_DPVAL,
                ZB_WRONG_SEQ_NUM_DTC              M_STA_DPVAL,
                ZB_COUNT_RESTART                  M_STA_DPVAL,
                ZB_COUNT_RESET                    M_STA_DPVAL,
                ZB_DTC_RCD_FRM_194                M_STA_DPVAL,
                ZB_TCU_RCD_FRM_194                 M_STA_DPVAL,
                ZB_TCHRM_RCD_FRM_194               M_STA_DPVAL,*/
                /*added by */
                /*ZB_DTC_SEQ_NBR_LESS               M_STA_DPVAL,
                ZB_DTC_SEQ_NBR_HIGH                M_STA_DPVAL);*/
		/*added by */
/*DCL Z_DEBUG_VAR           ZM_DEBUG_STRUCT;*/
/*Commented for FR 20/192118*/ 
/*ADDED for FR 20/192118*/ 
NEWMODE ZM_DEBUG_VAR =  ARRAY(ZM_INVALIDITY_DEBUG_CTRS)
                                          M_STA_DPVAL ;
NEWMODE ZM_INVALIDITY_DEBUG_CTRS  = SET(
E_TIMER_EXPIRY_RETRY3_TCU,
E_TIMER_EXPIRY_RETRY3_TCHRM,
E_TIMER_EXPIRY_RETRY3_STCHRM,
E_TIMER_EXPIRY_RETRY3_DTC,
E_TIMER_EXPIRY_RETRY3_DTC_TRX,
E_TIMER_EXPIRY_RETRY3_CPR,
E_TIMER_EXPIRY_RETRY3_N7,
E_TIMER_EXPIRY_RETRY3_SMS,
E_TIMER_EXPIRY_RETRY3_X25,
E_TIMER_EXPIRY_RETRY3_TCUDT,
E_TIMER_EXPIRY_RETRY3_DTCDT,
E_TIMER_EXPIRY_RETRY3_TCU26,
E_TIMER_EXPIRY_RETRY3_TCUTRF,
E_TIMER_EXPIRY_RETRY3_TCHRMTRF,
E_TIMER_EXPIRY_RETRY3_TCUEME,
/*START: CR36/288765*/
E_TIMER_EXPIRY_RETRY3_TP_N7,
E_TIMER_EXPIRY_RETRY3_TP_HDLC,
E_TIMER_EXPIRY_RETRY3_TP_IPoE1,
/*START : AUPOIP FEATURE */
E_TIMER_EXPIRY_RETRY3_TP_AUPOIP_MGW_TC_CTR,
/* BEGIN : FR36/307843 */
/*E_TIMER_EXPIRY_RETRY3_TP_AUPOIP_BTS_CTR,*/
E_TIMER_EXPIRY_RETRY3_TP_AUPOIP_BTS_CTR_1,
E_TIMER_EXPIRY_RETRY3_TP_AUPOIP_BTS_CTR_2,
/* END ; FR36/307843 */
/* END : AUPOIP FEATURE */
E_TIMER_EXPIRY_RETRY3_TC_MTP2,
E_TIMER_EXPIRY_RETRY3_OMCP_N7,
E_TIMER_EXPIRY_RETRY3_TP_IP,
E_TIMER_EXPIRY_RETRY3_TCSL_MR,
E_TIMER_EXPIRY_RETRY3_M3UA_LM,
/*START:IURG FEATURE */
E_TIMER_EXPIRY_RETRY3_IURG,
/*END IURG FEATURE */
/*END: CR36/288765*/
/* BEGIN : CR 605005 */
E_TIMER_EXPIRY_RETRY3_PM_CPI,
/* END : CR 605005 */
E_WRONG_SEQ_NUM_TCU,
E_WRONG_SEQ_NUM_TCHRM,
E_WRONG_SEQ_NUM_STCHRM,
E_WRONG_SEQ_NUM_DTC,
E_WRONG_SEQ_NUM_CPR,
E_WRONG_SEQ_NUM_N7,
E_WRONG_SEQ_NUM_SMS,
E_WRONG_SEQ_NUM_X25,
/*START: CR36/288765*/
E_WRONG_SEQ_NUM_TP_N7,
E_WRONG_SEQ_NUM_TP_HDLC,
E_WRONG_SEQ_NUM_TP_IPoE1,
/*START : AUPOIP FEATURE */
E_WRONG_SEQ_NUM_TP_AUPOIP_MGW_TC_CTR,
/*E_WRONG_SEQ_NUM_TP_AUPOIP_BTS_CTR*/
E_WRONG_SEQ_NUM_TP_AUPOIP_BTS_CTR_1,
E_WRONG_SEQ_NUM_TP_AUPOIP_BTS_CTR_2,
/* END : FR36/307843 */
/* END : AUPOIP FEATURE */
E_WRONG_SEQ_NUM_TC_MTP2,
E_WRONG_SEQ_NUM_OMCP_N7,
E_WRONG_SEQ_NUM_TC_IP,
E_WRONG_SEQ_NUM_TCSL_MR,
E_WRONG_SEQ_NUM_M3UA_LM,
/*START: IURG FEATURE */
E_WRONG_SEQ_NUM_IURG,
/*END: IURG FEATURE */
/*END: CR36/288765*/
E_INV_RCD_FRM_DTC,
E_INV_RCD_FRM_TCU,
E_INV_RCD_FRM_TCH,
E_INV_RCD_FRM_STCH,
E_INV_RCD_FRM_CPR,
E_INV_RCD_FRM_N7,
E_INV_RCD_FRM_SMS,
E_INV_RCD_FRM_X25,
/*START: CR36/288765*/
E_INV_RCD_FRM_TP_N7,
E_INV_RCD_FRM_TP_HDLC,
E_INV_RCD_FRM_TP_IPoE1,
/*START : AUPOIP FEATURE */
E_INV_RCD_FRM_TP_AUPOIP_MGW_TC_CTR,
/* BEGIN : FR36/307843 */
/*E_INV_RCD_FRM_TP_AUPOIP_BTS_CTR,*/
E_INV_RCD_FRM_TP_AUPOIP_BTS_CTR_1,
E_INV_RCD_FRM_TP_AUPOIP_BTS_CTR_2,
/* END : FR36/307843 */
/* END : AUPOIP FEATURE */
E_INV_RCD_FRM_TC_MTP2,
E_INV_RCD_FRM_OMCP_N7,
E_INV_RCD_FRM_TC_IP,
E_INV_RCD_FRM_TCSL_MR,
E_INV_RCD_FRM_M3UA_LM,
/*END: CR36/288765*/
E_COUNT_RESTART,
E_COUNT_RESET);                                          
                                          
DCL Z_DEBUG_VAR ZM_DEBUG_VAR;
/*ADDED for FR 20/192118*/ 
/* FR 176777 DEBUG */

/*Begim: Trace Improvement - relation dump */

NEWMODE ZM_R_PM_ACT   = ARRAY(1:64) M_R_PM_ACT;
NEWMODE ZM_R_PM_SC_G2   = ARRAY(1:64) M_R_PM_SC_G2;
/*START : DTC513 overload alarm*/
NEWMODE ZM_R_RSL_LNK = ARRAY(1:1400) M_R_RSL_LNK;
NEWMODE ZM_R_CE_DYST = ARRAY(1:966) M_R_CE_DYST;
NEWMODE ZM_R_TRX_MGT = ARRAY(1:1400) M_R_TRX_MGT;

NEWMODE ZM_DLS_REL_INFO = STRUCT (
         ZB_TUPLE_PTR  PTR,
         ZB_TUPLE_SIZE INT,
         ZB_TUPLE_NBR  INT);
/*END: DTC513 overload alarm */

DCL  Z_R_PM_ACT ZM_R_PM_ACT;
DCL  Z_R_PM_SC_G2  ZM_R_PM_SC_G2;

SYNMODE ZM_FAST_ACC_PTR = STRUCT(CASE OF
                                   :ZB_OFF INT,
                                    ZB_SEG INT,
                                   :ZB_PTR PTR
                                 ESAC);

DCL Z_R_PM_ACT_PTR         ZM_FAST_ACC_PTR;
DCL Z_R_PM_SC_G2_PTR       ZM_FAST_ACC_PTR;
/*AM START:CR650353*/
DCL Z_R_SCCP_CNF_PTR       ZM_FAST_ACC_PTR;
/*AM END:CR650353*/

/*BEGIN CR:745699*/
DCL Z_INIT_REC_SEQ_NBR ZM_INT_TO_LN_INT;
/*END CR:745699*/
/*End: Trace Improvement - relation dump */



/**********************************************************************/
/*                                                                    */
/*          4.6  SUPERVISOR PART PROCESS DEFINITION                   */
/*                                                                    */
/**********************************************************************/

G_S_FT58AL_CC_DATA_COLLECTOR: SUPERVISOR_PROCESS;

/**********************************************************************/
/*                                                                    */
/*          4.7  LOCAL PROCEDURE DEFINITIONS - SUPERVISOR             */
/*                                                                    */
/**********************************************************************/

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0000_MAKE_CONST_DAT_PTR                          */
/*                                                                    */
/*     PROGRAMMER: J. JANSEN                                          */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 99/11/18                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION: MAKE CONSTANT DATA PTR.                */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

/*Q_S0000_MAKE_CONST_DAT_PTR: PROC(ZF_TRACE_INFO READ ZM_TRACE_TEXT LOC)
                         RETURNS(PTR); MX */

Q_S0000_MAKE_CONST_DAT_PTR: PROC(ZF_TRACE_INFO ZM_TRACE_TEXT LOC)
                         RETURNS(PTR);

RETURN (->ZF_TRACE_INFO);

END Q_S0000_MAKE_CONST_DAT_PTR;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0001_TRACE_INFO                                  */
/*                                                                    */
/*     PROGRAMMER: J. JANSEN / PBLO                                   */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 99/11/22                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION: ALL TRACE INFO.                        */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0001_TRACE_INFO: PROC();

Z_TRACE_KEY  := ZS_TRACE_KEY_TEXT;
Z_TRACE_PTR  := Q_S0000_MAKE_CONST_DAT_PTR(ZS_TRACE_HEAD);

Z_TRACE_KEY  := ZS_TRACE_KEY_AREA;
Z_TRACE_PTR  := Q_S0000_MAKE_CONST_DAT_PTR(ZS_TRC_POLLING_INFO);
Z_TRACE_PTR  := ->Z_POLLING_INFO;
Z_TRACE_SIZE := SIZE(Z_POLLING_INFO); 

Z_TRACE_KEY  := ZS_TRACE_KEY_RELS;
Z_TRACE_REL  := M_RID_R_PM_ACT;

Z_TRACE_KEY  := ZS_TRACE_KEY_RELS;
Z_TRACE_REL  := M_RID_R_PM_SC_G2;

Z_TRACE_KEY  := ZS_TRACE_KEY_RELS;
Z_TRACE_REL  := M_RID_R_PM_FILES;


END Q_S0001_TRACE_INFO;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0000_GET_OWN_LCE_ID                              */
/*                                                                    */
/*     PROGRAMMER: A.  BENAGLIO (FACE-MI)                             */
/*                                                                    */
/*     CREATION DATE: 92/12/21                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*  PERFORMS OWN_LCE_ID  RETRIEVAL                                    */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0120_GET_R_CONF_CE                         */
/*     CALLED FROM:                                                   */
/*                      Q_S1000_CCDC_FSM                              */
/*     PRIMITIVES CALLED:                                             */
/*                      OWN_PROCESS_ID                                */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0000_GET_OWN_LCE_ID: PROC();

DCL ZQ_OWN_IAD M_OWN_IAD;

 OWN_PROCESS_ID(Z_OWN_PID);

 P_YS8RAA_S010_GET_OWN_IAD(ZQ_OWN_IAD);

 DO WITH ZQ_OWN_IAD;

   Z_OWN_PID.B_PID_PROCESS_ID.B_PID_LCE := B_LCE_ID;

   Q_S0120_GET_R_CONF_CE(B_LCE_ID);

   /* THE DISK C IS THE DEFAULT */
   IF B_LCE_ID < R_CONF_CE.D_MATE_LCE
   THEN
     Z_OWN_DISK:=E_SSD_C;
     Z_OTHER_DISK:=E_SSD_D;
   ELSE
     Z_OWN_DISK:=E_SSD_D;
     Z_OTHER_DISK:=E_SSD_C;
   FI;
 
 /*WIPRO:B10_MX_MR1 RT TRACE*/
 TRACEINFO := 'Init of CCDC (%d %d %d)         ';
      TRC_BSC_PM3(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCDC),
              TRACEID(NORM),
              TRACEINFO, 
              LONG_INT((B_LCE_ID)),
              LONG_INT((Z_OWN_DISK)),
              LONG_INT((Z_OTHER_DISK)));
 /*END WIPRO:B10_MX_MR1 RT TRACE*/
 OD;
END Q_S0000_GET_OWN_LCE_ID;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0004_WAIT_BEFORE_RETRYING                        */
/*                                                                    */
/*     PROGRAMMER: A. BENGALIO (MIDC)                                 */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                 JP QUINN                            97/11/20       */
/*                                                                    */
/*     CREATION DATE: 95/12/15                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       THIS PROCEDURE SIMPLY PERFORMS A PARAMETRIC TIME DELAY       */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_DELAY INT                                  */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      6836_TIME_OUT                                 */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0070_START_TIMER                           */
/*                      Q_S0653_FIND_PROC_INST_TIMER                  */
/*     CALLED FROM:                                                   */
/*                      Q_S0140_MOD_R_PM_FILES                        */
/*                      Q_S0170_MOD_R_PM_ACT                          */
/*                      Q_S0180_MEAS_TYPE_RUNNING                     */
/*                      Q_S0190_LCE_IT                                */
/*                      Q_S0200_HIS_UPD_REQ                           */
/*                      Q_S0155_GET_CELL_SCOPE                        */
/*                      Q_S0401_UPD_T7_INVALID                        */
/*                      Q_S0818_OPEN_HIST_FILE                        */
/*                      Q_S0866_DELETE_INCOMPLETE                     */
/*                      Q_S0868_DELETE_HISTORY                        */
/*                      Q_S1000_CCDC_FSM                              */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0010_WAIT_BEFORE_RETRYING: PROC(ZF_DELAY INT);

DCL ZQ_SILLY_TIMER   M_TIMER_IDENT,
    ZQ_TIMER_ID      M_TIMER_IDENT;

DCL ZQ_DATA1,
    ZQ_DATA2,
    ZQ_DATA3        INT,
    ZQ_PROC_NBR    ZM_PROC_NBR;

ZQ_SILLY_TIMER:=Q_S0070_START_TIMER(ZF_DELAY,
                                    ZS_NULL,
                                    ZS_NULL,
                                    0004);

 DO WHILE ZQ_SILLY_TIMER /= M_TIMER_IDENT_NULL;

   L_005A:WAIT_CASE;

     6836_TIME_OUT(ZQ_DATA1, ZQ_DATA2, ZQ_DATA3, ZQ_TIMER_ID):
     /*=========*/
       IF ZQ_TIMER_ID = ZQ_SILLY_TIMER
       THEN           /* DELAY RETRY */
         RELEASE_TIMER(ZQ_TIMER_ID);
         ZQ_SILLY_TIMER := M_TIMER_IDENT_NULL;
       ELSIF Q_S0653_FIND_PROC_INST_TIMER(ZQ_TIMER_ID,
                                          ZQ_PROC_NBR)
       THEN
         RELEASE_TIMER(ZQ_TIMER_ID);

         /* RESTART THE TIMER, WE ARE BUSY! */
         DO WITH Z_POLL_PROCESS(ZQ_PROC_NBR);
           ZB_TIMER_ID := Q_S0070_START_TIMER(
                                  ZS_LDC_RESPONSE_PERIOD_TENTHS,
                                  ZQ_DATA1,
                                  ZQ_DATA2,
                                  ZQ_DATA3);
         OD;

       FI;
     END_WAIT_CASE_CLAUSE;

     /* ALL OTHER MESSAGES ARE DEFERRED */
   ESAC_TIAW L_005A;

 OD;

END Q_S0010_WAIT_BEFORE_RETRYING;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0020_CCDC_ERROR                                  */
/*                                                                    */
/*     PROGRAMMER: J.P. QUINN   (KDC)                                 */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/28                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*  THE FUNCTION OF THIS PROCEDURE IS TO HANDLE THE ERROS WHICH ARE   */
/*  DETECTED DURING THE EXECUTION OF THIS FMM                         */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_ER_CLASS M_ER_CLASSES,                     */
/*                      ZF_ER_TYPE M_ER_TYPES,                        */
/*                      ZF_ER_NBR M_SEQUENCE_NUM,                     */
/*                      ZF_ER_US_DATA INT                             */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0140_MOD_R_PM_FILES                        */
/*                      Q_S0170_MOD_R_PM_ACT                          */
/*                      Q_S0200_HIS_UPD_REQ                           */
/*                      Q_S0304_WAIT_0126_WRITE_REC_CNF               */
/*                      Q_S0308_WAIT_0124_READ_REC_CNF                */
/*                      Q_S0401_UPD_T7_INVALID                        */
/*                      Q_S0410_CLEAR_MEMORY                          */
/*                      Q_S0430_UPD_T180_CTRS                         */
/*                      Q_S0440_INSERT_SERV_CELL                      */
/*                      Q_S0441_UPD_T180_TCU                          */
/*                      Q_S0442_UPD_T180_TCHRM                        */
/*                      Q_S0595_UPDATE_CCI_ALERTER                    */
/*                      Q_S0812_CLOSE_HIS_FILE                        */
/*                      Q_S0818_OPEN_HIST_FILE                        */
/*                      Q_S1000_CCDC_FSM                              */
/*     PRIMITIVES CALLED:                                             */
/*                      ERROR_REPORT                                  */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0020_CCDC_ERROR: PROC(ZF_ER_CLASS    M_ER_CLASSES,
                         ZF_ER_TYPE     M_ER_TYPES,
                         ZF_ER_NBR      M_SEQUENCE_NUM,
                         ZF_ER_US_DATA  INT);
DCL ZQ_RID           M_RID;
DCL ZQ_ERROR_BUFFER  ZM_ERR_BUF_MODE;
DCL ZQ_ERROR_NBR     M_SEQUENCE_NUM;
DCL ZQ_ER_BUFF_PTR   M_USER_DATA_PTR;

 ZQ_ERROR_NBR   := ZF_ER_NBR;
 ZQ_ER_BUFF_PTR := ->ZQ_ERROR_BUFFER;

 CASE ZF_ER_TYPE OF

   (M_ERT1068_NO_UMEM_BLOCK):
     PTR(ZQ_ER_BUFF_PTR) := NULL;

   (M_ERT0038_OPEN_FILE_FLT):
     DO WITH ZQ_ER_BUFF_PTR -> ZM_ERR_BUF_MODE.B_ER_BUF0038;
       B_FILE_NBR := Z_HIS_FCB.B_FILE_NO;
       B_FILE_PCS := Z_HIS_FCB.B_PCS;
     OD;

   (M_ERT0039_READ_REC_FLT):
     DO WITH ZQ_ER_BUFF_PTR -> ZM_ERR_BUF_MODE.B_ER_BUF0039;
       B_FILE_NBR := Z_HIS_FCB.B_FILE_NO;
       B_FILE_PCS := Z_HIS_FCB.B_PCS;
       B_START_REC_NO := Z_HIS_FCB.B_START_REC_NO;
       B_NO_REC_HDL   := Z_HIS_FCB.B_NO_REC_HDL;
       B_CPL_CODE     := M_CPL_CODE(ZF_ER_US_DATA*1);
     OD;

   (M_ERT0040_CLOSE_FILE_FLT):
     DO WITH ZQ_ER_BUFF_PTR -> ZM_ERR_BUF_MODE.B_ER_BUF0040;
       B_FILE_NBR := Z_HIS_FCB.B_FILE_NO;
       B_FILE_PCS := Z_HIS_FCB.B_PCS;
       B_CPL_CODE := M_CPL_CODE(ZF_ER_US_DATA*1);
       B_BTS_IDX  := ZS_FFFF;
     OD;

   (M_ERT0019_INC_MESS_DATA):
     DO WITH ZQ_ER_BUFF_PTR -> ZM_ERR_BUF_MODE.B_ER_BUF0019;
       B_MSG_NBR := ZF_ER_US_DATA;
       B_FMM_ID  := M_FI_CC_DATA_COLLECTOR;
     OD;

   (M_ERT0009_DBASE_ACC_FAIL):
     ZQ_RID := DB_PARMS.B_REL_PTR -> M_DB_REL_TAB_ELEM.B_REL_ID;

     DO WITH ZQ_ER_BUFF_PTR -> ZM_ERR_BUF_MODE.B_ER_BUF0009;
       B_DB_STATUS       := M_DB_STATUS(DB_PARMS.B_DB_STATUS);
       B_DB_RELATION_ID  := ZQ_RID;
       B_LOG_PROC_ID     := DB_PARMS.B_REL_CE_ID;
       B_DB_ACCESS_TYPE  := DB_PARMS.B_COM_ID;
     OD;
   ELSE;
 ESAC;

/*WIPRO:B10_MX_MR1 RT TRACE*/
 TRACEINFO    :='ERRORS IN EXECUTION (%d %d %d)  ';
      TRC_BSC_PM1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCDC),
              TRACEID(ERIR),
              TRACEINFO,
              LONG_INT((ZF_ER_CLASS)),
              LONG_INT((ZF_ER_NBR)),
              LONG_INT((ZF_ER_TYPE)));
/*END WIPRO:B10_MX_MR1 RT TRACE*/

 ERROR_REPORT (ZF_ER_CLASS, ZF_ER_TYPE,
               ZF_ER_NBR,   ZQ_ER_BUFF_PTR);

END Q_S0020_CCDC_ERROR;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0030_GET_USER_BUF                                */
/*                                                                    */
/*     PROGRAMMER: A.  BENAGLIO (FACE-MI)                             */
/*                                                                    */
/*     CREATION DATE: 92/12/21                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*  GET A BLOCK OF MEMORY FOR FMM USE.                                */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_POINTER_ID PTR LOC,                        */
/*                      ZF_BLOCK_SIZE INT                             */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0602_POLL_LDC                              */
/*                      Q_S0802_HIS_UPD                               */
/*                      Q_S0804_HIS_UPD_T110_1                        */
/*                      Q_S0807_WRITE_TO_HIST_FILE                    */
/*                      Q_S0840_FILE_EXISTS                           */
/*                      Q_S0860_RESET_CCI_DS                          */
/*                      Q_S0866_DELETE_INCOMPLETE                     */
/*                      Q_S0870_INITIALISE_HISTORY                    */
/*                      Q_S0871_COPY_T180_HIS_TO_MEMORY               */
/*                      Q_S0872_COPY_HIS_TO_MEM                       */
/*                      Q_S0875_COPY_T110_1_HIS_TO_MEMOR              */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0030_GET_USER_BUF: PROC(ZF_POINTER_ID       PTR LOC,
                           ZF_BLOCK_SIZE       INT    );

DCL ZQ_I              INT;
DCL ZQ_MEM_PARMS      M_MEM_PARMS;

GET_MEM(ZQ_MEM_PARMS,M_REQUEST_SIZE(ZF_BLOCK_SIZE));

/*WIPRO:B10_MX_MR1 RT TRACE*/
IF PTR(ZQ_MEM_PARMS.B_MEM_PTR) = NULL
    THEN

    TRACEINFO  := 'UB REQ FAILED                   ';
    TRC_BSC_PM1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCDC),
              TRACEID(ERIR),
              TRACEINFO,
              LONG_INT((0)),
              LONG_INT((0)),
              LONG_INT((0)));
FI;
/*END WIPRO:B10_MX_MR1 RT TRACE*/

ZF_POINTER_ID     := ZQ_MEM_PARMS.B_MEM_PTR;

DO FOR ZQ_I := 1  TO  ZF_BLOCK_SIZE;
  ZF_POINTER_ID -> ZM_BYTE_MASK(ZQ_I) := H'FF;
OD;
END Q_S0030_GET_USER_BUF;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0040_RET_MEM                                     */
/*                                                                    */
/*     PROGRAMMER: A.  BENAGLIO (FACE-MI)                             */
/*                                                                    */
/*     CREATION DATE: 92/12/21                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*  RET A BLOCK OF MEMORY FOR FMM USE.                                */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_PTR PTR LOC                                */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0802_HIS_UPD                               */
/*                      Q_S0804_HIS_UPD_T110_1                        */
/*                      Q_S0807_WRITE_TO_HIST_FILE                    */
/*                      Q_S0840_FILE_EXISTS                           */
/*                      Q_S0860_RESET_CCI_DS                          */
/*                      Q_S0866_DELETE_INCOMPLETE                     */
/*                      Q_S0871_COPY_T180_HIS_TO_MEMORY               */
/*                      Q_S0872_COPY_HIS_TO_MEM                       */
/*                      Q_S0875_COPY_T110_1_HIS_TO_MEMOR              */
/*                      Q_S1000_CCDC_FSM                              */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0040_RET_MEM: PROC(ZF_PTR  PTR  LOC);

 IF PTR(ZF_PTR) /= NULL THEN
   ZF_PTR -> M_FMM_ID := M_FMM_ID_NULL;
   RET_MEM(ZF_PTR);
 FI;

END Q_S0040_RET_MEM;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0050_ADD_INT_TO_DPVAL                            */
/*                                                                    */
/*     PROGRAMMER: J.P. QUINN   (KDC)                                 */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                 JP QUINN                            97/12/05       */
/*                                                                    */
/*     CREATION DATE: 97/11/28                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*  ADDS AN INTEGER TO A 2 INTEGER LONG COUNTER. NOTE THAT NOW THAT   */
/*  IF AN OVERFLOW IS DETECTED THE OF VALUE IS WRITTEN TO THE LOC.    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZQ_INT INT,                                   */
/*                      ZQ_LINT M_STA_DPVAL LOC                       */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0440_INSERT_SERV_CELL                      */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0050_ADD_INT_TO_DPVAL: PROC(ZQ_INT   INT,
                               ZQ_LINT  M_STA_DPVAL LOC);

DCL ZQ_CARRY INT;

IF ZQ_LINT.B_LOW = ZS_FFFE AND ZQ_LINT.B_HIGH = ZS_FFFF
THEN
  /* IT HAS OVERFLOWED AS INDICATED BY H'FFFF FFFE */
ELSE
  IF ZQ_LINT.B_LOW = ZS_FFFF AND ZQ_LINT.B_HIGH = ZS_FFFF
  THEN
    /* IT IS INVALID SO OVERWRITE */
    IF ZQ_INT /= ZS_FFFF
    THEN
      ZQ_LINT.B_LOW  := ZQ_INT;
      ZQ_LINT.B_HIGH := 0;
    FI;
  ELSE
    /* VALUE IN RANGE */
    IF ZQ_INT /= ZS_FFFF
    THEN
      IF ZQ_LINT.B_LOW < 0 AND ZQ_INT < 0
      THEN
        /* LOW INT CAPACITY EXCEEDED */
        ZQ_CARRY := 1;
      ELSIF ((ZQ_LINT.B_LOW < 0) OR ( ZQ_INT < 0 )) AND
             (ZQ_LINT.B_LOW + ZQ_INT >= 0)
      THEN
        /* LOW INT CAPACITY EXCEEDED */
        ZQ_CARRY := 1;
      ELSE
        ZQ_CARRY := 0;
      FI;

     /* NOTE THAT INTEGER ARITHMETIC USES A TRICK - THE
      * BSC CANN MANIPULATE THE NUMBERS BUT NOT TEST THEM AS
      * FIGURES GREATER THAN 32K ARE NEGATIVE (BUT POSITIVE TO
      * THE OMC-R.
      */


      DO WITH ZQ_LINT;
        B_LOW := B_LOW + ZQ_INT;
        IF B_HIGH < 0 AND (B_HIGH + ZQ_CARRY) >= 0
        THEN
          /* OVERFLOW */
          B_HIGH := ZS_FFFF;
          B_LOW  := ZS_FFFE;
        ELSE
          B_HIGH := B_HIGH + ZQ_CARRY;
        FI;
      OD;
    FI; /* IS SOURCE VALUE OUT OF RANGE */
  FI; /* DESTIN OUT OF RANGE */
FI; /* DEST OVERFLOW */
END Q_S0050_ADD_INT_TO_DPVAL;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0070_START_TIMER                                 */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (ADC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 94/05/11                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION: STARTS A TIMER USING THE DATA PASSED.  */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_DELAY INT,                                 */
/*                      ZF_REF_NBR INT,                               */
/*                      ZF_PROC_NBR INT,                              */
/*                      ZF_MSG_NBR M_MSG_NBR                          */
/*     RETURNED VALUE:                                                */
/*                      M_TIMER_IDENT                                 */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0010_WAIT_BEFORE_RETRYING                  */
/*                      Q_S0602_POLL_LDC                              */
/*                      Q_S0606_POLL_CURR_LDC                         */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0070_START_TIMER: PROC(ZF_DELAY      INT,
                         ZF_REF_NBR    INT,
                         ZF_PROC_NBR   INT,
                         ZF_MSG_NBR    M_MSG_NBR)
                        RETURNS (M_TIMER_IDENT);

/* FOR O&M THE PRIORITY IS 4 */
DCL ZQ_TIMER_PARMS  M_TIMER_PARMS;

/* START TIMER TO WAIT FOR REPLY */
DO WITH ZQ_TIMER_PARMS;
  B_DELAY   := ZF_DELAY;
  B_PRIORITY:= 4;
  B_DATA_1  := ZF_REF_NBR;
  B_DATA_2  := ZF_PROC_NBR;
  B_DATA_3  := ZF_MSG_NBR;
OD;

/* INITIALISE */
ZQ_TIMER_PARMS.B_TCB_ID:=M_TIMER_IDENT_NULL;

START_TIMER(ZQ_TIMER_PARMS);

RETURN ZQ_TIMER_PARMS.B_TCB_ID;
END Q_S0070_START_TIMER;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0080_CANCEL_TIMER                                */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (ADC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION: CANCELS A TIMER USING THE DATA PASSED. */
/*       THE ENTRY IS REMOVED FROM THE GLOBALS TABLE.                 */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_TCB_ID M_TIMER_IDENT                       */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0670_PROCESS_POLLING_RESPONSE              */
/*     PRIMITIVES CALLED:                                             */
/*                      CANCEL_TIMER                                  */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0080_CANCEL_TIMER: PROC(ZF_TCB_ID  M_TIMER_IDENT);

IF ZF_TCB_ID /= M_TIMER_IDENT_NULL
THEN
  CANCEL_TIMER(ZF_TCB_ID);
FI;

END Q_S0080_CANCEL_TIMER;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0090_ADD_OFFSET_TO_PTR                           */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       ADDS AN OFFSET TO A POINTER.                                 */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_PTR PTR LOC,                               */
/*                      ZF_OFFSET INT                                 */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0110_UPDATE_MEM_PTR                        */
/*                      Q_S0410_CLEAR_MEMORY                          */
/*                      Q_S0802_HIS_UPD                               */
/*                      Q_S0872_COPY_HIS_TO_MEM                       */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0090_ADD_OFFSET_TO_PTR: PROC(ZF_PTR    PTR LOC,
                                ZF_OFFSET INT);

/* CHILL HAS NO FACILITY TO ADD AN OFFSET TO A POINTER SO
 * WE HAVE TO USE THIS FRIG.
 */
NEWMODE ZQM_REL_PTR      = STRUCT(CASE OF
                                   :ZB_PTR  PTR,
                                   :ZB_OFF  INT,
                                    ZB_SEG  INT
                                 ESAC);

  DCL ZQ_LOCAL_PTR PTR;
  ZQ_LOCAL_PTR := ZF_PTR;
  LONG_INT(ZQ_LOCAL_PTR) := LONG_INT((ZQ_LOCAL_PTR))
   + LONG_INT((ZF_OFFSET));
  ZF_PTR := ZQ_LOCAL_PTR;  

END Q_S0090_ADD_OFFSET_TO_PTR;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0100_COPY_BLOCK_OF_MEMORY                        */
/*                                                                    */
/*     PROGRAMMER: JP QUINN  (KDC)                                    */
/*                                                                    */
/*                LAST MODIFIED BY:           DATE:                   */
/*                                                                    */
/*     CREATION DATE: 97/11/05                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION: COPY A BLOCK OF BYTES TO FROM ONE      */
/*                             LOCATION TO ANOTHER.                   */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_SOURCE PTR,                                */
/*                      ZF_DESTIN PTR,                                */
/*                      ZF_LENGTH INT                                 */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0602_POLL_LDC                              */
/*                      Q_S0802_HIS_UPD                               */
/*                      Q_S0804_HIS_UPD_T110_1                        */
/*                      Q_S0807_WRITE_TO_HIST_FILE                    */
/*                      Q_S0871_COPY_T180_HIS_TO_MEMORY               */
/*                      Q_S0872_COPY_HIS_TO_MEM                       */
/*                      Q_S0875_COPY_T110_1_HIS_TO_MEMOR              */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0100_COPY_BLOCK_OF_MEMORY : PROC (ZF_SOURCE PTR,
                                     ZF_DESTIN PTR,
                                     ZF_LENGTH INT);

DCL ZQ_IDX INT;

DO FOR ZQ_IDX := 1 TO ZF_LENGTH;
  ZF_DESTIN ->ZM_BYTE_MASK(ZQ_IDX) := ZF_SOURCE ->ZM_BYTE_MASK(ZQ_IDX);
OD;

END Q_S0100_COPY_BLOCK_OF_MEMORY;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0110_UPDATE_MEM_PTR                              */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/17                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       UPDATES THE PTR TO THE NEXT PART OF MEMORY BASED ON THE      */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_MEM_PTR PTR LOC,                           */
/*                      ZF_BUF_WRITTEN INT,                           */
/*                      ZF_PTR_1 PTR,                                 */
/*                      ZF_PTR_2 PTR                                  */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0090_ADD_OFFSET_TO_PTR                     */
/*     CALLED FROM:                                                   */
/*                      Q_S0802_HIS_UPD                               */
/*                      Q_S0804_HIS_UPD_T110_1                        */
/*                      Q_S0872_COPY_HIS_TO_MEM                       */
/*                      Q_S0875_COPY_T110_1_HIS_TO_MEMOR              */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0110_UPDATE_MEM_PTR: PROC(ZF_MEM_PTR PTR LOC,
                             ZF_BUF_WRITTEN INT,
                             ZF_PTR_1       PTR,
                             ZF_PTR_2       PTR);

DO WITH Z_BUFFER_ATTRIB;
  IF ZB_RECS_WRITTEN = ZB_TOTAL_RECORDS/2
  THEN
    /* GET THE POINTER TO THE NEXT BUFFER */
    ZF_MEM_PTR:=ZF_PTR_2;
  ELSE

IF PTR(ZF_MEM_PTR)=NULL
    THEN
      /* THIS IS THE FIRST TIME */
      ZF_MEM_PTR:=ZF_PTR_1;
    ELSE
      Q_S0090_ADD_OFFSET_TO_PTR(ZF_MEM_PTR, ZF_BUF_WRITTEN);
    FI;
  FI;
OD;

END Q_S0110_UPDATE_MEM_PTR;
/*********************************************************************/
Q_S0110_OLC_UPDATE_MEM_PTR: PROC(ZF_MEM_PTR PTR LOC,
                             ZF_BUF_WRITTEN INT,
                             ZF_PTR_1       PTR,
                             ZF_PTR_2       PTR);

DO WITH Z_OLC_BUFFER_ATTRIB;
  IF ZB_RECS_WRITTEN = (ZB_TOTAL_RECORDS/2L)
  THEN
    /* GET THE POINTER TO THE NEXT BUFFER */
    ZF_MEM_PTR:=ZF_PTR_2;
  ELSE

IF PTR(ZF_MEM_PTR)=NULL
    THEN
      /* THIS IS THE FIRST TIME */
      ZF_MEM_PTR:=ZF_PTR_1;
    ELSE
      Q_S0090_ADD_OFFSET_TO_PTR(ZF_MEM_PTR, ZF_BUF_WRITTEN);
    FI;
  FI;
OD;

END Q_S0110_OLC_UPDATE_MEM_PTR;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0120_GET_R_CONF_CE                               */
/*                                                                    */
/*     PROGRAMMER: L DIERICK  (KDC)                                   */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 98/10/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*      GET R_CONF_CE                                                 */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LCE_ID M_LCE_ID                            */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0000_GET_OWN_LCE_ID                        */
/*                      Q_S0136_DTC_CE_FUNC                           */
/*                      Q_S0146_GET_R_CONF_CE                         */
/*                      Q_S0425_VALIDITY_MATE                         */
/*                      Q_S0432_UPD_T180_INV_TCHRM                    */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      GET     R_CONF_CE                             */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0120_GET_R_CONF_CE: PROC (ZF_LCE_ID   M_LCE_ID);

GET R_CONF_CE WHERE (D_LCE_ID = ZF_LCE_ID);

END Q_S0120_GET_R_CONF_CE;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0130_GET_R_CE_DYST                               */
/*                                                                    */
/*     PROGRAMMER: L DIERICK  (KDC)                                   */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 98/10/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*      GET R_CONF_CE                                                 */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LCE_ID M_LCE_ID                            */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0190_LCE_IT                                */
/*                      Q_S0134_LDC_ON_ACT_CE                         */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      GET     R_CE_DYST                             */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0130_GET_R_CE_DYST: PROC (ZF_LCE_ID   M_LCE_ID);

GET R_CE_DYST WHERE (D_LCE_ID = ZF_LCE_ID);

END Q_S0130_GET_R_CE_DYST;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0135_GET_R_TP_HW_MASTER                          */
/*                                                                    */
/*     PROGRAMMER: CHEN ZHANGYI  (ASB)                                */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 04/10/29                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*      GET R_TP_HW                                                   */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                                                                    */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0195_TP_IT                                 */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      GET     R_TP_HW                               */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0135_GET_R_TP_HW_MASTER: PROC ();

GET R_TP_HW WHERE (D_MASTER = TRUE);

END Q_S0135_GET_R_TP_HW_MASTER;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0140_MOD_R_PM_FILES                              */
/*                                                                    */
/*     PROGRAMMER: J.P. QUINN   (KDC)                                 */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/09/30                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       MODIFIES THE RELATION R_PM_FILES DOMAIN D_HIS_UPD.           */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_MEAS_TYPE M_MEAS_TYPE,                     */
/*                      ZF_HIS_UPD M_PM_HIS_UPD                       */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0010_WAIT_BEFORE_RETRYING                  */
/*                      Q_S0020_CCDC_ERROR                            */
/*     CALLED FROM:                                                   */
/*                      Q_S0200_HIS_UPD_REQ                           */
/*                      Q_S0800_UPDATE_HISTORY_FILES                  */
/*                      Q_S0910_START_STOP_JOB                        */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      MODIFY  R_PM_FILES                            */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0140_MOD_R_PM_FILES: PROC(ZF_MEAS_TYPE M_MEAS_TYPE,
                             ZF_HIS_UPD   M_PM_HIS_UPD)
                        RETURNS (BOOL);

DCL ZQ_TUPLE_MOD BOOL,
    ZQ_RETRY_CNT INT;

 ZQ_TUPLE_MOD := FALSE;

 MODIFY R_PM_FILES WHERE (D_MEAS_TYP = ZF_MEAS_TYPE)
                   TO    (D_HIS_UPD := ZF_HIS_UPD) ;

 DO FOR ZQ_RETRY_CNT := 1 TO ZS_MAX_RETRY
               WHILE DB_PARMS.B_DB_STATUS = M_DB_TUPHELD;

   Q_S0010_WAIT_BEFORE_RETRYING(ZS_WAIT_TIME_DB);
   MODIFY R_PM_FILES WHERE (D_MEAS_TYP = ZF_MEAS_TYPE)
                     TO    (D_HIS_UPD := ZF_HIS_UPD) ;

 OD;

 IF DB_PARMS.B_DB_STATUS /= M_DB_SUCCESS THEN
   Q_S0020_CCDC_ERROR(M_ERC6_USER_REC, M_ERT0009_DBASE_ACC_FAIL,
                      02, H'108);
 ELSE
   ZQ_TUPLE_MOD := TRUE;
 FI;

 RETURN(ZQ_TUPLE_MOD);

END Q_S0140_MOD_R_PM_FILES;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0150_GET_R_PM_ACT_TASK                           */
/*                                                                    */
/*     PROGRAMMER: L DIERICK  (KDC)                                   */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 98/10/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*      GET R_PM_ACT                                                  */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_MEAS_TYPE M_MEAS_TYPE,                     */
/*                      ZF_PM_TASK M_PM_TASK                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0700_START_STOP_27                         */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      GET     R_PM_ACT                              */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0150_GET_R_PM_ACT_TASK: PROC (ZF_MEAS_TYPE   M_MEAS_TYPE,
                                 ZF_PM_TASK     M_PM_TASK);

GET R_PM_ACT WHERE (D_MEAS_TYP  = ZF_MEAS_TYPE,
                    D_PM_TASK   = ZF_PM_TASK);

END Q_S0150_GET_R_PM_ACT_TASK;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0160_GET_R_PM_ACT_RUNNING                        */
/*                                                                    */
/*     PROGRAMMER: L DIERICK  (KDC)                                   */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 98/10/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                  GET R_PM_ACT                                      */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_MEAS_TYPE M_MEAS_TYPE                      */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0170_MOD_R_PM_ACT                          */
/*                      Q_S0180_MEAS_TYPE_RUNNING                     */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      GET     R_PM_ACT                              */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0160_GET_R_PM_ACT_RUNNING : PROC (ZF_MEAS_TYPE  M_MEAS_TYPE);

 GET R_PM_ACT WHERE (D_MEAS_TYP  = ZF_MEAS_TYPE,
                     D_TYPE_ACT  = TRUE,
                     D_PM_TASK   /=E_NOT_RUNNING);

END Q_S0160_GET_R_PM_ACT_RUNNING;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0170_MOD_R_PM_ACT                                */
/*                                                                    */
/*     PROGRAMMER: A.BENAGLIO (MIDC)                                  */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 89/11/16                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                  THE MEASUREMENT HISTORY FILE IS HERE WRITEN.      */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_MEAS_TYPE M_MEAS_TYPE,                     */
/*                      ZF_VALUE BOOL                                 */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0160_GET_R_PM_ACT_RUNNING                  */
/*                      Q_S0020_CCDC_ERROR                            */
/*                      Q_S0010_WAIT_BEFORE_RETRYING                  */
/*     CALLED FROM:                                                   */
/*                      Q_S0800_UPDATE_HISTORY_FILES                  */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      MODIFY  R_PM_ACT                              */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0170_MOD_R_PM_ACT: PROC(ZF_MEAS_TYPE   M_MEAS_TYPE,
                           ZF_VALUE       BOOL);

Q_S0160_GET_R_PM_ACT_RUNNING(ZF_MEAS_TYPE);

IF DB_PARMS.B_DB_STATUS = M_DB_SUCCESS
THEN
  MODIFY R_PM_ACT WHERE (D_ACT_IDX = R_PM_ACT.D_ACT_IDX)
                  TO    (D_SUCC_UPD := ZF_VALUE);

  IF DB_PARMS.B_DB_STATUS /= M_DB_SUCCESS
  THEN
    IF DB_PARMS.B_DB_STATUS /= M_DB_TUPHELD
    THEN
      Q_S0020_CCDC_ERROR(M_ERC6_USER_REC,
                         M_ERT0009_DBASE_ACC_FAIL,
                         03, H'112);
    ELSE
      Q_S0010_WAIT_BEFORE_RETRYING(ZS_WAIT_TIME_DB);
      MODIFY R_PM_ACT WHERE (D_ACT_IDX = R_PM_ACT.D_ACT_IDX)
                      TO  (D_SUCC_UPD := ZF_VALUE);

      IF DB_PARMS.B_DB_STATUS /= M_DB_SUCCESS
      THEN
        Q_S0020_CCDC_ERROR(M_ERC6_USER_REC,
                           M_ERT0009_DBASE_ACC_FAIL,
                           04, H'112);
      FI;
    FI;
  FI;
FI;

 CASE DB_PARMS.B_DB_STATUS OF
  (M_DB_NFTUPIS):
  (M_DB_NFTUPLE):
          Q_S0020_CCDC_ERROR(M_ERC6_USER_REC, M_ERT0009_DBASE_ACC_FAIL,
                             05, H'112);
  ELSE
 ESAC;

END Q_S0170_MOD_R_PM_ACT;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0180_MEAS_TYPE_RUNNING                           */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                J.P. QUINN                           97/12/16       */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       CHECKS WHTHER A PARTICULAR MEASUREMENT TYPE IS ACTIVE AND    */
/*       RUNNING AND IT RETURNS AN INDEX INTO R_PM_ACT.               */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_MEAS_TYPE M_MEAS_TYPE,                     */
/*                      ZF_ACT_IDX INT LOC                            */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0160_GET_R_PM_ACT_RUNNING                  */
/*                      Q_S0010_WAIT_BEFORE_RETRYING                  */
/*     CALLED FROM:                                                   */
/*                      Q_S0122_PREPARE_R_PM_FILES                    */
/*                      Q_S0146_GET_R_CONF_CE                         */
/*                      Q_S0175_MAKE_COMMON_CELL_LIST                 */
/*                      Q_S0180_TCU_IN_JOBS_SCOPE                     */
/*                      Q_S0185_DTC_IN_JOBS_SCOPE                     */
/*                      Q_S0400_UPD_CCI_STD_CNTRS                     */
/*                      Q_S0430_UPD_T180_CTRS                         */
/*                      Q_S0612_LDC_AVAILABLE                         */
/*                      Q_S0660_DO_NEXT_POLL_ACTION                   */
/*                      Q_S0870_INITIALISE_HISTORY                    */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0180_MEAS_TYPE_RUNNING: PROC(ZF_MEAS_TYPE   M_MEAS_TYPE,
                                ZF_ACT_IDX     INT LOC)
                          RETURNS(BOOL);

DCL ZQ_TUPLE_FND BOOL,
    ZQ_RETRY_CNT INT;

 ZQ_TUPLE_FND := FALSE;

 Q_S0160_GET_R_PM_ACT_RUNNING(ZF_MEAS_TYPE);

 DO FOR ZQ_RETRY_CNT := 1 TO ZS_MAX_RETRY
               WHILE DB_PARMS.B_DB_STATUS = M_DB_TUPHELD;

   Q_S0010_WAIT_BEFORE_RETRYING(ZS_WAIT_TIME_DB);
   Q_S0160_GET_R_PM_ACT_RUNNING(ZF_MEAS_TYPE);

 OD;

 IF DB_PARMS.B_DB_STATUS = M_DB_SUCCESS
 THEN
   ZQ_TUPLE_FND := TRUE;
   ZF_ACT_IDX:=R_PM_ACT.D_ACT_IDX;
 FI;

 RETURN(ZQ_TUPLE_FND);
END Q_S0180_MEAS_TYPE_RUNNING;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0190_LCE_IT                                      */
/*                                                                    */
/*     PROGRAMMER: J.P. QUINN   (KDC)                                 */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 17/11/97                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION: CHECKS R_CE_DYST TO SEE IF THE LCE IS  */
/*      EITHER IN TRAFFIC OR FAULT IN TRAFFIC                         */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LCE_ID M_LCE_ID                            */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0130_GET_R_CE_DYST                         */
/*                      Q_S0010_WAIT_BEFORE_RETRYING                  */
/*     CALLED FROM:                                                   */
/*                      Q_S0630_GET_NEXT_LDCP_TO_POLL                 */
/*                      Q_S0700_START_STOP_27                         */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0190_LCE_IT: PROC    (ZF_LCE_ID M_LCE_ID)
                RETURNS (BOOL);
/* DCTPD00914281 : START */
/*Q_S0130_GET_R_CE_DYST(ZF_LCE_ID); */
/* DCTPD00914281 : END */

/*IF DB_PARMS.B_DB_STATUS = M_DB_TUPHELD
THEN
  Q_S0010_WAIT_BEFORE_RETRYING(ZS_WAIT_TIME_DB);
  Q_S0130_GET_R_CE_DYST(ZF_LCE_ID);
FI;

IF DB_PARMS.B_DB_STATUS = M_DB_SUCCESS
THEN
  IF R_CE_DYST.D_CE_STATE = E_MS_IT  OR
     R_CE_DYST.D_CE_STATE = E_MS_FIT
  THEN
    RETURN (TRUE);
  FI;
FI;

RETURN (FALSE);*/
/*STRAT : DTC513 overload alarm */

IF (Z_FA_CE_DYST.ZB_TUPLE_PTR /= NULL)
THEN
  DO WITH Z_FA_CE_DYST.ZB_TUPLE_PTR->
                       ZM_R_CE_DYST(INT((ZF_LCE_ID)));

   IF D_CE_STATE = E_MS_IT  OR
      D_CE_STATE = E_MS_FIT
    THEN
      RETURN (TRUE);
   FI;
 OD;
FI;

RETURN (FALSE);
/*END : DTC513 overload alarm */
END Q_S0190_LCE_IT;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0195_TP_IT                                       */
/*                                                                    */
/*     PROGRAMMER: CHEN ZHANGYI   (ASB)                               */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 29/10/04                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION: CHECKS R_TP_HW TO SEE IF THE MASTER TP */
/*      IS IN TRAFFIC OR FAULT IN TRAFFIC                             */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                                                                    */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0010_WAIT_BEFORE_RETRYING                  */
/*     CALLED FROM:                                                   */
/*                      Q_S0630_GET_NEXT_LDCP_TO_POLL                 */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0195_TP_IT: PROC    ()
                RETURNS (BOOL);

Q_S0135_GET_R_TP_HW_MASTER();

IF DB_PARMS.B_DB_STATUS = M_DB_TUPHELD
THEN
  Q_S0010_WAIT_BEFORE_RETRYING(ZS_WAIT_TIME_DB);
  Q_S0135_GET_R_TP_HW_MASTER();
FI;

IF DB_PARMS.B_DB_STATUS = M_DB_SUCCESS
THEN
  IF R_TP_HW.D_TPH_STAT = E_MS_IT  OR
     R_TP_HW.D_TPH_STAT = E_MS_FIT
  THEN
    RETURN (TRUE);
  FI;
FI;

RETURN (FALSE);
END Q_S0195_TP_IT;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0200_HIS_UPD_REQ                                 */
/*                                                                    */
/*     PROGRAMMER: J.P. QUINN                                         */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 17/11/97                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       FOR A PARTICULAR MEASUREMENT TYPE MARKS THE JOB AS TO HAVE   */
/*       THE HISTORY FILE TO BE UPDATED. IF ALREADY IN THIS STATE -   */
/*       PERHAPS BECAUSE OF A TAKEOVER DURING HIS FILE PRODUCTION     */
/*       THEN THE HISTROY FILE WILL BE UPDATED NONE THE LESS.         */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_MEAS_TYPE M_MEAS_TYPE                      */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0010_WAIT_BEFORE_RETRYING                  */
/*                      Q_S0020_CCDC_ERROR                            */
/*                      Q_S0140_MOD_R_PM_FILES                        */
/*     CALLED FROM:                                                   */
/*                      Q_S0800_UPDATE_HISTORY_FILES                  */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      GET     R_PM_FILES                            */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0200_HIS_UPD_REQ: PROC (ZF_MEAS_TYPE M_MEAS_TYPE)
                     RETURNS(BOOL);

 DCL ZQ_UPD_REQ     BOOL,
     ZQ_RETRY_COUNT INT;

 ZQ_UPD_REQ := FALSE;

 GET R_PM_FILES WHERE (D_MEAS_TYP = ZF_MEAS_TYPE);

 DO FOR ZQ_RETRY_COUNT := 1 TO ZS_MAX_RETRY
               WHILE DB_PARMS.B_DB_STATUS = M_DB_TUPHELD;

   Q_S0010_WAIT_BEFORE_RETRYING(ZS_WAIT_TIME_DB);
   GET R_PM_FILES WHERE (D_MEAS_TYP = ZF_MEAS_TYPE);

 OD;
 IF DB_PARMS.B_DB_STATUS /= M_DB_SUCCESS THEN

   Q_S0020_CCDC_ERROR(M_ERC6_USER_REC, M_ERT0009_DBASE_ACC_FAIL,
                      06, H'116);
 ELSE
   DO WITH R_PM_FILES;
     IF (D_HIS_UPD = E_PM_HIS_TO_BE_UPD) THEN
       IF Q_S0140_MOD_R_PM_FILES(ZF_MEAS_TYPE,
                              E_PM_HIS_IN_UPDATE) THEN
         ZQ_UPD_REQ := TRUE;
       FI;
     ELSIF (D_HIS_UPD = E_PM_HIS_IN_UPDATE) THEN
       ZQ_UPD_REQ := TRUE;
     FI;

   OD;
 FI;

 RETURN(ZQ_UPD_REQ);

END Q_S0200_HIS_UPD_REQ;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0122_PREPARE_R_PM_FILES                          */
/*                                                                    */
/*     PROGRAMMER: J.P. QUINN                                         */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 29/05/97                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION: AT THE BEGINNING OF POLLING ALL MEAS   */
/*      TYPES THAT ARE E_PM_HIS_UPDATED ARE SET TO E_PM_HIS_TO_BE_UPD.*/
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0180_MEAS_TYPE_RUNNING                     */
/*     CALLED FROM:                                                   */
/*                      Q_S1000_CCDC_FSM                              */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      GET     R_PM_FILES                            */
/*                      MODIFY  R_PM_FILES                            */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0122_PREPARE_R_PM_FILES: PROC();

DCL ZQ_ACT_IDX       INT;

IF Z_UPDATE_PM_FILES
  THEN
  GET R_PM_FILES WHERE (D_HIS_UPD /= E_PM_HIS_NOT_TO_BE_UPD);

  DO WHILE DB_PARMS.B_DB_STATUS = M_DB_SUCCESS;

    IF Q_S0180_MEAS_TYPE_RUNNING(R_PM_FILES.D_MEAS_TYP,ZQ_ACT_IDX)
      THEN
      IF R_PM_FILES.D_HIS_UPD /= E_PM_HIS_TO_BE_UPD
        THEN
        MODIFY R_PM_FILES WHERE (D_TYPE_IDX = R_PM_FILES.D_TYPE_IDX)
                         TO (D_HIS_UPD := E_PM_HIS_TO_BE_UPD);
      FI;
    ELSE
      MODIFY R_PM_FILES WHERE (D_TYPE_IDX = R_PM_FILES.D_TYPE_IDX)
                       TO (D_HIS_UPD := E_PM_HIS_NOT_TO_BE_UPD);

    FI;

    GET R_PM_FILES WHERE (D_HIS_UPD /= E_PM_HIS_NOT_TO_BE_UPD) IN SEQ;

  OD;
FI;

Z_UPDATE_PM_FILES := TRUE;

END Q_S0122_PREPARE_R_PM_FILES;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0126_GET_R_CELL_MGT_CELL                         */
/*                                                                    */
/*     PROGRAMMER: L DIERICK    (KDC)                                 */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 98/10/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                      GET R_CELL_MGT                                */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_CELL_IDX M_CELL_IDX                        */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0432_UPD_T180_INV_TCHRM                    */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      GET     R_CELL_MGT                            */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0126_GET_R_CELL_MGT_CELL: PROC (ZF_CELL_IDX M_CELL_IDX);

GET R_CELL_MGT WHERE (D_CELL_IDX = ZF_CELL_IDX);

END Q_S0126_GET_R_CELL_MGT_CELL;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0127_GET_R_TRX_MGT_RSL                           */
/*                                                                    */
/*     PROGRAMMER: L DIERICK    (KDC)                                 */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 98/10/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                      GET R_TRX_MGT                                 */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_RSL_IDX M_RSL_IDX                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0132_GET_CIS_FOR_TCU                       */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      GET     R_TRX_MGT                             */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0127_GET_R_TRX_MGT_RSL: PROC (ZF_RSL_IDX  M_RSL_IDX);

GET R_TRX_MGT WHERE (D_RSL_IDX = ZF_RSL_IDX);

END Q_S0127_GET_R_TRX_MGT_RSL;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0131_GET_R_RSL_LNK                               */
/*                                                                    */
/*     PROGRAMMER: L DIERICK    (KDC)                                 */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 98/10/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                      GET R_RSL_LNK                                 */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LDC_LCE_ID M_LCE_ID,                       */
/*                      ZF_IN_SEQ BOOL                                */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0132_GET_CIS_FOR_TCU                       */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      GET     R_RSL_LNK                             */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0131_GET_R_RSL_LNK: PROC (ZF_LDC_LCE_ID M_LCE_ID,
                             ZF_IN_SEQ     BOOL);

IF ZF_IN_SEQ
 THEN
   GET R_RSL_LNK WHERE (D_TCU_ID = ZF_LDC_LCE_ID) IN SEQ;
 ELSE
   GET R_RSL_LNK WHERE (D_TCU_ID = ZF_LDC_LCE_ID);
 FI;

END Q_S0131_GET_R_RSL_LNK;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0132_GET_CIS_FOR_TCU                             */
/*                                                                    */
/*     PROGRAMMER: J.P. QUINN   (KDC)                                 */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/04/04                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                      A TCU HANDLES A SET OF CELL_IDXS WHEN THIS    */
/*      TCU FAILS TO RESPOND TO POLLING IT IS THESE CELL-IDX BASED    */
/*      COUNTERS THAT ARE LOST WHICH MUST BE REFLECTED IN THE NUMBER  */
/*      OF LOST SAMPLES.                                              */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LDC_LCE_ID M_LCE_ID                        */
/*     RETURNED VALUE:                                                */
/*                      ZM_CIS_PER_TCU                                */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0131_GET_R_RSL_LNK                         */
/*                      Q_S0127_GET_R_TRX_MGT_RSL                     */
/*     CALLED FROM:                                                   */
/*                      Q_S0180_TCU_IN_JOBS_SCOPE                     */
/*                      Q_S0431_UPD_T180_INV_TCU                      */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0132_GET_CIS_FOR_TCU: PROC   (ZF_LDC_LCE_ID M_LCE_ID)
                         RETURNS(ZM_CIS_PER_TCU);

DCL ZQ_CI_ARRAY  ZM_CIS_PER_TCU,
    ZQ_CCNT      RANGE(1:CM_FY32_MAX_CELLS_PER_TCU),
    ZQ_I         RANGE(1:CM_FY32_MAX_CELLS_PER_TCU),
    ZQ_CI        M_CELL_IDX,
    ZQ_CI_EXISTS BOOL;

/* BEGIN: DCTPD00914281  */
DCL ZQ_RSL_IDX M_RSL_IDX ;
DCL ZQ_TRX_IDX M_TRX_IDX;
DCL ZQ_RSL INT;
DCL ZQ_RSL_FOUND BOOL;
DCL ZQ_TRX_FOUND BOOL;
DCL ZQ_RSL_FOUND_CNT INT;


ZQ_RSL_FOUND := FALSE;
ZQ_TRX_FOUND := FALSE;
ZQ_RSL_FOUND_CNT := 0;
/* END: DCTPD00914281  */

/* THIS WORKS FOR R4 SO I AM NOT CHANGING IT TO ANYTHING ELSE. JPQ */

 DO FOR ZQ_CCNT := 1 TO CM_FY32_MAX_CELLS_PER_TCU;
   ZQ_CI_ARRAY(ZQ_CCNT) := M_NULL_CELL_IDX;
 OD;

 ZQ_CCNT := 1;

 /*Q_S0131_GET_R_RSL_LNK (ZF_LDC_LCE_ID, FALSE);

 DO WHILE DB_PARMS.B_DB_STATUS = M_DB_SUCCESS;

   Q_S0127_GET_R_TRX_MGT_RSL(R_RSL_LNK.D_RSL_IDX);

   IF DB_PARMS.B_DB_STATUS = M_DB_SUCCESS*/

/* BEGIN: DCTPD00914281  */
 DO FOR ZQ_RSL := 1 TO 1400 WHILE ZQ_RSL_FOUND_CNT < 4 ;
 DO WITH Z_FA_RSL_LNK.ZB_TUPLE_PTR -> ZM_R_RSL_LNK(ZQ_RSL);
 
  IF( D_TCU_ID = ZF_LDC_LCE_ID)
   THEN
    ZQ_RSL_IDX := ZQ_RSL;
    ZQ_RSL_FOUND := TRUE;
  FI;
 OD;
 /* OD; */

  IF(ZQ_RSL_FOUND)
   THEN
  
 ZQ_RSL_FOUND := FALSE ;
 ZQ_TRX_FOUND := FALSE ; 

  DO FOR ZQ_TRX_IDX := 1 TO 1400 WHILE  ZQ_TRX_FOUND/=TRUE;
    DO WITH  Z_FA_TRX_MGT.ZB_TUPLE_PTR -> 
                        ZM_R_TRX_MGT(INT((ZQ_TRX_IDX)));
    IF(D_RSL_IDX = ZQ_RSL_IDX)
     THEN
      
     ZQ_CI := D_CELL_IDX;
     ZQ_TRX_FOUND := TRUE; 

     ZQ_CI_EXISTS := FALSE;

     DO FOR ZQ_I := 1 TO ZQ_CCNT;
       /* SO NO DUPLICATE CI IN ARR */
       IF ZQ_CI_ARRAY(ZQ_I) = ZQ_CI THEN
         ZQ_CI_EXISTS := TRUE;
       FI;
     OD;

     IF ZQ_CI_EXISTS = FALSE
     THEN
       ZQ_CI_ARRAY(ZQ_CCNT) := D_CELL_IDX;

       /* IT SHOULD BE IMPOSSIBLE TO EVER GET MORE THAN THE MAX
         NUMBER OF CELLS FROM A TCU POPULATED IN THE DATABASE.
        */
       ZQ_CCNT := ZQ_CCNT MOD CM_FY32_MAX_CELLS_PER_TCU + 1;
     FI;

  /* Q_S0131_GET_R_RSL_LNK (ZF_LDC_LCE_ID, TRUE);*/
 /*START : DTC513 overload alarm*/

  /*   GET R_RSL_LNK WHERE (D_TCU_ID = ZF_LDC_LCE_ID) */
/*END : DTC513 overload alarm*/

  FI; 
 OD;
 OD;

ZQ_RSL_FOUND_CNT := ZQ_RSL_FOUND_CNT + 1 ;  
/* assuming the number of RSL count will be max 4 per TCU*/

 FI; /* ZQ_RSl_FOUND */ 

 OD; /* DO FOR */  


 Z_CIS_PER_TCU := ZQ_CI_ARRAY;                      /* DEBUG PURPOSES */

 RETURN(ZQ_CI_ARRAY);

END Q_S0132_GET_CIS_FOR_TCU;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0134_LDC_ON_ACT_CE                               */
/*                                                                    */
/*     PROGRAMMER: J.P. QUINN (KDC)                                   */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/04/09                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION: R_CE_DYST IS ASSESSED TO SEE IF THE    */
/*      INPUT LCE_ID IS ACTIVE (RET TRUE) OR STANDBY (RET FALSE)      */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LCE_ID M_LCE_ID                            */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0130_GET_R_CE_DYST                         */
/*     CALLED FROM:                                                   */
/*                      Q_S0400_UPD_CCI_STD_CNTRS                     */
/*                      Q_S0430_UPD_T180_CTRS                         */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0134_LDC_ON_ACT_CE: PROC(ZF_LCE_ID M_LCE_ID)
                       RETURNS(BOOL);
/* BEGIN : DCTPD00914281 */
/* Q_S0130_GET_R_CE_DYST(ZF_LCE_ID);*/
/*START : DTC513 overload alarm */
/*GET R_CE_DYST WHERE (D_LCE_ID = ZF_LCE_ID);*/
IF (Z_FA_CE_DYST.ZB_TUPLE_PTR /= NULL)
THEN
DO WITH Z_FA_CE_DYST.ZB_TUPLE_PTR->ZM_R_CE_DYST(INT((ZF_LCE_ID)));
 IF D_ACCESS.B_ACTIVE THEN
   RETURN TRUE;
 ELSE
   RETURN FALSE;
 FI;
OD;
FI;
/*END : DCTPD00914281 */

 RETURN FALSE;/* Added for warning removel in AL30K */

END Q_S0134_LDC_ON_ACT_CE;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0136_DTC_CE_FUNC                                 */
/*                                                                    */
/*     PROGRAMMER: J.P. QUINN (KDC)                                   */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/04/09                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION: R_CONF_CE IS ACCESSED TO CHECK THE     */
/*      CE FUNCTIONALITY OF THE SUPPLIED LCE_ID, IF IT IS SET TO THE  */
/*      INPUT TYPE THEN TRUE IS RETURNED.                             */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LCE_ID M_LCE_ID,                           */
/*                      ZF_CE_FUNC M_CE_FUNCTIONALITY                 */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0120_GET_R_CONF_CE                         */
/*     CALLED FROM:                                                   */
/*                      Q_S0185_DTC_IN_JOBS_SCOPE                     */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0136_DTC_CE_FUNC: PROC(ZF_LCE_ID  M_LCE_ID,
                          ZF_CE_FUNC M_CE_FUNCTIONALITY)
                       RETURNS(BOOL);

 Q_S0120_GET_R_CONF_CE(ZF_LCE_ID);

 IF R_CONF_CE.D_CE_FUNCT = ZF_CE_FUNC THEN
   RETURN TRUE;
 ELSE
   RETURN FALSE;
 FI;

END Q_S0136_DTC_CE_FUNC;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0146_GET_R_CONF_CE                               */
/*                                                                    */
/*     PROGRAMMER: J.P. QUINN   (KDC)                                 */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 18/11/97                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION: THIS IS AN IMPORTANT PROCEDURE THAT    */
/*      HELPS DOCUMENT THE POLLING SEQUENCE AND HOW THE LDC FAMILYS   */
/*      ARE DERIVED.                                                  */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_GET_FIRST BOOL,                            */
/*                      ZF_POLL_STEP ZM_CCDC_POLL_SEQ                 */
/*     RETURNED VALUE:                                                */
/*                      M_LCE_ID                                      */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0120_GET_R_CONF_CE                         */
/*                      Q_S0180_MEAS_TYPE_RUNNING                     */
/*     CALLED FROM:                                                   */
/*                      Q_S0635_GET_NEXT_POLL_STEP                    */
/*                      Q_S0700_START_STOP_27                         */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0146_GET_R_CONF_CE: PROC(ZF_GET_FIRST BOOL,
                            ZF_POLL_STEP ZM_CCDC_POLL_SEQ)
                       RETURNS(M_LCE_ID);

DCL ZQ_LCE_ID   M_LCE_ID;
DCL ZQ_ACT_IDX  INT;

ZQ_LCE_ID:=M_LCE_ID_NULL;

IF ZF_GET_FIRST
THEN
  Z_CURR_LDC_LCE:=1;
FI;

Q_S0120_GET_R_CONF_CE(Z_CURR_LDC_LCE);

DO WHILE DB_PARMS.B_DB_STATUS = M_DB_SUCCESS AND
         ZQ_LCE_ID=M_LCE_ID_NULL;
  CASE ZF_POLL_STEP OF

   (ZE_POLL_DTC_STANDARD):
   /*-----------------*/
/*CHANGE-WIPRO-CCP SWITCHOVER-IMPROVEMENT*/
     /*IF R_CONF_CE.D_CE_FUNCT >= E_CE_FUNCT_SCCP_DTC AND*/
       /*COMMENTED-WIPRO-FOR-ER2124*/
       /* R_CONF_CE.D_CE_FUNCT <= E_CE_FUNCT_TEL_DTC  OR */
       /*COMMENTED-WIPRO-FOR-ER2124*/
       /*CHANGED-WIPRO-ER2124*/
        /*R_CONF_CE.D_CE_FUNCT < E_CE_FUNCT_TEL_DTC  OR*/
       /*CHANGED-WIPRO-ER2124*/
        /*R_CONF_CE.D_CE_FUNCT = E_CE_FUNCT_GSL_DTC*/
     IF (R_CONF_CE.D_CE_FUNCT = E_CE_FUNCT_SCCP_DTC AND
         R_CONF_CE.D_RED_VCE /= ZS_FFFF) OR
        (R_CONF_CE.D_CE_FUNCT = E_CE_FUNCT_ATRK_ONLY_DTC) OR
        (R_CONF_CE.D_CE_FUNCT = E_CE_FUNCT_GSL_DTC)
     /*CHANGE-WIPRO-CCP SWITCHOVER-IMPROVEMENT*/   
     THEN
       ZQ_LCE_ID:=R_CONF_CE.D_LCE_ID;
     FI;

   (ZE_POLL_DTC_STAN_TRX):
   /*-----------------*/
   /* ONLY THE BSSAP DTCS ARE RELEVANT HERE */
/*CHANGE-WIPRO-CCP SWITCHOVER-IMPROVEMENT*/
     /*IF R_CONF_CE.D_CE_FUNCT = E_CE_FUNCT_SCCP_DTC*/
     IF R_CONF_CE.D_CE_FUNCT = E_CE_FUNCT_SCCP_DTC
      AND R_CONF_CE.D_RED_VCE /= ZS_FFFF
     /*CHANGE-WIPRO-CCP SWITCHOVER-IMPROVEMENT*/
     THEN
       ZQ_LCE_ID:=R_CONF_CE.D_LCE_ID;
     FI;

   (ZE_POLL_DTC_DETAIL):
   /*-----------------*/
   /* ONLY THE BSSAP DTCS ARE RELEVANT HERE */
     /*CHANGE-WIPRO-CCP SWITCHOVER-IMPROVEMENT*/
     /*IF R_CONF_CE.D_CE_FUNCT = E_CE_FUNCT_SCCP_DTC*/
     IF R_CONF_CE.D_CE_FUNCT = E_CE_FUNCT_SCCP_DTC
      AND R_CONF_CE.D_RED_VCE /= ZS_FFFF
     /*CHANGE-WIPRO-CCP SWITCHOVER-IMPROVEMENT*/
     THEN
       ZQ_LCE_ID:=R_CONF_CE.D_LCE_ID;
     FI;

   (ZE_POLL_TCU_STANDARD,
    ZE_POLL_TCU_DETAIL,
    ZE_POLL_TCU_T26,
    ZE_POLL_TCU_EME):
   /*-----------------*/
    /*CHANGE-WIPRO-CCP SWITCHOVER-IMPROVEMENT*/
     /*IF R_CONF_CE.D_CE_FUNCT = E_CE_FUNCT_TCU*/
     IF R_CONF_CE.D_CE_FUNCT = E_CE_FUNCT_TCU
      AND R_CONF_CE.D_RED_VCE /= ZS_FFFF
     /*CHANGE-WIPRO-CCP SWITCHOVER-IMPROVEMENT*/
     THEN
       ZQ_LCE_ID:=R_CONF_CE.D_LCE_ID;
     FI;

 /* DEL IN MXB8 BEGIN */
 /*(ZE_POLL_DTC_N7_STANDARD): */
   /*--------------------*/
   /*IF R_CONF_CE.D_CE_FUNCT = E_CE_FUNCT_N7_DTC
     THEN
       ZQ_LCE_ID:=R_CONF_CE.D_LCE_ID;
     FI;*/
 /* DEL IN MXB8 END */

   (ZE_POLL_TCH_STANDARD):
   /*-----------------*/
     IF R_CONF_CE.D_CE_FUNCT = E_CE_FUNCT_SYS_CPR     OR
        /*R_CONF_CE.D_CE_FUNCT = E_CE_FUNCT_TEL_SYS_CPR OR*/
        R_CONF_CE.D_CE_FUNCT = E_CE_FUNCT_TEL_DTC
     THEN
       ZQ_LCE_ID:=R_CONF_CE.D_LCE_ID;
     FI;

   (ZE_POLL_CPR_N7_STANDARD):
   /*--------------------*/
     IF R_CONF_CE.D_CE_FUNCT = E_CE_FUNCT_SYS_CPR
     /*     OR
        R_CONF_CE.D_CE_FUNCT = E_CE_FUNCT_TEL_SYS_CPR*/
     THEN
       ZQ_LCE_ID:=R_CONF_CE.D_LCE_ID;
     FI;

   (ZE_POLL_X25_STANDARD):
   /*-----------------*/
   /*BEGIN DEL for ER6612 by ZHUJ*/
   /*
     IF R_CONF_CE.D_CE_FUNCT >= E_CE_FUNCT_SYS_CPR   AND
        R_CONF_CE.D_CE_FUNCT <= E_CE_FUNCT_OSI_CPR
     THEN
        ZQ_LCE_ID:=R_CONF_CE.D_LCE_ID;
     FI;
   */
   /*END DEL*/
   
   /*BEGIN ADD for ER6612 by ZHUJ*/
   /*ONLY POLL ACTIVE OCPR*/
        ZQ_LCE_ID:= Z_OWN_PID.B_PID_PROCESS_ID.B_PID_LCE;
   /*END ADD*/

   (ZE_POLL_SMS_STANDARD):
   /*-----------------*/
     IF R_CONF_CE.D_CE_FUNCT = E_CE_FUNCT_OSI_CPR
     THEN
       ZQ_LCE_ID:=R_CONF_CE.D_LCE_ID;
     FI;

   /* ADD IN MXB8 BEGIN */
   (ZE_POLL_TP_N7):
   /*--------------------*/
     ZQ_LCE_ID:=CM_FY32_TP_LCE_ID_SS7_MAIN;
    
   (ZE_POLL_TP_HDLC):
   /*--------------------*/
     ZQ_LCE_ID:=CM_FY32_TP_LCE_ID_MAIN;
   /* ADD IN MXB8 END */

/* START : WIPRO B11 IP MR0 PKG1 */
   (ZE_POLL_TP_IPOE1):
   /*--------------------*/
     ZQ_LCE_ID:=CM_FY32_TP_LCE_ID_MAIN;
/*START : AUPOIP FEATURE */
/* START : 256 MGW IP Addresses ./
    (ZE_POLL_TP_AUPOIP_MGW_TC_CTR)
/. CHG : 256 MGW IP Addresses */
    (ZE_POLL_TP_AUPOIP_MGW_CTR1,
     ZE_POLL_TP_AUPOIP_MGW_CTR2,
     ZE_POLL_TP_AUPOIP_MGW_CTR3,
     ZE_POLL_TP_AUPOIP_MGW_CTR4,
     ZE_POLL_TP_AUPOIP_MGW_CTR5,
     ZE_POLL_TP_AUPOIP_MGW_CTR6,
     ZE_POLL_TP_AUPOIP_TC_CTR):
/* END : 256 MGW IP Addresses */
    ZQ_LCE_ID:=CM_FY32_TP_LCE_ID_MAIN;
/* BEGIN : FR36/307843 */
   /* (ZE_POLL_TP_AUPOIP_BTS_CTR):*/
    (ZE_POLL_TP_AUPOIP_BTS_CTR_1):
/* END : FR36/307843 */
    ZQ_LCE_ID:=CM_FY32_TP_LCE_ID_MAIN;
/* BEGIN : FR36/307843 */
    (ZE_POLL_TP_AUPOIP_BTS_CTR_2):
    ZQ_LCE_ID:=CM_FY32_TP_LCE_ID_MAIN;
/* END : FR36/307843 */
/* END : AUPOIP FEATURE */

   (ZE_POLL_TCSL_MR):
   /*--------------------*/
   /* SRINIVAS: LCE ID NOT YET DETERMINED */
   /* IF R_CONF_CE.D_CE_FUNCT = E_CE_FUNCT_OSI_CPR 
     AND Q_S0134_LDC_ON_ACT_CE(R_CONF_CE.D_LCE_ID)
   THEN
      ZQ_LCE_ID:=R_CONF_CE.D_LCE_ID;
   FI; */
   ZQ_LCE_ID:= CM_FY32_TCSLMR_LCEID_MAIN;

/* END : WIPRO B11 IP MR0 PKG1 */
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
 (ZE_POLL_M3UA_LM):
   /*--------------------*/
   ZQ_LCE_ID:= CM_FY32_M3UALM_LCEID_MAIN;
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */   
/* BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE */
/* START : WIPRO B11 IP MR0 PKG1 */
/* START: 3BKA36CBR236941*/
   /*START: CR36/274715*/ 
   /*(ZE_POLL_TC_MTP2):*/
/*--------------------*/
/*AS MTP-2 COUNTERS(N1.8-N3.5) WILL ALWAYS BE ZEROS FROM TC 
IN IP MODE SO THERE IS NO NEED TO POLL THE TC. HENCE POLLING
IS AVOIDED.INSTEAD OF REMOVING THE ZE_POLL_TC_MTP2 FROM POLL
STEP , IT IS BETTER TO INCLUDE THIS WORKAROUND TO REDUCE THE
RISK ON REMOVING THE CODE*/    
    /*ZQ_LCE_ID:= M_LCE_ID_NULL;
      RETURN (ZQ_LCE_ID);*/
   /*END: CR36/274715*/
/* END: 3BKA36CBR236941*/
/* START: 3BKA36CBR236941*/
   /*START: CR36/274715*/ 

/*START: IURG FEATURE */
 (ZE_POLL_IURG):
   ZQ_LCE_ID:=CM_FY32_M3UALM_LCEID_MAIN ; 
/*M3UA WILL BE POLLED FOR IURG COUNTERS*/
/*END : IURG FEATURE */
   (ZE_POLL_TC_MTP2, ZE_POLL_TC_IP):
   /*(ZE_POLL_TC_IP):*/
   /*END: CR36/274715*/
/* END: 3BKA36CBR236941*/ 
  /*--------------------*/ 
/* END : WIPRO B11 IP MR0 PKG1 */
   IF R_CONF_CE.D_CE_FUNCT = E_CE_FUNCT_SYS_CPR
     AND Q_S0134_LDC_ON_ACT_CE(R_CONF_CE.D_LCE_ID)
   THEN
      ZQ_LCE_ID:=R_CONF_CE.D_LCE_ID;

   FI;
   (ZE_POLL_OMCP_N7):
   /*--------------------*/
   ZQ_LCE_ID:= CM_FY32_N7SLH_LCEID_MAIN;
  /* END: ADD-WIPRO-B10-MX-MR2-CHANGE */

   (ZE_POLL_TRAFFIC_FLOW):
   /*-----------------*/
     IF Q_S0180_MEAS_TYPE_RUNNING(E_MT_TRAFFIC_FLOW, ZQ_ACT_IDX)
       THEN
      /*CHANGE-WIPRO-CCP SWITCHOVER-IMPROVEMENT*/
       /*IF R_CONF_CE.D_CE_FUNCT = E_CE_FUNCT_TCU       OR
          R_CONF_CE.D_CE_FUNCT = E_CE_FUNCT_TEL_DTC*/
       IF (R_CONF_CE.D_CE_FUNCT = E_CE_FUNCT_TCU  
           AND R_CONF_CE.D_RED_VCE /= ZS_FFFF)      OR
          R_CONF_CE.D_CE_FUNCT = E_CE_FUNCT_TEL_DTC    
      /*CHANGE-WIPRO-CCP SWITCHOVER-IMPROVEMENT*/     
       THEN
         ZQ_LCE_ID:=R_CONF_CE.D_LCE_ID;
       FI;
     ELSE
       RETURN (ZQ_LCE_ID);
     FI;

	/* BEGIN: CR 605005 */
    (ZE_POLL_PM_CPI):
	
	ZQ_LCE_ID := M_VCE_ID_CPI;
       /* END: CR 605005 */	
	 
   ELSE
  ESAC;
  Z_CURR_LDC_LCE:=Z_CURR_LDC_LCE+1;

  IF ZQ_LCE_ID=M_LCE_ID_NULL
  THEN
    Q_S0120_GET_R_CONF_CE(Z_CURR_LDC_LCE);
  FI;
OD;

RETURN (ZQ_LCE_ID);

END Q_S0146_GET_R_CONF_CE;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0155_GET_CELL_SCOPE                              */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       GET CELL SCOPE OF THE JOB FOR THIS MEASUREMENT TYPE.         */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_ACT_IDX INT,                               */
/*                      ZF_CELL_LIST M_PM_DET_CELL_LIST LOC           */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0010_WAIT_BEFORE_RETRYING                  */
/*     CALLED FROM:                                                   */
/*                      Q_S0175_MAKE_COMMON_CELL_LIST                 */
/*                      Q_S0612_LDC_AVAILABLE                         */
/*                      Q_S0700_START_STOP_27                         */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      GET     R_PM_SC_G2                            */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0155_GET_CELL_SCOPE: PROC(ZF_ACT_IDX    INT,
                             ZF_CELL_LIST  M_PM_DET_CELL_LIST LOC);

DCL ZQ_I    INT,
    ZQ_NBR_CELLS,
    ZQ_T    M_BYTE;

/* IMPORTANT NOTE - THER ORDER OF THE CELLS IN THE CELL LIST
 * IS THE SAME ORDER AS THEY WILL APPEAR IN THE HISTORY FILE.
 * HENCE THIS ROUTINE SHOULD BE CHANGED WITH CARE!
 * THIS ASSUMPTION IS MADE SINCE IT ALLOWS US TO INDEX INTO
 * THE HISTORY FILE IN A NEAT WAY.
 */

ZQ_NBR_CELLS:=1;

  GET R_PM_SC_G2 WHERE (D_ACT_IDX=ZF_ACT_IDX);

  DO FOR ZQ_T := 1 TO ZS_MAX_RETRY WHILE
    DB_PARMS.B_DB_STATUS = M_DB_TUPHELD;

    Q_S0010_WAIT_BEFORE_RETRYING(ZS_WAIT_TIME_DB);
    GET R_PM_SC_G2 WHERE (D_ACT_IDX=ZF_ACT_IDX);
  OD;

  IF DB_PARMS.B_DB_STATUS = M_DB_SUCCESS
  THEN
    DO FOR ZQ_I := 1 TO M_PM_MAX_CELLS_FOR_A_MEAS_JOB;
      ZF_CELL_LIST(ZQ_I) := M_NULL_CELL_IDX;
    OD;

    DO FOR ZQ_I := 1 TO CM_FY32_MAX_CELLS_PER_BSC;
      IF R_PM_SC_G2.D_SCOP_G2(ZQ_I)
      THEN
        ZF_CELL_LIST(ZQ_NBR_CELLS) := ZQ_I;
        ZQ_NBR_CELLS := ZQ_NBR_CELLS+1;
      FI;
    OD;
  FI;

END Q_S0155_GET_CELL_SCOPE;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0160_CELL_IN_SCOPE                               */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       IS THE CELL IN THE SCOPE OF THE JOB FOR THIS MEASUREMENT TYPE*/
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_ACT_IDX INT,                               */
/*                      ZF_CELL_IDX M_CELL_IDX                        */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0180_TCU_IN_JOBS_SCOPE                     */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      GET     R_PM_SC_G2                            */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0160_CELL_IN_SCOPE: PROC(ZF_ACT_IDX    INT,
                            ZF_CELL_IDX   M_CELL_IDX)
                          RETURNS(BOOL);

GET R_PM_SC_G2 WHERE (D_ACT_IDX=ZF_ACT_IDX);

IF DB_PARMS.B_DB_STATUS = M_DB_SUCCESS
   THEN
   IF R_PM_SC_G2.D_SCOP_G2(ZF_CELL_IDX)
      THEN
      RETURN TRUE;
   FI;
FI;

RETURN FALSE;

END Q_S0160_CELL_IN_SCOPE;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0170_CELL_IN_LIST                                */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       IS THE CELL IN THE CELL LIST.                                */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_CELL_IDX M_CELL_IDX,                       */
/*                      ZF_CELL_LIST M_PM_LIST_OF_CELLS LOC           */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0175_MAKE_COMMON_CELL_LIST                 */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0170_CELL_IN_LIST: PROC(ZF_CELL_IDX   M_CELL_IDX,
                           ZF_CELL_LIST  M_PM_LIST_OF_CELLS LOC)
                      RETURNS(BOOL);

DCL ZQ_I INT;

/* ELIMINATE NULL CELL IDXS AS A PRECONDITION */
IF ZF_CELL_IDX/=M_NULL_CELL_IDX AND
   ZF_CELL_LIST.B_NBR_CELLS > 0
THEN
  /* ALL TUPLES NEED NOT BE SEARCHED AS THIS LIST IS CONSTRUCTED
   * LOCALLY TO BE CONTIGUOUS.
   */
  DO WITH ZF_CELL_LIST;
    DO FOR ZQ_I:=1 TO B_NBR_CELLS;
      IF B_CELL_LIST(ZQ_I)=ZF_CELL_IDX
      THEN
        RETURN TRUE;
      FI;
    OD;
  OD;
FI;

RETURN FALSE;

END Q_S0170_CELL_IN_LIST;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0175_MAKE_COMMON_CELL_LIST                       */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       MAKES A COMMON CELL LIST FOR ALL ACTIVE DETAILED JOBS.       */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0180_MEAS_TYPE_RUNNING                     */
/*                      Q_S0155_GET_CELL_SCOPE                        */
/*                      Q_S0170_CELL_IN_LIST                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0600_START_OF_POLLING                      */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0175_MAKE_COMMON_CELL_LIST: PROC();

DCL ZQ_I             INT,
    ZQ_ACT_IDX       INT,
    ZQ_CELL_LIST     M_PM_DET_CELL_LIST,
    ZQ_MEAS_TYPE     M_MEAS_TYPE;

Z_CELL_LIST.B_NBR_CELLS:=0;
DO FOR ZQ_I:=1 TO M_PM_MAX_CELLS_FOR_A_MEAS_JOB;
  Z_CELL_LIST.B_CELL_LIST(ZQ_I):=M_NULL_CELL_IDX;
OD;

DO FOR ZQ_MEAS_TYPE := E_MT_TRAFFIC TO E_MT_HANDOVER;
  CASE ZQ_MEAS_TYPE OF
    (E_MT_TRAFFIC,                                              /* 1 */
     E_MT_RESOURCE_AVAILABILITY,                                /* 2 */
     E_MT_RESOURCE_USAGE_CCCH,                                  /* 3 */
     E_MT_RESOURCE_USAGE_SDCCH,                                 /* 4 */
     E_MT_RESOURCE_USAGE_RTCH,                                  /* 5 */
     E_MT_HANDOVER) :                                           /* 6 */

      IF Q_S0180_MEAS_TYPE_RUNNING(ZQ_MEAS_TYPE, ZQ_ACT_IDX)
      THEN
        /* ADD ONE LIST TO THE MAIN ONE.
         * ASSUME THAT THE Z_CELL_LIST HAS BEEN INITIALISED.
         */
        Q_S0155_GET_CELL_SCOPE(ZQ_ACT_IDX,
                               ZQ_CELL_LIST);

        DO FOR ZQ_I:=1 TO M_PM_MAX_CELLS_FOR_A_MEAS_JOB WHILE
                          ZQ_CELL_LIST(ZQ_I) /=M_NULL_CELL_IDX;

          IF NOT Q_S0170_CELL_IN_LIST(ZQ_CELL_LIST(ZQ_I),
                                      Z_CELL_LIST)
          THEN
            DO WITH Z_CELL_LIST;
              /* ADD TO LIST */
              IF B_NBR_CELLS=M_PM_MAX_CELLS_FOR_A_MEAS_JOB
              THEN
                /* ERROR */
              ELSE
                B_NBR_CELLS:=B_NBR_CELLS+1;
                B_CELL_LIST(B_NBR_CELLS):=ZQ_CELL_LIST(ZQ_I);
              FI;
            OD; /* WITH CELL LIST */
          FI;
        OD; /* ZQ_I */
      FI; /* IF TYPE ACTIVE */
  ELSE;
  ESAC;
OD;

END Q_S0175_MAKE_COMMON_CELL_LIST;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0176_MAKE_T26_CELL_LIST                          */
/*                                                                    */
/*     PROGRAMMER: CHEN ZHANGYI                                       */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 02/07/24                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       MAKES A COMMON CELL LIST FOR TYPE 26 JOBS.                   */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58YX_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0180_MEAS_TYPE_RUNNING                     */
/*                      Q_S0010_WAIT_BEFORE_RETRYING                  */
/*     CALLED FROM:                                                   */
/*                      Q_S0600_START_OF_POLLING                      */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0176_MAKE_T26_CELL_LIST: PROC();

DCL ZQ_I             INT,
    ZQ_ACT_IDX       INT,
    ZQ_T             M_BYTE;

Z_T26_CELL_LIST.B_NBR_CELLS:=0;

DO FOR ZQ_I:=1 TO M_PM_MAX_CELLS_FOR_A_MEAS_JOB;
  Z_T26_CELL_LIST.B_CELL_LIST(ZQ_I):=M_NULL_CELL_IDX;
OD;

IF Q_S0180_MEAS_TYPE_RUNNING(E_MT_HANDOVER_PER_SERVINGCELL, 
                             ZQ_ACT_IDX)
THEN
  GET R_PM_SC_G2 WHERE (D_ACT_IDX=ZQ_ACT_IDX);
  DO FOR ZQ_T := 1 TO ZS_MAX_RETRY WHILE
    DB_PARMS.B_DB_STATUS = M_DB_TUPHELD;
    Q_S0010_WAIT_BEFORE_RETRYING(ZS_WAIT_TIME_DB);
    GET R_PM_SC_G2 WHERE (D_ACT_IDX=ZQ_ACT_IDX);
  OD;

  IF DB_PARMS.B_DB_STATUS = M_DB_SUCCESS
  THEN
    DO WITH Z_T26_CELL_LIST;
      DO FOR ZQ_I := 1 TO CM_FY32_MAX_CELLS_PER_BSC;
        IF R_PM_SC_G2.D_SCOP_G2(ZQ_I)
        THEN
          B_NBR_CELLS := B_NBR_CELLS +1;
          B_CELL_LIST(B_NBR_CELLS) := ZQ_I;
        FI;
      OD;
    OD;
  FI;
FI; /* IF TYPE ACTIVE */

END Q_S0176_MAKE_T26_CELL_LIST;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0180_TCU_IN_JOBS_SCOPE                           */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       CHECKS IF ALL CELL SELECTABLE MEASUREMENT TYPES ARE ACTIVE   */
/*       AND IF  ANY OF THESE JOBS IS APPLICABLE TO A TCU.            */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LCE_ID M_LCE_ID                            */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0132_GET_CIS_FOR_TCU                       */
/*                      Q_S0180_MEAS_TYPE_RUNNING                     */
/*                      Q_S0160_CELL_IN_SCOPE                         */
/*     CALLED FROM:                                                   */
/*                      Q_S0630_GET_NEXT_LDCP_TO_POLL                 */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0180_TCU_IN_JOBS_SCOPE: PROC(ZF_LCE_ID  M_LCE_ID)
                          RETURNS(BOOL);

DCL ZQ_I             INT,
    ZQ_ACT_IDX       INT,
    ZQ_MEAS_TYPE     M_MEAS_TYPE,
    ZQ_TCU_CELL_LIST ZM_CIS_PER_TCU;

/* ONLY TYPES 1 TO 5 APPLY */
ZQ_TCU_CELL_LIST  := Q_S0132_GET_CIS_FOR_TCU(ZF_LCE_ID);

DO FOR ZQ_MEAS_TYPE := E_MT_TRAFFIC TO E_MT_HANDOVER_PER_SERVINGCELL;
  CASE ZQ_MEAS_TYPE OF
    (E_MT_TRAFFIC:E_MT_HANDOVER,E_MT_HANDOVER_PER_SERVINGCELL):
      IF Q_S0180_MEAS_TYPE_RUNNING(ZQ_MEAS_TYPE, ZQ_ACT_IDX)
      THEN
        DO FOR ZQ_I:=1 TO CM_FY32_MAX_CELLS_PER_TCU WHILE
                             ZQ_TCU_CELL_LIST(ZQ_I)/=M_NULL_CELL_IDX;
          IF Q_S0160_CELL_IN_SCOPE(ZQ_ACT_IDX,
                                   ZQ_TCU_CELL_LIST(ZQ_I))
          THEN
            /* IT HAS TO BE POLLED */
            RETURN TRUE;
          FI;
        OD;
      FI;
    ELSE
  ESAC;
OD;
RETURN FALSE;

END Q_S0180_TCU_IN_JOBS_SCOPE;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0185_DTC_IN_JOBS_SCOPE                           */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       CHECKS IF ALL CELL SELECTABLE MEASUREMENT TYPES ARE ACTIVE   */
/*       AND IF  ANY OF THESE JOBS IS APPLICABLE TO A DTC.            */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LCE_ID M_LCE_ID                            */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0136_DTC_CE_FUNC                           */
/*                      Q_S0180_MEAS_TYPE_RUNNING                     */
/*     CALLED FROM:                                                   */
/*                      Q_S0630_GET_NEXT_LDCP_TO_POLL                 */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0185_DTC_IN_JOBS_SCOPE: PROC(ZF_LCE_ID  M_LCE_ID)
                          RETURNS(BOOL);

DCL ZQ_IN_SCOPE      BOOL,
    ZQ_ACT_IDX       INT;

ZQ_IN_SCOPE:=FALSE;
/* ONLY POLL SCCP DTC.*/
IF Q_S0136_DTC_CE_FUNC(ZF_LCE_ID, E_CE_FUNCT_SCCP_DTC)
THEN
  /* ONLY TYPE 1 APPLIES - N.B. TYPE 1 & 2 ARE CONTAINED IN
   * THE STANDARD EVEN THOUGHTHEY ARE DETAILED.
   */
  IF Q_S0180_MEAS_TYPE_RUNNING(E_MT_HANDOVER, ZQ_ACT_IDX)
    OR Q_S0180_MEAS_TYPE_RUNNING(E_MT_TRAFFIC, ZQ_ACT_IDX)
  THEN
    /* IT HAS TO BE POLLED */
    ZQ_IN_SCOPE:=TRUE;
  FI;
FI;
RETURN ZQ_IN_SCOPE;

END Q_S0185_DTC_IN_JOBS_SCOPE;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0190_MEAS_TYPE_CCSI                              */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/19                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       IS THIS A CCSI MEASUREMENT TYPE?                             */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_MEAS_TYPE M_MEAS_TYPE                      */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0220_GET_STATIC_MEM                        */
/*                      Q_S0230_REG_STATIC_MEM                        */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0190_MEAS_TYPE_CCSI: PROC(ZF_MEAS_TYPE M_MEAS_TYPE)
                          RETURNS(BOOL);
DCL ZQ_IN_CCSI BOOL;

ZQ_IN_CCSI:=FALSE;

CASE ZF_MEAS_TYPE OF
     (E_MT_RESOURCE_AVAILABILITY,                                /* 2 */
      E_MT_RESOURCE_USAGE_CCCH,                                  /* 3 */
      E_MT_RESOURCE_USAGE_SDCCH,                                 /* 4 */
      E_MT_HANDOVER,                                             /* 6 */
      /*CR36/236932*/
      /*E_MT_LAPD,*/                                             /* 7 */
      /*CR36/236932*/
      E_MT_X25,                                                  /* 8 */
      E_MT_NUMBER7,                                              /* 9 */
      E_MT_SMS,                                                 /* 19 */
      E_MT_SCCP,                                                /* 25 */
      E_MT_HANDOVER_PER_TARGETCELL,                             /* 27 */
      E_MT_HANDOVER_SDCCH,                                      /* 28 */
      E_MT_DIRECTED_RETRY,                                      /* 29 */
      E_MT_SMSCB,                                               /* 30 */
      E_MT_MULTIBAND_HANDOVERS,                                 /* 32 */
      E_MT_EME):                                                /* 33 */

  ZQ_IN_CCSI:=TRUE;

  ELSE
ESAC;

RETURN(ZQ_IN_CCSI);
END Q_S0190_MEAS_TYPE_CCSI;

/************************************/
/* Q_S02XX - DS RELATED FUNCTIONS */
/************************************/
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0210_INIT_MEM_PTRS                               */
/*                                                                    */
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */
/*                                                                    */
/*                LAST MODIFIED BY:                                   */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION: INITIALISES DS POINTERS TO NULL.       */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S1000_CCDC_FSM                              */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0210_INIT_MEM_PTRS: PROC();

PTR(Z_T1_PTR)     := NULL;
PTR(Z_T1_2_PTR)   := NULL;
PTR(Z_T2_PTR)     := NULL;
PTR(Z_T3_PTR)     := NULL;
PTR(Z_T4_PTR)     := NULL;
PTR(Z_T5_PTR)     := NULL;
PTR(Z_T5_2_PTR)   := NULL;
PTR(Z_T6_PTR)     := NULL;
PTR(Z_T7_PTR)     := NULL;
/*CR36/236932*/
PTR(Z_T72_PTR)     := NULL;
/*CR36/236932*/
PTR(Z_T8_PTR)     := NULL;
PTR(Z_T9_PTR)     := NULL;
PTR(Z_T18_PTR)    := NULL;
PTR(Z_T18_2_PTR)  := NULL;
PTR(Z_T19_PTR)    := NULL;
PTR(Z_T25_PTR)    := NULL;
PTR(Z_T26_PTR)    := NULL;
PTR(Z_T26_2_PTR)    := NULL;
PTR(Z_T27_PTR)    := NULL;
PTR(Z_T28_PTR)    := NULL;
PTR(Z_T29_PTR)    := NULL;
PTR(Z_T30_PTR)    := NULL;
PTR(Z_T32_PTR)    := NULL;

PTR(Z_T33_PTR)    := NULL;

PTR(Z_T34_PTR)    := NULL;
PTR(Z_T34_2_PTR)  := NULL;

/*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE*/
PTR(Z_T35_0_PTR)    := NULL;
PTR(Z_T35_4_PTR)    := NULL;
/* CR20/225233 */
PTR(Z_T35_3_PTR)    := NULL;
/* CR20/225233 */
PTR(Z_T35_5_PTR)    := NULL;
/* START : WIPRO B11 IP MR0 PKG1 */
/*START: CR20/284751 BTS FRQ SYNCH*/
PTR(Z_T35_6_PTR)    := NULL;
/*END: CR20/284751 BTS FRQ SYNCH */
PTR(Z_T35_7_PTR)    := NULL;
PTR(Z_T35_8_PTR)    := NULL;
/* END : WIPRO B11 IP MR0 PKG1 */
/*START: IURG FEATURE */
PTR(Z_T36_PTR)    := NULL;
/*END: IURG FEATURE*/
/*START: B12 VAMOS */
PTR(Z_T37_0_PTR)    := NULL;
/*CRI # 00823248.01*/
PTR(Z_T37_0_TEMP_PTR)    := NULL;

PTR(Z_T37_1_PTR)    := NULL;
PTR(Z_T37_VMC_001_PTR)    := NULL;
PTR(Z_TMP_MC1408_9_PTR)    := NULL;
/*END: B12 VAMOS */
/*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE*/

PTR(Z_T110_1_PTR) := NULL;
PTR(Z_T110_1_2_PTR) := NULL;

PTR(Z_T110_2_PTR) := NULL;
PTR(Z_T110_3_PTR) := NULL;
PTR(Z_T110_4_PTR) := NULL;
/*START: MC Counters*/
PTR(Z_T110_4_2_PTR) := NULL;
/*END: MC Counters*/
PTR(Z_T110_5_PTR) := NULL;
PTR(Z_T110_6_PTR) := NULL;

/*START Rework_CRI # 01037014.01 */
PTR(Z_T110_MC1531_PTR) := NULL;
/*END Rework_CRI # 01037014.01*/

PTR(Z_T180_1_PTR) := NULL;
PTR(Z_T180_2_PTR) := NULL;

/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
PTR(Z_T110_7_PTR) := NULL; 
/* END: ADD-WIPRO-B10-MR1-CHANGE */ 
/* CR20/209493 START */
PTR(Z_T110_7_2_PTR) := NULL;
/* CR20/209493 END */
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
PTR(Z_T110_8_PTR) := NULL;
/*ADDED FOR GSL COUNTERS MEMO*/
PTR(Z_T110_9_PTR) := NULL;
/*ADDED FOR GSL COUNTERS MEMO*/
/*ADDED FOR A-FLEX NRI COUNTERS */
PTR(Z_T110_10_PTR) := NULL;
/*START : AUPOIP FEATURE */
PTR(Z_T110_11_PTR) := NULL;
PTR(Z_T110_12_PTR) := NULL;
/* END : AUPOIP FEATURE */
/* BEGIN: CR20_313054 */
PTR(Z_T110_13_PTR) := NULL;
/* END: CR20_313054 */
/* BEGIN: CR 605005 */
PTR(Z_T110_14_PTR) := NULL;
/* END: CR 605005 */
/*BEGIN : CR :745699 */
PTR(Z_T110_15_1_PTR) := NULL;
PTR(Z_T110_15_2_PTR) := NULL;
/*END : CR:745699 */
/*ADDED FOR A-FLEX NRI COUNTERS */
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
/*begin improv for 00981139 DTC 513 overload*/
PTR(Z_DTC_OL_PTR) := NULL;
/*end improv for 00981139 DTC 513 overload*/
/*START CR MOCN */
PTR(Z_T110_17_PTR) := NULL;
/*END CR MOCN */
/*begin CR1238146 A-GPS*/
PTR(Z_T110_18_PTR) := NULL;
/*end CR1238146 A-GPS*/
END Q_S0210_INIT_MEM_PTRS;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0211_INIT_DTC_OL_SWITCH                          */
/*                                                                    */
/*     PROGRAMMER:                                                    */
/*                                                                    */
/*     LAST MODIFIED BY:                                              */
/*                                                                    */
/*     CREATION DATE: 13/07/03                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION: INIT DTC 513 Overload improv switch    */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                                                    */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0211_INIT_DTC_OL_SWITCH: PROC();

   Z_DTC_OL_IMROV_SWITCH.ZB_T110_DTC_DEP := TRUE;
   Z_DTC_OL_IMROV_SWITCH.ZB_T110_DTC_IND := TRUE;
   Z_DTC_OL_IMROV_SWITCH.ZB_T110_DTC_BSSAP := TRUE;
   Z_DTC_OL_IMROV_SWITCH.ZB_T110_M3UA_DTC := TRUE;

   Z_DTC_OL_IMROV_SWITCH.ZB_T25_DTC := TRUE;
   Z_DTC_OL_IMROV_SWITCH.ZB_T110_15_OLC_DTC := TRUE;
   Z_DTC_OL_IMROV_SWITCH.ZB_0300_T1_DTC := TRUE;
   Z_DTC_OL_IMROV_SWITCH.ZB_0300_T19_DTC := TRUE;
   Z_DTC_OL_IMROV_SWITCH.ZB_0300_T28_DTC := TRUE;
   Z_DTC_OL_IMROV_SWITCH.ZB_0300_T29_DTC := TRUE;
   Z_DTC_OL_IMROV_SWITCH.ZB_0300_T34_DTC := TRUE;
   Z_DTC_OL_IMROV_SWITCH.ZB_T6_DTC := TRUE;
   Z_DTC_OL_IMROV_SWITCH.ZB_DTC_TRX := TRUE;   
   

END Q_S0211_INIT_DTC_OL_SWITCH;


/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0220_GET_STATIC_MEM                              */
/*                                                                    */
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */
/*                                                                    */
/*                LAST MODIFIED BY:                                   */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION: GET DS MEMORY PER MEASUREMENT TYPE.    */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0190_MEAS_TYPE_CCSI                        */
/*                      Q_S0798_GET_START_MEM_PTR                     */
/*                      Q_S0780_GET_MAX_NUM_RECS                      */
/*                      Q_S0755_GET_RECORD_SIZE                       */
/*                      Q_S0799_ASSIGN_PTR                            */
/*                      Q_S0410_CLEAR_MEMORY                          */
/*                      Q_S0240_INSERT_DS_PTR                         */
/*     CALLED FROM:                                                   */
/*                      Q_S0900_PERFORM_SYSTEM_START_UP               */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0220_GET_STATIC_MEM: PROC(ZF_RESTART_FLAG BOOL);

DCL ZQ_MEAS_TYPE  M_MEAS_TYPE,
    ZQ_TEMP_PTR   PTR;


DO FOR ZQ_MEAS_TYPE := E_MT_RESOURCE_AVAILABILITY TO E_MT_EME;
  IF Q_S0190_MEAS_TYPE_CCSI(ZQ_MEAS_TYPE)
  /* CHECK FOR THE CCSI TYPE WITH HAVE ONLY ONE MEMORY BLOCK*/
  THEN
    /* GET THE POINTER TO THE MEMORY BLOCK THAT MUST BE OVERWRITTEN */
    ZQ_TEMP_PTR:=Q_S0798_GET_START_MEM_PTR(ZQ_MEAS_TYPE, 1);
    IF PTR(ZQ_TEMP_PTR)=NULL

    THEN
       /* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
/*BEAUSE OF RSMB 64K LIMITATION USE DATASEGMENT-
                             MX CAPACITY IMPROVEMNT */
        
     /* Q_S006_GET_RSMB(
            Q_S0780_GET_MAX_NUM_RECS(ZQ_MEAS_TYPE, 1) *
            Q_S0755_GET_RECORD_SIZE(ZQ_MEAS_TYPE, 1),
            ZQ_TEMP_PTR);*/ 
        /* END: ADD-WIPRO-B10-MR1-CHANGE */ 
      Q_S0799_ASSIGN_PTR(ZQ_MEAS_TYPE);
     /* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */

      /* ASSIGN THE PTR TO MEMORY TO THE GLOBAL */
      /*Q_S0799_ASSIGN_MEM_PTR(ZQ_MEAS_TYPE, ZQ_TEMP_PTR);*/

      Q_S0410_CLEAR_MEMORY(ZQ_MEAS_TYPE,
                           1);
      Q_S0240_INSERT_DS_PTR(ZQ_MEAS_TYPE);
    FI;
  FI; /* MEASUREMENT TYPES IS APPLICABLE */
OD;

IF PTR(Z_T1_PTR)=NULL
THEN
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */

/*  Q_S0060_GET_RSMB(SIZE(CM_FY32_HIS_TYPE_01_CELL_BUF),
                   PTR(Z_T1_PTR));
  Q_S0060_GET_RSMB(SIZE(CM_FY32_HIS_TYPE_01_TRX_BUF),
                   PTR(Z_T1_2_PTR));*/
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
  Z_T1_PTR := -> Z_CM_FY32_HIS_TYPE_01_CELL_BUF;
  Z_T1_2_PTR := -> Z_CM_FY32_HIS_TYPE_01_TRX_BUF;
/* END: ADD-WIPRO-B10-MR1-CHANGE */
  Q_S0410_CLEAR_MEMORY(E_MT_TRAFFIC,
                       CM_FY32_HF_NBR_TYPE_0011);
  Q_S0410_CLEAR_MEMORY(E_MT_TRAFFIC,
                       CM_FY32_HF_NBR_TYPE_0012);
  Q_S0240_INSERT_DS_PTR(E_MT_TRAFFIC);
FI;

IF PTR(Z_T5_PTR)=NULL
THEN
  /* TYPE 5 HAS TWO BUFFERS, SO ARE IDENTIFIED SEPARATELY. */
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
  Z_T5_PTR := -> Z_CM_FY32_HIS_TYPE_05A_BUF;
  Z_T5_2_PTR := -> Z_CM_FY32_HIS_TYPE_05B_BUF;
/* END: ADD-WIPRO-B10-MR1-CHANGE */
  Q_S0410_CLEAR_MEMORY(E_MT_RESOURCE_USAGE_RTCH,
                       CM_FY32_HF_NBR_TYPE_05);
  Q_S0240_INSERT_DS_PTR(E_MT_RESOURCE_USAGE_RTCH);
FI;

/*CR36/236932*/
IF PTR(Z_T7_PTR)=NULL
THEN
  /* TYPE 7 HAS TWO BUFFERS, SO ARE IDENTIFIED SEPARATELY. */
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
  Z_T7_PTR := -> Z_CM_FY32_HIS_TYPE_07_BUF;
  Z_T72_PTR := -> Z_CM_FY32_HIS_TYPE_072_BUF;
/* END: ADD-WIPRO-B10-MR1-CHANGE */
  Q_S0410_CLEAR_MEMORY(E_MT_LAPD,
                       CM_FY32_HF_NBR_TYPE_0071);
  Q_S0410_CLEAR_MEMORY(E_MT_LAPD,
                       CM_FY32_HF_NBR_TYPE_0072);                     
  Q_S0240_INSERT_DS_PTR(E_MT_LAPD);
FI;


/*CR36/236932*/

IF PTR(Z_T18_PTR)=NULL
THEN
  /* TYPE 18 HAS TWO BUFFERS, SO ARE IDENTIFIED SEPARATELY. */
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
 Z_T18_PTR := -> Z_CM_FY32_HIS_TYPE_18_BSC_BUF;
 Z_T18_2_PTR := -> Z_CM_FY32_HIS_TYPE_18_CIC_BUF;
/* END: ADD-WIPRO-B10-MR1-CHANGE */
  Q_S0410_CLEAR_MEMORY(E_MT_A_AND_ABIS_ITF_ANALYSIS,
                       CM_FY32_HF_NBR_TYPE_0181);
  Q_S0410_CLEAR_MEMORY(E_MT_A_AND_ABIS_ITF_ANALYSIS,
                       CM_FY32_HF_NBR_TYPE_0182);
  Q_S0240_INSERT_DS_PTR(E_MT_A_AND_ABIS_ITF_ANALYSIS);
FI;

IF PTR(Z_T26_PTR)=NULL
THEN
  /* TYPE 26 HAS TWO BUFFERS, SO ARE IDENTIFIED SEPARATELY. */
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
  Z_T26_PTR := -> Z_CM_FY32_HIS_TYPE_26A_BUF;
  Z_T26_2_PTR := -> Z_CM_FY32_HIS_TYPE_26B_BUF;
/* END: ADD-WIPRO-B10-MR1-CHANGE */
  Q_S0410_CLEAR_MEMORY(E_MT_HANDOVER_PER_SERVINGCELL,
                       CM_FY32_HF_NBR_TYPE_26);
  Q_S0240_INSERT_DS_PTR(E_MT_HANDOVER_PER_SERVINGCELL);
FI;

IF PTR(Z_T34_PTR)=NULL
THEN
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
  /* TYPE 26 HAS TWO BUFFERS, SO ARE IDENTIFIED SEPARATELY. */
 Z_T34_PTR := -> Z_CM_FY32_HIS_TYPE_34_1_BUF;
 Z_T34_2_PTR := -> Z_CM_FY32_HIS_TYPE_34_2_BUF;
/* END: ADD-WIPRO-B10-MR1-CHANGE */
  Q_S0410_CLEAR_MEMORY(E_MT_VGCS,
                       CM_FY32_HF_NBR_TYPE_0341);
  Q_S0410_CLEAR_MEMORY(E_MT_VGCS,
                       CM_FY32_HF_NBR_TYPE_0342);
  Q_S0240_INSERT_DS_PTR(E_MT_VGCS);
FI;
/* BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE */ 
IF PTR(Z_T35_0_PTR)=NULL                              
THEN
 Z_T35_0_PTR := -> Z_CM_FY32_HIS_TYPE_35_0_BUF;
 Z_T35_4_PTR := -> Z_CM_FY32_HIS_TYPE_35_4_BUF;
 /* CR20/225233 */
 Z_T35_3_PTR := -> Z_CM_FY32_HIS_TYPE_35_3_BUF;
 /* CR20/225233 */
 Z_T35_5_PTR := -> Z_CM_FY32_HIS_TYPE_35_5_BUF;
 /*START: CR20/284751 BTS FRQ SYNCH */
 Z_T35_6_PTR := -> Z_CM_FY32_HIS_TYPE_35_6_BUF;
/*END: CR20/284751 BTS FRQ SYNCH */
/* START : WIPRO B11 IP MR0 PKG1 */
 Z_T35_7_PTR := -> Z_CM_FY32_HIS_TYPE_35_7_BUF;
 Z_T35_8_PTR := -> Z_CM_FY32_HIS_TYPE_35_8_BUF;
 /* END : WIPRO B11 IP MR0 PKG1 */

  Q_S0410_CLEAR_MEMORY(E_MT_IP,
                       CM_FY32_HF_NBR_TYPE_350);
  Q_S0410_CLEAR_MEMORY(E_MT_IP,
                       CM_FY32_HF_NBR_TYPE_354);
  Q_S0410_CLEAR_MEMORY(E_MT_IP,
                       CM_FY32_HF_NBR_TYPE_355);
/*START: CR20/284751 BTS FRQ SYNCH */
  Q_S0410_CLEAR_MEMORY(E_MT_IP,
                       CM_FY32_HF_NBR_TYPE_356);
/*END: CR20/284751 BTS FRQ SYNCH */
/* START : WIPRO B11 IP MR0 PKG1 */
  Q_S0410_CLEAR_MEMORY(E_MT_IP,
                   CM_FY32_HF_NBR_TYPE_357);
  Q_S0410_CLEAR_MEMORY(E_MT_IP,
                       CM_FY32_HF_NBR_TYPE_358);
  /* END : WIPRO B11 IP MR0 PKG1 */
  /* CR20/225233 */
 Q_S0410_CLEAR_MEMORY(E_MT_IP,
                       CM_FY32_HF_NBR_TYPE_353);  
  /* CR20/225233 */
  Q_S0240_INSERT_DS_PTR(E_MT_IP);
FI;

/* END: ADD-WIPRO-B10-MX-MR2-CHANGE */                               
/*START: IURG FEATURE*/

IF PTR(Z_T36_PTR)=NULL                              
THEN
 Z_T36_PTR := -> Z_CM_FY32_HIS_TYPE_36_BUF;
  Q_S0410_CLEAR_MEMORY(E_MT_IURG,
                       CM_FY32_HF_NBR_TYPE_360);  
  /* CR20/225233 */
  Q_S0240_INSERT_DS_PTR(E_MT_IURG);
FI;
/*END: IURG FEATURE */

/*BEGIN : B12 VAMOS */

IF PTR(Z_T37_0_PTR)=NULL                              
  THEN
   Z_T37_0_PTR := -> Z_CM_FY32_HIS_TYPE_37_0_BUF;
   /*CRI # 00823248.01*/
   Z_T37_0_TEMP_PTR := -> Z_CM_FY32_TEMP_37_0_BUF;
   /*begin CR1098364 MC1408/MC1409 improv*/
   Z_T37_VMC_001_PTR := -> Z_TOTAL_VAMOS_CALL_NB_ZONE;
   Z_TMP_MC1408_9_PTR := -> Z_TMP_MC1408X_MC1409X_ZONE;
   Q_S0411_RESET_VMC001X();
   /*end CR1098364 MC1408/MC1409 improv*/
   Q_S0410_CLEAR_MEMORY(E_MT_VAMOS,
                       CM_FY32_HF_NBR_TYPE_370);
   Z_T37_1_PTR := -> Z_CM_FY32_HIS_TYPE_37_1_BUF;
   Q_S0410_CLEAR_MEMORY(E_MT_VAMOS,
                       CM_FY32_HF_NBR_TYPE_371);
   
   Q_S0240_INSERT_DS_PTR(E_MT_VAMOS);
   Q_S0800_RESET_MC1422X_MC1423X();    
/* DUE TO THE ABSENCE OF DTC COUNTERS IN 37_1 */
ELSIF PTR(Z_T37_1_PTR)=NULL
 THEN
   Z_T37_1_PTR := -> Z_CM_FY32_HIS_TYPE_37_1_BUF;
    Q_S0410_CLEAR_MEMORY(E_MT_VAMOS,
                         CM_FY32_HF_NBR_TYPE_371);  
  
    Q_S0240_INSERT_DS_PTR(E_MT_VAMOS);
FI;
/*END : B12 VAMOS */

/*begin improv for 00981139 DTC 513 overload*/
IF PTR(Z_DTC_OL_PTR)=NULL
THEN
   Z_DTC_OL_PTR := -> Z_DTC_OL_IMROV_SWITCH;
FI;
/*end improv for 00981139 DTC 513 overload*/

IF PTR(Z_T110_1_PTR)=NULL
THEN
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
  /* TYPE 110 HAS FIVE BUFFERS SO ARE IDENTIFIED SEPARATELY. */

  Z_T110_1_PTR := -> Z_CM_FY32_HIS_TYPE_110_1A_BUF;
  Z_T110_1_2_PTR := -> Z_CM_FY32_HIS_TYPE_110_1B_BUF;
  Z_T110_2_PTR := -> Z_CM_FY32_HIS_TYPE_110_2_BUF;
  Z_T110_3_PTR := -> Z_CM_FY32_HIS_TYPE_110_3_BUF;
  Z_T110_4_PTR := -> Z_CM_FY32_HIS_TYPE_110_4_BUF;
  /*START: MC Counters*/
  Z_T110_4_2_PTR := -> Z_CM_FY32_HIS_TYPE_110_4_2_BUF;
  /*END: MC Counters*/
  Z_T110_5_PTR := -> Z_CM_FY32_HIS_TYPE_110_5_BUF;
  Z_T110_6_PTR := -> Z_CM_FY32_HIS_TYPE_110_6_BUF;
/* CR20/209493 START */
/*Z_T110_7_PTR := -> Z_CM_FY32_HIS_TYPE_110_7_BUF; */
  Z_T110_7_PTR := -> Z_CM_FY32_HIS_TYPE_110_7_1A_BUF;
  Z_T110_7_2_PTR := -> Z_CM_FY32_HIS_TYPE_110_7_1B_BUF;
  /* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
  Z_T110_8_PTR := -> Z_CM_FY32_HIS_TYPE_110_8_BUF;
  /* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
  /*ADDED FOR GSL COUNTERS MEMO*/
   Z_T110_9_PTR := -> Z_CM_FY32_HIS_TYPE_110_9_BUF;
  /*ADDED FOR GSL COUNTERS MEMO*/
  /*ADDED FOR A-FLEX NRI COUNTERS */
   Z_T110_10_PTR := -> Z_CM_FY32_HIS_TYPE_110_10_BUF;
/*START : AUPOIP FEATURE */
   Z_T110_11_PTR := -> Z_CM_FY32_HIS_TYPE_110_11_BUF;
   Z_T110_12_PTR := -> Z_CM_FY32_HIS_TYPE_110_12_BUF;
/* END : AUPOIP FEATURE */
/* BEGIN: CR20_313054 */
   Z_T110_13_PTR := -> Z_CM_FY32_HIS_TYPE_110_13_BUF;
/* END: CR20_313054 */
/* BEGIN: CR 605005 */
   Z_T110_14_PTR := -> Z_CM_FY32_HIS_TYPE_110_14_BUF;
/* END: CR 605005 */
   /*BEGIN : CR:745699 */
Z_T110_15_1_PTR := -> Z_CM_FY32_HIS_TYPE_110_15_1_BUF;
Z_T110_15_2_PTR := -> Z_CM_FY32_HIS_TYPE_110_15_2_BUF;
/*END : CR:745699 */
Z_T110_MC1531_PTR := -> Z_VAR_TCH_CTRS_1531;
/*START CR MOCN */
Z_T110_17_PTR := -> Z_CM_FY32_HIS_TYPE_110_17_BUF;
/*END CR MOCN */
/*begin CR1238146 A-GPS*/
   Z_T110_18_PTR := -> Z_CM_FY32_HIS_TYPE_110_18_BUF;
/*end CR1238146 A-GPS*/
  /*ADDED FOR A-FLEX NRI COUNTERS */
/* CR20/209493 END */

  Q_S0410_CLEAR_MEMORY(E_MT_CELL_TRX_OVERVIEW_COUNTERS,
                       CM_FY32_HF_NBR_TYPE_1101);

  Q_S0410_CLEAR_MEMORY(E_MT_CELL_TRX_OVERVIEW_COUNTERS,
                       CM_FY32_HF_NBR_TYPE_1102);

  Q_S0410_CLEAR_MEMORY(E_MT_CELL_TRX_OVERVIEW_COUNTERS,
                       CM_FY32_HF_NBR_TYPE_1103);

  Q_S0410_CLEAR_MEMORY(E_MT_CELL_TRX_OVERVIEW_COUNTERS,
                       CM_FY32_HF_NBR_TYPE_1104);

  Q_S0410_CLEAR_MEMORY(E_MT_CELL_TRX_OVERVIEW_COUNTERS,
                       CM_FY32_HF_NBR_TYPE_1105);

  Q_S0410_CLEAR_MEMORY(E_MT_CELL_TRX_OVERVIEW_COUNTERS,
                       CM_FY32_HF_NBR_TYPE_1106);
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
  Q_S0410_CLEAR_MEMORY(E_MT_CELL_TRX_OVERVIEW_COUNTERS, 
                       CM_FY32_HF_NBR_TYPE_1107);
/* END : ADD-WIPRO-B10-MR1-CHANGE */
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
Q_S0410_CLEAR_MEMORY(E_MT_CELL_TRX_OVERVIEW_COUNTERS, 
                       CM_FY32_HF_NBR_TYPE_1108);
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
/*ADDED FOR GSL COUNTERS MEMO*/
Q_S0410_CLEAR_MEMORY(E_MT_CELL_TRX_OVERVIEW_COUNTERS, 
                       CM_FY32_HF_NBR_TYPE_1109);
/*ADDED FOR GSL COUNTERS MEMO*/
/*ADDED FOR A-FLEX NRI COUNTERS */
Q_S0410_CLEAR_MEMORY(E_MT_CELL_TRX_OVERVIEW_COUNTERS, 
                       CM_FY32_HF_NBR_TYPE_1110);
/*ADDED FOR A-FLEX NRI COUNTERS */
/*START : AUPOIP FEATURE */
Q_S0410_CLEAR_MEMORY(E_MT_CELL_TRX_OVERVIEW_COUNTERS, 
                       CM_FY32_HF_NBR_TYPE_1111);
Q_S0410_CLEAR_MEMORY(E_MT_CELL_TRX_OVERVIEW_COUNTERS, 
                       CM_FY32_HF_NBR_TYPE_1112);
/*START : AUPOIP FEATURE */
/*BEGIN : CR20/313054 */
Q_S0410_CLEAR_MEMORY(E_MT_CELL_TRX_OVERVIEW_COUNTERS, 
                       CM_FY32_HF_NBR_TYPE_1113);
/*END : CR20/313054 */
/* START: CR 605005 */
Q_S0410_CLEAR_MEMORY(E_MT_CELL_TRX_OVERVIEW_COUNTERS, 
                       CM_FY32_HF_NBR_TYPE_1114);
/* END: CR 605005 */

/*BEGIN : CR:745699 */
Q_S0410_CLEAR_MEMORY(E_MT_CELL_TRX_OVERVIEW_COUNTERS,
                       CM_FY32_HF_NBR_TYPE_1115);
/*END : CR:745699 */
/*START CR MOCN */
Q_S0410_CLEAR_MEMORY(E_MT_CELL_TRX_OVERVIEW_COUNTERS,
                       CM_FY32_HF_NBR_TYPE_1117);
/*END CR MOCN */
/*begin CR1238146 A-GPS*/
Q_S0410_CLEAR_MEMORY(E_MT_CELL_TRX_OVERVIEW_COUNTERS,
                       CM_FY32_HF_NBR_TYPE_1118);
/*end CR1238146 A-GPS*/


  Q_S0240_INSERT_DS_PTR(E_MT_CELL_TRX_OVERVIEW_COUNTERS);
FI;

IF PTR(Z_T180_1_PTR)=NULL
THEN
  /* TYPE 180 HAS THREE BUFFERS SO ARE IDENTIFIED SEPARATELY. */
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
  Z_T180_1_PTR := -> Z_ZM_TRAFF_FLOW_CELL_INFO;
  Z_T180_2_PTR := -> Z_ZM_TRAFF_FLOW_DATA;
/* END : ADD-WIPRO-B10-MR1-CHANGE */
  Q_S0410_CLEAR_MEMORY(E_MT_TRAFFIC_FLOW,
                       CM_FY32_HF_NBR_TYPE_180);
  Q_S0240_INSERT_DS_PTR(E_MT_TRAFFIC_FLOW);
FI;

END Q_S0220_GET_STATIC_MEM;
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE:  Q_S0799_ASSIGN_PTR                                 */
/*                                                                    */
/*     PROGRAMMER: L. DIERICK  (KDC)                                  */
/*                                                                    */
/*                LAST MODIFIED BY:                                   */
/*                                                                    */
/*     CREATION DATE: 99/07/26                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION: ASSIGN PTR TO THEIR CORRESPONDING MODE */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_MEAS_TYPE M_MEAS_TYPE                      */
/*                       ZF_HIS_NBR   INT                             */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0220_GET_STATIC_MEM                        */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0799_ASSIGN_PTR: PROC(ZF_MEAS_TYPE M_MEAS_TYPE);
                               


CASE ZF_MEAS_TYPE OF
  (E_MT_RESOURCE_AVAILABILITY):                             /* 2 */
   Z_T2_PTR := -> Z_CM_FY32_HIS_TYPE_02_BUF;
  (E_MT_RESOURCE_USAGE_CCCH):                               /* 3 */
   Z_T3_PTR := -> Z_CM_FY32_HIS_TYPE_03_BUF;
  (E_MT_RESOURCE_USAGE_SDCCH):                              /* 4 */
   Z_T4_PTR := -> Z_CM_FY32_HIS_TYPE_04_BUF;
  (E_MT_HANDOVER):                                          /* 6 */
   Z_T6_PTR:= -> Z_CM_FY32_HIS_TYPE_06_BUF;
  (E_MT_LAPD):                                              /* 7 */
   Z_T7_PTR := -> Z_CM_FY32_HIS_TYPE_07_BUF;
  (E_MT_X25):                                               /* 8 */
   Z_T8_PTR := ->  Z_CM_FY32_HIS_TYPE_08_BUF;
  (E_MT_NUMBER7):                                           /* 9 */
   Z_T9_PTR := ->  Z_CM_FY32_HIS_TYPE_09_BUF;
  (E_MT_SMS):                                               /* 19 */
   Z_T19_PTR := -> Z_CM_FY32_HIS_TYPE_19_BUF;
  (E_MT_SCCP):                                              /* 25 */
   Z_T25_PTR := -> Z_CM_FY32_HIS_TYPE_25_BUF;
  (E_MT_HANDOVER_PER_TARGETCELL):                           /* 27 */
   Z_T27_PTR := ->  Z_CM_FY32_HIS_TYPE_27_BUF;
  (E_MT_HANDOVER_SDCCH):                                    /* 28 */
   Z_T28_PTR := -> Z_CM_FY32_HIS_TYPE_28_BUF;
  (E_MT_DIRECTED_RETRY):                                    /* 29 */	
   Z_T29_PTR := -> Z_CM_FY32_HIS_TYPE_29_BUF;
  (E_MT_SMSCB):                                             /* 30 */
  Z_T30_PTR := -> Z_M_HIS_TYPE_30;
  (E_MT_MULTIBAND_HANDOVERS):                               /* 32 */ 
  Z_T32_PTR := -> Z_CM_FY32_HIS_TYPE_32_BUF; 
  (E_MT_EME):                                               /* 33 */
  Z_T33_PTR := -> Z_CM_FY32_HIS_TYPE_33_BUF; 

  ELSE
ESAC;
END  Q_S0799_ASSIGN_PTR;
/* END: ADD-WIPRO-B10-MR1-CHANGE */
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0240_INSERT_DS_PTR                               */
/*                                                                    */
/*     PROGRAMMER: L. DIERICK  (KDC)                                  */
/*                                                                    */
/*                LAST MODIFIED BY:                                   */
/*                                                                    */
/*     CREATION DATE: 99/07/26                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION: INSERTS PTR IN ARRAY FOR SSM PURPOSE.  */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_MEAS_TYPE M_MEAS_TYPE                      */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0220_GET_STATIC_MEM                        */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0240_INSERT_DS_PTR: PROC(ZF_MEAS_TYPE    M_MEAS_TYPE);

CASE ZF_MEAS_TYPE OF
  (E_MT_TRAFFIC)                 : Z_DS_PTR_ARR(1) := PTR(Z_T1_PTR);
                                   Z_DS_PTR_ARR(2) := PTR(Z_T1_2_PTR);
  (E_MT_RESOURCE_AVAILABILITY)   : Z_DS_PTR_ARR(3) := PTR(Z_T2_PTR);
  (E_MT_RESOURCE_USAGE_CCCH)     : Z_DS_PTR_ARR(4) := PTR(Z_T3_PTR);
  (E_MT_RESOURCE_USAGE_SDCCH)    : Z_DS_PTR_ARR(5) := PTR(Z_T4_PTR);
  (E_MT_RESOURCE_USAGE_RTCH)     : Z_DS_PTR_ARR(6) := PTR(Z_T5_PTR);
                                   Z_DS_PTR_ARR(7) := PTR(Z_T5_2_PTR);
  (E_MT_HANDOVER)                : Z_DS_PTR_ARR(8) := PTR(Z_T6_PTR);
  (E_MT_LAPD)                    : Z_DS_PTR_ARR(9) := PTR(Z_T7_PTR);
                                   /*CR36/236932*/
                                   Z_DS_PTR_ARR(10) := PTR(Z_T72_PTR);
                                   /*CR36/236932*/
  (E_MT_X25)                     : Z_DS_PTR_ARR(11) := PTR(Z_T8_PTR);
  (E_MT_NUMBER7)                 : Z_DS_PTR_ARR(12) := PTR(Z_T9_PTR);
  (E_MT_A_AND_ABIS_ITF_ANALYSIS) : Z_DS_PTR_ARR(13) := PTR(Z_T18_PTR);
                                   Z_DS_PTR_ARR(14) := PTR(Z_T18_2_PTR); 
  (E_MT_SMS)                     : Z_DS_PTR_ARR(15) := PTR(Z_T19_PTR);
  (E_MT_SCCP)                    : Z_DS_PTR_ARR(16) := PTR(Z_T25_PTR);
  (E_MT_HANDOVER_PER_SERVINGCELL): Z_DS_PTR_ARR(17) := PTR(Z_T26_PTR);
                                   Z_DS_PTR_ARR(18) := PTR(Z_T26_2_PTR);
  (E_MT_HANDOVER_PER_TARGETCELL) : Z_DS_PTR_ARR(19) := PTR(Z_T27_PTR);
  (E_MT_HANDOVER_SDCCH)          : Z_DS_PTR_ARR(20) := PTR(Z_T28_PTR);
  (E_MT_DIRECTED_RETRY)          : Z_DS_PTR_ARR(21) := PTR(Z_T29_PTR);
  (E_MT_SMSCB)                   : Z_DS_PTR_ARR(22) := PTR(Z_T30_PTR);
  (E_MT_MULTIBAND_HANDOVERS)     : Z_DS_PTR_ARR(23) := PTR(Z_T32_PTR);
  (E_MT_EME)                     : Z_DS_PTR_ARR(24) := PTR(Z_T33_PTR);
  (E_MT_VGCS)                    : Z_DS_PTR_ARR(25) := PTR(Z_T34_PTR);
                                   Z_DS_PTR_ARR(26) := PTR(Z_T34_2_PTR);
  /* BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE */
   (E_MT_IP)                     : Z_DS_PTR_ARR(27) := PTR(Z_T35_0_PTR);
                                   Z_DS_PTR_ARR(28) := PTR(Z_T35_3_PTR);
                                   /* CR20/225233 */
                                   Z_DS_PTR_ARR(29) := PTR(Z_T35_4_PTR);
                                   /* CR20/225233 */
                                   Z_DS_PTR_ARR(30) := PTR(Z_T35_5_PTR);
                          /*START: CR20/284751 BTS FRQ SYNCH */
                                   Z_DS_PTR_ARR(31) := PTR(Z_T35_6_PTR);
			  /*END: CR20/284751 BTS FRQ SYNCH */ 
                       
                          /* START : WIPRO B11 IP MR0 PKG1 */
                                   Z_DS_PTR_ARR(32) := PTR(Z_T35_7_PTR);
                                   Z_DS_PTR_ARR(33) := PTR(Z_T35_8_PTR);
                          /* END : WIPRO B11 IP MR0 PKG1 */
                           /*END : ADD-WIPRO-B10-MX-MR2-CHANGE */  
			 
                      /*START: IURG FEATURE*/
  (E_MT_IURG)                    : Z_DS_PTR_ARR(34) := PTR(Z_T36_PTR);
					/*BEGIN : B12 VAMOS */
  (E_MT_VAMOS)                   : Z_DS_PTR_ARR(35) := PTR(Z_T37_0_PTR);
					/*CRI # 00823248.01*/
			                       Z_DS_PTR_ARR(36) := PTR(Z_T37_0_TEMP_PTR);
		                         Z_DS_PTR_ARR(37) := PTR(Z_T37_1_PTR);
					/* END : B12 VAMOS */
					                   /*begin CR1098364 MC1408/MC1409 improv*/
					                   Z_DS_PTR_ARR(61) := PTR(Z_T37_VMC_001_PTR);
					                   Z_DS_PTR_ARR(62) := PTR(Z_TMP_MC1408_9_PTR);
					                   /*end CR1098364 MC1408/MC1409 improv*/
  (E_MT_CELL_TRX_OVERVIEW_COUNTERS) :
                             Z_DS_PTR_ARR(38) := PTR(Z_T110_1_PTR);
                             Z_DS_PTR_ARR(39) := PTR(Z_T110_1_2_PTR);
                             Z_DS_PTR_ARR(40) := PTR(Z_T110_2_PTR);
                             Z_DS_PTR_ARR(41) := PTR(Z_T110_3_PTR);
                             Z_DS_PTR_ARR(42) := PTR(Z_T110_4_PTR);
                             /*START: MC Counters*/
                             Z_DS_PTR_ARR(43) := PTR(Z_T110_4_2_PTR);
                             /*END: MC Counters*/
                             Z_DS_PTR_ARR(44) := PTR(Z_T110_5_PTR);
                             Z_DS_PTR_ARR(45) := PTR(Z_T110_6_PTR);
                             /* CR20/209493 START */ 
                             Z_DS_PTR_ARR(46) := PTR(Z_T110_7_PTR);
                             Z_DS_PTR_ARR(47) := PTR(Z_T110_7_2_PTR); 
                             /* CR20/209493 END */ 
                             /* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
                             Z_DS_PTR_ARR(48) := PTR(Z_T110_8_PTR);
                             /* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
                             /*ADDED FOR GSL COUNTERS MEMO*/
                             Z_DS_PTR_ARR(49) := PTR(Z_T110_9_PTR);
                             /*ADDED FOR GSL COUNTERS MEMO*/
                             /*ADDED FOR A-FLEX NRI COUNTERS */
                             Z_DS_PTR_ARR(50) := PTR(Z_T110_10_PTR);
			    /*START : AUPOIP FEATURE */
                             Z_DS_PTR_ARR(51) := PTR(Z_T110_11_PTR);
                             Z_DS_PTR_ARR(52) := PTR(Z_T110_12_PTR);
			    /* END : AUPOIP FEATURE */
			/* BEGIN: CR20/313054 */
			     Z_DS_PTR_ARR(53) := PTR(Z_T110_13_PTR);
			/* END: CR20/313054 */
                        /* BEGIN: CR 605005 */
			     Z_DS_PTR_ARR(54) := PTR(Z_T110_14_PTR);
			/* END: CR 605005 */
                        /* BEGIN : CR:745699 */
                             Z_DS_PTR_ARR(55) := PTR(Z_T110_15_1_PTR);
                             Z_DS_PTR_ARR(56) := PTR(Z_T110_15_2_PTR);
                        /* END : CR:745699 */
                            Z_DS_PTR_ARR(57) := PTR(Z_T110_MC1531_PTR);
                          /*begin improv for 00981139 DTC 513 overload*/
                           Z_DS_PTR_ARR(60) := PTR(Z_DTC_OL_PTR);
                          /*end improv for 00981139 DTC 513 overload*/
                          /*START CR MOCN */
                           Z_DS_PTR_ARR(63) := PTR(Z_T110_17_PTR);
                          /*END CR MOCN */
                          /*begin CR1238146 A-GPS*/
					                 Z_DS_PTR_ARR(64) := PTR(Z_T110_18_PTR);					                
					                /*end CR1238146 A-GPS*/
                          /*ADDED FOR A-FLEX NRI COUNTERS */ 
                        /* BEGIN CHANGE: CR 605005*/
			/* BEGIN CHANGE: CR20/313054 */
                             /* CR20/209493 START */
                           /* BEGIN CR:745699 */
  (E_MT_TRAFFIC_FLOW)      : Z_DS_PTR_ARR(58) := PTR(Z_T180_1_PTR);
                             Z_DS_PTR_ARR(59) := PTR(Z_T180_2_PTR);
                              /* CR20/209493 END */
			 /* END CHANGE: CR20/313054 */
                         /* END CHANGE : CR 605005 */  
                              /* END: CHANGE-WIPRO-B10-MR1-CHANGE */
			      /*END : IURG FEATURE */
                              /* CR20/209493 END */
  ELSE;
ESAC;

END Q_S0240_INSERT_DS_PTR;

/****************************************/
/* Q_S03XX - MESSAGE HANDLING FUNCTIONS */
/****************************************/
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0300_SEND_MSG_1070_TO_LDC                        */
/*                                                                    */
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/01                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_MEAS_TYPE M_MEAS_TYPE,                     */
/*                      ZF_STOP_START BOOL,                           */
/*                      ZF_CELL_IDX M_CELL_IDX,                       */
/*                      ZF_LDC_LCE_ID M_LCE_ID,                       */
/*                      ZF_LDC_TYPE M_FMM_SELECTOR                    */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0612_LDC_AVAILABLE                         */
/*                      Q_S0700_START_STOP_27                         */
/*     PRIMITIVES CALLED:                                             */
/*                      GET_MSG_BUF                                   */
/*                      MSG_SEND                                      */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0300_SEND_MSG_1070_TO_LDC: PROC(ZF_MEAS_TYPE      M_MEAS_TYPE,
                                   ZF_STOP_START     BOOL,
                                   ZF_CELL_IDX       M_CELL_IDX,
                                   ZF_LDC_LCE_ID     M_LCE_ID,
                                   ZF_LDC_TYPE       M_FMM_SELECTOR);
DCL ZQ_MSG_PTR PTR;

 ZQ_MSG_PTR := -> Z_ENV_MSG_CONTENT;
 DO WITH ZQ_MSG_PTR -> T_MSG_1070_MODE;
   B_MEAS_TYPE           := ZF_MEAS_TYPE;
   B_START_STOP          := ZF_STOP_START;
   B_SERVING_TARGET_CELL := ZF_CELL_IDX;
 OD;

 GET_MSG_BUF(Z_MSG_BUF_PTR);

 DO WITH Z_MSG_BUF_PTR -> ZM_MSG_0507_ENVELOPE_MSG;
   DO WITH B_HEADER;
     B_MB_OWNER.B_FMM_ID  := M_FI_CC_DATA_COLLECTOR;
     B_MB_MINI_HEAD  := T_DEF_0507_ENVELOPE_MSG;
     DO WITH B_MB_DESTINATION;
       B_LCE_ID      := ZF_LDC_LCE_ID;
       B_MSG_IDENTITY:= T_MRTNO_0507;
     OD;
   OD;

   DO WITH B_ELMT_STRUCT;
     B_DUMMY := Z_ENV_MSG_CONTENT;
   OD;
   DO WITH B_MSG_BUF_TAIL;
     B_ORIG_MSG_NUMBER  := 1070;
     B_ORIG_PRIORITY    := 4;
     B_ORIG_MSG_TYPE    := E_BASIC_TO;
     B_ORIG_DUSE.B_FMM_SEL := ZF_LDC_TYPE;
     B_ORIG_FLAGS       := M_NO_BUFFER;
   OD;
 OD;

 MSG_SEND(Z_MSG_BUF_PTR);

END Q_S0300_SEND_MSG_1070_TO_LDC;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0302_SEND_PM_POLLING                             */
/*                                                                    */
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/30                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                 THIS PROCEDURE IS ENTERED WHEN IT IS REQUIRED      */
/*                 TO POLL THE NEXT LDC (THE IDENTITY OF WHICH IS     */
/*                 RETRIEVED FROM R_CE_DYST).                         */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LCE_ID M_LCE_ID,                           */
/*                      ZF_FMM_SEL M_FMM_SELECTOR,                    */
/*                      ZF_MSG_ID INT,                                */
/*                      ZF_REF_NBR INT,                               */
/*                      ZF_SEQ_NBR M_BYTE                             */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0602_POLL_LDC                              */
/*     PRIMITIVES CALLED:                                             */
/*                      GET_MSG_BUF                                   */
/*                      MSG_SEND                                      */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0302_SEND_PM_POLLING: PROC(ZF_LCE_ID     M_LCE_ID,
                              ZF_FMM_SEL    M_FMM_SELECTOR,
                              ZF_MSG_ID     INT,
                              ZF_REF_NBR    INT,
                              ZF_SEQ_NBR    M_BYTE,
                              ZF_NB_RETRIES INT);
DCL ZQ_MSG_PTR PTR;

 ZQ_MSG_PTR  := -> Z_ENV_MSG_CONTENT;
 IF ZF_MSG_ID = 193
 THEN
   DO WITH ZQ_MSG_PTR -> T_MSG_0193_MODE;
     B_COLL_PROC_ID := Z_OWN_PID;
     B_NEW_TIME    := FALSE;
     B_REF_NBR     := ZF_REF_NBR;
     B_SEQ_NBR     := ZF_SEQ_NBR;
     B_POLL_FILTER := M_POLL_FILTER(ZF_NB_RETRIES);
   OD;
 ELSIF ZF_MSG_ID = 1385
 THEN
   DO WITH ZQ_MSG_PTR -> T_MSG_1385_MODE;
     B_COLL_PROC_ID           := Z_OWN_PID;
     B_REF_NBR                := ZF_REF_NBR;
     B_SEQ_NBR                := ZF_SEQ_NBR;
     B_POLL_INFO.B_NB_RETRIES := ZF_NB_RETRIES;
   OD;
 ELSIF ZF_MSG_ID = 1186
 THEN
   DO WITH ZQ_MSG_PTR -> T_MSG_1186_MODE;
     B_COLL_PROC_ID           := Z_OWN_PID;
     B_REF_NBR                := ZF_REF_NBR;
     B_SEQ_NBR                := ZF_SEQ_NBR;
     B_POLL_INFO.B_NB_RETRIES := ZF_NB_RETRIES;
   OD;
 ELSE
   DO WITH ZQ_MSG_PTR -> T_MSG_1440_MODE;
     B_COLL_PROC_ID           := Z_OWN_PID;
     B_REF_NBR                := ZF_REF_NBR;
     B_SEQ_NBR                := ZF_SEQ_NBR;
     B_POLL_INFO.B_NB_RETRIES := ZF_NB_RETRIES;
   OD;
 FI;

 GET_MSG_BUF(Z_MSG_BUF_PTR);

 DO WITH Z_MSG_BUF_PTR -> ZM_MSG_0507_ENVELOPE_MSG;
   DO WITH B_HEADER;
     B_MB_OWNER.B_FMM_ID   := M_FI_CC_DATA_COLLECTOR;
     B_MB_MINI_HEAD        := T_DEF_0507_ENVELOPE_MSG;
     DO WITH B_MB_DESTINATION;
       B_LCE_ID            := ZF_LCE_ID;
       B_MSG_IDENTITY      := T_MRTNO_0507;
     OD;
   OD;

   DO WITH B_ELMT_STRUCT;
     B_DUMMY := Z_ENV_MSG_CONTENT;
   OD;

   DO WITH B_MSG_BUF_TAIL;
     B_ORIG_MSG_NUMBER     := ZF_MSG_ID;
     B_ORIG_PRIORITY       := 4;
     B_ORIG_MSG_TYPE       := E_BASIC_TO;
     B_ORIG_DUSE.B_FMM_SEL := ZF_FMM_SEL;
     B_ORIG_FLAGS          := M_NO_BUFFER;
   OD;
 OD;

 MSG_SEND(Z_MSG_BUF_PTR);

END Q_S0302_SEND_PM_POLLING;

/******************************************************************/

/* BEGIN: CR 605005 */

Q_S0303_SEND_CPI_PM_POLLING: PROC(ZF_LCE_ID     M_LCE_ID,
                                  ZF_FMM_SEL    M_FMM_SELECTOR);

    DCL ZQ_MSG_PTR PTR;
    DCL ZQ_RET_VAL INT;
    DCL ZQ_BUFFER_LEN INT;
    DCL ZQ_MEM_PARMS M_MEM_PARMS;
    DCL ZQ_INVOKE_ID M_MXPF_INVOKEID;
    DCL ZQ_I INT;
    DCL ZQ_CMD_PTR PTR;
    DCL ZQ_BUF_LEN INT;
    DCL ZQ_BUF_PTR PTR;
    DCL ZQ_OWN_PROCESS_ID M_PROCESS_ID;

  GET_MEM(ZQ_MEM_PARMS, SIZE(M_MXPF_CPI_MPPMSPMCPUOVLDRDATA));
  ZQ_CMD_PTR := ZQ_MEM_PARMS.B_MEM_PTR;
    
  GET_INVOKE_ID(M_INVOKE_ID(ZQ_INVOKE_ID));

  DO WITH ZQ_CMD_PTR->M_MXPF_CPI_MPPMSPMCPUOVLDRDATA;
    B_MXPF_FMMID := M_MXPF_FMMID(M_FS_CC_DATA_COLLECTOR);
    DO WITH B_MXPF_CPIMSGPAYLOADHEADER;
      B_MXPF_SRVORNTFCODE := M_MXPF_MPPMSPMCPUOVLD_SRVCODE;
      B_MXPF_INVOKEID     := ZQ_INVOKE_ID;
      B_MXPF_NEXTEND      := 1;
      B_MXPF_RECORDNUMBER := 1;
    OD; /*End of B_MXPF_CPIMSGPAYLOADHEADER */ 
  
    DO WITH B_MXPF_MPPMSPMCPUOVLDRDATA ;
      B_MXPF_TIMESTAMP.B_MXPF_TIMESTRLEN  := 0;
      B_MXPF_TIMESTAMP.B_MXPF_TIMECONTENT  := 
                               (:(1:16):'0':);
      B_MXPF_BDTYPE := 0;
      B_MXPF_BDGEOADDR.B_MXPF_RACK  := 0;
      B_MXPF_BDGEOADDR.B_MXPF_SHELF  := 0;
      B_MXPF_BDGEOADDR.B_MXPF_SLOT  := 0;
      B_MXPF_OVLINDICAVG := 0; 
      B_MXPF_OVLINDICMAX := 0;		  
    OD;/* End of B_MXPF_MPPMSPMCPUOVLDRDATA   */
  OD;/* End of DO WITH ZQ_CMD_PTR->M_MXPF_CPI_MPPMSPMCPUOVLDRDATA */

  ZQ_BUFFER_LEN := SIZE(M_MXPF_CPI_MPPMSPMCPUOVLDRDATA);

 Z_AUDIT_STAT := ZE_PM_CPI_AUDIT_REQ; 

    GET_MSG_BUF(ZQ_MSG_PTR);
/*START 754169*/

 DO WITH ZQ_MSG_PTR->T_MSG_0001_CPI_SRV_REQ;
      T_B_HEADER.B_MB_MINI_HEAD := T_DEF_0001_CPI_SRV_REQ;
      T_B_HEADER.B_MB_DESTINATION.B_LCE_ID := M_VCE_ID_CPI;
      T_B_HEADER.B_MB_DESTINATION.B_FMM_SELECTOR := INT(M_FS_CPI);
      T_B_HEADER.B_MB_SOURCE := Z_OWN_PID;
      T_B_BUFFER_PTR := ZQ_CMD_PTR;
      T_B_BUFFER_LEN := ZQ_BUFFER_LEN;
 OD;


 CMW_SEND_MSG_VOS(0,H'0FFFF,ZQ_MSG_PTR,ZQ_RET_VAL);
 /* DO WITH ZQ_OWN_PROCESS_ID;
    B_PID_PROCESS_ID.B_PID_LCE := Z_OWN_PID.B_PID_PROCESS_ID.B_PID_LCE;
    B_PID_PID := M_PROC_CODE(M_FS_CC_DATA_COLLECTOR);
  OD;  

  Z_AUDIT_STAT := ZE_PM_CPI_AUDIT_REQ; 

  GET_MSG_BUF(ZQ_MSG_PTR);	

  DO WITH ZQ_MSG_PTR->T_MSG_0001_CPI_SRV_REQ;
    T_B_HEADER.B_MB_MINI_HEAD := T_DEF_0001_CPI_SRV_REQ;
    T_B_HEADER.B_MB_DESTINATION.B_LCE_ID := ZF_LCE_ID;
    T_B_HEADER.B_MB_DESTINATION.B_FMM_SELECTOR := INT(ZF_FMM_SEL);
    T_B_HEADER.B_MB_SOURCE := ZQ_OWN_PROCESS_ID;
    T_B_BUFFER_PTR := ZQ_CMD_PTR;
    T_B_BUFFER_LEN := ZQ_BUFFER_LEN;
  OD;

  CMW_SEND_MSG_VOS(0,H'0FFFF,ZQ_MSG_PTR,ZQ_RET_VAL);*/

/*END 754169*/


  RET_MSG_BUF(ZQ_MSG_PTR);
/* BEGIN FR:879393.01 */
Q_S0040_RET_MEM(ZQ_CMD_PTR);
/* END FR:879393.01 */
END Q_S0303_SEND_CPI_PM_POLLING;

/* END: CR 605005 */ 

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0304_WAIT_0126_WRITE_REC_CNF                     */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       WAIT FOR THE 0126_WAIT_WRITE_CNF MESSAGE.                    */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      0126_WRITE_REC_CNF                            */
/*                      0128_FILE_CLOSED                              */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0020_CCDC_ERROR                            */
/*     CALLED FROM:                                                   */
/*                      Q_S0822_WRITE_HIST_FILE                       */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0304_WAIT_0126_WRITE_REC_CNF: PROC()
                                 RETURNS(BOOL);

DCL ZQ_SUCC          BOOL,
    ZQ_COMPL_CODE    M_CPL_CODE;
/*WIPRO BEGIN:FR20/201332*/
DCL ZQ_FCB_PTR       M_FCB_PTR,
    ZQ_PROCESS_ID    M_PROCESS_ID,
    ZQ_FLAG          BOOL;
/*WIPRO BEGIN:FR20/201332*/    

 ZQ_SUCC := TRUE;
 ZQ_FLAG := FALSE;

/*WIPRO BEGIN:FR20/201332 GLOBAL STOP*/
L_WAIT_APP_MSG:DO WHILE ZQ_FLAG = FALSE;
/*WIPRO END:FR20/201332 GLOBAL STOP*/


L_WRITE_REC_CNF:  WAIT_CASE;

/*WIPRO BEGIN:FR20/201332 GLOBAL STOP*/
  /*0126_WRITE_REC_CNF(*,
                     *,
                     ZQ_COMPL_CODE):*/
  0126_WRITE_REC_CNF(ZQ_FCB_PTR,
                     ZQ_PROCESS_ID,
                     ZQ_COMPL_CODE
                     ):
   IF (Z_DISK_PROC_ID.B_PID_PROCESS_ID.B_PID_LCE=
     ZQ_PROCESS_ID.B_PID_PROCESS_ID.B_PID_LCE )
   THEN
     ZQ_SUCC:=(ZQ_COMPL_CODE = E_NULL_CODE);
     ZQ_FLAG := TRUE; 
   FI;
  END_WAIT_CASE_CLAUSE;
  
/*WIPRO END:FR20/201332 GLOBAL STOP*/
  /* THIS IS AN UNSUPERVISED WAIT CASE - THE ASSUMPTION BEING THAT
   * THE DISK HANDLER MUST RESPOND SINCE IT IS ON THE SAME
   * PROCESSOR.
   */
  0128_FILE_CLOSED(*,*,*):

    Z_FILE_OPEN   := FALSE;
    ZQ_SUCC       := FALSE;
   /*** added for compilation */
   /*WIPRO BEGIN: FR241193 GLOBAL STOP RT TRACE*/
/* BEGIN:CR36/288765 - TRACE IMPROVEMENT */
   TRACEINFO := 'GLOBAL STOP DISK FULL  (%d %d)  ';
   TRC_BSC_PM3(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCDC),
              TRACEID(NORM),
              TRACEINFO,
              LONG_INT((ZQ_SUCC)),
              LONG_INT((ZQ_COMPL_CODE)),
              LONG_INT((0)));
/* END:CR36/288765 - TRACE IMPROVEMENT */
   /*WIPRO END: FR241193 GLOBAL STOP RT TRACE */

/*WIPRO BEGIN:FR20/201332 GLOBAL STOP*/
    ZQ_FLAG       := TRUE; 
/*WIPRO END:FR20/201332 GLOBAL STOP*/
  END_WAIT_CASE_CLAUSE;
ESAC_TIAW L_WRITE_REC_CNF;

/*WIPRO BEGIN:FR20/201332 GLOBAL STOP*/
OD L_WAIT_APP_MSG;
/*WIPRO END:FR20/201332 GLOBAL STOP*/

IF NOT ZQ_SUCC
THEN
  Q_S0020_CCDC_ERROR(M_ERC6_USER_REC,
                     M_ERT0040_CLOSE_FILE_FLT,
                     07, NUM(ZQ_COMPL_CODE));
FI;

RETURN(ZQ_SUCC);

END Q_S0304_WAIT_0126_WRITE_REC_CNF;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0308_WAIT_0124_READ_REC_CNF                      */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       WAIT FOR THE 0124_WAIT_READ_CNF MESSAGE.                     */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      0124_READ_REC_CNF                             */
/*                      0128_FILE_CLOSED                              */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0020_CCDC_ERROR                            */
/*     CALLED FROM:                                                   */
/*                      Q_S0820_READ_HIST_FILE                        */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0308_WAIT_0124_READ_REC_CNF: PROC()
                                RETURNS(BOOL);

DCL ZQ_SUCC       BOOL,
    ZQ_COMPL_CODE M_CPL_CODE;

 ZQ_SUCC := TRUE;

L_WAIT_READ_CNF:  WAIT_CASE;

  /* THIS IS AN UNSUPERVISED WAIT CASE - THE ASSUMPTION BEING THAT
   * THE DISK HANDLER MUST RESPOND SINCE IT IS ON THE SAME
   * PROCESSOR.
   */
   0124_READ_REC_CNF(*,
   /*=============*/ *,
                     ZQ_COMPL_CODE):

     ZQ_SUCC:=(ZQ_COMPL_CODE = E_NULL_CODE);
   END_WAIT_CASE_CLAUSE;


   0128_FILE_CLOSED(*,*,*):
     ZQ_SUCC  := FALSE;
   END_WAIT_CASE_CLAUSE;

 ESAC_TIAW L_WAIT_READ_CNF;

IF NOT ZQ_SUCC
THEN
  Q_S0020_CCDC_ERROR(M_ERC6_USER_REC,
                     M_ERT0039_READ_REC_FLT,
                     08, NUM(ZQ_COMPL_CODE));
FI;

 RETURN(ZQ_SUCC);

END Q_S0308_WAIT_0124_READ_REC_CNF;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0310_SEND_1141_PM_POLLING                        */
/*                                                                    */
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                 THIS PROCEDURE IS ENTERED WHEN IT IS REQUIRED      */
/*                 TO POLL THE NEXT LDC (THE IDENTITY OF WHICH IS     */
/*                 RETRIEVED FROM R_CE_DYST).                         */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LCE_ID M_LCE_ID,                           */
/*                      ZF_FMM_SEL M_FMM_SELECTOR,                    */
/*                      ZF_REF_NBR INT,                               */
/*                      ZF_SEQ_NBR M_BYTE,                            */
/*                      ZF_UBUF_PTR PTR,                              */
/*                      ZF_NB_RETRIES INT                             */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0602_POLL_LDC                              */
/*     PRIMITIVES CALLED:                                             */
/*                      GET_MSG_BUF                                   */
/*                      MSG_SEND                                      */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0310_SEND_1141_PM_POLLING: PROC(ZF_LCE_ID     M_LCE_ID,
                                   ZF_FMM_SEL    M_FMM_SELECTOR,
                                   ZF_REF_NBR    INT,
                                   ZF_SEQ_NBR    M_BYTE,
                                   ZF_UBUF_PTR   PTR,
                                   ZF_NB_RETRIES INT);
DCL ZQ_MSG_PTR PTR;

 GET_MSG_BUF(ZQ_MSG_PTR);

 DO WITH ZQ_MSG_PTR->T_MSG_1141_PM_POLL_DETAILED_REQ;
   DO WITH T_B_ELMT_STRUCT;
     B_COLL_PROC_ID           := Z_OWN_PID;
     B_REF_NBR                := ZF_REF_NBR;
     B_SEQ_NBR                := ZF_SEQ_NBR;
     B_POLL_INFO.B_NB_RETRIES := ZF_NB_RETRIES;
   OD;

   T_B_BUFFER_PTR                     := ZF_UBUF_PTR;
   T_B_BUFFER_LEN                     := SIZE(ZM_UBUF_VA_SCOPE_MSG);
 OD;

 DO WITH ZQ_MSG_PTR -> ZM_MSG_0508_ENVELOPE_MSGB;
   DO WITH B_HEADER;
     B_MB_OWNER.B_FMM_ID   := M_FI_CC_DATA_COLLECTOR;
     B_MB_MINI_HEAD        := T_DEF_0508_ENVELOPE_MSGB;
     DO WITH B_MB_DESTINATION;
       B_LCE_ID            := ZF_LCE_ID;
       B_MSG_IDENTITY      := T_MRTNO_0508;
     OD;
   OD;

   DO WITH B_MSG_BUF_TAIL;
     B_ORIG_MSG_NUMBER     := 1141;
     B_ORIG_PRIORITY       := 4;
     B_ORIG_MSG_TYPE       := E_BASIC_TO;
     B_ORIG_DUSE.B_FMM_SEL := ZF_FMM_SEL;
     B_ORIG_FLAGS          := M_WITH_BUFFER;
   OD;
 OD;

 MSG_SEND(ZQ_MSG_PTR);

END Q_S0310_SEND_1141_PM_POLLING;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0320_SEND_1407_PM_POLLING                        */
/*                                                                    */
/*     PROGRAMMER: CHEN ZHANGYI                                       */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 02/07/24                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                 THIS PROCEDURE IS ENTERED WHEN IT IS REQUIRED      */
/*                 TO POLL THE NEXT LDC (THE IDENTITY OF WHICH IS     */
/*                 RETRIEVED FROM R_CE_DYST).                         */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LCE_ID M_LCE_ID,                           */
/*                      ZF_FMM_SEL M_FMM_SELECTOR,                    */
/*                      ZF_REF_NBR INT,                               */
/*                      ZF_SEQ_NBR M_BYTE,                            */
/*                      ZF_UBUF_PTR PTR                               */
/*                      ZF_NB_RETRIES INT                             */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58YX_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0602_POLL_LDC                              */
/*     PRIMITIVES CALLED:                                             */
/*                      GET_MSG_BUF                                   */
/*                      MSG_SEND                                      */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0320_SEND_1407_PM_POLLING: PROC(ZF_LCE_ID     M_LCE_ID,
                                   ZF_FMM_SEL    M_FMM_SELECTOR,
                                   ZF_REF_NBR    INT,
                                   ZF_SEQ_NBR    M_BYTE,
                                   ZF_UBUF_PTR   PTR,
                                   ZF_NB_RETRIES INT);
DCL ZQ_MSG_PTR PTR;

 GET_MSG_BUF(ZQ_MSG_PTR);

 DO WITH ZQ_MSG_PTR->T_MSG_1407_PM_T26_POLLING_REQ;
   DO WITH T_B_ELMT_STRUCT;
     B_COLL_PROC_ID           := Z_OWN_PID;
     B_REF_NBR                := ZF_REF_NBR;
     B_SEQ_NBR                := ZF_SEQ_NBR;
     B_POLL_INFO.B_NB_RETRIES := ZF_NB_RETRIES;
   OD;

   T_B_BUFFER_PTR                     := ZF_UBUF_PTR;
   T_B_BUFFER_LEN                     := SIZE(ZM_UBUF_VA_SCOPE_MSG);
 OD;

 DO WITH ZQ_MSG_PTR -> ZM_MSG_0508_ENVELOPE_MSGB;
   DO WITH B_HEADER;
     B_MB_OWNER.B_FMM_ID   := M_FI_CC_DATA_COLLECTOR;
     B_MB_MINI_HEAD        := T_DEF_0508_ENVELOPE_MSGB;
     DO WITH B_MB_DESTINATION;
       B_LCE_ID            := ZF_LCE_ID;
       B_MSG_IDENTITY      := T_MRTNO_0508;
     OD;
   OD;

   DO WITH B_MSG_BUF_TAIL;
     B_ORIG_MSG_NUMBER     := 1407;
     B_ORIG_PRIORITY       := 4;
     B_ORIG_MSG_TYPE       := E_BASIC_TO;
     B_ORIG_DUSE.B_FMM_SEL := ZF_FMM_SEL;
     B_ORIG_FLAGS          := M_WITH_BUFFER;
   OD;
 OD;

 MSG_SEND(ZQ_MSG_PTR);

END Q_S0320_SEND_1407_PM_POLLING;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0330_SEND_TP_PM_POLLING                          */
/*                                                                    */
/*     PROGRAMMER: CHEN ZHANGYI                                       */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 04/10/29                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                 THIS PROCEDURE IS ENTERED WHEN IT IS REQUIRED      */
/*                 TO POLL TP BOARD                                   */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LCE_ID M_LCE_ID,                           */
/*                      ZF_REF_NBR INT,                               */
/*                      ZF_NB_RETRIES INT                             */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58XV_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0602_POLL_LDC                              */
/*     PRIMITIVES CALLED:                                             */
/*                      GET_MSG_BUF                                   */
/*                      MSG_SEND                                      */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0330_SEND_TP_PM_POLLING: PROC(ZF_LCE_ID     M_LCE_ID,
                                 ZF_REF_NBR    INT,
                              /* START : WIPRO B11 IP MR0 PKG1 */
                                 ZF_SEQ_NBR    INT,
                              /* END : WIPRO B11 IP MR0 PKG1 */
                                 ZF_NB_RETRIES INT);

DCL ZQ_MSG_PTR PTR;
DCL ZQ_CMW_SEND_RES INT;

 GET_MSG_BUF(ZQ_MSG_PTR);

 DO WITH ZQ_MSG_PTR->T_MSG_1543_TP_PM_REPORT_REQ;
   DO WITH T_B_HEADER;
     B_MB_OWNER.B_FMM_ID := M_FI_CC_DATA_COLLECTOR;
     B_MB_MINI_HEAD      := T_DEF_1543_TP_PM_REPORT_REQ;
     DO WITH B_MB_DESTINATION;
       B_LCE_ID := ZF_LCE_ID;
       B_FMM_SELECTOR := 0; 
     OD;
     /*ADD BY ZHUJ FOR WITTS 5724*/ 
     DO WITH B_MB_SOURCE;
       B_PID_PROCESS_ID.B_PID_LCE := 
         Z_OWN_PID.B_PID_PROCESS_ID.B_PID_LCE;
       B_PID_PID:= M_PROC_CODE(M_FS_CC_DATA_COLLECTOR);
     OD;
     /*END BY ZHUJ*/
   OD;
   DO WITH T_B_ELMT_STRUCT;
     B_REF_NBR                := ZF_REF_NBR;
/* START : WIPRO B11 IP MR0 PKG1 */
     B_SEQ_NBR                := ZF_SEQ_NBR;
/* END : WIPRO B11 IP MR0 PKG1 */
     B_POLL_INFO.B_NB_RETRIES := ZF_NB_RETRIES;
   OD;
 OD;

 CMW_SEND_MSG_VOS(1, ZS_FFFF, ZQ_MSG_PTR, ZQ_CMW_SEND_RES);
 
 /*ADD BY ZHUJ FOR WITTS 5771*/
 RET_MSG_BUF(ZQ_MSG_PTR);

END Q_S0330_SEND_TP_PM_POLLING;
/*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE */

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S2330_SEND_N7_PM_POLLING                          */
/*                                                                    */
/*     PROGRAMMER: CHEN ZHANGYI                                       */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 04/10/29                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                 THIS PROCEDURE IS ENTERED WHEN IT IS REQUIRED      */
/*                 TO POLL TP BOARD                                   */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LCE_ID M_LCE_ID,                           */
/*                      ZF_REF_NBR INT,                               */
/*                      ZF_NB_RETRIES INT                             */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58XV_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0602_POLL_LDC                              */
/*     PRIMITIVES CALLED:                                             */
/*                      GET_MSG_BUF                                   */
/*                      MSG_SEND                                      */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S2330_SEND_N7_PM_POLLING: PROC(ZF_LCE_ID     M_LCE_ID,
                                 ZF_REF_NBR    INT,
                                 ZF_NB_RETRIES INT);

DCL ZQ_MSG_PTR PTR;
DCL ZQ_CMW_SEND_RES INT;

 GET_MSG_BUF(ZQ_MSG_PTR);

 DO WITH ZQ_MSG_PTR->T_MSG_1543_TP_PM_REPORT_REQ;
   DO WITH T_B_HEADER;
     B_MB_OWNER.B_FMM_ID := M_FI_CC_DATA_COLLECTOR;
     B_MB_MINI_HEAD      := T_DEF_1543_TP_PM_REPORT_REQ;
     DO WITH B_MB_DESTINATION;
       B_LCE_ID := ZF_LCE_ID;
       B_FMM_SELECTOR := 0; 
     OD;
     DO WITH B_MB_SOURCE;
       B_PID_PROCESS_ID.B_PID_LCE := 
         Z_OWN_PID.B_PID_PROCESS_ID.B_PID_LCE;
       B_PID_PID:= M_PROC_CODE(M_FS_CC_DATA_COLLECTOR);
     OD;
   OD;
   DO WITH T_B_ELMT_STRUCT;
     B_REF_NBR                := ZF_REF_NBR;
     B_POLL_INFO.B_NB_RETRIES := ZF_NB_RETRIES;
   OD;
 OD;

 CMW_SEND_MSG_VOS(1, ZS_FFFF, ZQ_MSG_PTR, ZQ_CMW_SEND_RES);
 
 /*ADD BY ZHUJ FOR WITTS 5771*/
 RET_MSG_BUF(ZQ_MSG_PTR);

END Q_S2330_SEND_N7_PM_POLLING;
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S3330_SEND_TC_PM_POLLING                          */
/*                                                                    */
/*     PROGRAMMER: MALA                                               */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 06/06/20                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                 THIS PROCEDURE IS ENTERED WHEN IT IS REQUIRED      */
/*                 TO POLL TC-MGT                                     */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LCE_ID M_LCE_ID,                           */
/*                      ZF_REF_NBR INT,                               */
/*                      ZF_NB_RETRIES INT                             */
/*                      ZF_TC_ID      M_TC_ID,                        */
/*                      ZF_PM_TYPE    M_MEAS_TYPE                     */
/*                                                                    */
/*                                                                    */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58XV_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0602_POLL_LDC                              */
/*     PRIMITIVES CALLED:                                             */
/*                      GET_MSG_BUF                                   */
/*                      MSG_SEND                                      */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S3330_SEND_TC_PM_POLLING: PROC(ZF_LCE_ID     M_LCE_ID,
                                 ZF_PROC_NBR   ZM_PROC_NBR,
                                 ZF_NB_RETRIES INT,
                                 ZF_SEQ_NBR    M_BYTE,
                                 ZF_PM_TYPE    M_MEAS_TYPE);

DCL ZQ_MSG_PTR PTR;
DCL ZQ_NB_RETRIES M_PM_POLLING_INFO;
DCL ZQ_REF_NBR M_INT_INTEL;
DCL ZQ_MSG_ID INT;
/*ADDED FOR BSC NOT POLLING TC*/
/*START: FR CRI00596704*/
/*DCL ZQ_TC    INT;
DCL ZQ_COUN  M_TC_ID;
DCL ZQ_FOUND BOOL;*/
/*END: FR CRI00596704*/
/*ADDED FOR BSC NOT POLLING TC*/
#ifdef GNU
NEWMODE M_INT_INTEL = STRUCT(
         CASE OF
         :B_INT   INT,
         :B_MSB   M_BYTE,
          B_LSB   M_BYTE
         ESAC );
#else
NEWMODE M_INT_INTEL = STRUCT(                                                   
         CASE OF                                                                
         :B_INT   INT,                                                          
         :B_LSB   M_BYTE,                                                 
          B_MSB   M_BYTE                                                  
         ESAC );                                                                
#endif

/*ADDED FOR BSC NOT POLLING TC*/
/*START: FR CRI00596704*/
/*ZQ_FOUND := FALSE;
ZQ_TC    := 0;
ZQ_COUN  := 1;

GET R_TC_MGT WHERE (D_TC_ID = ZQ_COUN);

DO WHILE DB_PARMS.B_DB_STATUS = M_DB_SUCCESS;
   IF (R_TC_MGT.D_TCOM_ST = E_MS_IT)
      OR (R_TC_MGT.D_TCOM_ST = E_MS_FIT)
    THEN
       ZQ_TC := ZQ_TC + 1;
   FI;
   ZQ_COUN := ZQ_COUN + 1;
   GET R_TC_MGT WHERE (D_TC_ID = ZQ_COUN);
OD;

DO WHILE (ZQ_TC/=0); 

  ZQ_FOUND := FALSE;
  ZQ_TC := ZQ_TC - 1;  */
/*END: FR CRI00596704*/
/*ADDED FOR BSC NOT POLLING TC*/
/*START: FR CRI00596704*/
DO WITH Z_POLL_PROCESS(ZF_PROC_NBR); 
 IF (ZB_POLL_STEP = ZE_POLL_TC_MTP2)
 THEN
/*END: FR CRI00596704*/
   ZQ_MSG_PTR  := -> Z_ENV_MSG_CONTENT;
/*WIPRO:BEGIN ER-1643 TC-PM-DATA-REQ not reach to TC*/
/*IF (Z_TC_POLL_FIRST)
THEN
 Q_S0147_GET_R_TC_MGT();
FI;  */
/*WIPRO:END ER-1643 TC-PM-DATA-REQ not reach to TC*/
   ZQ_REF_NBR.B_LSB := M_BYTE(ZF_PROC_NBR); 
/*COMMENTED FOR BSC NOT POLLING TC*/
/*ZQ_REF_NBR.B_MSB := ZF_SEQ_NBR;*/ 
/*ADDED FOR BSC NOT POLLING TC*/
/*START: FR CRI00596704*/
/*ZQ_REF_NBR.B_MSB := ZF_SEQ_NBR + ZQ_TC;*/
   ZQ_REF_NBR.B_MSB := ZF_SEQ_NBR;
/*END: FR CRI00596704*/
/*ADDED FOR BSC NOT POLLING TC*/
   DO WITH ZQ_MSG_PTR -> T_MSG_1694_MODE;
     B_REF                    := ZQ_REF_NBR.B_INT;
/*WIPRO:BEGIN ER-1268 change SCPR lce to OCPR lce*/
    /* B_LCE_ID                 := ZF_LCE_ID;*/
     B_LCE_ID                 := Z_OWN_PID.B_PID_PROCESS_ID.B_PID_LCE;
/*WIPRO:END ER-1268 change SCPR lce to OCPR lce */
     /*START: FR CRI00596704*/
     /*B_TC_ID                  := Z_TC_ID;*/
      B_TC_ID                  := Z_TC_ID_MTP2;
     /*END: FR CRI00596704*/
     B_PM_TYPE                := ZF_PM_TYPE;
     B_POLLING_NBR.B_NB_RETRIES := ZF_NB_RETRIES;
   OD;
   GET_MSG_BUF(Z_MSG_BUF_PTR);
   DO WITH Z_MSG_BUF_PTR -> ZM_MSG_0507_ENVELOPE_MSG;
     DO WITH B_HEADER;
       B_MB_OWNER.B_FMM_ID   := M_FI_CC_DATA_COLLECTOR;
       B_MB_MINI_HEAD        := T_DEF_0507_ENVELOPE_MSG;
      DO WITH B_MB_DESTINATION;
        B_LCE_ID            := ZF_LCE_ID;
        B_MSG_IDENTITY      := T_MRTNO_0507;
      OD;
    OD;

    DO WITH B_ELMT_STRUCT;
      B_DUMMY := Z_ENV_MSG_CONTENT;
    OD;
    ZQ_MSG_ID := 1694;
    DO WITH B_MSG_BUF_TAIL;
      B_ORIG_MSG_NUMBER     := ZQ_MSG_ID;
      B_ORIG_PRIORITY       := 4;
      B_ORIG_MSG_TYPE       := E_BASIC_TO;
      B_ORIG_DUSE.B_FMM_SEL := NUM(M_FS_TC_MGT);
      B_ORIG_FLAGS          := M_NO_BUFFER;
    OD;
   OD;
   MSG_SEND(Z_MSG_BUF_PTR);
/*START: FR CRI00596704*/
ELSIF (ZB_POLL_STEP = ZE_POLL_TC_IP)
 THEN
   ZQ_MSG_PTR  := -> Z_ENV_MSG_CONTENT;
   ZQ_REF_NBR.B_LSB := M_BYTE(ZF_PROC_NBR); 
   ZQ_REF_NBR.B_MSB := ZF_SEQ_NBR;
   DO WITH ZQ_MSG_PTR -> T_MSG_1694_MODE;
     B_REF                    := ZQ_REF_NBR.B_INT;
     B_LCE_ID                 := Z_OWN_PID.B_PID_PROCESS_ID.B_PID_LCE;
     B_TC_ID                  := Z_TC_ID_IP;
     B_PM_TYPE                := ZF_PM_TYPE;
     B_POLLING_NBR.B_NB_RETRIES := ZF_NB_RETRIES;
   OD;
   GET_MSG_BUF(Z_MSG_BUF_PTR);
   DO WITH Z_MSG_BUF_PTR -> ZM_MSG_0507_ENVELOPE_MSG;
     DO WITH B_HEADER;
       B_MB_OWNER.B_FMM_ID   := M_FI_CC_DATA_COLLECTOR;
       B_MB_MINI_HEAD        := T_DEF_0507_ENVELOPE_MSG;
      DO WITH B_MB_DESTINATION;
        B_LCE_ID            := ZF_LCE_ID;
        B_MSG_IDENTITY      := T_MRTNO_0507;
      OD;
     OD;

     DO WITH B_ELMT_STRUCT;
      B_DUMMY := Z_ENV_MSG_CONTENT;
     OD;
     ZQ_MSG_ID := 1694;
    DO WITH B_MSG_BUF_TAIL;
      B_ORIG_MSG_NUMBER     := ZQ_MSG_ID;
      B_ORIG_PRIORITY       := 4;
      B_ORIG_MSG_TYPE       := E_BASIC_TO;
      B_ORIG_DUSE.B_FMM_SEL := NUM(M_FS_TC_MGT);
      B_ORIG_FLAGS          := M_NO_BUFFER;
    OD;
  OD;
  MSG_SEND(Z_MSG_BUF_PTR);
FI;
OD;
/*END: FR CRI00596704*/
/*ADDED FOR BSC NOT POLLING TC*/
/*START: FR CRI00596704*/

 /*DO WHILE NOT ZQ_FOUND AND (Z_TC_IDX/=9);
    ZQ_FOUND := Q_S0147_GET_R_TC_MGT(); 
 OD;
OD;*/
/*START: FR CRI00596704*/
/*ADDED FOR BSC NOT POLLING TC*/

END Q_S3330_SEND_TC_PM_POLLING;

/* START : WIPRO B11 IP MR0 PKG1 */
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0701_SEND_TCSL_PM_POLLING                        */
/*                                                                    */
/*     PROGRAMMER: SRINIVAS                                           */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 06/06/20                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                 THIS PROCEDURE WILL USE 1753 MSG                   */
/*                 TO POLL TCSL MR                                    */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LCE_ID M_LCE_ID,                           */
/*                      ZF_REF_NBR INT,                               */
/*                      ZF_NB_RETRIES INT                             */
/*                                                                    */
/*                                                                    */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58XV_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0602_POLL_LDC                              */
/*     PRIMITIVES CALLED:                                             */
/*                      GET_MSG_BUF                                   */
/*                      MSG_SEND                                      */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0701_SEND_TCSL_PM_POLLING: PROC(ZF_LCE_ID     M_LCE_ID,
                                   ZF_REF_NBR    INT,
                                   ZF_NB_RETRIES INT);

DCL ZQ_MSG_PTR PTR;
DCL ZQ_CMW_SEND_RES INT;

 GET_MSG_BUF(ZQ_MSG_PTR);

 DO WITH ZQ_MSG_PTR->T_MSG_1753_TCSLMR_POLLING_REQ;
   DO WITH T_B_HEADER;
     B_MB_OWNER.B_FMM_ID := M_FI_CC_DATA_COLLECTOR;
     /* SRINIVAS : TO BE CHANGED */
     B_MB_MINI_HEAD      := T_DEF_1753_TCSLMR_POLLING_REQ;
     DO WITH B_MB_DESTINATION;
       B_LCE_ID := ZF_LCE_ID;
       B_FMM_SELECTOR := 0;
     OD;
     /*ADD BY ZHUJ FOR WITTS 5724*/
     DO WITH B_MB_SOURCE;
       B_PID_PROCESS_ID.B_PID_LCE :=
         Z_OWN_PID.B_PID_PROCESS_ID.B_PID_LCE;
       B_PID_PID:= M_PROC_CODE(M_FS_CC_DATA_COLLECTOR);
     OD;
     /*END BY ZHUJ*/
   OD;
   DO WITH T_B_ELMT_STRUCT;
     B_REF_NBR                := ZF_REF_NBR;
     B_POLL_INFO.B_NB_RETRIES := ZF_NB_RETRIES;
   OD;
 OD;

 CMW_SEND_MSG_VOS(1, ZS_FFFF, ZQ_MSG_PTR, ZQ_CMW_SEND_RES);

 /*ADD BY ZHUJ FOR WITTS 5771*/
 RET_MSG_BUF(ZQ_MSG_PTR);

END Q_S0701_SEND_TCSL_PM_POLLING;
/* END : WIPRO B11 IP MR0 PKG1 */
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0702_SEND_M3UA_PM_POLLING                        */
/*                                                                    */
/*     PROGRAMMER:                                                    */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE:                                                 */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                 THIS PROCEDURE WILL USE 2007 MSG                   */
/*                 TO POLL M3UA LM                                    */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LCE_ID M_LCE_ID,                           */
/*                      ZF_REF_NBR INT,                               */
/*                      ZF_NB_RETRIES INT                             */
/*                                                                    */
/*                                                                    */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58XV_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0602_POLL_LDC                              */
/*     PRIMITIVES CALLED:                                             */
/*                      GET_MSG_BUF                                   */
/*                      MSG_SEND                                      */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0702_SEND_M3UA_PM_POLLING: PROC(ZF_LCE_ID     M_LCE_ID,
                                   ZF_REF_NBR    INT,
                                   ZF_NB_RETRIES INT);

DCL ZQ_MSG_PTR PTR;
DCL ZQ_CMW_SEND_RES INT;

 GET_MSG_BUF(ZQ_MSG_PTR);

 DO WITH ZQ_MSG_PTR->T_MSG_2007_M3UALM_POLLING_REQ;
   DO WITH T_B_HEADER;
     B_MB_OWNER.B_FMM_ID := M_FI_CC_DATA_COLLECTOR;
     /* SRINIVAS : TO BE CHANGED */
     B_MB_MINI_HEAD      := T_DEF_2007_M3UALM_POLLING_REQ;
     DO WITH B_MB_DESTINATION;
       B_LCE_ID := ZF_LCE_ID;
       B_FMM_SELECTOR := 0;
     OD;
     /*ADD BY ZHUJ FOR WITTS 5724*/
     DO WITH B_MB_SOURCE;
       B_PID_PROCESS_ID.B_PID_LCE :=
         Z_OWN_PID.B_PID_PROCESS_ID.B_PID_LCE;
       B_PID_PID:= M_PROC_CODE(M_FS_CC_DATA_COLLECTOR);
     OD;
     /*END BY ZHUJ*/
   OD;
   DO WITH T_B_ELMT_STRUCT;
     B_REF_NBR                := ZF_REF_NBR;
     B_POLL_INFO.B_NB_RETRIES := ZF_NB_RETRIES;
   OD;
 OD;

 CMW_SEND_MSG_VOS(1, ZS_FFFF, ZQ_MSG_PTR, ZQ_CMW_SEND_RES);

 /*ADD BY ZHUJ FOR WITTS 5771*/
 RET_MSG_BUF(ZQ_MSG_PTR);

END Q_S0702_SEND_M3UA_PM_POLLING;
/*START: IURG FEATURE */
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0970_SEND_IURG_PM_POLLING                        */
/*                                                                    */
/*     PROGRAMMER: AMITABH                                            */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE:                                                 */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                 THIS PROCEDURE WILL USE 2106 MSG                   */
/*                 TO POLL M3UA LM FOR IURG COUNTERS                  */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LCE_ID M_LCE_ID,                           */
/*                      ZF_REF_NBR INT,                               */
/*                      ZF_NB_RETRIES INT                             */
/*                                                                    */
/*                                                                    */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58AZ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0602_POLL_LDC                              */
/*     PRIMITIVES CALLED:                                             */
/*                      GET_MSG_BUF                                   */
/*                      MSG_SEND                                      */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0970_SEND_IURG_PM_POLLING: PROC(ZF_LCE_ID     M_LCE_ID,
                                   ZF_REF_NBR    INT,
                                   ZF_NB_RETRIES INT);

DCL ZQ_MSG_PTR PTR;
DCL ZQ_CMW_SEND_RES INT;

 GET_MSG_BUF(ZQ_MSG_PTR);

 DO WITH ZQ_MSG_PTR->T_MSG_2106_IURG_PM_POLLING_REQ;
   DO WITH T_B_HEADER;
     B_MB_OWNER.B_FMM_ID := M_FI_CC_DATA_COLLECTOR;
     B_MB_MINI_HEAD      := T_DEF_2106_IURG_PM_POLLING_REQ;
     DO WITH B_MB_DESTINATION;
       B_LCE_ID := ZF_LCE_ID;
       B_FMM_SELECTOR := 0;
     OD;
     DO WITH B_MB_SOURCE;
       B_PID_PROCESS_ID.B_PID_LCE :=
         Z_OWN_PID.B_PID_PROCESS_ID.B_PID_LCE;
       B_PID_PID:= M_PROC_CODE(M_FS_CC_DATA_COLLECTOR);
     OD;
   OD;
   DO WITH T_B_ELMT_STRUCT;
     B_REF_NBR                := ZF_REF_NBR;
     B_POLL_INFO.B_NB_RETRIES := ZF_NB_RETRIES;
   OD;
 OD;

 CMW_SEND_MSG_VOS(1, ZS_FFFF, ZQ_MSG_PTR, ZQ_CMW_SEND_RES);
 RET_MSG_BUF(ZQ_MSG_PTR);

END Q_S0970_SEND_IURG_PM_POLLING;
/*END:IURG FEATURE */	
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0147_GET_R_TC_MGT                                */
/*                                                                    */
/*     PROGRAMMER: MALA                                               */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 06/06/20                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                                                                    */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58XV_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*     PRIMITIVES CALLED:                                             */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0147_GET_R_TC_MGT: PROC() 
                       RETURNS(BOOL);

DCL ZQ_FOUND   BOOL;
ZQ_FOUND := FALSE;
/*START: FR CRI00596704*/
/*IF Z_TC_POLL_FIRST
THEN
  Z_TC_IDX :=1;
FI;
Z_TC_POLL_FIRST := FALSE;
GET R_TC_MGT WHERE (D_TC_ID = Z_TC_IDX);

DO WHILE DB_PARMS.B_DB_STATUS = M_DB_SUCCESS AND NOT ZQ_FOUND;
   IF (R_TC_MGT.D_TCOM_ST = E_MS_IT)
      OR (R_TC_MGT.D_TCOM_ST = E_MS_FIT)
   THEN
     Z_TC_ID := R_TC_MGT.D_TC_ID;
     ZQ_FOUND := TRUE;
   FI;      
  Z_TC_IDX:=Z_TC_IDX+1;
  IF ZQ_FOUND = FALSE
  THEN
    GET R_TC_MGT WHERE (D_TC_ID = Z_TC_IDX);
  FI;
OD;*/

IF (Z_POLL_STEP = ZE_POLL_TC_MTP2)
THEN
  IF (Z_TC_POLL_FIRST AND Z_TC_ID_MTP2 = 0)
    THEN
      Z_TC_IDX_MTP2 := 1;
  FI;
  Z_TC_POLL_FIRST := FALSE;
  GET R_TC_MGT WHERE (D_TC_ID = Z_TC_IDX_MTP2);

  DO WHILE DB_PARMS.B_DB_STATUS = M_DB_SUCCESS AND NOT ZQ_FOUND;
    IF (R_TC_MGT.D_TCOM_ST = E_MS_IT)
      OR (R_TC_MGT.D_TCOM_ST = E_MS_FIT)
     THEN
      Z_TC_ID_MTP2 := R_TC_MGT.D_TC_ID;
      ZQ_FOUND := TRUE;
    FI;      
    Z_TC_IDX_MTP2:=Z_TC_IDX_MTP2+1;
    IF ZQ_FOUND = FALSE
    THEN
      GET R_TC_MGT WHERE (D_TC_ID = Z_TC_IDX_MTP2);
    FI;
  OD;
ELSIF (Z_POLL_STEP = ZE_POLL_TC_IP)
THEN
  IF (Z_TC_POLL_FIRST AND Z_TC_ID_IP = 0)
  THEN
    Z_TC_IDX_IP := 1;
  FI;
  Z_TC_POLL_FIRST := FALSE;
  GET R_TC_MGT WHERE (D_TC_ID = Z_TC_IDX_IP);

  DO WHILE DB_PARMS.B_DB_STATUS = M_DB_SUCCESS AND NOT ZQ_FOUND;
    IF (R_TC_MGT.D_TCOM_ST = E_MS_IT)
      OR (R_TC_MGT.D_TCOM_ST = E_MS_FIT)
     THEN
      Z_TC_ID_IP := R_TC_MGT.D_TC_ID;
      ZQ_FOUND := TRUE;
    FI;      
    Z_TC_IDX_IP:=Z_TC_IDX_IP+1;
    IF ZQ_FOUND = FALSE
    THEN
      GET R_TC_MGT WHERE (D_TC_ID = Z_TC_IDX_IP);
    FI;
  OD;
FI;
/*END: FR CRI00596704*/
RETURN (ZQ_FOUND);

END Q_S0147_GET_R_TC_MGT;
/* END: ADD-WIPRO-B10-MX-MR2-CHANGE */ 
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0400_UPD_CCI_STD_CNTRS                           */
/*                                                                    */
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/27                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                 THIS PROCEDURE IS ENTERED WHEN A DATA TRANSFER     */
/*                 MESSAGE ARRIVES FROM AN LDC, CONTAINING THE        */
/*                 LATEST STANDARD COUNTER VALUES FOR THAT LDC.       */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LDC_LCE_ID M_LCE_ID,                       */
/*                      ZF_LDC_TYPE M_FMM_SELECTOR,                   */
/*                      ZF_LDC_SEQ_NBR M_BYTE,                        */
/*                      ZF_VALIDITY M_PM_DATA_VALIDITY,               */
/*                      ZF_LDC_BUF_PTR PTR                            */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0134_LDC_ON_ACT_CE                         */
/*                      Q_S0180_MEAS_TYPE_RUNNING                     */
/*                      Q_S0401_UPD_T7_INVALID                        */
/*                      Q_S0595_UPDATE_CCI_ALERTER                    */
/*     CALLED FROM:                                                   */
/*                      Q_S0670_PROCESS_POLLING_RESPONSE              */
/*                      Q_S0680_PROCESS_TIMER_EXPIRY                  */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0400_UPD_CCI_STD_CNTRS: PROC(ZF_LDC_LCE_ID    M_LCE_ID,
                                ZF_LDC_TYPE      M_FMM_SELECTOR,
                                ZF_LDC_SEQ_NBR   M_BYTE,
                                ZF_VALIDITY      M_PM_DATA_VALIDITY,
                                ZF_LDC_BUF_PTR   PTR,
                                ZF_STD_TRX       BOOL);

DCL ZQ_ACT_IDX    INT;
DCL ZQ_ACT_CE     BOOL;

 ZQ_ACT_CE := Q_S0134_LDC_ON_ACT_CE(ZF_LDC_LCE_ID);
 P_GDXBYX_UPD_CCI_STD_CTRS(ZF_LDC_LCE_ID,
                           ZF_LDC_TYPE,
                           ZF_LDC_SEQ_NBR,
                           ZF_VALIDITY,
                           ZF_LDC_BUF_PTR,
                           ZQ_ACT_CE,
                           ZF_STD_TRX);
/*CR 889255*/

 IF ZF_LDC_TYPE = M_FS_TCHRM_LDC AND ZF_LDC_SEQ_NBR > 5 
 THEN 
    IF Q_S0180_MEAS_TYPE_RUNNING(E_MT_CELL_TRX_OVERVIEW_COUNTERS
	, ZQ_ACT_IDX)
    THEN
	  IF ZF_VALIDITY = E_DATA_VALID
   	 THEN
  Q_S01111_UPDATE_MC1531();

	  FI;
    FI;

 FI;
/*CR 889255*/
 IF ZF_LDC_TYPE = M_FS_TCU_TRF_LDC AND ZF_LDC_SEQ_NBR = 1
 THEN

   IF ZF_VALIDITY = E_DATA_INVALID
   THEN
     IF Q_S0180_MEAS_TYPE_RUNNING(E_MT_LAPD, ZQ_ACT_IDX)
     THEN
       Q_S0401_UPD_T7_INVALID(ZF_LDC_LCE_ID);
     FI;
   FI;
   /*START : CRI # 00860176   */
    IF Q_S0180_MEAS_TYPE_RUNNING(E_MT_VAMOS, ZQ_ACT_IDX)
	THEN
	  IF ZF_VALIDITY = E_DATA_VALID
   	 THEN
		Q_S0800_UPDATE_MC1422X_MC1423X();
	  FI;
    FI;
	/*END: CRI # 00860176   */

   /* UPDATE ALERTERS ALWAYS */
   IF PTR(ZF_LDC_BUF_PTR) /= NULL AND
      ZF_VALIDITY /= E_DATA_INVALID THEN
     Q_S0595_UPDATE_CCI_ALERTER(ZF_LDC_BUF_PTR);
   FI;
 FI;

END Q_S0400_UPD_CCI_STD_CNTRS;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0401_UPD_T7_INVALID                              */
/*                                                                    */
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/11                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LDC_LCE_ID M_LCE_ID                        */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0010_WAIT_BEFORE_RETRYING                  */
/*                      Q_S0402_UPD_LAPD_INVALID                      */
/*                      Q_S0020_CCDC_ERROR                            */
/*     CALLED FROM:                                                   */
/*                      Q_S0400_UPD_CCI_STD_CNTRS                     */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      GET     R_RSL_LNK                             */
/*                      GET     R_TSL_LNK                             */
/*                      GET     R_OML_LNK                             */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0401_UPD_T7_INVALID: PROC (ZF_LDC_LCE_ID M_LCE_ID);

DCL ZQ_RSL_IDX M_RSL_IDX;
DCL ZQ_FOUND BOOL;

ZQ_FOUND := FALSE;
/* start cr_914281 */
 DO FOR ZQ_RSL_IDX := 1 TO 1400;/* WHILE ZQ_FOUND /= TRUE;*/
   DO WITH Z_FA_RSL_LNK.ZB_TUPLE_PTR -> 
                   ZM_R_RSL_LNK(INT((ZQ_RSL_IDX))) ;
  
 IF ( D_TCU_ID = ZF_LDC_LCE_ID)
  THEN
   ZQ_FOUND := TRUE;
 
  IF D_RSL_MST = E_MS_IT OR
     D_RSL_MST = E_MS_FIT
  THEN
    Q_S0402_UPD_LAPD_INVALID(D_BEQ_NBR,
                             M_SBLT_RSL,
                             D_TEI_NBR);
  FI;
FI;
OD;
OD;

IF NOT ZQ_FOUND 
  THEN 
  Q_S0020_CCDC_ERROR(M_ERC6_USER_REC, M_ERT0009_DBASE_ACC_FAIL,
                     09, 0);
FI;

/* end cr_914281 */


#ifdef  MXELITE 
GET R_OML_LNK WHERE (D_TCU_ID = ZF_LDC_LCE_ID);
#else
/*BEGIN ADD-WIPRO-CHANGE-B7PP-FR 20/116090*/
GET R_OML_LNK WHERE (D_TCU_ID = ZF_LDC_LCE_ID)
       LCE_ID(ZF_LDC_LCE_ID);
/*END ADD-WIPRO-CHANGE-B7PP-FR 20/116090*/
#endif

IF DB_PARMS.B_DB_STATUS = M_DB_TUPHELD
THEN
  Q_S0010_WAIT_BEFORE_RETRYING(ZS_WAIT_TIME_DB);
  /*BEGIN ADD-WIPRO-CHANGE-B7PP-FR 20/116090*/
  GET R_OML_LNK WHERE (D_TCU_ID = ZF_LDC_LCE_ID)
        LCE_ID(ZF_LDC_LCE_ID);
  /*END ADD-WIPRO-CHANGE-B7PP-FR 20/116090*/
FI;
DO WHILE DB_PARMS.B_DB_STATUS = M_DB_SUCCESS;
  IF R_OML_LNK.D_OML_MST = E_MS_IT OR
     R_OML_LNK.D_OML_MST = E_MS_FIT
  THEN
    Q_S0402_UPD_LAPD_INVALID(R_OML_LNK.D_BEQ_NBR,
                             M_SBLT_OML,
                             R_OML_LNK.D_TEI_NBR);
  FI;
  GET R_OML_LNK WHERE (D_TCU_ID = ZF_LDC_LCE_ID) IN SEQ;
  IF DB_PARMS.B_DB_STATUS = M_DB_TUPHELD
  THEN
    Q_S0010_WAIT_BEFORE_RETRYING(ZS_WAIT_TIME_DB);
    GET R_OML_LNK WHERE (D_TCU_ID = ZF_LDC_LCE_ID) IN SEQ;
  FI;
OD;
IF DB_PARMS.B_DB_STATUS /= M_DB_NFTUPIS
THEN
  Q_S0020_CCDC_ERROR(M_ERC6_USER_REC, M_ERT0009_DBASE_ACC_FAIL,
                     09, 0);
FI;

END Q_S0401_UPD_T7_INVALID;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0402_UPD_LAPD_INVALID                            */
/*                                                                    */
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/11                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       UPDATES THE TYPE 2 COUNTERS VALIDITY FIELDS.                 */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_BTS_EQ RANGE (1:255),                      */
/*                      ZF_SBLTYP M_SBLTYPE,                          */
/*                      ZF_TEI_NBR M_TEI_NBR                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0401_UPD_T7_INVALID                        */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0402_UPD_LAPD_INVALID: PROC(ZF_BTS_EQ   RANGE (1:255),
                               ZF_SBLTYP   M_SBLTYPE,
                               ZF_TEI_NBR  M_TEI_NBR);

DCL ZQ_I         M_TCU_TYPE_7;
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
DCL ZQ_LAPD_IDX  LONG_INT;
DCL ZQ_FOUND     LONG_INT;
ZQ_FOUND := 0L;
DO FOR ZQ_LAPD_IDX:=1L TO CM_FY32_MAX_LAPD_PER_BSC WHILE ZQ_FOUND = 0L;
/* END: ADD-WIPRO-B10-MR1-CHANGE */
  DO WITH Z_T7_PTR -> (ZQ_LAPD_IDX);
    DO WITH B_LAPD_ID;
            /* ENTRY MATCHES OR FIRST FREE ONE */
      IF (B_BTS_EQ  = ZF_BTS_EQ  AND
          B_SBL_TYP = ZF_SBLTYP  AND
          B_TEI_NBR = ZF_TEI_NBR)    OR
         (M_BYTE(B_SBL_TYP*1) = M_SBLT_NULL)
      THEN
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
        ZQ_FOUND  := LONG_INT(ZQ_LAPD_IDX);
/* END: ADD-WIPRO-B10-MR1-CHANGE */
        B_BTS_EQ  := ZF_BTS_EQ;
        B_SBL_TYP := ZF_SBLTYP;
        B_TEI_NBR := ZF_TEI_NBR;

        DO FOR ZQ_I := E_L1_1_NBR_INFO_FRM_XMT TO
                       E_L1_18_TIME_LAPD_CONG;
          IF ZQ_I /= E_L1_12_NBR_CRC_ERR
          THEN  
          
            B_HIS_CC_MT_07(ZQ_I).B_LOW  := ZS_FFFE;
            B_HIS_CC_MT_07(ZQ_I).B_HIGH := ZS_FFFF;
          FI;
          
        OD;
      FI;
    OD;
  OD;
OD;

END Q_S0402_UPD_LAPD_INVALID;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0410_CLEAR_MEMORY                                */
/*                                                                    */
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */
/*                                                                    */
/*     LAST MODIFIED BY:                               DATE:          */
/*                 JP QUINN                            97/12/08       */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION: RESETS ALL THE LOCALLY MAINTAINED      */
/*       COUNTERS TO NULL (I.E ZS_FFFF) AND ADDS SYSTEM RECORD HEADER.*/
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_MEAS_TYPE M_MEAS_TYPE,                     */
/*                      ZF_HIS_NBR INT LOC                            */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0755_GET_RECORD_SIZE                       */
/*                      Q_S0780_GET_MAX_NUM_RECS                      */
/*                      Q_S0798_GET_START_MEM_PTR                     */
/*                      Q_S0020_CCDC_ERROR                            */
/*                      Q_S0420_INIT_SYS_REC_HEAD                     */
/*                      Q_S0090_ADD_OFFSET_TO_PTR                     */
/*     CALLED FROM:                                                   */
/*                      Q_S0220_GET_STATIC_MEM                        */
/*                      Q_S0860_RESET_CCI_DS                          */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0410_CLEAR_MEMORY: PROC(ZF_MEAS_TYPE M_MEAS_TYPE,                            
                           ZF_HIS_NBR   INT LOC);                               
                                                                                
DCL ZQ_REC_IDX     INT,             
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
    ZQ_REC_IDX_LONG LONG_INT,                                                         
/* END: ADD-WIPRO-B10-MR1-CHANGE */
    ZQ_BYTE_IDX    INT,                                                         
    ZQ_MEM_PTR     PTR,                                                         
    ZQ_RECORD_SIZE INT,                                                         
    ZQ_NBR_RECS    INT,                                                         
    ZQ_IDX         ZM_180_COUNTERS;                                             
 
/* BEGIN CR 745699 */
DCL ZQ_OLC_NBR_RECS LONG_INT;
DCL ZQ_OLC_REC_IDX  LONG_INT;
/* END CR:745699 */
                                                                               
/* GET THE SIZE OF EACH RECORD AND THE NUMBER OF RECORDS                        
 * FOR THIS MEASUREMENT TYPE TO BE INITIALISED.                                 
 */                                                                             
ZQ_RECORD_SIZE:=Q_S0755_GET_RECORD_SIZE(ZF_MEAS_TYPE,                           
                                        ZF_HIS_NBR);                            
 
/* BEGIN CR 745699 */
IF ZF_HIS_NBR = CM_FY32_HF_NBR_TYPE_1115    
THEN
 ZQ_OLC_NBR_RECS := Q_S0780_OLC_GET_MAX_NUM_RECS(ZF_MEAS_TYPE, 
                         ZF_HIS_NBR);
ELSE                                                                           
ZQ_NBR_RECS:=Q_S0780_GET_MAX_NUM_RECS(ZF_MEAS_TYPE,                             
                                      ZF_HIS_NBR);                              
FI;
/* END CR:745699 */
                                                                                
ZQ_MEM_PTR:=Q_S0798_GET_START_MEM_PTR(ZF_MEAS_TYPE,                             
                                      ZF_HIS_NBR);                              
                                                                                
/* CHECK THAT THE POINTERS HAVE BEEN INITIALISED */  
IF PTR(ZQ_MEM_PTR)=NULL 
THEN                                                                            
  /* THIS SHOULD NEVER BE CALLED AS MEMORY IS                                   
   * GRABBED AND HELD ON INITIALISATION.                                        
   */                                                                           
  Q_S0020_CCDC_ERROR(M_ERC6_USER_REC, M_ERT0019_INC_MESS_DATA,                  
                     13, 1080);                                                 
FI;                                                                             
                                                                                
IF ZF_MEAS_TYPE=E_MT_CELL_TRX_OVERVIEW_COUNTERS AND                             
   ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_1101                                          
THEN                                                                            
  DO FOR ZQ_REC_IDX:=1 TO ZQ_NBR_RECS;                                          
    DO FOR ZQ_BYTE_IDX := 1 TO ZQ_RECORD_SIZE;                                  
      ZQ_MEM_PTR->ZM_BYTE_MASK(ZQ_BYTE_IDX) := H'FF;                            
    OD;                                                                         
                                                                                
    /* IT IS KNOWN THAT THE SYS_REC_HEADER IS AT THE START OF                   
     * EACH BLOCK.                                                              
     */                                                                         
    Q_S0420_INIT_SYS_REC_HEAD(ZQ_REC_IDX,                                       
                              ZQ_MEM_PTR);                                      
    IF ZQ_REC_IDX=ZQ_NBR_RECS/2                                                 
    THEN                                                                        
      /* GET THE POINTER TO THE NEXT BUFFER */                                  
      ZQ_MEM_PTR:=PTR(Z_T110_1_2_PTR);                                          
    ELSE                                                                        
      Q_S0090_ADD_OFFSET_TO_PTR(ZQ_MEM_PTR, ZQ_RECORD_SIZE);                    
    FI;                                                                         
  OD; 
/* CR20/209493 START */
ELSIF ZF_MEAS_TYPE=E_MT_CELL_TRX_OVERVIEW_COUNTERS AND                             
   ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_1107                                          
THEN                                                                            
  DO FOR ZQ_REC_IDX:=1 TO ZQ_NBR_RECS;                                          
    DO FOR ZQ_BYTE_IDX := 1 TO ZQ_RECORD_SIZE;                                  
      ZQ_MEM_PTR->ZM_BYTE_MASK(ZQ_BYTE_IDX) := H'FF;                            
    OD;                                                                         
                                                                                
    /* IT IS KNOWN THAT THE SYS_REC_HEADER IS AT THE START OF                   
     * EACH BLOCK.                                                              
     */                                                                         
    Q_S0420_INIT_SYS_REC_HEAD(ZQ_REC_IDX,                                       
                              ZQ_MEM_PTR);                                      
    IF ZQ_REC_IDX=ZQ_NBR_RECS/2                                                 
    THEN                                                                        
      /* GET THE POINTER TO THE NEXT BUFFER */                                  
      ZQ_MEM_PTR:=PTR(Z_T110_7_2_PTR);                                          
    ELSE                                                                        
      Q_S0090_ADD_OFFSET_TO_PTR(ZQ_MEM_PTR, ZQ_RECORD_SIZE);                    
    FI;                                                                         
  OD; 
/* CR20/209493 END */
/*START: MC Counters*/
ELSIF ZF_MEAS_TYPE=E_MT_CELL_TRX_OVERVIEW_COUNTERS AND                             
   ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_1104                                         
THEN                                                                            
  DO FOR ZQ_REC_IDX:=1 TO ZQ_NBR_RECS;                                          
    DO FOR ZQ_BYTE_IDX := 1 TO ZQ_RECORD_SIZE;                                  
      ZQ_MEM_PTR->ZM_BYTE_MASK(ZQ_BYTE_IDX) := H'FF;                            
    OD;                                                                         
                                                                                
    /* IT IS KNOWN THAT THE SYS_REC_HEADER IS AT THE START OF                   
     * EACH BLOCK.                                                              
     */                                                                         
    Q_S0420_INIT_SYS_REC_HEAD(ZQ_REC_IDX,                                       
                              ZQ_MEM_PTR);                                      
    IF ZQ_REC_IDX=ZQ_NBR_RECS/2                                                 
    THEN                                                                        
      /* GET THE POINTER TO THE NEXT BUFFER */                                  
      ZQ_MEM_PTR:=PTR(Z_T110_4_2_PTR);                                          
    ELSE                                                                        
      Q_S0090_ADD_OFFSET_TO_PTR(ZQ_MEM_PTR, ZQ_RECORD_SIZE);                    
    FI;                                                                         
  OD;
/*END: MC Counters*/  
/*START: CR646615 */
ELSIF ZF_MEAS_TYPE=E_MT_CELL_TRX_OVERVIEW_COUNTERS AND                             
   ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_1113                                         
THEN                                                                            
  DO FOR ZQ_REC_IDX:=1 TO ZQ_NBR_RECS;                                          
    DO FOR ZQ_BYTE_IDX := 1 TO ZQ_RECORD_SIZE;                                  
      ZQ_MEM_PTR->ZM_BYTE_MASK(ZQ_BYTE_IDX) := H'FF;                            
    OD;                                                                         
                                                                                
    /* IT IS KNOWN THAT THE SYS_REC_HEADER IS AT THE START OF                   
     * EACH BLOCK.                                                              
     */                                                                         
    Q_S0420_INIT_SYS_REC_HEAD(ZQ_REC_IDX,                                       
                              ZQ_MEM_PTR);      

    /* START: CR652631 */
                 
    Q_S0090_ADD_OFFSET_TO_PTR(ZQ_MEM_PTR, ZQ_RECORD_SIZE);

    /* END: CR652631 */

  OD;
/*END: CR646615*/ 
/* BEGIN CR:745699 */                                                                                 
ELSIF ZF_MEAS_TYPE=E_MT_CELL_TRX_OVERVIEW_COUNTERS AND                             
   ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_1115                                         
THEN                                                                            
  DO FOR ZQ_OLC_REC_IDX:=1L TO ZQ_OLC_NBR_RECS;                                          
    DO FOR ZQ_BYTE_IDX := 1 TO ZQ_RECORD_SIZE;                                  
      ZQ_MEM_PTR->ZM_BYTE_MASK(ZQ_BYTE_IDX) := H'FF;                            
    OD;                                                                         
                                                                                
    /* IT IS KNOWN THAT THE SYS_REC_HEADER IS AT THE START OF                   
     * EACH BLOCK.                                                              
     */                                                                         
    Q_S0420_OLC_INIT_SYS_REC_HEAD(ZQ_OLC_REC_IDX,                                       
                              ZQ_MEM_PTR);                                      
    IF ZQ_OLC_REC_IDX=ZQ_OLC_NBR_RECS/2L                                                 
    THEN                                                                        
      /* GET THE POINTER TO THE NEXT BUFFER */                                  
      ZQ_MEM_PTR:=PTR(Z_T110_15_2_PTR);                                          
    ELSE                                                                        
      Q_S0090_ADD_OFFSET_TO_PTR(ZQ_MEM_PTR, ZQ_RECORD_SIZE);                    
    FI;                                                                         
  OD;
/* END CR:745699 */
/*begin CR1238146 A-GPS*/
ELSIF ZF_MEAS_TYPE=E_MT_CELL_TRX_OVERVIEW_COUNTERS AND                             
   ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_1118
THEN                                                                            
  DO FOR ZQ_REC_IDX:=1 TO ZQ_NBR_RECS;                                          
    DO FOR ZQ_BYTE_IDX := 1 TO ZQ_RECORD_SIZE;                                  
      ZQ_MEM_PTR->ZM_BYTE_MASK(ZQ_BYTE_IDX) := H'FF;                            
    OD;                                                                         
                                                                                
    /* IT IS KNOWN THAT THE SYS_REC_HEADER IS AT THE START OF                   
     * EACH BLOCK.                                                              
     */                                                                         
    Q_S0420_INIT_SYS_REC_HEAD(ZQ_REC_IDX,                                       
                              ZQ_MEM_PTR);                 
    Q_S0090_ADD_OFFSET_TO_PTR(ZQ_MEM_PTR, ZQ_RECORD_SIZE);
  OD;
/*end CR1238146 A-GPS*/
ELSIF ZF_MEAS_TYPE=E_MT_TRAFFIC_FLOW                                            
THEN                                                                            
  DO FOR ZQ_REC_IDX := 1 TO CM_FY32_MAX_CELLS_PER_BSC;                          
    Z_T180_1_PTR->.B_ACTIV_CELLS(ZQ_REC_IDX) := ZS_FFFF;                        
  OD;                                                                           
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */

  DO FOR ZQ_REC_IDX_LONG := 1L TO ZS_MAX_180_CELLS;                                   
    Z_T180_1_PTR->.B_NEXT(ZQ_REC_IDX_LONG).B_NEXT_PAIR := ZS_FFFF;                   
/* END: ADD-WIPRO-B10-MR1-CHANGE */
    /* B9 CHENZY BEGIN */
    /*
    Z_T180_1_PTR->.B_NEXT(ZQ_REC_IDX).B_SERV_CELL.B_LAC := ZS_FFFF;             
    Z_T180_1_PTR->.B_NEXT(ZQ_REC_IDX).B_SERV_CELL.B_CI  := ZS_FFFF;             
    */
    Z_T180_1_PTR->.B_NEXT(ZQ_REC_IDX_LONG).B_SERV_CELL.B_CELL_ID_CGI 
                                                  := ZS_NULL_CGI;
    /* B9 CHENZY END*/
    
  OD;                                                                           
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
  DO FOR ZQ_REC_IDX_LONG := 1L TO ZS_MAX_180_CELLS;                                   
    DO FOR ZQ_IDX := E_C400_INC_HO_REQ TO E_C402_INC_HO_SUCC;                   
      Z_T180_2_PTR->(ZQ_REC_IDX_LONG)(ZQ_IDX).B_LOW  := ZS_FFFF;                     
      Z_T180_2_PTR->(ZQ_REC_IDX_LONG)(ZQ_IDX).B_HIGH := ZS_FFFF;                     
/* END: ADD-WIPRO-B10-MR1-CHANGE */
    OD;                                                                         
  OD;                                                                           
  Z_1ST_FREE := ZS_1ST_FREE_501;                                                

ELSIF ZF_MEAS_TYPE=E_MT_HANDOVER_PER_SERVINGCELL                               
  THEN                                                                        

  DO FOR ZQ_REC_IDX:=1 TO ZQ_NBR_RECS;                                          
    DO FOR ZQ_BYTE_IDX := 1 TO ZQ_RECORD_SIZE;                                  
      ZQ_MEM_PTR->ZM_BYTE_MASK(ZQ_BYTE_IDX) := H'FF;                            
    OD;                                                                                                      
    Q_S0420_INIT_SYS_REC_HEAD(ZQ_REC_IDX,                                       
                              ZQ_MEM_PTR);      

    IF ZQ_REC_IDX < ZQ_NBR_RECS/2                                             
       AND                                                                    
       /*START: CRI 649460*/
       /*(ZQ_REC_IDX MOD (M_PM_MAX_SERVING_CELLS+1))= 1*/ 
       (ZQ_REC_IDX MOD (CM_PM_MAX_SERVING_CELLS+1))= 1                         
       /*END: CRI 649460*/
    THEN                                                                      
      /*START: CRI 649460*/
   /*DO WITH Z_T26_PTR->(ZQ_REC_IDX/(M_PM_MAX_SERVING_CELLS+1)+1,0);*/ 
      DO WITH Z_T26_PTR->(ZQ_REC_IDX/(CM_PM_MAX_SERVING_CELLS+1)+1,0);         
      /*END: CRI 649460*/
        B_INVALID := FALSE;                                                   
      OD;         
    ELSIF ZQ_REC_IDX > ZQ_NBR_RECS/2 
       /*START: CRI 649460*/
       /* AND (ZQ_REC_IDX MOD (M_PM_MAX_SERVING_CELLS+1))= 1*/ 
        AND (ZQ_REC_IDX MOD (CM_PM_MAX_SERVING_CELLS+1))= 1                      
       /*END: CRI 649460*/
    THEN                                                                      
      DO WITH Z_T26_2_PTR->                                                   
       /*START: CRI 649460*/
       /*(ZQ_REC_IDX/(M_PM_MAX_SERVING_CELLS+1)+1,0); */
       (ZQ_REC_IDX/(CM_PM_MAX_SERVING_CELLS+1)+1,0);                           
       /*END: CRI 649460*/
        B_INVALID := FALSE;                                                   
      OD;         
    FI; 
    IF ZQ_REC_IDX = ZQ_NBR_RECS/2
    THEN                                                                      
      ZQ_MEM_PTR:=PTR(Z_T26_2_PTR);                                           
    ELSE                                                                  
      Q_S0090_ADD_OFFSET_TO_PTR(ZQ_MEM_PTR, ZQ_RECORD_SIZE);        
    FI;
  OD;

ELSE
/*BEGIN: CRI #01165185.02,AllOW TYPE370 INITIAL*/
/*begin CR1098364 MC1408/MC1409 improv*/
	IF ZF_MEAS_TYPE=E_MT_VAMOS AND                             
   	ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_370
	THEN
  	Q_S0666_CLEAR_MC1408X_MC1409X_TMP();
  FI;
/*end CR1098364 MC1408/MC1409 improv*/
/*END: CRI #01165185.02*/  
                                                                          
  DO FOR ZQ_REC_IDX:=1 TO ZQ_NBR_RECS;                                          
    DO FOR ZQ_BYTE_IDX := 1 TO ZQ_RECORD_SIZE;                                  
      ZQ_MEM_PTR->ZM_BYTE_MASK(ZQ_BYTE_IDX) := H'FF;                            
    OD;                                                                         
  /* BEGIN CRI#01410758.02 BTS ID RANGE */
  IF ZF_MEAS_TYPE = E_MT_IP AND ZF_HIS_NBR = CM_FY32_HF_NBR_TYPE_355
      THEN
          Z_T35_5_PTR->(ZQ_REC_IDX).B_BTS_IDX := H'00;
  FI;
  IF ZF_MEAS_TYPE = E_MT_IP AND ZF_HIS_NBR = CM_FY32_HF_NBR_TYPE_356
      THEN    
          Z_T35_6_PTR->(ZQ_REC_IDX).B_BTS_IDX := H'00;
  FI;
  /* END CRI#01410758.02 BTS ID RANGE */                                                                                
    /* IT IS KNOWN THAT THE SYS_REC_HEADER IS AT THE START OF                   
     * EACH BLOCK.                                                              
     */                                                                         
    Q_S0420_INIT_SYS_REC_HEAD(ZQ_REC_IDX,                                       
                              ZQ_MEM_PTR);                                      
                              
    IF ZF_MEAS_TYPE=E_MT_HANDOVER_PER_TARGETCELL                                
       THEN                                                                     
       DO WITH Z_T27_PTR->(0);                                                  
         B_INVALID   := FALSE;                                                  
       OD;                                                                      
    FI;                                                                         
    IF ZF_MEAS_TYPE=E_MT_RESOURCE_USAGE_RTCH AND                                
       ZQ_REC_IDX=ZQ_NBR_RECS/2                                                 
    THEN                                                                        
      ZQ_MEM_PTR:=PTR(Z_T5_2_PTR);                                                                                                             
    ELSE
      Q_S0090_ADD_OFFSET_TO_PTR(ZQ_MEM_PTR, ZQ_RECORD_SIZE);                    
    FI;                                                                         
  OD;                                                                           
FI;
END Q_S0410_CLEAR_MEMORY;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0420_INIT_SYS_REC_HEAD                           */
/*                                                                    */
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                P. GAUDICH                           97/12/09       */
/*                                                                    */
/*     CREATION DATE: 97/11/27                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       INITIIALISES THE RECORD HEADER OF A HSITORY FILE RECORD.     */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_REC_NBR INT,                               */
/*                      ZF_HEAD_PTR PTR                               */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0410_CLEAR_MEMORY                          */
/*                      Q_S0808_UPD_HIS_TYPE_180                      */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0420_INIT_SYS_REC_HEAD: PROC(ZF_REC_NBR  INT,
                                ZF_HEAD_PTR PTR);

DO WITH ZF_HEAD_PTR->M_SYS_REC_HEAD;
  B_HEADER      := 6;
  B_REC_SEQ_NBR := ZF_REC_NBR; /* ALWAYS START AT ZERO */
  B_REC_TYPE    := E_HPMR;
  B_FILE_TYPE   := E_HPMF;
OD;

END Q_S0420_INIT_SYS_REC_HEAD;
/******************************************************************/
Q_S0420_OLC_INIT_SYS_REC_HEAD: PROC(ZF_REC_NBR  LONG_INT,
                                ZF_HEAD_PTR PTR);

/*DCL Z_INIT_REC_SEQ_NBR ZM_INT_TO_LN_INT;*/
Z_INIT_REC_SEQ_NBR.ZB_LOW_INT := 0;
Z_INIT_REC_SEQ_NBR.ZB_HIGH_INT := 0;
Z_INIT_REC_SEQ_NBR.ZB_LONG_INT := ZF_REC_NBR;
DO WITH ZF_HEAD_PTR->M_SYS_REC_HEAD;
  B_HEADER      := 6;
 /* B_REC_SEQ_NBR := ZF_REC_NBR; /! ALWAYS START AT ZERO */
  B_REC_SEQ_NBR := Z_INIT_REC_SEQ_NBR.ZB_LOW_INT; 
  B_REC_TYPE    := E_HPMR;
  B_FILE_TYPE   := E_HPMF;
OD;

END Q_S0420_OLC_INIT_SYS_REC_HEAD;


/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0425_VALIDITY_MATE                               */
/*                                                                    */
/*     PROGRAMMER: L. DIERICK  (KDC)                                  */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 98/10/09                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*           THIS PROCEDURE SEARCHES THE MATE LCE (FOR A GIVEN LCE)   */
/*           IN ORDER TO KNOW THE VALIDITY. IF THE MATE IS NOT LISTED,*/
/*           THE GIVEN LCE (ZF_LCE_ID) IS STORED IN THE LIST TOGETHER */
/*           WITH THE VALIDITY AND THE LCE_LDC_TYPE.                  */
/*           IF THE MATE IS LISTED - THIS MEANS BOTH CPRS RESPONDED - */
/*           THE LIST ELEMENT IS CLEARED.                             */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LCE_ID M_LCE_ID,                           */
/*                      ZF_LDC_TYPE M_FMM_SELECTOR,                   */
/*                      ZF_VALIDITY M_PM_DATA_VALIDITY                */
/*     RETURNED VALUE:                                                */
/*                      M_BYTE                                        */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0120_GET_R_CONF_CE                         */
/*     CALLED FROM:                                                   */
/*                      Q_S0426_SET_INVALID                           */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0425_VALIDITY_MATE : PROC (ZF_LCE_ID    M_LCE_ID,
                              ZF_LDC_TYPE  M_FMM_SELECTOR,
                              ZF_VALIDITY  M_PM_DATA_VALIDITY)
                        RETURNS (M_BYTE);

DCL ZQ_FOUND         INT;
DCL ZQ_I             INT;
DCL ZQ_VAL_MATE      M_BYTE;

ZQ_VAL_MATE := H'FF;
ZQ_FOUND := 0;

Q_S0120_GET_R_CONF_CE(ZF_LCE_ID);

DO FOR ZQ_I := 1 TO 5 WHILE ZQ_FOUND = 0;
  DO WITH Z_VAL_MATE(ZQ_I);
    IF ZB_LDC_TYPE = ZF_LDC_TYPE  AND
       ZB_LCE_ID = R_CONF_CE.D_MATE_LCE
    THEN
      ZQ_FOUND := ZQ_I;
      ZQ_VAL_MATE := ZB_VAL;
    FI;
  OD;
OD;

IF ZQ_FOUND = 0
THEN
  DO FOR ZQ_I := 1 TO 5 WHILE ZQ_FOUND = 0;
    DO WITH Z_VAL_MATE(ZQ_I);
      IF ZB_LCE_ID = M_LCE_ID_NULL
      THEN
        ZQ_FOUND := ZQ_I;
        ZB_LCE_ID := ZF_LCE_ID;
        ZB_LDC_TYPE := ZF_LDC_TYPE;
        ZB_VAL := M_BYTE(ZF_VALIDITY);
      FI;
    OD;
  OD;
ELSE
  Z_VAL_MATE(ZQ_FOUND) := ZS_INIT_VAL_MATE;
FI;

RETURN (ZQ_VAL_MATE);

END Q_S0425_VALIDITY_MATE;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0426_SET_INVALID                                 */
/*                                                                    */
/*     PROGRAMMER: L. DIERICK  (KDC)                                  */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 98/10/09                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                 THIS PROCEDURE IS ENTERED WHEN THE VALIDITY FOR    */
/*                 THE MATE (ACTIVE/STANDBY PAIR) IS NEEDED IN ORDER  */
/*                 DECIDE TO INVALIDITY IN CASE OF E_DATA_INVALID     */
/*                 FROM STANDBY AND E_DATA_VALID_INCOMPLETE FROM ACT. */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LCE_ID M_LCE_ID,                           */
/*                      ZF_LDC_TYPE M_FMM_SELECTOR,                   */
/*                      ZF_VALIDITY M_PM_DATA_VALIDITY                */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0425_VALIDITY_MATE                         */
/*     CALLED FROM:                                                   */
/*                      Q_S0430_UPD_T180_CTRS                         */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0426_SET_INVALID: PROC(ZF_LCE_ID        M_LCE_ID,
                          ZF_LDC_TYPE      M_FMM_SELECTOR,
                          ZF_VALIDITY      M_PM_DATA_VALIDITY)
                     RETURNS (BOOL);

DCL ZQ_VAL_MATE      M_BYTE;

ZQ_VAL_MATE := Q_S0425_VALIDITY_MATE(ZF_LCE_ID, ZF_LDC_TYPE,
                                     ZF_VALIDITY);

IF (ZQ_VAL_MATE = M_BYTE(E_DATA_INVALID) AND
    ZF_VALIDITY = E_DATA_VALID_INCOMPLETE) OR
   (ZQ_VAL_MATE = M_BYTE(E_DATA_VALID_INCOMPLETE) AND
    ZF_VALIDITY = E_DATA_INVALID)
THEN
  RETURN (TRUE);
FI;

RETURN (FALSE);

END Q_S0426_SET_INVALID;
/* CR 889255 */
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S01111_UPDATE_MC1531()                            */
/*                                                                    */
/*     PROGRAMMER:                                                    */
/*                                                                    */
/*     CREATION DATE: 13/05/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*      UPDATES MC1531 COUNTER                   	              */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      					      */	
/*								      */	                    
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                                                                    */
/*     CALLED FROM:                                                   */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S01111_UPDATE_MC1531:PROC();

DCL Z_PM_CTRS_1531_PTR PTR;
DCL Z_LDC_BUF_PTR PTR;
DCL Z_VAR ZM_PM_TCH_CELL_CTRS_1531;
DCL Z_LDC_SEQ_NBR INT;
DCL Z_VAR1 INT;
DCL ZQ_CELL_IDX INT;

DO FOR ZQ_CELL_IDX :=1 TO CM_FY32_MAX_CELLS_PER_BSC;
    DO WITH Z_LDC_BUF_PTR -> CM_FY32_PM_TCH_UB_CELLS;
      DO WITH Z_T110_MC1531_PTR->.ZB_TYPE_110_MC1531(ZQ_CELL_IDX);
/* DO WITH Z_PM_CTRS_1531_PTR -> ZM_PM_TCH_CELL_CTRS_1531 ;./
	DO WITH ZB_TYPE_110_MC1531(ZQ_CELL_IDX) ;*/
 DO WITH Z_T110_13_PTR->
 CM_FY32_HIS_TYPE_110_13_BUF(ZQ_CELL_IDX);
/*  ->(ZM_CELL_INDEX_VALUE_INT(ZQ_CELL_IDX));*/
   DO WITH B_CTRS_PT13_MT_110; 
/*   B_MC1520_TO_MC1539(E_MT_110_CTR_MC1531).B_HIGH:=0;  */
B_MC1520_TO_MC1539(E_MT_110_CTR_MC1531) :=
		((Q_S02011_ROUND_DECIMAL_M_STA_DPVAL(                                                     
                   ZB_MC1531_TCH_CONG_TIME
	       	,ZB_NBR_OF_TIMES_CONG_OBSERVD))); 
  OD;
 OD;
       /*  OD;*/
      OD;	
    OD;
 OD;
END Q_S01111_UPDATE_MC1531;
/* CR 889255 */
/*START CRI # 00823248.01*/

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0800_UPDATE_MC1422X_MC1423X                      */
/*                                                                    */
/*     PROGRAMMER: PURNA                                              */
/*                                                                    */
/*     CREATION DATE: 11/08/11                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*      UPDATES MC1422X AND MC1423 COUNTER SERIES	              */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      					      */	
/*								      */	                    
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                                                                    */
/*     CALLED FROM:                                                   */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/


Q_S0800_UPDATE_MC1422X_MC1423X:PROC();

DCL ZQ_COUNTER RANGE (E_MT_37_CTR_MC1422A:E_MT_37_CTR_MC1423D);
DCL ZQ_CELL_IDX INT;
DO FOR ZQ_CELL_IDX :=1 TO CM_FY32_MAX_CELLS_PER_BSC;
  /*DO FOR ZQ_COUNTER := E_MT_37_CTR_MC1422A TO E_MT_37_CTR_MC1423D
    DO WITH Z_T37_0_TEMP_PTR->;
	 DO WITH Z_T37_0_PTR->;
		IF(B_TEMP_CELL_ID=B_CELL_ID)*/
    DO WITH Z_T37_0_PTR -> (ZM_CELL_INDEX_VALUE(ZQ_CELL_IDX));
	DO WITH Z_T37_0_TEMP_PTR -> (ZM_CELL_INDEX_VALUE(ZQ_CELL_IDX));
	DO WITH B_CTRS_PT0_MT_37;
	DO WITH B_CTRS_TEMP_MT_37;
	DO FOR ZQ_COUNTER := E_MT_37_CTR_MC1422A TO E_MT_37_CTR_MC1423D;
      CASE(ZQ_COUNTER) OF

	   (E_MT_37_CTR_MC1422A):
	    B_MC1422A_TO_MC1423D(E_MT_37_CTR_MC1422A):=
		M_BYTE((Q_S01011_ROUND_DECIMAL
		(B_MC1422A_SUM_TO_MC1423D_SUM
			(E_MC1422A_RX_DL_VMS_NSAIC_SUM),
		B_MC1422A_SUM_TO_MC1423D_SUM
			(E_MC1422A_RX_DL_VMS_NSAIC_MES))));

		(E_MT_37_CTR_MC1422B):
	    B_MC1422A_TO_MC1423D(E_MT_37_CTR_MC1422B):=
	       M_BYTE((Q_S01011_ROUND_DECIMAL
		(B_MC1422A_SUM_TO_MC1423D_SUM
			(E_MC1422B_RX_DL_VMS_SAIC_SUM),
		B_MC1422A_SUM_TO_MC1423D_SUM
			(E_MC1422B_RX_DL_VMS_SAIC_MES))));

		(E_MT_37_CTR_MC1422C):
	    B_MC1422A_TO_MC1423D(E_MT_37_CTR_MC1422C):=
	      M_BYTE((Q_S01011_ROUND_DECIMAL
		(B_MC1422A_SUM_TO_MC1423D_SUM
			(E_MC1422C_RX_DL_VMS_1_SUM),
		B_MC1422A_SUM_TO_MC1423D_SUM
			(E_MC1422C_RX_DL_VMS_1_MES))));

		(E_MT_37_CTR_MC1422D):
		B_MC1422A_TO_MC1423D(E_MT_37_CTR_MC1422D):=
		M_BYTE((Q_S01011_ROUND_DECIMAL
		(B_MC1422A_SUM_TO_MC1423D_SUM
			(E_MC1422D_RX_DL_VMS_2_SUM),
		B_MC1422A_SUM_TO_MC1423D_SUM
			(E_MC1422D_RX_DL_VMS_2_MES))));
		
		/*MC1423X SERIES*/
		(E_MT_37_CTR_MC1423A):
	    B_MC1422A_TO_MC1423D(E_MT_37_CTR_MC1423A):=
		M_BYTE((Q_S01011_ROUND_DECIMAL
		(B_MC1422A_SUM_TO_MC1423D_SUM
			(E_MC1423A_RX_UL_VMS_NSAIC_SUM),
		B_MC1422A_SUM_TO_MC1423D_SUM
			(E_MC1423A_RX_UL_VMS_NSAIC_MES))));

		(E_MT_37_CTR_MC1423B):
	    B_MC1422A_TO_MC1423D(E_MT_37_CTR_MC1423B):=
		M_BYTE((Q_S01011_ROUND_DECIMAL
		(B_MC1422A_SUM_TO_MC1423D_SUM
			(E_MC1423B_RX_UL_VMS_SAIC_SUM),
		B_MC1422A_SUM_TO_MC1423D_SUM
			(E_MC1423B_RX_UL_VMS_SAIC_MES))));
	
		(E_MT_37_CTR_MC1423C):
	    B_MC1422A_TO_MC1423D(E_MT_37_CTR_MC1423C):=
		M_BYTE((Q_S01011_ROUND_DECIMAL
		(B_MC1422A_SUM_TO_MC1423D_SUM
			(E_MC1423C_RX_UL_VMS_1_SUM),
		B_MC1422A_SUM_TO_MC1423D_SUM
			(E_MC1423C_RX_UL_VMS_1_MES))));

		(E_MT_37_CTR_MC1423D):
		B_MC1422A_TO_MC1423D(E_MT_37_CTR_MC1423D):=
		M_BYTE((Q_S01011_ROUND_DECIMAL
		(B_MC1422A_SUM_TO_MC1423D_SUM
			(E_MC1423D_RX_UL_VMS_2_SUM),
		B_MC1422A_SUM_TO_MC1423D_SUM
			(E_MC1423D_RX_UL_VMS_2_MES))));
	  ELSE
	  ESAC;
	OD;
	OD;
	OD;
	OD;
    OD;
  OD;
		
END Q_S0800_UPDATE_MC1422X_MC1423X;
	  
/* START CRI 860176 */

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S01011_ROUND_DECIMAL                              */
/*                                                                    */
/*     PROGRAMMER: NAVNEETH                                           */
/*                                                                    */
/*     CREATION DATE: 11/08/11                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*      CALCULATE DIVISION FOR MC1422/23 COUNTER SERIES               */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_SUM       M_BYTE                           */
/*                      ZF_NBR_SUM   M_BYTE                           */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                                                                    */
/*     CALLED FROM:                                                   */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S01011_ROUND_DECIMAL : PROC (ZF_SUM M_LONG, ZF_NBR_SUM M_LONG)
			 RETURNS(M_LONG);
                         
DCL ZQ_TEMP,
    ZQ_TEMP1,ZQ_NBR_LONG LONG_INT;/*ZM_LONG_INT_BYTE;*/
DCL ZQ_REM LONG_INT ;
DCL ZQ_SUM LONG_INT;
DCL ZQ_NBR_SUM LONG_INT; 
DCL ZQ_ROUND M_LONG;

ZQ_SUM := LONG_INT((ZF_SUM));
ZQ_NBR_SUM := LONG_INT((ZF_NBR_SUM));

ZQ_TEMP := 0L;
ZQ_TEMP1 := 0L;
ZQ_REM := 0L;


   IF (ZQ_NBR_SUM /= 0L) 
  /* END FR:862087 */
   THEN
   ZQ_TEMP := (ZQ_SUM) / ZQ_NBR_SUM;
  ZQ_TEMP1 := (ZQ_SUM) REM ZQ_NBR_SUM;
 ZQ_TEMP1 := (ZQ_TEMP1 * 10L ) /ZQ_NBR_SUM;
    
    ZQ_REM:=ZQ_TEMP1 REM 10L;
     IF(ZQ_REM>=5L)
	THEN
       	ZQ_TEMP :=ZQ_TEMP+1L;
      FI;	
ZQ_ROUND := M_LONG((ZQ_TEMP)); 

  RETURN (ZQ_ROUND);
  ELSE
   RETURN (M_LONG((0)));
   FI;
  END Q_S01011_ROUND_DECIMAL;

/* END CRI 860176 */

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S02011_ROUND_DECIMAL_M_STA_DPVAL                  */
/*                                                                    */
/*     PROGRAMMER: PURNA                                              */
/*                                                                    */
/*     CREATION DATE: 11/08/11                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*      CALCULATE DIVISION FOR MC1422/23 COUNTER SERIES               */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_SUM       M_BYTE                           */
/*                      ZF_NBR_SUM   M_BYTE                           */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                                                                    */
/*     CALLED FROM:                                                   */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S02011_ROUND_DECIMAL_M_STA_DPVAL : PROC (ZF_SUM INT, ZF_NBR_SUM INT)
                         RETURNS(M_STA_DPVAL);

DCL ZQ_TEMP,
    ZQ_TEMP1,ZQ_REM INT ;
DCL ZQ_ROUND M_STA_DPVAL;


   ZQ_TEMP := 0;
   ZQ_TEMP1 := 0;
   ZQ_ROUND.B_HIGH :=0;
   ZQ_ROUND.B_LOW :=0;

    IF(ZF_SUM =ZS_FF)
     THEN
        ZQ_TEMP:=ZS_FF;
        RETURN (M_STA_DPVAL((ZQ_TEMP)));
    FI;
  /* BEGIN FR:862087 */
  /* IF (ZF_SUM /=0) */
   IF (ZF_NBR_SUM /= 0)
  /* END FR:862087 */
   THEN
   ZQ_TEMP := (ZF_SUM) / ZF_NBR_SUM;
   ZQ_TEMP1 := (ZF_SUM) REM ZF_NBR_SUM;
   ZQ_TEMP1 := (ZQ_TEMP1 * 10) / ZF_NBR_SUM;
   ZQ_REM:=ZQ_TEMP REM 10;
     IF(ZQ_TEMP1>=5)
        THEN
        ZQ_TEMP:=ZQ_TEMP+1;
      FI;
  ZQ_ROUND.B_LOW := ((ZQ_TEMP));
  ZQ_ROUND.B_HIGH := 0;
   RETURN (ZQ_ROUND);
  ELSE
   RETURN (M_STA_DPVAL(0));
   FI;
  END Q_S02011_ROUND_DECIMAL_M_STA_DPVAL;


/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0800_RESET_MC1422X_MC1423X                       */
/*                                                                    */
/*     PROGRAMMER: NAVNEETH                                           */
/*                                                                    */
/*     CREATION DATE: 11/08/11                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*      RESET THE  MC1422/23 COUNTER SERIES                           */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                                                                    */
/*                                                                    */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                                                                    */
/*     CALLED FROM:                                                   */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

 
Q_S0800_RESET_MC1422X_MC1423X : PROC();
  
DCL ZQ_COUNTER RANGE (E_MC1422A_RX_DL_VMS_NSAIC_SUM:
			E_MC1423D_RX_UL_VMS_2_MES);
DCL ZQ_CELL_IDX INT;
DO FOR ZQ_CELL_IDX :=1 TO CM_FY32_MAX_CELLS_PER_BSC;
  	DO WITH Z_T37_0_TEMP_PTR -> (ZM_CELL_INDEX_VALUE(ZQ_CELL_IDX));
	DO WITH B_CTRS_TEMP_MT_37;
	DO FOR ZQ_COUNTER := E_MC1422A_RX_DL_VMS_NSAIC_SUM TO 
			E_MC1423D_RX_UL_VMS_2_MES;
	CASE (ZQ_COUNTER) OF
	  (E_MC1422A_RX_DL_VMS_NSAIC_SUM):
	   B_MC1422A_SUM_TO_MC1423D_SUM(ZQ_COUNTER).B_LI:=ZS_FFFF;
	   B_MC1422A_SUM_TO_MC1423D_SUM(ZQ_COUNTER).B_HI:=ZS_FFFF;
	  (E_MC1422B_RX_DL_VMS_SAIC_SUM):
	   B_MC1422A_SUM_TO_MC1423D_SUM(ZQ_COUNTER).B_LI:=ZS_FFFF;
	   B_MC1422A_SUM_TO_MC1423D_SUM(ZQ_COUNTER).B_HI:=ZS_FFFF;
	 (E_MC1422C_RX_DL_VMS_1_SUM):
	   B_MC1422A_SUM_TO_MC1423D_SUM(ZQ_COUNTER).B_LI:=ZS_FFFF;
	   B_MC1422A_SUM_TO_MC1423D_SUM(ZQ_COUNTER).B_HI:=ZS_FFFF;
	 (E_MC1422D_RX_DL_VMS_2_SUM):
	   B_MC1422A_SUM_TO_MC1423D_SUM(ZQ_COUNTER).B_LI:=ZS_FFFF;
	   B_MC1422A_SUM_TO_MC1423D_SUM(ZQ_COUNTER).B_HI:=ZS_FFFF;
         
	 (E_MC1422A_RX_DL_VMS_NSAIC_MES):
	  B_MC1422A_SUM_TO_MC1423D_SUM(ZQ_COUNTER).B_LI:=ZS_FFFF;
	  B_MC1422A_SUM_TO_MC1423D_SUM(ZQ_COUNTER).B_HI:=ZS_FFFF;

         (E_MC1422B_RX_DL_VMS_SAIC_MES):
	  B_MC1422A_SUM_TO_MC1423D_SUM(ZQ_COUNTER).B_LI:=ZS_FFFF;
          B_MC1422A_SUM_TO_MC1423D_SUM(ZQ_COUNTER).B_HI:=ZS_FFFF;  

	(E_MC1422C_RX_DL_VMS_1_MES):
	  B_MC1422A_SUM_TO_MC1423D_SUM(ZQ_COUNTER).B_LI:=ZS_FFFF;
          B_MC1422A_SUM_TO_MC1423D_SUM(ZQ_COUNTER).B_HI:=ZS_FFFF;  
	(E_MC1422D_RX_DL_VMS_2_MES):
	  B_MC1422A_SUM_TO_MC1423D_SUM(ZQ_COUNTER).B_LI:=ZS_FFFF;
          B_MC1422A_SUM_TO_MC1423D_SUM(ZQ_COUNTER).B_HI:=ZS_FFFF;      

       	  (E_MC1423A_RX_UL_VMS_NSAIC_SUM):
	   B_MC1422A_SUM_TO_MC1423D_SUM(ZQ_COUNTER).B_LI:=ZS_FFFF;
	   B_MC1422A_SUM_TO_MC1423D_SUM(ZQ_COUNTER).B_HI:=ZS_FFFF;
	  (E_MC1423A_RX_UL_VMS_NSAIC_MES):
	   B_MC1422A_SUM_TO_MC1423D_SUM(ZQ_COUNTER).B_LI:=ZS_FFFF;
	   B_MC1422A_SUM_TO_MC1423D_SUM(ZQ_COUNTER).B_HI:=ZS_FFFF;
	 (E_MC1423B_RX_UL_VMS_SAIC_SUM):
	   B_MC1422A_SUM_TO_MC1423D_SUM(ZQ_COUNTER).B_LI:=ZS_FFFF;
	   B_MC1422A_SUM_TO_MC1423D_SUM(ZQ_COUNTER).B_HI:=ZS_FFFF;
	 (E_MC1423B_RX_UL_VMS_SAIC_MES):
	   B_MC1422A_SUM_TO_MC1423D_SUM(ZQ_COUNTER).B_LI:=ZS_FFFF;
	   B_MC1422A_SUM_TO_MC1423D_SUM(ZQ_COUNTER).B_HI:=ZS_FFFF;
         
	 (E_MC1423C_RX_UL_VMS_1_SUM):
	  B_MC1422A_SUM_TO_MC1423D_SUM(ZQ_COUNTER).B_LI:=ZS_FFFF;
	  B_MC1422A_SUM_TO_MC1423D_SUM(ZQ_COUNTER).B_HI:=ZS_FFFF;

         (E_MC1423C_RX_UL_VMS_1_MES):
	  B_MC1422A_SUM_TO_MC1423D_SUM(ZQ_COUNTER).B_LI:=ZS_FFFF;
          B_MC1422A_SUM_TO_MC1423D_SUM(ZQ_COUNTER).B_HI:=ZS_FFFF;  

	(E_MC1423D_RX_UL_VMS_2_SUM):
	  B_MC1422A_SUM_TO_MC1423D_SUM(ZQ_COUNTER).B_LI:=ZS_FFFF;
          B_MC1422A_SUM_TO_MC1423D_SUM(ZQ_COUNTER).B_HI:=ZS_FFFF;  
	(E_MC1423D_RX_UL_VMS_2_MES):
	  B_MC1422A_SUM_TO_MC1423D_SUM(ZQ_COUNTER).B_LI:=ZS_FFFF;
          B_MC1422A_SUM_TO_MC1423D_SUM(ZQ_COUNTER).B_HI:=ZS_FFFF;   


	  
	 ELSE
	ESAC;
      OD;
      OD;
      OD;
OD;	
END Q_S0800_RESET_MC1422X_MC1423X;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0411_RESET_VMC001X                       */
/*                                                                    */
/*     PROGRAMMER: xuny                                               */
/*                                                                    */
/*     CREATION DATE: 14/01/22                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*      RESET THE  VMC001x COUNTER  CR1098364 MC1408/MC1409 improv    */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                                                                    */
/*                                                                    */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                                                                    */
/*     CALLED FROM:                                                   */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
 
Q_S0411_RESET_VMC001X : PROC();
  

DCL ZQ_CELL_IDX INT;

DO FOR ZQ_CELL_IDX := 1 TO M_MAX_CELLS_PER_BSC;
  	DO WITH Z_T37_VMC_001_PTR -> (ZQ_CELL_IDX);
	     B_VMC001A := 0L;
	     B_VMC001B := 0L;
	     B_VMC001C := 0L;
	     B_VMC001D := 0L;
    OD;     
OD;

END Q_S0411_RESET_VMC001X;

/*END:CRI # 00823248.01*/
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0430_UPD_T180_CTRS                               */
/*                                                                    */
/*     PROGRAMMER: L. DIERICK  (KDC)                                  */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 98/08/17                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                 THIS PROCEDURE IS ENTERED WHEN A DATA TRANSFER     */
/*                 MESSAGE ARRIVES FROM AN LDC, CONTAINING THE        */
/*                 LATEST T180 CTR VALUES FOR THAT LDC.               */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LDC_LCE_ID M_LCE_ID,                       */
/*                      ZF_LDC_TYPE M_FMM_SELECTOR,                   */
/*                      ZF_LDC_SEQ_NBR M_BYTE,                        */
/*                      ZF_VALIDITY M_PM_DATA_VALIDITY,               */
/*                      ZF_LDC_BUF_PTR PTR                            */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0180_MEAS_TYPE_RUNNING                     */
/*                      Q_S0431_UPD_T180_INV_TCU                      */
/*                      Q_S0441_UPD_T180_TCU                          */
/*                      Q_S0134_LDC_ON_ACT_CE                         */
/*                      Q_S0426_SET_INVALID                           */
/*                      Q_S0432_UPD_T180_INV_TCHRM                    */
/*                      Q_S0442_UPD_T180_TCHRM                        */
/*                      Q_S0020_CCDC_ERROR                            */
/*     CALLED FROM:                                                   */
/*                      Q_S0670_PROCESS_POLLING_RESPONSE              */
/*                      Q_S0680_PROCESS_TIMER_EXPIRY                  */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0430_UPD_T180_CTRS : PROC(ZF_LDC_LCE_ID    M_LCE_ID,
                             ZF_LDC_TYPE      M_FMM_SELECTOR,
                             ZF_VALIDITY      M_PM_DATA_VALIDITY,
                             ZF_LDC_BUF_PTR   PTR);
DCL ZQ_ACT_IDX       INT;
DCL ZQ_ACT_CE        BOOL;
DCL ZQ_SET_INVALID   BOOL;
DCL ZQ_VALIDITY      M_PM_DATA_VALIDITY;

CASE ZF_LDC_TYPE OF
  (M_FS_TCU_TRF_LDC):
    IF Q_S0180_MEAS_TYPE_RUNNING(E_MT_TRAFFIC_FLOW, ZQ_ACT_IDX)
    THEN
      IF ZF_VALIDITY = E_DATA_INVALID
      THEN
        Q_S0431_UPD_T180_INV_TCU(ZF_LDC_LCE_ID);
      ELSE
        Q_S0441_UPD_T180_TCU(ZF_LDC_BUF_PTR);
      FI;
    FI;

  (M_FS_TCHRM_LDC):
    ZQ_ACT_CE := Q_S0134_LDC_ON_ACT_CE(ZF_LDC_LCE_ID);
    ZQ_SET_INVALID := Q_S0426_SET_INVALID(ZF_LDC_LCE_ID,
                                          ZF_LDC_TYPE,
                                          ZF_VALIDITY);


    ZQ_VALIDITY := ZF_VALIDITY;
    IF ZQ_SET_INVALID
    THEN
      ZQ_VALIDITY := E_DATA_INVALID;
    FI;
    IF Q_S0180_MEAS_TYPE_RUNNING(E_MT_TRAFFIC_FLOW, ZQ_ACT_IDX)
    THEN
      IF ZQ_ACT_CE OR ZF_VALIDITY = E_DATA_VALID_INCOMPLETE OR
         ZQ_SET_INVALID
      THEN
        IF ZQ_VALIDITY = E_DATA_INVALID
        THEN
          Q_S0432_UPD_T180_INV_TCHRM(ZF_LDC_LCE_ID);
        ELSE
          Q_S0442_UPD_T180_TCHRM(ZF_LDC_BUF_PTR);
        FI;
      FI;
    FI;

   ELSE
     /* INVALID LDC TYPE */
     Q_S0020_CCDC_ERROR(M_ERC6_USER_REC, M_ERT0019_INC_MESS_DATA,
                        10, 0194);
ESAC;

END Q_S0430_UPD_T180_CTRS;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0431_UPD_T180_INV_TCU                            */
/*                                                                    */
/*     PROGRAMMER: L. DIERICK  (KDC)                                  */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 98/08/18                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       ENTERED IF AN INVALID POLLING RESPONS FROM TCU. ALL INVOLVED */
/*       TARGET CELLS ARE CHECKED: IF LISTED, THE COUNTERS FOR THE    */
/*       SERVINGS CELLS LISTED ARE SET TO H'FE. IF NOT LISTED, A      */
/*       DUMMY SERVING CELL IS LISTED FOR THE NEW INSERTED TARGET     */
/*       CELL.                                                        */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LDC_LCE_ID M_LCE_ID                        */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0132_GET_CIS_FOR_TCU                       */
/*     CALLED FROM:                                                   */
/*                      Q_S0430_UPD_T180_CTRS                         */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0431_UPD_T180_INV_TCU : PROC(ZF_LDC_LCE_ID  M_LCE_ID);

DCL ZQ_IDX            RANGE(1:M_PM_MAX_CELLS_FOR_A_MEAS_JOB),
    ZQ_TRFL_IDX       INT,
    ZQ_CTR_IDX        ZM_180_COUNTERS,
    ZQ_NO_CELLS       BOOL,
    ZQ_TCU_CELL_LIST  ZM_CIS_PER_TCU;

ZQ_TCU_CELL_LIST := Q_S0132_GET_CIS_FOR_TCU(ZF_LDC_LCE_ID);
ZQ_NO_CELLS := TRUE;
DO FOR ZQ_IDX := 1 TO CM_FY32_MAX_CELLS_PER_TCU WHILE
                          ZQ_TCU_CELL_LIST(ZQ_IDX) /= M_NULL_CELL_IDX;

  ZQ_TRFL_IDX := ZQ_TCU_CELL_LIST(ZQ_IDX);
  IF Z_T180_1_PTR->.B_ACTIV_CELLS(ZQ_TRFL_IDX) /= M_NULL_CELL_IDX
  THEN
    ZQ_NO_CELLS := FALSE;
    DO WHILE ZQ_TRFL_IDX /= -1;
      DO FOR ZQ_CTR_IDX := E_C400_INC_HO_REQ TO E_C402_INC_HO_SUCC;
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
        Z_T180_2_PTR->
        (ZM_TRAFF_FLOW_LEN(ZQ_TRFL_IDX)) (ZQ_CTR_IDX).B_LOW  
                                                     := ZS_FFFE;
        Z_T180_2_PTR->
        (ZM_TRAFF_FLOW_LEN(ZQ_TRFL_IDX)) (ZQ_CTR_IDX).B_HIGH 
                                                     := ZS_FFFF;
      OD;
      ZQ_TRFL_IDX := Z_T180_1_PTR->.
                          B_NEXT(ZM_TRAFF_FLOW_LEN(ZQ_TRFL_IDX))
                                                   .B_NEXT_PAIR;
/* END: ADD-WIPRO-B10-MR1-CHANGE */
    OD;
  FI;
OD;
IF ZQ_NO_CELLS
THEN
  DO WITH Z_T180_1_PTR->;
    B_ACTIV_CELLS(1) := M_CELL_IDX(1);
    /* CHENZY B9 BEGIN */
    /*
    B_NEXT(1).B_SERV_CELL.B_LAC := ZS_DUMMY;
    B_NEXT(1).B_SERV_CELL.B_CI  := ZS_DUMMY;
    */
    B_NEXT(1L).B_SERV_CELL.B_CELL_ID_CGI := ZS_DUMMY_CGI;
    /* CHENZY B9 END */
  OD;
  DO FOR ZQ_CTR_IDX := E_C400_INC_HO_REQ TO E_C402_INC_HO_SUCC;
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
    Z_T180_2_PTR->(LONG_INT(1))(ZQ_CTR_IDX).B_LOW  := ZS_FFFE;
    Z_T180_2_PTR->(LONG_INT(1))(ZQ_CTR_IDX).B_HIGH := ZS_FFFF;
/* END: ADD-WIPRO-B10-MR1-CHANGE */
  OD;
FI;

END Q_S0431_UPD_T180_INV_TCU;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0432_UPD_T180_INV_TCHRM                          */
/*                                                                    */
/*     PROGRAMMER: L. DIERICK  (KDC)                                  */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 98/08/18                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       SETS THE TYPE 180 COUNTERS TO INVALID (= H'FE)               */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LDC_LCE_ID M_LCE_ID                        */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0120_GET_R_CONF_CE                         */
/*                      Q_S0126_GET_R_CELL_MGT_CELL                   */
/*     CALLED FROM:                                                   */
/*                      Q_S0430_UPD_T180_CTRS                         */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0432_UPD_T180_INV_TCHRM : PROC(ZF_LDC_LCE_ID  M_LCE_ID);

DCL ZQ_IDX            INT;
DCL ZQ_CELL_IDX       M_CELL_IDX;
DCL ZQ_LCE_ID         M_LCE_ID;
DCL ZQ_NO_CELLS       BOOL;

ZQ_LCE_ID := ZF_LDC_LCE_ID;
Q_S0120_GET_R_CONF_CE(ZF_LDC_LCE_ID);
IF ZF_LDC_LCE_ID > R_CONF_CE.D_MATE_LCE
THEN
  ZQ_LCE_ID := R_CONF_CE.D_MATE_LCE;
FI;
IF R_CONF_CE.D_CE_FUNCT /= E_CE_FUNCT_TEL_DTC
THEN
  ZQ_LCE_ID := M_LCE_ID_NULL;
FI;

ZQ_NO_CELLS := TRUE;
DO FOR ZQ_CELL_IDX :=1 TO CM_FY32_MAX_CELLS_PER_BSC;
  Q_S0126_GET_R_CELL_MGT_CELL(ZQ_CELL_IDX);

  IF ZQ_LCE_ID = M_LCE_ID_NULL OR
     ZQ_LCE_ID = R_CELL_MGT.D_TEL_CE
  THEN
    GET R_BTS_TEL WHERE (D_CELL_IDX = ZQ_CELL_IDX);
    IF R_BTS_TEL.D_BTS_TEL /= E_MS_NEQ
    THEN
      IF Z_T180_1_PTR->.B_ACTIV_CELLS(ZQ_CELL_IDX) /= M_NULL_CELL_IDX
      THEN
        ZQ_NO_CELLS := FALSE;
        ZQ_IDX := ZQ_CELL_IDX;
        DO WHILE ZQ_IDX /= -1;
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
          Z_T180_2_PTR->
             (ZM_TRAFF_FLOW_LEN(ZQ_IDX)) (E_C400_INC_HO_REQ).B_LOW
                  := ZS_FFFE;
          Z_T180_2_PTR->
             (ZM_TRAFF_FLOW_LEN (ZQ_IDX)) (E_C400_INC_HO_REQ).B_HIGH
                  := ZS_FFFF;
          ZQ_IDX := Z_T180_1_PTR->.B_NEXT(ZM_TRAFF_FLOW_LEN(ZQ_IDX))
                                           .B_NEXT_PAIR;
/* END: ADD-WIPRO-B10-MR1-CHANGE */
        OD;
      FI;
    FI;
  FI;
OD;
IF ZQ_NO_CELLS
THEN
  DO WITH Z_T180_1_PTR->;
    B_ACTIV_CELLS(1) := M_CELL_IDX(1);
    /* CHENZY B9 CHENZY */
    /*
    B_NEXT(1).B_SERV_CELL.B_LAC := ZS_DUMMY;
    B_NEXT(1).B_SERV_CELL.B_CI  := ZS_DUMMY;
    */
    B_NEXT(1L).B_SERV_CELL.B_CELL_ID_CGI := ZS_DUMMY_CGI;
    /* CHENZY B9 END */
  OD;
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
  Z_T180_2_PTR->(1L)(E_C400_INC_HO_REQ).B_LOW  := ZS_FFFE;
  Z_T180_2_PTR->(1L)(E_C400_INC_HO_REQ).B_HIGH := ZS_FFFF;
/* END: ADD-WIPRO-B10-MR1-CHANGE */
FI;

END Q_S0432_UPD_T180_INV_TCHRM;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0433_CHECK_INVALIDITY_T180                       */
/*                                                                    */
/*     PROGRAMMER: L. DIERICK  (KDC)                                  */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 99/09/15                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       CHECKS IF TYPE 180 COUNTERS ARE SET TO INVALID (= H'FE)      */
/*       IF SO, THE COUNTERS FOR THE VALID POLLING RESULTS SHOULD     */
/*       BE SET TO INVALID (= H'FE). A TCH/TCHRM DISTINCTION IS       */
/*       MADE BASED ON THE VALUES OF THE ACTUAL CELLS IN THE LIST     */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      ZM_ADD_CTRS                                   */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0441_UPD_T180_TCU                          */
/*                      Q_S0442_UPD_T180_TCHRM                        */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0433_CHECK_INVALIDITY_T180 : PROC ()
                                RETURNS (ZM_ADD_CTRS);

DCL ZQ_ADD_CTRS   ZM_ADD_CTRS;
DCL ZQ_CELL_IDX   M_CELL_IDX;
DCL ZQ_CTR_IDX    ZM_180_COUNTERS;

ZQ_ADD_CTRS := ZE_ALL_INV;
DO WITH Z_T180_1_PTR->;
  /* CHENZY B9 BEGIN */
  /*
  IF (B_NEXT(1).B_SERV_CELL.B_LAC = ZS_DUMMY AND
      B_NEXT(1).B_SERV_CELL.B_CI  = ZS_DUMMY)
  */
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
  IF (B_NEXT(1L).B_SERV_CELL.B_CELL_ID_CGI = ZS_DUMMY_CGI)
  /* CHENZY B9 END */
  THEN
    B_ACTIV_CELLS(1) := ZS_FFFF;
    B_NEXT(1L).B_SERV_CELL.B_LAC := ZS_FFFF;
    B_NEXT(1L).B_SERV_CELL.B_CI  := ZS_FFFF;
    DO WITH Z_T180_2_PTR->(1L)(E_C402_INC_HO_SUCC);
/* END: ADD-WIPRO-B10-MR1-CHANGE */
      IF (B_LOW = ZS_FFFE AND B_HIGH = ZS_FFFF)
      THEN
        ZQ_ADD_CTRS := ZE_ALL_INV;
      ELSE
        ZQ_ADD_CTRS := ZE_400_INV;
      FI;
    OD;
    DO FOR ZQ_CTR_IDX := E_C400_INC_HO_REQ TO E_C402_INC_HO_SUCC;
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
      Z_T180_2_PTR->(1L)(ZQ_CTR_IDX).B_LOW  := ZS_FFFF;
      Z_T180_2_PTR->(1L)(ZQ_CTR_IDX).B_HIGH := ZS_FFFF;
/* END: ADD-WIPRO-B10-MR1-CHANGE */
    OD;
  FI;
OD;

IF ZQ_ADD_CTRS = ZE_ALL_INV
THEN
  DO FOR ZQ_CELL_IDX :=1 TO CM_FY32_MAX_CELLS_PER_BSC;
    DO WITH Z_T180_1_PTR->;
      IF B_ACTIV_CELLS(ZQ_CELL_IDX) = ZQ_CELL_IDX
      THEN
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
        DO WITH Z_T180_2_PTR->(LONG_INT(ZQ_CELL_IDX))
                                  (E_C402_INC_HO_SUCC);
/* END: ADD-WIPRO-B10-MR1-CHANGE */
          IF (B_LOW /= ZS_FFFE AND B_HIGH /= ZS_FFFF) OR
             (B_LOW  = ZS_FFFF AND B_HIGH  = ZS_FFFF)
          THEN
            ZQ_ADD_CTRS := ZE_400_INV;
          FI;
        OD;
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
        DO WITH Z_T180_2_PTR->(LONG_INT(ZQ_CELL_IDX))
                                   (E_C400_INC_HO_REQ);
/* END: ADD-WIPRO-B10-MR1-CHANGE */
  /*      IF (B_LOW /= ZS_FFFE AND B_HIGH /= ZS_FFFF) ZQ3C */
          IF NOT (B_LOW = ZS_FFFE AND B_HIGH = ZS_FFFF)
          THEN
            ZQ_ADD_CTRS := ZE_ALL_VAL;
          FI;
        OD;
      FI;
    OD;
  OD;
FI;

RETURN (ZQ_ADD_CTRS);

END Q_S0433_CHECK_INVALIDITY_T180;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0440_INSERT_SERV_CELL                            */
/*                                                                    */
/*     PROGRAMMER: L. DIERICK  (KDC)                                  */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 98/08/17                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       INSERT OR UPDATE T180 CTRS AND THE CORRESPONDING SERVING CELL*/
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_TARG_CELL M_CELL_IDX,                      */
/*                      ZF_S_CELL_CTRS M_PM_RFM_T180_SERV_CTRS,       */
/*                      ZF_LDC_TYPE M_FMM_SELECTOR,                   */
/*                      ZF_ADD_CTRS ZM_ADD_CTRS                       */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0050_ADD_INT_TO_DPVAL                      */
/*                      Q_S0020_CCDC_ERROR                            */
/*     CALLED FROM:                                                   */
/*                      Q_S0441_UPD_T180_TCU                          */
/*                      Q_S0442_UPD_T180_TCHRM                        */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0440_INSERT_SERV_CELL : PROC(ZF_TARG_CELL   M_CELL_IDX,
                                ZF_S_CELL_CTRS M_PM_RFM_T180_SERV_CTRS,
                                ZF_LDC_TYPE    M_FMM_SELECTOR,
                                ZF_ADD_CTRS    ZM_ADD_CTRS);
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
DCL ZQ_IDX           LONG_INT;
DCL ZQ_STORED        LONG_INT;
/* END: ADD-WIPRO-B10-MR1-CHANGE */
DCL ZQ_CTR_IDX       ZM_180_COUNTERS;

/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
ZQ_IDX := ZM_CELL_INDEX_VALUE(ZF_TARG_CELL);
ZQ_STORED := 0L;


DO WHILE ZQ_IDX < ZS_MAX_180_CELLS AND ZQ_STORED = 0L;
/* END: ADD-WIPRO-B10-MR1-CHANGE */
  DO WITH Z_T180_1_PTR->.B_NEXT(ZQ_IDX).B_SERV_CELL;
    /* CHENZY B9 BEGIN */
    /*
    IF (B_CI  = ZF_S_CELL_CTRS.B_SERVING_CELL_ID.ZB_CI AND
        B_LAC = ZF_S_CELL_CTRS.B_SERVING_CELL_ID.ZB_LAC) OR
       (B_CI  = -1 AND B_LAC = -1) OR
       (B_CI  = ZS_DUMMY AND B_LAC = ZS_DUMMY)
    */
    IF (B_CELL_ID_CGI = 
               ZF_S_CELL_CTRS.B_SERVING_CELL_ID.B_CELL_ID_CGI) OR
       (B_CELL_ID_CGI = ZS_NULL_CGI) OR
       (B_CELL_ID_CGI = ZS_DUMMY_CGI)
    /* CHENZY B9 END */
    THEN
      /* CHENZY B9 BEGIN */
      /*
      B_CI  := ZF_S_CELL_CTRS.B_SERVING_CELL_ID.ZB_CI;
      B_LAC := ZF_S_CELL_CTRS.B_SERVING_CELL_ID.ZB_LAC;
      */
      B_CELL_ID_CGI := ZF_S_CELL_CTRS.B_SERVING_CELL_ID.B_CELL_ID_CGI;
      /* CHENZY B9 END */
      IF ZF_ADD_CTRS = ZE_ALL_INV
      THEN
        DO FOR ZQ_CTR_IDX := E_C400_INC_HO_REQ TO E_C402_INC_HO_SUCC;
          Z_T180_2_PTR->
           (ZQ_IDX)(ZQ_CTR_IDX).B_LOW  := ZS_FFFE;
          Z_T180_2_PTR->
           (ZQ_IDX)(ZQ_CTR_IDX).B_HIGH := ZS_FFFF;
        OD;
      ELSE
        IF ZF_ADD_CTRS = ZE_ALL_VAL
        THEN
          Q_S0050_ADD_INT_TO_DPVAL(
                      ZF_S_CELL_CTRS.B_C400_HO_REQ,
                      Z_T180_2_PTR->(ZQ_IDX)
		      (E_C400_INC_HO_REQ));

        ELSE
          Z_T180_2_PTR->(ZQ_IDX)
			(E_C400_INC_HO_REQ).B_LOW  := ZS_FFFE;
          Z_T180_2_PTR->(ZQ_IDX)
			(E_C400_INC_HO_REQ).B_HIGH := ZS_FFFF;
        FI;
        IF ZF_LDC_TYPE = M_FS_TCU_TRF_LDC
        THEN
          Q_S0050_ADD_INT_TO_DPVAL(
                        ZF_S_CELL_CTRS.B_C401_HO_ATPT,
                        Z_T180_2_PTR->(ZQ_IDX)
			(E_C401_INC_HO_ATPT));

          Q_S0050_ADD_INT_TO_DPVAL(
                        ZF_S_CELL_CTRS.B_C402_HO_SUCC,
                        Z_T180_2_PTR->(ZQ_IDX)
			(E_C402_INC_HO_SUCC));
        FI;
      FI;
      ZQ_STORED := ZQ_IDX;
    FI;
  OD;
  IF ZQ_STORED = 0L AND Z_T180_1_PTR->
				.B_NEXT(ZQ_IDX).B_NEXT_PAIR = -1
  THEN
    Z_T180_1_PTR->.B_NEXT(ZQ_IDX)
                   .B_NEXT_PAIR := Z_1ST_FREE;
    Z_1ST_FREE := Z_1ST_FREE + 1;

   /* IF Z_1ST_FREE >10300 */ 
    /*BEGIN: CR20/286418 - More incoming links per cell */
    IF Z_1ST_FREE >16000/*10918CR312499*/ 
    /*END: CR20/286418 - More incoming links per cell */
    THEN
      Q_S0020_CCDC_ERROR(M_ERC6_USER_REC,
                         M_ERT0019_INC_MESS_DATA, 26, 1187);
    FI;
  FI;
  ZQ_IDX := ZM_TRAFF_FLOW_LEN(Z_T180_1_PTR->
                .B_NEXT(ZQ_IDX).B_NEXT_PAIR);
OD;


END Q_S0440_INSERT_SERV_CELL;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0441_UPD_T180_TCU                                */
/*                                                                    */
/*     PROGRAMMER: L. DIERICK  (KDC)                                  */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 98/08/17                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       UPDATE TYPE 180 COUNTERS FROM THE TCU                        */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LDC_BUF_PTR PTR                            */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0020_CCDC_ERROR                            */
/*                      Q_S0433_CHECK_INVALIDITY_T180                 */
/*                      Q_S0440_INSERT_SERV_CELL                      */
/*     CALLED FROM:                                                   */
/*                      Q_S0430_UPD_T180_CTRS                         */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0441_UPD_T180_TCU: PROC(ZF_LDC_BUF_PTR   PTR);

DCL ZQ_T_CELL        M_CELL_IDX;
DCL ZQ_NBR_CELLS     INT;
DCL ZQ_S_CELL_IDX    INT;
/*START: DCT 649460 W.A.*/
/*DCL ZQ_SERV_CELL_PTR REF ARRAY(1:M_MAX_SERVING_CELLS)*/
DCL ZQ_SERV_CELL_PTR REF ARRAY(1:ZM_PM_MAX_SERVING_CELLS)
/*END: DCT 649460 W.A.*/
                                      M_PM_RFM_T180_SERV_CTRS;
DCL ZQ_RFM_UB_PTR    STRUCT(CASE OF
                              :ZB_PTR   PTR,
                              :ZB_OFF   INT,
                               ZB_SEQ   INT
                            ESAC);
DCL ZQ_ADD_CTRS      ZM_ADD_CTRS;

/*BEGIN: CR20/286418 - More incoming links per cell */
/*DO WITH ZF_LDC_BUF_PTR->M_PM_UB_T180;*/
DO WITH ZF_LDC_BUF_PTR->ZM_PM_UB_T180;
/*END: CR20/286418 - More incoming links per cell */
  ZQ_NBR_CELLS := B_NBR_CELLS;
OD;
IF ZQ_NBR_CELLS > CM_FY32_MAX_CELLS_PER_BSC OR
   ZQ_NBR_CELLS < 0
THEN
  /* OUT OF RANGE */
  ZQ_NBR_CELLS:=0;
  Q_S0020_CCDC_ERROR(M_ERC6_USER_REC,
                     M_ERT0019_INC_MESS_DATA, 24, 1187);
FI;

/*BEGIN: CR20/286418 - More incoming links per cell */
/*DO WITH ZF_LDC_BUF_PTR->M_PM_UB_T180;*/
DO WITH ZF_LDC_BUF_PTR->ZM_PM_UB_T180;
/*END: CR20/286418 - More incoming links per cell */
  PTR(ZQ_RFM_UB_PTR) := ->B_TRFFLW_DATA;
OD;

ZQ_ADD_CTRS := ZE_ALL_VAL;
DO WHILE ZQ_NBR_CELLS /= 0;
/*START: DCT 649460 W.A.*/
/*DO WITH PTR(ZQ_RFM_UB_PTR)->M_PM_RFM_UB_T180;*/
  DO WITH PTR(ZQ_RFM_UB_PTR)->ZM_PM_RFM_UB_T180;
/*END: DCT 649460 W.A.*/
    ZQ_T_CELL := B_TARGET_CELL_IDX;
    IF ZQ_T_CELL > CM_FY32_MAX_CELLS_PER_BSC OR
       ZQ_T_CELL < 0
    THEN
      /* OUT OF RANGE */
      Q_S0020_CCDC_ERROR(M_ERC6_USER_REC,
                         M_ERT0019_INC_MESS_DATA, 26, 1187);
      RETURN;
    FI;
    DO WITH Z_T180_1_PTR->;
      B_ACTIV_CELLS(ZQ_T_CELL) := ZQ_T_CELL;
    OD;
    ZQ_ADD_CTRS := Q_S0433_CHECK_INVALIDITY_T180 ();

    ZQ_SERV_CELL_PTR := ->B_SERV_CELLS_DATA;
    DO FOR ZQ_S_CELL_IDX := 1 TO B_NBR_SERVING_CELLS;

      Q_S0440_INSERT_SERV_CELL(ZQ_T_CELL,
                               ZQ_SERV_CELL_PTR->(ZQ_S_CELL_IDX),
                               M_FS_TCU_TRF_LDC,
                               ZQ_ADD_CTRS);
    OD;
    ZQ_NBR_CELLS := ZQ_NBR_CELLS - 1;
    IF ZQ_NBR_CELLS /= 0
    THEN
    LONG_INT(ZQ_RFM_UB_PTR) := 
    LONG_INT((ZQ_RFM_UB_PTR)) + EXTEND(4) +
    LONG_INT((B_NBR_SERVING_CELLS * SIZE(M_PM_RFM_T180_SERV_CTRS)));
    FI;
  OD;
OD;

END Q_S0441_UPD_T180_TCU;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0442_UPD_T180_TCHRM                              */
/*                                                                    */
/*     PROGRAMMER: L. DIERICK  (KDC)                                  */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 98/08/17                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       UPDATE TYPE 180 COUNTERS FROM THE TCHRM                      */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LDC_BUF_PTR PTR                            */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0020_CCDC_ERROR                            */
/*                      Q_S0433_CHECK_INVALIDITY_T180                 */
/*                      Q_S0440_INSERT_SERV_CELL                      */
/*     CALLED FROM:                                                   */
/*                      Q_S0430_UPD_T180_CTRS                         */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0442_UPD_T180_TCHRM: PROC(ZF_LDC_BUF_PTR   PTR);

DCL ZQ_TARG_CELL     M_CELL_IDX;
DCL ZQ_NBR_CELLS     INT;
DCL ZQ_S_CELL_IDX    INT;
/*START: DCT 649460 W.A.*/
/*DCL ZQ_SERV_CELL_PTR REF ARRAY(1:M_MAX_SERVING_CELLS)*/
DCL ZQ_SERV_CELL_PTR REF ARRAY(1:ZM_PM_MAX_SERVING_CELLS)
/*END: DCT 649460 W.A.*/
                                      M_PM_TCH_T180_SERV_CTRS;
DCL ZQ_SERV_CELLS    M_PM_RFM_T180_SERV_CTRS;
DCL ZQ_TCH_UB_PTR    STRUCT(CASE OF
                              :ZB_PTR   PTR,
                              :ZB_OFF   INT,
                               ZB_SEG   INT
                            ESAC);
DCL ZQ_ADD_CTRS      ZM_ADD_CTRS;


/*BEGIN: CR20/286418 - More incoming links per cell */
/*DO WITH ZF_LDC_BUF_PTR->M_PM_UB_T180;*/
DO WITH ZF_LDC_BUF_PTR->ZM_PM_UB_T180;
/*END: CR20/286418 - More incoming links per cell */
  ZQ_NBR_CELLS := B_NBR_CELLS;
OD;
IF ZQ_NBR_CELLS > CM_FY32_MAX_CELLS_PER_BSC OR
   ZQ_NBR_CELLS < 0
THEN
  /* OUT OF RANGE */
  ZQ_NBR_CELLS:=0;
  Q_S0020_CCDC_ERROR(M_ERC6_USER_REC,
                     M_ERT0019_INC_MESS_DATA, 27, 1187);
FI;

/*BEGIN: CR20/286418 - More incoming links per cell */
/*DO WITH ZF_LDC_BUF_PTR->M_PM_UB_T180;*/
DO WITH ZF_LDC_BUF_PTR->ZM_PM_UB_T180;
/*END: CR20/286418 - More incoming links per cell */
  PTR(ZQ_TCH_UB_PTR) := ->B_TRFFLW_DATA;
OD;

ZQ_ADD_CTRS := ZE_ALL_VAL;
DO WHILE ZQ_NBR_CELLS /= 0;
/*START: DCT 649460 W.A.*/
/*DO WITH PTR(ZQ_TCH_UB_PTR)->M_PM_TCH_UB_T180;*/
  DO WITH PTR(ZQ_TCH_UB_PTR)->ZM_PM_TCH_UB_T180;
/*END: DCT 649460 W.A.*/
    ZQ_TARG_CELL := B_TARGET_CELL_IDX;
    IF ZQ_TARG_CELL > CM_FY32_MAX_CELLS_PER_BSC OR
       ZQ_TARG_CELL < 0
    THEN
      /* OUT OF RANGE */
      Q_S0020_CCDC_ERROR(M_ERC6_USER_REC,
                         M_ERT0019_INC_MESS_DATA, 28, 1187);
      RETURN;
    FI;
    DO WITH Z_T180_1_PTR->;
      B_ACTIV_CELLS(ZQ_TARG_CELL) := ZQ_TARG_CELL;
    OD;
    ZQ_ADD_CTRS := Q_S0433_CHECK_INVALIDITY_T180 ();

    ZQ_SERV_CELL_PTR := ->B_SERV_CELLS_DATA;
    DO FOR ZQ_S_CELL_IDX := 1 TO B_NBR_SERVING_CELLS;
/*START:DCTPD00606274 OCPR CORE DUMP*/
      IF  ZQ_S_CELL_IDX>=1 AND ZQ_S_CELL_IDX<=700
         THEN                                                                        
      	   DO WITH ZQ_SERV_CELL_PTR->(ZQ_S_CELL_IDX);
            ZQ_SERV_CELLS.B_SERVING_CELL_ID := B_SERVING_CELL_ID;
            ZQ_SERV_CELLS.B_C400_HO_REQ     := B_C400_HO_REQ;
           OD;
     
         Q_S0440_INSERT_SERV_CELL(ZQ_TARG_CELL,
                               ZQ_SERV_CELLS,
                               M_FS_TCHRM_LDC,
                               ZQ_ADD_CTRS);
     FI;
/*STOP:DCTPD00606274 OCPR CORE DUMP*/

    OD;
    ZQ_NBR_CELLS := ZQ_NBR_CELLS - 1;

    IF ZQ_NBR_CELLS /= 0
    THEN
      LONG_INT(ZQ_TCH_UB_PTR) := 
        LONG_INT((ZQ_TCH_UB_PTR)) + EXTEND(4) + 
        LONG_INT((B_NBR_SERVING_CELLS * SIZE(M_PM_TCH_T180_SERV_CTRS)));
    FI;
  OD;
OD;

END Q_S0442_UPD_T180_TCHRM;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0595_UPDATE_CCI_ALERTER                          */
/*                                                                    */
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/10                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                 THIS PROCEDURE UPDATES THE ALERTER COUNTERS FROM   */
/*                 THE TCU LDC, THEY ARE KEPT ON A PER CELL BASIS     */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LDC_BUF_PTR PTR                            */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0020_CCDC_ERROR                            */
/*     CALLED FROM:                                                   */
/*                      Q_S0400_UPD_CCI_STD_CNTRS                     */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0595_UPDATE_CCI_ALERTER: PROC(ZF_LDC_BUF_PTR PTR);

DCL ZQ_NBR_ALERTER_SAMPLES INT,
    ZQ_CELL_CNT            INT,
    ZQ_CELL_FND            INT,
    ZQ_CI                  M_CELL_IDX,
    ZQ_AC                  M_ALERTER_CNTRS;      /* ALERTER COUNTER */

DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_STD_CTRS_AREA;
  ZQ_NBR_ALERTER_SAMPLES := B_NBR_CELLS;
OD;
IF ZQ_NBR_ALERTER_SAMPLES > CM_FY32_MAX_CELLS_PER_TCU OR
   ZQ_NBR_ALERTER_SAMPLES < 0
THEN
  /* OUT OF RANGE */
  ZQ_NBR_ALERTER_SAMPLES := 0;
  Q_S0020_CCDC_ERROR(M_ERC6_USER_REC,
                     M_ERT0019_INC_MESS_DATA, 50, 0194);
FI;

DO WHILE ZQ_NBR_ALERTER_SAMPLES /= 0;
  DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_STD_CTRS_AREA;
    DO WITH B_CELL_CNTRS(ZQ_NBR_ALERTER_SAMPLES);
      ZQ_CI        := B_CELL_IDX;

      ZQ_CELL_FND := 0;
      DO FOR ZQ_CELL_CNT := 1 TO CM_FY32_MAX_CELLS_PER_BSC
                                        WHILE ZQ_CELL_FND = 0;
        /* FIND THE CELL IN THE LIST OR FIRST FREE SPACE */
        IF (Z_CCI_ALERT(ZQ_CELL_CNT).B_CELL_IDX = ZQ_CI) OR
           (Z_CCI_ALERT(ZQ_CELL_CNT).B_CELL_IDX = M_NULL_CELL_IDX)
        THEN
          ZQ_CELL_FND := ZQ_CELL_CNT;
        FI;
      OD;

      IF ZQ_CELL_FND /= 0 THEN
        DO WITH Z_CCI_ALERT(ZQ_CELL_FND);
          Z_CCI_ALERT(ZQ_CELL_FND).B_CELL_IDX := ZQ_CI;
          ZQ_AC      := B_ALERTER_CNTRS;

          IF ZQ_AC = ZS_FFFF
          THEN
            /* IGNORE ALL CNT FOR CELL */
            B_TA_V := E_DATA_INVALID;

          ELSIF (ZQ_AC < 16384) AND (ZQ_AC >= 0) AND
                (B_TA_V /= E_DATA_INVALID)      THEN

            B_TA_V := E_DATA_VALID;
            B_ALERT_CNT := B_ALERT_CNT + ZQ_AC;

          ELSIF (ZQ_AC >= 16384) AND (B_TA_V /= E_DATA_INVALID) THEN

            B_TA_V := E_DATA_VALID_INCOMPLETE;
            ZQ_AC := ZQ_AC - 16384;
            B_ALERT_CNT := B_ALERT_CNT + ZQ_AC;
          FI;

        OD;
      FI;
    OD;
    ZQ_NBR_ALERTER_SAMPLES := ZQ_NBR_ALERTER_SAMPLES - 1;
  OD;
OD; /* DO WITH TCU_STD_CTRS_AREA */
END Q_S0595_UPDATE_CCI_ALERTER;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0596_CALC_ALERT_THRES                            */
/*                                                                    */
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/10                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                 THIS PROCEDURE ANALYSES THE ALERTER (TYPE 1)       */
/*                 COUNTERS AND INFORMS ALERTER FMM IF THRESHOLDS     */
/*                 ARE REACHED.                                       */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      0889_AH_LOCAL_ALARM_IND                       */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0660_DO_NEXT_POLL_ACTION                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      GET     R_AL_CLGBL                            */
/*                      GET     R_AL_CLDAT                            */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0596_CALC_ALERT_THRES: PROC();

/*
 * THE VALUES FOR ALL VALID CELLS ARE ADDED AND COMPARED AGAINST
 * A VLAUE IN R_AL_CLGBL MULTIPLIED BY NUMBER OF VALID CELLS.
 * IF THE NUMBER RECORDED DURING POLLING PERIOD IS LESS THAN
 * THIS THRESHOLD NO ACTION IS TAKEN
 * ELSE FOR EACH INDIVIDUAL CELL_IDX THE COUNTER IS COMPARED
 * TO A THRESHOLD VALUE IN R_CLDAT.D_AL1_THR1 IF
 * THE COUNTER IS GREATER THAN THIS THE ALARM IS RAISED
 *
 */

DCL ZQ_GBL_CELL_CNT   M_ALERTER_CNTRS,
    ZQ_NBR_CELLS      INT,
    ZQ_CELL_CNT       INT,
    ZQ_THR2_ALL_CELLS M_ALERTER_CNTRS,
    ZQ_LIST_END       BOOL,
    ZQ_THR2           INT,
    ZQ_THR1           INT,
    ZQ_ALARM_DATA     M_ALERTER_ALARM_DATA,
    ZQ_ALARM_IDX      INT;

 ZQ_LIST_END     := FALSE;
 ZQ_NBR_CELLS    := 0;
 ZQ_GBL_CELL_CNT := 0;
 ZQ_ALARM_IDX    := 1;

 DO FOR ZQ_CELL_CNT := 1 TO CM_FY32_MAX_CELLS_PER_BSC
        WHILE NOT(ZQ_LIST_END);

   DO WITH Z_CCI_ALERT(ZQ_CELL_CNT);

     IF (B_CELL_IDX = M_NULL_CELL_IDX) THEN
       ZQ_LIST_END := TRUE;
     ELSIF B_TA_V /= E_DATA_INVALID THEN
       ZQ_NBR_CELLS := ZQ_NBR_CELLS + 1;
       ZQ_GBL_CELL_CNT := ZQ_GBL_CELL_CNT + B_ALERT_CNT;
     FI;

   OD;
 OD;

 GET R_AL_CLGBL;

 ZQ_LIST_END := FALSE;
 ZQ_THR2 := R_AL_CLGBL.D_AL1_THR2;
 ZQ_THR2_ALL_CELLS := M_ALERTER_CNTRS(ZQ_THR2 * ZQ_NBR_CELLS);

 IF ZQ_GBL_CELL_CNT > ZQ_THR2_ALL_CELLS
 THEN
   DO FOR ZQ_CELL_CNT := 1 TO CM_FY32_MAX_CELLS_PER_BSC
                                     WHILE NOT(ZQ_LIST_END);
     DO WITH Z_CCI_ALERT(ZQ_CELL_CNT);
       IF (B_CELL_IDX = M_NULL_CELL_IDX)
       THEN
         ZQ_LIST_END := TRUE;
       ELSIF B_TA_V = E_DATA_VALID THEN
         GET R_AL_CLDAT WHERE (D_CELL_IDX = B_CELL_IDX);
         ZQ_THR1 := R_AL_CLDAT.D_AL1_THR1;
         IF B_ALERT_CNT < M_ALERTER_CNTRS(ZQ_THR1*1) THEN

           DO WITH ZQ_ALARM_DATA;
             B_ALERTER_TYPE := E_ALERTER_TYPE_1;
             DO WITH ZQ_ALARM_DATA.B_ALERTER_1_ALARM_DATA;
               B_THRESH_2 := R_AL_CLGBL.D_AL1_THR2;
               B_THRESH_1_ARY(ZQ_ALARM_IDX)  := R_AL_CLDAT.D_AL1_THR1;
               B_CELL_IDX_ARY(ZQ_ALARM_IDX) := B_CELL_IDX;

               IF (ZQ_ALARM_IDX = M_MAX_ALERTER_CELLS_TO_REPORT)
               THEN
                 B_TOTAL_CELLS := ZQ_ALARM_IDX;

                 TRANSMIT_BASIC_MSG
                   0889_AH_LOCAL_ALARM_IND(ZQ_ALARM_DATA)
                 TO (M_FS_CENTRAL_ALERTER);

                 ZQ_ALARM_IDX := 1;
               ELSE
                 ZQ_ALARM_IDX := ZQ_ALARM_IDX + 1;
               FI;
             OD;
           OD;
         FI;
       FI;
     OD;
   OD;

   IF ZQ_ALARM_IDX > 1 THEN               /* STILL ALARM DATA PENDING */

     ZQ_ALARM_DATA.B_ALERTER_1_ALARM_DATA.B_TOTAL_CELLS :=
                                                    ZQ_ALARM_IDX - 1;
     TRANSMIT_BASIC_MSG 0889_AH_LOCAL_ALARM_IND(ZQ_ALARM_DATA)
     TO (M_FS_CENTRAL_ALERTER);

   FI;
 FI;

END Q_S0596_CALC_ALERT_THRES;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0597_INIT_ALERTER_1                              */
/*                                                                    */
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/09/17                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       INITIALISE THE DATA ASSOCIATED WITH THE ALERTER 1 COUNTER    */
/*       CALCULATIONS. THIS IS FOR EVERY CELL IN THE BSC.             */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0600_START_OF_POLLING                      */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0597_INIT_ALERTER_1: PROC();

DCL ZQ_CELL_CNT  INT;

DO FOR ZQ_CELL_CNT := 1 TO CM_FY32_MAX_CELLS_PER_BSC;
  DO WITH Z_CCI_ALERT(ZQ_CELL_CNT);
    B_CELL_IDX:= M_NULL_CELL_IDX;
    B_TA_V:= E_DATA_VALID; /* FIX AT VALID AS THIS IS R4 STORY */
    B_ALERT_CNT:=0;
  OD;
OD;

END Q_S0597_INIT_ALERTER_1;

/***********************************************/
/* Q_S06XX LDC POLLING/AVAILABILITY PROCEDURES */
/***********************************************/
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0600_START_OF_POLLING                            */
/*                                                                    */
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/29                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                 THIS PROCEDURE IS ENTERED WHEN A POLLING REQUEST   */
/*                 HAS BEEN MADE BY MECO.                             */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0597_INIT_ALERTER_1                        */
/*                      Q_S0620_INIT_POLLING_PROCESSES                */
/*                      Q_S0175_MAKE_COMMON_CELL_LIST                 */
/*                      Q_S0176_MAKE_T26_CELL_LIST                    */
/*                      Q_S0652_GET_FREE_PROC_INST                    */
/*                      Q_S0660_DO_NEXT_POLL_ACTION                   */
/*     CALLED FROM:                                                   */
/*                      Q_S1000_CCDC_FSM                              */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0600_START_OF_POLLING: PROC();

DCL ZQ_PROC_NBR    ZM_PROC_NBR;
DCL ZQ_I           INT;


/* INITIALISE ALERTER TYPE 1 DATA */
Q_S0597_INIT_ALERTER_1();

/* INITIALISE THE POLLING STATE */
Q_S0620_INIT_POLLING_PROCESSES();

Q_S0175_MAKE_COMMON_CELL_LIST();
Q_S0176_MAKE_T26_CELL_LIST();

/* MAKE LIST ACTIVATED CELLS STD TYPES */
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
P_GDXBYX_CELL_LIST();
/* END: ADD-WIPRO-B10-MR1-CHANGE */

DO FOR ZQ_I := 1 TO 5;
  Z_VAL_MATE(ZQ_I) := ZS_INIT_VAL_MATE;
OD;

DO WHILE Q_S0652_GET_FREE_PROC_INST(ZQ_PROC_NBR);
  Q_S0660_DO_NEXT_POLL_ACTION(ZQ_PROC_NBR);
OD;

END Q_S0600_START_OF_POLLING;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0602_POLL_LDC                                    */
/*                                                                    */
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:   /  /   */
/*                                                                    */
/*     CREATION DATE: 17/11/97                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       THIS PROCEDURE IS ENTERED WHEN IT IS REQUIRED TO POLL AN     */
/*       LDCP. IT IS A PRECONDITION THAT THE LDCP NEEDS TO BE POLLED. */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_PROC_NBR ZM_PROC_NBR                       */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0608_STD_POLL_REQ                          */
/*                      Q_S0302_SEND_PM_POLLING                       */
/*                      Q_S0610_DETAIL_POLL_REQ                       */
/*                      Q_S0030_GET_USER_BUF                          */
/*                      Q_S0100_COPY_BLOCK_OF_MEMORY                  */
/*                      Q_S0310_SEND_1141_PM_POLLING                  */
/*                      Q_S0070_START_TIMER                           */
/*     CALLED FROM:                                                   */
/*                      Q_S0606_POLL_CURR_LDC                         */
/*                      Q_S0660_DO_NEXT_POLL_ACTION                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0602_POLL_LDC: PROC(ZF_PROC_NBR ZM_PROC_NBR);

DCL ZQ_USR_BUF_PTR PTR;
DCL ZQ_MSG_NUMBER  INT;
DCL ZQ_TC_ID       M_TC_ID;
DCL ZQ_MEAS_TYPE   M_MEAS_TYPE;

DO WITH Z_POLL_PROCESS(ZF_PROC_NBR);
  IF ZB_NB_ATTEMPTS = 0 THEN
    Q_S0920_UPDATE_POLL_REQS();
  FI;
  ZB_NB_ATTEMPTS := ZB_NB_ATTEMPTS + 1;
/*WIPRO:B10_MX_MR1 RT TRACE*/
/*Commented for CR36/288765*/
/* TRACEINFO := 'Polling Data                (%d)';
   TRC_BSC_BUF3(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(CLASS_PM), 
              LONG_INT(SUB_CLASS_PM_CCDC),
              TRACEID(NORM),
              ->Z_POLL_PROCESS,
              42);*/
/*Commented for CR36/288765*/
/*END WIPRO:B10_MX_MR1 RT TRACE*/

  IF Q_S0608_STD_POLL_REQ(ZB_POLL_STEP)
  THEN

    IF ZB_POLL_STEP /= ZE_POLL_DTC_STAN_TRX
      THEN
      ZQ_MSG_NUMBER := 193;
    ELSE
      ZQ_MSG_NUMBER := 1385;
    FI;
    Q_S0302_SEND_PM_POLLING(ZB_LCE_ID,
                            ZB_LDC_TYPE,
                            ZQ_MSG_NUMBER,
                            ZB_REF_NBR,
                            ZB_SEQ_NBR,
                            ZB_NB_ATTEMPTS);

  ELSIF Q_S0610_DETAIL_POLL_REQ(ZB_POLL_STEP)
  THEN
    /* IT IS PRECONDITION THAT THIS LDCP IS A CANDIATE TO
     * BE POLLED BEFORE THIS ROUTINE IS CALLED.
     */
    Q_S0030_GET_USER_BUF(ZQ_USR_BUF_PTR,
                       SIZE(ZM_UBUF_VA_SCOPE_MSG));

    DO WITH ZQ_USR_BUF_PTR->ZM_UBUF_VA_SCOPE_MSG;
      ZB_FMM_ID  := M_FI_CC_DATA_COLLECTOR;
      Q_S0100_COPY_BLOCK_OF_MEMORY(->Z_CELL_LIST,
                                   ->ZB_DATA,
                                   SIZE(Z_CELL_LIST));
    OD;

    Q_S0310_SEND_1141_PM_POLLING(ZB_LCE_ID,
                                 ZB_LDC_TYPE,
                                 ZB_REF_NBR,
                                 ZB_SEQ_NBR,
                                 ZQ_USR_BUF_PTR,
                                 ZB_NB_ATTEMPTS);
/* BEGIN FR:879393.01 */
/* BEGIN CR:949817    */
/*Q_S0040_RET_MEM(ZQ_USR_BUF_PTR);*/
/* END CR:949817    */
/* END FR:879393.01 */
  ELSIF ZB_POLL_STEP = ZE_POLL_TCU_T26
  THEN
    /* IT IS PRECONDITION THAT THIS LDCP IS A CANDIATE TO
     * BE POLLED BEFORE THIS ROUTINE IS CALLED.
     */
    Q_S0030_GET_USER_BUF(ZQ_USR_BUF_PTR,
                       SIZE(ZM_UBUF_VA_SCOPE_MSG));

    DO WITH ZQ_USR_BUF_PTR-> ZM_UBUF_VA_SCOPE_MSG;
      ZB_FMM_ID  := M_FI_CC_DATA_COLLECTOR;
      Q_S0100_COPY_BLOCK_OF_MEMORY(->Z_T26_CELL_LIST,
                                   ->ZB_DATA,
                                   SIZE(Z_T26_CELL_LIST));
    OD;

    Q_S0320_SEND_1407_PM_POLLING(ZB_LCE_ID,
                                 ZB_LDC_TYPE,
                                 ZB_REF_NBR,
                                 ZB_SEQ_NBR,
                                 ZQ_USR_BUF_PTR,
                                 ZB_NB_ATTEMPTS);
/* BEGIN FR:879393.01 */
/* BEGIN CR:949817    */
/*Q_S0040_RET_MEM(ZQ_USR_BUF_PTR);*/
/* END CR:949817    */
/* END FR:879393.01 */

  /* ADD IN MXB8 BEGIN */
  ELSIF Q_S0611_TP_POLL_REQ(ZB_POLL_STEP)
  THEN
   /* START : WIPRO B11 IP MR0 PKG1 */
   /* IF ( Z_POLL_STEP = ZE_POLL_TP_IPOE1 ) */
/*START : AUPOIP FEATURE */
    IF ( ZB_POLL_STEP = ZE_POLL_TP_AUPOIP_MGW_CTR1) 
     THEN
     Q_S0330_SEND_TP_PM_POLLING(ZB_LCE_ID,
                            ZB_REF_NBR,
                            3, 
			  /* SEQ NBR 3 FOR AUPOIP MGW  1-100 */
                            ZB_NB_ATTEMPTS);
    ELSE
/* START : 256 MGW IP Addresses */
      IF ( ZB_POLL_STEP = ZE_POLL_TP_AUPOIP_MGW_CTR2) 
      THEN
     Q_S0330_SEND_TP_PM_POLLING(ZB_LCE_ID,
                            ZB_REF_NBR,
                            4, 
			  /* SEQ NBR 4 FOR AUPOIP MGW 101-200 */
                            ZB_NB_ATTEMPTS);
    ELSE
    IF ( ZB_POLL_STEP = ZE_POLL_TP_AUPOIP_MGW_CTR3) 
     THEN
     Q_S0330_SEND_TP_PM_POLLING(ZB_LCE_ID,
                            ZB_REF_NBR,
                            5, 
			  /* SEQ NBR 3 FOR AUPOIP MGW 201-256 COUNTERS */
                            ZB_NB_ATTEMPTS);
    ELSE
    IF ( ZB_POLL_STEP = ZE_POLL_TP_AUPOIP_MGW_CTR4) 
     THEN
     Q_S0330_SEND_TP_PM_POLLING(ZB_LCE_ID,
                            ZB_REF_NBR,
                            6, 
			  /* SEQ NBR 3 FOR AUPOIP MGW 201-256 COUNTERS */
                            ZB_NB_ATTEMPTS);                            
    ELSE
    IF ( ZB_POLL_STEP = ZE_POLL_TP_AUPOIP_MGW_CTR5) 
     THEN
     Q_S0330_SEND_TP_PM_POLLING(ZB_LCE_ID,
                            ZB_REF_NBR,
                            7, 
			  /* SEQ NBR 3 FOR AUPOIP MGW 201-256 COUNTERS */
                            ZB_NB_ATTEMPTS);
    ELSE
    IF ( ZB_POLL_STEP = ZE_POLL_TP_AUPOIP_MGW_CTR6) 
     THEN
     Q_S0330_SEND_TP_PM_POLLING(ZB_LCE_ID,
                            ZB_REF_NBR,
                            8, 
			  /* SEQ NBR 3 FOR AUPOIP MGW 201-256 COUNTERS */
                            ZB_NB_ATTEMPTS);
    ELSE 
    IF ( ZB_POLL_STEP = ZE_POLL_TP_AUPOIP_TC_CTR) 
     THEN
     Q_S0330_SEND_TP_PM_POLLING(ZB_LCE_ID,
                            ZB_REF_NBR,
                            9, 
			  /* SEQ NBR 3 FOR AUPOIP  TC COUNTERS */
                            ZB_NB_ATTEMPTS);
    ELSE   
/* END : 256 MGW IP Addresses */      
 /* BEGIN : FR36/307843 */
    /*IF ( ZB_POLL_STEP = ZE_POLL_TP_AUPOIP_BTS_CTR )*/
    IF ( ZB_POLL_STEP = ZE_POLL_TP_AUPOIP_BTS_CTR_1 )
 /* END : FR36/307843 */
     THEN
      Q_S0330_SEND_TP_PM_POLLING(ZB_LCE_ID,
                            ZB_REF_NBR,
                            10, /* SEQ NBR 4 FOR AUPOIP BTS COUNTERS */
                            ZB_NB_ATTEMPTS);
    ELSE
 /* BEGIN : FR36/307843 */
     IF ( ZB_POLL_STEP = ZE_POLL_TP_AUPOIP_BTS_CTR_2 ) 
     THEN
      Q_S0330_SEND_TP_PM_POLLING(ZB_LCE_ID,
                            ZB_REF_NBR,
                            11, /* SEQ NBR 5 FOR AUPOIP BTS COUNTERS */
                            ZB_NB_ATTEMPTS);
    ELSE
 /* END : FR36/307843 */
/* END : AUPOIP FEATURE */
    IF ( ZB_POLL_STEP = ZE_POLL_TP_IPOE1 ) 
    THEN
     Q_S0330_SEND_TP_PM_POLLING(ZB_LCE_ID,
                            ZB_REF_NBR,
                            2, /* SEQ NBR 2 FOR IP Over E1 */
                            ZB_NB_ATTEMPTS);
    ELSE
    Q_S0330_SEND_TP_PM_POLLING(ZB_LCE_ID,
                            ZB_REF_NBR,
                            1, /* SEQ NBR 1 FOR HDLC */
                            ZB_NB_ATTEMPTS);
  /* ADD IN MXB8 END */
    FI;
   /* END : WIPRO B11 IP MR0 PKG1 */ 
/* BEGIN : FR36/307843 */
    FI;
/* END : FR36/307843 */
    FI;
    /* START : 256 MGW IP Addresses */ 
    FI;
    FI;
    FI; 
    FI;
    FI;
    FI;
    /* END : 256 MGW IP Addresses */  
    FI; 
/* BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE */
  ELSIF ZB_POLL_STEP = ZE_POLL_TC_MTP2 
  THEN
         ZQ_MEAS_TYPE := E_MT_NUMBER7;
         /*: for FR 3BKA36FBR224825*/
         /*START: FR CRI00596704*/
         /*ZB_TC_ID := Z_TC_ID;*/
         ZB_TC_ID := Z_TC_ID_MTP2;
         /*END: FR CRI00596704*/
         /*: for FR 3BKA36FBR224825*/
         Q_S3330_SEND_TC_PM_POLLING(ZB_LCE_ID,
                              ZF_PROC_NBR,
                              ZB_NB_ATTEMPTS,
                              ZB_SEQ_NBR,
                              ZQ_MEAS_TYPE);
 /* END: ADD-WIPRO-B10-MX-MR2-CHANGE */
 /* START : WIPRO B11 IP MR0 PKG1 */
  ELSIF ZB_POLL_STEP = ZE_POLL_TC_IP
  THEN
         ZQ_MEAS_TYPE := E_MT_IP;
         /*for FR 3BKA36FBR224825*/
         /*START: FR CRI00596704*/
         /*ZB_TC_ID := Z_TC_ID;*/
          ZB_TC_ID := Z_TC_ID_IP; 
         /*END: FR CRI00596704*/
         /*for FR 3BKA36FBR224825*/
         Q_S3330_SEND_TC_PM_POLLING(ZB_LCE_ID,
                              ZF_PROC_NBR,
                              ZB_NB_ATTEMPTS,
                              ZB_SEQ_NBR,
                              ZQ_MEAS_TYPE);

  ELSIF ZB_POLL_STEP = ZE_POLL_TCSL_MR 
  THEN
     Q_S0701_SEND_TCSL_PM_POLLING(ZB_LCE_ID,
                              ZB_REF_NBR,
                              ZB_NB_ATTEMPTS);

 /* END : WIPRO B11 IP MR0 PKG1 */
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */ 
  ELSIF ZB_POLL_STEP = ZE_POLL_M3UA_LM 
  THEN
     Q_S0702_SEND_M3UA_PM_POLLING(ZB_LCE_ID,
                              ZB_REF_NBR,
                              ZB_NB_ATTEMPTS);
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */                              
/*START: IURG FEATURE */ 
  ELSIF ZB_POLL_STEP = ZE_POLL_IURG 
  THEN
     Q_S0970_SEND_IURG_PM_POLLING(ZB_LCE_ID,
                              ZB_REF_NBR,
                              ZB_NB_ATTEMPTS);
/*END : IURG FEATURE */ 
 

 ELSIF ZB_POLL_STEP = ZE_POLL_TRAFFIC_FLOW
  THEN
    Q_S0302_SEND_PM_POLLING(ZB_LCE_ID,
                            ZB_LDC_TYPE,
                            1186,
                            ZB_REF_NBR,
                            ZB_SEQ_NBR,
                            ZB_NB_ATTEMPTS);


  ELSIF ZB_POLL_STEP = ZE_POLL_TCU_EME
  THEN
    Q_S0302_SEND_PM_POLLING(ZB_LCE_ID,
                            ZB_LDC_TYPE,
                            1440,
                            ZB_REF_NBR,
                            ZB_SEQ_NBR,
                            ZB_NB_ATTEMPTS);
	
  /* BEGIN: CR 605005 */
  ELSIF ZB_POLL_STEP = ZE_POLL_PM_CPI
  THEN
  
    Q_S0303_SEND_CPI_PM_POLLING(ZB_LCE_ID,
	                            ZB_LDC_TYPE);
	
	ZB_SERVICE_ID := M_MXPF_MPPMSPMCPUOVLD_SRVCODE;
							
  /* END: CR 605005 */
                            
  FI;

  /* SUPERVISE IT WITH A TIMER */
  /*for FR 3BKA36FBR224825*/
  IF ZB_POLL_STEP = ZE_POLL_TC_IP OR ZB_POLL_STEP = ZE_POLL_TC_MTP2
  THEN
      ZB_TIMER_ID := Q_S0070_START_TIMER(
                                  ZS_TC_RESPONSE_PERIOD_TENTHS,
                                  INT(ZF_PROC_NBR*1),
                                  ZB_REF_NBR,
                                  ZB_SEQ_NBR);

  /* BEGIN: CR 605005 */								    
								  
  ELSIF ZB_POLL_STEP = ZE_POLL_PM_CPI
  THEN
    IF ZB_NB_ATTEMPTS = 1
  
    THEN
      ZB_TIMER_ID := Q_S0070_START_TIMER(ZS_TIME_HW_AUDIT_REQ,
                                         INT(ZF_PROC_NBR*1),
                                         ZB_REF_NBR,
                                         ZB_SEQ_NBR);  
										 
	ELSE

      ZB_TIMER_ID := Q_S0070_START_TIMER(ZS_TIME_RETRY_HW_AUDIT_REQ,
                                         INT(ZF_PROC_NBR*1),
                                         ZB_REF_NBR,
                                         ZB_SEQ_NBR);
	FI;									 
  /* END: CR 605005 */
  
  ELSE
  /*for FR 3BKA36FBR224825*/
  ZB_TIMER_ID := Q_S0070_START_TIMER(
                                  ZS_LDC_RESPONSE_PERIOD_TENTHS,
                                  INT(ZF_PROC_NBR*1),
                                  ZB_REF_NBR,
                                  ZB_SEQ_NBR);
 /*for FR 3BKA36FBR224825*/                                  
 FI;
 /*for FR 3BKA36FBR224825*/
OD; /* DO WITH POLL PROCESS ENTRY */
END Q_S0602_POLL_LDC;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0606_POLL_CURR_LDC                               */
/*                                                                    */
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:   /  /   */
/*                JP QUINN                             98/01/09       */
/*                                                                    */
/*     CREATION DATE: 17/11/97                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION: THE POLL SLOT ENTRY SPECIFIES A LDC    */
/*       WHICH IS CURRENTLY BEING POLLED. WE MUST RESTART THE TIMER   */
/*       TO GUARD THE RESPONSE AND SEND OUT ANOTHER POLL REQUEST MSG  */
/*       COMPLYING WITH THE POLL WINDOW SIZE.                         */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_PROC_NBR ZM_PROC_NBR                       */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0602_POLL_LDC                              */
/*                      Q_S0070_START_TIMER                           */
/*     CALLED FROM:                                                   */
/*                      Q_S0670_PROCESS_POLLING_RESPONSE              */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0606_POLL_CURR_LDC: PROC   (ZF_PROC_NBR ZM_PROC_NBR);

DO WITH Z_POLL_PROCESS(ZF_PROC_NBR);
  /* POLL THE LDCP FOR THE NEXT */
  ZB_SEQ_NBR := ZB_SEQ_NBR + 1;
  ZB_TC_ACK_RCVD := FALSE;
/* START : WIPRO B11 IP MR0 PKG1 */
  ZB_TC_IP_ACK_RCVD := FALSE;
/* END : WIPRO B11 IP MR0 PKG1 */
  /*WIPRO:B10_MX_MR1 RT TRACE*/
  /*Commented for CR36/288765*/
  /*TRACEINFO := 'POLL again for current ldc  (%d)';
    TRC_BSC_BUF3(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(CLASS_PM),
              LONG_INT(SUB_CLASS_PM_CCDC),
              TRACEID(NORM),
              ->Z_POLL_PROCESS,
              42); */ 
  /*Commented for CR36/288765*/
  /*END WIPRO:B10_MX_MR1 RT TRACE*/
  Q_S0602_POLL_LDC(ZF_PROC_NBR);
OD;

END Q_S0606_POLL_CURR_LDC;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0608_STD_POLL_REQ                                */
/*                                                                    */
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:   /  /   */
/*                                                                    */
/*     CREATION DATE: 17/11/97                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION: LOOKING AT THE CURRENT POLL STEP AND   */
/*       THE LCE ID WE MUST DETERMINE IF A POLLING REQUEST IS TO BE   */
/*       MADE.                                                        */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_POLL_STEP ZM_CCDC_POLL_SEQ                 */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0602_POLL_LDC                              */
/*                      Q_S0670_PROCESS_POLLING_RESPONSE              */
/*                      Q_S0680_PROCESS_TIMER_EXPIRY                  */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0608_STD_POLL_REQ: PROC   (ZF_POLL_STEP ZM_CCDC_POLL_SEQ)
                      RETURNS(BOOL);

 CASE ZF_POLL_STEP OF

   (ZE_POLL_DTC_STANDARD,
    ZE_POLL_DTC_STAN_TRX,
    ZE_POLL_TCU_STANDARD,
  /*ZE_POLL_DTC_N7_STANDARD,DEL IN MXB8*/
    ZE_POLL_TCH_STANDARD,
    ZE_POLL_CPR_N7_STANDARD,
    ZE_POLL_X25_STANDARD,
    ZE_POLL_SMS_STANDARD):
     RETURN(TRUE);

   ELSE
     RETURN(FALSE);

 ESAC;

END Q_S0608_STD_POLL_REQ;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0610_DETAIL_POLL_REQ                             */
/*                                                                    */
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:   /  /   */
/*                                                                    */
/*     CREATION DATE: 17/11/97                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION: LOOKING AT THE CURRENT POLL STEP AND   */
/*       THE LCE ID WE MUST DETERMINE IF A POLLING REQUEST IS TO BE   */
/*       MADE, FOR DETAILED POLLING WE MUST READ THE CELL LIST.       */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_POLL_STEP ZM_CCDC_POLL_SEQ                 */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0602_POLL_LDC                              */
/*                      Q_S0670_PROCESS_POLLING_RESPONSE              */
/*                      Q_S0680_PROCESS_TIMER_EXPIRY                  */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0610_DETAIL_POLL_REQ: PROC   (ZF_POLL_STEP ZM_CCDC_POLL_SEQ)
                         RETURNS(BOOL);

 CASE ZF_POLL_STEP OF

   (ZE_POLL_DTC_DETAIL,
    ZE_POLL_TCU_DETAIL):

     RETURN(TRUE);

   ELSE
     RETURN(FALSE);

 ESAC;

END Q_S0610_DETAIL_POLL_REQ;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0611_TP_POLL_REQ                                 */
/*                                                                    */
/*     PROGRAMMER: CHEN ZHANGYI  (ASB)                                */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:   /  /   */
/*                                                                    */
/*     CREATION DATE: 29/10/04                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION: CHECK THE POLL STEP FOR TP BOARD       */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_POLL_STEP ZM_CCDC_POLL_SEQ                 */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0602_POLL_LDC                              */
/*                      Q_S0670_PROCESS_POLLING_RESPONSE              */
/*                      Q_S0680_PROCESS_TIMER_EXPIRY                  */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0611_TP_POLL_REQ: PROC (ZF_POLL_STEP ZM_CCDC_POLL_SEQ)
                         RETURNS(BOOL);

 CASE ZF_POLL_STEP OF

   (ZE_POLL_TP_N7,
    ZE_POLL_TP_HDLC,
    /*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE */
    ZE_POLL_OMCP_N7,
    /*END: ADD-WIPRO-B10-MX-MR2-CHANGE */
/* START : WIPRO B11 IP MR0 PKG1 */
    ZE_POLL_TP_IPOE1,
/* END : WIPRO B11 IP MR0 PKG1 */
/*START : AUPOIP FEATURE */
/* START : 256 MGW IP Addresses ./
    ZE_POLL_TP_AUPOIP_MGW_TC_CTR,
/. CHG : 256 MGW IP Addresses */
    ZE_POLL_TP_AUPOIP_MGW_CTR1,
    ZE_POLL_TP_AUPOIP_MGW_CTR2,
    ZE_POLL_TP_AUPOIP_MGW_CTR3,
    ZE_POLL_TP_AUPOIP_MGW_CTR4,
    ZE_POLL_TP_AUPOIP_MGW_CTR5,
    ZE_POLL_TP_AUPOIP_MGW_CTR6,
    ZE_POLL_TP_AUPOIP_TC_CTR,
/* END : 256 MGW IP Addresses */    
/* BEGIN FR36/307843 */
  /*ZE_POLL_TP_AUPOIP_BTS_CTR*/
    ZE_POLL_TP_AUPOIP_BTS_CTR_1,
    ZE_POLL_TP_AUPOIP_BTS_CTR_2
/* END : FR36/307843 */
/* END : AUPOIP FEATURE */
    ):

     RETURN(TRUE);

   ELSE
     RETURN(FALSE);

 ESAC;

END Q_S0611_TP_POLL_REQ;


/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0612_LDC_AVAILABLE                               */
/*                                                                    */
/*     PROGRAMMER: J.P. QUINN   (KDC)                                 */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/27                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       RE-ACTIVATE JOBS ON AN LDC THAT HAS BECOME AVAILABLE. THIS   */
/*       IS APPLICABLE TO THE TCU AND BSSAP DTCS.                     */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LDC_LCE_ID M_LCE_ID,                       */
/*                      ZF_LDC_TYPE M_FMM_SELECTOR                    */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      1089_PM_LDC_DER_AVAIL                         */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0180_MEAS_TYPE_RUNNING                     */
/*                      Q_S0155_GET_CELL_SCOPE                        */
/*                      Q_S0300_SEND_MSG_1070_TO_LDC                  */
/*     CALLED FROM:                                                   */
/*                      Q_S1000_CCDC_FSM                              */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0612_LDC_AVAILABLE: PROC(ZF_LDC_LCE_ID M_LCE_ID,
                            ZF_LDC_TYPE   M_FMM_SELECTOR);

DCL ZQ_ACT_IDX      INT,
    ZQ_CELL_LIST    M_PM_DET_CELL_LIST;

IF ZF_LDC_TYPE=M_FS_DTC_TRF_LDC
THEN
  /* CHENZY B9 BEGIN */
  /* T26 COUNTERS HAS BEEN MOVED FROM DTC TO TCU IN B8 */
  /*
  IF Q_S0180_MEAS_TYPE_RUNNING(E_MT_HANDOVER_PER_SERVINGCELL,
                               ZQ_ACT_IDX)
  THEN */
    /* USE IS MADE HERE OF R_PM_ACT CALL IN LAST ROUTINE */
  /*Q_S0155_GET_CELL_SCOPE(ZQ_ACT_IDX,
                           ZQ_CELL_LIST);*/

    /* THERE IS ONLY ONE CELL SO FILL IT IN */
  /*Q_S0300_SEND_MSG_1070_TO_LDC(E_MT_HANDOVER_PER_SERVINGCELL,
                                 TRUE,
                                 ZQ_CELL_LIST(1),
                                 ZF_LDC_LCE_ID,
                                 ZF_LDC_TYPE);
  FI;*/
  /* CHENZY B9 END */
  
  IF Q_S0180_MEAS_TYPE_RUNNING(E_MT_HANDOVER_PER_TARGETCELL,
                               ZQ_ACT_IDX)
  THEN
    Q_S0155_GET_CELL_SCOPE(ZQ_ACT_IDX,
                           ZQ_CELL_LIST);

    /* THERE IS ONLY ONE CELL SO FILL IT IN */
    Q_S0300_SEND_MSG_1070_TO_LDC(E_MT_HANDOVER_PER_TARGETCELL,
                                 TRUE,
                                 ZQ_CELL_LIST(1),
                                 ZF_LDC_LCE_ID,
                                 ZF_LDC_TYPE);
  FI;
FI;

/* THE DER HANDLER WORRIES ABOUT DER JOBS */
IF Q_S0180_MEAS_TYPE_RUNNING(E_MT_OBSERVATION_SDCCH, ZQ_ACT_IDX)     OR
   Q_S0180_MEAS_TYPE_RUNNING(E_MT_RADIO_TIMESLOT_OBSERV, ZQ_ACT_IDX) OR
   Q_S0180_MEAS_TYPE_RUNNING(E_MT_OBSERVATION_TCH, ZQ_ACT_IDX)       OR
   Q_S0180_MEAS_TYPE_RUNNING(E_MT_INTERN_HDOVER_OBSERV, ZQ_ACT_IDX)  OR
   Q_S0180_MEAS_TYPE_RUNNING(E_MT_INCOM_HDOVER_OBSERV, ZQ_ACT_IDX)   OR
   Q_S0180_MEAS_TYPE_RUNNING(E_MT_OUTG_HDOVER_OBSERV, ZQ_ACT_IDX)
THEN
  TRANSMIT_BASIC_MSG 1089_PM_LDC_DER_AVAIL (ZF_LDC_LCE_ID,
                                            ZF_LDC_TYPE)
                    TO (M_FS_DER_RESULTS_HANDLER);
FI;

END Q_S0612_LDC_AVAILABLE;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0620_INIT_POLLING_PROCESSES                      */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/18                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       INITIALISES THE GLOBAL VARIABLES USED TO MAINTAIN THE POLLING*/
/*       PROGRESS AND POSITION.                                       */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0650_FREE_PROC_INST                        */
/*     CALLED FROM:                                                   */
/*                      Q_S0600_START_OF_POLLING                      */
/*                      Q_S0900_PERFORM_SYSTEM_START_UP               */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0620_INIT_POLLING_PROCESSES: PROC();

DCL ZQ_PROC_NBR ZM_PROC_NBR;

Z_POLL_STEP:=ZE_NO_POLL;

/* INITIALISE THE POLLING STATE */
DO FOR ZQ_PROC_NBR := 1 TO ZS_MAX_PARA_POLL;
  Q_S0650_FREE_PROC_INST(ZQ_PROC_NBR);
OD;
                                                          
IF Z_POLLING_INFO(ZE_NBR_POLL_REQTS).B_HIGH = ZS_FFFF THEN
/* STILL AT LEAST SOME 65000 POLLINGS POSSIBLE IF THIS CONDITION
   IS NOT SATISFIED. OTHERWISE: RESET COUNTERS TO ASSURE THEY
   ARE NOT RESET DURING POLLING */
  Q_S0940_RESET_POLL_REPLIES();
FI;

END Q_S0620_INIT_POLLING_PROCESSES;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0625_POLLING_COMPLETE                            */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/18                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       IS POLLING COMPLETE?                                         */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0630_GET_NEXT_LDCP_TO_POLL                 */
/*                      Q_S0635_GET_NEXT_POLL_STEP                    */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0625_POLLING_COMPLETE: PROC()
                          RETURNS(BOOL);

RETURN (Z_POLL_STEP = ZE_POLL_COMPLETE);

END Q_S0625_POLLING_COMPLETE;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0630_GET_NEXT_LDCP_TO_POLL                       */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       GETS THE NEXT LDCP TO POLL GIVEN THE CURRENT "POLL STEP".    */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_PROC_NBR ZM_PROC_NBR                       */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0625_POLLING_COMPLETE                      */
/*                      Q_S0635_GET_NEXT_POLL_STEP                    */
/*                      Q_S0190_LCE_IT                                */
/*                      Q_S0185_DTC_IN_JOBS_SCOPE                     */
/*                      Q_S0180_TCU_IN_JOBS_SCOPE                     */
/*                      Q_S0658_FILL_PROC_INST_DATA                   */
/*     CALLED FROM:                                                   */
/*                      Q_S0660_DO_NEXT_POLL_ACTION                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0630_GET_NEXT_LDCP_TO_POLL: PROC(ZF_PROC_NBR ZM_PROC_NBR)
                               RETURNS(BOOL);

DCL ZQ_LDC_TYPE  M_FMM_SELECTOR,
    ZQ_POLL_STEP ZM_CCDC_POLL_SEQ,
    ZQ_LCE_ID    M_LCE_ID;

ZQ_LDC_TYPE:=M_FS_DUMMY;

/* SEARCH FOR AN LDCP OR UNTIL THIS IS THE LAST LDCP TO POLL */
DO WHILE NOT Q_S0625_POLLING_COMPLETE() AND
         ZQ_LDC_TYPE =M_FS_DUMMY;

  ZQ_POLL_STEP:=Q_S0635_GET_NEXT_POLL_STEP(ZQ_LCE_ID);

  /* CHECK IF IN TRAFFIC BEFORE POLLING */
  IF (ZQ_LCE_ID/=M_LCE_ID_NULL)
  THEN
   IF (ZQ_POLL_STEP /= ZE_POLL_TP_N7)
     AND (ZQ_POLL_STEP /= ZE_POLL_TP_HDLC)
/* START : WIPRO B11 IP MR0 PKG1 */
     AND (ZQ_POLL_STEP /= ZE_POLL_TP_IPOE1)
/*START : AUPOIP FEATURE */
     AND (ZQ_POLL_STEP /= ZE_POLL_TP_AUPOIP_MGW_CTR1)
/* START : 256 MGW IP Addresses */
     AND (ZQ_POLL_STEP /= ZE_POLL_TP_AUPOIP_MGW_CTR2)
     AND (ZQ_POLL_STEP /= ZE_POLL_TP_AUPOIP_MGW_CTR3)
     AND (ZQ_POLL_STEP /= ZE_POLL_TP_AUPOIP_MGW_CTR4)
     AND (ZQ_POLL_STEP /= ZE_POLL_TP_AUPOIP_MGW_CTR5)
     AND (ZQ_POLL_STEP /= ZE_POLL_TP_AUPOIP_MGW_CTR6)
     AND (ZQ_POLL_STEP /= ZE_POLL_TP_AUPOIP_TC_CTR)
/* END : 256 MGW IP Addresses */     
/* BEGIN : FR36/307843 */
    /* AND (ZQ_POLL_STEP /= ZE_POLL_TP_AUPOIP_BTS_CTR)*/
     AND (ZQ_POLL_STEP /= ZE_POLL_TP_AUPOIP_BTS_CTR_1)
     AND (ZQ_POLL_STEP /= ZE_POLL_TP_AUPOIP_BTS_CTR_2)
/* END : AUPOIP FEATURE */
   /**/
     AND (ZQ_POLL_STEP /= ZE_POLL_TCSL_MR)
  /**/ 
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */  
     AND (ZQ_POLL_STEP /= ZE_POLL_M3UA_LM)
/*START: IURG FEATURE */
     AND (ZQ_POLL_STEP /= ZE_POLL_IURG)
/*END: IURG FEATURE */
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */     
/* END : WIPRO B11 IP MR0 PKG1 */
/* BEGIN: ADD-WIPRO-B10-ER865-CHANGE */
     /*ER6839 begin*/
    /*AND (ZQ_POLL_STEP /= ZE_POLL_X25_STANDARD)*/
     /*ER6839 end*/
/* END: ADD-WIPRO-B10-ER865-CHANGE */
     AND Q_S0190_LCE_IT(ZQ_LCE_ID)
    /*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE*/
     AND (ZQ_POLL_STEP /=ZE_POLL_OMCP_N7)
   /*END: ADD-WIPRO-B10-MX-MR2-CHANGE*/
/*BEGIN: ADD BY YUANXIAL DCTPD01089109*/
     AND (ZQ_POLL_STEP /=ZE_POLL_PM_CPI)
   /*END: ADD BY YUANXIAL  DCTPD01089109*/
   THEN
    CASE ZQ_POLL_STEP OF
      (ZE_POLL_DTC_STANDARD):
        ZQ_LDC_TYPE := M_FS_DTC_TRF_LDC;
      (ZE_POLL_DTC_STAN_TRX):
        ZQ_LDC_TYPE := M_FS_DTC_TRF_LDC;
      (ZE_POLL_DTC_DETAIL):
        IF Q_S0185_DTC_IN_JOBS_SCOPE(ZQ_LCE_ID)
        THEN
          ZQ_LDC_TYPE := M_FS_DTC_TRF_LDC;
        FI;
      (ZE_POLL_TCU_STANDARD):
        ZQ_LDC_TYPE := M_FS_TCU_TRF_LDC;
      (ZE_POLL_TCU_DETAIL,
       ZE_POLL_TCU_T26):
        /* ONLY POLL IF CELL LIST S APPLICABLE IS THE LDCP POLLED.*/
        IF Q_S0180_TCU_IN_JOBS_SCOPE(ZQ_LCE_ID)
        THEN
          ZQ_LDC_TYPE := M_FS_TCU_TRF_LDC;
        FI;
    /*(ZE_POLL_DTC_N7_STANDARD):
        ZQ_LDC_TYPE := M_FS_DTC_N_7_LDC; DEL IN MXB8 */
      (ZE_POLL_TCH_STANDARD):
        ZQ_LDC_TYPE := M_FS_TCHRM_LDC;
      (ZE_POLL_CPR_N7_STANDARD):
        ZQ_LDC_TYPE := M_FS_CPR_N_7_LDC;
      (ZE_POLL_X25_STANDARD):
        ZQ_LDC_TYPE := M_FS_LME_X25;
      (ZE_POLL_SMS_STANDARD):
        ZQ_LDC_TYPE := M_FS_SMS_CB_MASTER;
      (ZE_POLL_TRAFFIC_FLOW):
        IF R_CONF_CE.D_CE_FUNCT = E_CE_FUNCT_TCU
        THEN
          ZQ_LDC_TYPE := M_FS_TCU_TRF_LDC;
        ELSE
          ZQ_LDC_TYPE := M_FS_TCHRM_LDC;
        FI;
      (ZE_POLL_TCU_EME):
        ZQ_LDC_TYPE := M_FS_TCU_TRF_LDC;
      /*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE*/       
      /* START : WIPRO B11 IP MR0 PKG1 */
      (ZE_POLL_TC_MTP2, ZE_POLL_TC_IP):
      /* END : WIPRO B11 IP MR0 PKG1 */
        ZQ_LDC_TYPE := M_FS_TC_MGT;
      /*END: ADD-WIPRO-B10-MX-MR2-CHANGE*/       
      /* START : WIPRO B11 IP MR0 PKG1 */
      /*(ZE_POLL_TCSL_MR): */
      /* SRINIVAS : YET TO DETERMINE TYPE */
      /* ZQ_LDC_TYPE := M_FS_TCU_TRF_LDC; */
      /* END : WIPRO B11 IP MR0 PKG1 */
      ELSE
        /* SOFTWARE ERROR */
        ZQ_LDC_TYPE:=M_FS_DUMMY;
    ESAC;
   ELSIF ((ZQ_POLL_STEP = ZE_POLL_TP_N7)
/* START : WIPRO B11 IP MR0 PKG1 */
         /*OR (ZQ_POLL_STEP = ZE_POLL_TP_HDLC))*/
         OR (ZQ_POLL_STEP = ZE_POLL_TP_HDLC)
         OR (ZQ_POLL_STEP = ZE_POLL_TP_IPOE1)
	/*START : AUPOIP FEATURE */
 	 OR (ZQ_POLL_STEP = 
		ZE_POLL_TP_AUPOIP_MGW_CTR1)
/* START : 256 MGW IP Addresses */
   OR (ZQ_POLL_STEP = 
		ZE_POLL_TP_AUPOIP_MGW_CTR2)
		OR (ZQ_POLL_STEP = 
		ZE_POLL_TP_AUPOIP_MGW_CTR3)
		OR (ZQ_POLL_STEP = 
		ZE_POLL_TP_AUPOIP_MGW_CTR4)
		OR (ZQ_POLL_STEP = 
		ZE_POLL_TP_AUPOIP_MGW_CTR5)
		OR (ZQ_POLL_STEP = 
		ZE_POLL_TP_AUPOIP_MGW_CTR6)
		OR (ZQ_POLL_STEP = 
		ZE_POLL_TP_AUPOIP_TC_CTR)
/* END : 256 MGW IP Addresses */
/* BEGIN : FR36/307843 */
 /* OR (ZQ_POLL_STEP = ZE_POLL_TP_AUPOIP_BTS_CTR)*/
         OR (ZQ_POLL_STEP = ZE_POLL_TP_AUPOIP_BTS_CTR_1)
         OR (ZQ_POLL_STEP = ZE_POLL_TP_AUPOIP_BTS_CTR_2)
/* END : FR36/307843 */
	/* END : AUPOIP FEATURE */
	  )
/* END : WIPRO B11 IP MR0 PKG1 */
         AND Q_S0195_TP_IT()
   THEN
     ZQ_LDC_TYPE := M_FMM_SELECTOR(ZQ_LCE_ID-1000);
   ELSIF (ZQ_POLL_STEP = ZE_POLL_OMCP_N7) 
   THEN
    ZQ_LDC_TYPE := M_FMM_SELECTOR(ZQ_LCE_ID-1000);
   /**/
   /* START : WIPRO B11 IP MR0 PKG1 */
   ELSIF (ZQ_POLL_STEP = ZE_POLL_TCSL_MR) 
   THEN
    ZQ_LDC_TYPE := M_FMM_SELECTOR(ZQ_LCE_ID-1000);
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */    
   ELSIF (ZQ_POLL_STEP = ZE_POLL_M3UA_LM) 
   THEN
    ZQ_LDC_TYPE := M_FMM_SELECTOR(ZQ_LCE_ID-1000);    
/*START:IURG FEATURE */
   ELSIF (ZQ_POLL_STEP = ZE_POLL_IURG) 
   THEN
    ZQ_LDC_TYPE := M_FMM_SELECTOR(ZQ_LCE_ID-1000);    
/*END : IURG FEATURE */
/* BEGIN: CR 605005 */
  ELSIF (ZQ_POLL_STEP = ZE_POLL_PM_CPI) 
   THEN
      ZQ_LDC_TYPE := M_FS_CPI;
  FI;
/* END: CR 605005 */   
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */   
   /* END : WIPRO B11 IP MR0 PKG1 */
   /**/   
   
  FI; /* IS LCE IN TRAFFIC */
OD; /* DO WHILE END OF POLLING NOT FOUND */

/*BEGIN: ADD BY YUANXIAL  DCTPD01089109*/
   TRACEINFO := 'LDCTYPE POLLSTEP LCEID(%d %d %d)';
   TRC_BSC_PM3(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCDC),
              TRACEID(NORM),
              TRACEINFO,
              LONG_INT((ZQ_LDC_TYPE)),
              LONG_INT((ZQ_POLL_STEP)),
              LONG_INT((ZQ_LCE_ID)));
/*END: ADD BY YUANXIAL  DCTPD01089109*/

/* FILL IN THE POLL SLOT FOR THE ONE FOUND */
IF ZQ_LDC_TYPE/=M_FS_DUMMY
THEN
  Q_S0658_FILL_PROC_INST_DATA(ZF_PROC_NBR,
                              ZQ_POLL_STEP,
                              ZQ_LDC_TYPE,
                              ZQ_LCE_ID);

  /* FOR TEST PURPOSES */
  Z_CURR_LDC_TYPE:=ZQ_LDC_TYPE;
FI; /* LDCP FOUND */

RETURN (ZQ_LDC_TYPE/=M_FS_DUMMY);
END Q_S0630_GET_NEXT_LDCP_TO_POLL;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0635_GET_NEXT_POLL_STEP                          */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/18                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       GET THE NEXT POLLING TYPE TO POLL WITH THE LCE ID.           */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LCE_ID M_LCE_ID LOC                        */
/*     RETURNED VALUE:                                                */
/*                      ZM_CCDC_POLL_SEQ                              */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0625_POLLING_COMPLETE                      */
/*                      Q_S0146_GET_R_CONF_CE                         */
/*     CALLED FROM:                                                   */
/*                      Q_S0630_GET_NEXT_LDCP_TO_POLL                 */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0635_GET_NEXT_POLL_STEP: PROC(ZF_LCE_ID M_LCE_ID LOC)
                          RETURNS(ZM_CCDC_POLL_SEQ);

DCL ZQ_NEW_POLL_STEP BOOL;

ZF_LCE_ID:=M_LCE_ID_NULL;
ZQ_NEW_POLL_STEP :=FALSE;

IF (Z_POLL_STEP=ZE_NO_POLL)
  /* ADD IN MXB8 BEGIN */
  OR (Z_POLL_STEP=ZE_POLL_TP_N7)
  OR (Z_POLL_STEP=ZE_POLL_TP_HDLC)
/* START : WIPRO B11 IP MR0 PKG1 */
  OR (Z_POLL_STEP=ZE_POLL_TP_IPOE1)
/*START : AUPOIP FEATURE */
  OR (Z_POLL_STEP= ZE_POLL_TP_AUPOIP_MGW_CTR1)
/* START : 256 MGW IP Addresses */
  OR (Z_POLL_STEP= ZE_POLL_TP_AUPOIP_MGW_CTR2)
  OR (Z_POLL_STEP= ZE_POLL_TP_AUPOIP_MGW_CTR3)
  OR (Z_POLL_STEP= ZE_POLL_TP_AUPOIP_MGW_CTR4)
  OR (Z_POLL_STEP= ZE_POLL_TP_AUPOIP_MGW_CTR5)
  OR (Z_POLL_STEP= ZE_POLL_TP_AUPOIP_MGW_CTR6)
  OR (Z_POLL_STEP= ZE_POLL_TP_AUPOIP_TC_CTR)
/* END : 256 MGW IP Addresses */  
/* BEGIN : FR36/307843 */
 /* OR (Z_POLL_STEP= ZE_POLL_TP_AUPOIP_BTS_CTR)*/
  OR (Z_POLL_STEP= ZE_POLL_TP_AUPOIP_BTS_CTR_1)
  OR (Z_POLL_STEP= ZE_POLL_TP_AUPOIP_BTS_CTR_2)
/* END : FR36/307843 */
/* END : AUPOIP FEATURE */
/*for FR 3BKA36FBR224825*/
/*OR (Z_POLL_STEP=ZE_POLL_TC_IP)*/
/*for FR 3BKA36FBR224825*/
  OR (Z_POLL_STEP=ZE_POLL_TCSL_MR)
/* END : WIPRO B11 IP MR0 PKG1 */
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
 OR (Z_POLL_STEP=ZE_POLL_M3UA_LM)
/*START:IURG FEATURE */
 OR (Z_POLL_STEP=ZE_POLL_IURG)
/*END : IURG FEATURE*/
 /* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
/*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE*/
/*for FR 3BKA36FBR224825*/
/*START: CR36/274715*/
/*START FR:855330.01*/
/*  OR (Z_POLL_STEP=ZE_POLL_TC_MTP2)*/
/*END FR:855330.01*/  
/*END: CR36/274715*/
/*for FR 3BKA36FBR224825*/ 
  OR (Z_POLL_STEP=ZE_POLL_OMCP_N7)
/*END: ADD-WIPRO-B10-MX-MR2-CHANGE*/
  /* BEGIN: ADD-WIPRO-B10-ER865-CHANGE */
  OR (Z_POLL_STEP=ZE_POLL_X25_STANDARD)
/* END: ADD-WIPRO-B10-ER865-CHANGE */
  /* ADD IN MXB8 END */
  /* BEGIN: CR 605005 */
  OR (Z_POLL_STEP = ZE_POLL_PM_CPI)
  /* END: CR 605005 */
THEN
  /* THIS IS THE BEGINNING OF POLLING */
  Z_POLL_STEP := SUCC(Z_POLL_STEP);
  ZQ_NEW_POLL_STEP :=TRUE;
FI;
/*START: FR CRI00596704*/
IF (Z_POLL_STEP=ZE_POLL_TC_IP)
 THEN
   ZQ_NEW_POLL_STEP :=TRUE;
FI;
/*END: FR CRI00596704*/
/*START FR:855330_01*/
IF (Z_POLL_STEP=ZE_POLL_TC_MTP2)
 THEN
   ZQ_NEW_POLL_STEP :=TRUE;
FI;
/*END FR:855330_01*/
DO WHILE NOT Q_S0625_POLLING_COMPLETE() AND
         ZF_LCE_ID=M_LCE_ID_NULL;

  ZF_LCE_ID := Q_S0146_GET_R_CONF_CE(ZQ_NEW_POLL_STEP, Z_POLL_STEP);

  /* LCE NOT FOUND FOR THIS POLL STEP SO GET THE NEXT POLL STEP */
  IF ZF_LCE_ID=M_LCE_ID_NULL
  THEN
    /* GET THE NEXT TYPE */
    Z_POLL_STEP := SUCC(Z_POLL_STEP);
    ZQ_NEW_POLL_STEP :=TRUE;
  ELSE
    ZQ_NEW_POLL_STEP:=FALSE;
    /*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE*/
    IF Q_S0636_CHK_IF_POLL_NOT_REQD()
    THEN
      Z_POLL_STEP := SUCC(Z_POLL_STEP);
      ZQ_NEW_POLL_STEP :=TRUE;
      ZF_LCE_ID:=M_LCE_ID_NULL;
    FI;
    /*END: ADD-WIPRO-B10-MX-MR2-CHANGE*/
  FI;
OD;

RETURN (Z_POLL_STEP);
END Q_S0635_GET_NEXT_POLL_STEP;

/*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE*/

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0636_CHK_IF_POLL_NOT_REQD                        */
/*                                                                    */
/*     PROGRAMMER:                                                    */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE:                                                 */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                                                                    */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*     PRIMITIVES CALLED:                                             */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0636_CHK_IF_POLL_NOT_REQD: PROC()
                          RETURNS(BOOL);
DCL ZQ_POLL_NOT_REQD BOOL;
DCL ZQ_T INT;
DCL ZQ_BSS_TRANS_MODE M_BSS_TRANSPORT_MODE;
DCL ZQ_BSS_IP BOOL;
DCL ZQ_SPECIFIC_PM_FLAG BOOL;

ZQ_BSS_IP := FALSE;
ZQ_POLL_NOT_REQD := FALSE;
GET R_BSC_INFO;

DO FOR ZQ_T := 1 TO ZS_MAX_RETRY WHILE
  DB_PARMS.B_DB_STATUS = M_DB_TUPHELD;
  Q_S0010_WAIT_BEFORE_RETRYING(ZS_WAIT_TIME_DB);
  GET R_BSC_INFO;
OD;

IF DB_PARMS.B_DB_STATUS = M_DB_SUCCESS
THEN
  IF R_BSC_INFO.D_BSS_MODE = M_BSS_TRANSPORT_MODE_IP  
  THEN
      ZQ_BSS_IP := TRUE;
  FI;
FI;
CASE Z_POLL_STEP OF
/* START : WIPRO B11 IP MR0 PKG1 */
 (ZE_POLL_TC_MTP2, ZE_POLL_TC_IP):
/* END : WIPRO B11 IP MR0 PKG1 */
   IF NOT ZQ_BSS_IP 
   THEN
     ZQ_POLL_NOT_REQD := TRUE;
   ELSE
     Z_TC_POLL_FIRST := TRUE;   
/*WIPRO:BEGIN ER-1643 TC-PM-DATA-REQ not reach to TC*/
     IF NOT (Q_S0147_GET_R_TC_MGT())
     THEN
       ZQ_POLL_NOT_REQD :=TRUE; 
     FI;
/*WIPRO:END ER-1643 TC-PM-DATA-REQ not reach to TC*/
   FI;  
 (ZE_POLL_OMCP_N7):
 /*CR20/237798*/
 IF NOT Q_S0637_CHK_ASIG_ACTIVE() THEN
 /*CR20/237798*/
   IF NOT ZQ_BSS_IP 
   THEN
     ZQ_POLL_NOT_REQD := TRUE;
   FI;
 /*CR20/237798*/  
 ELSE
   ZQ_POLL_NOT_REQD := TRUE;
 FI;
 /*CR20/237798*/  
 (ZE_POLL_TP_N7):
 /*CR20/237798*/
 IF NOT Q_S0637_CHK_ASIG_ACTIVE() THEN
 /*CR20/237798*/
   IF ZQ_BSS_IP 
   THEN
     ZQ_POLL_NOT_REQD := TRUE;
   FI;
 /*CR20/237798*/  
 ELSE
   ZQ_POLL_NOT_REQD := TRUE;
 FI;
 /*CR20/237798*/          
/* START : WIPRO B11 IP MR0 PKG1 */
 (ZE_POLL_TP_IPOE1):
   IF NOT ZQ_BSS_IP
   THEN
     ZQ_POLL_NOT_REQD := TRUE;
   FI;
/*START : AUPOIP FEATURE */
 (ZE_POLL_TP_AUPOIP_MGW_CTR1):
IF NOT  R_BSS_PAR2.D_EN_AUOIP
  THEN
    ZQ_POLL_NOT_REQD := TRUE;
 FI;
 /* START : 256 MGW IP Addresses */
  (ZE_POLL_TP_AUPOIP_MGW_CTR2):
IF NOT  R_BSS_PAR2.D_EN_AUOIP
  THEN
    ZQ_POLL_NOT_REQD := TRUE;
 FI;
  (ZE_POLL_TP_AUPOIP_MGW_CTR3):
IF NOT  R_BSS_PAR2.D_EN_AUOIP
  THEN
    ZQ_POLL_NOT_REQD := TRUE;
 FI;
 (ZE_POLL_TP_AUPOIP_MGW_CTR4):
IF NOT  R_BSS_PAR2.D_EN_AUOIP
  THEN
    ZQ_POLL_NOT_REQD := TRUE;
 FI;
 (ZE_POLL_TP_AUPOIP_MGW_CTR5):
IF NOT  R_BSS_PAR2.D_EN_AUOIP
  THEN
    ZQ_POLL_NOT_REQD := TRUE;
 FI;
 (ZE_POLL_TP_AUPOIP_MGW_CTR6):
IF NOT  R_BSS_PAR2.D_EN_AUOIP
  THEN
    ZQ_POLL_NOT_REQD := TRUE;
 FI;
  (ZE_POLL_TP_AUPOIP_TC_CTR):
IF NOT  R_BSS_PAR2.D_EN_AUOIP
  THEN
    ZQ_POLL_NOT_REQD := TRUE;
 FI;
/* END : 256 MGW IP Addresses */
/* BEGIN : FR36/307843 */
/* (ZE_POLL_TP_AUPOIP_BTS_CTR):*/
(ZE_POLL_TP_AUPOIP_BTS_CTR_1):
/* END : FR36/307843 */
IF NOT  R_BSS_PAR2.D_EN_AUOIP
  THEN
    ZQ_POLL_NOT_REQD := TRUE;
 FI;
/* BEGIN : FR36/307843 */
(ZE_POLL_TP_AUPOIP_BTS_CTR_2):
IF NOT  R_BSS_PAR2.D_EN_AUOIP
  THEN
    ZQ_POLL_NOT_REQD := TRUE;
 FI;
/* END : FR36/307843 */
  /* END : AUPOIP FEATURE */

 (ZE_POLL_TCSL_MR):
   IF NOT ZQ_BSS_IP
   THEN
     ZQ_POLL_NOT_REQD := TRUE;
   FI;
/* END : WIPRO B11 IP MR0 PKG1 */ 
 (ZE_POLL_M3UA_LM):
    IF NOT Q_S0637_CHK_ASIG_ACTIVE()
    THEN
     ZQ_POLL_NOT_REQD := TRUE;
    FI; 
/*to be checked how to identify the A-signalling is active*/     
/*START: IURG FEATURE */
 (ZE_POLL_IURG):
    IF NOT Q_S0971_CHK_IURG_ACTIVE()
    THEN
     ZQ_POLL_NOT_REQD := TRUE;
 /*to be checked to identify the if  IURG is active*/     
    FI;

/* CR605005 NEW CHANGE - BEGIN */
 (ZE_POLL_PM_CPI):
    IF NOT  R_BSS_PAR2.D_EN_SP_PM
    THEN
     
      Z_AUDIT_STAT := ZE_PM_CPI_AUDIT_IDLE;

      ZQ_POLL_NOT_REQD := TRUE;
    FI; 
/* CR605005 NEW CHANGE - END */

  ELSE
   ZQ_POLL_NOT_REQD := FALSE;
   
ESAC;
RETURN (ZQ_POLL_NOT_REQD);      
END Q_S0636_CHK_IF_POLL_NOT_REQD;  
/*END: ADD-WIPRO-B10-MX-MR2-CHANGE*/                   
/*ADDED FOR GSL COUNTERS MEMO*/
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE:  Q_S0637_CHK_ASIG_ACTIVE                            */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                                                                    */
/*                                                                    */
/*     RETURNED VALUE:                                                */
/*                                                                    */
/*     PROCEDURE CALLED:                                              */
/*                                                                    */
/*     CALLED FROM:                                                   */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0637_CHK_ASIG_ACTIVE:PROC () RETURNS(BOOL);

DCL ZQ_T INT;

GET R_BSS_PAR2;

DO FOR ZQ_T := 1 TO ZS_MAX_RETRY WHILE
  DB_PARMS.B_DB_STATUS = M_DB_TUPHELD;
  Q_S0010_WAIT_BEFORE_RETRYING(ZS_WAIT_TIME_DB);
  GET R_BSS_PAR2;
OD;

IF DB_PARMS.B_DB_STATUS = M_DB_SUCCESS
THEN
  IF R_BSS_PAR2.D_EN_AOIP = TRUE  
  THEN
     RETURN TRUE;
  ELSE
     RETURN FALSE;
  FI;
FI;
RETURN FALSE;
END Q_S0637_CHK_ASIG_ACTIVE;
/*ADDED FOR GSL COUNTERS MEMO*/
/* START : IURG FEATURE */
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE:  Q_S0637_CHK_IURG_ACTIV                             */
/*                                                                    */
/*     PROGRAMMER: AMITABH                                            */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*     CHECKS IF IURG IS ACIVE (ADDED FOR IURG FEATURE)               */
/*     PARAMETERS:                                                    */
/*                                                                    */
/*                                                                    */
/*     RETURNED VALUE:                                                */
/*                                                                    */
/*     PROCEDURE CALLED:                                              */
/*                                                                    */
/*     CALLED FROM:                                                   */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0971_CHK_IURG_ACTIVE : PROC () RETURNS(BOOL);

DCL ZQ_T INT;

GET R_BSS_PAR2;

DO FOR ZQ_T := 1 TO ZS_MAX_RETRY WHILE
  DB_PARMS.B_DB_STATUS = M_DB_TUPHELD;
  Q_S0010_WAIT_BEFORE_RETRYING(ZS_WAIT_TIME_DB);
  GET R_BSS_PAR2;
OD;

IF DB_PARMS.B_DB_STATUS = M_DB_SUCCESS
THEN
  IF R_BSS_PAR2.D_EN_IURG = TRUE  
  THEN
     RETURN TRUE;
  ELSE
     RETURN FALSE;
  FI;
FI;
RETURN FALSE;
END Q_S0971_CHK_IURG_ACTIVE;
/*END : IURG FEATURE */
/*ADDED FOR GSL COUNTERS MEMO*/
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0650_FREE_PROC_INST                              */
/*                                                                    */
/*     PROGRAMMER: J.P. QUINN                                         */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 15/11/97                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       MARK THE ELEMENTS OF A POLL SLOT ITEM WITH NULL VALUES.      */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_PS ZM_PROC_NBR                             */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0620_INIT_POLLING_PROCESSES                */
/*                      Q_S0670_PROCESS_POLLING_RESPONSE              */
/*                      Q_S0680_PROCESS_TIMER_EXPIRY                  */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0650_FREE_PROC_INST: PROC (ZF_PS ZM_PROC_NBR);

 Z_POLL_PROCESS(ZF_PS) := ZS_NULL_PROC_INST;

END Q_S0650_FREE_PROC_INST;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0652_GET_FREE_PROC_INST                          */
/*                                                                    */
/*     PROGRAMMER: J.P. QUINN                                         */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 17/11/97                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       SEARCH THE GLOBAL DATA STRUCTURE Z_POLL_PROCESS              */
/*      (CURRENT POLL STATE) FOR A FREE ENTRY. ONCE FOUND THE SLOT    */
/*      POSITION IS RETURNED AND THE LCE_ID AND REFERENCE NBR FILLED  */
/*                                                                    */
/*      NOTE: THE REFERENCE NUMBER USED FOR THE POLLING MESSAGE IS    */
/*            THE LDC ID MULTIPLIED BY THE SLOT POSITION.             */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_PS ZM_PROC_NBR LOC                         */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0600_START_OF_POLLING                      */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0652_GET_FREE_PROC_INST: PROC(ZF_PS     ZM_PROC_NBR LOC)
                       RETURNS (BOOL);

DCL ZQ_PROC_NBR_CNT ZM_PROC_NBR;

DO FOR ZQ_PROC_NBR_CNT := 1 TO ZS_MAX_PARA_POLL;
  DO WITH Z_POLL_PROCESS(ZQ_PROC_NBR_CNT);
    IF ZB_LCE_ID = M_LCE_ID_NULL
    THEN
      ZB_REF_NBR := INT(ZQ_PROC_NBR_CNT*1);
      ZF_PS := ZQ_PROC_NBR_CNT;

      RETURN (TRUE);

    FI;
  OD;
OD;

RETURN (FALSE);

END Q_S0652_GET_FREE_PROC_INST;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0653_FIND_PROC_INST_TIMER                        */
/*                                                                    */
/*     PROGRAMMER: J.P. QUINN                                         */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 28/11/97                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       SEARCH THE GLOBAL DATA STRUCTURE Z_POLL_PROCESS              */
/*      (CURRENT POLL STATE) FOR A ENTRY CORRESPONDING TIMER ID.      */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_TIMID M_TIMER_IDENT,                       */
/*                      ZF_PS ZM_PROC_NBR LOC                         */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0010_WAIT_BEFORE_RETRYING                  */
/*                      Q_S0680_PROCESS_TIMER_EXPIRY                  */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0653_FIND_PROC_INST_TIMER: PROC (ZF_TIMID   M_TIMER_IDENT,
                                    ZF_PS      ZM_PROC_NBR LOC)
                              RETURNS (BOOL);

DCL ZQ_PROC_NBR_CNT ZM_PROC_NBR;

DO FOR ZQ_PROC_NBR_CNT := 1 TO ZS_MAX_PARA_POLL;
  IF ZF_TIMID  /= M_TIMER_IDENT_NULL
  THEN
    /* SEARCH FOR TIMER ID */
    IF Z_POLL_PROCESS(ZQ_PROC_NBR_CNT).ZB_TIMER_ID = ZF_TIMID
    THEN
      ZF_PS := ZQ_PROC_NBR_CNT;
      RETURN (TRUE);
    FI;
  FI;
OD;

 RETURN (FALSE);

END Q_S0653_FIND_PROC_INST_TIMER;

/* FR 176777 START */
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0657_CHK_SEQ                                     */
/*                                                                    */
/*     PROGRAMMER: AKSHAY		  		   	      */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 28/11/97                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LDC_TYPE M_LCE_ID,                         */
/*                      ZF_PS ZM_PROC_NBR,                            */
/*                      ZF_ATTEMPT INT                                */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58YW_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0670_PROCESS_POLLING_RESPONSE              */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0657_CHK_SEQ: PROC    (ZF_LDC_TYPE M_FMM_SELECTOR,
			  ZF_LDC_LCE_ID  M_LCE_ID,
                          ZF_PS      ZM_PROC_NBR,
                          ZF_SEQ_NBR M_BYTE)
                        RETURNS (BOOL);
#ifdef GNU
NEWMODE M_INT_INTEL = STRUCT(
         CASE OF
         :B_INT   INT,
         :B_MSB   RANGE(0:255),
          B_LSB   RANGE(0:255)
         ESAC );
#else
NEWMODE M_INT_INTEL = STRUCT(                                                   
         CASE OF                                                                
         :B_INT   INT,                                                          
         :B_LSB   RANGE(0:255),                                                 
          B_MSB   RANGE(0:255)                                                  
         ESAC );                                                                
#endif                        
DCL ZQ_BYTE_INT M_INT_INTEL;
/*Commented for FR 20/192118*/ 
/*IF (ZF_LDC_TYPE = M_FS_DTC_TRF_LDC)
THEN*/
/*Commented for FR 20/192118*/ 
 ZQ_BYTE_INT := M_INT_INTEL(
             Z_POLL_PROCESS(ZF_PS).ZB_SEQ_NBR);
 IF (ZQ_BYTE_INT.B_LSB = ZF_SEQ_NBR)
 THEN
       RETURN (TRUE);
 /*Commented for FR 20/192118*/       
 /*ELSIF (ZQ_BYTE_INT.B_LSB < ZF_SEQ_NBR)
 THEN
   IF Q_S0950_ADD_ONE_TO_DPVAL(Z_DEBUG_VAR.ZB_DTC_SEQ_NBR_HIGH)
   THEN
         Z_DEBUG_VAR.ZB_DTC_SEQ_NBR_HIGH.B_HIGH          := 0;
         Z_DEBUG_VAR.ZB_DTC_SEQ_NBR_HIGH.B_LOW           := 0;
   FI;
   RETURN (FALSE);
 ELSIF (ZQ_BYTE_INT.B_LSB > ZF_SEQ_NBR)
 THEN
   IF Q_S0950_ADD_ONE_TO_DPVAL(Z_DEBUG_VAR.ZB_DTC_SEQ_NBR_LESS)
   THEN
         Z_DEBUG_VAR.ZB_DTC_SEQ_NBR_LESS.B_HIGH          := 0;
         Z_DEBUG_VAR.ZB_DTC_SEQ_NBR_LESS.B_LOW           := 0;
   FI; 
   RETURN (FALSE);*/
 /*Commented for FR 20/192118*/ 
 /*Added for FR 20/192118*/  
 ELSE 
 /*Commented for CR36/288765*/
 /*Q_S0661_UPD_DEBUG_WRNG_SEQ_EVT(ZF_LDC_TYPE,ZF_LDC_LCE_ID);*/
 /*Commented for CR36/288765*/
 /*START: CR36/288765*/
 DO WITH Z_POLL_PROCESS(ZF_PS);
    Q_S0661_UPD_DEBUG_WRNG_SEQ_EVT(ZF_LDC_TYPE,
                                   ZF_LDC_LCE_ID,
	        		   ZB_POLL_STEP);
 OD;
 /*END: CR36/288765*/
 RETURN (FALSE);  
 /*Added for FR 20/192118*/     
 FI;
/*Commented for FR 20/192118*/  
/*FI;*/
/*RETURN (TRUE);*/
/*Commented for FR 20/192118*/ 
END Q_S0657_CHK_SEQ;
/* FR 176777 START */
/*Added for FR 20/192118*/   
Q_S0658_CHK_INVL_FOR_ACT_STNBY : PROC(ZF_LDC_LCE_ID    M_LCE_ID,
                                ZF_LDC_TYPE      M_FMM_SELECTOR,
                                ZF_VALIDITY      M_PM_DATA_VALIDITY)
                                RETURNS (BOOL);

DCL ZQ_ACT_CE        BOOL;
DCL ZQ_SET_INVALID   BOOL;
DCL ZQ_VALIDITY      M_PM_DATA_VALIDITY;
ZQ_ACT_CE := Q_S0134_LDC_ON_ACT_CE(ZF_LDC_LCE_ID);
ZQ_SET_INVALID := Q_S0426_SET_INVALID(ZF_LDC_LCE_ID,
                                      ZF_LDC_TYPE,
                                      ZF_VALIDITY);  

ZQ_VALIDITY := ZF_VALIDITY;
IF ZQ_SET_INVALID
THEN
  ZQ_VALIDITY := E_DATA_INVALID;
FI;
IF ZQ_ACT_CE OR ZF_VALIDITY = E_DATA_VALID_INCOMPLETE OR
   ZQ_SET_INVALID
THEN
  IF ZQ_VALIDITY = E_DATA_INVALID
  THEN
    RETURN TRUE;
  FI;
FI;    
RETURN FALSE;    
END Q_S0658_CHK_INVL_FOR_ACT_STNBY;    
Q_S0659_UPD_DEBUG_CNTR_EVT : PROC(ZF_EVENT  ZM_INVALIDITY_DEBUG_CTRS);
/*BEGIN: FR248066*/

DCL ZQ_ERR_BUF  ARRAY(1:4) INT;


/*END: FR248066*/
 IF Q_S0950_ADD_ONE_TO_DPVAL(Z_DEBUG_VAR(ZF_EVENT))
 THEN
          Z_DEBUG_VAR(ZF_EVENT).B_HIGH           := 0;
          Z_DEBUG_VAR(ZF_EVENT).B_LOW            := 0;
 FI;

/*Begim: Trace Improvement - relation dump */
/*Commented for FR36/296461*/
/*   GET R_F_ACCESS WHERE (D_FAST_IDX = INT(M_RID_R_PM_ACT));

   IF DB_PARMS.B_DB_STATUS = M_DB_SUCCESS
     THEN

        LONG_INT(Z_R_PM_ACT_PTR.ZB_PTR) :=
                       LONG_INT((R_F_ACCESS.D_ABS_BASE));
   FI;

   GET R_F_ACCESS WHERE (D_FAST_IDX = INT(M_RID_R_PM_SC_G2));

   IF DB_PARMS.B_DB_STATUS = M_DB_SUCCESS
     THEN

        LONG_INT(Z_R_PM_SC_G2_PTR.ZB_PTR) :=
                       LONG_INT((R_F_ACCESS.D_ABS_BASE));

   FI;
*/
/*Commented for FR36/296461*/
/*End: Trace Improvement - relation dump */           

    /* BEGIN: FR248066*/
   
              /*Commented for CR36/288765*/ 
/*   ZQ_ERR_BUF(1) := Z_DEBUG_VAR(ZF_EVENT).B_HIGH;
     ZQ_ERR_BUF(2) := Z_DEBUG_VAR(ZF_EVENT).B_LOW;
     ZQ_ERR_BUF(3) := 440;
     ZQ_ERR_BUF(4) := 0;
     ERROR_REPORT(M_ERC6_USER_REC,M_ERT0019_INC_MESS_DATA,
      0,
      ->ZQ_ERR_BUF);*/
              /*Commented for CR36/288765*/ 

   /*END: FR248066*/

/*WIPRO:B10_MX_MR1 RT TRACE*/
/*Commented for CR36/288765*/ 
/* TRACEINFO := 'DEBUG data               (%d %d)';
   TRC_BSC_BUF1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(CLASS_PM),
              LONG_INT(SUB_CLASS_PM_CCDC),
              TRACEID(NORM),
              ->Z_DEBUG_VAR,*/
              /*START: CR36/288765*/ 
            /*SIZEOF(Z_DEBUG_VAR));*/
              /*END: CR36/288765*/ 
              /*Commented for CR36/288765*/ 
              /*132);*/
              /*Commented for CR36/288765*/ 
/*Commented for CR36/288765*/ 
/*END WIPRO:B10_MX_MR1 RT TRACE*/

END Q_S0659_UPD_DEBUG_CNTR_EVT;  
  
/*Commented for CR36/288765*/
/*Q_S0661_UPD_DEBUG_WRNG_SEQ_EVT : PROC(ZF_LDC_TYPE M_FMM_SELECTOR,
                                      ZF_LDC_LCE_ID  M_LCE_ID);*/
/*Commented for CR36/288765*/
/*START: CR36/288765*/
Q_S0661_UPD_DEBUG_WRNG_SEQ_EVT : PROC(ZF_LDC_TYPE M_FMM_SELECTOR,
                                      ZF_LDC_LCE_ID  M_LCE_ID,
                                      ZF_POLL_STEP ZM_CCDC_POLL_SEQ);
/*END: CR36/288765*/
/*BEGIN: FR248066*/
DCL ZQ_ERR_BUF  ARRAY(1:4) INT;
/*END: FR248066 */

/*WIPRO:B10_MX_MR1 RT TRACE*/
   TRACEINFO := 'DEBUG Wrong seq number   (%d %d)';
   TRC_BSC_PM3(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCDC),
              TRACEID(NORM),
              TRACEINFO,
              LONG_INT((ZF_LDC_TYPE)),
              LONG_INT((ZF_LDC_LCE_ID)),
              LONG_INT((0)));
/*END WIPRO:B10_MX_MR1 RT TRACE*/
CASE ZF_LDC_TYPE OF
  (M_FS_TCU_TRF_LDC):    
   Q_S0659_UPD_DEBUG_CNTR_EVT(E_WRONG_SEQ_NUM_TCU);
  (M_FS_TCHRM_LDC):   
   IF Q_S0136_DTC_CE_FUNC(ZF_LDC_LCE_ID,E_CE_FUNCT_TEL_DTC)
   THEN
    Q_S0659_UPD_DEBUG_CNTR_EVT(E_WRONG_SEQ_NUM_TCHRM);
   ELSE
    Q_S0659_UPD_DEBUG_CNTR_EVT(E_WRONG_SEQ_NUM_STCHRM);
   FI; 
  (M_FS_DTC_TRF_LDC):    
   Q_S0659_UPD_DEBUG_CNTR_EVT(E_WRONG_SEQ_NUM_DTC);
    
  /*BEGIN: FR248066 */
    ZQ_ERR_BUF(1) := 441;
    ZQ_ERR_BUF(2) := 0;
    ZQ_ERR_BUF(3) := 0;
    ZQ_ERR_BUF(4) := INT (M_FS_DTC_TRF_LDC);
 
   ERROR_REPORT (M_ERC6_USER_REC, 
              M_ERT0019_INC_MESS_DATA,
              0 ,
              -> ZQ_ERR_BUF);
 /*END: FR248066 */

  (M_FS_CPR_N_7_LDC):    
   Q_S0659_UPD_DEBUG_CNTR_EVT(E_WRONG_SEQ_NUM_CPR);
  (M_FS_SMS_CB_MASTER):    
   Q_S0659_UPD_DEBUG_CNTR_EVT(E_WRONG_SEQ_NUM_SMS);
  (M_FS_DTC_N_7_LDC):    
   Q_S0659_UPD_DEBUG_CNTR_EVT(E_WRONG_SEQ_NUM_N7);
  (M_FS_LME_X25):    
   Q_S0659_UPD_DEBUG_CNTR_EVT(E_WRONG_SEQ_NUM_X25); 
  ELSE;
  
  ESAC;
  /*START: CR36/288765*/
  CASE ZF_POLL_STEP OF
     (ZE_POLL_TP_N7):
	   Q_S0659_UPD_DEBUG_CNTR_EVT(E_WRONG_SEQ_NUM_TP_N7);
	 (ZE_POLL_TP_HDLC):
	   Q_S0659_UPD_DEBUG_CNTR_EVT(E_WRONG_SEQ_NUM_TP_HDLC);
	 (ZE_POLL_TP_IPOE1):
	   Q_S0659_UPD_DEBUG_CNTR_EVT(E_WRONG_SEQ_NUM_TP_IPoE1);
	/*START : AUPOIP FEATURE */
	/* START : 256 MGW IP Addresses */
	(ZE_POLL_TP_AUPOIP_MGW_CTR1,
	ZE_POLL_TP_AUPOIP_MGW_CTR2,
	ZE_POLL_TP_AUPOIP_MGW_CTR3,
	ZE_POLL_TP_AUPOIP_MGW_CTR4,
	ZE_POLL_TP_AUPOIP_MGW_CTR5,
	ZE_POLL_TP_AUPOIP_MGW_CTR6,
	ZE_POLL_TP_AUPOIP_TC_CTR):
/* END : 256 MGW IP Addresses */
    	 	   Q_S0659_UPD_DEBUG_CNTR_EVT(
			E_WRONG_SEQ_NUM_TP_AUPOIP_MGW_TC_CTR);
    	 /* BEGIN : FR36/307843 */
	/* (ZE_POLL_TP_AUPOIP_BTS_CTR):*/
         (ZE_POLL_TP_AUPOIP_BTS_CTR_1):
         /* END : FR36/307843 */
	   Q_S0659_UPD_DEBUG_CNTR_EVT(
			E_WRONG_SEQ_NUM_TP_AUPOIP_BTS_CTR_1);
         /* BEGIN : FR36/307843 */
         (ZE_POLL_TP_AUPOIP_BTS_CTR_2):
         	   Q_S0659_UPD_DEBUG_CNTR_EVT(
			E_WRONG_SEQ_NUM_TP_AUPOIP_BTS_CTR_2);
         /* END : FR36/307843 */
	/* END : AUPOIP FEATURE */
	 (ZE_POLL_TC_MTP2):
	   Q_S0659_UPD_DEBUG_CNTR_EVT(E_WRONG_SEQ_NUM_TC_MTP2);
	 (ZE_POLL_OMCP_N7):
	   Q_S0659_UPD_DEBUG_CNTR_EVT(E_WRONG_SEQ_NUM_OMCP_N7);
	 (ZE_POLL_TC_IP):
	   Q_S0659_UPD_DEBUG_CNTR_EVT(E_WRONG_SEQ_NUM_TC_IP);
	 (ZE_POLL_TCSL_MR):
	   Q_S0659_UPD_DEBUG_CNTR_EVT(E_WRONG_SEQ_NUM_TCSL_MR);
	 (ZE_POLL_M3UA_LM):
	   Q_S0659_UPD_DEBUG_CNTR_EVT(E_WRONG_SEQ_NUM_M3UA_LM);
/*START: IURG FEATURE */
	 (ZE_POLL_IURG):
	   Q_S0659_UPD_DEBUG_CNTR_EVT(E_WRONG_SEQ_NUM_IURG);
/*END : IURG FEATURE */
  ELSE
  
  ESAC;
  /*END: CR36/288765*/
END Q_S0661_UPD_DEBUG_WRNG_SEQ_EVT;  

/*Commented for CR36/288765*/
/*Q_S0662_UPD_DEBUG_MSG_INVL_EVT : PROC(ZF_LDC_TYPE M_FMM_SELECTOR);*/
/*Commented for CR36/288765*/
/*START: CR36/288765*/
Q_S0662_UPD_DEBUG_MSG_INVL_EVT : PROC(ZF_LDC_TYPE  M_FMM_SELECTOR,
                                      ZF_LCE_ID    M_LCE_ID,
				      ZF_POLL_STEP ZM_CCDC_POLL_SEQ);
/*END: CR36/288765*/
/*WIPRO:B10_MX_MR1 RT TRACE*/
   TRACEINFO := 'DEBUG msg invalid    (%d  %d)   ';
   TRC_BSC_PM3(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCDC),
              TRACEID(NORM),
              TRACEINFO,
              LONG_INT((ZF_LDC_TYPE)),
              /*Commented for CR36/288765*/
              /*LONG_INT((0)),*/
	      /*Commented for CR36/288765*/
	      /*START: CR36/288765*/
	      LONG_INT((ZF_LCE_ID)),
	      /*END: CR36/288765*/
              LONG_INT((0)));
/*END WIPRO:B10_MX_MR1 RT TRACE*/
CASE ZF_LDC_TYPE OF
  (M_FS_DTC_TRF_LDC):  
   Q_S0659_UPD_DEBUG_CNTR_EVT(E_INV_RCD_FRM_DTC);
  (M_FS_TCU_TRF_LDC):    
   Q_S0659_UPD_DEBUG_CNTR_EVT(E_INV_RCD_FRM_TCU);
  (M_FS_SMS_CB_MASTER):
   Q_S0659_UPD_DEBUG_CNTR_EVT(E_INV_RCD_FRM_SMS);
  (M_FS_DTC_N_7_LDC):    
   Q_S0659_UPD_DEBUG_CNTR_EVT(E_INV_RCD_FRM_N7);
  (M_FS_LME_X25):    
   Q_S0659_UPD_DEBUG_CNTR_EVT(E_INV_RCD_FRM_X25); 
  ELSE;
  
  ESAC;
  /*START: CR36/288765*/
  CASE ZF_POLL_STEP OF
     (ZE_POLL_TP_N7):
	   Q_S0659_UPD_DEBUG_CNTR_EVT(E_INV_RCD_FRM_TP_N7);
	 (ZE_POLL_TP_HDLC):
	   Q_S0659_UPD_DEBUG_CNTR_EVT(E_INV_RCD_FRM_TP_HDLC);
	 (ZE_POLL_TP_IPOE1):
	   Q_S0659_UPD_DEBUG_CNTR_EVT(E_INV_RCD_FRM_TP_IPoE1);
	/*START : AUPOIP FEATURE */
	/* START : 256 MGW IP Addresses */
	(ZE_POLL_TP_AUPOIP_MGW_CTR1,
	ZE_POLL_TP_AUPOIP_MGW_CTR2,
	ZE_POLL_TP_AUPOIP_MGW_CTR3,
	ZE_POLL_TP_AUPOIP_MGW_CTR4,
	ZE_POLL_TP_AUPOIP_MGW_CTR5,
	ZE_POLL_TP_AUPOIP_MGW_CTR6,
	ZE_POLL_TP_AUPOIP_TC_CTR):
/* END : 256 MGW IP Addresses */
	   Q_S0659_UPD_DEBUG_CNTR_EVT(
			E_INV_RCD_FRM_TP_AUPOIP_MGW_TC_CTR);
        /* BEGIN : FR36/307843 */
    	/* (ZE_POLL_TP_AUPOIP_BTS_CTR):*/
         (ZE_POLL_TP_AUPOIP_BTS_CTR_1):
        /* END : FR36/307843 */
	   Q_S0659_UPD_DEBUG_CNTR_EVT(
			E_INV_RCD_FRM_TP_AUPOIP_BTS_CTR_1);
         /* BEGIN : FR36/307843 */
         (ZE_POLL_TP_AUPOIP_BTS_CTR_2):
	   Q_S0659_UPD_DEBUG_CNTR_EVT(
			E_INV_RCD_FRM_TP_AUPOIP_BTS_CTR_2);
         /* END : FR36/307843 */
	/* END : AUPOIP FEATURE */
	 (ZE_POLL_TC_MTP2):
	   Q_S0659_UPD_DEBUG_CNTR_EVT(E_INV_RCD_FRM_TC_MTP2);
	 (ZE_POLL_OMCP_N7):
	   Q_S0659_UPD_DEBUG_CNTR_EVT(E_INV_RCD_FRM_OMCP_N7);
	 (ZE_POLL_TC_IP):
	   Q_S0659_UPD_DEBUG_CNTR_EVT(E_INV_RCD_FRM_TC_IP);
	 (ZE_POLL_TCSL_MR):
	   Q_S0659_UPD_DEBUG_CNTR_EVT(E_INV_RCD_FRM_TCSL_MR);
	 (ZE_POLL_M3UA_LM):
	   Q_S0659_UPD_DEBUG_CNTR_EVT(E_INV_RCD_FRM_M3UA_LM);
/*START: IURG FEATURE */	
	 (ZE_POLL_IURG):
	   Q_S0659_UPD_DEBUG_CNTR_EVT(E_INV_RCD_FRM_M3UA_LM);
/*END : IURG FEATURE */   
  ELSE
  
  ESAC;
  /*END: CR36/288765*/
 
END Q_S0662_UPD_DEBUG_MSG_INVL_EVT;

Q_S0663_UPD_DEBUG_MSG_RETRY3_EVT : PROC(ZF_LDC_TYPE M_FMM_SELECTOR,
           					            ZF_LDC_LCE_ID  M_LCE_ID,
                                        ZF_POLL_STEP ZM_CCDC_POLL_SEQ );
/*WIPRO:B10_MX_MR1 RT TRACE*/
   TRACEINFO := 'DEBUG msg retry3      (%d %d %d)';
   TRC_BSC_PM3(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCDC),
              TRACEID(NORM),
              TRACEINFO,
              LONG_INT((ZF_LDC_TYPE)),
              LONG_INT((ZF_LDC_LCE_ID)),
              LONG_INT((ZF_POLL_STEP)));
/*END WIPRO:B10_MX_MR1 RT TRACE*/
CASE ZF_LDC_TYPE OF
  (M_FS_DTC_TRF_LDC):  
    CASE ZF_POLL_STEP OF
      (ZE_POLL_DTC_STANDARD):
        Q_S0659_UPD_DEBUG_CNTR_EVT(E_TIMER_EXPIRY_RETRY3_DTC);
      (ZE_POLL_DTC_STAN_TRX):  
        Q_S0659_UPD_DEBUG_CNTR_EVT(E_TIMER_EXPIRY_RETRY3_DTC_TRX);
      (ZE_POLL_DTC_DETAIL):  
        Q_S0659_UPD_DEBUG_CNTR_EVT(E_TIMER_EXPIRY_RETRY3_DTCDT);
    ELSE;
    ESAC;  
  (M_FS_TCU_TRF_LDC):    
    CASE ZF_POLL_STEP OF
      (ZE_POLL_TCU_STANDARD):
        Q_S0659_UPD_DEBUG_CNTR_EVT(E_TIMER_EXPIRY_RETRY3_TCU);
      (ZE_POLL_TCU_DETAIL):
        Q_S0659_UPD_DEBUG_CNTR_EVT(E_TIMER_EXPIRY_RETRY3_TCUDT);
      (ZE_POLL_TCU_T26):
        Q_S0659_UPD_DEBUG_CNTR_EVT(E_TIMER_EXPIRY_RETRY3_TCU26);
      (ZE_POLL_TRAFFIC_FLOW):
        Q_S0659_UPD_DEBUG_CNTR_EVT(E_TIMER_EXPIRY_RETRY3_TCUTRF);
      (ZE_POLL_TCU_EME):  
        Q_S0659_UPD_DEBUG_CNTR_EVT(E_TIMER_EXPIRY_RETRY3_TCUEME); 
    ELSE;
    ESAC;
  (M_FS_TCHRM_LDC):    
    CASE ZF_POLL_STEP OF
      (ZE_POLL_TCH_STANDARD):
        IF Q_S0136_DTC_CE_FUNC(ZF_LDC_LCE_ID, E_CE_FUNCT_TEL_DTC)
        THEN
         Q_S0659_UPD_DEBUG_CNTR_EVT(E_TIMER_EXPIRY_RETRY3_TCHRM);
        ELSE
         Q_S0659_UPD_DEBUG_CNTR_EVT(E_TIMER_EXPIRY_RETRY3_STCHRM);
        FI;
      (ZE_POLL_TRAFFIC_FLOW):
         Q_S0659_UPD_DEBUG_CNTR_EVT(E_TIMER_EXPIRY_RETRY3_TCHRMTRF);
    ELSE;
    ESAC;      
  (M_FS_SMS_CB_MASTER):
        Q_S0659_UPD_DEBUG_CNTR_EVT(E_TIMER_EXPIRY_RETRY3_SMS);
  (M_FS_DTC_N_7_LDC):    
        Q_S0659_UPD_DEBUG_CNTR_EVT(E_TIMER_EXPIRY_RETRY3_N7);
  (M_FS_LME_X25):    
        Q_S0659_UPD_DEBUG_CNTR_EVT(E_TIMER_EXPIRY_RETRY3_X25); 
  (M_FS_CPR_N_7_LDC):    
        Q_S0659_UPD_DEBUG_CNTR_EVT(E_TIMER_EXPIRY_RETRY3_CPR);    
  ELSE;
  
  ESAC; 
  /*START: CR36/288765*/
  CASE ZF_POLL_STEP OF
     (ZE_POLL_TP_N7):
	   Q_S0659_UPD_DEBUG_CNTR_EVT(E_TIMER_EXPIRY_RETRY3_TP_N7);
	 (ZE_POLL_TP_HDLC):
	   Q_S0659_UPD_DEBUG_CNTR_EVT(E_TIMER_EXPIRY_RETRY3_TP_HDLC);
	 (ZE_POLL_TP_IPOE1):
	   Q_S0659_UPD_DEBUG_CNTR_EVT(E_TIMER_EXPIRY_RETRY3_TP_IPoE1);
	/*START : AUPOIP FEATURE */
	/* START : 256 MGW IP Addresses */
	(ZE_POLL_TP_AUPOIP_MGW_CTR1,
	ZE_POLL_TP_AUPOIP_MGW_CTR2,
	ZE_POLL_TP_AUPOIP_MGW_CTR3,
	ZE_POLL_TP_AUPOIP_MGW_CTR4,
	ZE_POLL_TP_AUPOIP_MGW_CTR5,
	ZE_POLL_TP_AUPOIP_MGW_CTR6,
	ZE_POLL_TP_AUPOIP_TC_CTR):
/* END : 256 MGW IP Addresses */
	   Q_S0659_UPD_DEBUG_CNTR_EVT(
			E_TIMER_EXPIRY_RETRY3_TP_AUPOIP_MGW_TC_CTR);
	/* BEGIN : FR36/307843 */
        /* (ZE_POLL_TP_AUPOIP_BTS_CTR):*/
         (ZE_POLL_TP_AUPOIP_BTS_CTR_1):
 	/* END : FR36/307843 */
	   Q_S0659_UPD_DEBUG_CNTR_EVT(
			E_TIMER_EXPIRY_RETRY3_TP_AUPOIP_BTS_CTR_1);
	/* BEGIN : FR36/307843 */
         (ZE_POLL_TP_AUPOIP_BTS_CTR_2):
	   Q_S0659_UPD_DEBUG_CNTR_EVT(
			E_TIMER_EXPIRY_RETRY3_TP_AUPOIP_BTS_CTR_2);
	/* END : FR36/307843 */
	/* END : AUPOIP FEATURE */
 	 (ZE_POLL_TC_MTP2):
	   Q_S0659_UPD_DEBUG_CNTR_EVT(E_TIMER_EXPIRY_RETRY3_TC_MTP2);
	 (ZE_POLL_OMCP_N7):
	   Q_S0659_UPD_DEBUG_CNTR_EVT(E_TIMER_EXPIRY_RETRY3_OMCP_N7);
	 (ZE_POLL_TC_IP):
	   Q_S0659_UPD_DEBUG_CNTR_EVT(E_TIMER_EXPIRY_RETRY3_TP_IP);
	 (ZE_POLL_TCSL_MR):
	   Q_S0659_UPD_DEBUG_CNTR_EVT(E_TIMER_EXPIRY_RETRY3_TCSL_MR);
	 (ZE_POLL_M3UA_LM):
	   Q_S0659_UPD_DEBUG_CNTR_EVT(E_TIMER_EXPIRY_RETRY3_M3UA_LM);
/*START: IURG FEATURE */
	 (ZE_POLL_IURG):
	   Q_S0659_UPD_DEBUG_CNTR_EVT(E_TIMER_EXPIRY_RETRY3_IURG);

/*END : IURG FEATURE*/	   

/* BEGIN : CR 605005 */
     (ZE_POLL_PM_CPI):
      Q_S0659_UPD_DEBUG_CNTR_EVT(E_TIMER_EXPIRY_RETRY3_PM_CPI);	 
/* END : CR 605005 */

  ELSE
  
  ESAC;
  /*END: CR36/288765*/ 
END Q_S0663_UPD_DEBUG_MSG_RETRY3_EVT; 
/*Added for FR 20/192118*/   
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0655_FIND_PROC_INST_LCE                          */
/*                                                                    */
/*     PROGRAMMER: J.P. QUINN                                         */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 28/11/97                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       SEARCH THE GLOBAL DATA STRUCTURE Z_POLL_PROCESS              */
/*      (CURRENT POLL STATE) FOR A ENTRY CORRESPONDING TO THE LCE ID  */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LCE_ID M_LCE_ID,                           */
/*                      ZF_REF_NBR INT,                               */
/*                      ZF_PS ZM_PROC_NBR LOC                         */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0670_PROCESS_POLLING_RESPONSE              */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0655_FIND_PROC_INST_LCE: PROC    (ZF_LCE_ID  M_LCE_ID,
                                     ZF_REF_NBR INT,
                                     /* FR 176777 START */
                                     ZF_POLL_RESP   ZM_POLL_RSP,
                                     /* FR 176777 END */
                                     ZF_PS      ZM_PROC_NBR LOC)
                        RETURNS (BOOL);

DCL ZQ_PROC_NBR_CNT ZM_PROC_NBR;

DO FOR ZQ_PROC_NBR_CNT := 1 TO ZS_MAX_PARA_POLL;
  IF (ZF_LCE_ID /= M_LCE_ID_NULL)
  THEN
     
    /* SEARCH ON LCE-ID AND REF NUMBER */
    IF (Z_POLL_PROCESS(ZQ_PROC_NBR_CNT).ZB_LCE_ID = ZF_LCE_ID) AND
       (Z_POLL_PROCESS(ZQ_PROC_NBR_CNT).ZB_REF_NBR = ZF_REF_NBR)
    THEN
      /* FR 176777 START */
      IF (Q_S0656_CHK_POLL_STEP_WITH_RESP(
          Z_POLL_PROCESS(ZQ_PROC_NBR_CNT).ZB_POLL_STEP,
          ZF_POLL_RESP))
      THEN
      /* FR 176777 END */    
            ZF_PS := ZQ_PROC_NBR_CNT;
            RETURN (TRUE);
      /* FR 176777 START */      
      FI;      
      /* FR 176777 END */
    FI;
  FI;
OD;

 RETURN (FALSE);

END Q_S0655_FIND_PROC_INST_LCE;
/* FR 176777 START */
Q_S0656_CHK_POLL_STEP_WITH_RESP: PROC( 
                                     ZF_POLL_STEP ZM_CCDC_POLL_SEQ,
                                     ZF_POLL_RESP   ZM_POLL_RSP
                                     )
                        RETURNS (BOOL);
                        
CASE ZF_POLL_RESP OF
   (ZE_DET):
   
     IF Q_S0610_DETAIL_POLL_REQ(ZF_POLL_STEP)
     THEN
        RETURN (TRUE);
     FI;
      
   (ZE_STD):
   
     IF Q_S0608_STD_POLL_REQ(ZF_POLL_STEP) THEN
       RETURN (TRUE);
     FI;
   (ZE_T26):
   
     IF ZF_POLL_STEP = ZE_POLL_TCU_T26
     THEN
       RETURN (TRUE);
     FI;
     
   (ZE_TR_FLOW):
   
     IF ZF_POLL_STEP = ZE_POLL_TRAFFIC_FLOW
     THEN
       RETURN (TRUE);
     FI;
     
   (ZE_EME):
   
     IF ZF_POLL_STEP = ZE_POLL_TCU_EME
     THEN
      RETURN (TRUE);
     FI;
     
   (ZE_STD_TRX):
     
     IF ZF_POLL_STEP = ZE_POLL_DTC_STAN_TRX
     THEN
      RETURN (TRUE);
     FI;   
   
   /*BEGIN ADD for MXBSC*/
   (ZE_TP):
      IF (ZF_POLL_STEP = ZE_POLL_TP_N7 OR
         ZF_POLL_STEP = ZE_POLL_TP_HDLC OR
      /* START : WIPRO B11 IP MR0 PKG1 */
         ZF_POLL_STEP = ZE_POLL_OMCP_N7 OR
         ZF_POLL_STEP = ZE_POLL_TP_IPOE1 OR
      /*START : AUPOIP FEATURE */
         ZF_POLL_STEP = 
		ZE_POLL_TP_AUPOIP_MGW_CTR1 OR
		/* START : 256 MGW IP Addresses */
		   ZF_POLL_STEP = 
		ZE_POLL_TP_AUPOIP_MGW_CTR2 OR
		   ZF_POLL_STEP = 
		ZE_POLL_TP_AUPOIP_MGW_CTR3 OR
		ZF_POLL_STEP = 
		ZE_POLL_TP_AUPOIP_MGW_CTR4 OR
		ZF_POLL_STEP = 
		ZE_POLL_TP_AUPOIP_MGW_CTR5 OR
		ZF_POLL_STEP = 
		ZE_POLL_TP_AUPOIP_MGW_CTR6 OR
		   ZF_POLL_STEP = 
		ZE_POLL_TP_AUPOIP_TC_CTR OR
/* END : 256 MGW IP Addresses */
	/* BEGIN : FR36/307843 */
        /* ZF_POLL_STEP = ZE_POLL_TP_AUPOIP_BTS_CTR*/
	 ZF_POLL_STEP = ZE_POLL_TP_AUPOIP_BTS_CTR_1 OR
         ZF_POLL_STEP = ZE_POLL_TP_AUPOIP_BTS_CTR_2
        /* END : FR36/307843 */
      /* END : AUPOIP FEATURE */
	 ) 
      /* END : WIPRO B11 IP MR0 PKG1 */
      THEN
         RETURN (TRUE);
      FI;
   /*END ADD for MXBSC*/
   /*BEGIN ADD for B11 MERGE*/
   (ZE_TC,ZE_TC_ACK):
      IF (ZF_POLL_STEP = ZE_POLL_TC_MTP2)
      /*for FR 3BKA36FBR224825*/
       OR (ZF_POLL_STEP = ZE_POLL_TC_IP)
      /*for FR 3BKA36FBR224825*/
      THEN
         RETURN (TRUE);
      FI;
   /*BEGIN ADD for B11 MERGE*/
   /* START : WIPRO B11 IP MR0 PKG1 */
   (ZE_TC_IP,ZE_TC_IP_ACK):
      IF (ZF_POLL_STEP = ZE_POLL_TC_IP)
      THEN
         RETURN (TRUE);
      FI;

    (ZE_TCSL_MR):
      IF (ZF_POLL_STEP = ZE_POLL_TCSL_MR)
      THEN
         RETURN (TRUE);
      FI;
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */      
    (ZE_M3UA_LM):
      IF (ZF_POLL_STEP = ZE_POLL_M3UA_LM)
      THEN
         RETURN (TRUE);
      FI;
/*START: IURG FEATURE */
    (ZE_IURG) :
      IF (ZF_POLL_STEP = ZE_POLL_IURG)
      THEN
         RETURN (TRUE);
      FI;
/*END: IURG FEATURE */
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */      

   /* END : WIPRO B11 IP MR0 PKG1 */
   ELSE
     RETURN(FALSE);
   
 ESAC;            
 RETURN (FALSE);
END Q_S0656_CHK_POLL_STEP_WITH_RESP;
/* FR 176777 END */
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0656_ALL_PROC_INSTS_FREE                         */
/*                                                                    */
/*     PROGRAMMER: J.P. QUINN                                         */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 20/11/97                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION: CHECKS CURRENT POLL STATE FOR ALL POLL */
/*      SLOTS AND RETURNS TRUE IF ALL ARE EMPTY.                      */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0660_DO_NEXT_POLL_ACTION                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0656_ALL_PROC_INSTS_FREE: PROC()
                             RETURNS (BOOL);

DCL ZQ_PROC_NBR_CNT ZM_PROC_NBR;

DO FOR ZQ_PROC_NBR_CNT := 1 TO ZS_MAX_PARA_POLL;
  DO WITH Z_POLL_PROCESS(ZQ_PROC_NBR_CNT);
    IF NOT(ZB_LCE_ID = M_LCE_ID_NULL AND
           ZB_TIMER_ID = ZS_NULL)
    THEN
      RETURN(FALSE);
    FI;
  OD;
OD;

 RETURN(TRUE);
END Q_S0656_ALL_PROC_INSTS_FREE;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0658_FILL_PROC_INST_DATA                         */
/*                                                                    */
/*     PROGRAMMER: J.P. QUINN                                         */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/18                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*      FILLS IN THE PROCESS INSTANCE DATA.                           */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_PROC_NBR ZM_PROC_NBR,                      */
/*                      ZF_POLL_STEP ZM_CCDC_POLL_SEQ,                */
/*                      ZF_LDC_TYPE M_FMM_SELECTOR,                   */
/*                      ZF_LCE_ID M_LCE_ID                            */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0630_GET_NEXT_LDCP_TO_POLL                 */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0658_FILL_PROC_INST_DATA: PROC(ZF_PROC_NBR  ZM_PROC_NBR,
                                  ZF_POLL_STEP ZM_CCDC_POLL_SEQ,
                                  ZF_LDC_TYPE  M_FMM_SELECTOR,
                                  ZF_LCE_ID    M_LCE_ID);


DO WITH Z_POLL_PROCESS(ZF_PROC_NBR);
  ZB_LCE_ID:=ZF_LCE_ID;
  ZB_LDC_TYPE:=ZF_LDC_TYPE;
  ZB_POLL_STEP:=ZF_POLL_STEP;
  ZB_REF_NBR := INT(ZF_PROC_NBR*1);
  /* BEGIN : WIPRO B11 IP MR0 PKG1 */
  IF ( ZB_POLL_STEP = ZE_POLL_TP_IPOE1 )
  THEN
   ZB_SEQ_NBR := 2;
  FI;
  /* END : WIPRO B11 IP MR0 PKG1 */
/*START : AUPOIP FEATURE */
  IF ( ZB_POLL_STEP = ZE_POLL_TP_AUPOIP_MGW_CTR1 )
  THEN
   ZB_SEQ_NBR := 3;
  FI;
/* BEGIN : FR36/307843 */
 /* IF ( ZB_POLL_STEP = ZE_POLL_TP_AUPOIP_BTS_CTR )*/
  IF ( ZB_POLL_STEP = ZE_POLL_TP_AUPOIP_MGW_CTR2 )
/* END : FR36/307843 */
  THEN
   ZB_SEQ_NBR := 4;
  FI;
/* BEGIN : FR36/307843 */
  IF ( ZB_POLL_STEP = ZE_POLL_TP_AUPOIP_MGW_CTR3 )
  THEN
   ZB_SEQ_NBR := 5;
  FI;
  IF ( ZB_POLL_STEP = ZE_POLL_TP_AUPOIP_MGW_CTR4 )
  THEN
   ZB_SEQ_NBR := 6;
  FI;
  IF ( ZB_POLL_STEP = ZE_POLL_TP_AUPOIP_MGW_CTR5 )
  THEN
   ZB_SEQ_NBR := 7;
  FI;
  IF ( ZB_POLL_STEP = ZE_POLL_TP_AUPOIP_MGW_CTR6 )
  THEN
   ZB_SEQ_NBR := 8;
  FI;
/* END : FR36/307843 */
/* START : 256 MGW IP Addresses */
  IF ( ZB_POLL_STEP = ZE_POLL_TP_AUPOIP_TC_CTR )
  THEN
   ZB_SEQ_NBR := 9;
  FI;
  IF ( ZB_POLL_STEP = ZE_POLL_TP_AUPOIP_BTS_CTR_1 )
  THEN
   ZB_SEQ_NBR := 10;
  FI;
  IF ( ZB_POLL_STEP = ZE_POLL_TP_AUPOIP_BTS_CTR_2 )
  THEN
   ZB_SEQ_NBR := 11;
  FI;
/* END : 256 MGW IP Addresses */
/* END : AUPOIP FEATURE */
OD;

END Q_S0658_FILL_PROC_INST_DATA;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0666_CLEAR_MC1408X_MC1409X_TMP                   */
/*                                                                    */
/*     PROGRAMMER: xuny                                               */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 14/01/22                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*      For CR1098364VAMOS counters MC1408x&MC1409x improvement       */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0666_CLEAR_MC1408X_MC1409X_TMP: PROC( );
	
	DCL ZQ_CELL_IDX INT;
	
	DO FOR ZQ_CELL_IDX := 1 TO CM_FY32_MAX_CELLS_PER_BSC;
  DO WITH Z_TMP_MC1408_9_PTR->(ZQ_CELL_IDX);
      B_CNTR_C1408A.B_LOW := ZS_FFFF;
	    B_CNTR_C1408A.B_HIGH := ZS_FFFF;
      B_CNTR_C1408B.B_LOW := ZS_FFFF;
	    B_CNTR_C1408B.B_HIGH := ZS_FFFF;
	    B_CNTR_C1408C.B_LOW := ZS_FFFF;
	    B_CNTR_C1408C.B_HIGH := ZS_FFFF;
	    B_CNTR_C1408D.B_LOW := ZS_FFFF;
	    B_CNTR_C1408D.B_HIGH := ZS_FFFF;
	    B_CNTR_C1409A.B_LOW := ZS_FFFF;
	    B_CNTR_C1409A.B_HIGH := ZS_FFFF;
	    B_CNTR_C1409B.B_LOW := ZS_FFFF;
	    B_CNTR_C1409B.B_HIGH := ZS_FFFF;
	    B_CNTR_C1409C.B_LOW := ZS_FFFF;
	    B_CNTR_C1409C.B_HIGH := ZS_FFFF;
	    B_CNTR_C1409D.B_LOW := ZS_FFFF;
	    B_CNTR_C1409D.B_HIGH := ZS_FFFF;	      
  OD;
  OD;

END Q_S0666_CLEAR_MC1408X_MC1409X_TMP;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0665_DO_MC1408X_MC1409X_CALC                     */
/*                                                                    */
/*     PROGRAMMER: xuny                                               */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 14/01/22                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*      For CR1098364VAMOS counters MC1408x&MC1409x improvement       */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                                                                    */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58AL_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0630_GET_NEXT_LDCP_TO_POLL                 */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0665_DO_MC1408X_MC1409X_CALC: PROC( );

DCL ZQ_COUNTER RANGE (E_MT_37_CTR_MC1408A : E_MT_37_CTR_MC1409D);
DCL ZQ_CELL_IDX INT;
DCL ZQ_LONG_SUM2 ZM_LONG_DPVAL;
DCL ZQ_LONG_AVG1 ZM_LONG_DPVAL;
DCL ZQ_LONG_AVG2 ZM_LONG_DPVAL;

DO FOR ZQ_CELL_IDX := 1 TO CM_FY32_MAX_CELLS_PER_BSC;  
  DO WITH Z_T37_0_PTR -> (ZM_CELL_INDEX_VALUE(ZQ_CELL_IDX));	
	DO WITH B_CTRS_PT0_MT_37;
	DO WITH Z_T37_VMC_001_PTR -> (ZQ_CELL_IDX);
	DO WITH Z_TMP_MC1408_9_PTR->(ZQ_CELL_IDX);
	DO FOR ZQ_COUNTER := E_MT_37_CTR_MC1408A TO E_MT_37_CTR_MC1409D;
    CASE(ZQ_COUNTER) OF
    /*MC1408X SERIES*/
	  (E_MT_37_CTR_MC1408A):
	   IF (B_CNTR_C1408A.B_LOW /= ZS_FFFE)
	   	  AND (B_CNTR_C1408A.B_HIGH /= ZS_FFFF)
	   THEN
	   	 ZQ_LONG_SUM2.ZB_LOW := B_CNTR_C1408A.B_LOW;
       ZQ_LONG_SUM2.ZB_HIGH := B_CNTR_C1408A.B_HIGH;
       	
       IF B_VMC001A /= 0L
       THEN
          ZQ_LONG_SUM2.ZB_LONG := ZQ_LONG_SUM2.ZB_LONG * 10L;
          ZQ_LONG_AVG2.ZB_LONG := ZQ_LONG_SUM2.ZB_LONG / B_VMC001A;
          
         ZQ_LONG_AVG1.ZB_LOW := B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_LOW;
       ZQ_LONG_AVG1.ZB_HIGH := B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_HIGH;
       	
       	IF ((ZQ_LONG_AVG1.ZB_LOW /= ZS_FFFE)
       	  AND (ZQ_LONG_AVG1.ZB_HIGH /= ZS_FFFF))
       	  AND (ZQ_LONG_AVG2.ZB_LONG /= 0L)
       	  AND (ZQ_LONG_AVG1.ZB_LONG /= 0L)
       	THEN
       	   ZQ_LONG_AVG2.ZB_LONG := (ZQ_LONG_AVG2.ZB_LONG 
       	   	                       + ZQ_LONG_AVG1.ZB_LONG) / 2L;
       	FI;
       	
       B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_LOW := ZQ_LONG_AVG2.ZB_LOW;
       B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_HIGH := ZQ_LONG_AVG2.ZB_HIGH;
       
       ELSE
          B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_LOW := ZS_FFFE;
          B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_HIGH := ZS_FFFF;
          TRACEINFO :='WRNG VMS-A CALL NB 0 IN CELL(%d)';
          TRC_BSC_PM1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCDC),
              TRACEID(ERIR),
              TRACEINFO,
              LONG_INT((ZQ_CELL_IDX)),
              LONG_INT((0)),
              LONG_INT((0)));
       FI;
       
	   FI;	   

		(E_MT_37_CTR_MC1408B):
			 IF (B_CNTR_C1408B.B_LOW /= ZS_FFFE)
	   	  AND (B_CNTR_C1408B.B_HIGH /= ZS_FFFF)
	   THEN
	   	 ZQ_LONG_SUM2.ZB_LOW := B_CNTR_C1408B.B_LOW;
       ZQ_LONG_SUM2.ZB_HIGH := B_CNTR_C1408B.B_HIGH;
       	
       IF B_VMC001B /= 0L
       THEN
          ZQ_LONG_SUM2.ZB_LONG := ZQ_LONG_SUM2.ZB_LONG * 10L;
          ZQ_LONG_AVG2.ZB_LONG := ZQ_LONG_SUM2.ZB_LONG / B_VMC001B;
          
         ZQ_LONG_AVG1.ZB_LOW := B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_LOW;
       ZQ_LONG_AVG1.ZB_HIGH := B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_HIGH;
       	
       	IF ((ZQ_LONG_AVG1.ZB_LOW /= ZS_FFFE)
       	  AND (ZQ_LONG_AVG1.ZB_HIGH /= ZS_FFFF))
       	  AND (ZQ_LONG_AVG2.ZB_LONG /= 0L)
       	  AND (ZQ_LONG_AVG1.ZB_LONG /= 0L)
       	THEN
       	   ZQ_LONG_AVG2.ZB_LONG := (ZQ_LONG_AVG2.ZB_LONG 
       	   	                       + ZQ_LONG_AVG1.ZB_LONG) / 2L;
       	FI;
       	
       B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_LOW := ZQ_LONG_AVG2.ZB_LOW;
       B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_HIGH := ZQ_LONG_AVG2.ZB_HIGH;
            
       ELSE
          B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_LOW := ZS_FFFE;
          B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_HIGH := ZS_FFFF;
          TRACEINFO :='WRNG VMS-B CALL NB 0 IN CELL(%d)';
          TRC_BSC_PM1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCDC),
              TRACEID(ERIR),
              TRACEINFO,
              LONG_INT((ZQ_CELL_IDX)),
              LONG_INT((0)),
              LONG_INT((0)));
       FI;
       
	   FI;
	  

		(E_MT_37_CTR_MC1408C):
			 IF (B_CNTR_C1408C.B_LOW /= ZS_FFFE)
	   	  AND (B_CNTR_C1408C.B_HIGH /= ZS_FFFF)
	   THEN
	   	 ZQ_LONG_SUM2.ZB_LOW := B_CNTR_C1408C.B_LOW;
       ZQ_LONG_SUM2.ZB_HIGH := B_CNTR_C1408C.B_HIGH;
       	
       IF B_VMC001C /= 0L
       THEN
          ZQ_LONG_SUM2.ZB_LONG := ZQ_LONG_SUM2.ZB_LONG * 10L;
          ZQ_LONG_AVG2.ZB_LONG := ZQ_LONG_SUM2.ZB_LONG / B_VMC001C;
          
         ZQ_LONG_AVG1.ZB_LOW := B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_LOW;
       ZQ_LONG_AVG1.ZB_HIGH := B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_HIGH;
       	
       	IF ((ZQ_LONG_AVG1.ZB_LOW /= ZS_FFFE)
       	  AND (ZQ_LONG_AVG1.ZB_HIGH /= ZS_FFFF))
       	  AND (ZQ_LONG_AVG2.ZB_LONG /= 0L)
       	  AND (ZQ_LONG_AVG1.ZB_LONG /= 0L)
       	THEN
       	   ZQ_LONG_AVG2.ZB_LONG := (ZQ_LONG_AVG2.ZB_LONG 
       	   	                       + ZQ_LONG_AVG1.ZB_LONG) / 2L;
       	FI;
       	
       B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_LOW := ZQ_LONG_AVG2.ZB_LOW;
       B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_HIGH := ZQ_LONG_AVG2.ZB_HIGH;
       	
       ELSE
          B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_LOW := ZS_FFFE;
          B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_HIGH := ZS_FFFF;
          TRACEINFO :='WRNG VMS-C CALL NB 0 IN CELL(%d)';
          TRC_BSC_PM1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCDC),
              TRACEID(ERIR),
              TRACEINFO,
              LONG_INT((ZQ_CELL_IDX)),
              LONG_INT((0)),
              LONG_INT((0)));
       FI;
       
	   FI;
	   

		(E_MT_37_CTR_MC1408D):
		  IF (B_CNTR_C1408D.B_LOW /= ZS_FFFE)
	   	  AND (B_CNTR_C1408D.B_HIGH /= ZS_FFFF)
	   THEN
	   	 ZQ_LONG_SUM2.ZB_LOW := B_CNTR_C1408D.B_LOW;
       ZQ_LONG_SUM2.ZB_HIGH := B_CNTR_C1408D.B_HIGH;
       	
       IF B_VMC001D /= 0L
       THEN
          ZQ_LONG_SUM2.ZB_LONG := ZQ_LONG_SUM2.ZB_LONG * 10L;
          ZQ_LONG_AVG2.ZB_LONG := ZQ_LONG_SUM2.ZB_LONG / B_VMC001D;
          
         ZQ_LONG_AVG1.ZB_LOW := B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_LOW;
       ZQ_LONG_AVG1.ZB_HIGH := B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_HIGH;
       	
       	IF ((ZQ_LONG_AVG1.ZB_LOW /= ZS_FFFE)
       	  AND (ZQ_LONG_AVG1.ZB_HIGH /= ZS_FFFF))
       	  AND (ZQ_LONG_AVG2.ZB_LONG /= 0L)
       	  AND (ZQ_LONG_AVG1.ZB_LONG /= 0L)
       	THEN
       	   ZQ_LONG_AVG2.ZB_LONG := (ZQ_LONG_AVG2.ZB_LONG 
       	   	                       + ZQ_LONG_AVG1.ZB_LONG) / 2L;
       	FI;
       	
       B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_LOW := ZQ_LONG_AVG2.ZB_LOW;
       B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_HIGH := ZQ_LONG_AVG2.ZB_HIGH;
       	
       ELSE
          B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_LOW := ZS_FFFE;
          B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_HIGH := ZS_FFFF;
          TRACEINFO :='WRNG VMS-D CALL NB 0 IN CELL(%d)';
          TRC_BSC_PM1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCDC),
              TRACEID(ERIR),
              TRACEINFO,
              LONG_INT((ZQ_CELL_IDX)),
              LONG_INT((0)),
              LONG_INT((0)));
       FI;
       
	   FI;		
		
		/*MC1409X SERIES*/
		(E_MT_37_CTR_MC1409A):
		  IF (B_CNTR_C1409A.B_LOW /= ZS_FFFE)
	   	  AND (B_CNTR_C1409A.B_HIGH /= ZS_FFFF)
	   THEN
	   	 ZQ_LONG_SUM2.ZB_LOW := B_CNTR_C1409A.B_LOW;
       ZQ_LONG_SUM2.ZB_HIGH := B_CNTR_C1409A.B_HIGH;
       	
       IF B_VMC001A /= 0L
       THEN
          ZQ_LONG_SUM2.ZB_LONG := ZQ_LONG_SUM2.ZB_LONG * 10L;
          ZQ_LONG_AVG2.ZB_LONG := ZQ_LONG_SUM2.ZB_LONG / B_VMC001A;
          
         ZQ_LONG_AVG1.ZB_LOW := B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_LOW;
       ZQ_LONG_AVG1.ZB_HIGH := B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_HIGH;
       	
       	IF ((ZQ_LONG_AVG1.ZB_LOW /= ZS_FFFE)
       	  AND (ZQ_LONG_AVG1.ZB_HIGH /= ZS_FFFF))
       	  AND (ZQ_LONG_AVG2.ZB_LONG /= 0L)
       	  AND (ZQ_LONG_AVG1.ZB_LONG /= 0L)
       	THEN
       	   ZQ_LONG_AVG2.ZB_LONG := (ZQ_LONG_AVG2.ZB_LONG 
       	   	                       + ZQ_LONG_AVG1.ZB_LONG) / 2L;
       	FI;
       	
       B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_LOW := ZQ_LONG_AVG2.ZB_LOW;
       B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_HIGH := ZQ_LONG_AVG2.ZB_HIGH;
       	
       ELSE
          B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_LOW := ZS_FFFE;
          B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_HIGH := ZS_FFFF;
       
	   FI;
	   FI;
	  

		(E_MT_37_CTR_MC1409B):
		  IF (B_CNTR_C1409B.B_LOW /= ZS_FFFE)
	   	  AND (B_CNTR_C1409B.B_HIGH /= ZS_FFFF)
	   THEN
	   	 ZQ_LONG_SUM2.ZB_LOW := B_CNTR_C1409B.B_LOW;
       ZQ_LONG_SUM2.ZB_HIGH := B_CNTR_C1409B.B_HIGH;
       	
       IF B_VMC001B /= 0L
       THEN
          ZQ_LONG_SUM2.ZB_LONG := ZQ_LONG_SUM2.ZB_LONG * 10L;
          ZQ_LONG_AVG2.ZB_LONG := ZQ_LONG_SUM2.ZB_LONG / B_VMC001B;
          
         ZQ_LONG_AVG1.ZB_LOW := B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_LOW;
       ZQ_LONG_AVG1.ZB_HIGH := B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_HIGH;
       	
       	IF ((ZQ_LONG_AVG1.ZB_LOW /= ZS_FFFE)
       	  AND (ZQ_LONG_AVG1.ZB_HIGH /= ZS_FFFF))
       	  AND (ZQ_LONG_AVG2.ZB_LONG /= 0L)
       	  AND (ZQ_LONG_AVG1.ZB_LONG /= 0L)
       	THEN
       	   ZQ_LONG_AVG2.ZB_LONG := (ZQ_LONG_AVG2.ZB_LONG 
       	   	                       + ZQ_LONG_AVG1.ZB_LONG) / 2L;
       	FI;
       	
       B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_LOW := ZQ_LONG_AVG2.ZB_LOW;
       B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_HIGH := ZQ_LONG_AVG2.ZB_HIGH;
       	
       ELSE
          B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_LOW := ZS_FFFE;
          B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_HIGH := ZS_FFFF;
       
	   FI;
	   FI;
	 
	
		(E_MT_37_CTR_MC1409C):
		  IF (B_CNTR_C1409C.B_LOW /= ZS_FFFE)
	   	  AND (B_CNTR_C1409C.B_HIGH /= ZS_FFFF)
	   THEN
	   	 ZQ_LONG_SUM2.ZB_LOW := B_CNTR_C1409C.B_LOW;
       ZQ_LONG_SUM2.ZB_HIGH := B_CNTR_C1409C.B_HIGH;
       	
       IF B_VMC001C /= 0L
       THEN
          ZQ_LONG_SUM2.ZB_LONG := ZQ_LONG_SUM2.ZB_LONG * 10L;
          ZQ_LONG_AVG2.ZB_LONG := ZQ_LONG_SUM2.ZB_LONG / B_VMC001C;
          
         ZQ_LONG_AVG1.ZB_LOW := B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_LOW;
       ZQ_LONG_AVG1.ZB_HIGH := B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_HIGH;
       	
       	IF ((ZQ_LONG_AVG1.ZB_LOW /= ZS_FFFE)
       	  AND (ZQ_LONG_AVG1.ZB_HIGH /= ZS_FFFF))
       	  AND (ZQ_LONG_AVG2.ZB_LONG /= 0L)
       	  AND (ZQ_LONG_AVG1.ZB_LONG /= 0L)
       	THEN
       	   ZQ_LONG_AVG2.ZB_LONG := (ZQ_LONG_AVG2.ZB_LONG 
       	   	                       + ZQ_LONG_AVG1.ZB_LONG) / 2L;
       	FI;
       	
       B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_LOW := ZQ_LONG_AVG2.ZB_LOW;
       B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_HIGH := ZQ_LONG_AVG2.ZB_HIGH;
       	
       ELSE
          B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_LOW := ZS_FFFE;
          B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_HIGH := ZS_FFFF;
       
	   FI;
	   FI;
	  
		(E_MT_37_CTR_MC1409D):
		  IF (B_CNTR_C1409D.B_LOW /= ZS_FFFE)
	   	  AND (B_CNTR_C1409D.B_HIGH /= ZS_FFFF)
	   THEN
	   	 ZQ_LONG_SUM2.ZB_LOW := B_CNTR_C1409D.B_LOW;
       ZQ_LONG_SUM2.ZB_HIGH := B_CNTR_C1409D.B_HIGH;
       	
       IF B_VMC001D /= 0L
       THEN
          ZQ_LONG_SUM2.ZB_LONG := ZQ_LONG_SUM2.ZB_LONG * 10L;
          ZQ_LONG_AVG2.ZB_LONG := ZQ_LONG_SUM2.ZB_LONG / B_VMC001D;
          
         ZQ_LONG_AVG1.ZB_LOW := B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_LOW;
       ZQ_LONG_AVG1.ZB_HIGH := B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_HIGH;
       	
       	IF ((ZQ_LONG_AVG1.ZB_LOW /= ZS_FFFE)
       	  AND (ZQ_LONG_AVG1.ZB_HIGH /= ZS_FFFF))
       	  AND (ZQ_LONG_AVG2.ZB_LONG /= 0L)
       	  AND (ZQ_LONG_AVG1.ZB_LONG /= 0L)
       	THEN
       	   ZQ_LONG_AVG2.ZB_LONG := (ZQ_LONG_AVG2.ZB_LONG 
       	   	                       + ZQ_LONG_AVG1.ZB_LONG) / 2L;
       	FI;
       	
       B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_LOW := ZQ_LONG_AVG2.ZB_LOW;
       B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_HIGH := ZQ_LONG_AVG2.ZB_HIGH;
       	
       ELSE
          B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_LOW := ZS_FFFE;
          B_MC1401A_TO_MC1409D(ZQ_COUNTER).B_HIGH := ZS_FFFF;
       
	   FI;
	   FI;
	
	  ELSE
	  ESAC;
	OD;
	OD;
	OD;
	OD;
	OD;
OD;
  

END Q_S0665_DO_MC1408X_MC1409X_CALC;



/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0660_DO_NEXT_POLL_ACTION                         */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       GETS NEXT TO POLL AND POLLS. IF NONE TO POLL THEN BUILDS     */
/*       HISTORY FILES AND DOES ALERTER CALCULATIONS/ACTIONS.         */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_PROC_NBR ZM_PROC_NBR                       */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      1082_PM_POLL_COMPL                            */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0630_GET_NEXT_LDCP_TO_POLL                 */
/*                      Q_S0602_POLL_LDC                              */
/*                      Q_S0656_ALL_PROC_INSTS_FREE                   */
/*                      Q_S0596_CALC_ALERT_THRES                      */
/*                      Q_S0800_UPDATE_HISTORY_FILES                  */
/*                      Q_S0180_MEAS_TYPE_RUNNING                     */
/*                      Q_S0801_UPDATE_HISTORY_FILE                   */
/*     CALLED FROM:                                                   */
/*                      Q_S0600_START_OF_POLLING                      */
/*                      Q_S0670_PROCESS_POLLING_RESPONSE              */
/*                      Q_S0680_PROCESS_TIMER_EXPIRY                  */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0660_DO_NEXT_POLL_ACTION: PROC(ZF_PROC_NBR ZM_PROC_NBR);

DCL ZQ_ACT_IDX    INT;

IF Q_S0630_GET_NEXT_LDCP_TO_POLL(ZF_PROC_NBR)
THEN
 
/*BEGIN CR #1529787: DELAY 0.1S FOR EVERY PROC */
  DO WITH Z_POLL_PROCESS(ZF_PROC_NBR);
  ZB_DELAY_TIMER_ID := Q_S0070_START_TIMER(ZS_DELAY_FOR_PROC,                  
                                         INT(ZF_PROC_NBR*1),                    
                                         ZB_REF_NBR,                            
                                         ZB_SEQ_NBR);
 OD;
 RETURN; 
 /*END CR #1529787*/
 
ELSE
  /* SINCE THERE IS NO MORE LDCPS TO POLL
   * HAVE ALL THE CURRENT POLLING PROCESSES FINISHED?
   */
  IF Q_S0656_ALL_PROC_INSTS_FREE()
  THEN
    /* END OF POLLING ACTIONS */
    Q_S0596_CALC_ALERT_THRES();
    /*begin CR1098364 MC1408/MC1409 improv*/
    IF Q_S0180_MEAS_TYPE_RUNNING(E_MT_VAMOS, ZQ_ACT_IDX)
    THEN
   /*    IF Q_S0200_HIS_UPD_REQ(E_MT_VAMOS)
      THEN*/
        Q_S0665_DO_MC1408X_MC1409X_CALC();
        Q_S0411_RESET_VMC001X();
        Q_S0666_CLEAR_MC1408X_MC1409X_TMP();
     /* FI;    */
    FI;
    /*end CR1098364 MC1408/MC1409 improv*/


    /**/
    P_GDXBYX_UPD_BTS_TO_HIS_TYPE35();
    /**/
    /* UPDATE HISTORY FILES */
    Q_S0800_UPDATE_HISTORY_FILES();

    IF Q_S0180_MEAS_TYPE_RUNNING(E_MT_TRAFFIC_FLOW, ZQ_ACT_IDX)
    THEN
    
      /* FR 36/123574 BEGIN CHENZY */
      IF Q_S0200_HIS_UPD_REQ(E_MT_TRAFFIC_FLOW)
      THEN
        IF Q_S0801_UPDATE_HISTORY_FILE(E_MT_TRAFFIC_FLOW,
                                  CM_FY32_HF_NBR_TYPE_180,
                                  CM_FY32_HF_TYPE_180) 
        THEN
          IF Q_S0140_MOD_R_PM_FILES(E_MT_TRAFFIC_FLOW,
                               E_PM_HIS_UPDATED) 
          THEN
            ;
          FI;
          Q_S0170_MOD_R_PM_ACT(E_MT_TRAFFIC_FLOW, TRUE);
        ELSE
          /* ERRROR AND CLOSE */
          Q_S0170_MOD_R_PM_ACT(E_MT_TRAFFIC_FLOW, FALSE);
        FI;
      FI;
      /* FR 36/123574 END */
      
    FI;
    
    /* FR 36/123574 BEGIN CHENZY */
    TRANSMIT_BASIC_MSG
           1082_PM_POLL_COMPL(E_SUCC_REPING,
                              PTR(Z_T180_1_PTR),
                              PTR(Z_T180_2_PTR),
                              /*WITTS 76*/
                              PTR(Z_T26_PTR),
                              PTR(Z_T26_2_PTR))
                              /*END WITTS 76*/
      TO (M_FS_MEAS_COORDINATOR);
    /* FR 36/123574 END */
    
  FI;
FI;
END Q_S0660_DO_NEXT_POLL_ACTION;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0670_PROCESS_POLLING_RESPONSE                    */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       PROCESSES THE POLLING RESPONSES AND DISPATCHES THE           */
/*       USER BUFFER FOR PROCESSING. GETS NEXT TO POLL AND POLLS.     */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LDC_LCE_ID M_LCE_ID,                       */
/*                      ZF_LDC_TYPE M_FMM_SELECTOR,                   */
/*                      ZF_LAST_MSG BOOL,                             */
/*                      ZF_LDC_SEQ_NBR M_BYTE,                        */
/*                      ZF_REF_NBR INT,                               */
/*                      ZF_VALIDITY M_PM_DATA_VALIDITY,               */
/*                      ZF_POLL_RESP ZM_POLL_RSP,                     */
/*                      ZF_LDC_BUF_PTR PTR                            */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0655_FIND_PROC_INST_LCE                    */
/*                      Q_S0080_CANCEL_TIMER                          */
/*                      Q_S0608_STD_POLL_REQ                          */
/*                      Q_S0400_UPD_CCI_STD_CNTRS                     */
/*                      Q_S0610_DETAIL_POLL_REQ                       */
/*                      Q_S0430_UPD_T180_CTRS                         */
/*                      Q_S0650_FREE_PROC_INST                        */
/*                      Q_S0660_DO_NEXT_POLL_ACTION                   */
/*                      Q_S0606_POLL_CURR_LDC                         */
/*     CALLED FROM:                                                   */
/*                      Q_S1000_CCDC_FSM                              */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0670_PROCESS_POLLING_RESPONSE: PROC(
                            ZF_LDC_LCE_ID  M_LCE_ID,
                            ZF_LDC_TYPE    M_FMM_SELECTOR,
                            ZF_LAST_MSG    BOOL,
                            ZF_LDC_SEQ_NBR M_BYTE,
                            ZF_REF_NBR     INT,
                            ZF_VALIDITY    M_PM_DATA_VALIDITY,
                            ZF_POLL_RESP   ZM_POLL_RSP,
                            ZF_LDC_BUF_PTR PTR,
/* FR 176777 START */
                            ZF_NB_ATTAMPTS INT);
/* FR 176777 END   */ 

DCL ZQ_PROC_NBR  ZM_PROC_NBR;
DCL ZQ_VALIDITY  M_PM_DATA_VALIDITY;
DCL ZQ_LAST_MSG  BOOL;
DCL ZQ_STD_TRX   BOOL;
/*for FR 3BKA36FBR224825*/
DCL ZQ_TC_ID M_TC_ID;
/*for FR 3BKA36FBR224825*/

/* MARK USER BUFFER WITH CCDC IDENTITY IN CASE IT IS NOT RELEASED */
IF ZF_LDC_BUF_PTR /= NULL
THEN
  ZF_LDC_BUF_PTR -> M_FMM_ID := M_FI_CC_DATA_COLLECTOR;
FI;

/* FIND THE POLLING PROCESS INSTANCE */
IF (Q_S0655_FIND_PROC_INST_LCE(ZF_LDC_LCE_ID,
                               ZF_REF_NBR,
                     	/* FR 176777 START */
                     	       ZF_POLL_RESP,
                     	/* FR 176777 START */          
                               ZQ_PROC_NBR))
THEN
/*WIPRO:B10_MX_MR1 RT TRACE*/
   TRACEINFO := 'FIND_PROC_INST success(%d %d %d)';
   TRC_BSC_PM3(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCDC),
              TRACEID(NORM),
              TRACEINFO,
              LONG_INT((ZF_LDC_LCE_ID)),
              LONG_INT((ZF_REF_NBR)),
              LONG_INT((ZF_POLL_RESP)));
/*END WIPRO:B10_MX_MR1 RT TRACE*/

/* FR 176777 START */
/*to check seq nbr instead of attmpt number
Incase seq nbr is diff ignore the message . If seq nbr is same
then and attmpt number is different accept the message for counter
validity*/
  /*Commented for FR 20/192118*/ 
  /*IF (Q_S0657_CHK_DTC_SEQ(ZF_LDC_TYPE,ZQ_PROC_NBR,ZF_LDC_SEQ_NBR))*/
  /*Commented for FR 20/192118*/ 
  /*Added for FR 20/192118*/ 
  IF (Q_S0657_CHK_SEQ(ZF_LDC_TYPE,ZF_LDC_LCE_ID,ZQ_PROC_NBR,
                      ZF_LDC_SEQ_NBR))
  /*Added for FR 20/192118*/ 
  THEN
/*WIPRO:B10_MX_MR1 RT TRACE*/
   TRACEINFO := 'Call CHK_SEQ success  (%d %d %d)';
   TRC_BSC_PM3(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCDC),
              TRACEID(NORM),
              TRACEINFO,
              LONG_INT((ZF_LDC_TYPE)),
              LONG_INT((ZQ_PROC_NBR)),
              LONG_INT((ZF_LDC_SEQ_NBR)));
/*END WIPRO:B10_MX_MR1 RT TRACE*/

/* FR 176777 END   */ 
   Q_S0080_CANCEL_TIMER(Z_POLL_PROCESS(ZQ_PROC_NBR).ZB_TIMER_ID);
/*WIPRO:B10_MX_MR1 RT TRACE*/
   TRACEINFO := 'Calling UPD_POLL_REP  (%d %d %d)';
   TRC_BSC_PM3(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCDC),
              TRACEID(NORM),
              TRACEINFO,
              LONG_INT((Z_POLL_PROCESS(ZQ_PROC_NBR).ZB_NB_ATTEMPTS)),
              LONG_INT((ZF_LAST_MSG)),
              LONG_INT((ZF_VALIDITY)));
/*END WIPRO:B10_MX_MR1 RT TRACE*/

   Q_S0930_UPDATE_POLL_REPLIES(Z_POLL_PROCESS(ZQ_PROC_NBR)
 
                                            .ZB_NB_ATTEMPTS);
   Z_POLL_PROCESS(ZQ_PROC_NBR).ZB_NB_ATTEMPTS := 0;
   ZQ_VALIDITY:=ZF_VALIDITY;
   ZQ_LAST_MSG:=ZF_LAST_MSG;
   DO WITH Z_POLL_PROCESS(ZQ_PROC_NBR);
    IF ZB_POLL_STEP = ZE_POLL_DTC_STAN_TRX
      THEN
      ZQ_STD_TRX := TRUE;
    ELSE
      ZQ_STD_TRX := FALSE;
    FI;
   OD;
/* FR 176777 DEBUG */
/*Commented for FR 20/192118*/
   /*IF (ZF_LDC_TYPE = M_FS_DTC_TRF_LDC)
       AND (ZQ_VALIDITY = E_DATA_INVALID)
    THEN
       IF Q_S0950_ADD_ONE_TO_DPVAL(Z_DEBUG_VAR.ZB_DTC_RCD_FRM_194) 
       THEN
        Z_DEBUG_VAR.ZB_DTC_RCD_FRM_194.B_HIGH          := 0;
        Z_DEBUG_VAR.ZB_DTC_RCD_FRM_194.B_LOW           := 0;
       FI;
   ELSIF (ZF_LDC_TYPE = M_FS_TCU_TRF_LDC)
       AND (ZQ_VALIDITY = E_DATA_INVALID)
    THEN
       IF Q_S0950_ADD_ONE_TO_DPVAL(Z_DEBUG_VAR.ZB_TCU_RCD_FRM_194)
       THEN
         Z_DEBUG_VAR.ZB_TCU_RCD_FRM_194.B_HIGH          := 0;
         Z_DEBUG_VAR.ZB_TCU_RCD_FRM_194.B_LOW           := 0;
       FI;
   ELSIF (ZF_LDC_TYPE = M_FS_TCHRM_LDC)
       AND (ZQ_VALIDITY = E_DATA_INVALID)
    THEN
      IF Q_S0950_ADD_ONE_TO_DPVAL(Z_DEBUG_VAR.ZB_TCHRM_RCD_FRM_194)
      THEN
        Z_DEBUG_VAR.ZB_TCHRM_RCD_FRM_194.B_HIGH        := 0;
        Z_DEBUG_VAR.ZB_TCHRM_RCD_FRM_194.B_LOW        := 0;
      FI;
   FI;*/
   
/*Commented for FR 20/192118*/   
/*Added for FR 20/192118*/   
	IF (ZF_LDC_TYPE = M_FS_TCHRM_LDC)AND 
	     NOT (ZQ_VALIDITY = E_DATA_VALID)
	THEN
	   IF Q_S0658_CHK_INVL_FOR_ACT_STNBY(ZF_LDC_LCE_ID,
	                                 ZF_LDC_TYPE,
	                                 ZQ_VALIDITY)
	   THEN 
	    IF Q_S0136_DTC_CE_FUNC(ZF_LDC_LCE_ID, E_CE_FUNCT_TEL_DTC)                           
	    THEN
	     Q_S0659_UPD_DEBUG_CNTR_EVT(E_INV_RCD_FRM_TCH);
	     /*WIPRO:B10_MX_MR1 RT TRACE*/
           TRACEINFO := 'DEBUG upd E_INV_RCD_FRM_TCH (%d)';
           TRC_BSC_PM3(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCDC),
              TRACEID(NORM),
              TRACEINFO,
              LONG_INT((E_INV_RCD_FRM_TCH)),
              LONG_INT((0)),
              LONG_INT((0)));
         /*END WIPRO:B10_MX_MR1 RT TRACE*/
 
        ELSE
	     Q_S0659_UPD_DEBUG_CNTR_EVT(E_INV_RCD_FRM_STCH);
         /*WIPRO:B10_MX_MR1 RT TRACE*/
           TRACEINFO := 'DEBUG upd E_INV_RCD_FRM_STCH(%d)';
           TRC_BSC_PM3(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCDC),
              TRACEID(NORM),
              TRACEINFO,
              LONG_INT((E_INV_RCD_FRM_STCH)),
              LONG_INT((0)),
              LONG_INT((0)));
         /*END WIPRO:B10_MX_MR1 RT TRACE*/
	    
        FI ;
	   FI;
	ELSIF (ZF_LDC_TYPE = M_FS_CPR_N_7_LDC) AND
	     NOT (ZQ_VALIDITY = E_DATA_VALID)
	THEN
	   IF Q_S0658_CHK_INVL_FOR_ACT_STNBY(ZF_LDC_LCE_ID,
	                                 ZF_LDC_TYPE,
	                                 ZQ_VALIDITY)
	   THEN                            
	    Q_S0659_UPD_DEBUG_CNTR_EVT(E_INV_RCD_FRM_CPR);	    
        /*WIPRO:B10_MX_MR1 RT TRACE*/
           TRACEINFO := 'DEBUG upd E_INV_RCD_FRM_CPR (%d)';
           TRC_BSC_PM3(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCDC),
              TRACEID(NORM),
              TRACEINFO,
              LONG_INT((E_INV_RCD_FRM_CPR)),
              LONG_INT((0)),
              LONG_INT((0)));
        /*END WIPRO:B10_MX_MR1 RT TRACE*/
       FI;
	ELSIF (ZQ_VALIDITY = E_DATA_INVALID)   
        THEN
	  /*Commented for CR36/288765*/
	  /*Q_S0662_UPD_DEBUG_MSG_INVL_EVT(ZF_LDC_TYPE);*/
	  /*Commented for CR36/288765*/
	  /*START: CR36/288765*/
	  DO WITH Z_POLL_PROCESS(ZQ_PROC_NBR);
	     Q_S0662_UPD_DEBUG_MSG_INVL_EVT(ZF_LDC_TYPE,
	                                    ZF_LDC_LCE_ID,
		                            ZB_POLL_STEP);
	  OD;
	  /*END: CR36/288765*/
	FI;
/*Added for FR 20/192118*/   
/* FR 176777 DEBUG */
/*Added for FR 20/192118*/   
  /*IF ZF_LDC_SEQ_NBR /= Z_POLL_PROCESS(ZQ_PROC_NBR).ZB_SEQ_NBR
   THEN*/
/*Added for FR 20/192118*/      
    /* THIS IS THE CORRECT SEQUENCE NUMBER SO UPDATE THE COUNTERS */
/* FR 176777 DEBUG */
    /*Commented for FR 20/192118*/ 
    /*IF ( ZF_LDC_TYPE = M_FS_TCU_TRF_LDC)
    THEN
       IF Q_S0950_ADD_ONE_TO_DPVAL
             (Z_DEBUG_VAR.ZB_WRONG_SEQ_NUM_TCU)
       THEN
         Z_DEBUG_VAR.ZB_WRONG_SEQ_NUM_TCU.B_HIGH            := 0;
         Z_DEBUG_VAR.ZB_WRONG_SEQ_NUM_TCU.B_LOW            := 0;
       FI;
    ELSIF (  ZF_LDC_TYPE = M_FS_TCHRM_LDC)
    THEN
       IF Q_S0950_ADD_ONE_TO_DPVAL
             (Z_DEBUG_VAR.ZB_WRONG_SEQ_NUM_TCHRM)
       THEN
          Z_DEBUG_VAR.ZB_WRONG_SEQ_NUM_TCHRM.B_HIGH          := 0;
          Z_DEBUG_VAR.ZB_WRONG_SEQ_NUM_TCHRM.B_LOW          := 0;
       FI;
    ELSIF (  ZF_LDC_TYPE = M_FS_DTC_TRF_LDC)
    THEN
       IF Q_S0950_ADD_ONE_TO_DPVAL
             (Z_DEBUG_VAR.ZB_WRONG_SEQ_NUM_DTC)
       THEN
          Z_DEBUG_VAR.ZB_WRONG_SEQ_NUM_DTC.B_HIGH           := 0;
          Z_DEBUG_VAR.ZB_WRONG_SEQ_NUM_DTC.B_LOW            := 0;
       FI;
   FI;*/
   /*Commented for FR 20/192118*/ 
/* FR 176777 DEBUG */
/*Commented for FR 20/192118*/   
    /*ZQ_VALIDITY:=E_DATA_INVALID;
    ZQ_LAST_MSG:=TRUE;
    DO WITH Z_POLL_PROCESS(ZQ_PROC_NBR);
      IF ZB_SEQ_NBR = 1
      THEN*/
        /* UPDATE THE LOST SAMPLES */
        /*IF Q_S0608_STD_POLL_REQ(ZB_POLL_STEP)
        THEN
          Q_S0400_UPD_CCI_STD_CNTRS(ZB_LCE_ID,
                                    ZB_LDC_TYPE,
                                    ZB_SEQ_NBR,
                                    E_DATA_INVALID,
                                    NULL,
                                    ZQ_STD_TRX);
        ELSIF Q_S0610_DETAIL_POLL_REQ(ZB_POLL_STEP)
        THEN
          P_GDXBYX_UPD_CCI_DETAIL_CTRS(ZB_LCE_ID,
                                       ZB_LDC_TYPE,
                                       ZB_SEQ_NBR,
                                       E_DATA_INVALID,
                                       NULL);
        
        ELSIF ZB_POLL_STEP = ZE_POLL_TCU_T26
        THEN
          P_GDXBYX_UPD_CCI_T26_CTRS(ZB_LCE_ID,
                                    ZB_LDC_TYPE,
                                    ZB_SEQ_NBR,
                                    E_DATA_INVALID,
                                    NULL);

        ELSIF (ZB_POLL_STEP = ZE_POLL_TP_N7) OR
              (ZB_POLL_STEP = ZE_POLL_OMCP_N7)
        THEN
          P_GDXBYX_UPD_CCI_TP_CTRS(ZB_LCE_ID,
                                   E_DATA_INVALID,
                                   NULL
                                   );

        ELSIF ZB_POLL_STEP = ZE_POLL_TP_HDLC
        THEN
          P_GDXBYX_UPD_CCI_TP_CTRS(ZB_LCE_ID,
                                   E_DATA_INVALID,
                                   NULL);
        ELSIF ZB_POLL_STEP =ZE_POLL_TC_MTP2 
        THEN
          P_GDXBYX_UPD_CCI_TC_MTP2_CTRS(ZB_LCE_ID,
                                   E_DATA_INVALID,
                                   NULL,
                                   Z_TC_ID);
        ELSIF ZB_POLL_STEP = ZE_POLL_TRAFFIC_FLOW
        THEN
          Q_S0430_UPD_T180_CTRS(ZB_LCE_ID,
                                 ZB_LDC_TYPE,
                                 E_DATA_INVALID,
                                 NULL);

        ELSIF ZB_POLL_STEP = ZE_POLL_TCU_EME
        THEN
          P_GDXBYX_UPD_CCI_EME_CTRS(ZB_LCE_ID,
                                    ZB_LDC_TYPE,
                                    ZB_SEQ_NBR,
                                    E_DATA_INVALID,
                                    NULL);
        FI;
        ZB_SEQ_NBR := 2;
      FI;
    OD;
  FI;*/
/*Commented for FR 20/192118*/   
  CASE ZF_POLL_RESP OF
    (ZE_STD,ZE_STD_TRX) : Q_S0400_UPD_CCI_STD_CNTRS(ZF_LDC_LCE_ID,
                                         ZF_LDC_TYPE,
                                         ZF_LDC_SEQ_NBR,
                                         ZQ_VALIDITY,
                                         ZF_LDC_BUF_PTR,
                                         ZQ_STD_TRX);

    (ZE_DET) : P_GDXBYX_UPD_CCI_DETAIL_CTRS(ZF_LDC_LCE_ID,
                                            ZF_LDC_TYPE,
                                            ZF_LDC_SEQ_NBR,
                                            ZQ_VALIDITY,
                                            ZF_LDC_BUF_PTR);

    (ZE_T26) : P_GDXBYX_UPD_CCI_T26_CTRS(ZF_LDC_LCE_ID,
                                         ZF_LDC_TYPE,
                                         ZF_LDC_SEQ_NBR,
                                         ZQ_VALIDITY,
                                         ZF_LDC_BUF_PTR);    
    
    /* ADD IN MXB8 BEGIN */
    /*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE */
    /*1543 & 1544 msg's  are reused for polling req &*/
    /*  polling response as N7-SLH has been moved to OMCP*/
    /* END: ADD-WIPRO-B10-MX-MR2-CHANGE */

    (ZE_TP)  : P_GDXBYX_UPD_CCI_TP_CTRS(ZF_LDC_LCE_ID,
                               /* START : WIPRO B11 IP MR0 PKG1 */
                                        ZF_LDC_SEQ_NBR,
                               /* END : WIPRO B11 IP MR0 PKG1 */ 
                                        ZQ_VALIDITY,
                                        ZF_LDC_BUF_PTR);
    /* ADD IN MXB8 END */
    /* START : WIPRO B11 IP MR0 PKG1 */
    (ZE_TCSL_MR) : P_GDXBYX_UPD_CCI_TCSL_MR_CTRS(ZF_LDC_LCE_ID,
                                        ZQ_VALIDITY,
                                        ZF_LDC_BUF_PTR);

     /* END : WIPRO B11 IP MR0 PKG1 */
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */     
    (ZE_M3UA_LM) : P_GDXBYX_UPD_ASIG_CTRS(ZF_LDC_LCE_ID,
                                        ZF_LDC_SEQ_NBR,
                                        ZQ_VALIDITY,
                                        ZF_LDC_BUF_PTR);

/*START: IURG FEATURE */
    (ZE_IURG) : P_GDXBYX_UPD_IURG_CTRS(ZF_LDC_LCE_ID,
                                        ZF_LDC_SEQ_NBR,
                                        ZQ_VALIDITY,
                                        ZF_LDC_BUF_PTR);
/*END : IURG FEATURE */
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */                                        
    (ZE_TR_FLOW) : Q_S0430_UPD_T180_CTRS(ZF_LDC_LCE_ID,
                                         ZF_LDC_TYPE,
                                         ZQ_VALIDITY,
                                         ZF_LDC_BUF_PTR);

    (ZE_EME) : P_GDXBYX_UPD_CCI_EME_CTRS(ZF_LDC_LCE_ID,
                                         ZF_LDC_TYPE,
                                         ZF_LDC_SEQ_NBR,
                                         ZQ_VALIDITY,
                                         ZF_LDC_BUF_PTR);
    
    /*for FR 3BKA36FBR224825*/                                         
    (ZE_TC) :           
	 DO WITH Z_POLL_PROCESS(ZQ_PROC_NBR);
           ZQ_TC_ID := ZB_TC_ID;
    	   IF ZB_POLL_STEP = ZE_POLL_TC_MTP2 
    	   THEN
    	     P_GDXBYX_UPD_CCI_TC_MTP2_CTRS(ZF_LDC_LCE_ID,
                                           ZF_VALIDITY,
                                           ZF_LDC_BUF_PTR,
                                           ZQ_TC_ID,
                                           E_TC_MTP2); 
                                    	    
    	   ELSE
    	     P_GDXBYX_UPD_CCI_TC_MTP2_CTRS(ZF_LDC_LCE_ID,
                                           ZF_VALIDITY,
                                           ZF_LDC_BUF_PTR,
                                           ZQ_TC_ID,
                                           E_TC_IP); 
    	   FI;       
         OD;
    /*for FR 3BKA36FBR224825*/  
    ELSE;/*TC POLLING WILL CHECKED IN OTHER PROC*/
  ESAC;

   IF ZQ_LAST_MSG
   THEN
    Q_S0650_FREE_PROC_INST(ZQ_PROC_NBR);
    Q_S0660_DO_NEXT_POLL_ACTION(ZQ_PROC_NBR);
   ELSE
    /* STAY ON THIS LDCP AND GET SOME MORE */
    Q_S0606_POLL_CURR_LDC(ZQ_PROC_NBR);
   FI;
/* FR 176777 START */
 FI;
/* FR 176777 END   */ 
FI;

END Q_S0670_PROCESS_POLLING_RESPONSE;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0680_PROCESS_TIMER_EXPIRY                        */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       PROCESSES THE TIMER EXPIRY FOR THE POLLING SUPERVISION.      */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_TIMER_ID M_TIMER_IDENT                     */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0653_FIND_PROC_INST_TIMER                  */
/*                      Q_S0608_STD_POLL_REQ                          */
/*                      Q_S0400_UPD_CCI_STD_CNTRS                     */
/*                      Q_S0610_DETAIL_POLL_REQ                       */
/*                      Q_S0430_UPD_T180_CTRS                         */
/*                      Q_S0650_FREE_PROC_INST                        */
/*                      Q_S0660_DO_NEXT_POLL_ACTION                   */
/*     CALLED FROM:                                                   */
/*                      Q_S1000_CCDC_FSM                              */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0680_PROCESS_TIMER_EXPIRY: PROC(ZF_TIMER_ID  M_TIMER_IDENT);

DCL ZQ_PROC_NBR  ZM_PROC_NBR;
DCL ZQ_STD_TRX   BOOL;
DCL ZQ_I         INT;
DCL ZQ_PROC_NBR_CNT ZM_PROC_NBR;
 /*BEGIN CR #1529787: DELAY 0.1S FOR EVERY PROC */
IF ZF_TIMER_ID  /= M_TIMER_IDENT_NULL
	THEN 	                                            
		DO FOR ZQ_PROC_NBR_CNT := 1 TO ZS_MAX_PARA_POLL;                               
			DO WITH Z_POLL_PROCESS(ZQ_PROC_NBR_CNT);                                                                         
			IF ZB_DELAY_TIMER_ID = ZF_TIMER_ID          
				THEN
					RELEASE_TIMER(ZB_DELAY_TIMER_ID);                                                               
					ZB_DELAY_TIMER_ID	:=   M_TIMER_IDENT_NULL;  
		    		    	                                   
					Q_S0602_POLL_LDC(ZQ_PROC_NBR_CNT);                                         
                                                                        
			RETURN;                                                                         
			FI;
			OD;                                                    
		OD;                                                                           
FI; 
/*END CR #1529787*/         


IF Q_S0653_FIND_PROC_INST_TIMER(ZF_TIMER_ID,
                                ZQ_PROC_NBR)
  THEN
  DO WITH Z_POLL_PROCESS(ZQ_PROC_NBR);
    
    /*WIPRO:B10_MX_MR1 RT TRACE*/
    /*RELEASE_TIMER(ZB_TIMER_ID);*/
             TRACEINFO    := 'TIMER EXPIRY (%d)               ';
             TRC_BSC_PM2(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCDC),
              TRACEID(NORM),
              TRACEINFO,
              LONG_INT((ZB_TIMER_ID)),
              LONG_INT((0)),
              LONG_INT((0)));
    RELEASE_TIMER(ZB_TIMER_ID);
	
	/* BEGIN: CR 605005 */
	
	IF ZB_POLL_STEP = ZE_POLL_PM_CPI AND
	   ZB_NB_ATTEMPTS = ZS_RETRY_HW_AUDIT_REQ AND
           Z_AUDIT_STAT = ZE_PM_CPI_AUDIT_REQ
	   
	THEN   
	  Q_S0602_POLL_LDC(ZQ_PROC_NBR);
	
    /* BEGIN: CHANGE-WIPRO-FR 20/192118 RETRY-6ALLCE */ 
    ELSIF ZB_NB_ATTEMPTS < ZS_MAX_POLL_ATTMPT  
	/* END: CR 605005 */
    /*for FR 3BKA36FBR224825*/
      AND NOT ( ZB_POLL_STEP = ZE_POLL_TC_MTP2
                 OR
                 ZB_POLL_STEP = ZE_POLL_TC_IP
                 OR
                 ZB_POLL_STEP = ZE_POLL_PM_CPI)
     /*for FR 3BKA36FBR224825*/  
      /*IF Q_S0681_CHK_ATTMPT_NOT_EXCEED(ZB_NB_ATTEMPTS,ZB_LCE_ID)*/
    /* END: CHANGE-WIPRO-FR 20/192118 RETRY-6ALLCE */  
      THEN
         Q_S0602_POLL_LDC(ZQ_PROC_NBR);
      ELSE
      IF ZB_POLL_STEP = ZE_POLL_DTC_STAN_TRX
        THEN
        ZQ_STD_TRX := TRUE;
      ELSE
        ZQ_STD_TRX := FALSE;
      FI;
      /* UPDATE THE LOST SAMPLES */
      IF Q_S0608_STD_POLL_REQ(ZB_POLL_STEP)
        THEN
        /* FR 176777 DEBUG */
        /*Commented for FR 20/192118*/
        /*IF (ZB_LDC_TYPE = M_FS_TCU_TRF_LDC)
        THEN
           IF Q_S0950_ADD_ONE_TO_DPVAL
                      (Z_DEBUG_VAR.ZB_TIMER_EXPIRY_RETRY3_TCU)
           THEN
              Z_DEBUG_VAR.ZB_TIMER_EXPIRY_RETRY3_TCU.B_HIGH      := 0;
              Z_DEBUG_VAR.ZB_TIMER_EXPIRY_RETRY3_TCU.B_LOW      := 0;
           FI;
        ELSIF (ZB_LDC_TYPE = M_FS_TCHRM_LDC)
        THEN
           IF Q_S0950_ADD_ONE_TO_DPVAL
                      (Z_DEBUG_VAR.ZB_TIMER_EXPIRY_RETRY3_TCHRM)
            THEN
              Z_DEBUG_VAR.ZB_TIMER_EXPIRY_RETRY3_TCHRM.B_HIGH    := 0;
              Z_DEBUG_VAR.ZB_TIMER_EXPIRY_RETRY3_TCHRM.B_LOW    := 0;
           FI;
        ELSIF (ZB_LDC_TYPE = M_FS_DTC_TRF_LDC)
        THEN
           IF Q_S0950_ADD_ONE_TO_DPVAL
                      (Z_DEBUG_VAR.ZB_TIMER_EXPIRY_RETRY3_DTC)
           THEN
              Z_DEBUG_VAR.ZB_TIMER_EXPIRY_RETRY3_DTC.B_HIGH      := 0;
              Z_DEBUG_VAR.ZB_TIMER_EXPIRY_RETRY3_DTC.B_LOW      := 0;
           FI;
        FI;*/
/* FR 176777 DEBUG */
        /*Commented for FR 20/192118*/
        /*ADDED for FR 20/192118*/
        Q_S0663_UPD_DEBUG_MSG_RETRY3_EVT(ZB_LDC_TYPE,ZB_LCE_ID,
                                           ZB_POLL_STEP);
        /*ADDED for FR 20/192118*/
        DO FOR ZQ_I :=  ZB_SEQ_NBR TO ZS_MAX_TYPE_DTC_BUFF;
          Q_S0400_UPD_CCI_STD_CNTRS(ZB_LCE_ID,
                                    ZB_LDC_TYPE,
                                    ZQ_I,
                                    E_DATA_INVALID,
                                    NULL,
                                    ZQ_STD_TRX);
        OD;
      ELSIF Q_S0610_DETAIL_POLL_REQ(ZB_POLL_STEP)
        THEN
        /*ADDED for FR 20/192118*/
        Q_S0663_UPD_DEBUG_MSG_RETRY3_EVT(ZB_LDC_TYPE,ZB_LCE_ID,
                 ZB_POLL_STEP);
        /*ADDED for FR 20/192118*/
        P_GDXBYX_UPD_CCI_DETAIL_CTRS(ZB_LCE_ID,
                                     ZB_LDC_TYPE,
                                     ZB_SEQ_NBR,
                                     E_DATA_INVALID,
                                     NULL);

      ELSIF ZB_POLL_STEP = ZE_POLL_TCU_T26
        THEN
        /*ADDED for FR 20/192118*/
        Q_S0663_UPD_DEBUG_MSG_RETRY3_EVT(ZB_LDC_TYPE,ZB_LCE_ID,
         ZB_POLL_STEP);
        /*ADDED for FR 20/192118*/
        P_GDXBYX_UPD_CCI_T26_CTRS(ZB_LCE_ID,
                                  ZB_LDC_TYPE,
                                  ZB_SEQ_NBR,
                                  E_DATA_INVALID,
                                  NULL);

      ELSIF ZB_POLL_STEP = ZE_POLL_TRAFFIC_FLOW
        THEN
        /*ADDED for FR 20/192118*/
        Q_S0663_UPD_DEBUG_MSG_RETRY3_EVT(ZB_LDC_TYPE,ZB_LCE_ID,
        ZB_POLL_STEP);
        /*ADDED for FR 20/192118*/
        Q_S0430_UPD_T180_CTRS(ZB_LCE_ID,
                              ZB_LDC_TYPE,
                              E_DATA_INVALID,
                              NULL);

      ELSIF ZB_POLL_STEP = ZE_POLL_TCU_EME
        THEN
        /*ADDED for FR 20/192118*/
        Q_S0663_UPD_DEBUG_MSG_RETRY3_EVT(ZB_LDC_TYPE,ZB_LCE_ID,
        ZB_POLL_STEP);
        /*ADDED for FR 20/192118*/
        P_GDXBYX_UPD_CCI_EME_CTRS(ZB_LCE_ID,
                                  ZB_LDC_TYPE,
                                  ZB_SEQ_NBR,
                                  E_DATA_INVALID,
                                  NULL);


      ELSIF Q_S0611_TP_POLL_REQ(ZB_POLL_STEP)
        THEN
         /*START: CR36/288765*/
	  Q_S0663_UPD_DEBUG_MSG_RETRY3_EVT(ZB_LDC_TYPE,ZB_LCE_ID,
                                           ZB_POLL_STEP);
	 /*END: CR36/288765*/
          P_GDXBYX_UPD_CCI_TP_CTRS(ZB_LCE_ID,
                     /* START : WIPRO B11 IP MR0 PKG1 */
                                 ZB_SEQ_NBR,
                     /* END : WIPRO B11 IP MR0 PKG1 */
                                   E_DATA_INVALID,
                                   NULL);
     /*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE */
      ELSIF ZB_POLL_STEP =ZE_POLL_TC_MTP2
        THEN
         /*START: CR36/288765*/
	  Q_S0663_UPD_DEBUG_MSG_RETRY3_EVT(ZB_LDC_TYPE,ZB_LCE_ID,
                                           ZB_POLL_STEP);
	 /*END: CR36/288765*/
          P_GDXBYX_UPD_CCI_TC_MTP2_CTRS(ZB_LCE_ID,
                                   E_DATA_INVALID,
                                   NULL,
           /* START : WIPRO B11 IP MR0 PKG1 */
				   /*START: FR CRI00596704*/
                                   /*Z_TC_ID,*/
				   Z_TC_ID_MTP2,
				   /*END: FR CRI00596704*/
                                   /* START: 3BKA36CBR236941*/
                                   /*E_TC_MTP2_TIMEOUT);*/
                                   E_TC_MTP2);
                                   /* END: 3BKA36CBR236941*/ 
           /* END : WIPRO B11 IP MR0 PKG1 */
        /* END: ADD-WIPRO-B10-MX-MR2-CHANGE */
     /* START : WIPRO B11 IP MR0 PKG1 */
      ELSIF ZB_POLL_STEP =ZE_POLL_TC_IP
        THEN
         /*START: CR36/288765*/
	  Q_S0663_UPD_DEBUG_MSG_RETRY3_EVT(ZB_LDC_TYPE,ZB_LCE_ID,
                                           ZB_POLL_STEP);
	 /*END: CR36/288765*/
          P_GDXBYX_UPD_CCI_TC_MTP2_CTRS(ZB_LCE_ID,
                                   E_DATA_INVALID,
                                   NULL,
			           /*START: FR CRI00596704*/
                                   /*Z_TC_ID,*/
				   Z_TC_ID_IP,
                                   /* START: 3BKA36CBR236941*/
                                   /*E_TC_IP_TIMEOUT);*/
                                   E_TC_IP);
                                   /* END: 3BKA36CBR236941*/

      ELSIF ZB_POLL_STEP = ZE_POLL_TCSL_MR
        THEN
         /*START: CR36/288765*/
	  Q_S0663_UPD_DEBUG_MSG_RETRY3_EVT(ZB_LDC_TYPE,ZB_LCE_ID,
                                           ZB_POLL_STEP);
	 /*END: CR36/288765*/
          P_GDXBYX_UPD_CCI_TCSL_MR_CTRS(ZB_LCE_ID,
                                   E_DATA_INVALID,
                                   NULL);
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */                                   
      ELSIF ZB_POLL_STEP = ZE_POLL_M3UA_LM
        THEN
         /*START: CR36/288765*/
	  Q_S0663_UPD_DEBUG_MSG_RETRY3_EVT(ZB_LDC_TYPE,ZB_LCE_ID,
                                           ZB_POLL_STEP);
	 /*END: CR36/288765*/
          P_GDXBYX_UPD_ASIG_CTRS(ZB_LCE_ID,
                                 ZB_SEQ_NBR,
                                   E_DATA_INVALID,
                                   NULL);
/*START: IURG FEATURE */
      ELSIF ZB_POLL_STEP = ZE_POLL_IURG
        THEN
	  Q_S0663_UPD_DEBUG_MSG_RETRY3_EVT(ZB_LDC_TYPE,ZB_LCE_ID,
                                           ZB_POLL_STEP);
          P_GDXBYX_UPD_IURG_CTRS(ZB_LCE_ID,
                                 ZB_SEQ_NBR,
                                   E_DATA_INVALID,
                                   NULL);
/*END: IURG FEATURE */
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */                                   
     /* END : WIPRO B11 IP MR0 PKG1 */
	 
	 /* BEGIN: CR 605005 */
	 
	 ELSIF ZB_POLL_STEP = ZE_POLL_PM_CPI
	 THEN
	   Q_S0663_UPD_DEBUG_MSG_RETRY3_EVT(ZB_LDC_TYPE,ZB_LCE_ID,
                                           ZB_POLL_STEP);
	
 
	   P_GDXBYX_UPD_PM_CPI_CTRS(FALSE,NULL); 

           Z_AUDIT_STAT := ZE_PM_CPI_AUDIT_IDLE;

	 /* END: CR 605005 */

      FI;

      /* MUST FREE THIS AND POLL THE NEXT ONE */
      Q_S0650_FREE_PROC_INST(ZQ_PROC_NBR);
      Q_S0660_DO_NEXT_POLL_ACTION(ZQ_PROC_NBR);
    FI;
  OD;
ELSE
  /*WIPRO:B10_MX_MR1 RT TRACE*/
  /*RELEASE_TIMER(ZF_TIMER_ID);*/
             TRACEINFO    := 'TIMER EXPIRY IN ELSE (%d)       ';
             TRC_BSC_PM2(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCDC),
              TRACEID(NORM),
              TRACEINFO,
              LONG_INT((ZF_TIMER_ID)),
              LONG_INT((0)),
              LONG_INT((0)));
  RELEASE_TIMER(ZF_TIMER_ID);
  /*END WIPRO:B10_MX_MR1 RT TRACE*/

FI;
END Q_S0680_PROCESS_TIMER_EXPIRY;

/* BEGIN: CR 605005 */

Q_S0682_PROCESS_SERVICE_REQUEST: PROC(ZF_BUF_PTR PTR,
                                      ZF_MSG_NBR INT);

  DCL ZQ_SERVICE_ID M_MXPF_SRVORNTFCODE;
  DCL ZQ_PROC_NBR ZM_PROC_NBR;

  DO WITH ZF_BUF_PTR-> M_MXPF_CPI_MPPMSPMCPUOVLDRDATA;

    ZQ_SERVICE_ID := B_MXPF_CPIMSGPAYLOADHEADER.B_MXPF_SRVORNTFCODE;
	
  OD;	
  
  IF ZQ_SERVICE_ID = M_MXPF_MPPMSPMCPUOVLD_SRVCODE
  THEN
  
    ZQ_PROC_NBR := Q_S0683_GET_PROC_NBR_FRM_SRV_ID(ZQ_SERVICE_ID); 
    
      DO WITH Z_POLL_PROCESS(ZQ_PROC_NBR);
	
      IF (Z_AUDIT_STAT = ZE_PM_CPI_AUDIT_REQ)
         AND (ZF_MSG_NBR = 2)
      THEN
    
        Q_S0080_CANCEL_TIMER(ZB_TIMER_ID);  

        Z_AUDIT_STAT := ZE_PM_CPI_AUDIT_REQ_ACK;
   
        ZB_TIMER_ID := Q_S0070_START_TIMER(ZS_TIME_HW_AUDIT_REP,
                                         INT(ZQ_PROC_NBR*1),
                                         ZB_REF_NBR,
                                         ZB_SEQ_NBR);
        
      ELSIF ( (ZF_MSG_NBR = 3) AND 
              (Z_AUDIT_STAT = ZE_PM_CPI_AUDIT_REQ )) 
            OR ( (ZF_MSG_NBR = 5) AND
                 (Z_AUDIT_STAT = ZE_PM_CPI_AUDIT_REQ_ACK))
      THEN
	
        IF ZF_MSG_NBR = 3
        THEN
          Z_AUDIT_STAT := ZE_PM_CPI_AUDIT_REQ_NACK;
        ELSE
          Z_AUDIT_STAT := ZE_PM_CPI_AUDIT_REP_NACK;
        FI; 

        Q_S0080_CANCEL_TIMER(ZB_TIMER_ID);
	/*DCTPD00763810 Begin*/	
        /*Q_S0650_FREE_PROC_INST(ZQ_PROC_NBR);*/
	P_GDXBYX_UPD_PM_CPI_CTRS(FALSE,NULL);
	Q_S0650_FREE_PROC_INST(ZQ_PROC_NBR);
	Q_S0660_DO_NEXT_POLL_ACTION(ZQ_PROC_NBR);
	/*DCTPD00763810 End*/
      ELSIF ( (ZF_MSG_NBR = 4) AND
              (Z_AUDIT_STAT = ZE_PM_CPI_AUDIT_REQ_ACK))
      THEN
 
        Z_AUDIT_STAT := ZE_PM_CPI_AUDIT_REP_ACK; 
	
        Q_S0080_CANCEL_TIMER(ZB_TIMER_ID);
 	/* DCTPD00763810 Begin*/	
        /*Q_S0650_FREE_PROC_INST(ZQ_PROC_NBR);*/
        P_GDXBYX_UPD_PM_CPI_CTRS(TRUE,ZF_BUF_PTR);
	Q_S0650_FREE_PROC_INST(ZQ_PROC_NBR);
        Q_S0660_DO_NEXT_POLL_ACTION(ZQ_PROC_NBR);
        /*DCTPD00763810 End*/

      FI; 
    OD;	
	
  FI;	

END Q_S0682_PROCESS_SERVICE_REQUEST;
   
/***************************************************************/
   
Q_S0683_GET_PROC_NBR_FRM_SRV_ID: PROC
                                (ZF_SERVICE_ID M_MXPF_SRVORNTFCODE)
                                 RETURNS (ZM_PROC_NBR);
	
  DCL ZQ_PROC_NBR_CNT ZM_PROC_NBR;
  
  DO FOR ZQ_PROC_NBR_CNT := 1 TO ZS_MAX_PARA_POLL;
    DO WITH Z_POLL_PROCESS(ZQ_PROC_NBR_CNT);
	  IF ZB_SERVICE_ID = ZF_SERVICE_ID
	  THEN
	    RETURN (ZQ_PROC_NBR_CNT);
	  FI;
    OD;
  OD;	

END Q_S0683_GET_PROC_NBR_FRM_SRV_ID;

/* END : CR 605005 */

/*************************************************/
/* Q_S07XX MEASUREMENT JOB START/STOP PROCEDURES */
/*************************************************/
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0700_START_STOP_27                               */
/*                                                                    */
/*     PROGRAMMER: J.P. QUINN   (KDC)                                 */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/23                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*     ACTIONS TO START AND STOP A TYPE 26 AND 27 JOB.                */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_MEAS_TYPE M_MEAS_TYPE,                     */
/*                      ZF_JOB_ACT BOOL                               */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0150_GET_R_PM_ACT_TASK                     */
/*                      Q_S0155_GET_CELL_SCOPE                        */
/*                      Q_S0146_GET_R_CONF_CE                         */
/*                      Q_S0190_LCE_IT                                */
/*                      Q_S0300_SEND_MSG_1070_TO_LDC                  */
/*     CALLED FROM:                                                   */
/*                      Q_S1000_CCDC_FSM                              */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0700_START_STOP_27: PROC(ZF_MEAS_TYPE M_MEAS_TYPE,
                               ZF_JOB_ACT   BOOL)
                       RETURNS(BOOL);

DCL  ZQ_RESULT    BOOL;
DCL  ZQ_CELL_LIST M_PM_DET_CELL_LIST,
     ZQ_LCE_ID    M_LCE_ID;

 ZQ_RESULT := TRUE;

IF (ZF_MEAS_TYPE = E_MT_HANDOVER_PER_TARGETCELL)        /* 27 */
THEN
  IF ZF_JOB_ACT THEN
   Q_S0150_GET_R_PM_ACT_TASK(ZF_MEAS_TYPE, E_START_MEAS);
   IF DB_PARMS.B_DB_STATUS /= M_DB_SUCCESS THEN
     Q_S0150_GET_R_PM_ACT_TASK(ZF_MEAS_TYPE, E_CC_START);
   FI;
 ELSE
   Q_S0150_GET_R_PM_ACT_TASK(ZF_MEAS_TYPE, E_STOP_MEAS);
   IF DB_PARMS.B_DB_STATUS /= M_DB_SUCCESS THEN
     Q_S0150_GET_R_PM_ACT_TASK(ZF_MEAS_TYPE, E_CC_STOP);
   FI;
 FI; /* START OR STOP */
ELSE
  ZQ_RESULT:=FALSE;
FI;

IF ZQ_RESULT AND DB_PARMS.B_DB_STATUS = M_DB_SUCCESS
THEN
  /* A LIST OF ONE CELL IS EXPECTED! */
  Q_S0155_GET_CELL_SCOPE(R_PM_ACT.D_ACT_IDX,
                         ZQ_CELL_LIST);

  ZQ_LCE_ID:=Q_S0146_GET_R_CONF_CE(ZS_GET_FIRST,
                                   ZE_POLL_DTC_DETAIL);

  DO WHILE ZQ_LCE_ID/=M_LCE_ID_NULL;
    IF Q_S0190_LCE_IT(ZQ_LCE_ID)
    THEN
      /* ACTIVATE AGAIN FOR ALL DTCS */
      Q_S0300_SEND_MSG_1070_TO_LDC(ZF_MEAS_TYPE,
                                   ZF_JOB_ACT,
                                   ZQ_CELL_LIST(1),
                                   ZQ_LCE_ID,
                                   M_FS_DTC_TRF_LDC);

    FI;
    /* GET THE NEXT LDCP TO ACTIVATE */
    ZQ_LCE_ID:=Q_S0146_GET_R_CONF_CE(ZS_GET_IN_SEQ,
                                     ZE_POLL_DTC_DETAIL);
  OD;
ELSE
  /* SOFTWARE ERROR */
  ZQ_RESULT:=FALSE;
FI;

RETURN(ZQ_RESULT);

END Q_S0700_START_STOP_27;

/********************************************/
/* Q_S075X HISTORY MANIPULATION PROCEDURES */
/********************************************/

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0750_GET_HISTORY_FILE                            */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       GETS THE HISTORY FILES ATTRIBUTES FOR CCSI TYPES.            */
/*       WITH ONLY ONE FILE OR NUMBER.                                */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_MEAS_TYPE M_MEAS_TYPE,                     */
/*                      ZF_HISTORY_NBR INT LOC,                       */
/*                      ZF_HISTORY_FILE M_FILE_NAME LOC               */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0800_UPDATE_HISTORY_FILES                  */
/*                      Q_S0860_RESET_CCI_DS                          */
/*                      Q_S0870_INITIALISE_HISTORY                    */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0750_GET_HISTORY_FILE: PROC(ZF_MEAS_TYPE    M_MEAS_TYPE,
                               ZF_HISTORY_NBR  INT  LOC,
                               ZF_HISTORY_FILE M_FILE_NAME LOC);

CASE ZF_MEAS_TYPE OF
  (E_MT_TRAFFIC):                                           /* 1 */
    IF ZF_HISTORY_NBR=CM_FY32_HF_NBR_TYPE_0011
      THEN
      ZF_HISTORY_FILE := CM_FY32_HF_TYPE_0011;
    ELSE
      ZF_HISTORY_FILE := CM_FY32_HF_TYPE_0012;
      ZF_HISTORY_NBR  := CM_FY32_HF_NBR_TYPE_0012;
    FI;

  (E_MT_RESOURCE_AVAILABILITY):                             /* 2 */
    ZF_HISTORY_NBR:=CM_FY32_HF_NBR_TYPE_02;
    ZF_HISTORY_FILE:=CM_FY32_HF_TYPE_02;

  (E_MT_RESOURCE_USAGE_CCCH):                               /* 3 */
    ZF_HISTORY_NBR:=CM_FY32_HF_NBR_TYPE_03;
    ZF_HISTORY_FILE:=CM_FY32_HF_TYPE_03;

  (E_MT_RESOURCE_USAGE_SDCCH):                              /* 4 */
    ZF_HISTORY_NBR:=CM_FY32_HF_NBR_TYPE_04;
    ZF_HISTORY_FILE:=CM_FY32_HF_TYPE_04;

  (E_MT_RESOURCE_USAGE_RTCH):                               /* 5 */
    ZF_HISTORY_NBR:=CM_FY32_HF_NBR_TYPE_05;
    ZF_HISTORY_FILE:=CM_FY32_HF_TYPE_05;

  (E_MT_HANDOVER):                                          /* 6 */
    ZF_HISTORY_NBR:=CM_FY32_HF_NBR_TYPE_06;
    ZF_HISTORY_FILE:=CM_FY32_HF_TYPE_06;

  (E_MT_LAPD):
    /*CR36/236932*/                                         /* 7 */
    /*ZF_HISTORY_NBR:=CM_FY32_HF_NBR_TYPE_07;
    ZF_HISTORY_FILE:=CM_FY32_HF_TYPE_07;*/
    IF ZF_HISTORY_NBR = CM_FY32_HF_NBR_TYPE_0071
      THEN
      ZF_HISTORY_NBR  := CM_FY32_HF_NBR_TYPE_0071;
      ZF_HISTORY_FILE := CM_FY32_HF_TYPE_0071;
    ELSE
      ZF_HISTORY_NBR  := CM_FY32_HF_NBR_TYPE_0072;
      ZF_HISTORY_FILE := CM_FY32_HF_TYPE_0072;
    FI;
    /*CR36/236932*/

  (E_MT_X25):                                               /* 8 */
    ZF_HISTORY_NBR:=CM_FY32_HF_NBR_TYPE_08;
    ZF_HISTORY_FILE:=CM_FY32_HF_TYPE_08;

  (E_MT_NUMBER7):                                           /* 9 */
    ZF_HISTORY_NBR:=CM_FY32_HF_NBR_TYPE_09;
    ZF_HISTORY_FILE:=CM_FY32_HF_TYPE_09;

  (E_MT_A_AND_ABIS_ITF_ANALYSIS):                           /* 18 */
    IF ZF_HISTORY_NBR = CM_FY32_HF_NBR_TYPE_0181
      THEN
      ZF_HISTORY_NBR  := CM_FY32_HF_NBR_TYPE_0181;
      ZF_HISTORY_FILE := CM_FY32_HF_TYPE_0181;
    ELSE
      ZF_HISTORY_FILE := CM_FY32_HF_TYPE_0182;
      ZF_HISTORY_NBR  := CM_FY32_HF_NBR_TYPE_0182;
    FI;

  (E_MT_SMS):                                               /* 19 */
    ZF_HISTORY_NBR:=CM_FY32_HF_NBR_TYPE_19;
    ZF_HISTORY_FILE:=CM_FY32_HF_TYPE_19;

  (E_MT_SCCP):                                              /* 25 */
    ZF_HISTORY_NBR:=CM_FY32_HF_NBR_TYPE_25;
    ZF_HISTORY_FILE:=CM_FY32_HF_TYPE_25;

  (E_MT_HANDOVER_PER_SERVINGCELL):                          /* 26 */
    ZF_HISTORY_NBR:=CM_FY32_HF_NBR_TYPE_26;
    ZF_HISTORY_FILE:=CM_FY32_HF_TYPE_26;

  (E_MT_HANDOVER_PER_TARGETCELL):                           /* 27 */
    ZF_HISTORY_NBR:=CM_FY32_HF_NBR_TYPE_27;
    ZF_HISTORY_FILE:=CM_FY32_HF_TYPE_27;

  (E_MT_HANDOVER_SDCCH):                                    /* 28 */
    ZF_HISTORY_NBR:=CM_FY32_HF_NBR_TYPE_28;
    ZF_HISTORY_FILE:=CM_FY32_HF_TYPE_28;

  (E_MT_DIRECTED_RETRY):                                    /* 29 */
    ZF_HISTORY_NBR:=CM_FY32_HF_NBR_TYPE_29;
    ZF_HISTORY_FILE:=CM_FY32_HF_TYPE_29;

  (E_MT_SMSCB):                                             /* 30 */
    ZF_HISTORY_NBR:=CM_FY32_HF_NBR_TYPE_30;
    ZF_HISTORY_FILE:=CM_FY32_HF_TYPE_30;

  (E_MT_MULTIBAND_HANDOVERS):                               /* 32 */
    ZF_HISTORY_NBR:=CM_FY32_HF_NBR_TYPE_32;
    ZF_HISTORY_FILE:=CM_FY32_HF_TYPE_32;

  (E_MT_EME):                                               /* 33 */
    ZF_HISTORY_NBR:=CM_FY32_HF_NBR_TYPE_33;
    ZF_HISTORY_FILE:=CM_FY32_HF_TYPE_33;

  (E_MT_VGCS):                                              /* 34 */
    IF ZF_HISTORY_NBR = CM_FY32_HF_NBR_TYPE_0341
      THEN
      ZF_HISTORY_NBR  := CM_FY32_HF_NBR_TYPE_0341;
      ZF_HISTORY_FILE := CM_FY32_HF_TYPE_0341;
    ELSE
      ZF_HISTORY_NBR  := CM_FY32_HF_NBR_TYPE_0342;
      ZF_HISTORY_FILE := CM_FY32_HF_TYPE_0342;
    FI;
/* BEGIN: ADD-WIPRO-B10-MR2-CHANGE */    
  (E_MT_IP):                                              /* 35 */
    IF ZF_HISTORY_NBR = CM_FY32_HF_NBR_TYPE_350
    THEN
      ZF_HISTORY_NBR  := CM_FY32_HF_NBR_TYPE_350;
      ZF_HISTORY_FILE := CM_FY32_HF_TYPE_0350;
    ELSE
/* CR20/225233 */    
      IF ZF_HISTORY_NBR = CM_FY32_HF_NBR_TYPE_353
      THEN
       ZF_HISTORY_NBR  := CM_FY32_HF_NBR_TYPE_353;
       ZF_HISTORY_FILE := CM_FY32_HF_TYPE_0353;
      ELSE 
/* CR20/225233 */       
      IF ZF_HISTORY_NBR = CM_FY32_HF_NBR_TYPE_354
      THEN
       ZF_HISTORY_NBR  := CM_FY32_HF_NBR_TYPE_354;
       ZF_HISTORY_FILE := CM_FY32_HF_TYPE_0354;       
      ELSE 
       IF ZF_HISTORY_NBR = CM_FY32_HF_NBR_TYPE_355
       THEN
        ZF_HISTORY_NBR  := CM_FY32_HF_NBR_TYPE_355;
        ZF_HISTORY_FILE := CM_FY32_HF_TYPE_0355;
       /* START : WIPRO B11 IP MR0 PKG1 */
      /*START: CR20/284751 BTS FRQ SYNCH */
      ELSE 
       IF ZF_HISTORY_NBR = CM_FY32_HF_NBR_TYPE_356
       THEN
        ZF_HISTORY_NBR  := CM_FY32_HF_NBR_TYPE_356;
        ZF_HISTORY_FILE := CM_FY32_HF_TYPE_0356;
      /*END: CR20/284751 BTS FRQ SYNCH*/
        ELSE
         IF ZF_HISTORY_NBR = CM_FY32_HF_NBR_TYPE_357
         THEN
          ZF_HISTORY_NBR  := CM_FY32_HF_NBR_TYPE_357;
          ZF_HISTORY_FILE := CM_FY32_HF_TYPE_0357;
         ELSE
          IF ZF_HISTORY_NBR = CM_FY32_HF_NBR_TYPE_358
          THEN
           ZF_HISTORY_NBR  := CM_FY32_HF_NBR_TYPE_358;
           ZF_HISTORY_FILE := CM_FY32_HF_TYPE_0358;
          FI;
         FI;
       /* END : WIPRO B11 IP MR0 PKG1 */
       FI;
      FI;    
    FI;
/* CR20/225233 */ 
   FI;
 FI;
/* CR20/225233 */     
/* END: ADD-WIPRO-B10-MR2-CHANGE */    
/*START: IURG FEATURE */
  (E_MT_IURG):                                              /* 36 */
      ZF_HISTORY_NBR  := CM_FY32_HF_NBR_TYPE_360;
      ZF_HISTORY_FILE := CM_FY32_HF_TYPE_0360;

/*END IURG FEATURE */

/*BEGIN : B12 VAMOS */
  (E_MT_VAMOS):                                              /* 37 */
      IF ZF_HISTORY_NBR = CM_FY32_HF_NBR_TYPE_370
	  THEN
          ZF_HISTORY_FILE := CM_FY32_HF_TYPE_0370;
	ELSE
/*START:00860192 */
      IF ZF_HISTORY_NBR = CM_FY32_HF_NBR_TYPE_371
          THEN
/*END:00860192 */ 	    
          ZF_HISTORY_FILE := CM_FY32_HF_TYPE_0371;
       FI;
     FI;
/*END : B12 VAMOS */

  (E_MT_CELL_TRX_OVERVIEW_COUNTERS):
    IF ZF_HISTORY_NBR=CM_FY32_HF_NBR_TYPE_1101
    THEN
      ZF_HISTORY_FILE:=CM_FY32_HF_TYPE_1101;
    ELSE
      IF ZF_HISTORY_NBR=CM_FY32_HF_NBR_TYPE_1102
      THEN
        ZF_HISTORY_FILE:=CM_FY32_HF_TYPE_1102;
      ELSE
        IF ZF_HISTORY_NBR=CM_FY32_HF_NBR_TYPE_1103
        THEN
          ZF_HISTORY_FILE:=CM_FY32_HF_TYPE_1103;
        ELSE
          IF ZF_HISTORY_NBR=CM_FY32_HF_NBR_TYPE_1104
          THEN
            ZF_HISTORY_FILE:=CM_FY32_HF_TYPE_1104;
          ELSE
            IF ZF_HISTORY_NBR=CM_FY32_HF_NBR_TYPE_1105
            THEN
              ZF_HISTORY_FILE:=CM_FY32_HF_TYPE_1105;
            ELSE
              IF ZF_HISTORY_NBR=CM_FY32_HF_NBR_TYPE_1106
              THEN
                ZF_HISTORY_FILE:=CM_FY32_HF_TYPE_1106;
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
              ELSE 
                IF ZF_HISTORY_NBR=CM_FY32_HF_NBR_TYPE_1107
                THEN
                  ZF_HISTORY_FILE:=CM_FY32_HF_TYPE_1107; 
/*ADDED FOR GSL COUNTERS MEMO*/
               ELSE 
                IF ZF_HISTORY_NBR=CM_FY32_HF_NBR_TYPE_1108
                THEN
                  ZF_HISTORY_FILE:=CM_FY32_HF_TYPE_1108; 
                ELSE 
                 IF ZF_HISTORY_NBR=CM_FY32_HF_NBR_TYPE_1109
                 THEN
                  ZF_HISTORY_FILE:=CM_FY32_HF_TYPE_1109;
/*ADDED FOR A-FLEX NRI COUNTERS*/
                ELSE
                  IF ZF_HISTORY_NBR=CM_FY32_HF_NBR_TYPE_1110
                 THEN
                  ZF_HISTORY_FILE:=CM_FY32_HF_TYPE_1110;
/*START : AUPOIP FEATURE */
                ELSE
                  IF ZF_HISTORY_NBR=CM_FY32_HF_NBR_TYPE_1111
                 THEN
                  ZF_HISTORY_FILE:=CM_FY32_HF_TYPE_1111;
                ELSE
                  IF ZF_HISTORY_NBR=CM_FY32_HF_NBR_TYPE_1112
                  THEN
                    ZF_HISTORY_FILE:=CM_FY32_HF_TYPE_1112;
				/*START : DCTPD000646615 */
                  ELSE
                    IF ZF_HISTORY_NBR=CM_FY32_HF_NBR_TYPE_1113
                    THEN
                     ZF_HISTORY_FILE:=CM_FY32_HF_TYPE_1113;
                     /* BEGIN: CR 605005 */
                    ELSE
                      IF ZF_HISTORY_NBR=CM_FY32_HF_NBR_TYPE_1114
                      THEN
                        ZF_HISTORY_FILE:=CM_FY32_HF_TYPE_1114;
                      /* BEGIN CR:745699 */
                      /*FI;*/
                       ELSE
                       IF ZF_HISTORY_NBR=CM_FY32_HF_NBR_TYPE_1115
                       THEN
                        ZF_HISTORY_FILE:=CM_FY32_HF_TYPE_1115;
/*START CR MOCN */
                        ELSE
                         IF ZF_HISTORY_NBR=CM_FY32_HF_NBR_TYPE_1117
                         THEN
                          ZF_HISTORY_FILE:=CM_FY32_HF_TYPE_1117;
                         FI;
/*END CR MOCN */  
                       FI;
                      FI;
                     /* END: CR:74569 */ 
                     /* END: CR 605005 */
                    FI;					 
                /*END : DCTPD000646615   */				
		          FI;
		   FI;
/* END : AUPOIP FEATURE */
/*ADDED FOR A_FLEX NRI COUNTERS*/
               FI;
/*ADDED FOR GSL COUNTERS MEMO*/  
              FI;   
/* END : ADD-WIPRO-B10-MR1-CHANGE */
              FI;  
             FI;
            FI;  
          FI;
        FI;
      FI;
    FI;
    FI;
  (E_MT_TRAFFIC_FLOW):                                      /* 180 */
    ZF_HISTORY_NBR:=CM_FY32_HF_NBR_TYPE_180;
    ZF_HISTORY_FILE:=CM_FY32_HF_TYPE_180;

  ELSE

ESAC;

END Q_S0750_GET_HISTORY_FILE;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0755_GET_RECORD_SIZE                             */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       GETS THE RECORD SIZE ATTRIBUTES FOR CCSI TYPES.              */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_MEAS_TYPE M_MEAS_TYPE,                     */
/*                      ZF_HIS_NBR INT                                */
/*     RETURNED VALUE:                                                */
/*                      INT                                           */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0220_GET_STATIC_MEM                        */
/*                      Q_S0410_CLEAR_MEMORY                          */
/*                      Q_S0796_INIT_BUFFER_ATTRIBUTES                */
/*                      Q_S0801_UPDATE_HISTORY_FILE                   */
/*                      Q_S0802_HIS_UPD                               */
/*                      Q_S0804_HIS_UPD_T110_1                        */
/*                      Q_S0807_WRITE_TO_HIST_FILE                    */
/*                      Q_S0808_UPD_HIS_TYPE_180                      */
/*                      Q_S0866_DELETE_INCOMPLETE                     */
/*                      Q_S0871_COPY_T180_HIS_TO_MEMORY               */
/*                      Q_S0872_COPY_HIS_TO_MEM                       */
/*                      Q_S0875_COPY_T110_1_HIS_TO_MEMOR              */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0755_GET_RECORD_SIZE: PROC(ZF_MEAS_TYPE    M_MEAS_TYPE,
                              ZF_HIS_NBR      INT)
                         RETURNS(INT);

/* NOTE THAT THE RETURN OF THESE VALUES MAY BE DONE BY DEFINING
 * A TABLE - SEE CCRH. FOR THE TIME BEING I CAN'T THINK CLEARLY
 * ENOUGH TO DEFINE ONE.
 */
CASE ZF_MEAS_TYPE OF
  (E_MT_TRAFFIC):                                           /* 1 */
    IF ZF_HIS_NBR = CM_FY32_HF_NBR_TYPE_0011
    THEN
      RETURN(SIZE(M_HIS_TYPE_01_CELL));
    ELSE
      RETURN(SIZE(M_HIS_TYPE_01_TRX));
    FI;

  (E_MT_RESOURCE_AVAILABILITY):                             /* 2 */
    RETURN(SIZE(M_HIS_TYPE_02));

  (E_MT_RESOURCE_USAGE_CCCH):                               /* 3 */
    RETURN(SIZE(M_HIS_TYPE_03));

  (E_MT_RESOURCE_USAGE_SDCCH):                              /* 4 */
    RETURN(SIZE(M_HIS_TYPE_04));

  (E_MT_RESOURCE_USAGE_RTCH):                               /* 5 */
    RETURN(SIZE(M_HIS_TYPE_05));

  (E_MT_HANDOVER):                                          /* 6 */
    RETURN(SIZE(CM_FY32_HIS_TYPE_06));

  (E_MT_LAPD):
                                                            /* 7 */
    /*CR36/236932*/                                                            
    /*RETURN(SIZE(M_HIS_TYPE_07));*/
    IF ZF_HIS_NBR = CM_FY32_HF_NBR_TYPE_0071
    THEN
      RETURN(SIZE(M_HIS_TYPE_07));
    ELSE
      RETURN(SIZE(CM_HIS_TYPE_07_2));
    FI;  
   /*CR36/236932*/
  (E_MT_X25):                                               /* 8 */
    RETURN(SIZE(M_HIS_TYPE_08));

  (E_MT_NUMBER7):                                           /* 9 */
    RETURN(SIZE(CM_FY32_HIS_TYPE_09));

  (E_MT_A_AND_ABIS_ITF_ANALYSIS):                           /* 18 */
    IF ZF_HIS_NBR = CM_FY32_HF_NBR_TYPE_0181
    THEN
      RETURN(SIZE(CM_FY32_HIS_TYPE_18_BSC_BUF));
    ELSE
      RETURN(SIZE(M_HIS_TYPE_18_CIC));
    FI;

  (E_MT_SMS):                                               /* 19 */
    RETURN(SIZE(M_HIS_TYPE_19));

  (E_MT_SCCP):                                              /* 25 */
    RETURN(SIZE(M_HIS_TYPE_25));

  (E_MT_HANDOVER_PER_SERVINGCELL):                          /* 26 */
    RETURN(SIZE(M_HIS_TYPE_26));

  (E_MT_HANDOVER_PER_TARGETCELL):                           /* 27 */
    RETURN(SIZE(M_HIS_TYPE_27));

  (E_MT_HANDOVER_SDCCH):                                    /* 28 */
    RETURN(SIZE(CM_FY32_HIS_TYPE_28));

  (E_MT_DIRECTED_RETRY):                                    /* 29 */
    RETURN(SIZE(CM_FY32_HIS_TYPE_29));

  (E_MT_SMSCB):                                             /* 30 */
    RETURN(SIZE(M_HIS_TYPE_30));

  (E_MT_MULTIBAND_HANDOVERS):                               /* 32 */
    RETURN(SIZE(CM_FY32_HIS_TYPE_32));

  (E_MT_EME):                                               /* 33 */
    RETURN(SIZE(CM_FY32_HIS_TYPE_33));

  (E_MT_VGCS):                                              /* 34 */
    IF ZF_HIS_NBR = CM_FY32_HF_NBR_TYPE_0341
    THEN
      RETURN(SIZE(CM_FY32_HIS_TYPE_34_1_BUF));
    ELSE
      RETURN(SIZE(CM_FY32_HIS_TYPE_34_2));
    FI;
  /* BEGIN: ADD-WIPRO-B10-MR2-CHANGE */  
  (E_MT_IP):                                              /* 35 */
    IF ZF_HIS_NBR = CM_FY32_HF_NBR_TYPE_350
    THEN
      RETURN(SIZE(CM_FY32_HIS_TYPE_35_0));
    ELSE
    /* CR20/225233 */
      IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_353
      THEN
        RETURN(SIZE(CM_FY32_HIS_TYPE_35_3));
      ELSE    
      /* CR20/225233 */
      IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_354
      THEN
        RETURN(SIZE(CM_FY32_HIS_TYPE_35_4));
      ELSE
        IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_355
        THEN
          RETURN(SIZE(CM_FY32_HIS_TYPE_35_5));
    /*START: CR20/284751 BTS FRQ SYNCH */
      ELSE
        IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_356
        THEN
          RETURN(SIZE(CM_FY32_HIS_TYPE_35_6));
    /*END: CR20/284751 BTS FRQ SYNCH */
/* START : WIPRO B11 IP MR0 PKG1 */
        ELSE
          IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_357
          THEN
            RETURN(SIZE(CM_FY32_HIS_TYPE_35_7));
          ELSE
            IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_358
            THEN
              RETURN(SIZE(CM_FY32_HIS_TYPE_35_8));
            FI;
         FI; 
      /* END : WIPRO B11 IP MR0 PKG1 */
        FI;
      FI;    
    FI;
/* CR20/225233 */
  FI;
 FI;
/* CR20/225233 */    
  /* END: ADD-WIPRO-B10-MR2-CHANGE */  
/*START : IURG FEATURE */
  (E_MT_IURG):
    IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_360
    THEN
      RETURN(SIZE(CM_FY32_HIS_TYPE_36_0));
    FI;
/*END : IURG FEATURE */  
/*BEGIN : B12 VAMOS */
  (E_MT_VAMOS):
     IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_370
        THEN
          RETURN(SIZE(CM_FY32_HIS_TYPE_37_0));
     ELSE
/*START:00860192 */
     IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_371
        THEN
/*END:00860192 */
          RETURN(SIZE(CM_FY32_HIS_TYPE_37_1));
        FI;
      FI;
/*END : B12 VAMOS */  

  (E_MT_CELL_TRX_OVERVIEW_COUNTERS):
    IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_1101
    THEN
      RETURN(SIZE(CM_FY32_HIS_TYPE_110_1));
    ELSE
      IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_1102
      THEN
        RETURN(SIZE(CM_FY32_HIS_TYPE_110_2));
      ELSE
        IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_1103
        THEN
          RETURN(SIZE(CM_FY32_HIS_TYPE_110_3));
        ELSE
          IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_1104
          THEN
            /* CR20/225233 */
            /*RETURN(SIZE(M_HIS_TYPE_110_4));*/
            RETURN(SIZE(CM_HIS_TYPE_110_4));
            /* CR20/225233 */
          ELSE
            IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_1105
            THEN
              RETURN(SIZE(CM_FY32_HIS_TYPE_110_5));
            ELSE
              IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_1106
              THEN
                RETURN(SIZE(CM_FY32_HIS_TYPE_110_6));
/* END : ADD-WIPRO-B10-MR1-CHANGE */
              ELSE
                IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_1107  
                THEN
                  RETURN(SIZE(CM_FY32_HIS_TYPE_110_7));
                ELSE
                  IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_1108
                  THEN
                    RETURN(SIZE(CM_FY32_HIS_TYPE_110_8)); 
/*ADDED FOR GSL COUNTERS MEMO*/
                  ELSE
                   IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_1109
                   THEN
                     RETURN(SIZE(CM_FY32_HIS_TYPE_110_9)); 
/*ADDED FOR A-FLEX NRI COUNTERS*/
                   ELSE
                    IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_1110
                    THEN
                      RETURN(SIZE(CM_FY32_HIS_TYPE_110_10)); 
/*START : AUPOIP FEATURE */
                    ELSE
                     IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_1111
                     THEN
                       RETURN(SIZE(CM_FY32_HIS_TYPE_110_11)); 
                     ELSE
                      IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_1112
                      THEN
                        RETURN(SIZE(CM_FY32_HIS_TYPE_110_12));                 
/*BEGIN : CR20/313054 */
                      ELSE
			IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_1113
                        THEN
                          RETURN(SIZE(CM_FY32_HIS_TYPE_110_13));                 
/*END : CR20/313054 */
/* BEGIN: CR 605005 */
                        ELSE
		          IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_1114
                          THEN
                            RETURN(SIZE(CM_FY32_HIS_TYPE_110_14)); 
/* BEGIN CR:745699 */
                         ELSE
                         IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_1115
                            THEN
RETURN(SIZE(CM_HIS_TYPE_110_15));
/*START CR MOCN */
                           ELSE
                             IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_1117
                             THEN
                               RETURN(SIZE(CM_FY32_HIS_TYPE_110_17));
                    /*begin CR1238146 A-GPS*/
                             ELSE
                               IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_1118
                               THEN
                               RETURN(SIZE(CM_FY32_HIS_TYPE_110_18));
                               FI;
                    /*end CR1238146 A-GPS*/
                             FI;
/*END CR MOCN */  
                           FI;
                          FI;
/* END: CR 605005 */
		        FI;
		      FI;
		     FI;
/* END : AUPOIP FEATURE */
                    FI;
/*ADDED FOR A-FLEX NRI COUNTERS*/  
                FI;
/*ADDED FOR GSL COUNTERS MEMO*/  
             FI; 
/* BEGIN : ADD-WIPRO-B10-MR1-CHANGE */
              FI;
            FI;
          FI;
        FI;
      FI;
    FI;
  FI;
  (E_MT_TRAFFIC_FLOW):                                      /* 180 */
    RETURN(SIZE(ZM_HIS_TYPE_180));

  ELSE
ESAC;
RETURN (0);

END Q_S0755_GET_RECORD_SIZE;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0780_OLC_GET_MAX_NUM_RECS                        */
/*                                                                    */
/*     PROGRAMMER:                                                    */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE:                                                 */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       GETS THE TOTAL RECORD NUMBERS  FOR CCSI TYPES.               */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_MEAS_TYPE M_MEAS_TYPE,                     */
/*                      ZF_HIS_NBR INT                                */
/*     RETURNED VALUE:                                                */
/*                      INT                                           */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0220_GET_STATIC_MEM                        */
/*                      Q_S0410_CLEAR_MEMORY                          */
/*                      Q_S0796_INIT_BUFFER_ATTRIBUTES                */
/*                      Q_S0866_DELETE_INCOMPLETE                     */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0780_OLC_GET_MAX_NUM_RECS: PROC(ZF_MEAS_TYPE M_MEAS_TYPE,
                               ZF_HIS_NBR   INT)
                         RETURNS(LONG_INT);
						 
CASE ZF_MEAS_TYPE OF
(E_MT_CELL_TRX_OVERVIEW_COUNTERS): 
 CASE ZF_HIS_NBR OF
  (CM_FY32_HF_NBR_TYPE_1115): 
   RETURN(LONG_INT(700*6*6)); 

 ELSE
   RETURN(LONG_INT(1));
 ESAC;
 ELSE
   RETURN (LONG_INT(0));
ESAC; 
						 
END Q_S0780_OLC_GET_MAX_NUM_RECS;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0780_GET_MAX_NUM_RECS                            */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       GETS THE TOTAL RECORD NUMBERS  FOR CCSI TYPES.               */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_MEAS_TYPE M_MEAS_TYPE,                     */
/*                      ZF_HIS_NBR INT                                */
/*     RETURNED VALUE:                                                */
/*                      INT                                           */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0220_GET_STATIC_MEM                        */
/*                      Q_S0410_CLEAR_MEMORY                          */
/*                      Q_S0796_INIT_BUFFER_ATTRIBUTES                */
/*                      Q_S0866_DELETE_INCOMPLETE                     */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0780_GET_MAX_NUM_RECS: PROC(ZF_MEAS_TYPE M_MEAS_TYPE,
                               ZF_HIS_NBR   INT)
                         RETURNS(INT);

CASE ZF_MEAS_TYPE OF
  (E_MT_TRAFFIC):                                           /* 1 */
    IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_0011
      THEN
      RETURN(M_PM_MAX_CELLS_FOR_A_MEAS_JOB);
    ELSE
      RETURN(CM_FY32_MAX_TRX_PER_BSC);
    FI;

  (E_MT_RESOURCE_AVAILABILITY):                             /* 2 */
    RETURN(M_PM_MAX_CELLS_FOR_A_MEAS_JOB);

  (E_MT_RESOURCE_USAGE_CCCH):                               /* 3 */
    RETURN(M_PM_MAX_CELLS_FOR_A_MEAS_JOB);

  (E_MT_RESOURCE_USAGE_SDCCH):                              /* 4 */
  /* AQ2C - SDON */
    RETURN(CM_FY32_MAX_TS_HIS_TYPE_04);

  (E_MT_RESOURCE_USAGE_RTCH):                               /* 5 */
    RETURN(CM_FY32_MAX_TRX_PER_BSC);

  (E_MT_HANDOVER):                                          /* 6 */
    RETURN(M_PM_MAX_CELLS_FOR_A_MEAS_JOB);

  (E_MT_LAPD):                                              /* 7 */
  /*CR36/236932*/
    /*RETURN((CM_FY32_MAX_LAPD_PER_TCU * 
           CM_FY32_PM_MAX_NBR_TCU)+ 1);*/
   IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_0071
   THEN
      RETURN((CM_FY32_MAX_LAPD_PER_TCU * 
           CM_FY32_PM_MAX_NBR_TCU)+ 1);
   ELSE
      RETURN(CM_FY32_MAX_GSL_PER_BSC);
   FI;  
  /*CR36/236932*/         

  (E_MT_X25):                                               /* 8 */
    RETURN(CM_FY32_PM_NBR_X25_LINKS_OCPR * 4);

  (E_MT_NUMBER7):                                           /* 9 */
    RETURN(CM_FY32_PM_MAX_NBR_DTC_N7);

  (E_MT_A_AND_ABIS_ITF_ANALYSIS):                           /* 18 */
    IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_0181
      THEN
      RETURN(1);
    ELSE
      RETURN(CM_FY32_PM_MAX_BSC_CIC);
    FI;

  (E_MT_SMS):                                               /* 19 */
    RETURN(CM_FY32_MAX_CELLS_PER_BSC);

  (E_MT_SCCP):                                              /* 25 */
    RETURN(ZS_MAX_SLC_N7);

  (E_MT_HANDOVER_PER_SERVINGCELL):                          /* 26 */
    RETURN(65*M_PM_MAX_CELLS_FOR_A_MEAS_JOB);

  (E_MT_HANDOVER_PER_TARGETCELL):                           /* 27 */
    RETURN(M_PM_MAX_TARGET_CELLS + 1);

  (E_MT_HANDOVER_SDCCH):                                    /* 28 */
    RETURN(CM_FY32_MAX_CELLS_PER_BSC);

  (E_MT_DIRECTED_RETRY):                                    /* 29 */
    RETURN(CM_FY32_MAX_CELLS_PER_BSC);

  (E_MT_SMSCB):                                             /* 30 */
    RETURN (1);

  (E_MT_MULTIBAND_HANDOVERS):                               /* 32 */
    RETURN(CM_FY32_MAX_CELLS_PER_BSC);

  (E_MT_EME):                                               /* 33 */
    RETURN(CM_FY32_MAX_CELLS_PER_BSC);

  (E_MT_VGCS):                                              /* 34 */
    IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_0341
      THEN
      RETURN(1);
    ELSE
      RETURN(CM_FY32_MAX_CELLS_PER_BSC);
    FI;
  /* BEGIN: ADD-WIPRO-B10-MR2-CHANGE */  

  (E_MT_IP):                                              /* 35 */
    CASE ZF_HIS_NBR OF
    (CM_FY32_HF_NBR_TYPE_350):
       RETURN(CM_FY32_MAX_CELLS_PER_BSC);
/* CR20/225233 */       
    (CM_FY32_HF_NBR_TYPE_353):
       RETURN(CM_FY32_MAX_TC_PER_BSC);       
/* CR20/225233 */       
    (CM_FY32_HF_NBR_TYPE_354):
       RETURN(CM_FY32_MAX_TC_PER_BSC);
    (CM_FY32_HF_NBR_TYPE_355):
       RETURN(CM_FY32_MAX_BTS_PER_BSC);
   /*START :CR20/284751 BTS FRQ SYNCH */
    (CM_FY32_HF_NBR_TYPE_356):
       RETURN(CM_FY32_MAX_BTS_PER_BSC);
   /*END :CR20/284751 BTS FRQ SYNCH */
 /* START : WIPRO B11 IP MR0 PKG1 */
    (CM_FY32_HF_NBR_TYPE_357):
       RETURN(CM_FY32_MAX_IP_GSL_PER_BSC);
    (CM_FY32_HF_NBR_TYPE_358):
       RETURN(CM_FY32_MAX_ABIS_NBR_PER_BSC);
    /* END : WIPRO B11 IP MR0 PKG1 */
    ELSE
      RETURN(1);
    ESAC;
   /* END: ADD-WIPRO-B10-MR2-CHANGE */ 
/* START :IURG FEATURE */
    (E_MT_IURG):                                               /* 36 */
      RETURN(M_MAX_RNC);
/* END : IURG FEATURE */
/* BEGIN : B12 VAMOS */
    (E_MT_VAMOS):                                               /* 37 */
      RETURN(CM_FY32_MAX_CELLS_PER_BSC);
/* END : B12 VAMOS */
  (E_MT_CELL_TRX_OVERVIEW_COUNTERS):                       /* 110 */
   CASE ZF_HIS_NBR OF
    (CM_FY32_HF_NBR_TYPE_1101,
     CM_FY32_HF_NBR_TYPE_1102,
     CM_FY32_HF_NBR_TYPE_1103,
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
     CM_FY32_HF_NBR_TYPE_1107):
       RETURN(CM_FY32_MAX_CELLS_PER_BSC);
/* END: ADD-WIPRO-B10-MR1-CHANGE */
    (CM_FY32_HF_NBR_TYPE_1104):
       RETURN(CM_FY32_MAX_TRX_PER_BSC);
    (CM_FY32_HF_NBR_TYPE_1105):
       RETURN(CM_FY32_PM_MAX_NBR_DTC_N7);
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */       
    (CM_FY32_HF_NBR_TYPE_1108):
       RETURN(CM_FY32_MAX_MSC_PER_BSC);
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
/*ADDED FOR GSL COUNTERS MEMO*/      
    (CM_FY32_HF_NBR_TYPE_1109):
       RETURN(CM_FY32_MAX_GSL_PER_BSC);
/*ADDED FOR GSL COUNTERS MEMO*/ 
/*ADDED FOR A-FLEX NRI COUNTERS*/      
    (CM_FY32_HF_NBR_TYPE_1110):
       RETURN(CM_FY32_MAX_SUPPORTED_NRI);
/*START : AUPOIP FEATURE */
    (CM_FY32_HF_NBR_TYPE_1111):
       RETURN(CM_FY32_MAX_CELLS_PER_BSC);
    (CM_FY32_HF_NBR_TYPE_1112):
       RETURN(M_MAX_MGW);
/* START: DCTPD00614277 */
    (CM_FY32_HF_NBR_TYPE_1113): 
       RETURN(CM_FY32_MAX_CELLS_PER_BSC);
/* END: DCTPD00614277 */
/*START CR MOCN */
    (CM_FY32_HF_NBR_TYPE_1117): 
       RETURN(CM_FY32_MAX_MSC_PER_BSC);
/*END CR MOCN */
/*begin CR1238146 A-GPS*/
    (CM_FY32_HF_NBR_TYPE_1118): 
       RETURN(CM_FY32_MAX_CELLS_PER_BSC);
/*end CR1238146 A-GPS*/
/* END : AUPOIP FEATURE */
/*ADDED FOR A-FLEX NRI COUNTERS*/ 
    ELSE
      RETURN(1);
   ESAC;

  /***
  (E_MT_TRAFFIC_FLOW):                       ***/           /* 180 */

  ELSE
    RETURN (0);
ESAC;
END Q_S0780_GET_MAX_NUM_RECS;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0785_GET_WRITE_BUFFER_ATTRIBUTES                 */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                 L. DIERICK                          97/12/05       */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       GETS THE BUFFER ATTRIBUTES OF NUMBER OF RECORDS AND SIZE OF  */
/*       BUFFER TO WRITE.                                             */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_MEAS_TYPE M_MEAS_TYPE,                     */
/*                      ZF_BUF_RECS INT LOC,                          */
/*                      ZF_BUF_SIZE INT LOC                           */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0802_HIS_UPD                               */
/*                      Q_S0872_COPY_HIS_TO_MEM                       */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0785_GET_WRITE_BUFFER_ATTRIBUTES: PROC(
                         ZF_MEAS_TYPE M_MEAS_TYPE,
                         ZF_BUF_RECS  INT LOC,
                         ZF_BUF_SIZE  INT LOC);

DCL ZQ_NEXT   BOOL;

/* GET THE NUMBER OF RECORDS AND THE SIZE OF THE USER BUFFER
 * THAT IS NEEDED.
 */
ZQ_NEXT := TRUE;
DO WITH Z_BUFFER_ATTRIB;
  IF ZF_MEAS_TYPE = E_MT_RESOURCE_USAGE_RTCH OR
     ZF_MEAS_TYPE = E_MT_CELL_TRX_OVERVIEW_COUNTERS OR
     ZF_MEAS_TYPE = E_MT_HANDOVER_PER_SERVINGCELL
  THEN
    /* MEMORY IS SPLIT IN HALF SO ... */
    IF ZB_RECS_WRITTEN < ZB_TOTAL_RECORDS/2 AND
       ZB_RECS_WRITTEN + ZB_RECS_PER_BUF > ZB_TOTAL_RECORDS/2
    THEN
      /* THIS WILL EXCEED THE MAXIMUM ALLOWED. */
      ZF_BUF_RECS:= ZB_TOTAL_RECORDS/2 -ZB_RECS_WRITTEN;
      ZQ_NEXT := FALSE;
    FI;
  FI;

  IF ZQ_NEXT
  THEN
    IF ZB_RECS_PER_BUF > (ZB_TOTAL_RECORDS-ZB_RECS_WRITTEN)
    THEN
      /* DON'T NEED ALL THE SPACE */
      ZF_BUF_RECS:=ZB_TOTAL_RECORDS - ZB_RECS_WRITTEN;
    ELSE
      /* THE MAXIMUM SIZE USER BUFFER TAKES SOME OF THE RECORDS */
      ZF_BUF_RECS:=ZB_RECS_PER_BUF;
    FI;
  FI;

  ZF_BUF_SIZE:=ZF_BUF_RECS * ZB_RECORD_SIZE;
OD;

END Q_S0785_GET_WRITE_BUFFER_ATTRIBUTES;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0786_GET_T110_1_WRITE_BUF_ATTRIBUTES             */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/12/15                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       GETS THE BUFFER ATTRIBUTES OF NUMBER OF RECORDS AND SIZE OF  */
/*       BUFFER TO WRITE FOR THE SPECIAL T110 PART 1 CASE OF SPLIT    */
/*       DS MEMORY.                                                   */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_BUF_RECS INT LOC,                          */
/*                      ZF_BUF_SIZE INT LOC                           */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0804_HIS_UPD_T110_1                        */
/*                      Q_S0875_COPY_T110_1_HIS_TO_MEMOR              */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0786_GET_T110_1_WRITE_BUF_ATTRIBUTES: PROC(
                         ZF_BUF_RECS  INT LOC,
                         ZF_BUF_SIZE  INT LOC);

/* GET THE NUMBER OF RECORDS AND THE SIZE OF THE USER BUFFER
 * THAT IS NEEDED.
 */
DO WITH Z_BUFFER_ATTRIB;
  /* MEMORY IS SPLIT IN HALF SO ... */
  IF ZB_RECS_WRITTEN < ZB_TOTAL_RECORDS/2 AND
     ZB_RECS_WRITTEN + ZB_RECS_PER_BUF > ZB_TOTAL_RECORDS/2
  THEN
    /* THIS WILL EXCEED THE MAXIMUM ALLOWED. */
    ZF_BUF_RECS:= ZB_TOTAL_RECORDS/2 -ZB_RECS_WRITTEN;
  ELSE
    IF ZB_RECS_PER_BUF > (ZB_TOTAL_RECORDS-ZB_RECS_WRITTEN)
    THEN
      /* DON'T NEED ALL THE SPACE */
      ZF_BUF_RECS:=ZB_TOTAL_RECORDS - ZB_RECS_WRITTEN;
    ELSE
      /* THE MAXIMUM SIZE USER BUFFER TAKES SOME OF THE RECORDS */
      ZF_BUF_RECS:=ZB_RECS_PER_BUF;
    FI;
  FI;

  ZF_BUF_SIZE:=ZF_BUF_RECS * ZB_RECORD_SIZE;
OD;

END Q_S0786_GET_T110_1_WRITE_BUF_ATTRIBUTES;
/******************************************************************/
Q_S0786_OLC_GET_T110_1_WRITE_BUF_ATTRIBUTES: PROC(
                         ZF_BUF_RECS  INT LOC,
                         ZF_BUF_SIZE  INT LOC);

/* GET THE NUMBER OF RECORDS AND THE SIZE OF THE USER BUFFER
 * THAT IS NEEDED.
 */
DCL ZQ_OLC_NBR_RECS ZM_INT_TO_LN_INT;
DCL ZQ_OLC_REC_SIZE ZM_INT_TO_LN_INT;
ZQ_OLC_NBR_RECS.ZB_LOW_INT := 0;
ZQ_OLC_NBR_RECS.ZB_HIGH_INT := 0;
ZQ_OLC_REC_SIZE.ZB_LOW_INT := 0;
ZQ_OLC_REC_SIZE.ZB_HIGH_INT := 0;
DO WITH Z_OLC_BUFFER_ATTRIB;
  /* MEMORY IS SPLIT IN HALF SO ... */
  IF ZB_RECS_WRITTEN < (ZB_TOTAL_RECORDS/2L) AND
     ZB_RECS_WRITTEN + ZB_RECS_PER_BUF > (ZB_TOTAL_RECORDS/2L)
  THEN
    /* THIS WILL EXCEED THE MAXIMUM ALLOWED. */
    /*ZF_BUF_RECS:= (INT(ZB_TOTAL_RECORDS/2L)) -ZB_RECS_WRITTEN;*/
ZQ_OLC_NBR_RECS.ZB_LONG_INT := 
                       (ZB_TOTAL_RECORDS/2L) - ZB_RECS_WRITTEN;
    ZF_BUF_RECS := ZQ_OLC_NBR_RECS.ZB_LOW_INT; 
  ELSE
    IF ZB_RECS_PER_BUF > (ZB_TOTAL_RECORDS-ZB_RECS_WRITTEN)
    THEN
      /* DON'T NEED ALL THE SPACE */
       /*ZF_BUF_RECS:= ZB_TOTAL_RECORDS - ZB_RECS_WRITTEN;*/
    ZQ_OLC_NBR_RECS.ZB_LONG_INT := ZB_TOTAL_RECORDS - ZB_RECS_WRITTEN;
    ZF_BUF_RECS := ZQ_OLC_NBR_RECS.ZB_LOW_INT; 
    ELSE
      /* THE MAXIMUM SIZE USER BUFFER TAKES SOME OF THE RECORDS */
      /*ZF_BUF_RECS:=ZB_RECS_PER_BUF;*/
     ZQ_OLC_NBR_RECS.ZB_LONG_INT := ZB_RECS_PER_BUF;
     ZF_BUF_RECS := ZQ_OLC_NBR_RECS.ZB_LOW_INT; 
    FI;
  FI;
  ZQ_OLC_REC_SIZE.ZB_LONG_INT := ZB_RECORD_SIZE; 
ZF_BUF_SIZE:=ZF_BUF_RECS * ZQ_OLC_REC_SIZE.ZB_LOW_INT;
  
OD;
END Q_S0786_OLC_GET_T110_1_WRITE_BUF_ATTRIBUTES;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0790_GET_START_RECORD_OF_BUFFER                  */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       GETS THE NUMBER OF THE STARTING BUFFER FO RTHE CURRENT RECORD*/
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      INT                                           */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0802_HIS_UPD                               */
/*                      Q_S0804_HIS_UPD_T110_1                        */
/*                      Q_S0807_WRITE_TO_HIST_FILE                    */
/*                      Q_S0871_COPY_T180_HIS_TO_MEMORY               */
/*                      Q_S0872_COPY_HIS_TO_MEM                       */
/*                      Q_S0875_COPY_T110_1_HIS_TO_MEMOR              */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0790_GET_START_RECORD_OF_BUFFER: PROC()
                         RETURNS(INT);

RETURN(Z_BUFFER_ATTRIB.ZB_RECS_WRITTEN+1);

END Q_S0790_GET_START_RECORD_OF_BUFFER;
/**********************************************************************/
Q_S0790_OLC_GET_START_RECORD_OF_BUFFER: PROC()
                         RETURNS(INT);

DCL GET_OLC_START ZM_INT_TO_LN_INT;
GET_OLC_START.ZB_LOW_INT := 0;
GET_OLC_START.ZB_HIGH_INT := 0;
GET_OLC_START.ZB_LONG_INT := Z_OLC_BUFFER_ATTRIB.ZB_RECS_WRITTEN ;

RETURN(GET_OLC_START.ZB_LOW_INT+1);

END Q_S0790_OLC_GET_START_RECORD_OF_BUFFER;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0792_MARK_RECORDS_WRITTEN                        */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       INCREMENT THE NUMBER OF RECORDS WRITTEN.                     */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_NBR_RECS_WRITTEN INT                       */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0802_HIS_UPD                               */
/*                      Q_S0804_HIS_UPD_T110_1                        */
/*                      Q_S0807_WRITE_TO_HIST_FILE                    */
/*                      Q_S0871_COPY_T180_HIS_TO_MEMORY               */
/*                      Q_S0872_COPY_HIS_TO_MEM                       */
/*                      Q_S0875_COPY_T110_1_HIS_TO_MEMOR              */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0792_MARK_RECORDS_WRITTEN: PROC(ZF_NBR_RECS_WRITTEN INT);

DO WITH Z_BUFFER_ATTRIB;
  ZB_RECS_WRITTEN:=ZB_RECS_WRITTEN+ZF_NBR_RECS_WRITTEN;
OD;

END Q_S0792_MARK_RECORDS_WRITTEN;
/*********************************************************************/
Q_S0792_OLC_MARK_RECORDS_WRITTEN: PROC(ZF_NBR_RECS_WRITTEN INT);
DCL ZQ_OLC_RECS_WRITTEN ZM_INT_TO_LN_INT;
ZQ_OLC_RECS_WRITTEN.ZB_LOW_INT := 0;
ZQ_OLC_RECS_WRITTEN.ZB_HIGH_INT := 0;
 
DO WITH Z_OLC_BUFFER_ATTRIB;
  ZQ_OLC_RECS_WRITTEN.ZB_LOW_INT := ZF_NBR_RECS_WRITTEN;
  ZB_RECS_WRITTEN:=ZB_RECS_WRITTEN+ZQ_OLC_RECS_WRITTEN.ZB_LONG_INT;
    
OD;

END Q_S0792_OLC_MARK_RECORDS_WRITTEN;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0794_ALL_RECORDS_WRITTEN                         */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       ARE ALL RECORDS WRITTEN.                                     */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0802_HIS_UPD                               */
/*                      Q_S0804_HIS_UPD_T110_1                        */
/*                      Q_S0872_COPY_HIS_TO_MEM                       */
/*                      Q_S0875_COPY_T110_1_HIS_TO_MEMOR              */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0794_ALL_RECORDS_WRITTEN: PROC()
                             RETURNS(BOOL);

DO WITH Z_BUFFER_ATTRIB;
  RETURN(ZB_RECS_WRITTEN=ZB_TOTAL_RECORDS);
OD;

END Q_S0794_ALL_RECORDS_WRITTEN;
/**********************************************************************/
Q_S0794_OLC_ALL_RECORDS_WRITTEN: PROC()
                             RETURNS(BOOL);

DO WITH Z_OLC_BUFFER_ATTRIB;
  RETURN(ZB_RECS_WRITTEN=ZB_TOTAL_RECORDS);
OD;

END Q_S0794_OLC_ALL_RECORDS_WRITTEN;
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0796_INIT_BUFFER_ATTRIBUTES                      */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       INITIALISES THE BUFFER ATTRIBUTES NEEDED FOR A PARTICULAR    */
/*       MEASUREMENT TYPE.                                            */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_MEAS_TYPE M_MEAS_TYPE,                     */
/*                      ZF_HIS_NBR INT                                */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0780_GET_MAX_NUM_RECS                      */
/*                      Q_S0755_GET_RECORD_SIZE                       */
/*     CALLED FROM:                                                   */
/*                      Q_S0802_HIS_UPD                               */
/*                      Q_S0804_HIS_UPD_T110_1                        */
/*                      Q_S0808_UPD_HIS_TYPE_180                      */
/*                      Q_S0871_COPY_T180_HIS_TO_MEMORY               */
/*                      Q_S0872_COPY_HIS_TO_MEM                       */
/*                      Q_S0875_COPY_T110_1_HIS_TO_MEMOR              */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0796_INIT_BUFFER_ATTRIBUTES: PROC(ZF_MEAS_TYPE M_MEAS_TYPE,
                                     ZF_HIS_NBR   INT);

/* THERE IS ONLY ONE BUFFER WRITTEN AT A TIME AND WITH THE
 * LIMITATION IN TWIN FILE WRITING THIS IS LIKELY TO BE
 * THE CASE FOR A WHILE SO Z_BUFFER_ATTRIB IS GLOBAL.
 */
DO WITH Z_BUFFER_ATTRIB;
  ZB_TOTAL_RECORDS:=Q_S0780_GET_MAX_NUM_RECS(ZF_MEAS_TYPE,
                                             ZF_HIS_NBR);
  ZB_RECORD_SIZE:=Q_S0755_GET_RECORD_SIZE(ZF_MEAS_TYPE,
                                           ZF_HIS_NBR);

  IF ZB_TOTAL_RECORDS > (ZS_MAX_BUFFER_SIZE/ZB_RECORD_SIZE)
  THEN
    /* MORE THAN ONE MAXIMIMUM SIZE BUFFER IS NEEDED */
    ZB_RECS_PER_BUF:=ZS_MAX_BUFFER_SIZE/ZB_RECORD_SIZE;
  ELSE
    ZB_RECS_PER_BUF:=ZB_TOTAL_RECORDS;
  FI;

  ZB_RECS_WRITTEN:=0;
OD;

END Q_S0796_INIT_BUFFER_ATTRIBUTES;
/**********************************************************************/
Q_S0796_OLC_INIT_BUFFER_ATTRIBUTES: PROC(ZF_MEAS_TYPE M_MEAS_TYPE,
                                     ZF_HIS_NBR   INT);

/* THERE IS ONLY ONE BUFFER WRITTEN AT A TIME AND WITH THE
 * LIMITATION IN TWIN FILE WRITING THIS IS LIKELY TO BE
 * THE CASE FOR A WHILE SO Z_BUFFER_ATTRIB IS GLOBAL.
 */
DCL ZQ_OLC_RECS_WRITTEN ZM_INT_TO_LN_INT;
/*DCL ZQ_OLC_RECS_SIZE ZM_INT_TO_LN_INT;*/
ZQ_OLC_RECS_WRITTEN.ZB_LOW_INT := 0;
ZQ_OLC_RECS_WRITTEN.ZB_HIGH_INT := 0;
DO WITH Z_OLC_BUFFER_ATTRIB;
  ZB_TOTAL_RECORDS:=Q_S0780_OLC_GET_MAX_NUM_RECS(ZF_MEAS_TYPE,
                                             ZF_HIS_NBR);

ZQ_OLC_RECS_WRITTEN.ZB_LOW_INT := Q_S0755_GET_RECORD_SIZE(ZF_MEAS_TYPE,
                                   ZF_HIS_NBR);
 ZB_RECORD_SIZE := ZQ_OLC_RECS_WRITTEN.ZB_LONG_INT; 
  IF ZB_TOTAL_RECORDS > ((LONG_INT(ZS_MAX_BUFFER_SIZE))/ZB_RECORD_SIZE)
  THEN
   ZB_RECS_PER_BUF:= (LONG_INT(ZS_MAX_BUFFER_SIZE))/ZB_RECORD_SIZE;
  ELSE
    ZB_RECS_PER_BUF:= (ZB_TOTAL_RECORDS);
  FI;

  ZB_RECS_WRITTEN:=0L;
OD;

END Q_S0796_OLC_INIT_BUFFER_ATTRIBUTES;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0798_GET_START_MEM_PTR                           */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       GETS THE START MEMORY PTR FOR CCSI TYPES.                    */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_MEAS_TYPE M_MEAS_TYPE,                     */
/*                      ZF_HIS_NBR INT                                */
/*     RETURNED VALUE:                                                */
/*                      PTR                                           */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0220_GET_STATIC_MEM                        */
/*                      Q_S0230_REG_STATIC_MEM                        */
/*                      Q_S0410_CLEAR_MEMORY                          */
/*                      Q_S0802_HIS_UPD                               */
/*                      Q_S0872_COPY_HIS_TO_MEM                       */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0798_GET_START_MEM_PTR: PROC(ZF_MEAS_TYPE    M_MEAS_TYPE,
                                ZF_HIS_NBR      INT)
                         RETURNS(PTR);

/* NOTE THAT THE RETURN OF THESE VALUES MAY BE DONE BY DEFINING
 * A TABLE - SEE CCRH. FOR THE TIME BEING I CAN'T THINK CLEARLY
 * ENOUGH TO DEFINE ONE.
 */
CASE ZF_MEAS_TYPE OF
  (E_MT_TRAFFIC):                                           /* 1 */
    IF ZF_HIS_NBR = CM_FY32_HF_NBR_TYPE_0011
    THEN
      RETURN(PTR(Z_T1_PTR));
    ELSE
      RETURN(PTR(Z_T1_2_PTR));
    FI;

  (E_MT_RESOURCE_AVAILABILITY):                             /* 2 */
    RETURN(PTR(Z_T2_PTR));

  (E_MT_RESOURCE_USAGE_CCCH):                               /* 3 */
    RETURN(PTR(Z_T3_PTR));

  (E_MT_RESOURCE_USAGE_SDCCH):                              /* 4 */
    RETURN(PTR(Z_T4_PTR));

  (E_MT_RESOURCE_USAGE_RTCH):                               /* 5 */
    RETURN(PTR(Z_T5_PTR));

  (E_MT_HANDOVER):                                          /* 6 */
    RETURN(PTR(Z_T6_PTR));

  (E_MT_LAPD):                                              /* 7 */
  /*CR36/236932*/
    IF ZF_HIS_NBR = CM_FY32_HF_NBR_TYPE_0071
    THEN
      RETURN(PTR(Z_T7_PTR));
    ELSE
      RETURN(PTR(Z_T72_PTR));
    FI;
  /*CR36/236932*/  

  (E_MT_X25):                                               /* 8 */
    RETURN(PTR(Z_T8_PTR));

  (E_MT_NUMBER7):                                           /* 9 */
    RETURN(PTR(Z_T9_PTR));

  (E_MT_A_AND_ABIS_ITF_ANALYSIS):                           /* 18 */
    IF ZF_HIS_NBR = CM_FY32_HF_NBR_TYPE_0181
    THEN
      RETURN(PTR(Z_T18_PTR));
    ELSE
      RETURN(PTR(Z_T18_2_PTR));
    FI;

  (E_MT_SMS):                                               /* 19 */
    RETURN(PTR(Z_T19_PTR));

  (E_MT_SCCP):                                              /* 25 */
    RETURN(PTR(Z_T25_PTR));

  (E_MT_HANDOVER_PER_SERVINGCELL):                          /* 26 */
    RETURN(PTR(Z_T26_PTR));

  (E_MT_HANDOVER_PER_TARGETCELL):                           /* 27 */
    RETURN(PTR(Z_T27_PTR));

  (E_MT_HANDOVER_SDCCH):                                    /* 28 */
    RETURN(PTR(Z_T28_PTR));

  (E_MT_DIRECTED_RETRY):                                    /* 29 */
    RETURN(PTR(Z_T29_PTR));

  (E_MT_SMSCB):                                             /* 30 */
    RETURN(PTR(Z_T30_PTR));

  (E_MT_MULTIBAND_HANDOVERS):                               /* 32 */
    RETURN(PTR(Z_T32_PTR));

  (E_MT_EME):                                               /* 33 */
    RETURN(PTR(Z_T33_PTR));

  (E_MT_VGCS):                                              /* 34 */
    IF ZF_HIS_NBR = CM_FY32_HF_NBR_TYPE_0341
    THEN
      RETURN(PTR(Z_T34_PTR));
    ELSE
      RETURN(PTR(Z_T34_2_PTR));
    FI;
/* BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE */
  (E_MT_IP):                                              /* 35 */
    IF ZF_HIS_NBR = CM_FY32_HF_NBR_TYPE_350
    THEN
       RETURN(PTR(Z_T35_0_PTR));
    ELSE 
/* CR20/225233 */
     IF ZF_HIS_NBR = CM_FY32_HF_NBR_TYPE_353
      THEN
	RETURN(PTR(Z_T35_3_PTR));
      ELSE
/* CR20/225233 */    
      IF ZF_HIS_NBR = CM_FY32_HF_NBR_TYPE_354
      THEN
       RETURN(PTR(Z_T35_4_PTR));
      ELSE
        IF ZF_HIS_NBR = CM_FY32_HF_NBR_TYPE_355
        THEN
         RETURN(PTR(Z_T35_5_PTR));
      /* START : WIPRO B11 IP MR0 PKG1 */
   /*START: CR20/284751 BTS FRQ SYNCH */
         ELSE
        IF ZF_HIS_NBR = CM_FY32_HF_NBR_TYPE_356
        THEN
         RETURN(PTR(Z_T35_6_PTR));
   /*END :CR20/284751 BTS FRQ SYNCH */
         ELSE
         IF ZF_HIS_NBR = CM_FY32_HF_NBR_TYPE_357
         THEN
          RETURN(PTR(Z_T35_7_PTR));
         ELSE
          IF ZF_HIS_NBR = CM_FY32_HF_NBR_TYPE_358
          THEN
           RETURN(PTR(Z_T35_8_PTR)); 
      /* END : WIPRO B11 IP MR0 PKG1 */
          FI; 
         FI;
        FI;
      FI;
    FI;
/* CR20/225233 */        
   FI; 
 FI; 
/* CR20/225233 */       
/* END: ADD-WIPRO-B10-MX-MR2-CHANGE */
/*START : IURG FEATURE */
  (E_MT_IURG ):		/*TYPE 36*/		
      RETURN(PTR(Z_T36_PTR));
/* END : IURG FEATURE */

/* BEGIN : B12 VAMOS */
  (E_MT_VAMOS ):		/*TYPE 37*/	
        IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_370
	THEN
      RETURN(PTR(Z_T37_0_PTR));
	ELSE
/*START:00860192 */
          IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_371
	THEN  
/*END:00860192 */
RETURN(PTR(Z_T37_1_PTR));
          FI;
	FI;
/* END : B12 VAMOS */

  (E_MT_CELL_TRX_OVERVIEW_COUNTERS):
    IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_1101
    THEN
      /* NOT REALLY APPLICABLE FOR BOTH PARTS */
      RETURN(PTR(Z_T110_1_PTR));
    ELSE
      IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_1102
      THEN
        RETURN(PTR(Z_T110_2_PTR));
      ELSE
        IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_1103
        THEN
          RETURN(PTR(Z_T110_3_PTR));
        ELSE
          IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_1104
          THEN
            RETURN(PTR(Z_T110_4_PTR));
          ELSE
            IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_1105
            THEN
              RETURN(PTR(Z_T110_5_PTR));
            ELSE
              IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_1106
              THEN
                RETURN(PTR(Z_T110_6_PTR));
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
            ELSE
             IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_1107 
               THEN  
                  RETURN(PTR(Z_T110_7_PTR));  
                
/* END: ADD-WIPRO-B10-MR1-CHANGE */ 
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
               ELSE
                IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_1108 
                THEN
                  RETURN(PTR(Z_T110_8_PTR));  
/*ADDED FOR GSL COUNTERS MEMO*/
               ELSE
                IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_1109 
                 THEN
                  RETURN(PTR(Z_T110_9_PTR));  
/*ADDED FOR A-FLEX NRI COUNTERS */
                 ELSE
                  IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_1110 
                  THEN
                    RETURN(PTR(Z_T110_10_PTR));  
/* END: CR302024 RFI4448 */
/*START : AUPOIP FEATURE */
                  ELSE
                   IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_1111 
                   THEN
                    RETURN(PTR(Z_T110_11_PTR));  
                   ELSE
                    IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_1112 
                    THEN
                     RETURN(PTR(Z_T110_12_PTR));                
/*BEGIN : CR20/313054 */
                    ELSE
		      IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_1113 
                      THEN
                        RETURN(PTR(Z_T110_13_PTR)); 
/*END : CR20/313054 */	
/* BEGIN: CR 605005 */
		     ELSE
		      IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_1114 
                      THEN
                        RETURN(PTR(Z_T110_14_PTR));
/* BEGIN CR:745699 */ 
                     /* FI;*/
                      ELSE
                       IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_1115
                       THEN
                        RETURN(PTR(Z_T110_15_1_PTR));
/*START CR MOCN */
                       ELSE
                         IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_1117
                         THEN
                           RETURN(PTR(Z_T110_17_PTR));
  /*begin CR1238146 A-GPS*/
                         ELSE
                          IF ZF_HIS_NBR=CM_FY32_HF_NBR_TYPE_1118
                          THEN
                            RETURN(PTR(Z_T110_18_PTR));  
                          FI;
  /*end CR1238146 A-GPS*/
                         FI;  
/*END CR MOCN */   
                       FI;
                      FI;
/* END: CR 605005 */		   
		      FI;
	            FI;
	           FI;
/* END : AUPOIP FEATURE */
                  FI;
/*ADDED FOR A-FLEX NRI COUNTERS*/  
               FI;  
/*ADDED FOR GSL COUNTERS MEMO*/                  
               FI;
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
              FI;
            FI;
          FI;
        FI;
      FI;
    FI;
   FI;
  (E_MT_TRAFFIC_FLOW):                                      /* 180 */
   RETURN(PTR(Z_T180_1_PTR));

  ELSE
ESAC;
RETURN (NULL);
END Q_S0798_GET_START_MEM_PTR;
/* *******************************************************************/
/*deleted the entire fn */
/*Q_S0799_ASSIGN_MEM_PTR */
/********************************************/
/* Q_S08XX HISTORY FILE HANDLING PROCEDURES */
/********************************************/

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0800_UPDATE_HISTORY_FILES                        */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       UPDATES ALL THE HISTORY FILES FOR THE ACTIVE CCSI TYPES.     */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0200_HIS_UPD_REQ                           */
/*                      Q_S0750_GET_HISTORY_FILE                      */
/*                      Q_S0801_UPDATE_HISTORY_FILE                   */
/*                      Q_S0140_MOD_R_PM_FILES                        */
/*                      Q_S0170_MOD_R_PM_ACT                          */
/*                      Q_S0806_UPDATE_HISTORY_TYPE_110               */
/*     CALLED FROM:                                                   */
/*                      Q_S0660_DO_NEXT_POLL_ACTION                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0800_UPDATE_HISTORY_FILES: PROC();

DCL ZQ_MEAS_TYPE    M_MEAS_TYPE,
    ZQ_HISTORY_NAME M_FILE_NAME,
    ZQ_HISTORY_NBR  INT;

/* DO FOR TYPES WITH A SINGLE HISTORY FILE EACH */
DO FOR ZQ_MEAS_TYPE := E_MT_TRAFFIC TO E_MT_CELL_TRX_OVERVIEW_COUNTERS;
  CASE ZQ_MEAS_TYPE OF
    (E_MT_RESOURCE_AVAILABILITY,                                /* 2 */
     E_MT_RESOURCE_USAGE_CCCH,                                  /* 3 */
     E_MT_RESOURCE_USAGE_SDCCH,                                 /* 4 */
     E_MT_RESOURCE_USAGE_RTCH,                                  /* 5 */
     E_MT_HANDOVER,                                             /* 6 */
     /*CR36/236932*/
     /*E_MT_LAPD,*/                                             /* 7 */
     /*CR36/236932*/
     E_MT_X25,                                                  /* 8 */
     E_MT_NUMBER7,                                              /* 9 */
     E_MT_SMS,                                                 /* 19 */
     E_MT_SCCP,                                                /* 25 */
     E_MT_HANDOVER_PER_SERVINGCELL,                            /* 26 */
     E_MT_HANDOVER_PER_TARGETCELL,                             /* 27 */
     E_MT_HANDOVER_SDCCH,                                      /* 28 */
     E_MT_DIRECTED_RETRY,                                      /* 29 */
     E_MT_SMSCB,                                               /* 30 */
     E_MT_MULTIBAND_HANDOVERS,                                /* 32 */
     E_MT_EME):                                                /* 33 */


    /* CHECK IF THE TYPES REQUIRES HISTORY FILE TO BE PRODUCED - THIS
     * IS *NOT* THE SAME AS THE JOB IS ACTIVE.
     */
    IF Q_S0200_HIS_UPD_REQ(ZQ_MEAS_TYPE)
    THEN
      /* GET HISTORY FILE ATTRIBUTES FROM MEASUREMENT TYPE. */
      Q_S0750_GET_HISTORY_FILE(ZQ_MEAS_TYPE,
                               ZQ_HISTORY_NBR,
                               ZQ_HISTORY_NAME);

      IF Q_S0801_UPDATE_HISTORY_FILE(ZQ_MEAS_TYPE,
                                     ZQ_HISTORY_NBR,
                                     ZQ_HISTORY_NAME)
      THEN
        IF Q_S0140_MOD_R_PM_FILES(ZQ_MEAS_TYPE,
                               E_PM_HIS_UPDATED) THEN
          ;
        FI;
        Q_S0170_MOD_R_PM_ACT(ZQ_MEAS_TYPE, TRUE);
      ELSE
        /* ERRROR AND CLOSE */
        Q_S0170_MOD_R_PM_ACT(ZQ_MEAS_TYPE, FALSE);
      FI;
    FI; /* IF TYPE ACTIVE */

    (E_MT_TRAFFIC):                                  /* 1 */
     IF Q_S0200_HIS_UPD_REQ(ZQ_MEAS_TYPE)
     THEN
      /* THIS IS UPDATED SEPARATELY AS IT IS COMPLICATED BY THE
       * PRESENCE OF 2 HISTORY FILES.
       */
       IF Q_S0805_UPDATE_HISTORY_TYPE_1()
       THEN
         IF Q_S0140_MOD_R_PM_FILES(ZQ_MEAS_TYPE,
                                E_PM_HIS_UPDATED) THEN
           ;
         FI;
         Q_S0170_MOD_R_PM_ACT(ZQ_MEAS_TYPE, TRUE);
       ELSE
         /* ERRROR AND CLOSE */
         Q_S0170_MOD_R_PM_ACT(ZQ_MEAS_TYPE, FALSE);
       FI;
     FI; /* IF TYPE ACTIVE */

    (E_MT_A_AND_ABIS_ITF_ANALYSIS):                   /* 18 */
     IF Q_S0200_HIS_UPD_REQ(ZQ_MEAS_TYPE)
     THEN
      /* THIS IS UPDATED SEPARATELY AS IT IS COMPLICATED BY THE
       * PRESENCE OF 2 HISTORY FILES.
       */
       IF Q_S0803_UPDATE_HISTORY_TYPE_18()
       THEN
         IF Q_S0140_MOD_R_PM_FILES(ZQ_MEAS_TYPE,
                                E_PM_HIS_UPDATED) THEN
           ;
         FI;
         Q_S0170_MOD_R_PM_ACT(ZQ_MEAS_TYPE, TRUE);
       ELSE
         /* ERRROR AND CLOSE */
         Q_S0170_MOD_R_PM_ACT(ZQ_MEAS_TYPE, FALSE);
       FI;
     FI; /* IF TYPE ACTIVE */
    /*CR36/236932*/
    (E_MT_LAPD):                   /*7 */
     IF Q_S0200_HIS_UPD_REQ(ZQ_MEAS_TYPE)
     THEN
      /* THIS IS UPDATED SEPARATELY AS IT IS COMPLICATED BY THE
       * PRESENCE OF 2 HISTORY FILES.
       */
       IF Q_S0804_UPDATE_HISTORY_TYPE_7()
       THEN
         IF Q_S0140_MOD_R_PM_FILES(ZQ_MEAS_TYPE,
                                E_PM_HIS_UPDATED) THEN
           ;
         FI;
         Q_S0170_MOD_R_PM_ACT(ZQ_MEAS_TYPE, TRUE);
       ELSE
         /* ERRROR AND CLOSE */
         Q_S0170_MOD_R_PM_ACT(ZQ_MEAS_TYPE, FALSE);
       FI;
     FI; /* IF TYPE ACTIVE */
    /*CR36/236932*/
    (E_MT_VGCS):                                      /* 34 */
     IF Q_S0200_HIS_UPD_REQ(ZQ_MEAS_TYPE)
     THEN
      /* THIS IS UPDATED SEPARATELY AS IT IS COMPLICATED BY THE
       * PRESENCE OF 2 HISTORY FILES.
       */
       IF Q_S0809_UPDATE_HISTORY_TYPE_34()
       THEN
         IF Q_S0140_MOD_R_PM_FILES(ZQ_MEAS_TYPE,
                                E_PM_HIS_UPDATED) THEN
           ;
         FI;
         Q_S0170_MOD_R_PM_ACT(ZQ_MEAS_TYPE, TRUE);
       ELSE
         /* ERRROR AND CLOSE */
         Q_S0170_MOD_R_PM_ACT(ZQ_MEAS_TYPE, FALSE);
       FI;
     FI; /* IF TYPE ACTIVE */
 
    /*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE*/
      (E_MT_IP):
       IF Q_S0200_HIS_UPD_REQ(ZQ_MEAS_TYPE)
     THEN
      /* THIS IS UPDATED SEPARATELY AS IT IS COMPLICATED BY THE
       * PRESENCE OF 3 HISTORY FILES.
       */
       IF Q_S8809_UPDATE_HISTORY_TYPE_35()
       THEN
         IF Q_S0140_MOD_R_PM_FILES(ZQ_MEAS_TYPE,
                                E_PM_HIS_UPDATED) THEN
           ;
         FI;
         Q_S0170_MOD_R_PM_ACT(ZQ_MEAS_TYPE, TRUE);
       ELSE
         /* ERRROR AND CLOSE */
         Q_S0170_MOD_R_PM_ACT(ZQ_MEAS_TYPE, FALSE);
       FI;
     FI; /* IF TYPE ACTIVE */
/*START: IURG FEATURE */ 
      (E_MT_IURG):
       IF Q_S0200_HIS_UPD_REQ(ZQ_MEAS_TYPE)
     THEN
      /* THIS IS UPDATED SEPARATELY AS IT IS COMPLICATED BY THE
       * PRESENCE OF NEW HISTORY FILE */
        IF Q_S8972_UPDATE_HISTORY_TYPE_36()
       THEN
         IF Q_S0140_MOD_R_PM_FILES(ZQ_MEAS_TYPE,
                                E_PM_HIS_UPDATED) THEN
           ;
         FI;
         Q_S0170_MOD_R_PM_ACT(ZQ_MEAS_TYPE, TRUE);
       ELSE
         /* ERRROR AND CLOSE */
         Q_S0170_MOD_R_PM_ACT(ZQ_MEAS_TYPE, FALSE);
       FI;
     FI; /* IF TYPE ACTIVE */
/*END : IURG FEATURE */
    /*END: ADD-WIPRO-B10-MX-MR2-CHANGE*/
/* BEGIN : B12 VAMOS */
(E_MT_VAMOS):
       IF Q_S0200_HIS_UPD_REQ(ZQ_MEAS_TYPE)
     THEN
      /* THIS IS UPDATED SEPARATELY AS IT IS COMPLICATED BY THE
       * PRESENCE OF NEW HISTORY FILE */
        IF Q_S8999_UPDATE_HISTORY_TYPE_37()
       THEN
         IF Q_S0140_MOD_R_PM_FILES(ZQ_MEAS_TYPE,
                                E_PM_HIS_UPDATED) THEN
           ;
         FI;
         Q_S0170_MOD_R_PM_ACT(ZQ_MEAS_TYPE, TRUE);
       ELSE
         /* ERRROR AND CLOSE */
         Q_S0170_MOD_R_PM_ACT(ZQ_MEAS_TYPE, FALSE);
       FI;
     FI; /* IF TYPE ACTIVE */

/* END : B12 VAMOS */
    (E_MT_CELL_TRX_OVERVIEW_COUNTERS):                /* 110 */
     IF Q_S0200_HIS_UPD_REQ(ZQ_MEAS_TYPE)
     THEN
      /* THIS IS UPDATED SEPARATELY AS IT IS COMPLICATED BY THE
       * PRESENCE OF 3 HISTORY FILES.
       */
       IF Q_S0806_UPDATE_HISTORY_TYPE_110()
       THEN
         IF Q_S0140_MOD_R_PM_FILES(ZQ_MEAS_TYPE,
                                E_PM_HIS_UPDATED) THEN
           ;
         FI;
         Q_S0170_MOD_R_PM_ACT(ZQ_MEAS_TYPE, TRUE);
       ELSE
         /* ERRROR AND CLOSE */
         Q_S0170_MOD_R_PM_ACT(ZQ_MEAS_TYPE, FALSE);
       FI;
     FI; /* IF TYPE ACTIVE */

    ELSE
       /* UNWANTED MEASUREMENT TYPES */
    ESAC;
OD; /* DO FOR MEAS TYPE */

END Q_S0800_UPDATE_HISTORY_FILES;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0801_UPDATE_HISTORY_FILE                         */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/06                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       UPDATES A HISTORY FILE ON REQUEST USING CONTENTS OF MEMORY.  */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_MEAS_TYPE M_MEAS_TYPE,                     */
/*                      ZF_HISTORY_NBR INT,                           */
/*                      ZF_HISTORY_NAME M_FILE_NAME LOC               */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0840_FILE_EXISTS                           */
/*                      Q_S0818_OPEN_HIST_FILE                        */
/*                      Q_S0755_GET_RECORD_SIZE                       */
/*                      Q_S0808_UPD_HIS_TYPE_180                      */
/*                      Q_S0802_HIS_UPD                               */
/*                      Q_S0812_CLOSE_HIS_FILE                        */
/*     CALLED FROM:                                                   */
/*                      Q_S0660_DO_NEXT_POLL_ACTION                   */
/*                      Q_S0800_UPDATE_HISTORY_FILES                  */
/*                      Q_S0860_RESET_CCI_DS                          */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0801_UPDATE_HISTORY_FILE: PROC(ZF_MEAS_TYPE    M_MEAS_TYPE,
                                  ZF_HISTORY_NBR  INT,
                                  ZF_HISTORY_NAME M_FILE_NAME LOC)
                             RETURNS(BOOL);
DCL ZQ_ACCESS  M_ACCESS,
    ZQ_SUCCESS BOOL;

ZQ_SUCCESS:=FALSE;

IF Q_S0840_FILE_EXISTS(ZF_HISTORY_NBR,
                       ZF_HISTORY_NAME)
THEN
  ZQ_ACCESS:=E_MOD_REQ;
ELSE
  /* IF FILE DOES NOT EXIST THEN CREATE IT. */
  ZQ_ACCESS:=E_WRITE_REQ;
FI;

/* OPEN THE HISTORY FILE */
IF Q_S0818_OPEN_HIST_FILE(ZF_HISTORY_NBR,
                          ZF_HISTORY_NAME,
                         Q_S0755_GET_RECORD_SIZE(ZF_MEAS_TYPE,
                                                 ZF_HISTORY_NBR),
                          ZQ_ACCESS
                          )
THEN
  /* HISTORY FILE IS OPENED */
  IF ZF_MEAS_TYPE = E_MT_TRAFFIC_FLOW
  THEN
    IF Q_S0808_UPD_HIS_TYPE_180(ZF_HISTORY_NBR,
                                ZF_MEAS_TYPE)
    THEN
      ZQ_SUCCESS:=TRUE;
    FI;
  ELSIF Q_S0802_HIS_UPD(ZF_HISTORY_NBR,
                        ZF_MEAS_TYPE)
  THEN
    ZQ_SUCCESS:=TRUE;
  FI;
  Q_S0812_CLOSE_HIS_FILE();
FI; /* HISTORY FILE OPENED */

RETURN (ZQ_SUCCESS);

END Q_S0801_UPDATE_HISTORY_FILE;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0802_HIS_UPD                                     */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       UPDATES ALL THE HISTORY FILES FOR TYPES ALL TYPES.           */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_HISTORY_NBR INT,                           */
/*                      ZF_MEAS_TYPE M_MEAS_TYPE                      */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0796_INIT_BUFFER_ATTRIBUTES                */
/*                      Q_S0798_GET_START_MEM_PTR                     */
/*                      Q_S0794_ALL_RECORDS_WRITTEN                   */
/*                      Q_S0785_GET_WRITE_BUFFER_ATTRIBU              */
/*                      Q_S0030_GET_USER_BUF                          */
/*                      Q_S0100_COPY_BLOCK_OF_MEMORY                  */
/*                      Q_S0822_WRITE_HIST_FILE                       */
/*                      Q_S0790_GET_START_RECORD_OF_BUFF              */
/*                      Q_S0755_GET_RECORD_SIZE                       */
/*                      Q_S0792_MARK_RECORDS_WRITTEN                  */
/*                      Q_S0110_UPDATE_MEM_PTR                        */
/*                      Q_S0090_ADD_OFFSET_TO_PTR                     */
/*                      Q_S0040_RET_MEM                               */
/*     CALLED FROM:                                                   */
/*                      Q_S0801_UPDATE_HISTORY_FILE                   */
/*                      Q_S0806_UPDATE_HISTORY_TYPE_110               */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0802_HIS_UPD: PROC(ZF_HISTORY_NBR   INT,
                      ZF_MEAS_TYPE     M_MEAS_TYPE)
                 RETURNS(BOOL);


DCL ZQ_HIS_BUF_SIZE INT,
    ZQ_HIS_BUF_RECS INT,
  /*  ZQ_HIS_BUF_PTR  PTR,@@@*/
    ZQ_MEM_PTR      PTR;

/* INITIALISE A GLOBAL BUFFER CONTAINING ATTRIBUTES FOR THE
 * RECORDS THAT MUST BE WRITTEN TO HISTORY FILE.
 */
Q_S0796_INIT_BUFFER_ATTRIBUTES(ZF_MEAS_TYPE,
                               ZF_HISTORY_NBR);

/* GET THE POINTER TO THE MEMORY BLOCK THAT MUST BE COPIED */
ZQ_MEM_PTR:=Q_S0798_GET_START_MEM_PTR(ZF_MEAS_TYPE,
                                      ZF_HISTORY_NBR);

/* DO WHILST ALL RECORDS NOT WRITTEN */
DO WHILE NOT Q_S0794_ALL_RECORDS_WRITTEN() AND ZQ_MEM_PTR/=NULL;
  Q_S0785_GET_WRITE_BUFFER_ATTRIBUTES(ZF_MEAS_TYPE,
                                      ZQ_HIS_BUF_RECS,
                                      ZQ_HIS_BUF_SIZE);

/*  Q_S0030_GET_USER_BUF(ZQ_HIS_BUF_PTR, ZQ_HIS_BUF_SIZE);

  Q_S0100_COPY_BLOCK_OF_MEMORY(ZQ_MEM_PTR,
                               ZQ_HIS_BUF_PTR,
                               ZQ_HIS_BUF_SIZE); @@@ */

  IF Q_S0822_WRITE_HIST_FILE(ZQ_HIS_BUF_RECS,
                             Q_S0790_GET_START_RECORD_OF_BUFFER(),
			     Q_S0755_GET_RECORD_SIZE(ZF_MEAS_TYPE,
                                                     ZF_HISTORY_NBR),
			     /*ZQ_HIS_BUF_PTR,*/
			     ZQ_MEM_PTR)
  THEN
    Q_S0792_MARK_RECORDS_WRITTEN(ZQ_HIS_BUF_RECS);
    /* INCREMENT THE MEMORY POINTER TO THE NEXT PART OF THE HISTORY
     * STRUCTURE IN MEMORY.
     */
    IF NOT Q_S0794_ALL_RECORDS_WRITTEN()
    THEN
      IF ZF_MEAS_TYPE = E_MT_RESOURCE_USAGE_RTCH
      THEN
        Q_S0110_UPDATE_MEM_PTR(ZQ_MEM_PTR, ZQ_HIS_BUF_SIZE,
                               PTR(Z_T5_PTR), PTR(Z_T5_2_PTR));
      ELSIF ZF_MEAS_TYPE = E_MT_HANDOVER_PER_SERVINGCELL
      THEN
        Q_S0110_UPDATE_MEM_PTR(ZQ_MEM_PTR, ZQ_HIS_BUF_SIZE,
                               PTR(Z_T26_PTR), PTR(Z_T26_2_PTR));
      ELSE
        Q_S0090_ADD_OFFSET_TO_PTR(ZQ_MEM_PTR, ZQ_HIS_BUF_SIZE);
      FI;
    FI;
  ELSE
    /* ERRROR AND CLOSE */
    RETURN FALSE;
  FI;

 /* Q_S0040_RET_MEM(ZQ_HIS_BUF_PTR); @@@ */
OD; /* ALL RECORDS ARE WRITTEN */

RETURN (ZQ_MEM_PTR/=NULL);

END Q_S0802_HIS_UPD;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0803_UPDATE_HISTORY_TYPE_18                      */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       UPDATES ALL THE HISTORY FILES FOR THE TYPE 18 .              */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0840_FILE_EXISTS                           */
/*                      Q_S0818_OPEN_HIST_FILE                        */
/*                      Q_S0804_HIS_UPD_T110_1                        */
/*                      Q_S0812_CLOSE_HIS_FILE                        */
/*                      Q_S0802_HIS_UPD                               */
/*     CALLED FROM:                                                   */
/*                      Q_S0800_UPDATE_HISTORY_FILES                  */
/*                      Q_S0860_RESET_CCI_DS                          */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0803_UPDATE_HISTORY_TYPE_18: PROC()
                                 RETURNS(BOOL);

DCL  ZQ_SUCCESS      BOOL;
DCL  ZQ_ACCESS       M_ACCESS;

ZQ_SUCCESS := TRUE;

/************ UPDATE TYPE 18 PART 1 ***************************/

IF Q_S0840_FILE_EXISTS(CM_FY32_HF_NBR_TYPE_0181,
                       CM_FY32_HF_TYPE_0181)
THEN
  ZQ_ACCESS:=E_MOD_REQ;
ELSE
  /* IF FILE DOES NOT EXIST THEN CREATE IT. */
  ZQ_ACCESS:=E_WRITE_REQ;
FI;

/* OPEN THE HISTORY FILE */
IF Q_S0818_OPEN_HIST_FILE(CM_FY32_HF_NBR_TYPE_0181,
                       CM_FY32_HF_TYPE_0181,
                       SIZE(CM_FY32_HIS_TYPE_18_BSC_BUF),
                       ZQ_ACCESS
                          )
THEN
  IF NOT Q_S0802_HIS_UPD(CM_FY32_HF_NBR_TYPE_0181,
                         E_MT_A_AND_ABIS_ITF_ANALYSIS)
  THEN
    /* ERRROR AND CLOSE */
    ZQ_SUCCESS:=FALSE;
  FI;
  Q_S0812_CLOSE_HIS_FILE();
ELSE
  /* FAILED TO OPEN */
  ZQ_SUCCESS:=FALSE;
FI;

/************ UPDATE TYPE 18 PART 2 ***************************/

IF Q_S0840_FILE_EXISTS(CM_FY32_HF_NBR_TYPE_0182,
                       CM_FY32_HF_TYPE_0182)
THEN
  ZQ_ACCESS:=E_MOD_REQ;
ELSE
  /* IF FILE DOES NOT EXIST THEN CREATE IT. */
  ZQ_ACCESS:=E_WRITE_REQ;
FI;

/* OPEN THE HISTORY FILE */
IF Q_S0818_OPEN_HIST_FILE(CM_FY32_HF_NBR_TYPE_0182,
                          CM_FY32_HF_TYPE_0182,
                          SIZE(M_HIS_TYPE_18_CIC),
                          ZQ_ACCESS
                      )
THEN
  IF NOT Q_S0802_HIS_UPD(CM_FY32_HF_NBR_TYPE_0182,
                         E_MT_A_AND_ABIS_ITF_ANALYSIS)
  THEN
    /* ERRROR AND CLOSE */
    ZQ_SUCCESS:=FALSE;
  FI;
  Q_S0812_CLOSE_HIS_FILE();
ELSE
  /* FAILED TO OPEN */
  ZQ_SUCCESS:=FALSE;
FI;

RETURN(ZQ_SUCCESS);

END Q_S0803_UPDATE_HISTORY_TYPE_18;
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0804_UPDATE_HISTORY_TYPE_7                       */
/*                                                                    */
/*     PROGRAMMER:                                                    */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE:                                                 */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       UPDATES ALL THE HISTORY FILES FOR THE TYPE 7  .              */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0840_FILE_EXISTS                           */
/*                      Q_S0818_OPEN_HIST_FILE                        */
/*                      Q_S0804_HIS_UPD_T110_1                        */
/*                      Q_S0812_CLOSE_HIS_FILE                        */
/*                      Q_S0802_HIS_UPD                               */
/*     CALLED FROM:                                                   */
/*                                                                    */
/*                      Q_S0860_RESET_CCI_DS                          */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0804_UPDATE_HISTORY_TYPE_7: PROC()
                                 RETURNS(BOOL);

DCL  ZQ_SUCCESS      BOOL;
DCL  ZQ_ACCESS       M_ACCESS;

ZQ_SUCCESS := TRUE;

/************ UPDATE TYPE 7  PART 1 ***************************/

IF Q_S0840_FILE_EXISTS(CM_FY32_HF_NBR_TYPE_0071,
                       CM_FY32_HF_TYPE_0071)
THEN
  ZQ_ACCESS:=E_MOD_REQ;
ELSE
  /* IF FILE DOES NOT EXIST THEN CREATE IT. */
  ZQ_ACCESS:=E_WRITE_REQ;
FI;

/* OPEN THE HISTORY FILE */
IF Q_S0818_OPEN_HIST_FILE(CM_FY32_HF_NBR_TYPE_0071,
                       CM_FY32_HF_TYPE_0071,
                       SIZE(M_HIS_TYPE_07),
                       ZQ_ACCESS
                          )
THEN
  IF NOT Q_S0802_HIS_UPD(CM_FY32_HF_NBR_TYPE_0071,
                         E_MT_LAPD)
  THEN
    /* ERRROR AND CLOSE */
    ZQ_SUCCESS:=FALSE;
  FI;
  Q_S0812_CLOSE_HIS_FILE();
ELSE
  /* FAILED TO OPEN */
  ZQ_SUCCESS:=FALSE;
FI;

/************ UPDATE TYPE 18 PART 2 ***************************/

IF Q_S0840_FILE_EXISTS(CM_FY32_HF_NBR_TYPE_0072,
                       CM_FY32_HF_TYPE_0072)
THEN
  ZQ_ACCESS:=E_MOD_REQ;
ELSE
  /* IF FILE DOES NOT EXIST THEN CREATE IT. */
  ZQ_ACCESS:=E_WRITE_REQ;
FI;

/* OPEN THE HISTORY FILE */
IF Q_S0818_OPEN_HIST_FILE(CM_FY32_HF_NBR_TYPE_0072,
                          CM_FY32_HF_TYPE_0072,
                          SIZE(CM_HIS_TYPE_07_2),
                          ZQ_ACCESS
                      )
THEN
  IF NOT Q_S0802_HIS_UPD(CM_FY32_HF_NBR_TYPE_0072,
                         E_MT_LAPD)
  THEN
    /* ERRROR AND CLOSE */
    ZQ_SUCCESS:=FALSE;
  FI;
  Q_S0812_CLOSE_HIS_FILE();
ELSE
  /* FAILED TO OPEN */
  ZQ_SUCCESS:=FALSE;
FI;

RETURN(ZQ_SUCCESS);

END Q_S0804_UPDATE_HISTORY_TYPE_7;
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0804_HIS_UPD_T110_1                              */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                 JP QUINN                            97/12/19       */
/*                                                                    */
/*     CREATION DATE: 97/11/17                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       UPDATES ALL HISTORY FILE FOR TYPE 110 PART 1 - SPECIAL CASE  */
/*       AS THE HISTORY FILE MAY BE GREATER THAN 64K FOR G2 BSC AND   */
/*       HENCE THE RSMB MEMORY MUST BE DIVIDED.                       */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_HISTORY_NBR INT,                           */
/*                      ZF_MEAS_TYPE M_MEAS_TYPE                      */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0796_INIT_BUFFER_ATTRIBUTES                */
/*                      Q_S0794_ALL_RECORDS_WRITTEN                   */
/*                      Q_S0110_UPDATE_MEM_PTR                        */
/*                      Q_S0786_GET_T110_1_WRITE_BUF_ATT              */
/*                      Q_S0030_GET_USER_BUF                          */
/*                      Q_S0100_COPY_BLOCK_OF_MEMORY                  */
/*                      Q_S0822_WRITE_HIST_FILE                       */
/*                      Q_S0790_GET_START_RECORD_OF_BUFF              */
/*                      Q_S0755_GET_RECORD_SIZE                       */
/*                      Q_S0792_MARK_RECORDS_WRITTEN                  */
/*                      Q_S0040_RET_MEM                               */
/*     CALLED FROM:                                                   */
/*                      Q_S0806_UPDATE_HISTORY_TYPE_110               */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0804_HIS_UPD_T110_1: PROC(ZF_HISTORY_NBR   INT,
                             ZF_MEAS_TYPE     M_MEAS_TYPE)
                        RETURNS(BOOL);


DCL ZQ_HIS_BUF_SIZE INT,
    ZQ_HIS_BUF_RECS INT,
 /*   ZQ_HIS_BUF_PTR  PTR, @@@ */
    ZQ_MEM_PTR      PTR;

/* INITIALISE A GLOBAL BUFFER CONTAINING ATTRIBUTES FOR THE
 * RECORDS THAT MUST BE WRITTEN TO HISTORY FILE.
 */
Q_S0796_INIT_BUFFER_ATTRIBUTES(ZF_MEAS_TYPE,
                               ZF_HISTORY_NBR);

ZQ_MEM_PTR:=NULL;
ZQ_HIS_BUF_SIZE:=0;

/* NOTE THAT ALL RECORDS ARE WRITTEN EVEN IF NO CELL IS PRESENT.
 * THIS IS BECAUSE - A CELL MAY HAVE BEEN ADDED/DELETED AND
 * THE OVERHEAD IS SMALL COMPARED TO THE COMPLEXITY OF WRITING
 * INTELLIGENT SOFTWARE!
 */
DO WHILE NOT Q_S0794_ALL_RECORDS_WRITTEN();
  /* INCREMENT THE MEMORY POINTER TO THE NEXT PART OF THE HISTORY
   * STRUCTURE IN MEMORY.
   */
/* CR20/209493 */   
/* WORKAROUND ADDED FOR REDUCING CODE SIZE */
/* INSTEAD OF DEFINING A SPECIFIC PROCEDURE FOR SPLIT BLOCKS */
/* FOR 110 HIS NO 1, 4 AND 7 USE THIS PROCEDURE ITSELF      */ 
  IF (ZF_HISTORY_NBR = CM_FY32_HF_NBR_TYPE_1101)
  THEN 
    Q_S0110_UPDATE_MEM_PTR(ZQ_MEM_PTR, ZQ_HIS_BUF_SIZE,
                         PTR(Z_T110_1_PTR), PTR(Z_T110_1_2_PTR));
  
  ELSIF (ZF_HISTORY_NBR = CM_FY32_HF_NBR_TYPE_1107)
  THEN 
    Q_S0110_UPDATE_MEM_PTR(ZQ_MEM_PTR, ZQ_HIS_BUF_SIZE,
                         PTR(Z_T110_7_PTR), PTR(Z_T110_7_2_PTR));
  /*START: MC Counters*/
  ELSIF (ZF_HISTORY_NBR = CM_FY32_HF_NBR_TYPE_1104)
  THEN 
    Q_S0110_UPDATE_MEM_PTR(ZQ_MEM_PTR, ZQ_HIS_BUF_SIZE,
                         PTR(Z_T110_4_PTR), PTR(Z_T110_4_2_PTR));
  /*END: MC Counters*/
 /*ELSIF (ZF_HISTORY_NBR = CM_FY32_HF_NBR_TYPE_1115)
  THEN
    Q_S0110_UPDATE_MEM_PTR(ZQ_MEM_PTR, ZQ_HIS_BUF_SIZE,
                         PTR(Z_T110_15_1_PTR), PTR(Z_T110_15_2_PTR)); 
  /! END : OLC FEATURE */
  FI;  
/* CR20/209493 */   
  Q_S0786_GET_T110_1_WRITE_BUF_ATTRIBUTES(ZQ_HIS_BUF_RECS,
                                          ZQ_HIS_BUF_SIZE);

/*  Q_S0030_GET_USER_BUF(ZQ_HIS_BUF_PTR, ZQ_HIS_BUF_SIZE);

  Q_S0100_COPY_BLOCK_OF_MEMORY(ZQ_MEM_PTR,
                               ZQ_HIS_BUF_PTR,
                               ZQ_HIS_BUF_SIZE); @@@ */

  IF Q_S0822_WRITE_HIST_FILE(ZQ_HIS_BUF_RECS,
                             Q_S0790_GET_START_RECORD_OF_BUFFER(),
                             Q_S0755_GET_RECORD_SIZE(ZF_MEAS_TYPE,
                                                     ZF_HISTORY_NBR),
                             /* ZQ_HIS_BUF_PTR @@@ */
                             ZQ_MEM_PTR)
  THEN
    Q_S0792_MARK_RECORDS_WRITTEN(ZQ_HIS_BUF_RECS);
  ELSE
    /* ERRROR AND CLOSE */
    RETURN FALSE;
  FI;

  /* Q_S0040_RET_MEM(ZQ_HIS_BUF_PTR);  @@@ */
OD; /* ALL RECORDS ARE WRITTEN */

RETURN TRUE;

END Q_S0804_HIS_UPD_T110_1;
/**********************************************************************/
Q_S0804_OLC_HIS_UPD_T110_1: PROC(ZF_HISTORY_NBR   INT,
                             ZF_MEAS_TYPE     M_MEAS_TYPE)
                        RETURNS(BOOL);

DCL ZQ_HIS_BUF_SIZE INT,
    ZQ_HIS_BUF_RECS INT,
     ZQ_MEM_PTR      PTR;

Q_S0796_OLC_INIT_BUFFER_ATTRIBUTES(ZF_MEAS_TYPE,
                               ZF_HISTORY_NBR);
ZQ_MEM_PTR:=NULL;
ZQ_HIS_BUF_SIZE:=0;

DO WHILE NOT Q_S0794_OLC_ALL_RECORDS_WRITTEN();
IF (ZF_HISTORY_NBR = CM_FY32_HF_NBR_TYPE_1115)
THEN
    Q_S0110_OLC_UPDATE_MEM_PTR(ZQ_MEM_PTR, ZQ_HIS_BUF_SIZE,
                         PTR(Z_T110_15_1_PTR), PTR(Z_T110_15_2_PTR)); 
FI; 
Q_S0786_OLC_GET_T110_1_WRITE_BUF_ATTRIBUTES(ZQ_HIS_BUF_RECS,
                                          ZQ_HIS_BUF_SIZE);
IF Q_S0822_WRITE_HIST_FILE(ZQ_HIS_BUF_RECS,
                             Q_S0790_OLC_GET_START_RECORD_OF_BUFFER(),
                             Q_S0755_GET_RECORD_SIZE(ZF_MEAS_TYPE,
                                                     ZF_HISTORY_NBR),
                             ZQ_MEM_PTR)
  THEN
    Q_S0792_OLC_MARK_RECORDS_WRITTEN(ZQ_HIS_BUF_RECS);
  ELSE
    RETURN FALSE;
  FI;
OD;
RETURN TRUE; 

END Q_S0804_OLC_HIS_UPD_T110_1;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0805_UPDATE_HISTORY_TYPE_1                       */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       UPDATES ALL THE HISTORY FILES FOR THE TYPE 110.              */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0840_FILE_EXISTS                           */
/*                      Q_S0818_OPEN_HIST_FILE                        */
/*                      Q_S0804_HIS_UPD_T110_1                        */
/*                      Q_S0812_CLOSE_HIS_FILE                        */
/*                      Q_S0802_HIS_UPD                               */
/*     CALLED FROM:                                                   */
/*                      Q_S0800_UPDATE_HISTORY_FILES                  */
/*                      Q_S0860_RESET_CCI_DS                          */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0805_UPDATE_HISTORY_TYPE_1: PROC()
                                 RETURNS(BOOL);

DCL  ZQ_SUCCESS      BOOL;
DCL  ZQ_ACCESS       M_ACCESS;

ZQ_SUCCESS := TRUE;

/************ UPDATE TYPE 1 PART 1 ***************************/

IF Q_S0840_FILE_EXISTS(CM_FY32_HF_NBR_TYPE_0011,
                       CM_FY32_HF_TYPE_0011)
THEN
  ZQ_ACCESS:=E_MOD_REQ;
ELSE
  /* IF FILE DOES NOT EXIST THEN CREATE IT. */
  ZQ_ACCESS:=E_WRITE_REQ;
FI;

/* OPEN THE HISTORY FILE */
IF Q_S0818_OPEN_HIST_FILE(CM_FY32_HF_NBR_TYPE_0011,
                       CM_FY32_HF_TYPE_0011,
                       SIZE(M_HIS_TYPE_01_CELL),
                       ZQ_ACCESS
                          )
THEN
  IF NOT Q_S0802_HIS_UPD(CM_FY32_HF_NBR_TYPE_0011,
                         E_MT_TRAFFIC)
  THEN
    /* ERRROR AND CLOSE */
    ZQ_SUCCESS:=FALSE;
  FI;
  Q_S0812_CLOSE_HIS_FILE();
ELSE
  /* FAILED TO OPEN */
  ZQ_SUCCESS:=FALSE;
FI;

/************ UPDATE TYPE 1 PART 2 ***************************/

IF Q_S0840_FILE_EXISTS(CM_FY32_HF_NBR_TYPE_0012,
                       CM_FY32_HF_TYPE_0012)
THEN
  ZQ_ACCESS:=E_MOD_REQ;
ELSE
  /* IF FILE DOES NOT EXIST THEN CREATE IT. */
  ZQ_ACCESS:=E_WRITE_REQ;
FI;

/* OPEN THE HISTORY FILE */
IF Q_S0818_OPEN_HIST_FILE(CM_FY32_HF_NBR_TYPE_0012,
                          CM_FY32_HF_TYPE_0012,
                          SIZE(M_HIS_TYPE_01_TRX),
                          ZQ_ACCESS
                      )
THEN
  IF NOT Q_S0802_HIS_UPD(CM_FY32_HF_NBR_TYPE_0012,
                         E_MT_TRAFFIC)
  THEN
    /* ERRROR AND CLOSE */
    ZQ_SUCCESS:=FALSE;
  FI;
  Q_S0812_CLOSE_HIS_FILE();
ELSE
  /* FAILED TO OPEN */
  ZQ_SUCCESS:=FALSE;
FI;

RETURN(ZQ_SUCCESS);

END Q_S0805_UPDATE_HISTORY_TYPE_1;

/* BEGIN : B12 VAMOS */
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S8999_UPDATE_HISTORY_TYPE_37                      */
/*                                                                    */
/*     PROGRAMMER: AABHUSHAN JYOTI KANSAKAR                           */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 2011/01/07                                      */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       UPDATES ALL THE HISTORY FILES FOR THE TYPE 37.               */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0840_FILE_EXISTS                           */
/*                      Q_S0818_OPEN_HIST_FILE                        */
/*                      Q_S0804_HIS_UPD_T37_1                         */
/*                      Q_S0812_CLOSE_HIS_FILE                        */
/*                      Q_S0802_HIS_UPD                               */
/*     CALLED FROM:                                                   */
/*                      Q_S0800_UPDATE_HISTORY_FILES                  */
/*                      Q_S0860_RESET_CCI_DS                          */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S8999_UPDATE_HISTORY_TYPE_37: PROC()
                                 RETURNS(BOOL);

DCL  ZQ_SUCCESS      BOOL;
DCL  ZQ_ACCESS       M_ACCESS;

ZQ_SUCCESS := TRUE;

/************ UPDATE TYPE 1 PART 1 ***************************/

IF Q_S0840_FILE_EXISTS(CM_FY32_HF_NBR_TYPE_370,
                       CM_FY32_HF_TYPE_0370)
THEN
  ZQ_ACCESS:=E_MOD_REQ;
ELSE
  /* IF FILE DOES NOT EXIST THEN CREATE IT. */
  ZQ_ACCESS:=E_WRITE_REQ;
FI;

/* OPEN THE HISTORY FILE */
IF Q_S0818_OPEN_HIST_FILE(CM_FY32_HF_NBR_TYPE_370,
                       CM_FY32_HF_TYPE_0370,
                       SIZE(CM_FY32_HIS_TYPE_37_0),
                       ZQ_ACCESS
                          )
THEN
  IF NOT Q_S0802_HIS_UPD(CM_FY32_HF_NBR_TYPE_370,
                         E_MT_VAMOS)
  THEN
    /* ERRROR AND CLOSE */
    ZQ_SUCCESS:=FALSE;
  FI;
  Q_S0812_CLOSE_HIS_FILE();
ELSE
  /* FAILED TO OPEN */
  ZQ_SUCCESS:=FALSE;
FI;

/************ UPDATE TYPE 1 PART 2 ***************************/

IF Q_S0840_FILE_EXISTS(CM_FY32_HF_NBR_TYPE_371,
                       CM_FY32_HF_TYPE_0371)
THEN
  ZQ_ACCESS:=E_MOD_REQ;
ELSE
  /* IF FILE DOES NOT EXIST THEN CREATE IT. */
  ZQ_ACCESS:=E_WRITE_REQ;

FI;

/* OPEN THE HISTORY FILE */
IF Q_S0818_OPEN_HIST_FILE(CM_FY32_HF_NBR_TYPE_371,
                          CM_FY32_HF_TYPE_0371,
                          SIZE(CM_FY32_HIS_TYPE_37_1),
                          ZQ_ACCESS
                      )
THEN
  IF NOT Q_S0802_HIS_UPD(CM_FY32_HF_NBR_TYPE_371,
                         E_MT_VAMOS)
  THEN
    /* ERRROR AND CLOSE */
    ZQ_SUCCESS:=FALSE;
  FI;
  Q_S0812_CLOSE_HIS_FILE();
ELSE
  /* FAILED TO OPEN */
  ZQ_SUCCESS:=FALSE;
FI;

RETURN(ZQ_SUCCESS);

END Q_S8999_UPDATE_HISTORY_TYPE_37;
/* END : B12 VAMOS */

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0806_UPDATE_HISTORY_TYPE_110                     */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY: BALAMURUGAN        DATE: 23/11/11 */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       UPDATES ALL THE HISTORY FILES FOR THE TYPE 110.              */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0840_FILE_EXISTS                           */
/*                      Q_S0818_OPEN_HIST_FILE                        */
/*                      Q_S0804_HIS_UPD_T110_1                        */
/*                      Q_S0812_CLOSE_HIS_FILE                        */
/*                      Q_S0802_HIS_UPD                               */
/*     CALLED FROM:                                                   */
/*                      Q_S0800_UPDATE_HISTORY_FILES                  */
/*                      Q_S0860_RESET_CCI_DS                          */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0806_UPDATE_HISTORY_TYPE_110: PROC()
                                 RETURNS(BOOL);

DCL ZQ_MEAS_TYPE    M_MEAS_TYPE,
    ZQ_SUCCESS      BOOL,
    ZQ_ACCESS       M_ACCESS;

ZQ_SUCCESS:=TRUE;

ZQ_MEAS_TYPE:=E_MT_CELL_TRX_OVERVIEW_COUNTERS;                /* 110 */

/************ UPDATE TYPE 110 PART 1 ***************************/

IF Q_S0840_FILE_EXISTS(CM_FY32_HF_NBR_TYPE_1101,
                       CM_FY32_HF_TYPE_1101)
THEN
  ZQ_ACCESS:=E_MOD_REQ;
ELSE
  /* IF FILE DOES NOT EXIST THEN CREATE IT. */
  ZQ_ACCESS:=E_WRITE_REQ;
FI;

/* OPEN THE HISTORY FILE */
IF Q_S0818_OPEN_HIST_FILE(CM_FY32_HF_NBR_TYPE_1101,
                       CM_FY32_HF_TYPE_1101,
                       SIZE(CM_FY32_HIS_TYPE_110_1),
                       ZQ_ACCESS
                          )
THEN
  IF NOT Q_S0804_HIS_UPD_T110_1(CM_FY32_HF_NBR_TYPE_1101,
                                ZQ_MEAS_TYPE)
  THEN
    /* ERRROR AND CLOSE */
    ZQ_SUCCESS:=FALSE;
  FI;
  Q_S0812_CLOSE_HIS_FILE();
ELSE
  /* FAILED TO OPEN */
  ZQ_SUCCESS:=FALSE;
FI;

/************ UPDATE TYPE 110 PART 2 ***************************/

IF Q_S0840_FILE_EXISTS(CM_FY32_HF_NBR_TYPE_1102,
                       CM_FY32_HF_TYPE_1102)
THEN
  ZQ_ACCESS:=E_MOD_REQ;
ELSE
  /* IF FILE DOES NOT EXIST THEN CREATE IT. */
  ZQ_ACCESS:=E_WRITE_REQ;
FI;

/* OPEN THE HISTORY FILE */
IF Q_S0818_OPEN_HIST_FILE(CM_FY32_HF_NBR_TYPE_1102,
                          CM_FY32_HF_TYPE_1102,
                          SIZE(CM_FY32_HIS_TYPE_110_2),
                          ZQ_ACCESS
                      )
THEN
  IF NOT Q_S0802_HIS_UPD(CM_FY32_HF_NBR_TYPE_1102,
                         ZQ_MEAS_TYPE)
  THEN
    /* ERRROR AND CLOSE */
    ZQ_SUCCESS:=FALSE;
  FI;
  Q_S0812_CLOSE_HIS_FILE();
ELSE
  /* FAILED TO OPEN */
  ZQ_SUCCESS:=FALSE;
FI;

/************ UPDATE TYPE 110 PART 3 ***************************/

IF Q_S0840_FILE_EXISTS(CM_FY32_HF_NBR_TYPE_1103,
                       CM_FY32_HF_TYPE_1103)
THEN
  ZQ_ACCESS:=E_MOD_REQ;
ELSE
  /* IF FILE DOES NOT EXIST THEN CREATE IT. */
  ZQ_ACCESS:=E_WRITE_REQ;
FI;

/* OPEN THE HISTORY FILE */
IF Q_S0818_OPEN_HIST_FILE(CM_FY32_HF_NBR_TYPE_1103,
                       CM_FY32_HF_TYPE_1103,
                       SIZE(CM_FY32_HIS_TYPE_110_3),
                       ZQ_ACCESS
                          )
THEN
  IF NOT Q_S0802_HIS_UPD (CM_FY32_HF_NBR_TYPE_1103,
                                ZQ_MEAS_TYPE)
  THEN
    /* ERRROR AND CLOSE */
    ZQ_SUCCESS:=FALSE;
  FI;
  Q_S0812_CLOSE_HIS_FILE();
ELSE
  /* FAILED TO OPEN */
  ZQ_SUCCESS:=FALSE;
FI;

/************ UPDATE TYPE 110 PART 4 ***************************/

IF Q_S0840_FILE_EXISTS(CM_FY32_HF_NBR_TYPE_1104,
                       CM_FY32_HF_TYPE_1104)
THEN
  ZQ_ACCESS:=E_MOD_REQ;
ELSE
  /* IF FILE DOES NOT EXIST THEN CREATE IT. */
  ZQ_ACCESS:=E_WRITE_REQ;
FI;

/* OPEN THE HISTORY FILE */
IF Q_S0818_OPEN_HIST_FILE(CM_FY32_HF_NBR_TYPE_1104,
                          CM_FY32_HF_TYPE_1104,
                           /* CR20/225233 */
                          /*SIZE(M_HIS_TYPE_110_4),*/
                          SIZE(CM_HIS_TYPE_110_4),
                           /* CR20/225233 */
                          ZQ_ACCESS
                          )
THEN
  /*START: MC Counters*/
  /*IF NOT Q_S0802_HIS_UPD(CM_FY32_HF_NBR_TYPE_1104,
                         ZQ_MEAS_TYPE)*/
  /*START: MC Counters*/ 
  IF NOT Q_S0804_HIS_UPD_T110_1 (CM_FY32_HF_NBR_TYPE_1104,
                                ZQ_MEAS_TYPE) 
 /*END: MC Counters*/                         
  THEN
  /* ERRROR AND CLOSE */
    ZQ_SUCCESS:=FALSE;
  FI;
  Q_S0812_CLOSE_HIS_FILE();
ELSE
  /* FAILED TO OPEN */
  ZQ_SUCCESS:=FALSE;
FI;

/************ UPDATE TYPE 110 PART 5 ***************************/

IF Q_S0840_FILE_EXISTS(CM_FY32_HF_NBR_TYPE_1105,
                       CM_FY32_HF_TYPE_1105)
THEN
  ZQ_ACCESS:=E_MOD_REQ;
ELSE
  /* IF FILE DOES NOT EXIST THEN CREATE IT. */
  ZQ_ACCESS:=E_WRITE_REQ;
FI;

/* OPEN THE HISTORY FILE */
IF Q_S0818_OPEN_HIST_FILE(CM_FY32_HF_NBR_TYPE_1105,
                          CM_FY32_HF_TYPE_1105,
                          SIZE(CM_FY32_HIS_TYPE_110_5),
                          ZQ_ACCESS
                          )
THEN
  IF NOT Q_S0802_HIS_UPD(CM_FY32_HF_NBR_TYPE_1105,
                         ZQ_MEAS_TYPE)
  THEN
  /* ERRROR AND CLOSE */
    ZQ_SUCCESS:=FALSE;
  FI;
  Q_S0812_CLOSE_HIS_FILE();
ELSE
  /* FAILED TO OPEN */
  ZQ_SUCCESS:=FALSE;
FI;

/************ UPDATE TYPE 110 PART 6 ***************************/
IF Q_S0840_FILE_EXISTS(CM_FY32_HF_NBR_TYPE_1106,
                       CM_FY32_HF_TYPE_1106)
THEN
  ZQ_ACCESS:=E_MOD_REQ;
ELSE
  /* IF FILE DOES NOT EXIST THEN CREATE IT. */
  ZQ_ACCESS:=E_WRITE_REQ;
FI;

/* OPEN THE HISTORY FILE */
IF Q_S0818_OPEN_HIST_FILE(CM_FY32_HF_NBR_TYPE_1106,
                          CM_FY32_HF_TYPE_1106,
                          SIZE(CM_FY32_HIS_TYPE_110_6),
                          ZQ_ACCESS
                          )
THEN
  IF NOT Q_S0802_HIS_UPD(CM_FY32_HF_NBR_TYPE_1106,
                         ZQ_MEAS_TYPE)
  THEN
  /* ERRROR AND CLOSE */
    ZQ_SUCCESS:=FALSE;
  FI;
  Q_S0812_CLOSE_HIS_FILE();
ELSE
  /* FAILED TO OPEN */
  ZQ_SUCCESS:=FALSE;
FI;

/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
/************ UPDATE TYPE 110 PART 7 ***************************/ 
IF Q_S0840_FILE_EXISTS(CM_FY32_HF_NBR_TYPE_1107,
                       CM_FY32_HF_TYPE_1107)
THEN
  ZQ_ACCESS:=E_MOD_REQ;
ELSE
  /* IF FILE DOES NOT EXIST THEN CREATE IT. */
  ZQ_ACCESS:=E_WRITE_REQ;
FI;

/* OPEN THE HISTORY FILE */
IF Q_S0818_OPEN_HIST_FILE(CM_FY32_HF_NBR_TYPE_1107,
                       CM_FY32_HF_TYPE_1107,
                       SIZE(CM_FY32_HIS_TYPE_110_7),
                       ZQ_ACCESS
                          )
THEN
  /* CR20/209493 START */
  /*IF NOT Q_S0802_HIS_UPD (CM_FY32_HF_NBR_TYPE_1107,
                                ZQ_MEAS_TYPE)*/
  /* WORKAROUND FOR REDUCING CODE SIZE */  
  /*IF NOT Q_S0805_HIS_UPD_T110_7 (CM_FY32_HF_NBR_TYPE_1107,
                                ZQ_MEAS_TYPE)*/                                
    IF NOT Q_S0804_HIS_UPD_T110_1 (CM_FY32_HF_NBR_TYPE_1107,
                                ZQ_MEAS_TYPE) 
  /* CR20/209493 END */                                
    THEN
    /* ERRROR AND CLOSE */
      ZQ_SUCCESS:=FALSE;
    FI;
  Q_S0812_CLOSE_HIS_FILE();
ELSE
  /* FAILED TO OPEN */
  ZQ_SUCCESS:=FALSE;
FI;
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
/************ UPDATE TYPE 110 PART 8 ***************************/

IF Q_S0840_FILE_EXISTS(CM_FY32_HF_NBR_TYPE_1108,
                       CM_FY32_HF_TYPE_1108)
THEN
  ZQ_ACCESS:=E_MOD_REQ;
ELSE
  /* IF FILE DOES NOT EXIST THEN CREATE IT. */
  ZQ_ACCESS:=E_WRITE_REQ;
FI;

/* OPEN THE HISTORY FILE */
IF Q_S0818_OPEN_HIST_FILE(CM_FY32_HF_NBR_TYPE_1108,
                          CM_FY32_HF_TYPE_1108,
                          SIZE(CM_FY32_HIS_TYPE_110_8),
                          ZQ_ACCESS
                      )
THEN
  IF NOT Q_S0802_HIS_UPD(CM_FY32_HF_NBR_TYPE_1108,
                         ZQ_MEAS_TYPE)
  THEN
    /* ERRROR AND CLOSE */
    ZQ_SUCCESS:=FALSE;
  FI;
  Q_S0812_CLOSE_HIS_FILE();
ELSE
  /* FAILED TO OPEN */
  ZQ_SUCCESS:=FALSE;
FI;
/************ UPDATE TYPE 110 PART 9 ***************************/

IF Q_S0840_FILE_EXISTS(CM_FY32_HF_NBR_TYPE_1109,
                       CM_FY32_HF_TYPE_1109)
THEN
  ZQ_ACCESS:=E_MOD_REQ;
ELSE
  /* IF FILE DOES NOT EXIST THEN CREATE IT. */
  ZQ_ACCESS:=E_WRITE_REQ;
FI;

/* OPEN THE HISTORY FILE */
IF Q_S0818_OPEN_HIST_FILE(CM_FY32_HF_NBR_TYPE_1109,
                          CM_FY32_HF_TYPE_1109,
                          SIZE(CM_FY32_HIS_TYPE_110_9),
                          ZQ_ACCESS
                      )
THEN
  IF NOT Q_S0802_HIS_UPD(CM_FY32_HF_NBR_TYPE_1109,
                         ZQ_MEAS_TYPE)
  THEN
    /* ERRROR AND CLOSE */
    ZQ_SUCCESS:=FALSE;
  FI;
  Q_S0812_CLOSE_HIS_FILE();
ELSE
  /* FAILED TO OPEN */
  ZQ_SUCCESS:=FALSE;
FI;
/*START : ADDED FOR A-FLEX NRI COUNTERS */
/************ UPDATE TYPE 110 PART 10 ***************************/

IF Q_S0840_FILE_EXISTS(CM_FY32_HF_NBR_TYPE_1110,
                       CM_FY32_HF_TYPE_1110)
THEN
  ZQ_ACCESS:=E_MOD_REQ;
ELSE
  /* IF FILE DOES NOT EXIST THEN CREATE IT. */
  ZQ_ACCESS:=E_WRITE_REQ;
FI;

/* OPEN THE HISTORY FILE */
IF Q_S0818_OPEN_HIST_FILE(CM_FY32_HF_NBR_TYPE_1110,
                          CM_FY32_HF_TYPE_1110,
                          SIZE(CM_FY32_HIS_TYPE_110_10),
                          ZQ_ACCESS
                      )
THEN
  IF NOT Q_S0802_HIS_UPD(CM_FY32_HF_NBR_TYPE_1110,
                         ZQ_MEAS_TYPE)
  THEN
    /* ERRROR AND CLOSE */
    ZQ_SUCCESS:=FALSE;
  FI;
  Q_S0812_CLOSE_HIS_FILE();
ELSE
  /* FAILED TO OPEN */
  ZQ_SUCCESS:=FALSE;
FI;
/*END : ADDED FOR A-FLEX NRI COUNTERS*/

/*BEGIN: CR302024 RFI4448 */
/************ UPDATE TYPE 110 PART 11 ***************************/

IF Q_S0840_FILE_EXISTS(CM_FY32_HF_NBR_TYPE_1111,
                       CM_FY32_HF_TYPE_1111)
THEN
  ZQ_ACCESS:=E_MOD_REQ;
ELSE
  /* IF FILE DOES NOT EXIST THEN CREATE IT. */
  ZQ_ACCESS:=E_WRITE_REQ;
FI;

/* OPEN THE HISTORY FILE */
IF Q_S0818_OPEN_HIST_FILE(CM_FY32_HF_NBR_TYPE_1111,
                          CM_FY32_HF_TYPE_1111,
                          SIZE(CM_FY32_HIS_TYPE_110_11),
                          ZQ_ACCESS
                      )
THEN
  IF NOT Q_S0802_HIS_UPD(CM_FY32_HF_NBR_TYPE_1111,
                         ZQ_MEAS_TYPE)
  THEN
    /* ERRROR AND CLOSE */
    ZQ_SUCCESS:=FALSE;
  FI;
  Q_S0812_CLOSE_HIS_FILE();
ELSE
  /* FAILED TO OPEN */
  ZQ_SUCCESS:=FALSE;
FI;
/*END : CR302024 RFI4448 */

/************ UPDATE TYPE 110 PART 12 ***************************/
IF Q_S0840_FILE_EXISTS(CM_FY32_HF_NBR_TYPE_1112,
                       CM_FY32_HF_TYPE_1112)
THEN
  ZQ_ACCESS:=E_MOD_REQ;
ELSE
  /* IF FILE DOES NOT EXIST THEN CREATE IT. */
  ZQ_ACCESS:=E_WRITE_REQ;
FI;

/* OPEN THE HISTORY FILE */
IF Q_S0818_OPEN_HIST_FILE(CM_FY32_HF_NBR_TYPE_1112,
                          CM_FY32_HF_TYPE_1112,
                          SIZE(CM_FY32_HIS_TYPE_110_12),
                          ZQ_ACCESS
                      )
THEN
  IF NOT Q_S0802_HIS_UPD(CM_FY32_HF_NBR_TYPE_1112,
                         ZQ_MEAS_TYPE)
  THEN
    /* ERRROR AND CLOSE */
    ZQ_SUCCESS:=FALSE;
  FI;
  Q_S0812_CLOSE_HIS_FILE();
ELSE
  /* FAILED TO OPEN */
  ZQ_SUCCESS:=FALSE;
FI;
/* END : AUPOIP FEATURE */
/***************************************************************/
/* END: ADD-WIPRO-B10-MR1-CHANGE */

/*BEGIN : CR20/313054 */

/************ UPDATE TYPE 110 PART 13 ***************************/
IF Q_S0840_FILE_EXISTS(CM_FY32_HF_NBR_TYPE_1113,
                       CM_FY32_HF_TYPE_1113)
THEN
  ZQ_ACCESS:=E_MOD_REQ;
ELSE
  /* IF FILE DOES NOT EXIST THEN CREATE IT. */
  ZQ_ACCESS:=E_WRITE_REQ;
FI;

/* OPEN THE HISTORY FILE */
IF Q_S0818_OPEN_HIST_FILE(CM_FY32_HF_NBR_TYPE_1113,
                          CM_FY32_HF_TYPE_1113,
                          SIZE(CM_FY32_HIS_TYPE_110_13),
                          ZQ_ACCESS
                      )
THEN
  IF NOT Q_S0802_HIS_UPD(CM_FY32_HF_NBR_TYPE_1113,
                         ZQ_MEAS_TYPE)
  THEN
    /* ERRROR AND CLOSE */
    ZQ_SUCCESS:=FALSE;
  FI;
  Q_S0812_CLOSE_HIS_FILE();
ELSE
  /* FAILED TO OPEN */
  ZQ_SUCCESS:=FALSE;
FI;
/* END : CR20/313054 */
/***************************************************************/

/*BEGIN : CR 605005 */

/************ UPDATE TYPE 110 PART 14 ***************************/
IF Q_S0840_FILE_EXISTS(CM_FY32_HF_NBR_TYPE_1114,
                       CM_FY32_HF_TYPE_1114)
THEN
  ZQ_ACCESS:=E_MOD_REQ;
ELSE
  /* IF FILE DOES NOT EXIST THEN CREATE IT. */
  ZQ_ACCESS:=E_WRITE_REQ;
FI;

/* OPEN THE HISTORY FILE */
IF Q_S0818_OPEN_HIST_FILE(CM_FY32_HF_NBR_TYPE_1114,
                          CM_FY32_HF_TYPE_1114,
                          SIZE(CM_FY32_HIS_TYPE_110_14),
                          ZQ_ACCESS
                      )
THEN
  IF NOT Q_S0802_HIS_UPD(CM_FY32_HF_NBR_TYPE_1114,
                         ZQ_MEAS_TYPE)
  THEN
    /* ERRROR AND CLOSE */
    ZQ_SUCCESS:=FALSE;
  FI;
  Q_S0812_CLOSE_HIS_FILE();
ELSE
  /* FAILED TO OPEN */
  ZQ_SUCCESS:=FALSE;
FI;

/* END : CR 605005 */
/* BEGIN: CR:745699 */
/************ UPDATE TYPE 110 PART 15 ***************************/
IF Q_S0840_FILE_EXISTS(CM_FY32_HF_NBR_TYPE_1115,
                       CM_FY32_HF_TYPE_1115)
THEN
  ZQ_ACCESS:=E_MOD_REQ;
ELSE
  /* IF FILE DOES NOT EXIST THEN CREATE IT. */
  ZQ_ACCESS:=E_WRITE_REQ;
FI;
/* OPEN THE HISTORY FILE */
IF Q_S0818_OPEN_HIST_FILE(CM_FY32_HF_NBR_TYPE_1115,
                       CM_FY32_HF_TYPE_1115,
                       SIZE(CM_HIS_TYPE_110_15), 
                       ZQ_ACCESS)
THEN

    /*IF NOT Q_S0802_HIS_UPD(CM_FY32_HF_NBR_TYPE_1115,
                                ZQ_MEAS_TYPE)
    THEN
    /! ERRROR AND CLOSE */
    IF NOT Q_S0804_OLC_HIS_UPD_T110_1 (CM_FY32_HF_NBR_TYPE_1115,
                                ZQ_MEAS_TYPE) 
    THEN
      ZQ_SUCCESS:=FALSE;
    FI;
  Q_S0812_CLOSE_HIS_FILE();
ELSE
/* FAILED TO OPEN */
  ZQ_SUCCESS:=FALSE;
FI;
/*END : CR:745699 */

/*START CR MOCN */
/************ UPDATE TYPE 110 PART 17 ***************************/
GET R_BSS_PAR2;
IF DB_PARMS.B_DB_STATUS = M_DB_SUCCESS
THEN
  IF R_BSS_PAR2.D_EN_MOCN
  THEN
    IF Q_S0840_FILE_EXISTS(CM_FY32_HF_NBR_TYPE_1117,
                       CM_FY32_HF_TYPE_1117)
    THEN
      ZQ_ACCESS:=E_MOD_REQ;
    ELSE
      /* IF FILE DOES NOT EXIST THEN CREATE IT. */
      ZQ_ACCESS:=E_WRITE_REQ;
    FI;

    /* OPEN THE HISTORY FILE */
    IF Q_S0818_OPEN_HIST_FILE(CM_FY32_HF_NBR_TYPE_1117,
                          CM_FY32_HF_TYPE_1117,
                          SIZE(CM_FY32_HIS_TYPE_110_17),
                          ZQ_ACCESS
                      )
    THEN
      IF NOT Q_S0802_HIS_UPD(CM_FY32_HF_NBR_TYPE_1117,
                         ZQ_MEAS_TYPE)
      THEN
        /* ERRROR AND CLOSE */
        ZQ_SUCCESS:=FALSE;
      FI;
      Q_S0812_CLOSE_HIS_FILE();
    ELSE
      /* FAILED TO OPEN */
      ZQ_SUCCESS:=FALSE;
    FI;
  FI;
FI;  

/*END CR MOCN */
/***************************************************************/
/*begin CR1238146 A-GPS*/
/************ UPDATE TYPE 110 PART 18 ***************************/
/*GET R_BSS_PAR2;
IF DB_PARMS.B_DB_STATUS = M_DB_SUCCESS
THEN
  IF R_BSS_PAR2.D_EN_AGPS
  THEN*/
    IF Q_S0840_FILE_EXISTS(CM_FY32_HF_NBR_TYPE_1118,
                       CM_FY32_HF_TYPE_1118)
    THEN
      ZQ_ACCESS:=E_MOD_REQ;
    ELSE
      /* IF FILE DOES NOT EXIST THEN CREATE IT. */
      ZQ_ACCESS:=E_WRITE_REQ;
    FI;

    /* OPEN THE HISTORY FILE */
    IF Q_S0818_OPEN_HIST_FILE(CM_FY32_HF_NBR_TYPE_1118,
                          CM_FY32_HF_TYPE_1118,
                          SIZE(CM_FY32_HIS_TYPE_110_18),
                          ZQ_ACCESS
                      )
    THEN
      IF NOT Q_S0802_HIS_UPD(CM_FY32_HF_NBR_TYPE_1118,
                         ZQ_MEAS_TYPE)
      THEN
        /* ERRROR AND CLOSE */
        ZQ_SUCCESS:=FALSE;
      FI;
      Q_S0812_CLOSE_HIS_FILE();
    ELSE
      /* FAILED TO OPEN */
      ZQ_SUCCESS:=FALSE;
    FI;
  /*FI;
FI; */ 

/*end CR1238146 A-GPS*/
/***************************************************************/

RETURN(ZQ_SUCCESS);

END Q_S0806_UPDATE_HISTORY_TYPE_110;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0807_WRITE_TO_HIST_FILE                          */
/*                                                                    */
/*     PROGRAMMER: L DIERICK (KDC)                                    */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 98/11/17                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       - GET USER BUFFER                                            */
/*       - CONTENTS OF DS IS COPIED TO THIS ALLOCATED BUFFER          */
/*         IN A STRUCTURE  READY TO WRITE INTO HISTORY FILE           */
/*       - REQUEST TO COPY BUFFER INTO THE HISTORY FILE               */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_HISTORY_NBR INT,                           */
/*                      ZF_MEAS_TYPE M_MEAS_TYPE,                     */
/*                      ZF_BUF_RECS INT,                              */
/*                      ZF_BUF_SIZE INT,                              */
/*                      ZF_MEM_PTR PTR                                */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0030_GET_USER_BUF                          */
/*                      Q_S0100_COPY_BLOCK_OF_MEMORY                  */
/*                      Q_S0822_WRITE_HIST_FILE                       */
/*                      Q_S0790_GET_START_RECORD_OF_BUFF              */
/*                      Q_S0755_GET_RECORD_SIZE                       */
/*                      Q_S0792_MARK_RECORDS_WRITTEN                  */
/*                      Q_S0040_RET_MEM                               */
/*     CALLED FROM:                                                   */
/*                      Q_S0808_UPD_HIS_TYPE_180                      */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0807_WRITE_TO_HIST_FILE: PROC (ZF_HISTORY_NBR INT,
                                  ZF_MEAS_TYPE   M_MEAS_TYPE,
                                  ZF_BUF_RECS    INT,
                                  ZF_MEM_PTR     PTR)
                           RETURNS(BOOL);

/* DCL ZQ_HIS_BUF_PTR  PTR; @@@ */
DCL ZQ_RESULT       BOOL;

ZQ_RESULT := FALSE;
/*Q_S0030_GET_USER_BUF(ZQ_HIS_BUF_PTR, ZF_BUF_SIZE);
Q_S0100_COPY_BLOCK_OF_MEMORY(ZF_MEM_PTR,
                             ZQ_HIS_BUF_PTR,
                             ZF_BUF_SIZE); */

IF Q_S0822_WRITE_HIST_FILE(ZF_BUF_RECS,
                           Q_S0790_GET_START_RECORD_OF_BUFFER(),
                           Q_S0755_GET_RECORD_SIZE(ZF_MEAS_TYPE,
                                                   ZF_HISTORY_NBR),
                           /*ZQ_HIS_BUF_PTR @@@ */
                           ZF_MEM_PTR)
THEN
  Q_S0792_MARK_RECORDS_WRITTEN(ZF_BUF_RECS);
  ZQ_RESULT := TRUE;
FI;
/* Q_S0040_RET_MEM(ZQ_HIS_BUF_PTR); @@@ */

RETURN (ZQ_RESULT);

END Q_S0807_WRITE_TO_HIST_FILE;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0808_UPD_HIS_TYPE_180                            */
/*                                                                    */
/*     PROGRAMMER: L DIERICK (KDC)                                    */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 98/08/20                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       COPIES THE DS CONTENT TO THE HISTORY FILE. AS THE HISTORY    */
/*       AND THE DS HAVE DIFFERENT STRUCTURES, SOME PREPARATION       */
/*       IS NEEDED (HEADER FOR REC IN HIST FILE IS NOT PROVIDED IN    */
/*       DS STRUCT FOR T180) BEFORE COPYING TO HIST FILE,             */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_HISTORY_NBR INT,                           */
/*                      ZF_MEAS_TYPE M_MEAS_TYPE                      */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0796_INIT_BUFFER_ATTRIBUTES                */
/*                      Q_S0755_GET_RECORD_SIZE                       */
/*                      Q_S0420_INIT_SYS_REC_HEAD                     */
/*                      Q_S0807_WRITE_TO_HIST_FILE                    */
/*     CALLED FROM:                                                   */
/*                      Q_S0801_UPDATE_HISTORY_FILE                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0808_UPD_HIS_TYPE_180 : PROC(ZF_HISTORY_NBR INT,
                                ZF_MEAS_TYPE   M_MEAS_TYPE)
                           RETURNS(BOOL);


DCL ZQ_REC_BUF      ARRAY (0:ZS_MAX_REC_IN_BLOCK-1) ZM_HIS_TYPE_180;
DCL ZQ_CELL_IDX     INT;
DCL ZQ_ARR_IDX      INT;
DCL ZQ_REC_NBR      INT;
DCL ZQ_NEXT         INT;
DCL ZQ_REC_IDX      INT;
DCL ZQ_REC_SIZE     INT;
DCL ZQ_MEM_PTR      PTR;

IF PTR(Z_T180_1_PTR) = NULL
THEN
  RETURN FALSE;
FI;

Q_S0796_INIT_BUFFER_ATTRIBUTES(ZF_MEAS_TYPE,
                               ZF_HISTORY_NBR);
ZQ_REC_SIZE := Q_S0755_GET_RECORD_SIZE(ZF_MEAS_TYPE,
                                       ZF_HISTORY_NBR);
ZQ_REC_NBR := 0;
ZQ_REC_IDX := 0;
ZQ_MEM_PTR := ->ZQ_REC_BUF(0);
DO FOR ZQ_REC_SIZE := 1 TO SIZE(ZQ_REC_BUF);
  ZQ_MEM_PTR->ZM_BYTE_MASK(ZQ_REC_SIZE) := H'FF;
OD;

DO FOR ZQ_CELL_IDX := 1 TO CM_FY32_MAX_CELLS_PER_BSC;
  DO WITH Z_T180_1_PTR->;
    IF B_ACTIV_CELLS(ZQ_CELL_IDX) /= M_NULL_CELL_IDX
    THEN
      ZQ_REC_NBR := ZQ_REC_NBR + 1;
      DO WITH ZQ_REC_BUF(ZQ_REC_IDX);
        Q_S0420_INIT_SYS_REC_HEAD(ZQ_REC_NBR,
                                  ->B_HEAD);
        B_CELL_IDX := ZQ_CELL_IDX;
        B_NBR_SERV_CELLS := 0;
      OD;
      ZQ_NEXT    := ZQ_CELL_IDX;
      ZQ_ARR_IDX := 1;
      DO WHILE ZQ_NEXT /= -1;
        DO WITH ZQ_REC_BUF(ZQ_REC_IDX);
          B_NBR_SERV_CELLS := B_NBR_SERV_CELLS + 1;
          DO WITH B_CELL_DATA(ZQ_ARR_IDX);
            ZB_CELL_NEXT := 
                     B_NEXT(ZM_TRAFF_FLOW_LEN(ZQ_NEXT));
           ZB_CTRS := Z_T180_2_PTR->
                     (ZM_TRAFF_FLOW_LEN(ZQ_NEXT));
          OD;
        OD;
        ZQ_NEXT := 
           B_NEXT(ZM_TRAFF_FLOW_LEN(ZQ_NEXT)).B_NEXT_PAIR;
        IF ZQ_ARR_IDX = ZS_MAX_ARR_IDX
        THEN
          IF ZQ_REC_NBR REM ZS_MAX_REC_IN_BLOCK  = 0
          THEN
            IF NOT Q_S0807_WRITE_TO_HIST_FILE(ZF_HISTORY_NBR,
                                              ZF_MEAS_TYPE,
                                              ZS_MAX_REC_IN_BLOCK,
                                              ->ZQ_REC_BUF)
            THEN
              RETURN FALSE;
            FI;
            DO FOR ZQ_REC_SIZE := 1 TO SIZE(ZQ_REC_BUF);
              ZQ_MEM_PTR->ZM_BYTE_MASK(ZQ_REC_SIZE) := H'FF;
            OD;
          FI;
          IF ZQ_NEXT /= -1
          THEN
            ZQ_REC_IDX := ZQ_REC_NBR REM ZS_MAX_REC_IN_BLOCK;
            ZQ_REC_NBR := ZQ_REC_NBR + 1;
            DO WITH ZQ_REC_BUF(ZQ_REC_IDX);
              Q_S0420_INIT_SYS_REC_HEAD(ZQ_REC_NBR,
                                        ->B_HEAD);
              B_NBR_SERV_CELLS := 0;
            OD;
          FI;
          ZQ_ARR_IDX := 0;
        FI;
        ZQ_ARR_IDX := ZQ_ARR_IDX + 1;
      OD;
      ZQ_REC_IDX := ZQ_REC_NBR REM ZS_MAX_REC_IN_BLOCK;
    FI;
    IF ZQ_REC_NBR /= 0
    THEN
      IF ZQ_REC_NBR REM ZS_MAX_REC_IN_BLOCK = 0 OR
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
         ZQ_CELL_IDX = 700/*500CR312499*/
 /* END: ADD-WIPRO-B10-MR1-CHANGE */
      THEN
        IF NOT Q_S0807_WRITE_TO_HIST_FILE(ZF_HISTORY_NBR,
                                          ZF_MEAS_TYPE,
                                          ZS_MAX_REC_IN_BLOCK,
                                          ->ZQ_REC_BUF)
        THEN
          RETURN FALSE;
        FI;
        DO FOR ZQ_REC_SIZE := 1 TO SIZE(ZQ_REC_BUF);
          ZQ_MEM_PTR->ZM_BYTE_MASK(ZQ_REC_SIZE) := H'FF;
        OD;
      FI;
    FI;
  OD;
OD; /* ALL RECORDS ARE WRITTEN */

RETURN TRUE;

END Q_S0808_UPD_HIS_TYPE_180;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0809_UPDATE_HISTORY_TYPE_34                      */
/*                                                                    */
/*     PROGRAMMER: CHEN ZHANGYI (ASB)                                 */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 04/09/15                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       UPDATES ALL THE HISTORY FILES FOR THE TYPE 34 .              */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0840_FILE_EXISTS                           */
/*                      Q_S0818_OPEN_HIST_FILE                        */
/*                      Q_S0812_CLOSE_HIS_FILE                        */
/*                      Q_S0802_HIS_UPD                               */
/*     CALLED FROM:                                                   */
/*                      Q_S0800_UPDATE_HISTORY_FILES                  */
/*                      Q_S0860_RESET_CCI_DS                          */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0809_UPDATE_HISTORY_TYPE_34: PROC()
                                 RETURNS(BOOL);

DCL  ZQ_SUCCESS      BOOL;
DCL  ZQ_ACCESS       M_ACCESS;

ZQ_SUCCESS := TRUE;

/************ UPDATE TYPE 34 PART 1 ***************************/

IF Q_S0840_FILE_EXISTS(CM_FY32_HF_NBR_TYPE_0341,
                       CM_FY32_HF_TYPE_0341)
THEN
  ZQ_ACCESS:=E_MOD_REQ;
ELSE
  /* IF FILE DOES NOT EXIST THEN CREATE IT. */
  ZQ_ACCESS:=E_WRITE_REQ;
FI;

/* OPEN THE HISTORY FILE */
IF Q_S0818_OPEN_HIST_FILE(CM_FY32_HF_NBR_TYPE_0341,
                       CM_FY32_HF_TYPE_0341,
                       SIZE(CM_FY32_HIS_TYPE_34_1_BUF),
                       ZQ_ACCESS
                          )
THEN
  IF NOT Q_S0802_HIS_UPD(CM_FY32_HF_NBR_TYPE_0341,
                         E_MT_VGCS)
  THEN
    /* ERRROR AND CLOSE */
    ZQ_SUCCESS:=FALSE;
  FI;
  Q_S0812_CLOSE_HIS_FILE();
ELSE
  /* FAILED TO OPEN */
  ZQ_SUCCESS:=FALSE;
FI;

/************ UPDATE TYPE 34 PART 2 ***************************/

IF Q_S0840_FILE_EXISTS(CM_FY32_HF_NBR_TYPE_0342,
                       CM_FY32_HF_TYPE_0342)
THEN
  ZQ_ACCESS:=E_MOD_REQ;
ELSE
  /* IF FILE DOES NOT EXIST THEN CREATE IT. */
  ZQ_ACCESS:=E_WRITE_REQ;
FI;

/* OPEN THE HISTORY FILE */
IF Q_S0818_OPEN_HIST_FILE(CM_FY32_HF_NBR_TYPE_0342,
                          CM_FY32_HF_TYPE_0342,
                          SIZE(CM_FY32_HIS_TYPE_34_2_BUF),
                          ZQ_ACCESS
                      )
THEN
  IF NOT Q_S0802_HIS_UPD(CM_FY32_HF_NBR_TYPE_0342,
                         E_MT_VGCS)
  THEN
    /* ERRROR AND CLOSE */
    ZQ_SUCCESS:=FALSE;
  FI;
  Q_S0812_CLOSE_HIS_FILE();
ELSE
  /* FAILED TO OPEN */
  ZQ_SUCCESS:=FALSE;
FI;

RETURN(ZQ_SUCCESS);

END Q_S0809_UPDATE_HISTORY_TYPE_34;

/*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE*/

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S8809_UPDATE_HISTORY_TYPE_35                      */
/*                                                                    */
/*     PROGRAMMER: CHEN ZHANGYI (ASB)                                 */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 04/09/15                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       UPDATES ALL THE HISTORY FILES FOR THE TYPE 35 .              */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0840_FILE_EXISTS                           */
/*                      Q_S0818_OPEN_HIST_FILE                        */
/*                      Q_S0812_CLOSE_HIS_FILE                        */
/*                      Q_S0802_HIS_UPD                               */
/*     CALLED FROM:                                                   */
/*                      Q_S0800_UPDATE_HISTORY_FILES                  */
/*                      Q_S0860_RESET_CCI_RSMB                        */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S8809_UPDATE_HISTORY_TYPE_35: PROC()
                                 RETURNS(BOOL);

DCL  ZQ_SUCCESS      BOOL;
DCL  ZQ_ACCESS       M_ACCESS;

ZQ_SUCCESS := TRUE;

/************ UPDATE TYPE 35 PART 1 ***************************/

IF Q_S0840_FILE_EXISTS(CM_FY32_HF_NBR_TYPE_350,
                       CM_FY32_HF_TYPE_0350)
THEN
  ZQ_ACCESS:=E_MOD_REQ;
ELSE
  /* IF FILE DOES NOT EXIST THEN CREATE IT. */
  ZQ_ACCESS:=E_WRITE_REQ;
FI;

/* OPEN THE HISTORY FILE */
IF Q_S0818_OPEN_HIST_FILE(CM_FY32_HF_NBR_TYPE_350,
                       CM_FY32_HF_TYPE_0350,
                       SIZE(CM_FY32_HIS_TYPE_35_0),
                       ZQ_ACCESS
                          )
THEN
  IF NOT Q_S0802_HIS_UPD(CM_FY32_HF_NBR_TYPE_350,
                         E_MT_IP)
  THEN
    /* ERRROR AND CLOSE */
    ZQ_SUCCESS:=FALSE;
  FI;
  Q_S0812_CLOSE_HIS_FILE();
ELSE
  /* FAILED TO OPEN */
  ZQ_SUCCESS:=FALSE;
FI;
/* CR20/225233 */
/************ UPDATE TYPE 35 PART 3 ***************************/

IF Q_S0840_FILE_EXISTS(CM_FY32_HF_NBR_TYPE_353,
                       CM_FY32_HF_TYPE_0353)
THEN
  ZQ_ACCESS:=E_MOD_REQ;
ELSE
  /* IF FILE DOES NOT EXIST THEN CREATE IT. */
  ZQ_ACCESS:=E_WRITE_REQ;
FI;

/* OPEN THE HISTORY FILE */
IF Q_S0818_OPEN_HIST_FILE(CM_FY32_HF_NBR_TYPE_353,
                          CM_FY32_HF_TYPE_0353,
                          SIZE(CM_FY32_HIS_TYPE_35_3),
                          ZQ_ACCESS
                      )
THEN
  IF NOT Q_S0802_HIS_UPD(CM_FY32_HF_NBR_TYPE_353,
                         E_MT_IP)
 THEN
    /* ERRROR AND CLOSE */
    ZQ_SUCCESS:=FALSE;
  FI;
  Q_S0812_CLOSE_HIS_FILE();
ELSE
  /* FAILED TO OPEN */
  ZQ_SUCCESS:=FALSE;
FI;
/* CR20/225233 */
/************ UPDATE TYPE 35 PART 4 ***************************/

IF Q_S0840_FILE_EXISTS(CM_FY32_HF_NBR_TYPE_354,
                       CM_FY32_HF_TYPE_0354)
THEN
  ZQ_ACCESS:=E_MOD_REQ;
ELSE
  /* IF FILE DOES NOT EXIST THEN CREATE IT. */
  ZQ_ACCESS:=E_WRITE_REQ;
FI;

/* OPEN THE HISTORY FILE */
IF Q_S0818_OPEN_HIST_FILE(CM_FY32_HF_NBR_TYPE_354,
                          CM_FY32_HF_TYPE_0354,
                          SIZE(CM_FY32_HIS_TYPE_35_4),
                          ZQ_ACCESS
                      )
THEN
  IF NOT Q_S0802_HIS_UPD(CM_FY32_HF_NBR_TYPE_354,
                         E_MT_IP)
 THEN
    /* ERRROR AND CLOSE */
    ZQ_SUCCESS:=FALSE;
  FI;
  Q_S0812_CLOSE_HIS_FILE();
ELSE
  /* FAILED TO OPEN */
  ZQ_SUCCESS:=FALSE;
FI;

/************ UPDATE TYPE 35 PART5 ***************************/

IF Q_S0840_FILE_EXISTS(CM_FY32_HF_NBR_TYPE_355,
                       CM_FY32_HF_TYPE_0355)
THEN
  ZQ_ACCESS:=E_MOD_REQ;
ELSE
  /* IF FILE DOES NOT EXIST THEN CREATE IT. */
  ZQ_ACCESS:=E_WRITE_REQ;
FI;

/* OPEN THE HISTORY FILE */
IF Q_S0818_OPEN_HIST_FILE(CM_FY32_HF_NBR_TYPE_355,
                          CM_FY32_HF_TYPE_0355,
                          SIZE(CM_FY32_HIS_TYPE_35_5),
                          ZQ_ACCESS
                      )
THEN
  IF NOT Q_S0802_HIS_UPD(CM_FY32_HF_NBR_TYPE_355,
                         E_MT_IP)
 THEN
    /* ERRROR AND CLOSE */
    ZQ_SUCCESS:=FALSE;
  FI;
  Q_S0812_CLOSE_HIS_FILE();
ELSE
  /* FAILED TO OPEN */
  ZQ_SUCCESS:=FALSE;
FI;

/* START : WIPRO B11 IP MR0 PKG1 */
/************ UPDATE TYPE 35 PART5 ***************************/
/*START : CR20/284751 BTS FRQ SYNCH */
IF Q_S0840_FILE_EXISTS(CM_FY32_HF_NBR_TYPE_356,
                       CM_FY32_HF_TYPE_0356)
THEN
  ZQ_ACCESS:=E_MOD_REQ;
ELSE
  /* IF FILE DOES NOT EXIST THEN CREATE IT. */
  ZQ_ACCESS:=E_WRITE_REQ;
FI;

/* OPEN THE HISTORY FILE */
IF Q_S0818_OPEN_HIST_FILE(CM_FY32_HF_NBR_TYPE_356,
                          CM_FY32_HF_TYPE_0356,
                          SIZE(CM_FY32_HIS_TYPE_35_6),
                          ZQ_ACCESS
                      )
THEN
  IF NOT Q_S0802_HIS_UPD(CM_FY32_HF_NBR_TYPE_356,
                         E_MT_IP)
 THEN
    /* ERRROR AND CLOSE */
    ZQ_SUCCESS:=FALSE;
  FI;
  Q_S0812_CLOSE_HIS_FILE();
ELSE
  /* FAILED TO OPEN */
  ZQ_SUCCESS:=FALSE;
FI;
/*END : CR20/284751 BTS FRQ SYNCH */
/************ UPDATE TYPE 35 PART6 ***************************/

IF Q_S0840_FILE_EXISTS(CM_FY32_HF_NBR_TYPE_357,
                       CM_FY32_HF_TYPE_0357)
THEN
  ZQ_ACCESS:=E_MOD_REQ;
ELSE
  /* IF FILE DOES NOT EXIST THEN CREATE IT. */
  ZQ_ACCESS:=E_WRITE_REQ;
FI;

/* OPEN THE HISTORY FILE */
IF Q_S0818_OPEN_HIST_FILE(CM_FY32_HF_NBR_TYPE_357,
                          CM_FY32_HF_TYPE_0357,
                          SIZE(CM_FY32_HIS_TYPE_35_7),
                          ZQ_ACCESS
                      )
THEN
  IF NOT Q_S0802_HIS_UPD(CM_FY32_HF_NBR_TYPE_357,
                         E_MT_IP)
 THEN
    /* ERRROR AND CLOSE */
    ZQ_SUCCESS:=FALSE;
  FI;
  Q_S0812_CLOSE_HIS_FILE();
ELSE
  /* FAILED TO OPEN */
  ZQ_SUCCESS:=FALSE;
FI;

/************ UPDATE TYPE 35 PART7 ***************************/

IF Q_S0840_FILE_EXISTS(CM_FY32_HF_NBR_TYPE_358,
                       CM_FY32_HF_TYPE_0358)
THEN
  ZQ_ACCESS:=E_MOD_REQ;
ELSE
  /* IF FILE DOES NOT EXIST THEN CREATE IT. */
  ZQ_ACCESS:=E_WRITE_REQ;
FI;

/* OPEN THE HISTORY FILE */
IF Q_S0818_OPEN_HIST_FILE(CM_FY32_HF_NBR_TYPE_358,
                          CM_FY32_HF_TYPE_0358,
                          SIZE(CM_FY32_HIS_TYPE_35_8),
                          ZQ_ACCESS
                      )
THEN
  IF NOT Q_S0802_HIS_UPD(CM_FY32_HF_NBR_TYPE_358,
                         E_MT_IP)
 THEN
    /* ERRROR AND CLOSE */
    ZQ_SUCCESS:=FALSE;
  FI;
  Q_S0812_CLOSE_HIS_FILE();
ELSE
  /* FAILED TO OPEN */
  ZQ_SUCCESS:=FALSE;
FI;

/*FR36/241671*/
RETURN(ZQ_SUCCESS);
/*FR36/241671*/

/* END : WIPRO B11 IP MR0 PKG1 */

END Q_S8809_UPDATE_HISTORY_TYPE_35;
/*END: ADD-WIPRO-B10-MX-MR2-CHANGE*/
/*SATRT : IURG FEATURE */
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S8972_UPDATE_HISTORY_TYPE_36                      */
/*                                                                    */
/*     PROGRAMMER: AMITABH (WIPRO)                                    */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 02/07/2010                                      */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       UPDATES THE HISTORY FILE FOR THE TYPE 36.                    */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0840_FILE_EXISTS                           */
/*                      Q_S0818_OPEN_HIST_FILE                        */
/*                      Q_S0812_CLOSE_HIS_FILE                        */
/*                      Q_S0802_HIS_UPD                               */
/*     CALLED FROM:                                                   */
/*                      Q_S0800_UPDATE_HISTORY_FILES                  */
/*                      Q_S0860_RESET_CCI_RSMB                        */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S8972_UPDATE_HISTORY_TYPE_36: PROC()
                                 RETURNS(BOOL);
DCL  ZQ_SUCCESS      BOOL;
DCL  ZQ_ACCESS       M_ACCESS;

ZQ_SUCCESS := TRUE;

/************ UPDATE TYPE 36 *****************************************/

IF Q_S0840_FILE_EXISTS(CM_FY32_HF_NBR_TYPE_360,
                       CM_FY32_HF_TYPE_0360)
THEN
  ZQ_ACCESS:=E_MOD_REQ;
ELSE
  /* IF FILE DOES NOT EXIST THEN CREATE IT. */
  ZQ_ACCESS:=E_WRITE_REQ;
FI;

/* OPEN THE HISTORY FILE */
IF Q_S0818_OPEN_HIST_FILE(CM_FY32_HF_NBR_TYPE_360,
                       CM_FY32_HF_TYPE_0360,
                       SIZE(CM_FY32_HIS_TYPE_36_0),
                       ZQ_ACCESS
                          )
THEN
  IF NOT Q_S0802_HIS_UPD(CM_FY32_HF_NBR_TYPE_360,
                         E_MT_IURG)
  THEN
    /* ERRROR AND CLOSE */
    ZQ_SUCCESS:=FALSE;
  FI;
  Q_S0812_CLOSE_HIS_FILE();
ELSE
  /* FAILED TO OPEN */
  ZQ_SUCCESS:=FALSE;
FI;

RETURN(ZQ_SUCCESS);

END Q_S8972_UPDATE_HISTORY_TYPE_36;
/*END : IURG FEATURE */
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0810_INIT_FCB                                    */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       PUTS FF'H IN THE FCB STRUCTURE ATTCHED TO POINTER.           */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_FCB_PTR PTR                                */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0818_OPEN_HIST_FILE                        */
/*                      Q_S0850_DO_FILE_ACTION                        */
/*                      Q_S0900_PERFORM_SYSTEM_START_UP               */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0810_INIT_FCB: PROC(ZF_FCB_PTR  PTR);

 DCL  ZQ_I  INT;

 DO FOR ZQ_I := 1 TO SIZE(M_FCB_INFO);
     ZF_FCB_PTR -> ZM_BYTE_MASK(ZQ_I) := H'FF;
 OD;

 DO WITH ZF_FCB_PTR-> M_FCB_INFO;
   B_PTR_PHYS_SECT:=NULL;
 OD;

END Q_S0810_INIT_FCB;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0812_CLOSE_HIS_FILE                              */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*      CLOSES THE HISTORY FILE.                                      */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      0128_FILE_CLOSED                              */
/*     SENT MESSAGES:                                                 */
/*                      0127_CLOSE_FILE                               */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0020_CCDC_ERROR                            */
/*     CALLED FROM:                                                   */
/*                      Q_S0801_UPDATE_HISTORY_FILE                   */
/*                      Q_S0806_UPDATE_HISTORY_TYPE_110               */
/*                      Q_S0871_COPY_T180_HIS_TO_MEMORY               */
/*                      Q_S0872_COPY_HIS_TO_MEM                       */
/*                      Q_S0875_COPY_T110_1_HIS_TO_MEMOR              */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0812_CLOSE_HIS_FILE: PROC();

DCL ZQ_COMPL_CODE M_CPL_CODE;
DCL ZQ_FCB_PTR M_FCB_PTR;
DCL ZQ_RESULT M_RESULT;
DCL ZQ_TRC_INTARG2 ZM_INT_TO_LN_INT; /*RT TRACE*/

/* IF WRITING TO A NON EXISTING FILE OCCURS (DUE TO A FILE FORMAT
 * IN BETWEEN), MSG 128_FILE_CLOSED IS SENT BACK ISO 126 (WRITE CONFIRM)
 * AND THE PROCESS (FILE HANDLER) IS KILLED. A SUBSEQUENT 127_CLOSE_FILE
 * (SENT TO AN NON EXISTING PROCESS) IS NOT REPLIED BY 128 AND PM IS
 * BLOCKED
 */
  IF Z_FILE_OPEN /* KEEPS THE STATUS OPEN-CLOSED OF THE FILE */
  THEN
    TRANSMIT_DIRECTED_MSG
        0127_CLOSE_FILE(->Z_HIS_FCB, Z_OWN_PID)
    TO (Z_DISK_PROC_ID);

    /* THIS IS AN UNSUPERVISED WAIT CASE - THE ASSUMPTION BEING THAT
     * THE DISK HANDLER MUST RESPOND SINCE IT IS ON THE SAME
     * PROCESSOR.
     */
    L_WAIT_FILE_CLOSED: WAIT_CASE;

      0128_FILE_CLOSED(ZQ_FCB_PTR,*,ZQ_COMPL_CODE):

        /* IF THE COMPL_CODE IS FAIL THE FILE WILL BE CLOSED
         * AUTONOMOUSLY AFTER 30 SECONDS.
         */
      END_WAIT_CASE_CLAUSE;

    ESAC_TIAW L_WAIT_FILE_CLOSED;

  IF ZQ_COMPL_CODE/=E_NULL_CODE
  THEN
    Q_S0020_CCDC_ERROR(M_ERC6_USER_REC,
                       M_ERT0040_CLOSE_FILE_FLT,
                       60, NUM(ZQ_COMPL_CODE));
  ELSE
    DO WITH ZQ_FCB_PTR->M_FCB_INFO;
      ZQ_RESULT := Q_S0890_SYN_FILE(B_FILE_NAME, 
                                    B_PCS, 
                                    B_DRIVE_NO);
      IF ZQ_RESULT = E_UNSUCC
      THEN
      /*ADD API RTTRACE*/
      TRACEINFO    :=
          'CALL SYN FILE API (%d %d %d)    ';
      ZQ_TRC_INTARG2.ZB_LOW_INT := B_PCS - ZS_BASE_PCS;
      ZQ_TRC_INTARG2.ZB_HIGH_INT := B_FILE_NO;
      TRC_BSC_PM1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCDC),
              TRACEID(NORM),
              TRACEINFO,
              LONG_INT((B_DRIVE_NO)),
              LONG_INT((ZQ_TRC_INTARG2.ZB_LONG_INT)),
              LONG_INT((ZQ_RESULT))); 
        
             Q_S0020_CCDC_ERROR(M_ERC6_USER_REC,
                          M_ERT0040_CLOSE_FILE_FLT,
                           65, NUM(ZQ_RESULT));
      FI;
    OD;
  FI;
FI;

END Q_S0812_CLOSE_HIS_FILE;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0815_GET_GEN_TIME                                */
/*                                                                    */
/*     PROGRAMMER: P. BLOMMAERT                                       */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 02/02/22                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*     RETURNED VALUE:                                                */
/*                      M_GEN_TIME                                    */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AP_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0450_FOUR_ASCII                            */
/*                      Q_S0440_TWO_ASCII                             */
/*                      Q_S0430_ONE_ASCII                             */
/*     CALLED FROM:                                                   */
/*                      Q_S0500_FILL_REC_HEAD                         */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0815_GET_GEN_TIME : PROC()
                     RETURNS (M_GEN_TIME);

SYN ZS_ONE_ZERO               = H'30;

DCL ZQ_GEN_TIME M_GEN_TIME;
DCL ZQ_TIME     M_GET_TIME;
DCL ZQ_DATE     M_DATE;


  /********************************************************************/
  /*                                                                  */
  /*     PROCEDURE: Q_ONE_ASCII                                       */
  /*                                                                  */
  /*     FUNCTIONAL DESCRIPTION:                                      */
  /*       CONVERT A BYTE TO A SIGLE ASCII CHAR                       */
  /*                                                                  */
  /******************* END OF PROCEDURE HEADER ************************/
  
  Q_ONE_ASCII: PROC(ZF_BYTE M_BYTE)
                     RETURNS (M_ONE_ASCII);
  
  RETURN ZS_ONE_ZERO + (ZF_BYTE REM 10);
  
  END Q_ONE_ASCII;
  
  /********************************************************************/
  /*                                                                  */
  /*     PROCEDURE: Q_TWO_ASCII                                       */
  /*                                                                  */
  /*     FUNCTIONAL DESCRIPTION:                                      */
  /*       CONVERT A BYTE TO TWO ASCII CHARS                          */
  /*                                                                  */
  /******************* END OF PROCEDURE HEADER ************************/
  
  Q_TWO_ASCII : PROC(ZF_BYTE M_BYTE LOC)
                      RETURNS (M_TWO_ASCII);
  
  SYN ZS_TWO_ZEROS   M_TWO_ASCII = (:(1:2):ZS_ONE_ZERO:);
  
  DCL  ZQ_ASC_VAL   M_TWO_ASCII;
  DCL  ZQ_I         RANGE(1:2);    /* DIGIT COUNTER  */
  
  ZQ_ASC_VAL := ZS_TWO_ZEROS;
  DO FOR ZQ_I := 2 DOWN TO 1    WHILE ZF_BYTE /= 0;
     ZQ_ASC_VAL(ZQ_I) := ZQ_ASC_VAL(ZQ_I) + (ZF_BYTE REM 10);
     ZF_BYTE   := ZF_BYTE/10;
  OD;
  
  RETURN ZQ_ASC_VAL;
  
  END Q_TWO_ASCII;
  
  /********************************************************************/
  /*                                                                  */
  /*     PROCEDURE: Q_FOUR_ASCII                                      */
  /*                                                                  */
  /*     FUNCTIONAL DESCRIPTION:                                      */
  /*       CONVERT AN INTEGER TO FOUR ASCII CHARS                     */
  /*                                                                  */
  /******************* END OF PROCEDURE HEADER ************************/
  
  Q_FOUR_ASCII : PROC(ZF_INTEGER INT LOC)
                       RETURNS (M_FOUR_ASCII);
  
  SYN ZS_FOUR_ZEROS    M_FOUR_ASCII  = (:(1:4):ZS_ONE_ZERO:);
  
  DCL  ZQ_ASC_VAL      M_FOUR_ASCII;
  DCL  ZQ_I            RANGE(1:4);    /* DIGIT COUNTER    */
  
  ZQ_ASC_VAL := ZS_FOUR_ZEROS;
  DO FOR ZQ_I := 4 DOWN TO 1   WHILE ZF_INTEGER /= 0;
     ZQ_ASC_VAL(ZQ_I) := ZQ_ASC_VAL(ZQ_I) + (ZF_INTEGER REM 10);
     ZF_INTEGER   := ZF_INTEGER / 10;
  OD;
  
  RETURN ZQ_ASC_VAL;
  
  END Q_FOUR_ASCII;



/*************** MAIN PROCEDURE ***** MAIN PROCEDURE *****************/


P_YS8RAA_S020_GET_TIME(ZQ_TIME);
P_YS8RAA_S050_GET_DATE(ZQ_DATE);

DO WITH ZQ_GEN_TIME;
   DO WITH ZQ_DATE;
      B_GT_YEAR  := Q_FOUR_ASCII(B_YEAR);
      B_GT_MONTH := Q_TWO_ASCII(B_MOUNTH);
      B_GT_DAY   := Q_TWO_ASCII(B_DAY);
   OD;
   DO WITH ZQ_TIME.B_TIME;
      B_GT_HOUR   := Q_TWO_ASCII(B_HOURS);
      B_GT_MINUTE := Q_TWO_ASCII(B_MINUTES);
      B_GT_SECOND := Q_TWO_ASCII(B_SECONDS);
      B_GT_POINT  := '.';
      B_GT_TENTHS := Q_ONE_ASCII(B_HUNDRED_SEC/10);
   OD;
OD; /* ZQ_GEN_TIME */

RETURN (ZQ_GEN_TIME);

END Q_S0815_GET_GEN_TIME;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0815_WRITE_PHHR                                  */
/*                                                                    */
/*     PROGRAMMER: P. BLOMMAERT                                       */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 02/02/22                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       WRITE THE PHHR TO HISTORY FILE                               */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_HISTORY_NBR INT,                           */
/*                      ZF_HISTORY_NAME M_FILE_NAME LOC,              */
/*                      ZF_REC_SIZE INT,                              */
/*                      ZF_ACC_TYPE M_ACCESS                          */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0810_INIT_FCB                              */
/*                      Q_S0816_OPEN_HIS_FILE                         */
/*                      Q_S0010_WAIT_BEFORE_RETRYING                  */
/*                      Q_S0020_CCDC_ERROR                            */
/*     CALLED FROM:                                                   */
/*                      Q_S0801_UPDATE_HISTORY_FILE                   */
/*                      Q_S0806_UPDATE_HISTORY_TYPE_110               */
/*                      Q_S0871_COPY_T180_HIS_TO_MEMORY               */
/*                      Q_S0872_COPY_HIS_TO_MEM                       */
/*                      Q_S0875_COPY_T110_1_HIS_TO_MEMOR              */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0815_WRITE_PHHR: PROC(ZF_HISTORY_NBR  INT,
                         ZF_REC_SIZE     INT)
                      RETURNS(BOOL);


DO WITH Z_PHHR;
  DO WITH ZB_SYS_HEAD;
    B_HEADER      := 6;
    B_REC_SEQ_NBR := 0; /* ALWAYS START AT ZERO */
    B_REC_TYPE    := E_HPMR;
    B_FILE_TYPE   := E_HPMF;
  OD;
  ZB_BSC_RELEASE := M_BSC_RELEASE_REL_B10;
  ZB_FILE_NO     := ZF_HISTORY_NBR;
  ZB_CREAT_TIME  := Q_S0815_GET_GEN_TIME();
  ZB_REC_SIZE    := ZF_REC_SIZE;
OD;


RETURN Q_S0822_WRITE_HIST_FILE(1,0,ZF_REC_SIZE,->Z_PHHR);

END Q_S0815_WRITE_PHHR;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0816_OPEN_HIS_FILE                               */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       THE MEASUREMENT HISTORY FILE IS OPENED USING LOCAL CALL.     */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      M_CPL_CODE                                    */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      0122_FILE_OPENED                              */
/*     SENT MESSAGES:                                                 */
/*                      0121_OPEN_FILE                                */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0818_OPEN_HIST_FILE                        */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0816_OPEN_HIS_FILE: PROC()
                         RETURNS(M_CPL_CODE);
  DCL  ZQ_COMPL_CODE  M_CPL_CODE;

  TRANSMIT_BASIC_MSG
     0121_OPEN_FILE(->Z_HIS_FCB, Z_OWN_PID);

  L_A: WAIT_CASE;
  /* THIS IS AN UNSUPERVISED WAIT CASE - THE ASSUMPTION BEING THAT
   * THE DISK HANDLER MUST RESPOND SINCE IT IS ON THE SAME
   * PROCESSOR.
   */

    0122_FILE_OPENED(*, Z_DISK_PROC_ID, ZQ_COMPL_CODE):

    END_WAIT_CASE_CLAUSE;

  ESAC_TIAW L_A;

  RETURN ZQ_COMPL_CODE;

END Q_S0816_OPEN_HIS_FILE;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0818_OPEN_HIST_FILE                              */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       THE MEASUREMENT HISTORY FILE IS OPENED USING A CALL TO LOCAL */
/*       NESTED ROUTINE RATHER THAN A RECURSIVE CALL.                 */
/*       AND A HEADER RECORD IS WRITTEN TO IT.                        */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_HISTORY_NBR INT,                           */
/*                      ZF_HISTORY_NAME M_FILE_NAME LOC,              */
/*                      ZF_REC_SIZE INT,                              */
/*                      ZF_ACC_TYPE M_ACCESS                          */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0810_INIT_FCB                              */
/*                      Q_S0816_OPEN_HIS_FILE                         */
/*                      Q_S0010_WAIT_BEFORE_RETRYING                  */
/*                      Q_S0020_CCDC_ERROR                            */
/*     CALLED FROM:                                                   */
/*                      Q_S0801_UPDATE_HISTORY_FILE                   */
/*                      Q_S0806_UPDATE_HISTORY_TYPE_110               */
/*                      Q_S0871_COPY_T180_HIS_TO_MEMORY               */
/*                      Q_S0872_COPY_HIS_TO_MEM                       */
/*                      Q_S0875_COPY_T110_1_HIS_TO_MEMOR              */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0818_OPEN_HIST_FILE: PROC(ZF_HISTORY_NBR  INT,
                             ZF_HISTORY_NAME M_FILE_NAME LOC,
                             ZF_REC_SIZE     INT,
                             ZF_ACC_TYPE     M_ACCESS)
                       RETURNS(BOOL);

DCL ZQ_NBR_RETRIES M_BYTE;
DCL ZQ_COMPL_CODE  M_CPL_CODE;
   /*WIPRO BEGIN:FR20/201332 GLOBAL STOP*/
DCL ZQ_UPD_FLAG  BOOL;
    ZQ_UPD_FLAG := TRUE;
    /*WIPRO BEGIN:FR20/201332 GLOBAL STOP*/


 Z_FILE_OPEN   := FALSE;

 ZQ_NBR_RETRIES:=0;

 Q_S0810_INIT_FCB(->Z_HIS_FCB);

 DO WITH Z_HIS_FCB;
  B_FILE_NO   := ZF_HISTORY_NBR;
  B_FILE_NAME := ZF_HISTORY_NAME;
  B_PCS       := ZS_BASE_PCS + 1;
  B_FILE_TYPE := E_HPMF;
  B_TWIN_FILE := FALSE;
  B_ACCESS    := ZF_ACC_TYPE;
  B_TIMEOUT   := 100;                                   /* 10 SECONDS */
  B_REC_SIZE  := ZF_REC_SIZE;
  B_DRIVE_NO  := Z_OWN_DISK;
 OD;

DO WHILE ZQ_NBR_RETRIES < (ZS_MAX_RETRY* 2) AND
         NOT Z_FILE_OPEN;
  ZQ_COMPL_CODE:=Q_S0816_OPEN_HIS_FILE();
  IF ZQ_COMPL_CODE = E_NULL_CODE
  THEN
    Z_FILE_OPEN := TRUE;
  ELSE
    ZQ_NBR_RETRIES := ZQ_NBR_RETRIES + 1;
    Q_S0010_WAIT_BEFORE_RETRYING(ZS_OPEN_HF_DELAY_TENTHS);
  FI;

OD;

IF NOT Z_FILE_OPEN
THEN
  Q_S0020_CCDC_ERROR(M_ERC6_USER_REC,
                     M_ERT0038_OPEN_FILE_FLT,
                     61, NUM(ZQ_COMPL_CODE));
/* BEGIN:CR36/288765 - TRACE IMPROVEMENT */

  /*WIPRO BEGIN: FR241193 GLOBAL STOP RT TRACE */
   TRACEINFO := 'CCDC ERR FILE OPEN FAIL (%d %d) ';
   TRC_BSC_PM3(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCDC),
              TRACEID(NORM),
              TRACEINFO,
              LONG_INT((Z_FILE_OPEN)),
              LONG_INT((ZQ_COMPL_CODE)),
              LONG_INT((0)));
   /*WIPRO END: FR241193 GLOBAL STOP RT TRACE */
/* END:CR36/288765 - TRACE IMPROVEMENT */ 

ELSE               
  IF ZF_ACC_TYPE = E_MOD_REQ OR 
     ZF_ACC_TYPE = E_WRITE_REQ THEN
 /*WIPRO BEGIN:FR20/201332 GLOBAL STOP*/
    /* WRITE THE PHHR: PM HISTORY FILE HEADER RECORD */
 /*Z_FILE_OPEN := Q_S0815_WRITE_PHHR(ZF_HISTORY_NBR,ZF_REC_SIZE);*/
    ZQ_UPD_FLAG := Q_S0815_WRITE_PHHR(ZF_HISTORY_NBR,ZF_REC_SIZE);
    /*WIPRO BEGIN:FR20/201332 GLOBAL STOP*/
    IF NOT ZQ_UPD_FLAG
    THEN
      Q_S0812_CLOSE_HIS_FILE();
     /*WIPRO BEGIN: FR241193 GLOBAL STOP RT TRACE */
/* BEGIN:CR36/288765 - TRACE IMPROVEMENT */
      TRACEINFO := 'G.STOP HIST FILE UPD FAIL(%d %d)';
      TRC_BSC_PM3(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCDC),
              TRACEID(NORM),
              TRACEINFO,
              LONG_INT((Z_FILE_OPEN)),
              LONG_INT((ZF_HISTORY_NBR)),
              LONG_INT((0)));
/* END:CR36/288765 - TRACE IMPROVEMENT */
      /*WIPRO END: FR241193 GLOBAL STOP RT TRACE */
    FI;
    Z_FILE_OPEN := ZQ_UPD_FLAG;
    /*WIPRO END:FR20/201332 GLOBAL STOP*/
  ELSE
    /* READ */
  FI;
FI; /* NULL CODE */



RETURN (Z_FILE_OPEN);
END Q_S0818_OPEN_HIST_FILE;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0820_READ_HIST_FILE                              */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                  THE MEASUREMENT HISTORY FILE IS READ.             */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_REC_SIZE INT,                              */
/*                      ZF_REC_HDL INT,                               */
/*                      ZF_START_REC INT,                             */
/*                      ZF_HIS_BUF_PTR PTR                            */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      0123_READ_REC                                 */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0308_WAIT_0124_READ_REC_CNF                */
/*     CALLED FROM:                                                   */
/*                      Q_S0871_COPY_T180_HIS_TO_MEMORY               */
/*                      Q_S0872_COPY_HIS_TO_MEM                       */
/*                      Q_S0875_COPY_T110_1_HIS_TO_MEMOR              */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0820_READ_HIST_FILE: PROC(ZF_REC_SIZE     INT,
                             ZF_REC_HDL      INT,
                             ZF_START_REC    INT,
                             ZF_HIS_BUF_PTR  PTR)
                        RETURNS(BOOL);

/* IT IS ASSUMED THAT THE FILE IS OPENED SO NO CHECK
 * IS PERFORMED.
 */

DO WITH Z_HIS_FCB;
  B_NO_REC_HDL       := ZF_REC_HDL;
  B_START_REC_NO     := ZF_START_REC; /* Record 0 is PHHR 
                                           -> start at 1 */ 
  B_USER_BUFF_LENGTH := ZF_REC_SIZE * ZF_REC_HDL;
  B_PTR_USER_BUFFER  := ZF_HIS_BUF_PTR;
  B_DRIVE_NO  := Z_OWN_DISK;
OD;

TRANSMIT_DIRECTED_MSG
       0123_READ_REC(->Z_HIS_FCB,
                     Z_OWN_PID)
       TO (Z_DISK_PROC_ID);

RETURN(Q_S0308_WAIT_0124_READ_REC_CNF());

END Q_S0820_READ_HIST_FILE;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0822_WRITE_HIST_FILE                             */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*            THE MEASUREMENT HISTORY FILE IS WRITTEN TO.             */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_REC_HDL INT,                               */
/*                      ZF_START_REC INT,                             */
/*                      ZF_REC_SIZE INT,                              */
/*                      ZF_HIS_BUF_PTR PTR                            */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      0125_WRITE_REC                                */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0304_WAIT_0126_WRITE_REC_CNF               */
/*     CALLED FROM:                                                   */
/*                      Q_S0802_HIS_UPD                               */
/*                      Q_S0804_HIS_UPD_T110_1                        */
/*                      Q_S0807_WRITE_TO_HIST_FILE                    */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0822_WRITE_HIST_FILE: PROC(ZF_REC_HDL      INT,
                              ZF_START_REC    INT,
                              ZF_REC_SIZE     INT,
                              ZF_HIS_BUF_PTR  PTR)
                         RETURNS(BOOL);

/* THE HISTORY FILE IS OPENED ALREADY. */
DCL ZQ_OLC INT;
ZQ_OLC := 0;
DO WITH Z_HIS_FCB;
  B_NO_REC_HDL       := ZF_REC_HDL;
  B_START_REC_NO     := ZF_START_REC; /* ALWAYS START AT 0!!!! */
  B_USER_BUFF_LENGTH := ZF_REC_SIZE * ZF_REC_HDL;
  B_PTR_USER_BUFFER  := ZF_HIS_BUF_PTR;

  B_DRIVE_NO  := Z_OWN_DISK;

OD;
IF (ZF_START_REC = 32000)
THEN
 ZQ_OLC := ZQ_OLC +1;
FI; 

TRANSMIT_DIRECTED_MSG
      0125_WRITE_REC(->Z_HIS_FCB,
                     Z_OWN_PID)
      TO            (Z_DISK_PROC_ID);

RETURN(Q_S0304_WAIT_0126_WRITE_REC_CNF());

END Q_S0822_WRITE_HIST_FILE;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0840_FILE_EXISTS                                 */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*         DOES THE TWIN FILE EXIST?                                  */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_HISTORY_NBR INT,                           */
/*                      ZF_HISTORY_NAME M_FILE_NAME LOC               */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0030_GET_USER_BUF                          */
/*                      Q_S0850_DO_FILE_ACTION                        */
/*                      Q_S0040_RET_MEM                               */
/*     CALLED FROM:                                                   */
/*                      Q_S0801_UPDATE_HISTORY_FILE                   */
/*                      Q_S0806_UPDATE_HISTORY_TYPE_110               */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0840_FILE_EXISTS: PROC(ZF_HISTORY_NBR  INT,
                          ZF_HISTORY_NAME M_FILE_NAME LOC)
                        RETURNS(BOOL);

DCL ZQ_COMPL_CODE M_CPL_CODE,
    ZQ_FILE_ATTRIB_PTR PTR;

 /* THE ATTRIBUTES OF THE FILE ARE COPIED INTO A BUFFER */
 Q_S0030_GET_USER_BUF(ZQ_FILE_ATTRIB_PTR, SIZE(M_FDIR));

 ZQ_COMPL_CODE:= Q_S0850_DO_FILE_ACTION(ZF_HISTORY_NBR,
                                        ZF_HISTORY_NAME,
                                        E_CHECK_FILE_PRES,
                                        Z_OWN_DISK,
                                        ZQ_FILE_ATTRIB_PTR,
                                        SIZE(M_FDIR));

 /* DON'T NEED FILE ATTRIBUTES */
 Q_S0040_RET_MEM(ZQ_FILE_ATTRIB_PTR);

 RETURN(ZQ_COMPL_CODE=E_NULL_CODE);

END Q_S0840_FILE_EXISTS;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0850_DO_FILE_ACTION                              */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/26                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*         PERFORM ACTION ON FILE RETURNING INFORMATION IN PTR TO     */
/*         M_FDIR BUFFER.                                             */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_HISTORY_NBR INT,                           */
/*                      ZF_HISTORY_NAME M_FILE_NAME LOC,              */
/*                      ZF_ACCESS M_ACCESS,                           */
/*                      ZF_DRIVE_NO M_DRIVE_NO,                       */
/*                      ZF_FILE_INFO_PTR PTR,                         */
/*                      ZF_INFO_SIZE INT                              */
/*     RETURNED VALUE:                                                */
/*                      M_CPL_CODE                                    */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      0317_FILE_HNDL_CNF                            */
/*     SENT MESSAGES:                                                 */
/*                      0316_FILE_HNDL_REQ                            */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0810_INIT_FCB                              */
/*     CALLED FROM:                                                   */
/*                      Q_S0840_FILE_EXISTS                           */
/*                      Q_S0860_RESET_CCI_DS                          */
/*                      Q_S0866_DELETE_INCOMPLETE                     */
/*                      Q_S0868_DELETE_HISTORY                        */
/*                      Q_S0870_INITIALISE_HISTORY                    */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0850_DO_FILE_ACTION: PROC(ZF_HISTORY_NBR   INT,
                             ZF_HISTORY_NAME  M_FILE_NAME LOC,
                             ZF_ACCESS        M_ACCESS,
                             ZF_DRIVE_NO      M_DRIVE_NO,
                             ZF_FILE_INFO_PTR PTR,
                             ZF_INFO_SIZE     INT)
                        RETURNS(M_CPL_CODE);

DCL ZQ_COMPL_CODE M_CPL_CODE;

 Q_S0810_INIT_FCB(->Z_HIS_FCB);

 DO WITH Z_HIS_FCB;
   B_FILE_NO       := ZF_HISTORY_NBR;
   B_FILE_NAME     := ZF_HISTORY_NAME;
   B_PCS           := ZS_BASE_PCS + 1;
   B_TWIN_FILE     := FALSE;
   B_ACCESS        := ZF_ACCESS;
   B_TIMEOUT       := 100;                              /* 10 SECONDS */
   B_DRIVE_NO      := ZF_DRIVE_NO;
   B_USER_BUFF_LENGTH := ZF_INFO_SIZE;
   B_PTR_USER_BUFFER  := ZF_FILE_INFO_PTR;
 OD;

 TRANSMIT_BASIC_MSG
   0316_FILE_HNDL_REQ(->Z_HIS_FCB,
                      Z_OWN_PID);

 L_281: WAIT_CASE;
  /* THIS IS AN UNSUPERVISED WAIT CASE - THE ASSUMPTION BEING THAT
   * THE DISK HANDLER MUST RESPOND SINCE IT IS ON THE SAME
   * PROCESSOR.
   */

   0317_FILE_HNDL_CNF(*,
   /*==============*/ *,
                      ZQ_COMPL_CODE):


   END_WAIT_CASE_CLAUSE;

 ESAC_TIAW L_281;

 RETURN(ZQ_COMPL_CODE);

END Q_S0850_DO_FILE_ACTION;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0860_RESET_CCI_DS                                */
/*                                                                    */
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                 J.P. QUINN                          97/11/21       */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION: RESETS ALL THE LOCALLY MAINTAINED      */
/*                      COUNTERS TO NULL (I.E H'FFFF)                 */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_MEAS_TYPE M_MEAS_TYPE                      */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0410_CLEAR_MEMORY                          */
/*                      Q_S0806_UPDATE_HISTORY_TYPE_110               */
/*                      Q_S0030_GET_USER_BUF                          */
/*                      Q_S0850_DO_FILE_ACTION                        */
/*                      Q_S0868_DELETE_HISTORY                        */
/*                      Q_S0040_RET_MEM                               */
/*                      Q_S0750_GET_HISTORY_FILE                      */
/*                      Q_S0801_UPDATE_HISTORY_FILE                   */
/*     CALLED FROM:                                                   */
/*                      Q_S0910_START_STOP_JOB                        */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0860_RESET_CCI_DS: PROC(ZF_MEAS_TYPE M_MEAS_TYPE)
                        RETURNS (BOOL);

DCL ZQ_HISTORY_NBR      INT,
    ZQ_SUCCESS          BOOL,
    ZQ_HISTORY_NAME     M_FILE_NAME,
    ZQ_FILE_ATTRIB_PTR  PTR;
DCL ZQ_CELL_IDX 	INT;

ZQ_SUCCESS:=FALSE;

/* GET THE POINTER TO THE MEMORY BLOCK THAT MUST BE COPIED */
CASE ZF_MEAS_TYPE OF

  (E_MT_TRAFFIC):
    /* THIS HAS MORE THAN ONE BLOCK OF MEMORY */
    Q_S0410_CLEAR_MEMORY(ZF_MEAS_TYPE,
                         CM_FY32_HF_NBR_TYPE_0011);

    ZQ_SUCCESS:=Q_S0801_UPDATE_HISTORY_FILE(ZF_MEAS_TYPE,
                                            CM_FY32_HF_NBR_TYPE_0011,
                                            CM_FY32_HF_TYPE_0011);

    Q_S0410_CLEAR_MEMORY(ZF_MEAS_TYPE,
                         CM_FY32_HF_NBR_TYPE_0012);
    IF ZQ_SUCCESS = TRUE
      THEN
      ZQ_SUCCESS:=Q_S0801_UPDATE_HISTORY_FILE(ZF_MEAS_TYPE,
                                            CM_FY32_HF_NBR_TYPE_0012,
                                            CM_FY32_HF_TYPE_0012);
    FI;

  (E_MT_A_AND_ABIS_ITF_ANALYSIS):
    /* THIS HAS MORE THAN ONE BLOCK OF MEMORY */
    Q_S0410_CLEAR_MEMORY(ZF_MEAS_TYPE,
                         CM_FY32_HF_NBR_TYPE_0181);

    ZQ_SUCCESS:=Q_S0801_UPDATE_HISTORY_FILE(ZF_MEAS_TYPE,
                                            CM_FY32_HF_NBR_TYPE_0181,
                                            CM_FY32_HF_TYPE_0181);

    Q_S0410_CLEAR_MEMORY(ZF_MEAS_TYPE,
                         CM_FY32_HF_NBR_TYPE_0182);
    IF ZQ_SUCCESS = TRUE
      THEN
      ZQ_SUCCESS:=Q_S0801_UPDATE_HISTORY_FILE(ZF_MEAS_TYPE,
                                            CM_FY32_HF_NBR_TYPE_0182,
                                            CM_FY32_HF_TYPE_0182);
    FI;
    /*CR36/236932*/
    (E_MT_LAPD):
    /* THIS HAS MORE THAN ONE BLOCK OF MEMORY */
    Q_S0410_CLEAR_MEMORY(ZF_MEAS_TYPE,
                         CM_FY32_HF_NBR_TYPE_0071);

    ZQ_SUCCESS:=Q_S0801_UPDATE_HISTORY_FILE(ZF_MEAS_TYPE,
                                            CM_FY32_HF_NBR_TYPE_0071,
                                            CM_FY32_HF_TYPE_0071);

    Q_S0410_CLEAR_MEMORY(ZF_MEAS_TYPE,
                         CM_FY32_HF_NBR_TYPE_0072);
    IF ZQ_SUCCESS = TRUE
      THEN
      ZQ_SUCCESS:=Q_S0801_UPDATE_HISTORY_FILE(ZF_MEAS_TYPE,
                                            CM_FY32_HF_NBR_TYPE_0072,
                                            CM_FY32_HF_TYPE_0072);
    FI;
  /*CR36/236932*/
  (E_MT_VGCS):
    /* THIS HAS MORE THAN ONE BLOCK OF MEMORY */
    Q_S0410_CLEAR_MEMORY(ZF_MEAS_TYPE,
                         CM_FY32_HF_NBR_TYPE_0341);

    ZQ_SUCCESS:=Q_S0801_UPDATE_HISTORY_FILE(ZF_MEAS_TYPE,
                                            CM_FY32_HF_NBR_TYPE_0341,
                                            CM_FY32_HF_TYPE_0341);

    Q_S0410_CLEAR_MEMORY(ZF_MEAS_TYPE,
                         CM_FY32_HF_NBR_TYPE_0342);
    IF ZQ_SUCCESS = TRUE
      THEN
      ZQ_SUCCESS:=Q_S0801_UPDATE_HISTORY_FILE(ZF_MEAS_TYPE,
                                            CM_FY32_HF_NBR_TYPE_0342,
                                            CM_FY32_HF_TYPE_0342);
    FI;
/* BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE  */    
  (E_MT_IP):
   /* THIS HAS MORE THAN ONE BLOCK OF MEMORY */
    Q_S0410_CLEAR_MEMORY(ZF_MEAS_TYPE,
                         CM_FY32_HF_NBR_TYPE_350);
    Q_S0410_CLEAR_MEMORY(ZF_MEAS_TYPE,
                         CM_FY32_HF_NBR_TYPE_354);
/* CR20/225233 */                         
    Q_S0410_CLEAR_MEMORY(ZF_MEAS_TYPE,
                         CM_FY32_HF_NBR_TYPE_353);
/* CR20/225233 */                         
    Q_S0410_CLEAR_MEMORY(ZF_MEAS_TYPE,
                         CM_FY32_HF_NBR_TYPE_355);
/*CR20/274751*/
    Q_S0410_CLEAR_MEMORY(ZF_MEAS_TYPE,
                         CM_FY32_HF_NBR_TYPE_356);
/*CR20/274751*/
/* START : WIPRO B11 IP MR0 PKG1 */
    Q_S0410_CLEAR_MEMORY(ZF_MEAS_TYPE,
                         CM_FY32_HF_NBR_TYPE_357);
    Q_S0410_CLEAR_MEMORY(ZF_MEAS_TYPE,
                         CM_FY32_HF_NBR_TYPE_358);
    /**/
    P_GDXBYX_INIT_GLOB_BTS_BUFFER();
    /**/
    /* END : WIPRO B11 IP MR0 PKG1 */
    ZQ_SUCCESS:= Q_S8809_UPDATE_HISTORY_TYPE_35();                                          
    
/* END: ADD-WIPRO-B10-MX-MR2-CHANGE */    
/*START: IURG FEATURE */
  (E_MT_IURG):
    Q_S0410_CLEAR_MEMORY(ZF_MEAS_TYPE,
                         CM_FY32_HF_NBR_TYPE_360);

    ZQ_SUCCESS:= Q_S8972_UPDATE_HISTORY_TYPE_36();
/*END : IURG FEATURE */
/* BEGIN : B12 VAMOS */
  (E_MT_VAMOS):
    Q_S0410_CLEAR_MEMORY(ZF_MEAS_TYPE,
                         CM_FY32_HF_NBR_TYPE_370);
    Q_S0410_CLEAR_MEMORY(ZF_MEAS_TYPE,
                         CM_FY32_HF_NBR_TYPE_371);
	/*CRI # 00823248.01*/
     Q_S0800_RESET_MC1422X_MC1423X();
    ZQ_SUCCESS:= Q_S8999_UPDATE_HISTORY_TYPE_37();
/* END : B12 VAMOS */

  (E_MT_CELL_TRX_OVERVIEW_COUNTERS):
    /* THIS HAS MORE THAN ONE BLOCK OF MEMORY */
    Q_S0410_CLEAR_MEMORY(ZF_MEAS_TYPE,
                         CM_FY32_HF_NBR_TYPE_1101);

    Q_S0410_CLEAR_MEMORY(ZF_MEAS_TYPE,
                         CM_FY32_HF_NBR_TYPE_1102);

    Q_S0410_CLEAR_MEMORY(ZF_MEAS_TYPE,
                         CM_FY32_HF_NBR_TYPE_1103);

    Q_S0410_CLEAR_MEMORY(ZF_MEAS_TYPE,
                         CM_FY32_HF_NBR_TYPE_1104);

    Q_S0410_CLEAR_MEMORY(ZF_MEAS_TYPE,
                         CM_FY32_HF_NBR_TYPE_1105);

    /* FR 36/128518 CHENZY */
    Q_S0410_CLEAR_MEMORY(ZF_MEAS_TYPE,
                         CM_FY32_HF_NBR_TYPE_1106);
    /* FR 36/128518 END*/
    /* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */  
    Q_S0410_CLEAR_MEMORY(ZF_MEAS_TYPE, 
                         CM_FY32_HF_NBR_TYPE_1107);
   /* END: ADD-WIPRO-B10-MR1-CHANGE */ 
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */   
  Q_S0410_CLEAR_MEMORY(ZF_MEAS_TYPE, 
                         CM_FY32_HF_NBR_TYPE_1108);
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
/*ADDED FOR GSL COUNTERS MEMO*/
  Q_S0410_CLEAR_MEMORY(ZF_MEAS_TYPE, 
                         CM_FY32_HF_NBR_TYPE_1109);
/*ADDED FOR GSL COUNTERS MEMO*/
/*ADDED FOR A-FLEX NRI COUNTERS*/
   Q_S0410_CLEAR_MEMORY(ZF_MEAS_TYPE, 
                         CM_FY32_HF_NBR_TYPE_1110);
/*START : AUPOIP FEATURE */
   Q_S0410_CLEAR_MEMORY(ZF_MEAS_TYPE, 
                         CM_FY32_HF_NBR_TYPE_1111);
   Q_S0410_CLEAR_MEMORY(ZF_MEAS_TYPE, 
                         CM_FY32_HF_NBR_TYPE_1112);
/* END : AUPOIP FEATURE */
/* START: DCTPD00614277 */
   Q_S0410_CLEAR_MEMORY(ZF_MEAS_TYPE, 
                         CM_FY32_HF_NBR_TYPE_1113);
/* END: DCTPD00614277 */
/* BEGIN: CR 1049264 */
/* Below is the global variable used for updating the MC1531 */
  DO FOR ZQ_CELL_IDX :=1 TO CM_FY32_MAX_CELLS_PER_BSC;
DO WITH Z_T110_MC1531_PTR->.ZB_TYPE_110_MC1531(ZQ_CELL_IDX);  
/*  DO WITH Z_T110_16_PTR->.ZB_TYPE_110_MC1531(ZQ_CELL_IDX);*/
	ZB_MC1531_TCH_CONG_TIME := 0;
	ZB_NBR_OF_TIMES_CONG_OBSERVD := 0;
	ZB_ADJUSTMENT := FALSE ;
    OD;
  OD;	
/* END: CR 1049264 */
/* BEGIN: CR 605005 */
Q_S0410_CLEAR_MEMORY(ZF_MEAS_TYPE,
                         CM_FY32_HF_NBR_TYPE_1114);
/* END: CR 605005 */
/*ADDED FOR A-FLEX NRI COUNTERS*/            

/* BEGIN: CR:745699 */
Q_S0410_CLEAR_MEMORY(ZF_MEAS_TYPE,
                         CM_FY32_HF_NBR_TYPE_1115);
/* END: CR:745699 */           
/*START CR MOCN */
Q_S0410_CLEAR_MEMORY(ZF_MEAS_TYPE,
                         CM_FY32_HF_NBR_TYPE_1117);
/*END CR MOCN */
/*begin CR1238146 A-GPS*/
Q_S0410_CLEAR_MEMORY(E_MT_CELL_TRX_OVERVIEW_COUNTERS,
                       CM_FY32_HF_NBR_TYPE_1118);
/*end CR1238146 A-GPS*/
    ZQ_SUCCESS:=Q_S0806_UPDATE_HISTORY_TYPE_110();

  (E_MT_TRAFFIC_FLOW):
    Q_S0410_CLEAR_MEMORY(ZF_MEAS_TYPE,
                         CM_FY32_HF_NBR_TYPE_180);

    Q_S0030_GET_USER_BUF(ZQ_FILE_ATTRIB_PTR, SIZE(M_FDIR));

    IF Q_S0850_DO_FILE_ACTION(CM_FY32_HF_NBR_TYPE_180,
                              CM_FY32_HF_TYPE_180,
                              E_CHECK_FILE_PRES,
                              Z_OWN_DISK,
                              ZQ_FILE_ATTRIB_PTR,
                              SIZE(M_FDIR)) = E_NULL_CODE
    THEN
      IF ZQ_FILE_ATTRIB_PTR->M_FDIR.B_NO_REC_FILE /= 0
      THEN
        Q_S0868_DELETE_HISTORY(CM_FY32_HF_NBR_TYPE_180,
                             CM_FY32_HF_TYPE_180);

      FI;
    FI;
    Q_S0040_RET_MEM(ZQ_FILE_ATTRIB_PTR);

    ZQ_SUCCESS := TRUE;

  ELSE
    /* GET THE HISTORY FILE NUMBER IN ORDER TO */
    /* GET OTHER ATTRIBUTES*/
    Q_S0750_GET_HISTORY_FILE(ZF_MEAS_TYPE,
                             ZQ_HISTORY_NBR,
                             ZQ_HISTORY_NAME);

    Q_S0410_CLEAR_MEMORY(ZF_MEAS_TYPE,
                         ZQ_HISTORY_NBR);

    ZQ_SUCCESS:=Q_S0801_UPDATE_HISTORY_FILE(ZF_MEAS_TYPE,
                                            ZQ_HISTORY_NBR,
                                            ZQ_HISTORY_NAME);

ESAC;

RETURN (ZQ_SUCCESS);

END Q_S0860_RESET_CCI_DS;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0866_DELETE_INCOMPLETE                           */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       INCOMPLETE MEASUREMENT HISTORY FILES ARE DELETED.            */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_MEAS_TYPE M_MEAS_TYPE,                     */
/*                      ZF_HISTORY_NBR INT,                           */
/*                      ZF_HISTORY_NAME M_FILE_NAME LOC               */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0030_GET_USER_BUF                          */
/*                      Q_S0850_DO_FILE_ACTION                        */
/*                      Q_S0010_WAIT_BEFORE_RETRYING                  */
/*                      Q_S0780_GET_MAX_NUM_RECS                      */
/*                      Q_S0755_GET_RECORD_SIZE                       */
/*                      Q_S0868_DELETE_HISTORY                        */
/*                      Q_S0040_RET_MEM                               */
/*     CALLED FROM:                                                   */
/*                      Q_S0870_INITIALISE_HISTORY                    */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0866_DELETE_INCOMPLETE: PROC(ZF_MEAS_TYPE    M_MEAS_TYPE,
                                ZF_HISTORY_NBR  INT,
                                ZF_HISTORY_NAME M_FILE_NAME LOC,
                                ZF_HF_REC_NBR  INT LOC)

                           RETURNS(BOOL);

DCL ZQ_DELETED         BOOL,
    ZQ_COMPL_CODE      M_CPL_CODE,
    ZQ_FILE_ATTRIB_PTR PTR;
DCL ZQ_REC_NO         INT;
DCL ZQ_REC_SIZE        INT;

ZQ_DELETED:=TRUE;

 /* THE ATTRIBUTES OF THE FILE ARE COPIED INTO A BUFFER */
 Q_S0030_GET_USER_BUF(ZQ_FILE_ATTRIB_PTR, SIZE(M_FDIR));

 ZQ_COMPL_CODE := Q_S0850_DO_FILE_ACTION(ZF_HISTORY_NBR,
                                         ZF_HISTORY_NAME,
                                         E_CHECK_FILE_PRES,
                                         Z_OWN_DISK,
                                         ZQ_FILE_ATTRIB_PTR,
                                         SIZE(M_FDIR));

 DO WHILE ZQ_COMPL_CODE = E_TIMEOUT;
   Q_S0010_WAIT_BEFORE_RETRYING(ZS_OPEN_HF_DELAY_TENTHS);
   ZQ_COMPL_CODE := Q_S0850_DO_FILE_ACTION(ZF_HISTORY_NBR,
                                           ZF_HISTORY_NAME,
                                           E_CHECK_FILE_PRES,
                                           Z_OWN_DISK,
                                           ZQ_FILE_ATTRIB_PTR,
                                           SIZE(M_FDIR));
 OD;

 IF ZQ_COMPL_CODE = E_NULL_CODE
 THEN
   DO WITH ZQ_FILE_ATTRIB_PTR->M_FDIR;
     ZQ_REC_NO := Q_S0780_GET_MAX_NUM_RECS(ZF_MEAS_TYPE,
                                           ZF_HISTORY_NBR);
     ZQ_REC_SIZE := Q_S0755_GET_RECORD_SIZE(ZF_MEAS_TYPE,
                                            ZF_HISTORY_NBR);

     ZF_HF_REC_NBR := B_NO_REC_FILE-1; /* SUBTRACT PHHR */
     IF (ZF_HF_REC_NBR < ZQ_REC_NO OR ZQ_REC_SIZE /= B_REC_SIZE)
     THEN
       Q_S0868_DELETE_HISTORY(ZF_HISTORY_NBR,
                              ZF_HISTORY_NAME);
     ELSE
       ZQ_DELETED:=FALSE;
     FI; /* FILE NOT CORRECT LENGTH */
   OD;
 FI;

Q_S0040_RET_MEM(ZQ_FILE_ATTRIB_PTR);

RETURN (ZQ_DELETED);
END Q_S0866_DELETE_INCOMPLETE;
/**********************************************************************/
Q_S0866_OLC_DELETE_INCOMPLETE: PROC(ZF_MEAS_TYPE    M_MEAS_TYPE,
                                ZF_HISTORY_NBR  INT,
                                ZF_HISTORY_NAME M_FILE_NAME LOC,
                                ZF_HF_REC_NBR  INT LOC)

                           RETURNS(BOOL);

DCL ZQ_DELETED         BOOL,
    ZQ_COMPL_CODE      M_CPL_CODE,
    ZQ_FILE_ATTRIB_PTR PTR;
DCL ZQ_REC_NO         LONG_INT;
DCL ZQ_REC_SIZE        INT;
DCL ZQ_REC_NO_OLC ZM_INT_TO_LN_INT;

ZQ_REC_NO_OLC.ZB_LOW_INT := 0;
ZQ_REC_NO_OLC.ZB_HIGH_INT := 0;


ZQ_DELETED:=TRUE;

 /* THE ATTRIBUTES OF THE FILE ARE COPIED INTO A BUFFER */
 Q_S0030_GET_USER_BUF(ZQ_FILE_ATTRIB_PTR, SIZE(M_FDIR));

 ZQ_COMPL_CODE := Q_S0850_DO_FILE_ACTION(ZF_HISTORY_NBR,
                                         ZF_HISTORY_NAME,
                                         E_CHECK_FILE_PRES,
                                         Z_OWN_DISK,
                                         ZQ_FILE_ATTRIB_PTR,
                                         SIZE(M_FDIR));

 DO WHILE ZQ_COMPL_CODE = E_TIMEOUT;
   Q_S0010_WAIT_BEFORE_RETRYING(ZS_OPEN_HF_DELAY_TENTHS);
   ZQ_COMPL_CODE := Q_S0850_DO_FILE_ACTION(ZF_HISTORY_NBR,
                                           ZF_HISTORY_NAME,
                                           E_CHECK_FILE_PRES,
                                           Z_OWN_DISK,
                                           ZQ_FILE_ATTRIB_PTR,
                                           SIZE(M_FDIR));
 OD;

 IF ZQ_COMPL_CODE = E_NULL_CODE
 THEN
   DO WITH ZQ_FILE_ATTRIB_PTR->M_FDIR;
     ZQ_REC_NO := Q_S0780_OLC_GET_MAX_NUM_RECS(ZF_MEAS_TYPE,
                                           ZF_HISTORY_NBR);
     ZQ_REC_SIZE := Q_S0755_GET_RECORD_SIZE(ZF_MEAS_TYPE,
                                            ZF_HISTORY_NBR);

     ZF_HF_REC_NBR := B_NO_REC_FILE-1; /* SUBTRACT PHHR */
     ZQ_REC_NO_OLC.ZB_LONG_INT := ZQ_REC_NO; 
     IF (ZF_HF_REC_NBR < ZQ_REC_NO_OLC.ZB_LOW_INT
                              OR ZQ_REC_SIZE /= B_REC_SIZE)
     THEN
       Q_S0868_DELETE_HISTORY(ZF_HISTORY_NBR,
                              ZF_HISTORY_NAME);
     ELSE
       ZQ_DELETED:=FALSE;
     FI; /* FILE NOT CORRECT LENGTH */
   OD;
 FI;

Q_S0040_RET_MEM(ZQ_FILE_ATTRIB_PTR);

RETURN (ZQ_DELETED);
END Q_S0866_OLC_DELETE_INCOMPLETE;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0868_DELETE_HISTORY                              */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                  THE MEASUREMENT HISTORY FILE IS HERE DELETED - IT */
/*      IS A PRECONDITION THAT THE FILE EXISTS.                       */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_HISTORY_NBR INT,                           */
/*                      ZF_HISTORY_NAME M_FILE_NAME LOC               */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0850_DO_FILE_ACTION                        */
/*                      Q_S0010_WAIT_BEFORE_RETRYING                  */
/*     CALLED FROM:                                                   */
/*                      Q_S0860_RESET_CCI_DS                          */
/*                      Q_S0866_DELETE_INCOMPLETE                     */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0868_DELETE_HISTORY: PROC(ZF_HISTORY_NBR  INT,
                             ZF_HISTORY_NAME M_FILE_NAME LOC);

DCL ZQ_COMPL_CODE M_CPL_CODE;

ZQ_COMPL_CODE:= Q_S0850_DO_FILE_ACTION(ZF_HISTORY_NBR,
                                       ZF_HISTORY_NAME,
                                       E_DELETE_REQ,
                                       Z_OWN_DISK,
                                       NULL, 0);
IF (ZQ_COMPL_CODE/=E_NULL_CODE) 
THEN
  Q_S0020_CCDC_ERROR(M_ERC6_USER_REC,
                     M_ERT0040_CLOSE_FILE_FLT,
                     66, NUM(ZQ_COMPL_CODE));
FI;

ZQ_COMPL_CODE:= Q_S0850_DO_FILE_ACTION(ZF_HISTORY_NBR,
                                       ZF_HISTORY_NAME,
                                       E_DELETE_REQ,
                                       Z_OTHER_DISK,
                                       NULL, 0);
                                       
IF (ZQ_COMPL_CODE/=E_NULL_CODE) 
THEN
  Q_S0020_CCDC_ERROR(M_ERC6_USER_REC,
                     M_ERT0040_CLOSE_FILE_FLT,
                     67, NUM(ZQ_COMPL_CODE));
FI;

END Q_S0868_DELETE_HISTORY;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0870_INITIALISE_HISTORY                          */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*      IF ACTIVE STATE THEN DELETE INCOMPLETE FILES.                 */
/*      FOR OTHER FILES COPY CONTENTS FROM HISTORY TO MEMORY AND FOR  */
/*      THE REST INITIALISE MEMORY.                                   */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0750_GET_HISTORY_FILE                      */
/*                      Q_S0866_DELETE_INCOMPLETE                     */
/*                      Q_S0180_MEAS_TYPE_RUNNING                     */
/*                      Q_S0872_COPY_HIS_TO_MEM                       */
/*                      Q_S0030_GET_USER_BUF                          */
/*                      Q_S0850_DO_FILE_ACTION                        */
/*                      Q_S0871_COPY_T180_HIS_TO_MEMORY               */
/*                      Q_S0875_COPY_T110_1_HIS_TO_MEMOR              */
/*     CALLED FROM:                                                   */
/*                      Q_S0900_PERFORM_SYSTEM_START_UP               */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0870_INITIALISE_HISTORY: PROC();

DCL ZQ_MEAS_TYPE    M_MEAS_TYPE,
    ZQ_HISTORY_NAME M_FILE_NAME,
    ZQ_HISTORY_NBR  INT,
    ZQ_ACT_IDX      INT;
DCL ZQ_HF_REC_NBR   INT;

/* DELETE BAD FILES
 * IF ACTIVE THEN
 * FOR FILES THAT EXIST AND JOBS ARE ACTIVE THEN
 * COPY CONTENTS TO MEMORY.
 */
DO FOR ZQ_MEAS_TYPE := E_MT_TRAFFIC TO E_MT_TRAFFIC_FLOW;
   CASE ZQ_MEAS_TYPE OF
     (E_MT_RESOURCE_AVAILABILITY,                                /* 2 */
      E_MT_RESOURCE_USAGE_CCCH,                                  /* 3 */
      E_MT_RESOURCE_USAGE_SDCCH,                                 /* 4 */
      E_MT_RESOURCE_USAGE_RTCH,                                  /* 5 */
      E_MT_HANDOVER,                                             /* 6 */
      /*CR36/236932*/
      /*E_MT_LAPD,*/                                             /* 7 */
      /*CR36/236932*/
      E_MT_X25,                                                  /* 8 */
      E_MT_NUMBER7,                                              /* 9 */
      E_MT_SMS,                                                 /* 19 */
      E_MT_SCCP,                                                /* 25 */
      E_MT_HANDOVER_PER_SERVINGCELL,                            /* 26 */
      E_MT_HANDOVER_PER_TARGETCELL,                             /* 27 */
      E_MT_HANDOVER_SDCCH,                                      /* 28 */
      E_MT_DIRECTED_RETRY,                                      /* 29 */
      E_MT_SMSCB,                                               /* 30 */
      E_MT_MULTIBAND_HANDOVERS,                                 /* 32 */
      E_MT_EME,                                                 /* 33 */
/*START : IURG FEATURE */
      E_MT_IURG):                                               /* 36 */
/*END : IURG FEATURE */
      /* GET HISTORY FILE ATTRIBUTES FROM MEASUREMENT TYPE. */
      Q_S0750_GET_HISTORY_FILE(ZQ_MEAS_TYPE,
                               ZQ_HISTORY_NBR,
                               ZQ_HISTORY_NAME);

      IF NOT Q_S0866_DELETE_INCOMPLETE(ZQ_MEAS_TYPE,
                                       ZQ_HISTORY_NBR,
                                       ZQ_HISTORY_NAME,
                                       ZQ_HF_REC_NBR) AND
        /* FILE EXISTS AND IS COMPLETE */
        Q_S0180_MEAS_TYPE_RUNNING(ZQ_MEAS_TYPE, ZQ_ACT_IDX)
      THEN
        /* COPY FROM HISTORY FILE TO MEMORY IF THE JOB IS
         * ACTIVE.
         */
        Q_S0872_COPY_HIS_TO_MEM(ZQ_HISTORY_NBR,
                                ZQ_HISTORY_NAME,
                                ZQ_MEAS_TYPE);
      FI;

     (E_MT_TRAFFIC):                                           /* 1 */
      /************ COPY TYPE 1 PART 1 ***************************/
      IF NOT Q_S0866_DELETE_INCOMPLETE(ZQ_MEAS_TYPE,
                                CM_FY32_HF_NBR_TYPE_0011,
                                CM_FY32_HF_TYPE_0011,
                                ZQ_HF_REC_NBR) AND
         Q_S0180_MEAS_TYPE_RUNNING(ZQ_MEAS_TYPE, ZQ_ACT_IDX)
      THEN
        /* COPY FROM HISTORY FILE TO MEMORY IF THE JOB IS ACTIVE */
        Q_S0872_COPY_HIS_TO_MEM(CM_FY32_HF_NBR_TYPE_0011,
                                CM_FY32_HF_TYPE_0011,
                                ZQ_MEAS_TYPE);
      FI;

      /************ COPY TYPE 1 PART 2 ***************************/
      IF NOT Q_S0866_DELETE_INCOMPLETE(ZQ_MEAS_TYPE,
                                CM_FY32_HF_NBR_TYPE_0012,
                                CM_FY32_HF_TYPE_0012,
                                ZQ_HF_REC_NBR) AND
         Q_S0180_MEAS_TYPE_RUNNING(ZQ_MEAS_TYPE, ZQ_ACT_IDX)
      THEN
        /* COPY FROM HISTORY FILE TO MEMORY IF THE JOB IS
         * ACTIVE.
         */
        Q_S0872_COPY_HIS_TO_MEM(CM_FY32_HF_NBR_TYPE_0012,
                                CM_FY32_HF_TYPE_0012,
                                ZQ_MEAS_TYPE);
      FI;

     (E_MT_A_AND_ABIS_ITF_ANALYSIS):                          /* 18 */
      /************ COPY TYPE 18 PART 1 **************************/
      IF NOT Q_S0866_DELETE_INCOMPLETE(ZQ_MEAS_TYPE,
                                CM_FY32_HF_NBR_TYPE_0181,
                                CM_FY32_HF_TYPE_0181,
                                ZQ_HF_REC_NBR) AND
         Q_S0180_MEAS_TYPE_RUNNING(ZQ_MEAS_TYPE, ZQ_ACT_IDX)
      THEN
        /* COPY FROM HISTORY FILE TO MEMORY IF THE JOB IS ACTIVE */
        Q_S0872_COPY_HIS_TO_MEM(CM_FY32_HF_NBR_TYPE_0181,
                                CM_FY32_HF_TYPE_0181,
                                ZQ_MEAS_TYPE);
      FI;

      /************ COPY TYPE 18 PART 2 **************************/
      IF NOT Q_S0866_DELETE_INCOMPLETE(ZQ_MEAS_TYPE,
                                CM_FY32_HF_NBR_TYPE_0182,
                                CM_FY32_HF_TYPE_0182,
                                ZQ_HF_REC_NBR) AND
         Q_S0180_MEAS_TYPE_RUNNING(ZQ_MEAS_TYPE, ZQ_ACT_IDX)
      THEN
        /* COPY FROM HISTORY FILE TO MEMORY IF THE JOB IS
         * ACTIVE.
         */
        Q_S0872_COPY_HIS_TO_MEM(CM_FY32_HF_NBR_TYPE_0182,
                                CM_FY32_HF_TYPE_0182,
                                ZQ_MEAS_TYPE);
      FI;
     /*CR36/236932*/
      (E_MT_LAPD):                                        /* 7 */
      /************ COPY TYPE 7 PART 1 **************************/
      IF NOT Q_S0866_DELETE_INCOMPLETE(ZQ_MEAS_TYPE,
                                CM_FY32_HF_NBR_TYPE_0071,
                                CM_FY32_HF_TYPE_0071,
                                ZQ_HF_REC_NBR) AND
         Q_S0180_MEAS_TYPE_RUNNING(ZQ_MEAS_TYPE, ZQ_ACT_IDX)
      THEN
        /* COPY FROM HISTORY FILE TO MEMORY IF THE JOB IS ACTIVE */
        Q_S0872_COPY_HIS_TO_MEM(CM_FY32_HF_NBR_TYPE_0071,
                                CM_FY32_HF_TYPE_0071,
                                ZQ_MEAS_TYPE);
      FI;

      /************ COPY TYPE 7 PART 2 **************************/
      IF NOT Q_S0866_DELETE_INCOMPLETE(ZQ_MEAS_TYPE,
                                CM_FY32_HF_NBR_TYPE_0072,
                                CM_FY32_HF_TYPE_0072,
                                ZQ_HF_REC_NBR) AND
         Q_S0180_MEAS_TYPE_RUNNING(ZQ_MEAS_TYPE, ZQ_ACT_IDX)
      THEN
        /* COPY FROM HISTORY FILE TO MEMORY IF THE JOB IS
         * ACTIVE.
         */
        Q_S0872_COPY_HIS_TO_MEM(CM_FY32_HF_NBR_TYPE_0072,
                                CM_FY32_HF_TYPE_0072,
                                ZQ_MEAS_TYPE);
      FI;
     
     /*CR36/236932*/ 

     (E_MT_VGCS):                                             /* 34 */
      /************ COPY TYPE 34 PART 1 **************************/
      IF NOT Q_S0866_DELETE_INCOMPLETE(ZQ_MEAS_TYPE,
                                CM_FY32_HF_NBR_TYPE_0341,
                                CM_FY32_HF_TYPE_0341,
                                ZQ_HF_REC_NBR) AND
         Q_S0180_MEAS_TYPE_RUNNING(ZQ_MEAS_TYPE, ZQ_ACT_IDX)
      THEN
        /* COPY FROM HISTORY FILE TO MEMORY IF THE JOB IS ACTIVE */
        Q_S0872_COPY_HIS_TO_MEM(CM_FY32_HF_NBR_TYPE_0341,
                                CM_FY32_HF_TYPE_0341,
                                ZQ_MEAS_TYPE);
      FI;

      /************ COPY TYPE 34 PART 2 **************************/
      IF NOT Q_S0866_DELETE_INCOMPLETE(ZQ_MEAS_TYPE,
                                CM_FY32_HF_NBR_TYPE_0342,
                                CM_FY32_HF_TYPE_0342,
                                ZQ_HF_REC_NBR) AND
         Q_S0180_MEAS_TYPE_RUNNING(ZQ_MEAS_TYPE, ZQ_ACT_IDX)
      THEN
        /* COPY FROM HISTORY FILE TO MEMORY IF THE JOB IS
         * ACTIVE.
         */
        Q_S0872_COPY_HIS_TO_MEM(CM_FY32_HF_NBR_TYPE_0342,
                                CM_FY32_HF_TYPE_0342,
                                ZQ_MEAS_TYPE);
      FI;
/*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE */

     (E_MT_IP):                                             /* 35 */
      /************ COPY TYPE 35 PART 1 **************************/
      IF NOT Q_S0866_DELETE_INCOMPLETE(ZQ_MEAS_TYPE,
                                CM_FY32_HF_NBR_TYPE_350,
                                CM_FY32_HF_TYPE_0350,
                                ZQ_HF_REC_NBR) AND
         Q_S0180_MEAS_TYPE_RUNNING(ZQ_MEAS_TYPE, ZQ_ACT_IDX)
      THEN
        /* COPY FROM HISTORY FILE TO MEMORY IF THE JOB IS ACTIVE */
        Q_S0872_COPY_HIS_TO_MEM(CM_FY32_HF_NBR_TYPE_350,
                                CM_FY32_HF_TYPE_0350,
                                ZQ_MEAS_TYPE);
      FI;
/* CR20/225233 */
      /************ COPY TYPE 35 PART 3 **************************/
      IF NOT Q_S0866_DELETE_INCOMPLETE(ZQ_MEAS_TYPE,
                                CM_FY32_HF_NBR_TYPE_353,
                                CM_FY32_HF_TYPE_0353,
                                ZQ_HF_REC_NBR) AND
         Q_S0180_MEAS_TYPE_RUNNING(ZQ_MEAS_TYPE, ZQ_ACT_IDX)
     THEN
        /* COPY FROM HISTORY FILE TO MEMORY IF THE JOB IS ACTIVE */
        Q_S0872_COPY_HIS_TO_MEM(CM_FY32_HF_NBR_TYPE_353,
                                CM_FY32_HF_TYPE_0353,
                                ZQ_MEAS_TYPE);
      FI;
/* CR20/225233 */
      /************ COPY TYPE 35 PART 2 **************************/
      IF NOT Q_S0866_DELETE_INCOMPLETE(ZQ_MEAS_TYPE,
                                CM_FY32_HF_NBR_TYPE_354,
                                CM_FY32_HF_TYPE_0354,
                                ZQ_HF_REC_NBR) AND
         Q_S0180_MEAS_TYPE_RUNNING(ZQ_MEAS_TYPE, ZQ_ACT_IDX)
     THEN
        /* COPY FROM HISTORY FILE TO MEMORY IF THE JOB IS ACTIVE */
        Q_S0872_COPY_HIS_TO_MEM(CM_FY32_HF_NBR_TYPE_354,
                                CM_FY32_HF_TYPE_0354,
                                ZQ_MEAS_TYPE);
      FI;

      /************ COPY TYPE 35 PART 3 **************************/
      IF NOT Q_S0866_DELETE_INCOMPLETE(ZQ_MEAS_TYPE,
                                CM_FY32_HF_NBR_TYPE_355,
                                CM_FY32_HF_TYPE_0355,
                                ZQ_HF_REC_NBR) AND
         Q_S0180_MEAS_TYPE_RUNNING(ZQ_MEAS_TYPE, ZQ_ACT_IDX)
     THEN
        /* COPY FROM HISTORY FILE TO MEMORY IF THE JOB IS ACTIVE */
        Q_S0872_COPY_HIS_TO_MEM(CM_FY32_HF_NBR_TYPE_355,
                                CM_FY32_HF_TYPE_0355,
                                ZQ_MEAS_TYPE);
      FI;
/*START: CR20/284751 BTS FRQ SYNCH */
      /************ COPY TYPE 35 PART 6 **************************/
      IF NOT Q_S0866_DELETE_INCOMPLETE(ZQ_MEAS_TYPE,
                                CM_FY32_HF_NBR_TYPE_356,
                                CM_FY32_HF_TYPE_0356,
                                ZQ_HF_REC_NBR) AND
         Q_S0180_MEAS_TYPE_RUNNING(ZQ_MEAS_TYPE, ZQ_ACT_IDX)
     THEN
        /* COPY FROM HISTORY FILE TO MEMORY IF THE JOB IS ACTIVE */
        Q_S0872_COPY_HIS_TO_MEM(CM_FY32_HF_NBR_TYPE_356,
                                CM_FY32_HF_TYPE_0356,
                                ZQ_MEAS_TYPE);
      FI;
/*END :CR20/284751 BTS FRQ SYNCH */
/* START : WIPRO B11 IP MR0 PKG1 */
       /************ COPY TYPE 35 PART 4 **************************/
      IF NOT Q_S0866_DELETE_INCOMPLETE(ZQ_MEAS_TYPE,
                                CM_FY32_HF_NBR_TYPE_357,
                                CM_FY32_HF_TYPE_0357,
                                ZQ_HF_REC_NBR) AND
         Q_S0180_MEAS_TYPE_RUNNING(ZQ_MEAS_TYPE, ZQ_ACT_IDX)
      THEN
        /* COPY FROM HISTORY FILE TO MEMORY IF THE JOB IS ACTIVE */
        Q_S0872_COPY_HIS_TO_MEM(CM_FY32_HF_NBR_TYPE_357,
                                CM_FY32_HF_TYPE_0357,
                                ZQ_MEAS_TYPE);
      FI;
      
       /************ COPY TYPE 35 PART 5 **************************/
      IF NOT Q_S0866_DELETE_INCOMPLETE(ZQ_MEAS_TYPE,
                                CM_FY32_HF_NBR_TYPE_358,
                                CM_FY32_HF_TYPE_0358,
                                ZQ_HF_REC_NBR) AND
         Q_S0180_MEAS_TYPE_RUNNING(ZQ_MEAS_TYPE, ZQ_ACT_IDX)
      THEN
        /* COPY FROM HISTORY FILE TO MEMORY IF THE JOB IS ACTIVE */
        Q_S0872_COPY_HIS_TO_MEM(CM_FY32_HF_NBR_TYPE_358,
                                CM_FY32_HF_TYPE_0358,
                                ZQ_MEAS_TYPE);
      FI;

/* END : WIPRO B11 IP MR0 PKG1 */

   
/*END: ADD-WIPRO-B10-MX-MR2-CHANGE */

     (E_MT_TRAFFIC_FLOW):                                      /* 180 */
      /* GET HISTORY FILE ATTRIBUTES FROM MEASUREMENT TYPE. */
      Q_S0750_GET_HISTORY_FILE(ZQ_MEAS_TYPE,
                               ZQ_HISTORY_NBR,
                               ZQ_HISTORY_NAME);

        /* FILE EXISTS AND IS COMPLETE */
      IF NOT Q_S0866_DELETE_INCOMPLETE(ZQ_MEAS_TYPE,
                                       ZQ_HISTORY_NBR,
                                       ZQ_HISTORY_NAME,
                                       ZQ_HF_REC_NBR) AND
        /* FILE EXISTS AND IS COMPLETE */
         Q_S0180_MEAS_TYPE_RUNNING(ZQ_MEAS_TYPE, ZQ_ACT_IDX)
      THEN
        /* COPY FROM HISTORY FILE TO MEMORY IF THE JOB IS
         * ACTIVE.
         */

        Q_S0871_COPY_T180_HIS_TO_MEMORY(ZQ_MEAS_TYPE,
                                        ZQ_HISTORY_NAME,
                                        ZQ_HISTORY_NBR,
                                        ZQ_HF_REC_NBR);
      FI;

/* BEGIN : B12 VAMOS */
(E_MT_VAMOS):                        /* 37 */

/************ COPY TYPE 37 PART 1 ***************************/
      IF NOT Q_S0866_DELETE_INCOMPLETE(ZQ_MEAS_TYPE,
                                CM_FY32_HF_NBR_TYPE_370,
                                CM_FY32_HF_TYPE_0370,
                                ZQ_HF_REC_NBR) AND
         Q_S0180_MEAS_TYPE_RUNNING(ZQ_MEAS_TYPE, ZQ_ACT_IDX)
      THEN
        /* COPY FROM HISTORY FILE TO MEMORY IF THE JOB IS ACTIVE */
     
         Q_S0872_COPY_HIS_TO_MEM(CM_FY32_HF_NBR_TYPE_370,
				  CM_FY32_HF_TYPE_0370,
                                  ZQ_MEAS_TYPE);
      FI;

/************ COPY TYPE 37 PART 2 *****************************/
      IF NOT Q_S0866_DELETE_INCOMPLETE(ZQ_MEAS_TYPE,
                                CM_FY32_HF_NBR_TYPE_371,
                                CM_FY32_HF_TYPE_0371,
                                ZQ_HF_REC_NBR) AND
         Q_S0180_MEAS_TYPE_RUNNING(ZQ_MEAS_TYPE, ZQ_ACT_IDX)
      THEN
        /* COPY FROM HISTORY FILE TO MEMORY IF THE JOB IS ACTIVE */
		
        Q_S0872_COPY_HIS_TO_MEM(CM_FY32_HF_NBR_TYPE_371,
                                CM_FY32_HF_TYPE_0371,
                                ZQ_MEAS_TYPE);

      FI;
/* END : B12 VAMOS */
     (E_MT_CELL_TRX_OVERVIEW_COUNTERS):                        /* 110 */

/************ COPY TYPE 110 PART 1 ***************************/
      IF NOT Q_S0866_DELETE_INCOMPLETE(ZQ_MEAS_TYPE,
                                CM_FY32_HF_NBR_TYPE_1101,
                                CM_FY32_HF_TYPE_1101,
                                ZQ_HF_REC_NBR) AND
         Q_S0180_MEAS_TYPE_RUNNING(ZQ_MEAS_TYPE, ZQ_ACT_IDX)
      THEN
        /* COPY FROM HISTORY FILE TO MEMORY IF THE JOB IS
         * ACTIVE.
         */
      /* CR20/209493 START */  
      /* WORKAROUND FOR REDUCING CODE SIZE */
      /* Q_S0875_COPY_T110_1_HIS_TO_MEMORY();*/
         Q_S0875_COPY_T110_1_HIS_TO_MEMORY(CM_FY32_HF_NBR_TYPE_1101,
                                           ZQ_MEAS_TYPE);
      /* CR20/209493 */
      FI;

/************ COPY TYPE 110 PART 2 ***************************/
      IF NOT Q_S0866_DELETE_INCOMPLETE(ZQ_MEAS_TYPE,
                                CM_FY32_HF_NBR_TYPE_1102,
                                CM_FY32_HF_TYPE_1102,
                                ZQ_HF_REC_NBR) AND
         Q_S0180_MEAS_TYPE_RUNNING(ZQ_MEAS_TYPE, ZQ_ACT_IDX)
      THEN
        /* COPY FROM HISTORY FILE TO MEMORY IF THE JOB IS
         * ACTIVE.
         */
        Q_S0872_COPY_HIS_TO_MEM(CM_FY32_HF_NBR_TYPE_1102,
                                CM_FY32_HF_TYPE_1102,
                                ZQ_MEAS_TYPE);

      FI;
/************ COPY TYPE 110 PART 3 ***************************/
      IF NOT Q_S0866_DELETE_INCOMPLETE(ZQ_MEAS_TYPE,
                                CM_FY32_HF_NBR_TYPE_1103,
                                CM_FY32_HF_TYPE_1103,
                                ZQ_HF_REC_NBR) AND
         Q_S0180_MEAS_TYPE_RUNNING(ZQ_MEAS_TYPE, ZQ_ACT_IDX)
      THEN
        /* COPY FROM HISTORY FILE TO MEMORY IF THE JOB IS
         * ACTIVE.
         */
        Q_S0872_COPY_HIS_TO_MEM(CM_FY32_HF_NBR_TYPE_1103,
                                CM_FY32_HF_TYPE_1103,
                                ZQ_MEAS_TYPE);

      FI;

/************ COPY TYPE 110 PART 4 ***************************/
      IF NOT Q_S0866_DELETE_INCOMPLETE(ZQ_MEAS_TYPE,
                                CM_FY32_HF_NBR_TYPE_1104,
                                CM_FY32_HF_TYPE_1104,
                                ZQ_HF_REC_NBR) AND
         Q_S0180_MEAS_TYPE_RUNNING(ZQ_MEAS_TYPE, ZQ_ACT_IDX)
      THEN
        /* COPY FROM HISTORY FILE TO MEMORY IF THE JOB IS
         * ACTIVE.
         */
     /*START: MC Counters*/
     /*Q_S0872_COPY_HIS_TO_MEM(CM_FY32_HF_NBR_TYPE_1104,
                                CM_FY32_HF_TYPE_1104,
                                ZQ_MEAS_TYPE);*/
     Q_S0875_COPY_T110_1_HIS_TO_MEMORY(CM_FY32_HF_NBR_TYPE_1104,
                                            ZQ_MEAS_TYPE); 
     /*END: MC Counters*/                                

      FI;

/************ COPY TYPE 110 PART 5 ***************************/
      IF NOT Q_S0866_DELETE_INCOMPLETE(ZQ_MEAS_TYPE,
                                CM_FY32_HF_NBR_TYPE_1105,
                                CM_FY32_HF_TYPE_1105,
                                ZQ_HF_REC_NBR) AND
         Q_S0180_MEAS_TYPE_RUNNING(ZQ_MEAS_TYPE, ZQ_ACT_IDX)
      THEN
        /* COPY FROM HISTORY FILE TO MEMORY IF THE JOB IS
         * ACTIVE.
         */
        Q_S0872_COPY_HIS_TO_MEM(CM_FY32_HF_NBR_TYPE_1105,
                                CM_FY32_HF_TYPE_1105,
                                ZQ_MEAS_TYPE);

      FI;

/************ COPY TYPE 110 PART 6 ***************************/
      IF NOT Q_S0866_DELETE_INCOMPLETE(ZQ_MEAS_TYPE,
                                CM_FY32_HF_NBR_TYPE_1106,
                                CM_FY32_HF_TYPE_1106,
                                ZQ_HF_REC_NBR) AND
         Q_S0180_MEAS_TYPE_RUNNING(ZQ_MEAS_TYPE, ZQ_ACT_IDX)
      THEN
        /* COPY FROM HISTORY FILE TO MEMORY IF THE JOB IS
         * ACTIVE.
         */
        Q_S0872_COPY_HIS_TO_MEM(CM_FY32_HF_NBR_TYPE_1106,
                                CM_FY32_HF_TYPE_1106,
                                ZQ_MEAS_TYPE);

      FI;
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
/************ COPY TYPE 110 PART 7 ***************************/ 
      IF NOT Q_S0866_DELETE_INCOMPLETE(ZQ_MEAS_TYPE,
                                CM_FY32_HF_NBR_TYPE_1107,
                                CM_FY32_HF_TYPE_1107,
                                ZQ_HF_REC_NBR) AND
         Q_S0180_MEAS_TYPE_RUNNING(ZQ_MEAS_TYPE, ZQ_ACT_IDX)
      THEN
        /* COPY FROM HISTORY FILE TO MEMORY IF THE JOB IS
         * ACTIVE.
         */
        /* CR20/209493 START */ 
        /*Q_S0872_COPY_HIS_TO_MEM(CM_FY32_HF_NBR_TYPE_1107,
                                CM_FY32_HF_TYPE_1107,
                                ZQ_MEAS_TYPE);*/
       /* Q_S0875_COPY_T110_7_HIS_TO_MEMORY();*/                                
       /* WORKAROUND FOR REDUCING CODE SIZE */
          Q_S0875_COPY_T110_1_HIS_TO_MEMORY(CM_FY32_HF_NBR_TYPE_1107,
                                            ZQ_MEAS_TYPE); 
       /* CR20/209493 END */
      FI;
/************ COPY TYPE 110 PART 8 ***************************/
      IF NOT Q_S0866_DELETE_INCOMPLETE(ZQ_MEAS_TYPE,
                                CM_FY32_HF_NBR_TYPE_1108,
                                CM_FY32_HF_TYPE_1108,
                                ZQ_HF_REC_NBR) AND
         Q_S0180_MEAS_TYPE_RUNNING(ZQ_MEAS_TYPE, ZQ_ACT_IDX)
      THEN
        /* COPY FROM HISTORY FILE TO MEMORY IF THE JOB IS
         * ACTIVE.
         */
        Q_S0872_COPY_HIS_TO_MEM(CM_FY32_HF_NBR_TYPE_1108,
                                CM_FY32_HF_TYPE_1108,
                                ZQ_MEAS_TYPE);

      FI;      
/* END: ADD-WIPRO-B10-MR1-CHANGE */
/*ADDED FOR GSL COUNTERS MEMO*/
/************ COPY TYPE 110 PART 9 ***************************/
      IF NOT Q_S0866_DELETE_INCOMPLETE(ZQ_MEAS_TYPE,
                                CM_FY32_HF_NBR_TYPE_1109,
                                CM_FY32_HF_TYPE_1109,
                                ZQ_HF_REC_NBR) AND
         Q_S0180_MEAS_TYPE_RUNNING(ZQ_MEAS_TYPE, ZQ_ACT_IDX)
      THEN
        /* COPY FROM HISTORY FILE TO MEMORY IF THE JOB IS
         * ACTIVE.
         */
        Q_S0872_COPY_HIS_TO_MEM(CM_FY32_HF_NBR_TYPE_1109,
                                CM_FY32_HF_TYPE_1109,
                                ZQ_MEAS_TYPE);

      FI;      
/*ADDED FOR GSL COUNTERS MEMO*/
/*ADDED FOR A-FLEX NRI COUNTERS*/
/************ COPY TYPE 110 PART 10 ***************************/
      IF NOT Q_S0866_DELETE_INCOMPLETE(ZQ_MEAS_TYPE,
                                CM_FY32_HF_NBR_TYPE_1110,
                                CM_FY32_HF_TYPE_1110,
                                ZQ_HF_REC_NBR) AND
         Q_S0180_MEAS_TYPE_RUNNING(ZQ_MEAS_TYPE, ZQ_ACT_IDX)
      THEN
        /* COPY FROM HISTORY FILE TO MEMORY IF THE JOB IS
         * ACTIVE.
         */
        Q_S0872_COPY_HIS_TO_MEM(CM_FY32_HF_NBR_TYPE_1110,
                                CM_FY32_HF_TYPE_1110,
                                ZQ_MEAS_TYPE);

      FI;      
/*ADDED FOR A-FLEX NRI COUNTERS*/
/* START : AUPOIP FEATURE */ 
/************ COPY TYPE 110 PART 11 ***************************/
      IF NOT Q_S0866_DELETE_INCOMPLETE(ZQ_MEAS_TYPE,
                                CM_FY32_HF_NBR_TYPE_1111,
                                CM_FY32_HF_TYPE_1111,
                                ZQ_HF_REC_NBR) AND
         Q_S0180_MEAS_TYPE_RUNNING(ZQ_MEAS_TYPE, ZQ_ACT_IDX)
      THEN
        /* COPY FROM HISTORY FILE TO MEMORY IF THE JOB IS
         * ACTIVE.
         */
        Q_S0872_COPY_HIS_TO_MEM(CM_FY32_HF_NBR_TYPE_1111,
                                CM_FY32_HF_TYPE_1111,
                                ZQ_MEAS_TYPE);

      FI;      
/************ COPY TYPE 110 PART 12 ***************************/
      IF NOT Q_S0866_DELETE_INCOMPLETE(ZQ_MEAS_TYPE,
                                CM_FY32_HF_NBR_TYPE_1112,
                                CM_FY32_HF_TYPE_1112,
                                ZQ_HF_REC_NBR) AND
         Q_S0180_MEAS_TYPE_RUNNING(ZQ_MEAS_TYPE, ZQ_ACT_IDX)
      THEN
        /* COPY FROM HISTORY FILE TO MEMORY IF THE JOB IS
         * ACTIVE.
         */
        Q_S0872_COPY_HIS_TO_MEM(CM_FY32_HF_NBR_TYPE_1112,
                                CM_FY32_HF_TYPE_1112,
                                ZQ_MEAS_TYPE);

      FI;      
/* END : AUPOIP FEATURE */ 
/*BEGIN: CR20/313054 */
/************ COPY TYPE 110 PART 13 ***************************/
      IF NOT Q_S0866_DELETE_INCOMPLETE(ZQ_MEAS_TYPE,
                                CM_FY32_HF_NBR_TYPE_1113,
                                CM_FY32_HF_TYPE_1113,
                                ZQ_HF_REC_NBR) AND
         Q_S0180_MEAS_TYPE_RUNNING(ZQ_MEAS_TYPE, ZQ_ACT_IDX)
      THEN
        /* COPY FROM HISTORY FILE TO MEMORY IF THE JOB IS
         * ACTIVE.
         */
        Q_S0872_COPY_HIS_TO_MEM(CM_FY32_HF_NBR_TYPE_1113,
                                CM_FY32_HF_TYPE_1113,
                                ZQ_MEAS_TYPE);

      FI;      
/*END: CR20/313054 */

/*BEGIN: CR 605005 */
/************ COPY TYPE 110 PART 14 ***************************/
      IF NOT Q_S0866_DELETE_INCOMPLETE(ZQ_MEAS_TYPE,
                                CM_FY32_HF_NBR_TYPE_1114,
                                CM_FY32_HF_TYPE_1114,
                                ZQ_HF_REC_NBR) AND
         Q_S0180_MEAS_TYPE_RUNNING(ZQ_MEAS_TYPE, ZQ_ACT_IDX)
      THEN
        /* COPY FROM HISTORY FILE TO MEMORY IF THE JOB IS
         * ACTIVE.
         */
        Q_S0872_COPY_HIS_TO_MEM(CM_FY32_HF_NBR_TYPE_1114,
                                CM_FY32_HF_TYPE_1114,
                                ZQ_MEAS_TYPE);

      FI;      
/*END: CR 605005 */
      /*BEGIN : CR:745699*/
/************ COPY TYPE 110 PART 15 ***************************/
      IF NOT Q_S0866_OLC_DELETE_INCOMPLETE(ZQ_MEAS_TYPE,
                                CM_FY32_HF_NBR_TYPE_1115,
                                CM_FY32_HF_TYPE_1115,
                                ZQ_HF_REC_NBR) AND
         Q_S0180_MEAS_TYPE_RUNNING(ZQ_MEAS_TYPE, ZQ_ACT_IDX)
      THEN
        /* COPY FROM HISTORY FILE TO MEMORY IF THE JOB IS
         * ACTIVE.
         */
        /*Q_S0872_COPY_HIS_TO_MEM(CM_FY32_HF_NBR_TYPE_1115,
                                CM_FY32_HF_TYPE_1115,
                                ZQ_MEAS_TYPE);*/
       Q_S0875_OLC_COPY_T110_1_HIS_TO_MEMORY(CM_FY32_HF_NBR_TYPE_1115,
                                            ZQ_MEAS_TYPE);    

      FI; 
/*END: CR:745699 */
/*START CR MOCN */
      IF NOT Q_S0866_DELETE_INCOMPLETE(ZQ_MEAS_TYPE,
                                CM_FY32_HF_NBR_TYPE_1117,
                                CM_FY32_HF_TYPE_1117,
                                ZQ_HF_REC_NBR) AND
         Q_S0180_MEAS_TYPE_RUNNING(ZQ_MEAS_TYPE, ZQ_ACT_IDX)
      THEN
        /* COPY FROM HISTORY FILE TO MEMORY IF THE JOB IS
         * ACTIVE.
         */
        Q_S0872_COPY_HIS_TO_MEM(CM_FY32_HF_NBR_TYPE_1117,
                                CM_FY32_HF_TYPE_1117,
                                ZQ_MEAS_TYPE);

      FI; 
/*END CR MOCN */
/*begin CR1238146 A-GPS*/
      IF NOT Q_S0866_DELETE_INCOMPLETE(ZQ_MEAS_TYPE,
                                CM_FY32_HF_NBR_TYPE_1118,
                                CM_FY32_HF_TYPE_1118,
                                ZQ_HF_REC_NBR) AND
         Q_S0180_MEAS_TYPE_RUNNING(ZQ_MEAS_TYPE, ZQ_ACT_IDX)
      THEN
        /* COPY FROM HISTORY FILE TO MEMORY IF THE JOB IS
         * ACTIVE.
         */
        Q_S0872_COPY_HIS_TO_MEM(CM_FY32_HF_NBR_TYPE_1118,
                                CM_FY32_HF_TYPE_1118,
                                ZQ_MEAS_TYPE);

      FI; 
/*end CR1238146 A-GPS*/
   ELSE
   ESAC;
 OD;
END Q_S0870_INITIALISE_HISTORY;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0871_COPY_T180_HIS_TO_MEMORY                     */
/*                                                                    */
/*     PROGRAMMER: L DIERICK(KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 98/08/20                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       COPIES THE CONTENTS OF HISTORY TO MEMORY.                    */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_MEAS_TYPE M_MEAS_TYPE,                     */
/*                      ZF_HISTORY_NAME M_FILE_NAME,                  */
/*                      ZF_HISTORY_NBR INT,                           */
/*                      ZF_NBR_OF_RECS INT                            */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0796_INIT_BUFFER_ATTRIBUTES                */
/*                      Q_S0818_OPEN_HIST_FILE                        */
/*                      Q_S0755_GET_RECORD_SIZE                       */
/*                      Q_S0030_GET_USER_BUF                          */
/*                      Q_S0820_READ_HIST_FILE                        */
/*                      Q_S0790_GET_START_RECORD_OF_BUFF              */
/*                      Q_S0792_MARK_RECORDS_WRITTEN                  */
/*                      Q_S0100_COPY_BLOCK_OF_MEMORY                  */
/*                      Q_S0040_RET_MEM                               */
/*                      Q_S0812_CLOSE_HIS_FILE                        */
/*     CALLED FROM:                                                   */
/*                      Q_S0870_INITIALISE_HISTORY                    */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0871_COPY_T180_HIS_TO_MEMORY : PROC(ZF_MEAS_TYPE     M_MEAS_TYPE,
                                       ZF_HISTORY_NAME  M_FILE_NAME,
                                       ZF_HISTORY_NBR   INT,
                                       ZF_NBR_OF_RECS   INT);


DCL ZQ_HIS_BUF_SIZE INT,
    ZQ_HIS_BUF_RECS INT,
    ZQ_HIS_BUF_PTR  PTR,
    ZQ_ARR_IDX      INT,
    ZQ_CELL_IDX     INT,
    ZQ_REC_IDX      INT,
    ZQ_REC_NBR      INT,
    ZQ_MEM_PTR      PTR,
    ZQ_REC_BUF      ARRAY(0:ZS_MAX_REC_IN_BLOCK-1) ZM_HIS_TYPE_180;

ZQ_REC_NBR := 0;
IF ZF_NBR_OF_RECS = 0
THEN
  RETURN;
FI;

Q_S0796_INIT_BUFFER_ATTRIBUTES(ZF_MEAS_TYPE,
                               ZF_HISTORY_NBR);

IF Q_S0818_OPEN_HIST_FILE(ZF_HISTORY_NBR,
                          ZF_HISTORY_NAME,
                          Q_S0755_GET_RECORD_SIZE(ZF_MEAS_TYPE,
                                                  ZF_HISTORY_NBR),
                          E_READ_REQ
                             )
THEN
  IF ZF_NBR_OF_RECS < ZS_MAX_REC_IN_BLOCK
  THEN
    ZQ_HIS_BUF_RECS := ZF_NBR_OF_RECS;
  ELSE
    ZQ_HIS_BUF_RECS := ZS_MAX_REC_IN_BLOCK;
  FI;
  ZQ_HIS_BUF_SIZE := ZQ_HIS_BUF_RECS * SIZE(ZM_HIS_TYPE_180);

  Q_S0030_GET_USER_BUF(ZQ_HIS_BUF_PTR, ZQ_HIS_BUF_SIZE);
  ZQ_MEM_PTR := ->ZQ_REC_BUF(0);
  DO WHILE ZQ_REC_NBR < ZF_NBR_OF_RECS;
    IF Q_S0820_READ_HIST_FILE(Q_S0755_GET_RECORD_SIZE(ZF_MEAS_TYPE,
                                                      ZF_HISTORY_NBR),
                              ZQ_HIS_BUF_RECS,
                              Q_S0790_GET_START_RECORD_OF_BUFFER(),
                              ZQ_HIS_BUF_PTR)
    THEN
      /* WRITE PROCEDURE REUSED, BUT IS IS ACTUALLY RECORDS_READ */
      Q_S0792_MARK_RECORDS_WRITTEN(ZQ_HIS_BUF_RECS);
      DO FOR ZQ_REC_IDX := 1 TO SIZE(ZQ_REC_BUF);
        ZQ_MEM_PTR->ZM_BYTE_MASK(ZQ_REC_IDX) := H'FF;
      OD;
      Q_S0100_COPY_BLOCK_OF_MEMORY(ZQ_HIS_BUF_PTR,
                                   ->ZQ_REC_BUF,
                                   ZQ_HIS_BUF_SIZE);

      DO FOR ZQ_REC_IDX := 0 TO ZQ_HIS_BUF_RECS - 1;
        DO WITH ZQ_REC_BUF(ZQ_REC_IDX);
          IF B_CELL_IDX /= M_NULL_CELL_IDX
          THEN
            DO WITH Z_T180_1_PTR->;
              B_ACTIV_CELLS(B_CELL_IDX) := B_CELL_IDX;
              ZQ_CELL_IDX := B_CELL_IDX;
            OD;
          FI;
          DO FOR ZQ_ARR_IDX := 1 TO ZS_MAX_ARR_IDX WHILE
                                       ZQ_CELL_IDX /= -1;
            DO WITH B_CELL_DATA(ZQ_ARR_IDX);
              Z_T180_1_PTR->.B_NEXT(ZM_TRAFF_FLOW_LEN(ZQ_CELL_IDX))
                                     := ZB_CELL_NEXT;
              Z_T180_2_PTR->(ZM_TRAFF_FLOW_LEN(ZQ_CELL_IDX))
                                     := ZB_CTRS;
              ZQ_CELL_IDX := ZB_CELL_NEXT.B_NEXT_PAIR;
              IF Z_1ST_FREE <= ZQ_CELL_IDX
              THEN
                Z_1ST_FREE := ZQ_CELL_IDX+1;
              FI;
            OD;
          OD;
        OD;
      OD;
      ZQ_REC_NBR := ZQ_REC_NBR + ZQ_HIS_BUF_RECS;
    FI;
    IF ZQ_HIS_BUF_RECS > ZF_NBR_OF_RECS - ZQ_REC_NBR
    THEN
      ZQ_HIS_BUF_RECS := ZF_NBR_OF_RECS - ZQ_REC_NBR;
    FI;
  OD; /* ALL RECORDS ARE WRITTEN */

  Q_S0040_RET_MEM(ZQ_HIS_BUF_PTR);
  Q_S0812_CLOSE_HIS_FILE();
FI;

END Q_S0871_COPY_T180_HIS_TO_MEMORY;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0872_COPY_HIS_TO_MEM                             */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       COPIES THE CONTENTS OF HISTORY TO MEMORY.                    */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_HISTORY_NBR INT,                           */
/*                      ZF_HISTORY_NAME M_FILE_NAME LOC,              */
/*                      ZF_MEAS_TYPE M_MEAS_TYPE                      */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0796_INIT_BUFFER_ATTRIBUTES                */
/*                      Q_S0798_GET_START_MEM_PTR                     */
/*                      Q_S0818_OPEN_HIST_FILE                        */
/*                      Q_S0755_GET_RECORD_SIZE                       */
/*                      Q_S0794_ALL_RECORDS_WRITTEN                   */
/*                      Q_S0785_GET_WRITE_BUFFER_ATTRIBU              */
/*                      Q_S0030_GET_USER_BUF                          */
/*                      Q_S0820_READ_HIST_FILE                        */
/*                      Q_S0790_GET_START_RECORD_OF_BUFF              */
/*                      Q_S0100_COPY_BLOCK_OF_MEMORY                  */
/*                      Q_S0792_MARK_RECORDS_WRITTEN                  */
/*                      Q_S0110_UPDATE_MEM_PTR                        */
/*                      Q_S0090_ADD_OFFSET_TO_PTR                     */
/*                      Q_S0040_RET_MEM                               */
/*                      Q_S0812_CLOSE_HIS_FILE                        */
/*     CALLED FROM:                                                   */
/*                      Q_S0870_INITIALISE_HISTORY                    */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0872_COPY_HIS_TO_MEM: PROC(ZF_HISTORY_NBR   INT,
                              ZF_HISTORY_NAME  M_FILE_NAME LOC,
                              ZF_MEAS_TYPE     M_MEAS_TYPE);
/* PBLO: NOT USED                      RETURNS(BOOL); */


DCL ZQ_HIS_BUF_SIZE INT,
    ZQ_HIS_BUF_RECS INT,
    ZQ_HIS_BUF_PTR  PTR,
    ZQ_MEM_PTR      PTR,
    ZQ_SUCC         BOOL;

 ZQ_SUCC := FALSE;


/* INITIALISE A GLOBAL BUFFER CONTAINING ATTRIBUTES FOR THE
 * RECORDS THAT MUST BE WRITTEN TO HISTROY FILE.
 */
Q_S0796_INIT_BUFFER_ATTRIBUTES(ZF_MEAS_TYPE,
                               ZF_HISTORY_NBR);

/* GET THE POINTER TO THE MEMORY BLOCK THAT MUST BE OVERWRITTEN */
ZQ_MEM_PTR:=Q_S0798_GET_START_MEM_PTR(ZF_MEAS_TYPE,
                                      ZF_HISTORY_NBR);

IF Q_S0818_OPEN_HIST_FILE(ZF_HISTORY_NBR,
                          ZF_HISTORY_NAME,
                          Q_S0755_GET_RECORD_SIZE(ZF_MEAS_TYPE,
                                                  ZF_HISTORY_NBR),
                          E_READ_REQ
                             )
THEN
  /* DO WHILST ALL RECORDS NOT WRITTEN TO MEMORY */
  DO WHILE NOT Q_S0794_ALL_RECORDS_WRITTEN();
    Q_S0785_GET_WRITE_BUFFER_ATTRIBUTES(ZF_MEAS_TYPE,
                                        ZQ_HIS_BUF_RECS,
                                        ZQ_HIS_BUF_SIZE);

    Q_S0030_GET_USER_BUF(ZQ_HIS_BUF_PTR, ZQ_HIS_BUF_SIZE);

    IF Q_S0820_READ_HIST_FILE(Q_S0755_GET_RECORD_SIZE(ZF_MEAS_TYPE,
                                                      ZF_HISTORY_NBR),
                              ZQ_HIS_BUF_RECS,
                              Q_S0790_GET_START_RECORD_OF_BUFFER(),
                              ZQ_HIS_BUF_PTR)
    THEN
      Q_S0100_COPY_BLOCK_OF_MEMORY(ZQ_HIS_BUF_PTR,
                                   ZQ_MEM_PTR,
                                   ZQ_HIS_BUF_SIZE);

      Q_S0792_MARK_RECORDS_WRITTEN(ZQ_HIS_BUF_RECS);

      /* INCREMENT THE MEMORY POINTER TO THE NEXT PART OF THE HISTORY
       * STRUCTURE IN MEMORY.
       */
      IF ZF_MEAS_TYPE = E_MT_RESOURCE_USAGE_RTCH
      THEN
        Q_S0110_UPDATE_MEM_PTR(ZQ_MEM_PTR, ZQ_HIS_BUF_SIZE,
                               PTR(Z_T5_PTR), PTR(Z_T5_2_PTR));
      ELSIF ZF_MEAS_TYPE = E_MT_HANDOVER_PER_SERVINGCELL
      THEN
        Q_S0110_UPDATE_MEM_PTR(ZQ_MEM_PTR, ZQ_HIS_BUF_SIZE,
                               PTR(Z_T26_PTR), PTR(Z_T26_2_PTR));
      ELSE
        Q_S0090_ADD_OFFSET_TO_PTR(ZQ_MEM_PTR, ZQ_HIS_BUF_SIZE);
      FI;

      /* ALL RECORDS SUCCESSFULLY READ */
      ZQ_SUCC:=TRUE;
    FI;

    Q_S0040_RET_MEM(ZQ_HIS_BUF_PTR);
  OD; /* ALL RECORDS ARE WRITTEN */
  Q_S0812_CLOSE_HIS_FILE();
FI;

/* RETURN ZQ_SUCC; */

END Q_S0872_COPY_HIS_TO_MEM;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0875_COPY_T110_1_HIS_TO_MEMORY                   */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                 SRINIVAS                            07/07/06       */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       COPIES THE CONTENTS OF TYPE 110 PART 1 HISTORY TO MEMORY.    */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0796_INIT_BUFFER_ATTRIBUTES                */
/*                      Q_S0818_OPEN_HIST_FILE                        */
/*                      Q_S0755_GET_RECORD_SIZE                       */
/*                      Q_S0794_ALL_RECORDS_WRITTEN                   */
/*                      Q_S0110_UPDATE_MEM_PTR                        */
/*                      Q_S0786_GET_T110_1_WRITE_BUF_ATT              */
/*                      Q_S0030_GET_USER_BUF                          */
/*                      Q_S0820_READ_HIST_FILE                        */
/*                      Q_S0790_GET_START_RECORD_OF_BUFF              */
/*                      Q_S0100_COPY_BLOCK_OF_MEMORY                  */
/*                      Q_S0792_MARK_RECORDS_WRITTEN                  */
/*                      Q_S0040_RET_MEM                               */
/*                      Q_S0812_CLOSE_HIS_FILE                        */
/*     CALLED FROM:                                                   */
/*                      Q_S0870_INITIALISE_HISTORY                    */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0875_COPY_T110_1_HIS_TO_MEMORY:PROC(ZF_HISTORY_NBR  INT,
                                       ZF_MEAS_TYPE  M_MEAS_TYPE);
/* PBLO: NOT USED                         RETURNS(BOOL); */


DCL ZQ_HIS_BUF_SIZE INT,
    ZQ_HIS_BUF_RECS INT,
    ZQ_HIS_BUF_PTR  PTR,
    ZQ_MEM_PTR      PTR,
    ZQ_SUCC         BOOL;

/* THESE ARE DECLARED LOCALLY AS THE NAMES ARE TOO LONG TO BE
 * WRITING THEM AGAIN AND THE SIMILARITIES WITH S0872 ARE CLEARER
 */
DCL ZQ_HISTORY_NBR   INT,
    ZQ_HISTORY_NAME  M_FILE_NAME,
    ZQ_MEAS_TYPE     M_MEAS_TYPE;
 
/* CR20/209493 */
 ZQ_HISTORY_NBR:= ZF_HISTORY_NBR;
 IF (ZQ_HISTORY_NBR = CM_FY32_HF_NBR_TYPE_1101)
 THEN 
   ZQ_HISTORY_NAME:=CM_FY32_HF_TYPE_1101;
 /*START: MC Counters*/ 
 ELSIF (ZQ_HISTORY_NBR = CM_FY32_HF_NBR_TYPE_1104)
  THEN
    ZQ_HISTORY_NAME :=CM_FY32_HF_TYPE_1104; 
 /*END: MC Counters*/
/* BEGIN CR:745699 */
/*ELSIF (ZQ_HISTORY_NBR = CM_FY32_HF_NBR_TYPE_1115)
  THEN
    ZQ_HISTORY_NAME := CM_FY32_HF_TYPE_1115 ; 
/! END CR:745699 */ 
 ELSE
   ZQ_HISTORY_NAME:=CM_FY32_HF_TYPE_1107;
 FI; 
 ZQ_MEAS_TYPE:= ZF_MEAS_TYPE;
 ZQ_SUCC := FALSE;
/* CR20/209493 */

/* INITIALISE A GLOBAL BUFFER CONTAINING ATTRIBUTES FOR THE
 * RECORDS THAT MUST BE WRITTEN TO HISTROY FILE.
 */
Q_S0796_INIT_BUFFER_ATTRIBUTES(ZQ_MEAS_TYPE,
                               ZQ_HISTORY_NBR);


IF Q_S0818_OPEN_HIST_FILE(ZQ_HISTORY_NBR,
                          ZQ_HISTORY_NAME,
                          Q_S0755_GET_RECORD_SIZE(ZQ_MEAS_TYPE,
                                                  ZQ_HISTORY_NBR),
                          E_READ_REQ
                             )
THEN
  ZQ_MEM_PTR:=NULL;
  ZQ_HIS_BUF_SIZE:=0;

  /* DO WHILST ALL RECORDS NOT WRITTEN TO MEMORY */
  DO WHILE NOT Q_S0794_ALL_RECORDS_WRITTEN();
    /* INCREMENT THE MEMORY POINTER TO THE NEXT PART OF THE HISTORY
     * STRUCTURE IN MEMORY.
     */
/* CR20/209493 */
/* WORKAROUND ADDED FOR REDUCING CODE SIZE */
/* INSTEAD OF DEFINING A SPECIFIC PROCEDURE FOR SPLIT BLOCKS */
/* FOR 110 HIS NO 1, 4 AND 7 USE THIS PROCEDURE ITSELF      */
  IF (ZQ_HISTORY_NBR = CM_FY32_HF_NBR_TYPE_1101)
  THEN
    Q_S0110_UPDATE_MEM_PTR(ZQ_MEM_PTR, ZQ_HIS_BUF_SIZE,
                         PTR(Z_T110_1_PTR), PTR(Z_T110_1_2_PTR));

  ELSIF (ZQ_HISTORY_NBR = CM_FY32_HF_NBR_TYPE_1107)
  THEN  
    Q_S0110_UPDATE_MEM_PTR(ZQ_MEM_PTR, ZQ_HIS_BUF_SIZE,
                         PTR(Z_T110_7_PTR), PTR(Z_T110_7_2_PTR));
  /*START: MC Counters*/
  ELSIF (ZQ_HISTORY_NBR = CM_FY32_HF_NBR_TYPE_1104)
  THEN  
    Q_S0110_UPDATE_MEM_PTR(ZQ_MEM_PTR, ZQ_HIS_BUF_SIZE,
                         PTR(Z_T110_4_PTR), PTR(Z_T110_4_2_PTR));
  /*END: MC Counters*/
  /* BEGIN : CR:745699 */
  /*ELSIF (ZQ_HISTORY_NBR = CM_FY32_HF_NBR_TYPE_1115)
  THEN
    Q_S0110_UPDATE_MEM_PTR(ZQ_MEM_PTR, ZQ_HIS_BUF_SIZE,
                         PTR(Z_T110_15_1_PTR), PTR(Z_T110_15_2_PTR));
  /! END : CR 745699 */
  FI;
/* CR20/209493 */

    Q_S0786_GET_T110_1_WRITE_BUF_ATTRIBUTES(ZQ_HIS_BUF_RECS,
                                            ZQ_HIS_BUF_SIZE);

    Q_S0030_GET_USER_BUF(ZQ_HIS_BUF_PTR, ZQ_HIS_BUF_SIZE);

    IF Q_S0820_READ_HIST_FILE(Q_S0755_GET_RECORD_SIZE(ZQ_MEAS_TYPE,
                                                      ZQ_HISTORY_NBR),
                              ZQ_HIS_BUF_RECS,
                              Q_S0790_GET_START_RECORD_OF_BUFFER(),
                              ZQ_HIS_BUF_PTR)
    THEN
      Q_S0100_COPY_BLOCK_OF_MEMORY(ZQ_HIS_BUF_PTR,
                                   ZQ_MEM_PTR,
                                   ZQ_HIS_BUF_SIZE);

      Q_S0792_MARK_RECORDS_WRITTEN(ZQ_HIS_BUF_RECS);

      /* ALL RECORDS SUCCESSFULLY READ */
      ZQ_SUCC:=TRUE;
    FI;

    Q_S0040_RET_MEM(ZQ_HIS_BUF_PTR);
  OD; /* ALL RECORDS ARE WRITTEN */

  Q_S0812_CLOSE_HIS_FILE();
FI;

/* RETURN ZQ_SUCC; */

END Q_S0875_COPY_T110_1_HIS_TO_MEMORY;
/**********************************************************************/
Q_S0875_OLC_COPY_T110_1_HIS_TO_MEMORY:PROC(ZF_HISTORY_NBR  INT,
                                       ZF_MEAS_TYPE  M_MEAS_TYPE);
/* PBLO: NOT USED                         RETURNS(BOOL); */


DCL ZQ_HIS_BUF_SIZE INT,
    ZQ_HIS_BUF_RECS INT,
    ZQ_HIS_BUF_PTR  PTR,
    ZQ_MEM_PTR      PTR,
    ZQ_SUCC         BOOL;

/* THESE ARE DECLARED LOCALLY AS THE NAMES ARE TOO LONG TO BE
 * WRITING THEM AGAIN AND THE SIMILARITIES WITH S0872 ARE CLEARER
 */
DCL ZQ_HISTORY_NBR   INT,
    ZQ_HISTORY_NAME  M_FILE_NAME,
    ZQ_MEAS_TYPE     M_MEAS_TYPE;
 
/* CR20/209493 */
 ZQ_HISTORY_NBR:= ZF_HISTORY_NBR;
 
IF (ZQ_HISTORY_NBR = CM_FY32_HF_NBR_TYPE_1115)
THEN
    ZQ_HISTORY_NAME := CM_FY32_HF_TYPE_1115 ; 
FI; 
 ZQ_MEAS_TYPE:= ZF_MEAS_TYPE;
 ZQ_SUCC := FALSE;
/* CR20/209493 */

/* INITIALISE A GLOBAL BUFFER CONTAINING ATTRIBUTES FOR THE
 * RECORDS THAT MUST BE WRITTEN TO HISTROY FILE.
 */
Q_S0796_OLC_INIT_BUFFER_ATTRIBUTES(ZQ_MEAS_TYPE,
                               ZQ_HISTORY_NBR);


IF Q_S0818_OPEN_HIST_FILE(ZQ_HISTORY_NBR,
                          ZQ_HISTORY_NAME,
                          Q_S0755_GET_RECORD_SIZE(ZQ_MEAS_TYPE,
                                                  ZQ_HISTORY_NBR),
                          E_READ_REQ
                             )
THEN
  ZQ_MEM_PTR:=NULL;
  ZQ_HIS_BUF_SIZE:=0;

  /* DO WHILST ALL RECORDS NOT WRITTEN TO MEMORY */
  DO WHILE NOT Q_S0794_OLC_ALL_RECORDS_WRITTEN();
    /* INCREMENT THE MEMORY POINTER TO THE NEXT PART OF THE HISTORY
     * STRUCTURE IN MEMORY.
     */
/* CR20/209493 */
/* WORKAROUND ADDED FOR REDUCING CODE SIZE */
/* INSTEAD OF DEFINING A SPECIFIC PROCEDURE FOR SPLIT BLOCKS */
/* FOR 110 HIS NO 1, 4 AND 7 USE THIS PROCEDURE ITSELF      */
 
 IF (ZQ_HISTORY_NBR = CM_FY32_HF_NBR_TYPE_1115)
  THEN
    Q_S0110_OLC_UPDATE_MEM_PTR(ZQ_MEM_PTR, ZQ_HIS_BUF_SIZE,
                         PTR(Z_T110_15_1_PTR), PTR(Z_T110_15_2_PTR));
  /* END : CR 745699 */
 FI;
/* CR20/209493 */

    Q_S0786_OLC_GET_T110_1_WRITE_BUF_ATTRIBUTES(ZQ_HIS_BUF_RECS,
                                            ZQ_HIS_BUF_SIZE);

    Q_S0030_GET_USER_BUF(ZQ_HIS_BUF_PTR, ZQ_HIS_BUF_SIZE);

    IF Q_S0820_READ_HIST_FILE(Q_S0755_GET_RECORD_SIZE(ZQ_MEAS_TYPE,
                                                      ZQ_HISTORY_NBR),
                              ZQ_HIS_BUF_RECS,
                              Q_S0790_OLC_GET_START_RECORD_OF_BUFFER(),
                              ZQ_HIS_BUF_PTR)
    THEN
      Q_S0100_COPY_BLOCK_OF_MEMORY(ZQ_HIS_BUF_PTR,
                                   ZQ_MEM_PTR,
                                   ZQ_HIS_BUF_SIZE);
      Q_S0792_OLC_MARK_RECORDS_WRITTEN(ZQ_HIS_BUF_RECS);

      /* ALL RECORDS SUCCESSFULLY READ */
      ZQ_SUCC:=TRUE;
    FI;

    Q_S0040_RET_MEM(ZQ_HIS_BUF_PTR);
  OD; /* ALL RECORDS ARE WRITTEN */

  Q_S0812_CLOSE_HIS_FILE();
FI;

/* RETURN ZQ_SUCC; */

END Q_S0875_OLC_COPY_T110_1_HIS_TO_MEMORY;


/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0890_SYN_FILE                                    */
/*                                                                    */
/*     PROGRAMMER: CHEN ZHANGYI                                       */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 05/04/08                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*      SYNCHRONIZE RESULT FILE ON DISK C AND D                       */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                      NONE                                          */
/*     PARAMETERS:                                                    */
/*                      ZF_FILE_NAME M_FILE_NAME                      */
/*                      ZF_FILE_PCS  M_FILE_PCS                       */
/*                      ZF_DRIVE_NO  M_DRIVE_NO                       */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58XV_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S                                           */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0890_SYN_FILE : PROC(ZF_FILE_NAME M_FILE_NAME,
                        ZF_FILE_PCS  M_FILE_PCS,
                        ZF_DRIVE_NO  M_DRIVE_NO)
                   RETURNS (M_RESULT);

DCL ZQ_FULL_FILE_NAME ZM_FULL_FILE_NAME;
DCL ZQ_RESULT M_RESULT;
/* START : WIPRO FR226053 */
DCL ZQ_CURR_LCE_ID M_LCE_ID;
DCL ZQ_MATE M_LCE_ID;
DCL ZQ_CPL_IDX M_CP_LOG_INDEX;
/* END : WIPRO FR226053 */


ZF_FILE_PCS := ZF_FILE_PCS - ZS_BASE_PCS;

IF ZF_FILE_PCS > 0 AND ZF_FILE_PCS < 100
THEN
  DO WITH ZQ_FULL_FILE_NAME;
    ZB_FILE_NAME := ZF_FILE_NAME;
    ZB_EXT_FILE_NAME := ZS_NULL_EXT_FILE_NAME;
    IF ZF_FILE_PCS < 10
    THEN 
      ZB_EXT_FILE_NAME(3) := CHAR(ZF_FILE_PCS + 48);
    ELSE
      ZB_EXT_FILE_NAME(2) := CHAR(ZF_FILE_PCS / 10 + 48);
      ZB_EXT_FILE_NAME(3) := CHAR(ZF_FILE_PCS MOD 10 + 48);
    FI;
    #ifdef MXELITE
    ZQ_RESULT := E_SUCC;
    GET R_CP_LOG;/* for MT compilation*/
    #else
/* START : WIPRO FR226053 */
    ZQ_CURR_LCE_ID := Z_OWN_PID.B_PID_PROCESS_ID.B_PID_LCE;

    Q_S0120_GET_R_CONF_CE(ZQ_CURR_LCE_ID);
    ZQ_MATE := R_CONF_CE.D_MATE_LCE;

    IF ZQ_MATE /= M_LCE_ID_NULL
    THEN
     Q_S0120_GET_R_CONF_CE(ZQ_MATE);
     ZQ_CPL_IDX := R_CONF_CE.D_CPL_IDX;

     GET R_CP_LOG WHERE (D_CPL_IDX = ZQ_CPL_IDX);
     IF R_CP_LOG.D_CPL_STAT = E_MS_IT
     THEN

      P_MXFSXV_S1007_FILE_SYN(ZQ_FULL_FILE_NAME.ZB_FULL_FILE_NAME,
                            ZF_DRIVE_NO,
                            TRUE,
                            ZQ_RESULT);
     ELSE
      ZQ_RESULT := E_UNSUCC;
     FI;
    ELSE
      ZQ_RESULT := E_UNSUCC;
    FI;
/* END : WIPRO FR226053 */
    #endif
  OD;
ELSE
  ZQ_RESULT := E_UNSUCC;
FI;

RETURN(ZQ_RESULT);

END Q_S0890_SYN_FILE;

/*******************************/
/* Q_S09XX - START-UP/RECOVERY */
/*******************************/
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0900_PERFORM_SYSTEM_START_UP                     */
/*                                                                    */
/*     PROGRAMMER: J.P. QUINN                                         */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 09/11/97                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                 THIS PROCEDURE PERFORMS THE INITIALISATIONS        */
/*                 REQUIRED FOR A RELOAD OR REBOOT. IT IS ENTERED     */
/*                 WHEN THE FMM IS BEING INITIALISED AS ACTIVE        */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_RESTART_FLAG                               */
/*     ZF_RESTART_FLAG INDICATES IF RESTART HAPPEN                    */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0810_INIT_FCB                              */
/*                      Q_S0220_GET_STATIC_MEM                        */
/*                      Q_S0870_INITIALISE_HISTORY                    */
/*                      Q_S0620_INIT_POLLING_PROCESSES                */
/*     CALLED FROM:                                                   */
/*                      Q_S1000_CCDC_FSM                              */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0900_PERFORM_SYSTEM_START_UP: PROC( ZF_RESTART_FLAG BOOL);

DCL ZQ_I  INT;

 Z_MSG_BUF_PTR         := NULL;

 Q_S0810_INIT_FCB(->Z_HIS_FCB);

/* GET STATIC MEMORY WHERE IT HAS NOT BEEN GOT! */
Q_S0220_GET_STATIC_MEM(ZF_RESTART_FLAG);

/** READ HF INTO CCI MEM **/
Q_S0870_INITIALISE_HISTORY();

/* INITIALISE THE POLLING STATE */
Q_S0620_INIT_POLLING_PROCESSES();

P_GDXBYX_INIT_SSM(->Z_DS_PTR_ARR);
P_GDXBYX_CELL_LIST();

DO WITH Z_PHHR;
  DO FOR ZQ_I := 1 TO ZS_MAX_REC_SIZE;
    ZB_RAW(ZQ_I) := H'FF;
  OD;
OD;

END Q_S0900_PERFORM_SYSTEM_START_UP;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0910_START_STOP_JOB                              */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       STARTS OR STOPS A MEASUREMENT JOB BY RESETING THE CONTENTS   */
/*       OF MEMORY AND UPDATING R_PM_FILES.                           */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_MEAS_TYPE M_MEAS_TYPE,                     */
/*                      ZF_START_JOB BOOL,                            */
/*                      ZF_MECO_PROC_ID M_PROCESS_ID                  */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      1081_PM_CC_ACT_CNF                            */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0860_RESET_CCI_DS                          */
/*                      Q_S0140_MOD_R_PM_FILES                        */
/*     CALLED FROM:                                                   */
/*                      Q_S1000_CCDC_FSM                              */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0910_START_STOP_JOB: PROC(ZF_MEAS_TYPE    M_MEAS_TYPE,
                             ZF_START_JOB    BOOL,
                             ZF_MECO_PROC_ID M_PROCESS_ID);

DCL ZQ_JOB_STATUS M_JOB_PM_ERR;
IF ZF_START_JOB
THEN
  /* THIS IS THE START OF THE JOB.
   * INITIALISE DS MEMORY AREA FOR
   * THIS MEASURMENT TYPE
   */
  IF Q_S0860_RESET_CCI_DS(ZF_MEAS_TYPE)
  THEN
    IF Q_S0140_MOD_R_PM_FILES(ZF_MEAS_TYPE,
                           E_PM_HIS_TO_BE_UPD) THEN
      /* JOB SUCCESSFULLY STARTED */
      ZQ_JOB_STATUS:=E_SUCC_MEAS_START;
    ELSE
      ZQ_JOB_STATUS:=E_FAIL_MEAS_START;
    FI;
  ELSE
    /* FAILED TO START */
    /*WIPRO BEGIN:FR20/201332 GLOBAL STOP*/
    Q_S0170_MOD_R_PM_ACT(ZF_MEAS_TYPE, FALSE);
    /*WIPRO END:FR20/201332 GLOBAL STOP*/
    ZQ_JOB_STATUS:=E_FAIL_MEAS_START;
    /*WIPRO BEGIN: FR241193 GLOBAL STOP RT TRACE */
   TRACEINFO := 'GLOBAL STOP FAIL MEAS START (%d)';
   TRC_BSC_PM3(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCDC),
              TRACEID(NORM),
              TRACEINFO,
              LONG_INT((ZQ_JOB_STATUS)),
              LONG_INT((0)),
              LONG_INT((0)));
   /*WIPRO END: FR241193 GLOBAL STOP RT TRACE */
  FI;
ELSE
  /* STOP JOB */
  IF Q_S0140_MOD_R_PM_FILES(ZF_MEAS_TYPE,
                            E_PM_HIS_NOT_TO_BE_UPD)
  THEN
    /* JOB SUCCESSFULLY STOPPED */
    ZQ_JOB_STATUS:=E_SUCC_MEAS_STOP;
  ELSE
    /* JOB FAILED TO STOP! */
    ZQ_JOB_STATUS:=E_FAIL_MEAS_STOP;
  FI; /* Q_S0108_ */
FI; /* ZQ_MP_START */

TRANSMIT_DIRECTED_MSG
         1081_PM_CC_ACT_CNF(ZQ_JOB_STATUS)
 TO (ZF_MECO_PROC_ID);

END Q_S0910_START_STOP_JOB;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0920_UPDATE_POLL_REQS                            */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       INCREMENTS NBR_POLL_REQTS BY ONE RESETING IF OVERFLOW        */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      NONE                                          */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0920_UPDATE_POLL_REQS: PROC();

IF Q_S0950_ADD_ONE_TO_DPVAL(Z_POLLING_INFO(ZE_NBR_POLL_REQTS))
   THEN
   /* COUNTERS FULL, RESET */

   Q_S0940_RESET_POLL_REPLIES();
FI;

END Q_S0920_UPDATE_POLL_REQS;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0930_UPDATE_POLL_REPLIES                         */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       INCREMENTS NBR_POLL_REQTS BY ONE RESETING IF OVERFLOW        */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      NONE                                          */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0930_UPDATE_POLL_REPLIES: PROC(ZF_NBR_RETRIES INT);

IF Z_POLLING_INFO(ZE_NBR_POLL_REQTS).B_LOW /= 0 OR
   Z_POLLING_INFO(ZE_NBR_POLL_REQTS).B_HIGH /= 0
  THEN
  CASE (ZF_NBR_RETRIES) OF
    (1):
     IF Q_S0950_ADD_ONE_TO_DPVAL(Z_POLLING_INFO(ZE_NBR_1ST_REPLIES))
       THEN
       Q_S0940_RESET_POLL_REPLIES();
     FI;
    (2):
     IF Q_S0950_ADD_ONE_TO_DPVAL(Z_POLLING_INFO(ZE_NBR_2ND_REPLIES))
       THEN
       Q_S0940_RESET_POLL_REPLIES();
     FI;
    (3):
     IF Q_S0950_ADD_ONE_TO_DPVAL(Z_POLLING_INFO(ZE_NBR_3RD_REPLIES))
       THEN
       Q_S0940_RESET_POLL_REPLIES();
     FI;

    ELSE
  ESAC;
FI;

END Q_S0930_UPDATE_POLL_REPLIES;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0940_RESET_POLL_REPLIES                          */
/*                                                                    */
/*     PROGRAMMER: AH SWANN                                           */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 01/10/26                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       RESETS POLLING COUNTERS                                      */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      NONE                                          */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0940_RESET_POLL_REPLIES: PROC();

DCL ZQ_POLL_CNTR  ZM_POLLING_INFO_SET;

DO FOR ZQ_POLL_CNTR IN ZM_POLLING_INFO_SET;
  DO WITH Z_POLLING_INFO(ZQ_POLL_CNTR);
    B_LOW  := 0;
    B_HIGH := 0;
  OD;
OD;

END Q_S0940_RESET_POLL_REPLIES;
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0950_ADD_ONE_TO_DPVAL                            */
/*                                                                    */
/*     PROGRAMMER: A.H.SWANN    (ADC)                                 */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 01/10/17                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*  ADDS AN INTEGER TO A 2 INTEGER LONG COUNTER. NOTE THAT NOW THAT   */
/*  IF AN OVERFLOW IS DETECTED THE OF VALUE IS WRITTEN TO THE LOC.    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZQ_INT INT,                                   */
/*                      ZQ_LINT M_STA_DPVAL LOC                       */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                                                                    */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      NONE                                          */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0950_ADD_ONE_TO_DPVAL: PROC(ZQ_LINT  M_STA_DPVAL LOC)
                           RETURNS (BOOL);

DCL ZQ_OVERFLOW BOOL;

ZQ_OVERFLOW := FALSE;

IF ZQ_LINT.B_LOW + 1 < 0
  THEN
  ZQ_LINT.B_HIGH := ZQ_LINT.B_HIGH + 1;
  IF ZQ_LINT.B_HIGH < 0
    THEN
    ZQ_OVERFLOW := TRUE;
  ELSE
    ZQ_LINT.B_LOW := 0;
  FI;
ELSE
  ZQ_LINT.B_LOW := ZQ_LINT.B_LOW + 1;
FI;

RETURN (ZQ_OVERFLOW);

END Q_S0950_ADD_ONE_TO_DPVAL;
/******************************************************************/
/* FR 176777 DEBUG */
Q_DEBUG_ELS_INIT_PROC: PROC();
/*Commented for FR 20/192118*/ 
/*DO WITH Z_DEBUG_VAR;

   ZB_TIMER_EXPIRY_RETRY3_TCU.B_HIGH      := 0;
   ZB_TIMER_EXPIRY_RETRY3_TCU.B_LOW      := 0;
   ZB_WRONG_SEQ_NUM_TCU.B_HIGH            := 0;
   ZB_WRONG_SEQ_NUM_TCU.B_LOW            := 0;
   ZB_TIMER_EXPIRY_RETRY3_TCHRM.B_HIGH    := 0;
   ZB_TIMER_EXPIRY_RETRY3_TCHRM.B_LOW    := 0;
   ZB_WRONG_SEQ_NUM_TCHRM.B_HIGH          := 0;
   ZB_WRONG_SEQ_NUM_TCHRM.B_LOW          := 0;
   ZB_TIMER_EXPIRY_RETRY3_DTC.B_HIGH      := 0;
   ZB_TIMER_EXPIRY_RETRY3_DTC.B_LOW      := 0;
   ZB_WRONG_SEQ_NUM_DTC.B_HIGH            := 0;
   ZB_WRONG_SEQ_NUM_DTC.B_LOW            := 0;
   ZB_COUNT_RESTART.B_HIGH                := 0;
   ZB_COUNT_RESTART.B_LOW               := 0;
   ZB_COUNT_RESET.B_HIGH                  := 0;
   ZB_COUNT_RESET.B_LOW                  := 0;
   ZB_DTC_RCD_FRM_194.B_HIGH          := 0;
   ZB_DTC_RCD_FRM_194.B_LOW          := 0;
   ZB_TCU_RCD_FRM_194.B_HIGH          := 0;
   ZB_TCU_RCD_FRM_194.B_LOW          := 0;
   ZB_TCHRM_RCD_FRM_194.B_HIGH        := 0;
   ZB_TCHRM_RCD_FRM_194.B_LOW        := 0;*/
   /*added by */
   /*ZB_DTC_SEQ_NBR_LESS.B_HIGH        := 0;
   ZB_DTC_SEQ_NBR_LESS.B_LOW        := 0;
   ZB_DTC_SEQ_NBR_HIGH.B_HIGH        := 0;
   ZB_DTC_SEQ_NBR_HIGH.B_LOW        := 0;*/
   /*added by */
/*OD;*/
/*Commented for FR 20/192118*/ 
/*Added for FR 20/192118*/ 
DCL ZQ_I     ZM_INVALIDITY_DEBUG_CTRS;
DO FOR ZQ_I := E_TIMER_EXPIRY_RETRY3_TCU TO                            
                   E_COUNT_RESET;
      Z_DEBUG_VAR(ZQ_I).B_LOW  := 0;                                           
      Z_DEBUG_VAR(ZQ_I).B_HIGH := 0;     
OD;   
END Q_DEBUG_ELS_INIT_PROC;

/*START: FR36/296461*/
Q_S0101_INIT_RELATION_DUMP: PROC();

DCL ZQ_PTR STRUCT (
   CASE OF
   : ZB_OFFS, ZB_SEGM INT,
   : ZB_PTR PTR
   ESAC);

GET R_F_ACCESS WHERE (D_FAST_IDX = INT(M_RID_R_PM_ACT));

IF DB_PARMS.B_DB_STATUS = M_DB_SUCCESS
  THEN
    LONG_INT(Z_R_PM_ACT_PTR.ZB_PTR) :=
                 LONG_INT((R_F_ACCESS.D_ABS_BASE));
FI;

GET R_F_ACCESS WHERE (D_FAST_IDX = INT(M_RID_R_PM_SC_G2));

IF DB_PARMS.B_DB_STATUS = M_DB_SUCCESS
  THEN
    LONG_INT(Z_R_PM_SC_G2_PTR.ZB_PTR) :=
                 LONG_INT((R_F_ACCESS.D_ABS_BASE));
FI;
/*AM START:CR650353*/

GET R_F_ACCESS WHERE (D_FAST_IDX = INT(M_RID_R_SCCP_CNF));

IF DB_PARMS.B_DB_STATUS = M_DB_SUCCESS
  THEN
    LONG_INT(Z_R_SCCP_CNF_PTR.ZB_PTR) :=
                 LONG_INT((R_F_ACCESS.D_ABS_BASE));
FI;

/*AM END:CR650353*/
/*START : DCTPD00914281 : DTC513 overload alarm*/
GET R_F_ACCESS WHERE (D_FAST_IDX = M_SBLTYPE(M_RID_R_RSL_LNK));

LONG_INT(ZQ_PTR.ZB_PTR) := LONG_INT(R_F_ACCESS.D_ABS_BASE);
Z_FA_RSL_LNK.ZB_TUPLE_PTR := ZQ_PTR.ZB_PTR;
Z_FA_RSL_LNK.ZB_TUPLE_SIZE := R_F_ACCESS.D_SZTUP;
Z_FA_RSL_LNK.ZB_TUPLE_NBR  := R_F_ACCESS.D_PRALLOC;

GET R_F_ACCESS WHERE (D_FAST_IDX = M_SBLTYPE(M_RID_R_CE_DYST));

LONG_INT(ZQ_PTR.ZB_PTR) := LONG_INT(R_F_ACCESS.D_ABS_BASE);
Z_FA_CE_DYST.ZB_TUPLE_PTR := ZQ_PTR.ZB_PTR;
Z_FA_CE_DYST.ZB_TUPLE_SIZE := R_F_ACCESS.D_SZTUP;
Z_FA_CE_DYST.ZB_TUPLE_NBR  := R_F_ACCESS.D_PRALLOC;

GET R_F_ACCESS WHERE (D_FAST_IDX = M_SBLTYPE(M_RID_R_TRX_MGT));

LONG_INT(ZQ_PTR.ZB_PTR) := LONG_INT(R_F_ACCESS.D_ABS_BASE);
Z_FA_TRX_MGT.ZB_TUPLE_PTR := ZQ_PTR.ZB_PTR;
Z_FA_TRX_MGT.ZB_TUPLE_SIZE := R_F_ACCESS.D_SZTUP;
Z_FA_TRX_MGT.ZB_TUPLE_NBR  := R_F_ACCESS.D_PRALLOC;
/*END : DCTPD00914281 :  DTC513 overload alarm*/
END Q_S0101_INIT_RELATION_DUMP;
/*START: FR36/296461*/
/******************************/
/*START: FR36/294836*/
Q_SXXXX_PERFORM_STANDBY_FILE_SYNC: PROC();

DCL ZQ_MEAS_TYPE     M_MEAS_TYPE;
DCL ZQ_ACT_IDX       INT;

DO FOR ZQ_MEAS_TYPE:= E_MT_TRAFFIC TO E_MT_TRAFFIC_FLOW;

   IF Q_S0180_MEAS_TYPE_RUNNING(ZQ_MEAS_TYPE, ZQ_ACT_IDX)
     THEN

      CASE ZQ_MEAS_TYPE OF

       (E_MT_TRAFFIC): /** TYPE 1 **/

          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_0011,
                                     CM_FY32_HF_TYPE_0011);
          
          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_0012,
                                     CM_FY32_HF_TYPE_0012);
       
       (E_MT_RESOURCE_AVAILABILITY): /** TYPE 2 **/
          
          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_02,
                                     CM_FY32_HF_TYPE_02);

       (E_MT_RESOURCE_USAGE_CCCH): /** TYPE 3 **/
          
          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_03,
                                     CM_FY32_HF_TYPE_03);

       (E_MT_RESOURCE_USAGE_SDCCH): /** TYPE 4 **/
          
          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_04,
                                     CM_FY32_HF_TYPE_04);

       (E_MT_RESOURCE_USAGE_RTCH): /** TYPE 5 **/
          
          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_05,
                                     CM_FY32_HF_TYPE_05);

       (E_MT_HANDOVER): /** TYPE 6 **/ 
          
          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_06,
                                     CM_FY32_HF_TYPE_06);

       (E_MT_LAPD): /** TYPE 7 **/

          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_0071,
                                     CM_FY32_HF_TYPE_0071);
          
          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_0072,
                                     CM_FY32_HF_TYPE_0072);

       (E_MT_X25): /** TYPE 8 **/
          
          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_08,
                                     CM_FY32_HF_TYPE_08);          

       (E_MT_NUMBER7): /** TYPE 9 **/
          
          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_09,
                                     CM_FY32_HF_TYPE_09);          
       
       (E_MT_A_AND_ABIS_ITF_ANALYSIS): /** TYPE 18 **/
          
          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_0181,
                                     CM_FY32_HF_TYPE_0181);          
          
          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_0182,
                                     CM_FY32_HF_TYPE_0182);          
       
       (E_MT_SMS): /** TYPE 19 **/
          
          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_19,
                                     CM_FY32_HF_TYPE_19);          
     
       (E_MT_SCCP): /** TYPE 25 **/
          
          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_25,
                                     CM_FY32_HF_TYPE_25);          
      
       (E_MT_HANDOVER_PER_SERVINGCELL): /** TYPE 26 **/
          
          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_26,
                                     CM_FY32_HF_TYPE_26);          

       (E_MT_HANDOVER_PER_TARGETCELL): /** TYPE 27 **/
          
          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_27,
                                     CM_FY32_HF_TYPE_27);          

      (E_MT_HANDOVER_SDCCH): /** TYPE 28 **/

          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_28,
                                     CM_FY32_HF_TYPE_28);          
 
       (E_MT_DIRECTED_RETRY): /** TYPE 29 **/
          
          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_29,
                                     CM_FY32_HF_TYPE_29);          
       
       (E_MT_SMSCB): /** TYPE 30 **/
          
          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_30,
                                     CM_FY32_HF_TYPE_30);          
          
      (E_MT_MULTIBAND_HANDOVERS): /** TYPE 32 **/
          
          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_32,
                                     CM_FY32_HF_TYPE_32);          
          
      (E_MT_EME): /** TYPE 33 **/
          
          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_33,
                                     CM_FY32_HF_TYPE_33);          

       (E_MT_VGCS): /** TYPE 34 **/
          
          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_0341,
                                     CM_FY32_HF_TYPE_0341);          

          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_0342,
                                     CM_FY32_HF_TYPE_0342);          

      (E_MT_IP): /** TYPE 35 **/

          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_350,
                                     CM_FY32_HF_TYPE_0350);
 
          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_353,
                                     CM_FY32_HF_TYPE_0353); 
 
          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_354,
                                     CM_FY32_HF_TYPE_0354);
 
          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_355,
                                     CM_FY32_HF_TYPE_0355);
/*START: CR20/284751 BTS FRQ SYNCH */
          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_356,
                                     CM_FY32_HF_TYPE_0356);
/*END: CR20/284751 BTS FRQ SYNCH */ 
          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_357,
                                     CM_FY32_HF_TYPE_0357);
 
          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_358,
                                     CM_FY32_HF_TYPE_0358);
/*START : IURG FEATURE */
      (E_MT_IURG): /** TYPE 36 **/

          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_360,
                                     CM_FY32_HF_TYPE_0360);
/*END : IURG FEATURE */

/*START : B12 VAMOS */
      (E_MT_VAMOS): /** TYPE 37 **/

          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_370,
                                     CM_FY32_HF_TYPE_0370);
									 
	 Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_371,
                                     CM_FY32_HF_TYPE_0371);
/*END : B12 VAMOS */

       (E_MT_CELL_TRX_OVERVIEW_COUNTERS): /** TYPE 110 **/

          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_1101,
                                     CM_FY32_HF_TYPE_1101);
 
          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_1102,
                                     CM_FY32_HF_TYPE_1102); 
 
          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_1103,
                                     CM_FY32_HF_TYPE_1103);
 
          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_1104,
                                     CM_FY32_HF_TYPE_1104);
 
          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_1105,
                                     CM_FY32_HF_TYPE_1105);
 
          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_1106,
                                     CM_FY32_HF_TYPE_1106);

          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_1107,
                                     CM_FY32_HF_TYPE_1107); 
 
          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_1108,
                                     CM_FY32_HF_TYPE_1108);
 
          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_1109,
                                     CM_FY32_HF_TYPE_1109);
 
          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_1110,
                                     CM_FY32_HF_TYPE_1110);
/*START : AUPOIP FEATURE */
          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_1111,
                                     CM_FY32_HF_TYPE_1111);
          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_1112,
                                     CM_FY32_HF_TYPE_1112);

          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_1115,
                                     CM_FY32_HF_TYPE_1115);
/*START CR MOCN */
          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_1117,
                                     CM_FY32_HF_TYPE_1117);
/*END CR MOCN */
/*begin CR1238146 A-GPS*/
          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_1118,
                                     CM_FY32_HF_TYPE_1118);
/*end CR1238146 A-GPS*/

/*START : AUPOIP FEATURE */

/*START: 845331_01 */
          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_1113,
                                     CM_FY32_HF_TYPE_1113);
          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_1114,
                                     CM_FY32_HF_TYPE_1114);
/*END: 845331_01 */

      (E_MT_TRAFFIC_FLOW): /** TYPE 180 **/
 
          Q_SXXXX_SYNC_STANDBY_FILES(ZQ_MEAS_TYPE,
                                     CM_FY32_HF_NBR_TYPE_180,
                                     CM_FY32_HF_TYPE_180);
      ELSE

      ESAC;

   FI;
OD;
TRACEINFO :=
    'STANDBY  SYNCH COMPLETED        ';
TRC_BSC_PM1(
    FILENAME,
    LONG_INT(__LINENO__),
    LONG_INT(SUB_CLASS_PM_CCDC),
    TRACEID(NORM),
    TRACEINFO,
    LONG_INT((0)),
    LONG_INT((0)),
    LONG_INT((0))); 
  
END Q_SXXXX_PERFORM_STANDBY_FILE_SYNC;

/****************************************************************/ 
Q_SXXXX_SYNC_STANDBY_FILES: PROC(ZF_MEAS_TYPE    M_MEAS_TYPE,
                                 ZF_HISTORY_NBR  INT,
                                 ZF_HISTORY_NAME M_FILE_NAME);
DCL ZQ_RESULT     M_RESULT;

IF Q_S0840_FILE_EXISTS(ZF_HISTORY_NBR, 
                       ZF_HISTORY_NAME)
   THEN

    /*ZQ_RESULT := Q_S0890_SYN_FILE(ZF_HISTORY_NAME,*/
    ZQ_RESULT := Q_S0890_SYN_FILE1(ZF_HISTORY_NAME,
                                  (ZS_BASE_PCS+1),
                                  Z_OWN_DISK);
    TRACEINFO :=
      'CALL SYN FILE API (%d %d %d) 1  ';
    TRC_BSC_PM1(
        FILENAME,
        LONG_INT(__LINENO__),
        LONG_INT(SUB_CLASS_PM_CCDC),
        TRACEID(NORM),
        TRACEINFO,
        LONG_INT((Z_OWN_DISK)),
        LONG_INT((ZQ_RESULT)),
        LONG_INT(NUM(ZF_MEAS_TYPE))); 
FI; 

END Q_SXXXX_SYNC_STANDBY_FILES;
/****************************************************************/ 
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0890_SYN_FILE1                                   */
/*                                                                    */
/*     PROGRAMMER: AMRITPAL SINGH                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 13/04/10                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*      SYNCHRONIZE RESULT FILE FROM STANDBY TO ACTIVE                */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                      NONE                                          */
/*     PARAMETERS:                                                    */
/*                      ZF_FILE_NAME M_FILE_NAME                      */
/*                      ZF_FILE_PCS  M_FILE_PCS                       */
/*                      ZF_DRIVE_NO  M_DRIVE_NO                       */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58XV_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_SXXXX_SYNC_STANDBY_FILES                    */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0890_SYN_FILE1 : PROC(ZF_FILE_NAME M_FILE_NAME,
                        ZF_FILE_PCS  M_FILE_PCS,
                        ZF_DRIVE_NO  M_DRIVE_NO)
                   RETURNS (M_RESULT);

DCL ZQ_FULL_FILE_NAME ZM_FULL_FILE_NAME;
DCL ZQ_RESULT M_RESULT;
/* START : WIPRO FR226053 */
DCL ZQ_CURR_LCE_ID M_LCE_ID;
DCL ZQ_MATE M_LCE_ID;
DCL ZQ_CPL_IDX M_CP_LOG_INDEX;
/* END : WIPRO FR226053 */


ZF_FILE_PCS := ZF_FILE_PCS - ZS_BASE_PCS;

IF ZF_FILE_PCS > 0 AND ZF_FILE_PCS < 100
THEN
  DO WITH ZQ_FULL_FILE_NAME;
    ZB_FILE_NAME := ZF_FILE_NAME;
    ZB_EXT_FILE_NAME := ZS_NULL_EXT_FILE_NAME;
    IF ZF_FILE_PCS < 10
    THEN 
      ZB_EXT_FILE_NAME(3) := CHAR(ZF_FILE_PCS + 48);
    ELSE
      ZB_EXT_FILE_NAME(2) := CHAR(ZF_FILE_PCS / 10 + 48);
      ZB_EXT_FILE_NAME(3) := CHAR(ZF_FILE_PCS MOD 10 + 48);
    FI;
    #ifdef MXELITE
    ZQ_RESULT := E_SUCC;
    GET R_CP_LOG;/* for MT compilation*/
    #else
/* START : WIPRO FR226053 */
    ZQ_CURR_LCE_ID := Z_OWN_PID.B_PID_PROCESS_ID.B_PID_LCE;

    Q_S0120_GET_R_CONF_CE(ZQ_CURR_LCE_ID);
    ZQ_MATE := R_CONF_CE.D_MATE_LCE;

    IF ZQ_MATE /= M_LCE_ID_NULL
    THEN
     Q_S0120_GET_R_CONF_CE(ZQ_MATE);
     ZQ_CPL_IDX := R_CONF_CE.D_CPL_IDX;

     GET R_CP_LOG WHERE (D_CPL_IDX = ZQ_CPL_IDX);
     IF R_CP_LOG.D_CPL_STAT = E_MS_IT
     THEN

      P_MXFSXV_S1007_FILE_SYN(ZQ_FULL_FILE_NAME.ZB_FULL_FILE_NAME,
                            ZF_DRIVE_NO,
                            FALSE,
                            ZQ_RESULT);
     ELSE
      ZQ_RESULT := E_UNSUCC;
     FI;
    ELSE
      ZQ_RESULT := E_UNSUCC;
    FI;
/* END : WIPRO FR226053 */
    #endif
  OD;
ELSE
  ZQ_RESULT := E_UNSUCC;
FI;

RETURN(ZQ_RESULT);

END Q_S0890_SYN_FILE1;
/*END: FR36/294836*/

/* FR 176777 DEBUG */

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S1000_CCDC_FSM                                    */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/13                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       MAIN LOOP OF THE FMM FIELDING ALL EXTERNAL MESSAGES EXCEPT   */
/*       THOSE RELATED TO DISK OPERATIONS AND LOCAL TIMERS.           */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      0019_INIT_REQ                                 */
/*                      0017_SM_ACT_REQ                               */
/*                      0192_PM_LDC_AVAIL                             */
/*                      1090_PM_POLL_ONLY                             */
/*                      1080_PM_CC_ACT_REQ                            */
/*                      1091_PM_CC_LDC_ACT_REQ                        */
/*                      1188_PM_CCI_REF_REQ                           */
/*                      0194_PM_DATA_TRANSF                           */
/*                      1142_PM_DETAILED_DATA                         */
/*                      1187_PM_T180_POLLING_RSP                      */
/*                      6836_TIME_OUT                                 */
/*                      0128_FILE_CLOSED                              */
/*     SENT MESSAGES:                                                 */
/*                      0020_INIT_CNF                                 */
/*                      0018_SM_ACT_CNF                               */
/*                      1189_PM_CCI_REF_RSP                           */
/*                      1092_PM_CC_LDC_ACT_CNF                        */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0000_GET_OWN_LCE_ID                        */
/*                      Q_S0230_REG_STATIC_MEM                        */
/*                      Q_S0210_INIT_MEM_PTRS                         */
/*                      Q_S0900_PERFORM_SYSTEM_START_UP               */
/*                      Q_S0020_CCDC_ERROR                            */
/*                      Q_S0612_LDC_AVAILABLE                         */
/*                      Q_S0910_START_STOP_JOB                        */
/*                      Q_S0700_START_STOP_27                         */
/*                      Q_S0122_PREPARE_R_PM_FILES                    */
/*                      Q_S0010_WAIT_BEFORE_RETRYING                  */
/*                      Q_S0600_START_OF_POLLING                      */
/*                      Q_S0670_PROCESS_POLLING_RESPONSE              */
/*                      Q_S0040_RET_MEM                               */
/*                      Q_S0680_PROCESS_TIMER_EXPIRY                  */
/*     CALLED FROM:                                                   */
/*                      G_S_FT58ZQ_CC_DATA_COLLECTOR                  */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      GET     R_CIC_CODE                            */
/*                      GET     R_N7_CONF                             */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S1000_CCDC_FSM: PROC();

/*
 *  _MP_ INDICATES MESSAGE PARAMETER
 */
DCL ZQ_MP_ACTION_PARAM   M_ACTION_PARAM;
DCL ZQ_MP_ACT_STBY       M_CPR_ACT_STBY;
DCL ZQ_MP_ACT_ATTR_SM    M_ACT_ATTR_SM;
DCL ZQ_MP_INIT_LEVEL     M_INIT_LEVEL;
/* ADD FOR FR20/187184 by ZHUJ */
DCL ZQ_RESTART_FLAG      BOOL;

DCL ZQ_MP_AVAIL_LDC_TYPE M_FMM_SELECTOR;

DCL ZQ_MP_LDC_AVAILABLE  M_LCE_ID;
DCL ZQ_MP_LDC_BUF_PTR    PTR;
DCL ZQ_MP_LDC_BUF_SIZE   INT;
DCL ZQ_BUF_PTR PTR;
DCL ZQ_BUF_SIZE INT;

DCL ZQ_MP_LDC_LCE_ID     M_LCE_ID;
DCL ZQ_MP_LDC_SEQ_NBR    M_BYTE;
DCL ZQ_MP_JOB_ACT        BOOL;
DCL ZQ_MP_LDC_TYPE       M_FMM_SELECTOR;

DCL ZQ_MP_MEAS_TYPE      M_MEAS_TYPE;
DCL ZQ_MP_MECO_PROC_ID   M_PROCESS_ID;
DCL ZQ_MP_LAST_MSG       BOOL;

DCL ZQ_MP_REF_NBR        INT;
DCL ZQ_MP_REQU_PROC_ID   M_PROCESS_ID;
DCL ZQ_MP_START          BOOL;
DCL ZQ_MP_TIMER_ID       M_TIMER_IDENT;
DCL ZQ_MP_VALIDITY       M_PM_DATA_VALIDITY;

DCL ZQ_JOB_STATUS        M_JOB_PM_ERR;

DCL ZQ_RESULT            M_RESULT;
/* START : WIPRO B11 IP MR0 PKG1 */
DCL ZQ_SEQ_NBR INT;
/* END : WIPRO B11 IP MR0 PKG1 */
/* FR 176777 START */
DCL ZQ_MP_POLL_FILTER    M_POLL_FILTER;
DCL ZQ_MP_POLLING_INFO   M_PM_POLLING_INFO;
DCL ZQ_BYTE_INT M_INT_INTEL;                                                    
#ifdef GNU
NEWMODE M_INT_INTEL = STRUCT(
         CASE OF
         :B_INT   INT,
         :B_MSB   RANGE(0:255),
          B_LSB   RANGE(0:255)
         ESAC );
#else
NEWMODE M_INT_INTEL = STRUCT(                                                   
         CASE OF                                                                
         :B_INT   INT,                                                          
         :B_LSB   RANGE(0:255),                                                 
          B_MSB   RANGE(0:255)                                                  
         ESAC );                                                                
#endif
/* FR 176777 END   */ 
/*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE */
DCL ZQ_TC_REF_NBR M_INT_INTEL;
DCL ZQ_TC_SEQ_NBR M_INT_INTEL;
DCL ZQ_TC_DATA_VAL M_PM_DATA_VALIDITY;
DCL ZQ_MP_SCEN_RESULT M_JOB_RESULT;


/*END: ADD-WIPRO-B10-MX-MR2-CHANGE */
GET R_CIC_CODE;
GET R_N7_CONF;

 FSM: DO FOR EVER;

/*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*/
/*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*/
/*XXXXXX            ----------------------------------          XXXXXX*/
/*XXXXXX            |         STATE MACHINE          |          XXXXXX*/
/*XXXXXX            ----------------------------------          XXXXXX*/
/*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*/
/*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*/

  CASE Z_CCDC_STATE OF

/*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*/
/*XXXX                     STATE HEADER                           XXXX*/
/*XXXX  NAME: ZE_INIT                                             XXXX*/
/*XXXX  FUNC: THIS STATE ACCEPTS THE INIT_REQ MSG FROM ME_INIT    XXXX*/
/*XXXX        TO INITIALISE THE FMM .                             XXXX*/
/*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*/

    (ZE_INIT):
    /*-----*/

L_000_INIT: WAIT_CASE;
          /* -------------------------------------------------------- */
          /* INIT REQUEST                                             */
          /* -------------------------------------------------------- */

      0019_INIT_REQ(ZQ_MP_ACTION_PARAM,
                    ZQ_MP_REQU_PROC_ID,
                    ZQ_MP_INIT_LEVEL,
                    ZQ_MP_ACT_STBY,
                    *, *):

        Q_S0000_GET_OWN_LCE_ID();

        IF ZQ_MP_INIT_LEVEL =M_INI_RESTART OR
           ZQ_MP_INIT_LEVEL =M_INI_SYST_REST
        THEN
          /* ENSURE THAT FOR MEMORY ALREADY ALLOCATED
           * THAT IT IS KEPT WHETHER ACTIVE OR STANDBY.
           */
          /*Q_S0230_REG_STATIC_MEM();*/
        ELSE
          Q_S0940_RESET_POLL_REPLIES();
          Q_S0210_INIT_MEM_PTRS();
          
          /* ADD FOR FR20/187184 by ZHUJ */
          ZQ_RESTART_FLAG := FALSE;
        FI;
/* FR 176777 DEBUG */
        IF ZQ_MP_INIT_LEVEL /= M_INI_RESTART
        THEN
            Q_DEBUG_ELS_INIT_PROC ();
        FI;
        /*START: FR36/296461*/ 
        Q_S0101_INIT_RELATION_DUMP(); 
        /*END: FR36/296461*/ 
        IF ZQ_MP_INIT_LEVEL = M_INI_RESTART
        THEN
        /*Commented for FR 20/192118*/ 
           /*IF Q_S0950_ADD_ONE_TO_DPVAL(Z_DEBUG_VAR.ZB_COUNT_RESTART)
           THEN
             Z_DEBUG_VAR.ZB_COUNT_RESTART.B_HIGH                := 0;
             Z_DEBUG_VAR.ZB_COUNT_RESTART.B_LOW               := 0;
          FI;*/
        /*Commented for FR 20/192118*/   
        /*Added for FR 20/192118*/     
          Q_S0659_UPD_DEBUG_CNTR_EVT(E_COUNT_RESTART); 
        /*WIPRO:B10_MX_MR1 RT TRACE*/
          TRACEINFO := 'DEBUG update E_COUNT_RESTART(%d)';
          TRC_BSC_PM3(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCDC),
              TRACEID(NORM),
              TRACEINFO,
              LONG_INT((E_COUNT_RESTART)),
              LONG_INT((0)),
              LONG_INT((0)));
        /*END WIPRO:B10_MX_MR1 RT TRACE*/
        /*Added for FR 20/192118*/   
        FI;
        IF ZQ_MP_INIT_LEVEL =M_INI_SYST_REST
        THEN
        /*Commented for FR 20/192118*/ 
           /*IF Q_S0950_ADD_ONE_TO_DPVAL(Z_DEBUG_VAR.ZB_COUNT_RESET)
           THEN 
             Z_DEBUG_VAR.ZB_COUNT_RESET.B_HIGH                  := 0;
             Z_DEBUG_VAR.ZB_COUNT_RESET.B_LOW                  := 0;
           FI;*/
        /*Commented for FR 20/192118*/    
        /*Added for FR 20/192118*/     
          Q_S0659_UPD_DEBUG_CNTR_EVT(E_COUNT_RESET); 
        /*WIPRO:B10_MX_MR1 RT TRACE*/
          TRACEINFO := 'DEBUG update E_COUNT_RESET  (%d)';
          TRC_BSC_PM3(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCDC),
              TRACEID(NORM),
              TRACEINFO,
              LONG_INT((E_COUNT_RESET)),
              LONG_INT((0)),
              LONG_INT((0)));
        /*END WIPRO:B10_MX_MR1 RT TRACE*/
  
       /*Added for FR 20/192118*/   
        FI;
       /* FR 176777 DEBUG */

        IF ZQ_MP_ACT_STBY = M_CPR_STANDBY OR
           ZQ_MP_ACT_STBY = M_CPR_ACTIVE
        THEN
           ZQ_RESULT := E_SUCC;
        ELSE
           ZQ_RESULT := E_UNSUCC;
        FI;

            TRANSMIT_DIRECTED_MSG 0020_INIT_CNF(ZQ_MP_ACTION_PARAM,
                                                Z_OWN_PID ,
                                                ZQ_RESULT)
            TO (ZQ_MP_REQU_PROC_ID);

/*WIPRO:B10_MX_MR1 RT TRACE*/
 TRACEINFO := 'CCDC standby=0 active=1 (%d)    '; 
      TRC_BSC_PM3(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCDC),
              TRACEID(NORM),
              TRACEINFO,
              LONG_INT((ZQ_MP_ACT_STBY)),
              LONG_INT((0)),
              LONG_INT((0)));
/*END WIPRO:B10_MX_MR1 RT TRACE*/

        CASE ZQ_MP_ACT_STBY OF

          (M_CPR_STANDBY):
          /*-----------*/

            Z_CCDC_STATE:= ZE_STANDBY;
            /*START: FR36/294836*/
            TRACEINFO :=
             'MSG 0019 RECEIVED ON STANDBY    ';
            TRC_BSC_PM1(
               FILENAME,
               LONG_INT(__LINENO__),
               LONG_INT(SUB_CLASS_PM_CCDC),
               TRACEID(NORM),
               TRACEINFO,
               LONG_INT((0)),
               LONG_INT((0)),
               LONG_INT((0))); 
            TRACEINFO :=
             'STANDBY SYNC INITIATED          ';
            TRC_BSC_PM1(
               FILENAME,
               LONG_INT(__LINENO__),
               LONG_INT(SUB_CLASS_PM_CCDC),
               TRACEID(NORM),
               TRACEINFO,
               LONG_INT((0)),
               LONG_INT((0)),
               LONG_INT((0))); 

            Q_SXXXX_PERFORM_STANDBY_FILE_SYNC(); 
            /*END: FR36/294836*/


          (M_CPR_ACTIVE):
          /*----------*/

            Z_CCDC_STATE := ZE_ACTIVE;
            /*START: FR CRI00596704*/
            Z_TC_ID_MTP2 := 0;
	    Z_TC_ID_IP := 0;
            /*END: FR CRI00596704*/
            /* MODIFY BEGIN FOR FR20/187184 by ZHUJ */
            /* ADD INPUT PARAMETER*/
            Q_S0900_PERFORM_SYSTEM_START_UP( ZQ_RESTART_FLAG );
            /* END FOR FR20/187184 by ZHUJ */

          ELSE;
        ESAC;

        Z_UPDATE_PM_FILES := TRUE;

        END_WAIT_CASE_CLAUSE;


      ESAC_TIAW L_000_INIT;

/*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*/
/*XXXX                     STATE HEADER                           XXXX*/
/*XXXX  NAME: ZE_STANDBY                                          XXXX*/
/*XXXX  FUNC: THIS STATE ACCEPTS THE SM_ACT_REQ MSGS FROM ME_INIT XXXX*/
/*XXXX        TO CHANGE THE FMM TO ACTIVE                         XXXX*/
/*XXXX                                                            XXXX*/
/*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*/

    (ZE_STANDBY):
    /*--------*/

L_001_STANDBY:WAIT_CASE;

      /* ------------------------------------------------------------ */
      /* TAKEOVER REQUESTED BY OSN                                    */
      /* ------------------------------------------------------------ */
      0017_SM_ACT_REQ(ZQ_MP_ACTION_PARAM,
      /*===========*/ ZQ_MP_REQU_PROC_ID,
                      ZQ_MP_ACT_ATTR_SM):

        CASE ZQ_MP_ACTION_PARAM OF

          (M_ACT_TAKEOVER_SIG):
          /*----------------*/
            TRANSMIT_DIRECTED_MSG 0018_SM_ACT_CNF(ZQ_MP_ACTION_PARAM,
                                                  Z_OWN_PID,
                                                  E_SUCC,
                                                  ZQ_MP_ACT_ATTR_SM)
            TO (ZQ_MP_REQU_PROC_ID);
            
            /* MODIFY BEGIN FOR FR20/187184 by ZHUJ */
            /* ADD INPUT PARAMETER*/
            Q_S0900_PERFORM_SYSTEM_START_UP( FALSE );
            /* END FOR FR20/187184 by ZHUJ */

            GET R_PM_FILES WHERE (D_HIS_UPD = E_PM_HIS_TO_BE_UPD);
            IF DB_PARMS.B_DB_STATUS = M_DB_SUCCESS
              THEN
              Z_UPDATE_PM_FILES := FALSE;
            FI;
            Z_CCDC_STATE := ZE_ACTIVE;
            /*WIPRO:B10_MX_MR1 RT TRACE*/
              TRACEINFO := 'Standby CCDC Takeovr Succ(%d %d)';
              TRC_BSC_PM3(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCDC),
              TRACEID(NORM),
              TRACEINFO,
              LONG_INT((ZQ_MP_ACTION_PARAM)),
              LONG_INT((Z_CCDC_STATE)),
              LONG_INT((0)));
            /*END WIPRO:B10_MX_MR1 RT TRACE*/

          ELSE
            TRANSMIT_DIRECTED_MSG 0018_SM_ACT_CNF(ZQ_MP_ACTION_PARAM,
                                                  Z_OWN_PID,
                                                  E_UNSUCC,
                                                  ZQ_MP_ACT_ATTR_SM)
            TO (ZQ_MP_REQU_PROC_ID);
        ESAC;

      END_WAIT_CASE_CLAUSE;

      /* ------------------------------------------------------------ */
      /* ONLY THE ACTIVE CCDC SHOULD RECEIVE THIS NOTIFICATION        */
      /* ------------------------------------------------------------ */
      0192_PM_LDC_AVAIL(*, *):
        /* STANDBY CCDC SHOULD NOT PROCESS THIS MSG */

      END_WAIT_CASE_CLAUSE;

      /* ------------------------------------------------------------ */
      /* MECO REQUESTS START OF POLLING                               */
      /* ------------------------------------------------------------ */
      1090_PM_POLL_ONLY(*):
        /* STANDBY CCDC DOES NO POLLING, REQUEST IGNORED */
      END_WAIT_CASE_CLAUSE;

      /* ------------------------------------------------------------ */
      /* STANDBY-CCDC NOT RESPONSIBLE FOR START/START OF JOBS         */
      /* ------------------------------------------------------------ */
      1080_PM_CC_ACT_REQ(*,*,*):
        Q_S0020_CCDC_ERROR(M_ERC6_USER_REC,
                           M_ERT0019_INC_MESS_DATA,
                           70, 1080);

      END_WAIT_CASE_CLAUSE;


      1091_PM_CC_LDC_ACT_REQ(*,*,*):
        Q_S0020_CCDC_ERROR(M_ERC6_USER_REC,
                           M_ERT0019_INC_MESS_DATA,
                           71, 1091);

      END_WAIT_CASE_CLAUSE;

    ESAC_TIAW L_001_STANDBY;

/*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*/
/*XXXX                     STATE HEADER                           XXXX*/
/*XXXX  NAME: ZE_ACTIVE                                           XXXX*/
/*XXXX                                                            XXXX*/
/*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*/

    (ZE_ACTIVE):
    /*-------*/

L_003_ACTIVE:WAIT_CASE;

      /* ------------------------------------------------------------ */
      /* REQUEST FOR T180 AND T26 CCI REFERENCES                      */
      /* ------------------------------------------------------------ */
      1188_PM_CCI_REF_REQ():
      /*===============*/

        TRANSMIT_BASIC_MSG 1189_PM_CCI_REF_RSP(*,
                                               PTR(Z_T180_1_PTR),
                                               PTR(Z_T180_2_PTR),
                                               /*WITTS 76*/
                                               PTR(Z_T26_PTR),
                                               PTR(Z_T26_2_PTR))
                                               /*WITTS 76*/
                        TO (M_FS_MEAS_COORDINATOR);

      END_WAIT_CASE_CLAUSE;

      /* ------------------------------------------------------------ */
      /* LDC HAS RESTARTED/REBOOTED                                   */
      /* ------------------------------------------------------------ */
      0192_PM_LDC_AVAIL(ZQ_MP_LDC_AVAILABLE,
      /*=============*/ ZQ_MP_AVAIL_LDC_TYPE):

        Z_192_MSGS_RXD := Z_192_MSGS_RXD + 1;
      /*WIPRO:B10_MX_MR1 RT TRACE*/
        TRACEINFO := 'LDC restart/reboot (%d %d %d)   ';
        TRC_BSC_PM3(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCDC),
              TRACEID(NORM),
              TRACEINFO,
              LONG_INT((Z_192_MSGS_RXD)),
              LONG_INT((ZQ_MP_LDC_AVAILABLE)),
              LONG_INT((ZQ_MP_AVAIL_LDC_TYPE)));
      /*END WIPRO:B10_MX_MR1 RT TRACE*/
        Q_S0612_LDC_AVAILABLE(ZQ_MP_LDC_AVAILABLE,
                              ZQ_MP_AVAIL_LDC_TYPE);

      END_WAIT_CASE_CLAUSE;

      /* ------------------------------------------------------------ */
      /* CC/SI JOB START/STOP                                         */
      /* ------------------------------------------------------------ */
      1080_PM_CC_ACT_REQ(ZQ_MP_MECO_PROC_ID,
                         ZQ_MP_MEAS_TYPE,
                         ZQ_MP_START):

	Q_S0910_START_STOP_JOB(ZQ_MP_MEAS_TYPE,
                               ZQ_MP_START,
                               ZQ_MP_MECO_PROC_ID);

      END_WAIT_CASE_CLAUSE;

      /* ------------------------------------------------------------ */
      /* ACTIVATION/DEACTIVATION  OF TYPE 27 JOB                      */
      /* ------------------------------------------------------------ */
      1091_PM_CC_LDC_ACT_REQ(ZQ_MP_MECO_PROC_ID,
                             ZQ_MP_MEAS_TYPE,
                             ZQ_MP_JOB_ACT):

        IF Q_S0700_START_STOP_27(ZQ_MP_MEAS_TYPE,
                                 ZQ_MP_JOB_ACT)
        THEN
          IF ZQ_MP_JOB_ACT
          THEN
            /* JOB SUCCESSFULLY STARTED */
            ZQ_JOB_STATUS:=E_SUCC_MEAS_START;
          ELSE
            /* FAILED TO START */
            ZQ_JOB_STATUS:=E_FAIL_MEAS_START;
          FI;
        ELSE
          /* STOP JOB */
          IF ZQ_MP_JOB_ACT
          THEN
            /* JOB SUCCESSFULLY STOPPED */
            ZQ_JOB_STATUS:=E_SUCC_MEAS_STOP;
          ELSE
            /* JOB FAILED TO STOP! */
            ZQ_JOB_STATUS:=E_FAIL_MEAS_STOP;
          FI; /* ACTIVATE OR DEACTIVATE */
        FI;
        TRANSMIT_DIRECTED_MSG
                   1092_PM_CC_LDC_ACT_CNF(ZQ_JOB_STATUS)
        TO (ZQ_MP_MECO_PROC_ID);

      END_WAIT_CASE_CLAUSE;

      /* ------------------------------------------------------------ */
      /* MECO REQUESTS START OF POLLING                               */
      /* ------------------------------------------------------------ */
      1090_PM_POLL_ONLY(ZQ_MP_MECO_PROC_ID):
        /*START: FR CRI00596704*/
         Z_TC_ID_IP := 0;
         Z_TC_ID_MTP2 := 0;
        /*END: FR CRI00596704*/ 
	/*START: CR36/288765*/
        TRACEINFO := 'DEBUG data               (%d %d)';
        TRC_BSC_PM1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCDC),
              TRACEID(NORM),
              TRACEINFO,
              LONG_INT((0)),
              LONG_INT((0)),
              LONG_INT((0)));
        TRC_BSC_BUF1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(CLASS_PM),
              LONG_INT(SUB_CLASS_PM_CCDC),
              TRACEID(NORM),
              ->Z_DEBUG_VAR,
              /*START: CR36/288765*/ 
              SIZEOF(Z_DEBUG_VAR)); 
              /*END: CR36/288765*/ 
              /*Commented for CR36/288765*/ 
              /*132);*/
              /*Commented for CR36/288765*/ 
        
        /*END: CR36/288765*/

/*Begim: Trace Improvement - relation dump */

      /*START: FR36/296461*/ 
      IF (Z_R_PM_ACT_PTR.ZB_PTR /= NULL)
        THEN
      /*END: FR36/296461*/ 
      Q_S0100_COPY_BLOCK_OF_MEMORY(Z_R_PM_ACT_PTR.ZB_PTR,
                                   ->Z_R_PM_ACT,
                                   SIZE(Z_R_PM_ACT));



        TRACEINFO := 'R_PM_ACT dump            (%d %d)';
        TRC_BSC_PM1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCDC),
              TRACEID(NORM),
              TRACEINFO,
              LONG_INT((0)),
              LONG_INT((0)),
              LONG_INT((0)));
        TRC_BSC_BUF1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(CLASS_PM),
              LONG_INT(SUB_CLASS_PM_CCDC),
              TRACEID(NORM),
              ->Z_R_PM_ACT,
              SIZEOF(Z_R_PM_ACT));
      /*START: FR36/296461*/
      FI;

      IF (Z_R_PM_SC_G2_PTR.ZB_PTR /= NULL)
        THEN
      /*END: FR36/296461*/
      Q_S0100_COPY_BLOCK_OF_MEMORY(Z_R_PM_SC_G2_PTR.ZB_PTR,
                                   ->Z_R_PM_SC_G2,
                                   SIZE(Z_R_PM_SC_G2));


        TRACEINFO := 'R_PM_SC_G2 dump          (%d %d)';
        TRC_BSC_PM1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCDC),
              TRACEID(NORM),
              TRACEINFO,
              LONG_INT((0)),
              LONG_INT((0)),
              LONG_INT((0)));
        TRC_BSC_BUF1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(CLASS_PM),
              LONG_INT(SUB_CLASS_PM_CCDC),
              TRACEID(NORM),
              ->Z_R_PM_SC_G2,
              SIZEOF(Z_R_PM_SC_G2));
      /*START: FR36/296461*/
       FI;
      /*END: FR36/296461*/
/*End: Trace Improvement - relation dump */
        
        /*begin improv for 00981139 DTC 513 overload*/
        Q_S0211_INIT_DTC_OL_SWITCH();
        /*end improv for 00981139 DTC 513 overload*/
        Q_S0122_PREPARE_R_PM_FILES();

        Q_S0010_WAIT_BEFORE_RETRYING(ZS_START_POLL_DELAY_TENTHS);

        Q_S0600_START_OF_POLLING();
      END_WAIT_CASE_CLAUSE;

      /* ------------------------------------------------------------ */
      /* DATA FROM LDC - STANDARD COUNTERS                            */
      /* ------------------------------------------------------------ */
      1386_PM_POLL_TRX_RSP(ZQ_MP_LDC_LCE_ID,
                           ZQ_MP_LDC_TYPE,
                           ZQ_MP_LAST_MSG,
                           ZQ_MP_LDC_SEQ_NBR,
                           ZQ_MP_REF_NBR,
                           ZQ_MP_VALIDITY,
/* FR 176777 START */
                           ZQ_MP_POLLING_INFO
/* FR 176777 END   */ 
                           )

                    WITH (ZQ_MP_LDC_BUF_PTR,
                          ZQ_MP_LDC_BUF_SIZE):
        
        ZQ_BYTE_INT.B_LSB := ZQ_MP_POLLING_INFO.B_NB_RETRIES;                                                
        ZQ_BYTE_INT.B_MSB := 0;                                                       
        Q_S0670_PROCESS_POLLING_RESPONSE(ZQ_MP_LDC_LCE_ID,
                            ZQ_MP_LDC_TYPE,
                            ZQ_MP_LAST_MSG,
                            ZQ_MP_LDC_SEQ_NBR,
                            ZQ_MP_REF_NBR,
                            ZQ_MP_VALIDITY,
                            ZE_STD_TRX,/* */
                            ZQ_MP_LDC_BUF_PTR,
/* FR 176777 START */
                            INT(ZQ_BYTE_INT)
                            );
/* FR 176777 END   */ 

        Q_S0040_RET_MEM(ZQ_MP_LDC_BUF_PTR);

      END_WAIT_CASE_CLAUSE;

      /* ------------------------------------------------------------ */
      /* DATA FROM LDC - STANDARD COUNTERS                            */
      /* ------------------------------------------------------------ */
      0194_PM_DATA_TRANSF(ZQ_MP_LDC_LCE_ID,
                          ZQ_MP_LDC_TYPE,
                          ZQ_MP_LAST_MSG,
                          ZQ_MP_LDC_SEQ_NBR,
                          ZQ_MP_REF_NBR,
                          ZQ_MP_VALIDITY,
                          ZQ_MP_POLL_FILTER
                          )

                    WITH (ZQ_MP_LDC_BUF_PTR,
                          ZQ_MP_LDC_BUF_SIZE):

        Q_S0670_PROCESS_POLLING_RESPONSE(ZQ_MP_LDC_LCE_ID,
                            ZQ_MP_LDC_TYPE,
                            ZQ_MP_LAST_MSG,
                            ZQ_MP_LDC_SEQ_NBR,
                            ZQ_MP_REF_NBR,
                            ZQ_MP_VALIDITY,
                            ZE_STD,/* STANDARD */
                            ZQ_MP_LDC_BUF_PTR,
/* FR 176777 START */
                            INT(ZQ_MP_POLL_FILTER)
                            );
/* FR 176777 END   */ 

        Q_S0040_RET_MEM(ZQ_MP_LDC_BUF_PTR);

      END_WAIT_CASE_CLAUSE;

      /* ------------------------------------------------------------ */
      /* DATA FROM LDC - DETAILED COUNTERS                            */
      /* ------------------------------------------------------------ */
      1142_PM_DETAILED_DATA(ZQ_MP_LDC_LCE_ID,
                            ZQ_MP_LDC_TYPE,
                            ZQ_MP_LAST_MSG,
                            ZQ_MP_LDC_SEQ_NBR,
                            ZQ_MP_REF_NBR,
                            ZQ_MP_VALIDITY,
/* FR 176777 START */
                            ZQ_MP_POLLING_INFO
/* FR 176777 END   */ 
                            )

                      WITH (ZQ_MP_LDC_BUF_PTR,
                            ZQ_MP_LDC_BUF_SIZE):

        ZQ_BYTE_INT.B_LSB := ZQ_MP_POLLING_INFO.B_NB_RETRIES;                                                
        ZQ_BYTE_INT.B_MSB := 0;                                                       
        Q_S0670_PROCESS_POLLING_RESPONSE(ZQ_MP_LDC_LCE_ID,
                            ZQ_MP_LDC_TYPE,
                            ZQ_MP_LAST_MSG,
                            ZQ_MP_LDC_SEQ_NBR,
                            ZQ_MP_REF_NBR,
                            ZQ_MP_VALIDITY,
                            ZE_DET, /* DETAILED */
                            ZQ_MP_LDC_BUF_PTR,
/* FR 176777 START */
                            INT(ZQ_BYTE_INT)    
                            );
/* FR 176777 END   */ 

        Q_S0040_RET_MEM(ZQ_MP_LDC_BUF_PTR);

      END_WAIT_CASE_CLAUSE;

      /* ------------------------------------------------------------ */
      /* DATA FROM LDC - TYPE 26 COUNTERS                             */
      /* ------------------------------------------------------------ */
      1408_PM_T26_POLLING_RSP(ZQ_MP_LDC_LCE_ID,
                            ZQ_MP_LDC_TYPE,
                            ZQ_MP_LAST_MSG,
                            ZQ_MP_LDC_SEQ_NBR,
                            ZQ_MP_REF_NBR,
                            ZQ_MP_VALIDITY,
/* FR 176777 START */ 
                            ZQ_MP_POLLING_INFO
/* FR 176777 END   */ 
                            )

                      WITH (ZQ_MP_LDC_BUF_PTR,
                            ZQ_MP_LDC_BUF_SIZE):

        ZQ_BYTE_INT.B_LSB := ZQ_MP_POLLING_INFO.B_NB_RETRIES;                                                
        ZQ_BYTE_INT.B_MSB := 0;                                                       
        Q_S0670_PROCESS_POLLING_RESPONSE(ZQ_MP_LDC_LCE_ID,
                            ZQ_MP_LDC_TYPE,
                            ZQ_MP_LAST_MSG,
                            ZQ_MP_LDC_SEQ_NBR,
                            ZQ_MP_REF_NBR,
                            ZQ_MP_VALIDITY,
                            ZE_T26, /* TYPE 26 */
                            ZQ_MP_LDC_BUF_PTR,
/* FR 176777 START */
                            INT(ZQ_BYTE_INT)    
                            );
/* FR 176777 END   */ 

        Q_S0040_RET_MEM(ZQ_MP_LDC_BUF_PTR);

      END_WAIT_CASE_CLAUSE;

      /* ------------------------------------------------------------ */
      /* DATA FROM LDC - TRAFFIC FLOW COUNTERS                        */
      /* ------------------------------------------------------------ */
      1187_PM_T180_POLLING_RSP(ZQ_MP_LDC_LCE_ID,
                              ZQ_MP_LDC_TYPE,
                              ZQ_MP_LAST_MSG,
                              ZQ_MP_LDC_SEQ_NBR,
                              ZQ_MP_REF_NBR,
                              ZQ_MP_VALIDITY,
/* FR 176777 START */
                              ZQ_MP_POLLING_INFO
/* FR 176777 END   */ 
                              )

                        WITH (ZQ_MP_LDC_BUF_PTR,
                              ZQ_MP_LDC_BUF_SIZE):

        ZQ_BYTE_INT.B_LSB := ZQ_MP_POLLING_INFO.B_NB_RETRIES;                                                
        ZQ_BYTE_INT.B_MSB := 0;                                                       
        Q_S0670_PROCESS_POLLING_RESPONSE(ZQ_MP_LDC_LCE_ID,
                            ZQ_MP_LDC_TYPE,
                            ZQ_MP_LAST_MSG,
                            ZQ_MP_LDC_SEQ_NBR,
                            ZQ_MP_REF_NBR,
                            ZQ_MP_VALIDITY,
                            ZE_TR_FLOW, /* TRAFFIC FLOW */
                            ZQ_MP_LDC_BUF_PTR,
/* FR 176777 START */
                            INT(ZQ_BYTE_INT)    
                            );
/* FR 176777 END   */ 

        Q_S0040_RET_MEM(ZQ_MP_LDC_BUF_PTR);

      END_WAIT_CASE_CLAUSE;
      
      /* ------------------------------------------------------------ */
      /* DATA FROM LDC - TYPE 33(EME) COUNTERS                        */
      /* ------------------------------------------------------------ */
      1441_PM_EME_POLLING_RSP(ZQ_MP_LDC_LCE_ID,
                              ZQ_MP_LDC_TYPE,
                              ZQ_MP_LAST_MSG,
                              ZQ_MP_LDC_SEQ_NBR,
                              ZQ_MP_REF_NBR,
                              ZQ_MP_VALIDITY,
/* FR 176777 START */
                              ZQ_MP_POLLING_INFO
/* FR 176777 END   */ 
                              )

                        WITH (ZQ_MP_LDC_BUF_PTR,
                              ZQ_MP_LDC_BUF_SIZE):

        ZQ_BYTE_INT.B_LSB := ZQ_MP_POLLING_INFO.B_NB_RETRIES;                                                
        ZQ_BYTE_INT.B_MSB := 0;                                                       
        Q_S0670_PROCESS_POLLING_RESPONSE(ZQ_MP_LDC_LCE_ID,
                              ZQ_MP_LDC_TYPE,
                              ZQ_MP_LAST_MSG,
                              ZQ_MP_LDC_SEQ_NBR,
                              ZQ_MP_REF_NBR,
                              ZQ_MP_VALIDITY,
                              ZE_EME, /* TYPE 33(EME) TYPE110 MCCH */
                              ZQ_MP_LDC_BUF_PTR,
/* FR 176777 START */
                              INT(ZQ_BYTE_INT)    
                              );
/* FR 176777 END   */ 

        Q_S0040_RET_MEM(ZQ_MP_LDC_BUF_PTR);

      END_WAIT_CASE_CLAUSE;  
      
   
      /* ADD IN MXB8 BEGIN */
      /* ------------------------------------------------------------ */
      /* DATA FROM TP-GSM - TP COUNTERS                               */
      /* ------------------------------------------------------------ */
      1544_TP_PM_REPORT_CNF(ZQ_MP_LDC_LCE_ID,
                            ZQ_MP_REF_NBR,
                           /* START : WIPRO B11 IP MR0 PKG1 */
                            ZQ_SEQ_NBR,
                           /* END : WIPRO B11 IP MR0 PKG1 */ 
                            ZQ_MP_VALIDITY,
                            /*FR 176777 START */
                            ZQ_MP_POLLING_INFO
                            /*FR 176777 END */
                            )
	              WITH (ZQ_MP_LDC_BUF_PTR,
                            ZQ_MP_LDC_BUF_SIZE):
     
                
        IF ZQ_MP_LDC_LCE_ID = CM_FY32_TP_LCE_ID_MAIN + 1
        THEN
           ZQ_MP_LDC_LCE_ID := CM_FY32_TP_LCE_ID_MAIN;
        ELSIF ZQ_MP_LDC_LCE_ID = CM_FY32_TP_LCE_ID_SS7_MAIN + 1
        THEN
           ZQ_MP_LDC_LCE_ID := CM_FY32_TP_LCE_ID_SS7_MAIN;
        ELSIF ZQ_MP_LDC_LCE_ID = CM_FY32_N7SLH_LCEID_MAIN + 1
        THEN
           ZQ_MP_LDC_LCE_ID := CM_FY32_N7SLH_LCEID_MAIN;   
        FI;
        
        /*FR 176777 START */
        ZQ_BYTE_INT.B_LSB := ZQ_MP_POLLING_INFO.B_NB_RETRIES;                                                
        ZQ_BYTE_INT.B_MSB := 0;
        /*FR 176777 END */
        
        Q_S0670_PROCESS_POLLING_RESPONSE(ZQ_MP_LDC_LCE_ID,
                            M_FMM_SELECTOR(ZQ_MP_LDC_LCE_ID-1000),
                            /*USE LCE_ID-1000 AS LDC_TYPE*/
                            TRUE,
                            /* START : WIPRO B11 IP MR0 PKG1 */
                            /*1,*/
                            ZQ_SEQ_NBR,
                            /* END : WIPRO B11 IP MR0 PKG1 */
                            ZQ_MP_REF_NBR,
                            ZQ_MP_VALIDITY,
                            ZE_TP, /* TP-GSM */
                            ZQ_MP_LDC_BUF_PTR,
                            /*FR 176777 START */
                            INT(ZQ_BYTE_INT)
                            /*FR 176777 END */ );

        Q_S0040_RET_MEM(ZQ_MP_LDC_BUF_PTR);

      END_WAIT_CASE_CLAUSE;
      /*EXIT L_003_ACTIVE; */
      /* ADD IN MXB8 END */

/*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE */
/* ------------------------------------------------------------ */
/* DATA FROM TC-MGT - MTP2 COUNTERS                               */
/* ------------------------------------------------------------ */
       
      1695_TC_PM_DATA_ACK(ZQ_MP_REF_NBR,
                          ZQ_MP_SCEN_RESULT,
                          ZQ_MP_POLLING_INFO,
                          ZQ_MP_LDC_LCE_ID
                          ):

        /*commented for FR 3BKA36FBR224825*/ 
        /*ZQ_BYTE_INT.B_LSB := ZQ_MP_POLLING_INFO.B_NB_RETRIES;                                                
        ZQ_BYTE_INT.B_MSB := 0;
        ZQ_TC_REF_NBR.B_LSB := M_INT_INTEL(ZQ_MP_REF_NBR).B_LSB;
        ZQ_TC_REF_NBR.B_MSB := 0;
        ZQ_TC_SEQ_NBR.B_LSB := M_INT_INTEL(ZQ_MP_REF_NBR).B_MSB; 
        ZQ_TC_SEQ_NBR.B_MSB := 0;
        IF ZQ_MP_SCEN_RESULT = E_JOB_SUCCESSFUL
        THEN
            ZQ_TC_DATA_VAL := E_DATA_VALID;
        ELSE
            ZQ_TC_DATA_VAL := E_DATA_INVALID;
        FI; */
        /* START : WIPRO B11 IP MR0 PKG1 */
        /* IF Z_POLL_STEP = ZE_POLL_TC_MTP2
        THEN
        Q_S0671_TC_PROCESS_POLLING_RESPONSE(ZQ_MP_LDC_LCE_ID,
                            M_FS_TC_MGT,
                            FALSE,
                            ZQ_TC_SEQ_NBR.B_LSB,
                            ZQ_TC_REF_NBR.B_LSB,
                            ZQ_TC_DATA_VAL,
                            ZE_TC_ACK, *//* ACK MSG FROM TC_MGT MTP2*/
                            /*NULL,
                            INT(ZQ_BYTE_INT)    
                            );
        ELSIF Z_POLL_STEP = ZE_POLL_TC_IP
        THEN
        Q_S0671_TC_PROCESS_POLLING_RESPONSE(ZQ_MP_LDC_LCE_ID,
                            M_FS_TC_MGT,
                            FALSE,
                            ZQ_TC_SEQ_NBR.B_LSB,
                            ZQ_TC_REF_NBR.B_LSB,
                            ZQ_TC_DATA_VAL,
                            ZE_TC_IP_ACK, *//* ACK MSG FROM TC_MGT IP*/
                            /*NULL,
                            INT(ZQ_BYTE_INT)
                            ); */
        /* END : WIPRO B11 IP MR0 PKG1 */
      /* FI; */
      /*for FR 3BKA36FBR224825*/
      END_WAIT_CASE_CLAUSE; 
      
      1696_TC_PM_DATA_REP(ZQ_MP_REF_NBR,
                          ZQ_MP_SCEN_RESULT,
                          ZQ_MP_POLLING_INFO,
                          ZQ_MP_LDC_LCE_ID
                          )
                  WITH (ZQ_MP_LDC_BUF_PTR,
                        ZQ_MP_LDC_BUF_SIZE):
      /*IF ZQ_MP_LDC_LCE_ID = CM_FY32_N7SLH_LCEID_MAIN + 1
      THEN
        ZQ_MP_LDC_LCE_ID := CM_FY32_N7SLH_LCEID_MAIN ;
      FI;*/
        
        ZQ_BYTE_INT.B_LSB := ZQ_MP_POLLING_INFO.B_NB_RETRIES;                                                
        ZQ_BYTE_INT.B_MSB := 0;
        ZQ_TC_REF_NBR.B_LSB := M_INT_INTEL(ZQ_MP_REF_NBR).B_LSB;
        ZQ_TC_REF_NBR.B_MSB := 0;
        ZQ_TC_SEQ_NBR.B_LSB := M_INT_INTEL(ZQ_MP_REF_NBR).B_MSB; 
        ZQ_TC_SEQ_NBR.B_MSB := 0;
        IF ZQ_MP_SCEN_RESULT = E_JOB_SUCCESSFUL
        THEN
            ZQ_TC_DATA_VAL := E_DATA_VALID;
        ELSE
            ZQ_TC_DATA_VAL := E_DATA_INVALID;
        FI;    
      /* START : WIPRO B11 IP MR0 PKG1 */
      /*commented for FR 3BKA36FBR224825*/
      /* IF Z_POLL_STEP = ZE_POLL_TC_MTP2
      THEN
      Q_S0671_TC_PROCESS_POLLING_RESPONSE(ZQ_MP_LDC_LCE_ID,
                            M_FS_TC_MGT,
                            FALSE,
                            ZQ_TC_SEQ_NBR.B_LSB,
                            ZQ_TC_REF_NBR.B_LSB,
                            ZQ_TC_DATA_VAL,
                            ZE_TC, 
                            ZQ_MP_LDC_BUF_PTR,
                            INT(ZQ_BYTE_INT)    
                            );

      ELSIF Z_POLL_STEP = ZE_POLL_TC_IP
      THEN
      Q_S0671_TC_PROCESS_POLLING_RESPONSE(ZQ_MP_LDC_LCE_ID,
                            M_FS_TC_MGT,
                            FALSE,
                            ZQ_TC_SEQ_NBR.B_LSB,
                            ZQ_TC_REF_NBR.B_LSB,
                            ZQ_TC_DATA_VAL,
                            ZE_TC_IP,
                            ZQ_MP_LDC_BUF_PTR,
                            INT(ZQ_BYTE_INT)
                            );
      FI; */
      Q_S0670_PROCESS_POLLING_RESPONSE(ZQ_MP_LDC_LCE_ID,
                            M_FS_TC_MGT,
                            TRUE,
                            ZQ_TC_SEQ_NBR.B_LSB,
                            ZQ_TC_REF_NBR.B_LSB,
                            ZQ_TC_DATA_VAL,
                            ZE_TC, 
                            ZQ_MP_LDC_BUF_PTR,
                            INT(ZQ_BYTE_INT)    
                            );  
       /*commented for FR 3BKA36FBR224825*/
      /* END : WIPRO B11 IP MR0 PKG1 */

        Q_S0040_RET_MEM(ZQ_MP_LDC_BUF_PTR);

      END_WAIT_CASE_CLAUSE;
      /*EXIT L_003_ACTIVE; */
      /* ADD IN MXB8 END */

/*END: ADD-WIPRO-B10-MX-MR2-CHANGE */      

/* START : WIPRO B11 IP MR0 PKG1 */
/* ------------------------------------------------------------ */
/* DATA FROM TCSL-MR - IP COUNTERS (TCSL FLOW COUNTERS)         */
/* ------------------------------------------------------------ */
      1754_TCSLMR_POLLING_RSP(ZQ_MP_LDC_LCE_ID,
                              ZQ_MP_REF_NBR,
                              ZQ_MP_VALIDITY,
                            /*FR 176777 START */
                              ZQ_MP_POLLING_INFO
                            /*FR 176777 END */
                            )
                      WITH (ZQ_MP_LDC_BUF_PTR,
                            ZQ_MP_LDC_BUF_SIZE):
        /**/     
        IF ZQ_MP_LDC_LCE_ID = CM_FY32_TCSLMR_LCEID_MAIN + 1
        THEN
           ZQ_MP_LDC_LCE_ID := CM_FY32_TCSLMR_LCEID_MAIN;   
        FI;
        /**/     

        /*FR 176777 START */
        ZQ_BYTE_INT.B_LSB := ZQ_MP_POLLING_INFO.B_NB_RETRIES;
        ZQ_BYTE_INT.B_MSB := 0;
        /*FR 176777 END */

        Q_S0670_PROCESS_POLLING_RESPONSE(ZQ_MP_LDC_LCE_ID,
                            M_FMM_SELECTOR(ZQ_MP_LDC_LCE_ID-1000),
                            /*USE LCE_ID-1000 AS LDC_TYPE*/
                            TRUE,
                            1,
                            ZQ_MP_REF_NBR,
                            ZQ_MP_VALIDITY,
                            ZE_TCSL_MR, /* TCSL-MR */
                            ZQ_MP_LDC_BUF_PTR,
                            /*FR 176777 START */
                            INT(ZQ_BYTE_INT)
                            /*FR 176777 END */ );

        Q_S0040_RET_MEM(ZQ_MP_LDC_BUF_PTR);

      END_WAIT_CASE_CLAUSE;
      /*EXIT L_003_ACTIVE; */
      /* ADD IN MXB8 END */

/* END : WIPRO B11 IP MR0 PKG1 */
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
/* ------------------------------------------------------------ */
/* DATA FROM M3UA - IP COUNTERS (ASIG FLOW COUNTERS)         */
/* ------------------------------------------------------------ */
      2008_M3UALM_POLLING_RSP (ZQ_MP_LDC_LCE_ID,
                              ZQ_MP_REF_NBR,
                              ZQ_MP_VALIDITY,
                              ZQ_MP_POLLING_INFO
                               )
                      WITH (ZQ_MP_LDC_BUF_PTR,
                            ZQ_MP_LDC_BUF_SIZE):
  
        IF ZQ_MP_LDC_LCE_ID = CM_FY32_M3UALM_LCEID_MAIN + 1
        THEN
           ZQ_MP_LDC_LCE_ID := CM_FY32_M3UALM_LCEID_MAIN;   
        FI;
  

        /*FR 176777 START */
        ZQ_BYTE_INT.B_LSB := ZQ_MP_POLLING_INFO.B_NB_RETRIES;
        ZQ_BYTE_INT.B_MSB := 0;
        /*FR 176777 END */

        Q_S0670_PROCESS_POLLING_RESPONSE(ZQ_MP_LDC_LCE_ID,
                            M_FMM_SELECTOR(ZQ_MP_LDC_LCE_ID-1000),
                            /*USE LCE_ID-1000 AS LDC_TYPE*/
                            TRUE,
                            1,
                            ZQ_MP_REF_NBR,
                            ZQ_MP_VALIDITY,
                            ZE_M3UA_LM, /*-LM */
                            ZQ_MP_LDC_BUF_PTR,
                            /*FR 176777 START */
                            INT(ZQ_BYTE_INT)
                            /*FR 176777 END */ );

        Q_S0040_RET_MEM(ZQ_MP_LDC_BUF_PTR);

      END_WAIT_CASE_CLAUSE;
      /*EXIT L_003_ACTIVE; */
      /* ADD IN MXB8 END */
/*START: IURG FEATURE */
/* ------------------------------------------------------------ */
/* DATA FROM M3UA - IURG COUNTERS (TYPE-36 IURG COUNTERS)       */
/* ------------------------------------------------------------ */
      2107_IURG_PM_POLLING_RSP (ZQ_MP_LDC_LCE_ID,
                              ZQ_MP_REF_NBR,
                              ZQ_MP_VALIDITY,
                              ZQ_MP_POLLING_INFO
                               )
                      WITH (ZQ_MP_LDC_BUF_PTR,
                            ZQ_MP_LDC_BUF_SIZE):
  
        IF ZQ_MP_LDC_LCE_ID = CM_FY32_M3UALM_LCEID_MAIN + 1
        THEN
           ZQ_MP_LDC_LCE_ID := CM_FY32_M3UALM_LCEID_MAIN;   
        FI;
        ZQ_BYTE_INT.B_LSB := ZQ_MP_POLLING_INFO.B_NB_RETRIES;
        ZQ_BYTE_INT.B_MSB := 0;
        Q_S0670_PROCESS_POLLING_RESPONSE(ZQ_MP_LDC_LCE_ID,
                            M_FMM_SELECTOR(ZQ_MP_LDC_LCE_ID-1000),
                            TRUE,
                            1,
                            ZQ_MP_REF_NBR,
                            ZQ_MP_VALIDITY,
                            ZE_IURG, /*IURG COUNTERS FROM M3UA-LM */
                            ZQ_MP_LDC_BUF_PTR,
                            INT(ZQ_BYTE_INT)
                            );

        Q_S0040_RET_MEM(ZQ_MP_LDC_BUF_PTR);

      END_WAIT_CASE_CLAUSE;
/*END :IURG FEATURE */
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */

      /* BEGIN: CR 605005 */
	  
	  0002_CPI_SRV_REQ_ACK_OK()
	                    WITH (ZQ_BUF_PTR,
                            ZQ_BUF_SIZE):

	  
	   Q_S0682_PROCESS_SERVICE_REQUEST(ZQ_BUF_PTR,2);
	  
	  Q_S0040_RET_MEM(ZQ_BUF_PTR);
	  
	  END_WAIT_CASE_CLAUSE;
	  
	  
	  0003_CPI_SRV_REQ_ACK_NOK()
	                    WITH (ZQ_BUF_PTR,
                            ZQ_BUF_SIZE):
							
	    Q_S0682_PROCESS_SERVICE_REQUEST(ZQ_BUF_PTR,3);
	  
	  Q_S0040_RET_MEM(ZQ_BUF_PTR);	

      END_WAIT_CASE_CLAUSE;
	  
	  
	  0004_CPI_SRV_REP_OK()
	                    WITH (ZQ_BUF_PTR,
                            ZQ_BUF_SIZE):

							
	   Q_S0682_PROCESS_SERVICE_REQUEST(ZQ_BUF_PTR,4);
	  
	  Q_S0040_RET_MEM(ZQ_BUF_PTR);	

      END_WAIT_CASE_CLAUSE;	


      0005_CPI_SRV_REP_NOK()
                          WITH (ZQ_BUF_PTR,
                            ZQ_BUF_SIZE):
							
	   Q_S0682_PROCESS_SERVICE_REQUEST(ZQ_BUF_PTR,5);
	  
	  Q_S0040_RET_MEM(ZQ_BUF_PTR);	

      END_WAIT_CASE_CLAUSE;	  
	  
	  /* END: CR 605005 */

      /* ------------------------------------------------------------ */
      /* TIMER EXPIRED NO RESPONSE FROM LDC                           */
      /* ------------------------------------------------------------ */
      6836_TIME_OUT(*,
      /*=========*/ *,
                    *,
                    ZQ_MP_TIMER_ID):

        Q_S0680_PROCESS_TIMER_EXPIRY(ZQ_MP_TIMER_ID);

      END_WAIT_CASE_CLAUSE;
	  
	  
	  

      /* ------------------------------------------------------------ */
      /* FILE CLOSED BY OSN AFTER 15MINS                              */
      /* ------------------------------------------------------------ */
      0128_FILE_CLOSED(*,*,*):
      /*============*/

      END_WAIT_CASE_CLAUSE;

    ESAC_TIAW L_003_ACTIVE;

/*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*/
/*XXXXXX            ----------------------------------          XXXXXX*/
/*XXXXXX            |       END STATE MACHINE        |          XXXXXX*/
/*XXXXXX            ----------------------------------          XXXXXX*/
/*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*/

  ESAC;

 OD FSM;
END Q_S1000_CCDC_FSM;

/**********************************************************************/
/*                                                                    */
/*          4.8  PROCESS BODY -- SUPERVISOR                           */
/*                                                                    */
/**********************************************************************/
/**********************************************************************/
/*                                                                    */
/*     SUPERVISOR_ENTRY: G_S_FT58ZQ_CC_DATA_COLLECTOR                 */
/*                                                                    */
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE: 16/11/97 */
/*                                                                    */
/*     CREATION DATE: 16/11/97                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       SUPERVISOR PART ENTERED ONLY ON PROCESSOR INITIALISATION.    */
/*                                                                    */
/*     CONTAINING PROCEDURES:                                         */
/*                      Q_S0000_GET_OWN_LCE_ID                        */
/*                      Q_S0010_WAIT_BEFORE_RETRYING                  */
/*                      Q_S0020_CCDC_ERROR                            */
/*                      Q_S0030_GET_USER_BUF                          */
/*                      Q_S0040_RET_MEM                               */
/*                      Q_S0050_ADD_INT_TO_DPVAL                      */
/*                      Q_S0070_START_TIMER                           */
/*                      Q_S0080_CANCEL_TIMER                          */
/*                      Q_S0090_ADD_OFFSET_TO_PTR                     */
/*                      Q_S0100_COPY_BLOCK_OF_MEMORY                  */
/*                      Q_S0050_ADD_INT_TO_DPVAL                      */
/*                      Q_S0120_GET_R_CONF_CE                         */
/*                      Q_S0130_GET_R_CE_DYST                         */
/*                      Q_S0140_MOD_R_PM_FILES                        */
/*                      Q_S0150_GET_R_PM_ACT_TASK                     */
/*                      Q_S0160_GET_R_PM_ACT_RUNNING                  */
/*                      Q_S0170_MOD_R_PM_ACT                          */
/*                      Q_S0180_MEAS_TYPE_RUNNING                     */
/*                      Q_S0190_LCE_IT                                */
/*                      Q_S0200_HIS_UPD_REQ                           */
/*                      Q_S0122_PREPARE_R_PM_FILES                    */
/*                      Q_S0126_GET_R_CELL_MGT_CELL                   */
/*                      Q_S0127_GET_R_TRX_MGT_RSL                     */
/*                      Q_S0131_GET_R_RSL_LNK                         */
/*                      Q_S0132_GET_CIS_FOR_TCU                       */
/*                      Q_S0134_LDC_ON_ACT_CE                         */
/*                      Q_S0136_DTC_CE_FUNC                           */
/*                      Q_S0146_GET_R_CONF_CE                         */
/*                      Q_S0155_GET_CELL_SCOPE                        */
/*                      Q_S0160_CELL_IN_SCOPE                         */
/*                      Q_S0170_CELL_IN_LIST                          */
/*                      Q_S0175_MAKE_COMMON_CELL_LIST                 */
/*                      Q_S0180_TCU_IN_JOBS_SCOPE                     */
/*                      Q_S0185_DTC_IN_JOBS_SCOPE                     */
/*                      Q_S0190_MEAS_TYPE_CCSI                        */
/*                      Q_S0210_INIT_MEM_PTRS                         */
/*                      Q_S0220_GET_STATIC_MEM                        */
/*                      Q_S0230_REG_STATIC_MEM                        */
/*                      Q_S0240_INSERT_DS_PTR                         */
/*                      Q_S0300_SEND_MSG_1070_TO_LDC                  */
/*                      Q_S0302_SEND_PM_POLLING                       */
/*                      Q_S0304_WAIT_0126_WRITE_REC_CNF               */
/*                      Q_S0308_WAIT_0124_READ_REC_CNF                */
/*                      Q_S0310_SEND_1141_PM_POLLING                  */
/*                      Q_S0400_UPD_CCI_STD_CNTRS                     */
/*                      Q_S0401_UPD_T7_INVALID                        */
/*                      Q_S0402_UPD_LAPD_INVALID                      */
/*                      Q_S0410_CLEAR_MEMORY                          */
/*                      Q_S0420_INIT_SYS_REC_HEAD                     */
/*                      Q_S0425_VALIDITY_MATE                         */
/*                      Q_S0426_SET_INVALID                           */
/*                      Q_S0430_UPD_T180_CTRS                         */
/*                      Q_S0431_UPD_T180_INV_TCU                      */
/*                      Q_S0432_UPD_T180_INV_TCHRM                    */
/*                      Q_S0433_CHECK_INVALIDITY_T180                 */
/*                      Q_S0440_INSERT_SERV_CELL                      */
/*                      Q_S0441_UPD_T180_TCU                          */
/*                      Q_S0442_UPD_T180_TCHRM                        */
/*                      Q_S0595_UPDATE_CCI_ALERTER                    */
/*                      Q_S0596_CALC_ALERT_THRES                      */
/*                      Q_S0597_INIT_ALERTER_1                        */
/*                      Q_S0600_START_OF_POLLING                      */
/*                      Q_S0602_POLL_LDC                              */
/*                      Q_S0606_POLL_CURR_LDC                         */
/*                      Q_S0608_STD_POLL_REQ                          */
/*                      Q_S0610_DETAIL_POLL_REQ                       */
/*                      Q_S0612_LDC_AVAILABLE                         */
/*                      Q_S0620_INIT_POLLING_PROCESSES                */
/*                      Q_S0625_POLLING_COMPLETE                      */
/*                      Q_S0630_GET_NEXT_LDCP_TO_POLL                 */
/*                      Q_S0635_GET_NEXT_POLL_STEP                    */
/*                      Q_S0650_FREE_PROC_INST                        */
/*                      Q_S0652_GET_FREE_PROC_INST                    */
/*                      Q_S0653_FIND_PROC_INST_TIMER                  */
/*                      Q_S0655_FIND_PROC_INST_LCE                    */
/*                      Q_S0656_ALL_PROC_INSTS_FREE                   */
/*                      Q_S0658_FILL_PROC_INST_DATA                   */
/*                      Q_S0660_DO_NEXT_POLL_ACTION                   */
/*                      Q_S0670_PROCESS_POLLING_RESPONSE              */
/*                      Q_S0680_PROCESS_TIMER_EXPIRY                  */
/*                      Q_S0700_START_STOP_27                         */
/*                      Q_S0750_GET_HISTORY_FILE                      */
/*                      Q_S0755_GET_RECORD_SIZE                       */
/*                      Q_S0780_GET_MAX_NUM_RECS                      */
/*                      Q_S0785_GET_WRITE_BUFFER_ATTRIBU              */
/*                      Q_S0786_GET_T110_1_WRITE_BUF_ATT              */
/*                      Q_S0790_GET_START_RECORD_OF_BUFF              */
/*                      Q_S0792_MARK_RECORDS_WRITTEN                  */
/*                      Q_S0794_ALL_RECORDS_WRITTEN                   */
/*                      Q_S0796_INIT_BUFFER_ATTRIBUTES                */
/*                      Q_S0798_GET_START_MEM_PTR                     */
/*                      Q_S0799_ASSIGN_MEM_PTR                        */
/*                      Q_S0800_UPDATE_HISTORY_FILES                  */
/*                      Q_S0801_UPDATE_HISTORY_FILE                   */
/*                      Q_S0802_HIS_UPD                               */
/*                      Q_S0804_HIS_UPD_T110_1                        */
/*                      Q_S0806_UPDATE_HISTORY_TYPE_110               */
/*                      Q_S0807_WRITE_TO_HIST_FILE                    */
/*                      Q_S0808_UPD_HIS_TYPE_180                      */
/*                      Q_S0809_UPDATE_HISTORY_TYPE_34                */
/*                      Q_S0810_INIT_FCB                              */
/*                      Q_S0812_CLOSE_HIS_FILE                        */
/*                      Q_S0816_OPEN_HIS_FILE                         */
/*                      Q_S0818_OPEN_HIST_FILE                        */
/*                      Q_S0820_READ_HIST_FILE                        */
/*                      Q_S0822_WRITE_HIST_FILE                       */
/*                      Q_S0840_FILE_EXISTS                           */
/*                      Q_S0850_DO_FILE_ACTION                        */
/*                      Q_S0860_RESET_CCI_DS                          */
/*                      Q_S0866_DELETE_INCOMPLETE                     */
/*                      Q_S0868_DELETE_HISTORY                        */
/*                      Q_S0870_INITIALISE_HISTORY                    */
/*                      Q_S0871_COPY_T180_HIS_TO_MEMORY               */
/*                      Q_S0872_COPY_HIS_TO_MEM                       */
/*                      Q_S0875_COPY_T110_1_HIS_TO_MEMOR              */
/*                      Q_S0900_PERFORM_SYSTEM_START_UP               */
/*                      Q_S0910_START_STOP_JOB                        */
/*                      Q_S1000_CCDC_FSM                              */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S1000_CCDC_FSM                              */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/**************** END OF SUPERVISOR_ENTRY HEADER **********************/

DUMMY_PROC:PROC();

    /*Keep multipol happy*/

    IF (FALSE) THEN
    GET R_BEQ_MGT;
 /*   GET R_TC_MGT;*/
    GET R_ABIS_INF;
    GET R_F_ACCESS;
    FI;

END DUMMY_PROC;


/* ################ GENERAL TRACE INFO (TRCINFO.TDB) ################ */
  Z_TRACE_KEY := ZS_TRACE_KEY_PROC;
  Q_S0001_TRACE_INFO();
/* ################ GENERAL TRACE INFO (TRCINFO.TDB) ################ */
 
 INIT DB_AREAS;

 Z_192_MSGS_RXD := 0;

 Z_CCDC_STATE   := ZE_INIT;

 Q_S1000_CCDC_FSM();        /* ENDLESS LOOP CONTAINING STATE MACHINE */


/**********************************************************************/
/*                                                                    */
/*          4.9  END OF SUPERVISOR PROCESS                            */
/*                                                                    */
/**********************************************************************/

END G_S_FT58AL_CC_DATA_COLLECTOR;

/**********************************************************************/
/*                                                                    */
/*          4.10 END OF SUPERVISOR MODULE                             */
/*                                                                    */
/**********************************************************************/

END H_S_FT58ZZ_CC_DATA_COLLECTOR;

/**********************************************************************/
/*                                                                    */
/*          5.   END FMM                                              */
/*                                                                    */
/**********************************************************************/

END_FMM;

