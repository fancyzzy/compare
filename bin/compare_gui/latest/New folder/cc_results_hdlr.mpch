/************************* MADSIX INFORMATION *************************/
/* MADSIX STYLE VERSION: 3.7                                          */
/* UPDATED BY MADSIX VERSION: 3.7.2                                   */
/* USED LOADMODULE: PB04AD10                                          */
/* PSEUDO CODE: INLINE                                                */
/********************* END OF MADSIX INFORMATION **********************/
/*********************** COPYRIGHT INFORMATION ************************/
/*                                                                    */
/*                                                                    */
/*       INFORMATION INCLUDED IN THIS DOCUMENT IS THE EXCLUSIVE       */
/*       PROPERTY OF ALCATEL NV OR OF A COMPANY OF THE ALCATEL        */
/*       NV GROUP. COPYING, USE OR DISCLOSURE OF ITS CONTENTS,        */
/*       EVEN IN PART, ARE NOT PERMITTED WITHOUT THE PRIOR            */
/*       WRITTEN AGREEMENT OF THE PROPRIETOR.                         */
/*                                                                    */
/*                                                                    */
/******************** END OF COPYRIGHT INFORMATION ********************/
/*********************** SHORT IDENTIFICATION *************************/
/*                                                                    */
/*        CCCC   CCCC  RRRR   H   H                                   */
/*       C      C      R   R  H   H                                   */
/*       C      C      R   R  H   H                                   */
/*       C      C      RRRR   HHHHH                                   */
/*       C      C      R R    H   H                                   */
/*       C      C      R  R   H   H                                   */
/*        CCCC   CCCC  R   R  H   H                                   */
/*                                                                    */
/******************* END OF SHORT IDENTIFICATION **********************/
/**********************************************************************/
/*                                                                    */
/*    FMM_PROCEDURE_HEADER:                                           */
/*                                                                    */
/*    DESCRIPTIVE NAME    : CCRH                                      */
/*                                                                    */
/*    REG NUMBER          : 26702                                     */
/*                                                                    */
/*    PDS MEMBER          : FT59YX01                                  */
/*                                                                    */
/*    PROGRAMMERS         : JP QUINN (KDC)                            */
/*                          DENIZ BELGIN (BDC-C)                      */
/*                          A. KILBOURNE (KDC)                        */
/*                          A.H.SWANN (BDC)                           */
/*                          CHEN ZHANGYI (ASB)                        */
/*                                                                    */
/*    CREATED             : 30/03/05                                  */
/*                                                                    */
/*    LAST UPDATED        : 17/01/06                                  */
/*                                                                    */
/*--------------------------------------------------------------------*/
/*                                                                    */
/*    FILE DOCUMENT:         CATEG.: REG NO.:       ED.   PDS MEMBER: */
/*                                                  NO.:  (CIPHER,    */
/*                                                         VARIANT,   */
/*                                                         PCS)       */
/*                                                                    */
/*    PK DOCUMENT   (STAND ALONE)    XXX XXXXX XXXX XX    XXXX        */
/*    PW DOCUMENT   (STAND ALONE)    XXX XXXXX XXXX XX    XXXX        */
/*    DESCRIPTOR (FMM)     FMMD-     215 26732            FT7E YX 2A  */
/*    SOURCE (CHILL)        MSF-     215 26702            FT59 AZ 2A  */
/*    OBJECT (UNLINKED)      MO-     XXX XXXXX            XXXX XX XX  */
/*    SPS, OBJECT (LINKED)   MO-     XXX XXXXX      MX    FT6M AZ 2A  */
/*    LOADM                                               FHA6 YX XX  */
/*    CMD STR                                             FKU4 YX XX  */
/*    MAPEDIT                                             FHVU YX XX  */
/*                                                                    */
/*--------------------------------------------------------------------*/
/*                                                                    */
/*    FMM IDENTIFICATION       -    0158                              */
/*                                                                    */
/************************ END OF FMM HEADER ***************************/
/**********************************************************************/
/*                START OF TOP LEVEL DOCUMENTATION                    */
/**********************************************************************/
/*
1. DESCRIPTIVE NAME - FMM
CCRH
1.1 REG NO. 215 26702

2. INTRODUCTION  (GENERAL OVERVIEW):
3. FUNCTIONAL DESCRIPTION
4. ENVIRONMENT
4.1 SOFTWARE
4.2 HARDWARE (ONLY WHERE PROGRAM HAS SPECIFIC HARDWARE INTERFACE)
5. INTERFACES
5.1 SOFTWARE

5.2 HARDWARE
*/
/*
\* THIS IS THE MADSIX GENERATED XPA AREA                 *\



MESSAGES USED IN SUPERVISOR_PROCESS: G_S_FT59AL_CC_RESULTS_HANDLER


00017_SM_ACT_REQ - YTQLAAXX                BASIC MESSAGE
     UNKNOWN                               RECEIVED

 0018_SM_ACT_CNF - YV96AA01                DIRECTED MESSAGE
     Q_S0030_HANDLE_SM_ACT_REQ             SEND

00019_INIT_REQ - YV97AAXX                  BASIC MESSAGE
     UNKNOWN                               RECEIVED

 0020_INIT_CNF - YV98AA01                  DIRECTED MESSAGE
     Q_S0010_INIT                          SEND

 0121_OPEN_FILE - YTMDAA01                 BASIC MESSAGE
     Q_S0190_OPEN_RES_FILE                 SEND
     Q_S0140_OPEN_HIST_FILE                SEND
     Q_S0150_OPEN_2ND_HIS                  SEND
     Q_S0990_OPEN_3RD_HIS                  SEND

00122_FILE_OPENED - YTMEAAXX               DIRECTED MESSAGE
     UNKNOWN                               RECEIVED

 0123_READ_REC - YTMFAA01                  DIRECTED MESSAGE
     Q_S0160_READ_HIST_FILE                SEND

 0124_READ_REC_CNF - YTMGAA01              DIRECTED MESSAGE
     Q_S0160_READ_HIST_FILE                RECEIVED

 0125_WRITE_REC - YTMHAA01                 DIRECTED MESSAGE
     Q_S0200_WRITE_RES_FILE                SEND

 0126_WRITE_REC_CNF - YTMJAA01             DIRECTED MESSAGE
     Q_S0200_WRITE_RES_FILE                RECEIVED

 0127_CLOSE_FILE - YTMKAA01                DIRECTED MESSAGE
     Q_S0210_CLOSE_RES_FILE                SEND
     Q_S0170_CLOSE_HIST_FILE               SEND

00128_FILE_CLOSED - YTMLAAXX               DIRECTED MESSAGE
     UNKNOWN                               RECEIVED

 0316_FILE_HNDL_REQ - ABTXAA01             BASIC MESSAGE
     Q_S0180_DEL_RES_FILE                  SEND

 0317_FILE_HNDL_CNF - ABT1AA01             DIRECTED MESSAGE
     Q_S0180_DEL_RES_FILE                  RECEIVED

01083_PM_CC_RES_REQ - FT6GAHXX             BASIC MESSAGE
     UNKNOWN                               RECEIVED

 1085_PM_CC_RES_CNF - FT6JAH01             DIRECTED MESSAGE
     Q_S0300_SEND_PM_CC_RES_CNF            SEND

 6836_TIME_OUT - NSCLAA01                  DIRECTED MESSAGE
     Q_S0180_DEL_RES_FILE                  RECEIVED
     Q_S0200_WRITE_RES_FILE                RECEIVED
     Q_S0160_READ_HIST_FILE                RECEIVED


DATA BASE ACCESSES USED IN SUPERVISOR_PROCESS:
G_S_FT59AL_CC_RESULTS_HANDLER

R_PM_ACT
     Q_S0330_GET_R_PM_ACT                   GET

R_MAP_ADJ
     Q_S0400_GET_ADJ_CELL_IDXS_SERVIN       GET

R_PAR_ADJ
     Q_S0400_GET_ADJ_CELL_IDXS_SERVIN       GET

R_MAP_ADJ
     Q_S0400_GET_ADJ_CELL_IDXS_SERVIN       GET

R_PAR_ADJ
     Q_S0390_GET_ADJ_CELL_IDXS_TARGET       GET

R_TRX_MGT
     Q_S0290_GET_TRX_ID                     GET
     Q_S0260_GET_TRXS_OF_A_CELL             GET

R_PM_TASK
     Q_S0250_SET_R_PM_TASK                  MODIFY
     Q_S0240_CCRH_IS_ACTIVE                 GET

R_CELL_MGT
     Q_S0270_BEQ_SEQ_FROM_CELL_IDX          GET

R_PM_SC_G2
     Q_S0280_GET_PM_SCOPE                   GET


SSMS CALLED FROM SUPERVISOR_PROCESS: G_S_FT59AL_CC_RESULTS_HANDLER

          YTBGAA
          YTBNAA
          YTB4AB
          YTBRAD
\* END OF THE MADSIX GENERATED XPA AREA                              *\
*/
/**********************************************************************/
/*                END OF TOP LEVEL DOCUMENTATION                      */
/**********************************************************************/
/********************** CHANGE REPORT HISTORY *************************/
/*                                                                    */
/**********************************************************************/
/* PCS CHG  |  DATE    | UPDATED BY                                  **/
/*===================================================================**/
/* FT57AP1A | 24/07/98 | A.H.SWANN                                   **/
/*===================================================================**/
/*          |                                                        **/
/*          $$ PROBLEM DESCRIPTION:                                  **/
/*          |  INITIAL ZQ DELIVERY                                   **/
/*          |                                                        **/
/*          $$ CORRECTION DESCRIPTION:                               **/
/*          |                                                        **/
/*===================================================================**/
/* FT59ZQ1C | 25/06/99 | S.DONIZETTI                                 **/
/*===================================================================**/
/*          | BLOCK LENGTH ON TYPE 110-2 SHOULD BE 212 INSTEAD OF 218**/
/*          |--------------------------------------------------------**/
/*          | TYPE 110-3 MODIFIED IN ORDER TO TAKE INTO ACCOUNT ALSO **/
/*          | CONFIGURED BUT NOT REPORTED TRX'S                      **/
/*          | Q_S0790 MODIFIED                                       **/
/*===================================================================**/
/* FT59ZQ1D | 30/06/99 | S.DONIZETTI                                 **/
/*===================================================================**/
/*          | TYPE 110_4 COUNTERS SET TO OVERFLOW INSTEAD OF INVALID **/
/*          | IN CASE OF TCHRM BOOT                                  **/
/*          | Q_S0800 MODIFIED                                       **/
/*===================================================================**/
/* FT59ZQ1E | 02/07/99 | S.DONIZETTI                                 **/
/*===================================================================**/
/*          | TYPE 110_4 COUNTERS SET TO OVERFLOW INSTEAD OF INVALID **/
/*          | IN CASE OF SYS-CPR BOOT                                **/
/*          | Q_S0800 MODIFIED                                       **/
/*===================================================================**/
/* FT59ZQ1F | 02/07/99 | S.DONIZETTI                                 **/
/*===================================================================**/
/* ERRE 19  | Q_S0660 MODIFIED                                       **/
/* ---------|--------------------------------------------------------**/
/*          | PILOT FR55354 : TYPE 110 RESULT FILE - POINTER IS      **/
/*          | WRONGLY INCREMENTED WHEN THE LAST BLOCK IS HANDLED     **/
/*          | AND AT THE SAME TINE THE RECORD IS FULL                **/
/*          | Q_S0790 MODIFIED                                       **/
/*----------|--------------------------------------------------------**/
/*          | COUNTERS C153A & C153B SET TO FE INSTEAD OF FF WHEN    **/
/*          | THEY ARE INVALID                                       **/
/*          | Q_S0790 MODIFIED                                       **/
/*===================================================================**/
/* FT59ZQ1G | 19/07/99 | S.DONIZETTI                                 **/
/*===================================================================**/
/* FR20/    |                                                        **/
/* 54812 B5 | Q_S0490 MODIFIED                                       **/
/*----------|--------------------------------------------------------**/
/* ERRE 27  | Q_S0480 MODIFIED : A CHECK ON THE INVALID CASE HAS BEEN**/
/*          | INTRODUCED                                             **/
/*----------|--------------------------------------------------------**/
/* ERRE 35  | Q_S0660 & Q_S0670 MODIFIED                             **/
/*===================================================================**/
/* FT59ZQ1H | 01/10/99 | S.DONIZETTI                                 **/
/*===================================================================**/
/* PROBLEM  | MEAS_TYPE NOT CORRECTLY FILLED IN MSG 1085             **/
/*          | Q_S0370 MODIFIED                                       **/
/*===================================================================**/
/* FT59ZQ1I | 01/10/99 | S.DONIZETTI                                 **/
/* PROBLEM  | ACT_IDX   NOT CORRECTLY FILLED IN MSG 1085             **/
/*          | Q_S0370 MODIFIED                                       **/
/*===================================================================**/
/* FT59ZQ02 | 01/10/99 | S.DONIZETTI                                 **/
/*===================================================================**/
/*          | CRQ46816, CR52114/52115/52117, CRQ48846, CRQ48859      **/
/*          | Q_S0520, Q_S0630, Q_S0780, Q_S0790 MODIFIED            **/
/*===================================================================**/
/* FT59ZQ2A | 01/10/99 | L.DIERICK                                   **/
/*===================================================================**/
/*          | BLOCK LENGTH NOT ADJUSTED FOR T1, T18, T1102 & T1103   **/
/*          | ZS_TYPE_01_CELL_LEN, ZS_TYPE_18_GLOB_LEN,              **/
/*          | ZS_TYPE_110_2_CELL_LEN & ZS_TYPE_110_3_CELL_LEN        **/
/*===================================================================**/
/* FT59ZQ2B | 01/10/99 | L.DIERICK                                   **/
/*===================================================================**/
/*          | ZS_OBJ_IN_RES_REC CHANGED TO 4 FOR T1103 (WITH 2 MORE  **/
/*          | CTRS 370B AND 380B LESS OBJECTS IN RES_REC)            **/
/*===================================================================**/
/* FT59ZQ2C | 29/10/99 | L.DIERICK                                   **/
/*===================================================================**/
/* FR064327 | USE M_LAC_CI ISO M_CELL_IDENTIF FOR T180 RES FILE      **/
/*          | ZM_RES_TRAFF_FLO_CTRS MODIFIED                         **/
/*===================================================================**/
/* FT59ZQ2D | 15/11/99 | L.DIERICK                                   **/
/*===================================================================**/
/* FR064864 | M_BSS_PH_VERSION_RELEASE_6700 MODIFIED WITH            **/
/*          | M_BSS_PH_VERSION_RELEASE_6800                          **/
/*===================================================================**/
/* FT59ZQ2E | 24/11/99 | S.DONIZETTI                                 **/
/*===================================================================**/
/*          | M_BSS_PH_VERSION_RELEASE_6800 MODIFIED WITH            **/
/*          | M_BSS_PH_VERSION_RELEASE_61000 BECAUSE OF NEW MIB VERS **/
/*===================================================================**/
/* FT59ZQ2F | 29/11/99 | S.DONIZETTI                                 **/
/*===================================================================**/
/*          | TYPE 110 RESULT FILE - POINTER IS WRONGLY INCREMENTED  **/
/*          | WHEN THE LAST BLOCK IS HANDLED AND AT THE SAME TIME    **/
/*          | THE BUFFER IS FULL                                     **/
/*          | Q_S0790 MODIFIED                                       **/
/*===================================================================**/
/* FT59ZQ2G | 13/12/99 | P.BLOMMAERT                                 **/
/*===================================================================**/
/*          | WHEN NO SPACE ON DISC, 2ND HISTORY FILE ISN'T CLOSED   **/
/*          | Q_S0370_STATE_MACHINE: MODIFIED                        **/
/*          | ZM_SCENARIO_STATE: NEW STATE ZE_W_HIS_FILE_CLOSE_2     **/
/*===================================================================**/
/* FT59ZQ2H | 21/12/99 | S.DONIZETTI                                 **/
/*===================================================================**/
/*          | TYPE 110 RESULT FILE - FOR THE TYPE 110 THE RECORD SEQ **/
/*          |NUMBER IS IMPLEMENTED AS A BYTE AND IT MUST BE A INTEGER**/
/*          | Q_S0500 MODIFIED                                       **/
/*===================================================================**/
/* FT59ZQ2I | 22/12/99 | S.DONIZETTI                                 **/
/*===================================================================**/
/*          | TYPE 110 RESULT FILE - FILE SIZE IS NOT CORRECT IN     **/
/*          |THE RESULT FILE HEADER                                  **/
/*          | Q_S0500 MODIFIED                                       **/
/*===================================================================**/
/* FT59YQ01 | 14/04/00 | P.BLOMMAERT                                 **/
/*===================================================================**/
/*          | FIRST DELIVERY YQ (SMG29)                              **/
/*          | INVOKE SYNONYM ADDED FOR CORRECT BSS_PH_VERSION        **/
/*===================================================================**/
/* FT59YQ02 | 03/08/00 | P.BLOMMAERT                                 **/
/*===================================================================**/
/*          | Changed ZM_FILE_PROPS.ZB_TOT_RECS to INT instead of    **/
/*          | M_BYTE: Files can be bigger than 256 records!          **/
/*          | (Problem detected on B7 moduletest                     **/
/*          | ------------------------------------------------------ **/
/*          | FR 45/079619 correction: when Blocks 1135 fill exactly **/
/*          | one record, Block 1140 is 'forgotten'                  **/
/*          | Q_S0800_MAKE_RES_FILE_110_4 modified                   **/
/*===================================================================**/
/* FT59ZT02 | 03/08/00 | P.BLOMMAERT                                 **/
/*===================================================================**/
/*          | Changed ZM_FILE_PROPS.ZB_TOT_RECS to INT instead of    **/
/*          | M_BYTE: Files can be bigger than 256 records!          **/
/*===================================================================**/
/* FT59ZT2D | 05/02/02 | P.BLOMMAERT                                 **/
/*===================================================================**/
/*          | MERGED AND IMPROVED LATEST CHANGES ON B7.1             **/
/*          | WITTS 72/0208: NON H'FF FILLER                         **/
/*===================================================================**/
/* FT59ZT2E | 05/02/02 | P.BLOMMAERT                                 **/
/*===================================================================**/
/*          | WITTS 72/0261: ADDED PHHR (HISTORY FILE HEADER RECORD) **/
/*===================================================================**/
/* FT59AV3A | 06/11/02 | NAIKA                                       **/
/*===================================================================**/
/*          | WITTS 0032: WRONG VALUE IN TYPE 4 AND TYPE 5 COUNTERS  **/
/*===================================================================**/
/* FT59AV3B | 16/10/02 | NAIKA                                       **/
/*===================================================================**/
/*          |  MODIFIED TYPE 110 RESULT FILE AND TYPE 1 RESULT FILE  **/
/*          |  LCS COUNTERS C02i - TYPE 1 AND MC923A..D,MC02i        **/
/*          |  - TYPE 110 ADDED, MC780X -> MC380X.                   **/
/*          |  CORRECTION FOR FR 45/119977                           **/
/*===================================================================**/
/* FT59AV3C | 05/12/02 | NAIKA                                       **/
/*===================================================================**/
/*          |  CR 36/121490 ADDITION OF A FILLER IN BLOCK 1130       **/
/*===================================================================**/
/* FT59AV3D | 26/12/02 | CHEN ZHANGYI                                **/
/*===================================================================**/
/*          |  WITTS 76: WHEN NO HO, THE BTS NB. AND SECTOR NB. ARE  **/
/*          |  MISSING IN TYPE 26 RESULT FILE                        **/
/*===================================================================**/
/* FT59AV3E | 30/12/02 | CHEN ZHANGYI                                **/
/*===================================================================**/
/*          |  WITTS 76: WHEN NO HO, THE BTS NB. AND SECTOR NB. ARE  **/
/*          |  MISSING IN TYPE 26 RESULT FILE                        **/
/*===================================================================**/
/* FT59ZV01 | 16/09/03 | CHEN ZHANGYI                                **/
/*===================================================================**/
/*          |  FR 36/133308: PART OF INFO FOR TYPE 26 COUNTERS       **/
/*          |  MISSING IN PM FILES                                   **/
/*          |  MODIFY PROCEDURE Q_S0660_26_MAKE_RES_FILE_26          **/
/*===================================================================**/
/* FT59YV01 | 03/03/03 | DUHITA DHARWADKAR                           **/
/*===================================================================**/
/*          |  MODIFIED FOR B8 PACKAGE 6 CHANGES                     **/
/*===================================================================**/
/* FT59YV1A | 28/07/03 | DUHITA DHARWADKAR                           **/
/*===================================================================**/
/*          |  CR 36/130112 (REPLACING TYPE 26 COUNTERS C451 AND C453**/
/*          |  BY A FILLER                                           **/
/*===================================================================**/
/* FT59YV1B | 21/08/03 | DUHITA DHARWADKAR                           **/
/*===================================================================**/
/*          |  DELIVERED FOR DATAMODEL AV57                          **/
/*          |  M_BSS_PH_VERSION_RELEASE_8200 CHANGED TO              **/
/*          |  M_BSS_PH_VERSION_RELEASE_81300 BECAUSE OF NEW MIB     **/
/*          |  VERSION                                               **/
/*===================================================================**/
/* FT59YV1C | 22/09/03 | DUHITA DHARWADKAR                           **/
/*===================================================================**/
/*          |  DELIVERED FOR DATAMODEL AV58 AFTER MERGING FT59ZV01   **/
/*          |  INTO THE P6 BRANCH                                    **/
/*===================================================================**/
/* FT59YV1D | 07/10/03 | DUHITA DHARWADKAR                           **/
/*===================================================================**/
/*          |  CR 20/131170 (REMOVAL OF COUNTERS (M)N2.1 and FILLERS **/
/*          |  FOR TYPE 26 COUNTERS)                                 **/
/*===================================================================**/
/* FT59YV1E | 20/10/03 | DUHITA DHARWADKAR                           **/
/*===================================================================**/
/*          |  FR 36/134802 (TYPE 27 CONTAINS ONE BLOCK 270 EVEN IF  **/
/*          |  BLOCK 271 DOESN'T EXIST)                              **/
/*===================================================================**/
/* FT59YV1F | 31/10/03 | DUHITA DHARWADKAR                           **/
/*===================================================================**/
/*          |  DELIVERED FOR DATAMODEL AV60                          **/
/*===================================================================**/
/* FT59AW01 | 03/05/04 | DUHITA DHARWADKAR                           **/
/*===================================================================**/
/*          |  MODIFIED FOR B9 PACKAGE 1 CHANGES                     **/
/*          |  IMPACTED BECAUSE OF FEATURES:                         **/
/*          |           LOAD BASED 3G HO FILTERING                   **/
/*          |           AUTONOMOUS PACKET RESOURCE ALLOCATION(RAE-4) **/
/*          |           2G TO 3G HO                                  **/
/*          |           EME                                          **/
/*          |           COMPLETE CELL IDENTIFICATION                 **/
/*===================================================================**/
/* FT59AW1A | 11/08/04 | DUHITA DHARWADKAR                           **/
/*===================================================================**/
/*          |  DELIVERED FOR DATAMODEL AW07                          **/
/*===================================================================**/
/* FT59AW1B | 25/08/04 | DUHITA DHARWADKAR                           **/
/*          | WITTS 288/ WITTS 289                                   **/
/*          | E01 and E02 COUNTERS NOT REPORTED CORRECTLY IN CASE    **/
/*          | OF GSM AND DCS CELLS RESPECTIVELY                      **/
/*===================================================================**/
/* FT59AW1C | 06/10/04 | DUHITA DHARWADKAR                           **/
/*          | WITTS 288/ WITTS 289                                   **/
/*          | E01 and E02 COUNTERS NOT REPORTED CORRECTLY IN CASE    **/
/*          | OF GSM AND DCS CELLS RESPECTIVELY                      **/
/*===================================================================**/
/* FT59ZW01 | MODIFIED FOR B9 PACKAGE 2 FEATURE                      **/
/*          |    VGCS & EMLPP IMPROVEMENTS                           **/
/*===================================================================**/
/* FT59ZW1A | MERGED WITTS 288 TO B9 P2 BRANCH                       **/
/*          |                                                        **/
/*===================================================================**/
/* FT59ZW02 | 21/02/05                                               **/
/*          |  DELIVERED FOR DATAMODEL AW31, BUILD ZW0C              **/
/*===================================================================**/
/* FT59ZW2A | 20/04/05 | SHILPA                                      **/
/*          | CR 36/160486 (TO ADD PROVISION FOR                     **/
/*          | 2G TO 3G HO COUNTERS)                                  **/
/*===================================================================**/
/* FT59ZW2A | 15/08/05 | ZHUJ                                        **/
/*          | ER 5739 ( PMDIR file is not created by Mx BSC )        **/
/*===================================================================**/
/* FT59YW1D | 13/09/05 | ZHUJ                                        **/
/*          | ADD COMMON TRACE                                       **/
/*===================================================================**/
/* FT59YW13 | 07/10/05 | ZHUJ                                        **/
/*          | CR 6333                                                **/
/*===================================================================**/
/* FT59YWDA | 15/11/05 | ZHUJ                                        **/
/*          | ER 6389                                                **/
/*===================================================================**/
/* FT59YWDB | 02/12/05 | CHEN ZHANGYI                                **/
/*          | FR 36/174561                                           **/
/*===================================================================**/
/* FT59ZWDC | 17/01/06 | ZHUJ                                        **/
/*          | merge CR 20/171912 (WRONG VALUES OF BSC COUNTERS       **/
/*          | FOR PROVISIONED COUNTERS)                              **/
/*===================================================================**/
/* FT59YWIA | 12/04/06 | ZHUJ                                        **/
/*          | MERGE FR 20/181121 FROM AW30D                          **/
/*===================================================================**/
/* FT59YWIC | 06/06/06 |ZHUJ                                         **/
/*          | MERGE FR20/186523 (R180 OBSYNT FILES ARE NOT OBTAINED) **/
/*===================================================================**/
/* FT59YWID | 21/08/06 | ZHUJ                                        **/
/*          | MERGE ER 7614 FROM MXMR1                               **/
/**********************************************************************/
/* FT59ZW03 | 06/09/05 | SHILPA                                      **/
/*          | BUILD DELIVERY FOR DATAMODEL AW39                      **/
/*          | M_BSS_PH_VERSION_RELEASE_91200 CHANGED TO              **/
/*          | M_BSS_PH_VERSION_RELEASE_92100 BECAUSE OF NEW MIB      **/
/*          | VERSION                                                **/
/*===================================================================**/
/* FT59ZW3A | 21/11/05 | AKSHAY                                      **/
/*          | BUILD DELIVERY FOR DATAMODEL AW41                      **/
/*          | CR 20/171912 IMPLEMENTATION                            **/
/*          | COUNTER MC924H TO MC924K INITIALISED TO 0              **/
/*===================================================================**/
/* FT59ZX01 | 15/05/06 | SHAILESH S                                  **/
/* REASON   | FIRST DELIVERY FOR MX B10                              **/
/*===================================================================**/
/*===================================================================**/
/* FT59YX01 | 01/06/06 | SHAILESH S                                  **/
/* REASON   | FIRST DELIVERY FOR MX B10 MR2                          **/
/*===================================================================**/
/*===================================================================**/
/* FT59ZX1C | 19/06/06 | MALA                                        **/
/* REASON   | FR185495 TO MAKE IT INLINE WITH PM.CHH                 **/
/*===================================================================**/
/* FT59ZXID | 06/07/03 |ACHUK                                        **/
/*          | MERGE FR20/186523 (R180 OBSYNT FILES ARE NOT OBTAINED) **/
/*===================================================================**/
/* FT59YX02 | 26/07/06 | AKSHAY                                      **/
/* REASON   | MERGE FOR 186523 AND DMD IMPACT YTL3YX07               **/
/*===================================================================**/
/* FT59YX2A | 07/09/06 | AKSHAY                                      **/
/* REASON   | CR746 DMD IMPACT FOR YTL3YX10                          **/
/*===================================================================**/
/* FT59YX1C | 02/12/06 | SHAILESH                                    **/
/* REASON   | ER581 TYPE 35 RESULT FILE CREATION PROB                **/
/**********************************************************************/
/* FT59ZX1E | 25/08/06 | AKSHAY                                      **/
/*          | MERGE FROM BSCSAX01D FOR CR20/188510                   **/
/**********************************************************************/
/* FT59ZX1F | 11/09/06 | AKSHAY                                      **/
/*          | MERGE FROM B9 MX AW30k FOR ER7614			     **/
/*===================================================================**/
/* FT59ZXIG | 25/09/06 |MALA                                         **/
/*          | RT Trace CR620                                         **/
/*===================================================================**/
/* FT59ZXIH | 10/10/06 | SRINIVAS                                    **/
/*          | MERGE FROM PATCH FOR ER864                             **/
/*===================================================================**/
/* FT59ZX1I | 23/10/06 | SRINIVAS                                    **/
/*          | DMD IMPACT FOR ZX13                                    **/
/*          | M_BSS_PH_VERSION_RELEASE_101200 CHANGED TO             **/ 
/*          | M_BSS_PH_VERSION_RELEASE_101300 FOR NEW MIB            **/
/**********************************************************************/
/* FT59ZX1J | 01/12/06 | AKSHAY                                      **/
/*          | MERGE FROM B10 G2 AX30k       			     **/
/**********************************************************************/
/* FT59ZX1K | 09/02/07 | SRINIVAS                                    **/
/*          | DMD IMPACT FOR ZX17                                    **/
/*          | M_BSS_PH_VERSION_RELEASE_101300 CHANGED TO             **/ 
/*          | M_BSS_PH_VERSION_RELEASE_101400 FOR NEW MIB            **/
/**********************************************************************/
/* FT59ZX1L | 08/03/07 | MALA                                        **/
/*          | FOR FR20/206272                                        **/
/*          | FOR CR20/200567 SAME AS G2 CR20/203395                 **/
/**********************************************************************/
/* FT59AZ01 | 27/07/07 | SRINIVAS                                    **/
/*          | FIRST DELIVERY FOR B11 MX MR1                          **/
/*          | M_BSS_PH_VERSION_RELEASE_101400 CHANGED TO             **/ 
/*          | M_BSS_PH_VERSION_RELEASE_111000 FOR NEW MIB            **/
/**********************************************************************/
/* FT59AZ2A | 23/11/07 | SRINIVAS                                    **/
/*          | DELIVERY FOR B11 MX MR1 FOR IP FEATURE                 **/
/**********************************************************************/                                                           
/**********************************************************************/
/* FT59AZ2B | 09/01/08 | SHAILESH                                    **/
/*          | CORRECTION FOR FR36/229339                             **/
/**********************************************************************/
/*===================================================================**/
/* FT59AX6C | 10/05/08 | SHAILESH                                    **/
/*          | MERGE FOR CR20/233490 FROM G2                          **/
/*===================================================================**/
/* FT59AX6E | 14/12/08 | AMRITPAL                                    **/
/*          | CR260349 | Implementation of counter to monitor        **/
/* 	    | "SDCCH Assignment Request" with cause Location Area    **/
/*          | update, in order to calculate number of LAU failures.  **/
/*          | MC964                                                  **/
/*===================================================================**/
/* FT59XZXX | WI_ZZ3B | 29/04/09 | SRINIVAS                          **/
/*          | FR20/272059 - PM generic header length changed to 76   **/
/*===================================================================**/
/* FT59XZXX | 13/08/09 | AMITABH                                     **/
/* REASON   | M_BSS_PH_VERSION CHANGED                               **/
/*===================================================================**/
/* FT59XZXX | 11/09/09 | AMITABH                                     **/
/* REASON   | M_BSS_PH_VERSION CHANGED                               **/
/*===================================================================**/
/* FT59XZXX | 25/09/09 | AMITABH                                     **/
/* REASON   | FR36/284387 DEBUG TRACE INFORMATION REMOVED            **/
/*          | IN NORMAL TIMER EXPIRY CONDITION                       **/
/*===================================================================**/
/*===================================================================**/
/*FT59XZXX  | 08/01/10 | AMITABH                                     **/
/*          | MERGE FOR CR 20/279889, CR20/279046                    **/
/*          | M_BSS_PH_VERSION CHANGED                               **/
/*===================================================================**/
/* FG59XZXX | 01/03/10 | SRINIVAS                                    **/
/*          | CR20/286418 - More Incoming liks per cell              **/
/*===================================================================**/
/* FT59XZXX | 29.01.10 | AMRITPAL                                    **/
/* REASON   | CR36/288765                                            **/   
/*===================================================================**/
/* FT59XZXX | 07/05/10 | SRINIVAS                                    **/
/* REASON   | M_BSS_PH_VERSION CHANGED                               **/
/*===================================================================**/
/* FT59XZXX | 21/06/10 | AMRITPAL                                    **/
/* REASON   | M_BSS_PH_VERSION CHANGED                               **/
/*===================================================================**/
/* FT59XZXX | 05/08/10 | RAJASHRI                                    **/
/* REASON   | CR20/299359 | Lb INTERFACE                             **/
/* PACKAGE  | AZ20A_003                                              **/
/*===================================================================**/
/* FT59XZXX | 06/08/10 | RAJASHRI                                    **/
/* REASON   | CR - 298730 | IURG                                     **/
/* PACKAGE  | AZ20A_003                                              **/
/*===================================================================**/
/* FT59XZXX | 08/09/10 | AMITABH                                     **/
/* REASON   | MERGE FOR BTS SYCNCHRO FEATURE FROM AZ11A/002          **/
/* PACKAGE  | AZ20A_005                                              **/
/*===================================================================**/
/* FT59XZXX | 15/10/10 | VINEELA                                     **/
/* REASON   | MERGE FOR FR36/298770                                  **/
/* PACKAGE  | AZ20B/001                                              **/
/*===================================================================**/
/* FT59XZXX | 26/11/10 | VINEELA                                     **/
/* REASON   | CR36/302024 RFI4448                                    **/
/* PACKAGE  | AZ20D/002                                              **/
/*===================================================================**/
/* FT59XZXX | 20/12/10 | ATMARAM                                     **/
/* REASON   | FR36/304499 RFI4448                                    **/
/* PACKAGE  | AZ20E/001                                              **/
/*===================================================================**/
/* FT59XZXX | 11/07/11 | ATMARAM                                     **/
/* REASON   | DMD IMPACT ZZ79                                        **/
/* PACKAGE  | AZ20N/001                                              **/
/*===================================================================**/

/* FT59XZXX | 06/01/11 | VINEELA                                     **/
/* REASON   | MERGE FOR CR36/302024, CR36/303052 & FR36/304497 FROM  **/
/*          | B11_MX_MR2_ED2 AZ20E/001                               **/
/* PACKAGE  | AZ02A/001                                              **/
/*===================================================================**/
/* FT59XZXX | 08/04/11 | ATMARAM                                     **/
/* REASON   | FR36/307078,CR36/307898,FR36307401,FR36307402          **/
/*          | PM.CHH and DMD AL11A impact                            **/
/* PACKAGE  | AL02C/001                                              **/
/*===================================================================**/
/* FT59XZXX | 21/04/11 | ATMARAM                                     **/
/* REASON   | FR36/308400                                            **/
/* PACKAGE  | AL02C/003                                              **/
/*===================================================================**/
/* FT59XZXX | 06/05/11 | ATMARAM                                     **/
/* REASON   | 3BKA36FBR308660,3BKA36FBR308661, 3BKA36FBR308826       **/
/* PACKAGE  | AL02D/001                                              **/
/*===================================================================**/
/* FT59XZXX  | WI_AL2F | 06.06.11 | ASHWINI                          **/
/* REASON    | 3BKA36FBR309170                                       **/
/* PACKAGE   | AL02F/001                                             **/
/*===================================================================**/
/* FT59XZXX | 24/06/11 | ATMARAM                                     **/
/* REASON   | IMPACTED BY DMD AL14                                   **/
/* PACKAGE  | AL02G/001                                              **/
/*===================================================================**/
/* FT59XZXX | 19/07/11 | ATMARAM                                     **/
/* REASON   | IMPACTED BY DMD AL15                                   **/
/* PACKAGE  | AL15B/001                                              **/
/*===================================================================**/
/* FT59XZXX | 22/07/11 | ATMARAM                                     **/
/* REASON   | IMPACTED BY 3BKA36FBR310288                            **/
/* PACKAGE  | AL15B/001                                              **/
/*===================================================================**/
/* FT59XZXX | 14/10/11 | SUMIT                                       **/
/* REASON   | IMPACTED BY 3BKA36FBR308618                            **/
/* PACKAGE  | AL02M/001                                              **/
/*===================================================================**/
/* FT59XZXX | 11/11/11 | KIRAN                                       **/
/* REASON   | IMPACTED BY DMD AL31                                   **/
/* PACKAGE  | AL02O/001                                              **/
/*===================================================================**/
/* FT59XZXX | 09/12/11 | SUMIT                                       **/
/* REASON   | IMPACTED BY CR20/312407 & DCTPD00587569                **/
/* PACKAGE  | AL02Q/001                                              **/
/*===================================================================**/
/* FT59XZXX | 10/01/12 | SUMIT                                       **/
/* REASON   | IMPACTED BY CRI 00605444 & DCTPD00602805               **/
/* PACKAGE  | AL02Q/002                                              **/
/*===================================================================**/
/* FT59XZXX | 23/12/11 | BALA                                        **/
/* REASON   | AL42 DMD IMPACT,pm.chh impact for CR20/313054          **/
/* PACKAGE  | AL04B/001                                              **/
/*===================================================================**/
/* FT59XZXX | 03/2/12 | SWARNA                                       **/
/* REASON   | FR 619406                                              **/
/* PACKAGE  | AL04D/001                                              **/
/*===================================================================**/
/* FT59XZXX | 17/2/12 | KAVYA                                        **/
/* REASON   | CRI596704.01,DCT00633131.01                            **/
/* PACKAGE  | AL04E/001                                              **/
/*===================================================================**/
/* FT59XZXX | WI_AL4H | 12/03/2012 |                                 **/
/* REASON   | IMPACTED FOR CR649460, DCT646615                       **/
/*              & DCT609262                                          **/
/* PACKAGE  | AL04F/001                                              **/
/*===================================================================**/
/* FT59XZXX | 22/3/12 | KAVYA                                        **/
/* REASON   | CRI596704.01,DCT00633131.01                            **/
/* PACKAGE  | AL04E/001                                              **/
/*===================================================================**/
/*GDXBAZXX  | WI_AL4E | 21.03.2012 | KAVYA                           **/
/*REASON    | Impacted by DMD AL44                                   **/
/*PACKAGE   | AL04G/001                                              **/
/*===================================================================**/
/* FT58AZXX | WI_AL6D | 28/06/2012 | KAVYA                           **/
/* REASON   | IMPACTED FOR DMD AL63, DCTPD00725623, DCTPD00682571,   **/
/*					 AL04J Merge & PM.CHH        **/
/* PACKAGE  | AL06C/001                                              **/
/*===================================================================**/
/* FT58AZXX | WI_AL6C | 16/06/2012 | KAVYA                           **/
/* REASON   | IMPACTED FOR DMD AL62, DCTPD00605005 & PM.CHH          **/
/* PACKAGE  | AL06B/001                                              **/
/*===================================================================**/
/*===================================================================**/
/* FT58AZAL | WI_AL6E | 20/07/2012 | NUPUR                           **/
/* REASON   |DCTPD00749235,AL04K merge  & PM.CHH                     **/
/* PACKAGE  | AL06D/001                                              **/
/*===================================================================**/
/*===================================================================**/
/* FT58AZAL | WI_AL6F | 09/08/2012 | NUPUR                           **/
/* REASON   |DMD AL64,769144.01,769711.01,771882.01,769780.01        **/
/*                                   & PM.CHH                        **/
/* PACKAGE  | AL06D/001                                              **/
/*===================================================================**/
/* FT58AZAL | WI_AN10A | 09/05/2012 | SABIYA                         **/
/* REASON   | DMD ZN01                                               **/
/* PACKAGE  | AN10A/001                                              **/
/*===================================================================**/
/* FT58AZXX | WI_ZN1A | 24/09/2012 | KAVYA                           **/
/* REASON   | IMPACTED FOR DMD ZN02, DCTPD00599628 & PM.CHH          **/
/* PACKAGE  | AN10B/001                                              **/
/*===================================================================**/




/**********************************************************************/                                                           
/*  ERROR POINTS FOR FMM - CCRH                                       */
/**********************************************************************/
/*ERROR *  INPUT MSG   * ERROR  *      REMARKS          * DEV STATE / */
/*POINT *   OR CALL    * REASON *                       * PART / PROC */
/**********************************************************************/
/* H'60 * Q_S0315      *        * RECOVERABLE           *             */
/* H'61 * Q_S0900      *        * RECOVERABLE           *             */
/* H'62 * Q_S0900      *        * RECOVERABLE           *             */
/* H'63 * Q_S0900      *        * RECOVERABLE           *             */
/* H'64 * Q_S0900      *        * RECOVERABLE           *             */
/* H'65 * Q_S0900      *        * RECOVERABLE           *             */
/* H'66 * Q_S0900      *        * RECOVERABLE           *             */
/* H'67 * Q_S0900      *        * RECOVERABLE           *             */
/* H'68 * Q_S0900      *        * RECOVERABLE           *             */
/* H'69 * Q_S0900      *        * RECOVERABLE           *             */
/* H'70 * Q_S0900      *        * RECOVERABLE           *             */
/* H'71 * Q_S0170      *        * RECOVERABLE           *             */
/* H'72 * Q_S0900      *        * RECOVERABLE           *             */
/* H'73 * Q_S0210      *        * RECOVERABLE           *             */
/* H'74 * Q_S0355      *        * RECOVERABLE           *             */
/* H'80 * Q_S1005      *        * RECOVERABLE           *             */
/* H'81 * Q_S0900      *        * RECOVERABLE           *             */
/* H'82 * Q_S0900      *        * RECOVERABLE           *             */
/**********************************************************************/

/**********************************************************************/
/*                                                                    */
/*          1.   HEADER SECTION                                       */
/*                                                                    */
/**********************************************************************/
/**********************************************************************/
/*                                                                    */
/*          2.   DESCRIPTOR REFERENCE SECTION                         */
/*                                                                    */
/**********************************************************************/

DEFINE_FMM USING DESCRIPTOR FT7EALXX;

/**********************************************************************/
/*              SUPERVISOR PART                                       */
/**********************************************************************/
/**********************************************************************/
/*                                                                    */
/*          4.   SUPERVISOR MODULE                                    */
/*                                                                    */
/**********************************************************************/

H_S_FT59ZZ_CC_RESULTS_HANDLER:SUPERVISOR_MODULE;

/**********************************************************************/
/*                                                                    */
/*          4.1  INCLUDE REQUIRED OS MODES,                           */
/*               SYNONYMS, AND ALL OS PRIMITIVES                      */
/*                                                                    */
/**********************************************************************/

 INCLUDE MPINC(FY32ZZXX);

/**********************************************************************/
/*                                                                    */
/*          4.2  DATA SUBMODEL OR RELATION INVOCATION                 */
/*                                                                    */
/**********************************************************************/

INVOKE RELATION (R_CELL_MGT   ,
                 R_MAP_ADJ    ,
                 R_PAR_ADJ    ,
                 R_PM_ACT     ,
                 R_PM_SC_G2   ,
                 R_PM_TASK    ,
                 R_TRX_MGT    ,
                 R_BEQ_MGT    ,
                 R_ABIS_INF   ,
                 R_CONF_CE ,/*ADD BY ZHUJ FOR ER5739*/
	         R_F_ACCESS,
/*START : Addition for A-flex */ 
                 R_MSC_MGT
/*END : Addition for A-flex */ 
                 );

/**********************************************************************/
/*                                                                    */
/*          4.3  INVOKE REQUIRED MODES AND SYNONYMS                   */
/*                                                                    */
/**********************************************************************/

INVOKE MODE  (M_ACCESS                   ,
              M_BEQ_NBR                  ,
              M_BEQ_SECTOR_NBR           ,
              M_CELL_IDX                 ,
              M_DAY                      ,
              M_DB_STATUS                ,
              M_EBT0009_DBASE_ACC_FAIL   ,
              M_EBT0018_DB_DATA_INC      ,
              M_EBT0019_INC_MESS_DATA    ,
              M_FCB_INFO                 ,
              M_MEM_PARMS                ,
              M_MONTH                    ,
              M_PM_HEADER_RECORD         ,
              M_PM_SCOPE_IN_G2           ,
              M_SYS_REC_HEAD             ,
              M_TRX_ID                   ,
              M_TRX_IDX                  ,
              M_TS_NUMBER                ,
              M_TYPE_180_CTRS            ,
              M_TYPE27_ARRAY             ,
              M_USDA                     ,
              M_TYPE_32_CTRS             ,
              /* BEGIN: ADD-WIPRO-B9-P2-CHANGE */
              M_TYPE_34_1_CTRS           ,
              M_TYPE_34_2_CTRS           ,
              /* END: ADD-WIPRO-B9-P2-CHANGE */
              /*CR2517*/
              /*M_HIS_TYPE_110_4_CC        ,*/
              /*CR2517*/
              M_HIS_TYPE_01_CTRS_TRX     ,
              M_PM_CELL_ID_CGI           ,
              M_HIS_TYPE_01_CTRS_TRX     ,
              M_RESULT                   ,
              M_FILE_NAMEVERSION         ,
              M_RTTRACE_SCLASS_PM,
              M_TRC_ID,       /*FOR RT TRACE*/
              M_TRC_INFO,     /*FOR RT TRACE*/
              M_TRC_FILENAME,  /*FOR RT TRACE*/
        /* START : Addition for A-flex */
              /* Commented for CR20/279046*/
	    /*M_TCU_TYPE_110_PER_MSC,*/
              /* Commented for CR20/279046*/
	      M_TCU_TYPE_110_NRI_ARR,
        /* END : Addition for A-flex */    
              /*START: IURG*/
              M_TYPE_36_CTRS_0,
              M_R_BSS_PAR2,
              /*END: IURG*/
	  /*START:VAMOS*/
	  M_TYPE_37_CTRS_0,
	  M_TYPE_37_CTRS_1,
	  M_TYPE_110_CTRS_9,
          M_TYPE_110_CTRS_10, 
         /*START: CRI00611721 */
          M_LONG_INT,
         /*END: CRI00611721 */

          /*START: VAMOS MODE NTO OK*/
          /*Commented in AL11*/
          M_TCU_TYPE_37_CELL,
          M_TCU_TYPE32_ARRAY,
          M_TCU_TYPE34_ARRAY,
          /* M_TCU_TYPE_110_PER_CELL, */
          M_ALERTER_CNTRS,
          M_TCU_CNTRS_TYPE_19,
          M_TCU_TYPE_37_PER_CELL,
          /*END: VAMOS MODE NTO OK*/
          /*OLC*/
          M_TCU_TYPE_110_OLC_LONG,
          M_TCU_TYPE_110_OLC_INT,
          M_TCH_TYPE_110_OLC,
	  /* START : DCTPD00914281*/
          M_R_CELL_MGT,
          M_R_TRX_MGT
          /* END : DCTPD00914281 */
              );


INVOKE SYNONYM (M_ATT_MEAS                   ,
                M_ACT_STBY_ACTIVE            ,
                M_ACT_TAKEOVER_SIG           ,
                M_BSC_CURRENT_RELEASE        ,
                /* BEGIN  DELETE-WIPRO-B9-P1-CHANGE */
                /* M_BSC_RELEASE_REL_B8      , */
                /* END  DELETE-WIPRO-B9-P1-CHANGE */
                /* BEGIN: ADD-WIPRO-B9-P1-CHANGE */
                /*M_BSC_RELEASE_REL_B9*/         
                /* END: ADD-WIPRO-B9-P1-CHANGE */
                /*M_BSS_PH_VERSION_RELEASE_72200,*/
                /* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
                /*M_BSC_RELEASE_REL_B10        ,*/
                /*M_BSC_RELEASE_REL_B11*/        ,
                 M_BSC_RELEASE_REL_B12        ,
                /* END: ADD-WIPRO-B10-MR1-CHANGE */ 
                M_CHAN_TYPE_MAIN_COMB_BCCH   ,
                M_CHAN_TYPE_MCBCCH_W_CBCH    ,
                M_CHAN_TYPE_SDCCH            ,
                M_CHAN_TYPE_SDCCH_W_CBCH     ,
                M_CHAN_TYPE_TCH_DUAL_RATE    ,
                M_CHAN_TYPE_TCH_FULL_RATE    ,
                M_CHAN_TYPE_DYN_SDCCH        ,
                M_DB_SUCCESS                 ,
                M_DB_TUPHELD                 ,
                M_ERC6_USER_REC              ,
                M_ERT0009_DBASE_ACC_FAIL     ,
                M_ERT0018_DB_DATA_INC        ,
                M_ERT0019_INC_MESS_DATA      ,
                M_ERT0050_0808_MSG_UNEXPEC   ,
                /*add for CR6333*/
                M_ERT0027_MSF_DISK_ERROR     ,                
                M_FI_CC_RESULTS_HANDLER      ,
                M_INI_RESTART                ,
                M_INI_SYST_REST              ,
                M_LCE_ID_NULL                ,
                M_MAX_TRX_PER_CELL           ,
                M_NULL_BEQ                   ,
                M_NULL_CELL_IDX              ,
                M_NULL_CELL_ID               ,
                M_NULL_SECTOR                ,
                M_NULL_TRX_IDX               ,
                /*DEL by ZHUJ for ER6389 begin*/
                /*because using CM_FY32_PM_MAX_BSC_CIC instead*/
                /*
                M_PM_MAX_BSC_CIC             ,
                */
                /*DEL by ZHUJ end*/
                M_PROCESS_ID_NULL            ,
              /* START : Addition for A-flex */ 
                M_MAX_MSC                    ,
	     /* END : Addition for A-flex */ 
	        M_RATY_G1                    ,
                M_SBLT_NULL                  ,
                M_TIMER_IDENT_NULL           ,
                /*START: IURG*/
                M_MAX_RNC,
                /*END: IURG*/
             /* BEGIN: ADD-WIPRO-B9-P1-CHANGE */
                M_BSS_CURRENT_PH_VERSION     ,
             /* END: ADD-WIPRO-B9-P1-CHANGE */
              /* WIPRO B11 MX MR1 CHANGE */  
              /* M_BSS_PH_VERSION_RELEASE_101400 */
                 /*M_BSS_PH_VERSION_RELEASE_111000*/
                /*  M_BSS_PH_VERSION_RELEASE_112300 */
                /* compilation error for zz11 */ 
	/*	M_BSS_PH_VERSION_RELEASE_112400*/  
                /* compilation error for zz13 */ 
	/*	M_BSS_PH_VERSION_RELEASE_112500,*/ 
	/*	M_BSS_PH_VERSION_RELEASE_112600,*/ 
        /*	M_BSS_PH_VERSION_RELEASE_112700,*/
        /*        M_BSS_PH_VERSION_RELEASE_115200*/
	/*	M_BSS_PH_VERSION_RELEASE_115300 */
        /*        M_BSS_PH_VERSION_RELEASE_115400*/
        /*        M_BSS_PH_VERSION_RELEASE_115500 */
/*                M_BSS_PH_VERSION_RELEASE_118000, */
                /*  M_BSS_PH_VERSION_RELEASE_120100,*/
                /* M_BSS_PH_VERSION_RELEASE_120600, */
		/*M_BSS_PH_VERSION_RELEASE_120800,*/
                /*M_BSS_PH_VERSION_RELEASE_120900,*/
               /* M_BSS_PH_VERSION_RELEASE_121000,*/
	/*	M_BSS_PH_VERSION_RELEASE_122000,*/
           /* M_BSS_PH_VERSION_RELEASE_122100,*/
	/*	M_BSS_PH_VERSION_RELEASE_122200,*/
                M_BSS_PH_VERSION_RELEASE_124000,
	        M_BSS_PH_VERSION_RELEASE_124100,
              /*  M_BSS_PH_VERSION_RELEASE_125000,  */
               /* M_BSS_PH_VERSION_RELEASE_125100,*/
                  M_BSS_PH_VERSION_RELEASE_125500,
               /* M_BSS_PH_VERSION_RELEASE_135000,	
                M_BSS_PH_VERSION_RELEASE_135100, */
                /*START: IURG*/
                M_RID_R_BSS_PAR2,
                /*END: IURG*/
            /*AM: START DCTPD00761944*/
                M_ABIS_TRANS_MODE_IPETH,
                M_ABIS_TRANS_MODE_IPFR,
                M_ABIS_TRANS_MODE_IPUN,
                M_ABIS_TRANS_MODE_IP_E1WCP,
            /*AM: END DCTPD00761944*/  
	/* WIPR<F13>O B11 MX MR1 CHANGE */
                /* START : DCTPD00914281*/
         	M_RID_R_CELL_MGT,
         	M_RID_R_TRX_MGT,
         	/* END : DCTPD00914281*/
               /*OLc*/
                M_MAX_RRH_PER_OLC,
                M_MAX_TRX_PER_OLC
           );
                
                /*RT Trace*/               
SEIZE TRC_BSC_PM1 <> C ( 
                           M_TRC_FILENAME LOC, 
                           LONG_INT, 
                           LONG_INT,
                           M_TRC_ID LOC,
                           M_TRC_INFO LOC,
                           LONG_INT,
                           LONG_INT,
                           LONG_INT);
SEIZE TRC_BSC_PM2 <> C ( 
                           M_TRC_FILENAME LOC, 
                           LONG_INT, 
                           LONG_INT,
                           M_TRC_ID LOC,
                           M_TRC_INFO LOC,
                           LONG_INT,
                           LONG_INT,
                           LONG_INT);                           
SEIZE TRC_BSC_PM3 <> C ( 
                           M_TRC_FILENAME LOC, 
                           LONG_INT, 
                           LONG_INT,
                           M_TRC_ID LOC,
                           M_TRC_INFO LOC,
                           LONG_INT,
                           LONG_INT,
                           LONG_INT);
SEIZE TRC_BSC_API1 <> C ( 
                           M_TRC_FILENAME LOC, 
                           LONG_INT, 
                           LONG_INT,
                           M_TRC_ID LOC,
                           M_TRC_INFO LOC,
                           LONG_INT,
                           LONG_INT,
                           LONG_INT);  
SEIZE TRC_BSC_API2 <> C ( 
                           M_TRC_FILENAME LOC, 
                           LONG_INT, 
                           LONG_INT,
                           M_TRC_ID LOC,
                           M_TRC_INFO LOC,
                           LONG_INT,
                           LONG_INT,
                           LONG_INT);                                                    
SEIZE TRC_BSC_ERR1 <> C ( 
                           M_TRC_FILENAME LOC, 
                           LONG_INT, 
                           LONG_INT,
                           M_TRC_ID LOC,
                           M_TRC_INFO LOC,
                           LONG_INT,
                           LONG_INT,
                           LONG_INT);
SEIZE TRC_BSC_ERR2 <> C ( 
                           M_TRC_FILENAME LOC, 
                           LONG_INT, 
                           LONG_INT,
                           M_TRC_ID LOC,
                           M_TRC_INFO LOC,
                           LONG_INT,
                           LONG_INT,
                           LONG_INT);                           
SEIZE TRC_BSC_ERR3 <> C ( 
                           M_TRC_FILENAME LOC, 
                           LONG_INT, 
                           LONG_INT,
                           M_TRC_ID LOC,
                           M_TRC_INFO LOC,
                           LONG_INT,
                           LONG_INT,
                           LONG_INT);

/* BEGIN-MERGE-FOR-FR36_298770_new_sync_API */
SEIZE P_MXFSXV_S1010_FILE_COPY <> C (
                                     M_FILE_NAMEVERSION LOC,
                                     M_DRIVE_NO,
                                     M_BOOL,
                                     M_RESULT LOC);
/* END-MERGE-FOR-FR36_298770_new_sync_API */

/**********************************************************************/
/*                                                                    */
/*          4.4  LOCAL MODE DEFINITIONS                               */
/*                                                                    */
/**********************************************************************/
/**********************************************************************/
/*                      REAL TIME TRACE                               */
/**********************************************************************/

/*ADD BY ZHUJ BEGIN*/
SYN FILENAME M_TRC_FILENAME = 'CCRH FMM       ';
NEWMODE ZM_TRACEID = ARRAY(SET(
                             IMSD,/*INTERNAL SENDING MESSAGE*/
                             IMCS,/*INTERNAL CONSUME MESSGE*/
                             EMSN,/*INTER-PROCESS SENDING MESSAGE*/
                             EMRV,/*INTER-PROCESS RECEIVED MESSAGE*/
                             ERIR,/*DATA RECIVED FROM INTERFACE WRONG*/
                             ERRC,/*ERROR WHICH LEADS TO SYSTEM CRASH*/
                             NORM,/*NORMAL TRACE*/
                             DUMP,/*NORMAL MEMORY DUMP*/
                             WARN)/*WARNING MESSAGE*/
                             ) M_TRC_ID;
SYN TRACEID ZM_TRACEID = (:
                          (IMSD): 'IMSD ',
                          (IMCS): 'IMCS ',
                          (EMSN): 'EMSN ',
                          (EMRV): 'EMRV ',
                          (ERIR): 'ERIR ',
                          (ERRC): 'ERRC ',
                          (NORM): 'NORM ',
                          (DUMP): 'DUMP ',
                          (WARN): 'WARN '
                         :);  
NEWMODE ZM_INT_TO_LN_INT = STRUCT (CASE OF
                      : ZB_LONG_INT LONG_INT,/* MODE CONVERSION */ 
                      : ZB_LOW_INT  INT,
                        ZB_HIGH_INT INT      /* LONG INTEGER.    */   
                      ESAC);

/**********************************************************************/
/*                      MESSAGE NUMBERS                               */
/**********************************************************************/
#ifdef MXELITE   
SYN NULL = PTR(H'0000_0000);
#endif
SYN ZS_BASE_PCS               = 16640;
SYN ZS_CCRH_REL_IDX           = 3;
SYN ZS_COLL_PERIOD            = 15;
SYN ZS_DISK_TIMEOUT           = 100;
SYN ZS_DPVAL_INVALID          = -1;
SYN ZS_DPVAL_OVERFLOW         = -2; /*H'FFFE;*/
SYN ZS_FIRST_HIST_REC         = 0;
SYN ZS_HPMR_SIZE              = 200;
SYN ZS_MAX_ADJ_CELLS          = 64;
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
SYN ZS_MAX_LAPD_PER_BSC = CM_FY32_MAX_LAPD_PER_TCU
                              * CM_FY32_PM_MAX_NBR_TCU;
SYN ZS_MAX_CELLS              = 700/*500CR312499*/;
/* END: ADD-WIPRO-B10-MR1-CHANGE */
SYN ZS_MAX_N7_LINKS           = 16;
SYN ZS_MAX_RETRY              = 3;
SYN ZS_MAX_X25_LINKS          = 4;

/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */

/*BEGIN: CR20/286418 - More incoming links per cell */
/*SYN ZS_MAX_180_CELLS          = 10300L;*/
/*START: DCT 609262 W.A.*/
/*SYN ZS_MAX_180_CELLS          = 10918L;*/
SYN ZS_MAX_180_CELLS          = 16000L;
/*END: DCT 609262 W.A.*/
/*END: CR20/286418 - More incoming links per cell */

/* END: ADD-WIPRO-B10-MR1-CHANGE */

/* BEGIN: ADD-WIPRO-B10-MR2-CHANGE */
SYN ZS_MAX_TC		      = 8;
SYN ZS_MAX_BTS		      =255;
/* END: ADD-WIPRO-B10-MR2-CHANGE */
/* BEGIN: ADD-WIPRO-B11-PKG1-CHANGE */
SYN ZS_MAX_MAX_ABIS	      = 177;
SYN ZS_MAX_MAX_GSL	      = 20;
/* BEGIN: ADD-WIPRO-B11-PKG1-CHANGE */
SYN ZS_NULL_CI                = -1; /*H'FFFF;*/
SYN ZS_NULL_LAC               = -1; /*H'FFFF;*/

/* BEGIN: ADD-WIPRO-B9-P1-CHANGE */
SYN ZS_NULL_MCC_DIGITS M_MCC_DIGITS = (:
        .B_MCC_DGT2   : H'F,
        .B_MCC_DGT1   : H'F,
        .B_MNC_DGT3   : H'F,
        .B_MCC_DGT3   : H'F :);

SYN ZS_NULL_MNC_DIGITS M_MNC_DIGITS = (:
        .B_MNC_DGT2   : H'F,
        .B_MNC_DGT1   : H'F  :);
/* END: ADD-WIPRO-B9-P1-CHANGE */

SYN ZS_FFFF                   = H'FFFF;
SYN ZS_ONE_ZERO               = H'30;
/*FR20/272059 - PM generic header length changed to 76 */
/*SYN ZS_PM_HEADER_SIZE         = 74;*/
SYN ZS_PM_HEADER_SIZE         = 76;
/*FR20/272059 - PM generic header length changed to 76 */
SYN ZS_PM_NULL_SBLT           = ZS_FFFF; /* H'FFFF; */
SYN ZS_RES_REC_IN_BUFF        = 8;
SYN ZS_RES_REC_SIZE           = 256;
SYN ZS_TIMER_PRIORITY         = 4;
SYN ZS_TYPE_01_CELL_LEN       = 226;
SYN ZS_TYPE_01_CELL_TAG       = 11;
SYN ZS_TYPE_01_TRX_LEN        = 30;
SYN ZS_TYPE_01_TRX_TAG        = 12;
SYN ZS_TYPE_02_CELL_LEN       = 34;
SYN ZS_TYPE_02_CELL_TAG       = 21;
SYN ZS_TYPE_03_GLOB_LEN       = 2;
SYN ZS_TYPE_03_GLOB_TAG       = 30;
/*Commented for A-flex*/
/*CR241594*/
/*SYN ZS_TYPE_03_CELL_LEN       = 20;*/ 
/*CR241594*/
SYN ZS_TYPE_03_CELL_TAG       = 31;
SYN ZS_TYPE_04_GLOB_LEN       = 2;
SYN ZS_TYPE_04_GLOB_TAG       = 40;
SYN ZS_TYPE_04_CELL_LEN       = 12;
SYN ZS_TYPE_04_CELL_TAG       = 41;
SYN ZS_TYPE_05_GLOB_LEN       = 2;
SYN ZS_TYPE_05_GLOB_TAG       = 50;
SYN ZS_TYPE_05_CELL_LEN       = 28;
SYN ZS_TYPE_05_CELL_TAG       = 51;
SYN ZS_TYPE_06_CELL_LEN       = 198;
SYN ZS_TYPE_06_CELL_TAG       = 60;
SYN ZS_TYPE_07_LINK_LEN       = 40;
SYN ZS_TYPE_07_LINK_TAG       = 71;
/*CR36/236932*/
SYN ZS_TYPE_7_2_GSL_LEN      = 30;
SYN ZS_TYPE_7_2_GSL_TAG      = 72;
/*CR36/236932*/
SYN ZS_TYPE_08_LINK_LEN       = 10;
SYN ZS_TYPE_08_LINK_TAG       = 81;
SYN ZS_TYPE_09_N7_LEN         = 64;
SYN ZS_TYPE_09_N7_TAG         = 91;
SYN ZS_TYPE_09_LINK_LEN       = 6;
SYN ZS_TYPE_09_LINK_TAG       = 93;
SYN ZS_TYPE_18_GLOB_LEN       = 88;
SYN ZS_TYPE_18_GLOB_TAG       = 180;
SYN ZS_TYPE_18_LINK_LEN       = 10;
SYN ZS_TYPE_18_LINK_TAG       = 181;
SYN ZS_TYPE_19_CELL_LEN       = 34;
SYN ZS_TYPE_19_CELL_TAG       = 190;
SYN ZS_TYPE_25_N7_LEN         = 42;
SYN ZS_TYPE_25_N7_TAG         = 251;
SYN ZS_TYPE_26_GLOB_LEN       = 2;
SYN ZS_TYPE_26_GLOB_TAG       = 260;
/*SYN ZS_TYPE_26_SERV_LEN       = 28;*/
/* BEGIN: ADD-WIPRO-B9-P1-CHANGE */
SYN ZS_TYPE_26_SERV_LEN       = 32;
/* END: ADD-WIPRO-B9-P1-CHANGE */
SYN ZS_TYPE_26_SERV_TAG       = 261;
SYN ZS_TYPE_27_GLOB_LEN       = 2;
SYN ZS_TYPE_27_GLOB_TAG       = 270;
/* BEGIN  DELETE-WIPRO-B9-P1-CHANGE */
/*SYN ZS_TYPE_27_TARG_LEN       = 30;*/
/* END  DELETE-WIPRO-B9-P1-CHANGE */
/* BEGIN: ADD-WIPRO-B9-P1-CHANGE */
SYN ZS_TYPE_27_TARG_LEN       = 34;
/* END: ADD-WIPRO-B9-P1-CHANGE */
SYN ZS_TYPE_27_TARG_TAG       = 271;
SYN ZS_TYPE_28_CELL_LEN       = 156;
SYN ZS_TYPE_28_CELL_TAG       = 280;
SYN ZS_TYPE_29_CELL_LEN       = 82;
SYN ZS_TYPE_29_CELL_TAG       = 290;
SYN ZS_TYPE_30_GLOB_LEN       = 12;
SYN ZS_TYPE_30_GLOB_TAG       = 300;
SYN ZS_TYPE_32_CELL_LEN       = 34;
SYN ZS_TYPE_32_CELL_TAG       = 320;
/* BEGIN: ADD-WIPRO-B9-P1-CHANGE */
SYN ZS_TYPE_33_CELL_LEN       = 6;
SYN ZS_TYPE_33_CELL_TAG       = 330;
/* BEGIN: ADD-WIPRO-B9-P2-CHANGE */
SYN ZS_TYPE_34_BSC_LEN        = 4;
SYN ZS_TYPE_34_BSC_TAG        = 340;
SYN ZS_TYPE_34_CELL_LEN       = 40;
SYN ZS_TYPE_34_CELL_TAG       = 341;
/* END: ADD-WIPRO-B9-P2-CHANGE */
/* BEGIN: ADD-WIPRO-B10-MR2-CHANGE */
/*CR2517*/
SYN ZS_TYPE_35_CELL_LEN       = 10;
/*CR2517*/
SYN ZS_TYPE_35_CELL_TAG       = 350;
/* BEGIN: ADD-WIPRO-B11-MR0-PKG1-CHANGE */
/* CR20/225233 */
/*CR2517*/
SYN ZS_TYPE_35_3_TC_LEN         = 22;
/*CR2517*/
SYN ZS_TYPE_35_3_TC_TAG         = 353;
/*CR2517*/
/* CR20/225233 */
/*SYN ZS_TYPE_35_TC_LEN         = 8;*/
/*CR2517*/
SYN ZS_TYPE_35_TC_LEN         = 106;
/*CR2517*/
/* BEGIN: ADD-WIPRO-B11-MR0-PKG1-CHANGE */
SYN ZS_TYPE_35_TC_TAG         = 354;
/* BEGIN: ADD-WIPRO-B11-MR0-PKG1-CHANGE */
/*SYN ZS_TYPE_35_BTS_LEN        = 4;*/
/*CR2517*/

/*BEGIN : FR36/307402*/
/*SYN ZS_TYPE_35_BTS_LEN        = 142;*/
SYN ZS_TYPE_35_BTS_LEN        = 158;
/*END : FR36/307402*/

/*CR2517*/
/* BEGIN: ADD-WIPRO-B11-MR0-PKG1-CHANGE */
SYN ZS_TYPE_35_BTS_TAG        = 355;
/* START: CR20/284751 BTS FRQ SYNCH */
SYN ZS_TYPE_35_BTS_BLK_7_8_LEN = 54;
SYN ZS_TYPE_35_BTS_BLK_7_8_TAG = 356;
/* END: CR20/284751  BTS FRQ SYNCH*/
/* BEGIN: ADD-WIPRO-B11-MR0-PKG1-CHANGE */
SYN ZS_TYPE_35_GSL_LEN        = 14;
SYN ZS_TYPE_35_GSL_TAG        = 357;
/*CR2517*/
SYN ZS_TYPE_35_ABIS_LEN        = 38;
/*CR2517*/
SYN ZS_TYPE_35_ABIS_TAG        = 358;
/* BEGIN: ADD-WIPRO-B11-MR0-PKG1-CHANGE */

/* END: ADD-WIPRO-B10-MR2-CHANGE */
/* END: ADD-WIPRO-B9-P1-CHANGE */
SYN ZS_TYPE_110_1_CELL_LEN    = 196; 
SYN ZS_TYPE_110_1_CELL_TAG    = 1110;
SYN ZS_TYPE_110_2_CELL_LEN    = 218;
SYN ZS_TYPE_110_2_CELL_TAG    = 1120;
/* BEGIN: ADD-WIPRO-B9-P2-CHANGE CR 36/160486 */
/* CR20/225233 */  
/*SYN ZS_TYPE_110_3_CELL_LEN    = 190;*/
SYN ZS_TYPE_110_3_CELL_LEN    = 232;
/* CR20/225233 */  
/* END: ADD-WIPRO-B9-P2-CHANGE CR 36/160486 */
SYN ZS_TYPE_110_3_CELL_TAG    = 1122;
SYN ZS_TYPE_110_4_GLOB_LEN    = 2;
SYN ZS_TYPE_110_4_GLOB_TAG    = 1125;
/* CR20/225233 */
/*SYN ZS_TYPE_110_4_CELL_LEN    = 96;*/
/*BEGIN: BTS_TEMPERATURE_LOGGING*/
/*START: MC Counters*/
/*SYN ZS_TYPE_110_4_CELL_LEN    = 138;*/
SYN ZS_TYPE_110_4_CELL_LEN    = 218;
/*END: MC Counters*/
/*END: BTS_TEMPERATURE_LOGGING*/
/*CR2517*/
/*SYN ZS_TYPE_110_4_CELL_LEN    = 140;*/ 
/*CR2517*/
/* CR20/225233 */
SYN ZS_TYPE_110_4_CELL_TAG    = 1130;
SYN ZS_TYPE_110_5_CIC_LEN     = 14;
SYN ZS_TYPE_110_5_CIC_TAG     = 1135;
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
/*SYN ZS_TYPE_110_6_BSC_LEN     = 12;*/
/* CR 188510 START */
/* CR20/225233 */  
/*SYN ZS_TYPE_110_6_BSC_LEN     = 40;*/
/*CR2517*/
SYN ZS_TYPE_110_6_BSC_LEN     = 44;
/*CR2517*/
/* CR20/225233 */  
/* CR 188510 END */
/* END: ADD-WIPRO-B10-MR1-CHANGE */
SYN ZS_TYPE_110_6_BSC_TAG     = 1140;
/*BEGIN: CR 605005 */
SYN ZS_TYPE_110_14_BSC_LEN     = 4;
SYN ZS_TYPE_110_14_BSC_TAG     = 1141;
/*END: CR 605005 */
SYN ZS_TYPE_180_GLOB_LEN      = 2;
SYN ZS_TYPE_180_GLOB_TAG      = 1800;
/* BEGIN  DELETE-WIPRO-B9-P1-CHANGE */
/*SYN ZS_TYPE_180_CELL_LEN      = 16;*/
/* END  DELETE-WIPRO-B9-P1-CHANGE */
/* BEGIN: ADD-WIPRO-B9-P1-CHANGE */
SYN ZS_TYPE_180_CELL_LEN      = 20;
/* END: ADD-WIPRO-B9-P1-CHANGE */
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
SYN ZS_TYPE_110_8_MSC_LEN     = 90;
SYN ZS_TYPE_110_8_MSC_TAG     = 1142;
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
/*ADDED FOR GSL COUNTERS MEMO*/        
SYN ZS_TYPE_110_9_GSL_LEN     = 34;
SYN ZS_TYPE_110_9_GSL_TAG     = 1145;
/*ADDED FOR GSL COUNTERS MEMO*/      
/*START: IURG*/  
SYN ZS_TYPE_36_RNC_LEN = 26;
SYN ZS_TYPE_36_RNC_TAG = 360;
/*END: IURG*/  
/*BEGIN:VAMOS*/
/*BEGIN : CR20_310381*/
/*SYN ZS_TYPE_37_0_CELL_LEN    = 212;*/
SYN ZS_TYPE_37_0_CELL_LEN    = 216;
/*END : CR20_310381*/
SYN ZS_TYPE_37_0_CELL_TAG    = 370;
/*BEGIN : CR20_310381*/
/*SYN ZS_TYPE_37_1_CELL_LEN    = 150;*/
SYN ZS_TYPE_37_1_CELL_LEN    = 182;
/*END : CR20_310381*/
SYN ZS_TYPE_37_1_CELL_TAG    = 371;
/*END:VAMOS*/
/* START : Addition for A-flex */
/*CR241594*/
/*Commented for CR251325*/
/*SYN ZS_TYPE_03_CELL_LEN       = 24;*/ 
/*CR241594*/
/*CR36/251325 START*/
SYN ZS_TYPE_03_CELL_LEN       = 20; 
/*CR36/251325 END*/

SYN ZS_TYPE_110_10_GLOB_LEN     = 2;
SYN ZS_TYPE_110_10_GLOB_TAG     = 1143;

SYN ZS_TYPE_110_10_NRI_LEN     = 42;
SYN ZS_TYPE_110_10_NRI_TAG     = 1144;
/* END : Addition for A-flex */ 
/*BEGIN:AUPOIP*/
SYN ZS_TYPE_110_12_CELL_LEN    = 72;
SYN ZS_TYPE_110_12_CELL_TAG    = 1146;
/*END:AUPOIP*/
/* BEGIN CR:745699 */
SYN ZS_TYPE_110_15_BSC_LEN     =  134;/*50+21*4 CR934803 MC1614~1634*/
SYN ZS_TYPE_110_15_BSC_TAG     =   1147;
/* END CR:745699 */

/*START CR MOCN */
SYN ZS_TYPE_110_17_MSC_LEN    = 70;
SYN ZS_TYPE_110_17_MSC_TAG    = 1148;
/*END CR MOCN */

/*begin CR1238146 A-GPS*/
SYN ZS_TYPE_110_18_CELL_LEN    = 90;
SYN ZS_TYPE_110_18_CELL_TAG    = 1127;
/*end CR1238146 A-GPS*/

/*BEGIN: CR20/313054 */
SYN ZS_TYPE_110_13_CELL_LEN    = 66;
SYN ZS_TYPE_110_13_CELL_TAG    = 1124;
/*END: CR20/313054 */
/*BEGIN: CR36/302024 - RFI4448*/
/*SYN ZS_TYPE_110_11_CELL_LEN    = 82;*/
SYN ZS_TYPE_110_11_CELL_LEN    = 106;/*AUPOIP*/
SYN ZS_TYPE_110_11_CELL_TAG    = 1126;
/*END: CR36/302024*/

SYN ZS_TYPE_180_CELL_TAG      = 1810;
SYN ZS_VOID                   = H'FF;
SYN ZS_WAIT_TIME_DB           = 3;   /* 300MSECS */
SYN ZS_WAIT_TIME_MEM          = 40;  /*4000MSECS */
SYN ZS_WAIT_TIME_RES_WRT      = 20;  /*2000MSESCS*/
SYN ZS_0017_SM_ACT_REQ        M_MSG_NBR = 0017;
SYN ZS_0019_INIT_REQ          M_MSG_NBR = 0019;
SYN ZS_0121_OPEN_FILE         M_MSG_NBR = 0121;
SYN ZS_0122_FILE_OPENED       M_MSG_NBR = 0122;
SYN ZS_0123_READ_RECORD       M_MSG_NBR = 0123;
SYN ZS_0124_READ_REC_CNF      M_MSG_NBR = 0124;
SYN ZS_0125_WRITE_RECORD      M_MSG_NBR = 0125;
SYN ZS_0126_WRITE_REC_CNF     M_MSG_NBR = 0126;
SYN ZS_0127_CLOSE_FILE        M_MSG_NBR = 0127;
SYN ZS_0128_FILE_CLOSED       M_MSG_NBR = 0128;
SYN ZS_0316_FILE_HNDL_REQ     M_MSG_NBR = 0316;
SYN ZS_0317_FILE_HNDL_CNF     M_MSG_NBR = 0317;
SYN ZS_1083_PM_CC_RES_REQ     M_MSG_NBR = 1083;
SYN ZS_1085_PM_CC_RES_CNF     M_MSG_NBR = 1085;
SYN ZS_6836_TIME_OUT          M_MSG_NBR = 6836;
/* BEGIN  DELETE-WIPRO-B9-P1-CHANGE */
/*SYN ZS_180_REC_SIZE           = 230;*/
/* END  DELETE-WIPRO-B9-P1-CHANGE */
/* BEGIN: ADD-WIPRO-B9-P1-CHANGE */
SYN ZS_180_REC_SIZE           = 226;
/* END: ADD-WIPRO-B9-P1-CHANGE */
SYN ZS_5_REC_SIZE             = 218;
SYN ZS_4_REC_SIZE             = 234;
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
SYN ZS_3_REC_SIZE             = 224; 
/* END: ADD-WIPRO-B10-MR1-CHANGE */
SYN ZS_NULL                   = 0;

/* START: CRI00611721 */
SYN ZS_MAX_RECORDS_IN_FILE    = 65535L;
/*END: CRI00611721 */

SYN ZS_FILE_NAME    ZM_FILE_NAME_ARR  = (:
                   (1): (:'P','M','R','E','S','-','0','1':),
                   (2): (:'P','M','R','E','S','-','0','2':),
                   (3): (:'P','M','R','E','S','-','0','3':),
                   (4): (:'P','M','R','E','S','-','0','4':),
                   (5): (:'P','M','R','E','S','-','0','5':),
                   (6): (:'P','M','R','E','S','-','0','6':),
                   (7): (:'P','M','R','E','S','-','0','7':),
                   (8): (:'P','M','R','E','S','-','0','8':),
                   (9): (:'P','M','R','E','S','-','0','9':),
                   (10):(:'P','M','O','B','S','-','1','0':),
                   (11):(:'P','M','O','B','S','-','1','1':),
                   (12):(:'P','M','O','B','S','-','1','2':),
                   (13):(:'P','M','O','B','S','-','1','3':),
                   (14):(:'P','M','O','B','S','-','1','4':),
                   (15):(:'P','M','O','B','S','-','1','5':),
                (16:17):(:'P','M','D','U','M','M','Y','A':),
                   (18):(:'P','M','R','E','S','-','1','8':),
                   (19):(:'P','M','R','E','S','-','1','9':),
                (20:24):(:'P','M','D','U','M','M','Y','A':),
                   (25):(:'P','M','R','E','S','-','2','5':),
                   (26):(:'P','M','R','E','S','-','2','6':),
                   (27):(:'P','M','R','E','S','-','2','7':),
                   (28):(:'P','M','R','E','S','-','2','8':),
                   (29):(:'P','M','R','E','S','-','2','9':),
                   (30):(:'P','M','R','E','S','-','3','0':),
                   (31):(:'P','M','D','U','M','M','Y','A':),
                   (32):(:'P','M','R','E','S','-','3','2':),
                   /* BEGIN: ADD-WIPRO-B9-P1-CHANGE */
                    (33):(:'P','M','R','E','S','-','3','3':),
                   /* END: ADD-WIPRO-B9-P1-CHANGE */
                   /* BEGIN: ADD-WIPRO-B9-P2-CHANGE */
                    (34):(:'P','M','R','E','S','-','3','4':),
                   /* END: ADD-WIPRO-B9-P2-CHANGE */
                   /* BEGIN: ADD-WIPRO-B10-MR2-CHANGE */
                    (35):(:'P','M','R','E','S','-','3','5':),
	            /*START: IURG*/
                    /*(36:49):(:'P','M','D','U','M','M','Y','A':),*/
		    (36):(:'P','M','R','E','S','-','3','6':),
		    /*(37:49):(:'P','M','D','U','M','M','Y','A':),*/
			/*END: IURG*/
		    /*START:VAMOS*/
			(37):(:'P','M','R','E','S','-','3','7':),
		    (38:49):(:'P','M','D','U','M','M','Y','A':),
			/*END:VAMOS*/			
               /* END: ADD-WIPRO-B10-MR2-CHANGE */
                   /* BEGIN: FR36-174561 */
                   /*
                   (50):(:'P','M','H','F','0','0','0','1':),
                   */
                   (50):(:'P','M','H','F','0','0','1','1':),
                   /* END: FR36-174561 */
                   (51):(:'P','M','H','F','0','0','0','2':),
                   (52):(:'P','M','H','F','0','0','0','3':),
                   (53):(:'P','M','H','F','0','0','0','4':),
                   (54):(:'P','M','H','F','0','0','0','5':),
                   (55):(:'P','M','H','F','0','0','0','6':),
                   /*CR36/236932*/ 
                   (56):(:'P','M','H','F','0','0','7','1':),
                   /*CR36/236932*/
                   (57):(:'P','M','H','F','0','0','0','8':),
                   (58):(:'P','M','H','F','0','0','0','9':),
                   /* BEGIN: FR36-174561 */
                   /*
                   (59):(:'P','M','H','F','0','0','1','8':),
                   */
                   (59):(:'P','M','H','F','0','1','8','1':),
                   /* END: FR36-174561 */
                   (60):(:'P','M','H','F','0','0','1','9':),
                   (61):(:'P','M','H','F','0','0','2','5':),
                   (62):(:'P','M','H','F','0','0','2','6':),
                   (63):(:'P','M','H','F','0','0','2','7':),
                   (64):(:'P','M','H','F','0','0','2','8':),
                   (65):(:'P','M','H','F','0','0','2','9':),
                   (66):(:'P','M','H','F','0','0','3','0':),
                   (67):(:'P','M','H','F','0','1','0','0':),
                   (68):(:'P','M','H','F','1','1','0','1':),
                   (69):(:'P','M','H','F','1','1','0','2':),
                   (70):(:'P','M','H','F','1','1','0','3':),
                   (71):(:'P','M','H','F','1','1','0','4':),
                   (72):(:'P','M','H','F','0','1','8','0':),
                   (73):(:'P','M','H','F','0','0','1','2':),
                   (74):(:'P','M','H','F','0','1','8','2':),
                (75:77):(:'P','M','D','U','M','M','Y','A':),
                   (78):(:'P','M','H','F','1','1','0','5':),
                   (79):(:'P','M','H','F','0','0','3','2':),
                   (80):(:'P','M','H','F','1','1','0','6':),
                  /* BEGIN: ADD-WIPRO-B9-P1-CHANGE */
                  (81):(:'P','M','H','F','0','0','3','3':),
                  /* END: ADD-WIPRO-B9-P1-CHANGE */
                  /* BEGIN: ADD-WIPRO-B9-P2-CHANGE */
                  /* BEGIN: FR36-174561 */
                  /*
                  (82):(:'P','M','H','F','0','3','4','0':),
                  (83):(:'P','M','H','F','0','3','4','1':),
                  */
                  (82):(:'P','M','H','F','0','3','4','1':),
                  (83):(:'P','M','H','F','0','3','4','2':),
                  /* END: FR36-174561 */
                  /* END: ADD-WIPRO-B9-P2-CHANGE */
                  /* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
               /*(84:109):(:'P','M','D','U','M','M','Y','A':),*/
                  (84):(:'P','M','H','F','1','1','0','7':),
                  /*ADDED FOR GSL COUNTERS MEMO*/
                  (85):(:'P','M','H','F','1','1','0','8':),
                  (86):(:'P','M','H','F','1','1','0','9':),
                  /*ADDED FOR GSL COUNTERS MEMO*/
                  /* BEGIN: ADD-WIPRO-B10-MR2-CHANGE */
                  /*(85:109):(:'P','M','D','U','M','M','Y','A':),*/
                  (87):(:'P','M','H','F','0','3','5','0':),
                    /* CR20/225233 */
                  (88):(:'P','M','H','F','0','3','5','3':),
                    /* CR20/225233 */
                  (89):(:'P','M','H','F','0','3','5','4':),
                   /* BEGIN: ADD-WIPRO-B11-PKG1-CHANGE */
                  (90):(:'P','M','H','F','0','3','5','5':),
                  (91):(:'P','M','H','F','0','3','5','7':),
                    /* CR20/225233 */
                  (92):(:'P','M','H','F','0','3','5','8':),
                  /*CR36/236932*/                    
                  /*(93:109):(:'P','M','D','U','M','M','Y','A':),*/
                  (93):(:'P','M','H','F','0','0','7','2':),
                 /* Commented for A-flex */ 
        	/* (94:109):(:'P','M','D','U','M','M','Y','A':),*/ 
                  /*CR36/236932*/

		/* START : Addition for A-flex */
		
                  (94):(:'P','M','H','F','1','1','1','0':),
/*START:  CR20/284751 BTS FRQ SYNCH */
		 /* (95:109):(:'P','M','D','U','M','M','Y','A':),*/
                  (95):(:'P','M','H','F','0','3','5','6':),
/*END: CR20/284751 BTS FRQ SYNCH */
	          /*START: IURG*/
		  (96):(:'P','M','H','F','0','3','6','0':),
		  /*END: IURG*/
/*BEGIN: CR36/302024 - RFI4448*/
		  (97):(:'P','M','H','F','1','1','1','1':),
 		/*BEGIN:AUPOIP*/
		   (98):(:'P','M','H','F','1','1','1','2':),
                  /*(99:109):(:'P','M','D','U','M','M','Y','A':),*/
		/*END:AUPOIP*/ 
		  /*START:VAMOS*/
		  (99):(:'P','M','H','F','0','3','7','0':),
		  (100):(:'P','M','H','F','0','3','7','1':),
                  /*(98:109):(:'P','M','D','U','M','M','Y','A':),*/
                  /*(101:109):(:'P','M','D','U','M','M','Y','A':),*/
		/*BEGIN: CR20/313054*/		  
		  (101):(:'P','M','H','F','1','1','1','3':),
                /* BEGIN: CR 605005 */
		  (102):(:'P','M','H','F','1','1','1','4':),
                /* END: CR 605005 */
                /* BEGIN CR:745699*/
                  (103):(:'P','M','H','F','1','1','1','5':),
                  /*START CR MOCN */
              (104):(:'P','M','D','U','M','M','Y','A':),
              (105):(:'P','M','H','F','1','1','1','7':),
              /*END CR MOCN */
              /*begin CR1238146 A-GPS*/
              (106):(:'P','M','H','F','1','1','1','8':),
              /*end CR1238146 A-GPS*/
              (107:109):(:'P','M','D','U','M','M','Y','A':),	
                /* END CR:745699 */
        /*END: CR20/313054*/		  
		  /*END:VAMOS*/
/* END : Addition for A-flex */ 
              /* END : Addition for A-flex */ 
		   /*CR36/236932*/
             
		(110):(:'P','M','R','E','S','1','1','0':),
              (111:179):(:'P','M','D','U','M','M','Y','A':),
                  (180):(:'P','M','R','E','S','1','8','0':)
                                                            :);


SYN ZS_FILE_NBR     ZM_FILE_NBR_ARR  = (:
                                       (1): 311,
                                       (2): 312,
                                       (3): 313,
                                       (4): 314,
                                       (5): 315,
                                       (6): 316,
                                       (7): 317,
                                       (8): 318,
                                       (9): 319,
                                      (10): 320,
                                      (11): 321,
                                      (12): 322,
                                      (13): 323,
                                      (14): 324,
                                      (15): 325,
                                   (16:17): 000,
                                      (18): 328,
                                      (19): 329,
                                   (20:24): 000,
                                      (25): 335,
                                      (26): 336,
                                      (27): 337,
                                      (28): 338,
                                      (29): 339,
                                      (30): 340,
                                      (31): 000,
                                      (32): 342,
                                      (33): 343,
                                      (34): 344,
             /*BEGIN: ADD-WIPRO-B10-MR2-CHANGE*/
                                      (35): 345,
		                      /*START: IURG*/
                                      /*(36:49): 000,*/
				      (36): 346,
				      /*(37:49): 000,*/
				      /*END: IURG*/
					  /*START:VAMOS*/
					  (37): 347,
					  (38:49): 000,
					  /*END: VAMOS*/
                               /*(35:49): 000,*/
               /*END: ADD-WIPRO-B10-MR2-CHANGE*/
                                      (50): 360,
                                      (51): 361,
                                      (52): 362,
                                      (53): 363,
                                      (54): 364,
                                      (55): 365,
                                      (56): 366,
                                      (57): 367,
                                      (58): 368,
                                      (59): 369,
                                      (60): 370,
                                      (61): 371,
                                      (62): 372,
                                      (63): 373,
                                      (64): 374,
                                      (65): 375,
                                      (66): 376,
                                      (67): 377,
                                      (68): 378,
                                      (69): 379,
                                      (70): 380,
                                      (71): 381,
                                      (72): 382,
                                      (73): 386,
                                      (74): 387,
                                   (75:77): 000,
                                      (78): 388,
                                      (79): 389,
                                      (80): 390,
                                      (81): 391,
                                      (82): 392,
                                      (83): 393,
                             /*BEGIN: ADD-WIPRO-B10-MR1-CHANGE*/
                 		  /*(84:109): 000,*/
                 		      (84): 394,
                 	     /*BEGIN: ADD-WIPRO-B10-MR2-CHANGE*/
                 		      (85):395,
                 		      (86):396,
                 		      (87):397,
                                      (88):398,
                 		      (89):399,
                 		      /* CR20/225233 */
                 		      (90):400,
                 		      (91):401,
			/*ADDED FOR GSL COUNTERS MEMO*/
                 		      (92):402,
			/*ADDED FOR GSL COUNTERS MEMO*/
                 		      /* CR20/225233 */
                        /*BEGIN: ADD-WIPRO-B10-MR0-PKG1-CHANGE*/
                 		    /*(85:109): 000,*/
                 		      /*CR36/236932*/
                 		      /*(93:109):000,*/
                                      (93):403,
                              /* Commented for  A-flex */     
			/*	      (94:109):000,    */               		      
                            /* START : Addition for A-flex */ 
			              (94):404, 
			/*START: CR20/284751 BTS FRQ SYNCH */
			/*              (95:109):000,  */
			              (95):405, 
			/*END :CR20/284751 BTS FRQ SYNCH */
			/*START: IURG*/
				      (96):406,
			             /* (96:109):000,  */
			/*END: IURG*/
/*BEGIN: CR36/302024 - RFI4448*/
			             /* (97:109):000,  */
				     (97):407,
				/*BEGIN:AUPOIP*/
				     (98):408,
				/*END:AUPOIP*/
				/*START: VAMOS*/
                                /*AM START :DCTPD00845573*/
				    /* (99):409,
				     (100):410,*/
                                  /*END: VAMOS*/
				/*BEGIN: CR20/313054*/
                     /*(101):411,*/
                              (99):410,
		       	      (100):411,
                   	      (101):409,
    			/*AM END :DCTPD00845573*/
                     /* BEGIN: CR 605005 */
                    /* (102):412, */

                     /* END: CR 605005 */

				    /* (103:109):000,*/
                     /* BEGIN: CR 605005 */
                     (102):412,

                     /* END: CR 605005 */
                     /* BEGIN CR:745699 */
                     (103):413,
/*START CR MOCN */ 
                     (104):000,
                     (105):415,
/*END CR MOCN */
/*begin CR1238146 A-GPS*/
                     (106):416,
/*end CR1238146 A-GPS*/
				     (107:109):000,
				/*END: CR20/313054*/	 
                     /* END CR:745699 */
/*END: CR36/302024*/
                        	     (110): 420,
                                 (111:179): 000,
                                     (180): 490
                                      :);

/* THIS IS A TABLE OF THE NUMBER OF OBJECTS IN A SINGLE RECORD
 * THE USE OF THIS TABLE FROM R3 WAS NOT EXACTLY CLEAR.
 * NOW THE SETTINGS FOR HIS FILE AND RESULT FILE ARE SET
 * EXACTLY THE SAME.
 */
SYN ZS_OBJ_IN_RES_REC   ZM_REC_HDL_ARR =

/* TYPE 0 -  10 */(: 0, 1, 6,  8,  9,  8,  1,  5,  4,  3, 0,
/* TYPE 11 - 20 */      0, 0,  0,  0,  0,  0,  0,  1,  6, 0,   
/* TYPE 21 - 30 */      0, 0,  0,  0,  4,  6,  6,  1,  2, 1,
/*START: IURG*/
/* TYPE 31 - 40 *//*    0, 6,  25, 1,  16, 0,  0,  0,  0, 0,*/
/* TYPE 31 - 40 *//*      0, 6,  25, 1,  16, 8,  0,  0,  0, 0,*/
/*END: IURG*/
/*BEGIN:VAMOS*/
/* TYPE 31 - 40 */      0, 6,  25, 1,  16, 8,  1,  0,  0, 0,
/*END:VAMOS*/
/* TYPE 41 - 50 */      0, 0,  0,  0,  0,  0,  0,  0,  0, 0,
/* TYPE 51 - 60 */      0, 0,  0,  0,  0,  0,  0,  0,  0, 0,
/* TYPE 61 - 70 */      0, 0,  0,  0,  0,  0,  0,  0,  0, 0,
/* TYPE 71 - 80 */      0, 0,  0,  0,  0,  0,  0,  0,  0, 0,
/* TYPE 81 - 90 */      0, 0,  0,  0,  0,  0,  0,  0,  0, 0,
/* TYPE 91 -100 */      0, 0,  0,  0,  0,  0,  0,  0,  0, 0,
/* TYPE 101-110 */      0, 0,  0,  0,  0,  0,  0,  0,  0, 1,
/* TYPE 111-120 */      2, 12, 0,  0,  0,  0,  0,  0,  0, 0,
/* TYPE 121-130 */      0, 0,  0,  0,  0,  0,  0,  0,  0, 0,
/* TYPE 131-140 */      0, 0,  0,  0,  0,  0,  0,  0,  0, 0,
/* TYPE 141-150 */      0, 0,  0,  0,  0,  0,  0,  0,  0, 0,
/* TYPE 151-160 */      0, 0,  0,  0,  0,  0,  0,  0,  0, 0,
/* TYPE 161-170 */      0, 0,  0,  0,  0,  0,  0,  0,  0, 0,
/* TYPE 171-180 */      0, 0,  0,  0,  0,  0,  0,  0,  0, 10 /*, AMA
28-6-00 The mode M_MEAS:_TYPE has been modified for the new release B7.
In the previous release this mode has 191 values, in the current release
this mode has 181 values */
/* TYPE 181-190 */ /* 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 */ :);

SYN ZS_TYP_1_2_OBJ_IN_RES_REC = 6;
SYN ZS_TYP_18_2_OBJ_IN_RES_REC = 17;

/* BEGIN: ADD-WIPRO-B9-P2-CHANGE */
SYN ZS_TYP_34_2_OBJ_IN_RES_REC = 5;
/* END: ADD-WIPRO-B9-P2-CHANGE */
/* BEGIN: ADD-WIPRO-B10-MR2-CHANGE */
/* BEGIN: MODIFY-ER-581-CHANGE */
/*SYN ZS_TYP_35_2_OBJ_IN_RES_REC = 8;*/
/* BEGIN: ADD-WIPRO-B11-MR0-PKG1-CHANGE */
/*SYN ZS_TYP_35_2_OBJ_IN_RES_REC = 13;*/
  /* CR20/225233 */
SYN ZS_TYP_35_3_OBJ_IN_RES_REC = 8;  
  /* CR20/225233 */
SYN ZS_TYP_35_4_OBJ_IN_RES_REC = 2;
/*CR36/236932*/
SYN ZS_TYP_7_2_OBJ_IN_RES_REC = 7;
/*CR36/236932*/
/* BEGIN: ADD-WIPRO-B11-MR0-PKG1-CHANGE */
/* END: MODIFY-ER-581-CHANGE */
/* BEGIN: ADD-WIPRO-B11-MR0-PKG1-CHANGE */
/*SYN ZS_TYP_35_3_OBJ_IN_RES_REC = 30;*/
SYN ZS_TYP_35_5_OBJ_IN_RES_REC = 1;
/*START: CR20/284751 BTS FRQ SYNCH */
SYN ZS_TYP_35_6_OBJ_IN_RES_REC = 4;
/*END :CR20/284751 BTS FRQ SYNCH */
SYN ZS_TYP_35_7_OBJ_IN_RES_REC = 12;
/*CR2517*/
SYN ZS_TYP_35_8_OBJ_IN_RES_REC = 5;
/*CR2517*/
/*ADDED FOR GSL COUNTERS MEMO*/
SYN ZS_TYP_110_9_OBJ_IN_RES_REC = 6;
/*ADDED FOR GSL COUNTERS MEMO*/

/* START : Addition for A-flex */ 

SYN ZS_TYP_110_10_OBJ_IN_RES_REC = 4;
/* END : Addition for A-flex */
/*BEGIN : AUPoIP*/
SYN ZS_TYP_110_12_OBJ_IN_RES_REC = 3;
/*END : AUPoIP*/
/*BEGIN : CR20/313054 */
SYN ZS_TYP_110_13_OBJ_IN_RES_REC = 1;
/*END : CR20/313054 */
/* BEGIN CR:745699 */
SYN ZS_TYP_110_15_OBJ_IN_RES_REC = /*4*/ 1; /*CR:934803*/
/* END CR:745699 */


/*BEGIN : CR20/301337-RFI4448 FILE FORMAT*/
/*BEGIN: C36/302024 - RFI4448*/
/*SYN ZS_TYP_110_11_OBJ_IN_RES_REC  = 3;*/
/*SYN ZS_TYP_110_11_OBJ_IN_RES_REC  = 2;*/
/*END: CR36/302024*/
/*END : CR20/301337*/

/*begin CR1238146 A-GPS*/
SYN ZS_TYP_110_18_OBJ_IN_RES_REC = 2;
/*end CR1238146 A-GPS*/

/* BEGIN: ADD-WIPRO-B11-MR0-PKG1-CHANGE */
/* END: ADD-WIPRO-B10-MR2-CHANGE */

SYN   ZS_MONTH_LENGTH   ZM_MONTH_LENGTH =
                (:(:31,28,31,30,31,30,31,31,30,31,30,31:),
                  (:31,29,31,30,31,30,31,31,30,31,30,31:):);

SYN ZS_NULL_DP_VAL  M_STA_DPVAL  =
                   (:.B_HIGH: ZS_NULL,
                     .B_LOW : ZS_NULL:);
/*BEGIN FR20/186523 B9*/
SYN ZS_DUMMY_CGI M_PM_CELL_ID_CGI_ARRAY = (:(*):0:);
/*END FR20/186523 B9*/

SYN ZS_NULL_EXT_FILE_NAME ZM_EXT_FILE_NAME = (:'.','0','0','A':);

/**************** SCENARIO STATE & EVENTS ************************/

/* FOR THE MOMENT NOT ALL STATES ARE USED AS READING AND WRITING*/
/* TO FILES IS PERFORED IN A LOCAL WAIT FOR SIMPLICITY AND      */
/* BECAUSE IT WAS DONE LIKE THAT BEFORE.                        */
/* THE STATES AND EVENTS ARE LEFT IN AS THERE IS NO OVERHEAD    */
/* AND IT COULD BE USED IN FUTURE?                              */

NEWMODE ZM_SCENARIO_STATE = SET (ZE_IDLE,
                                 ZE_W_HIS_FILE_OPEN,
                                 ZE_W_FIRST_HIS_FILE_OPEN,
                                 ZE_W_SECOND_HIS_FILE_OPEN,
                        /*BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
                                 ZE_W_SEVENTH_HIS_FILE_OPEN,
			/*END: ADD-WIPRO-B10-MR1-CHANGE */                                 
                                 ZE_W_HIS_FILE_CLOSE,
                                 ZE_W_RES_FILE_OPEN,
                                 ZE_W_CLOSE_HIS_110_1,
                                 ZE_W_CLOSE_HIS_110_2,
                                 ZE_W_CLOSE_HIS_110_3,
                        /*BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
                        	 ZE_W_CLOSE_HIS_110_7,
                        /*END: ADD-WIPRO-B10-MR1-CHANGE */                                 
                                 ZE_W_OPEN_HIS_110_4,
                                 ZE_W_CLOSE_HIS_110_4,
                                 ZE_W_OPEN_HIS_110_5,
                                 ZE_W_CLOSE_HIS_110_5,
                                 ZE_W_OPEN_HIS_110_6,
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
                                 ZE_W_CLOSE_HIS_110_6,
	        		 /* BEGIN: CR 605005 */
				 ZE_W_OPEN_HIS_110_14,
				 ZE_W_CLOSE_HIS_110_14,
				 /* END: CR 605005 */
                                 ZE_W_OPEN_HIS_110_8,
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
/*ADDED FOR GSL COUNTERS MEMO*/        
				 ZE_W_CLOSE_HIS_110_8,
				 ZE_W_OPEN_HIS_110_9,
		       /* START : Addition for A-flex */
				 ZE_W_CLOSE_HIS_110_9,
				 ZE_W_OPEN_HIS_110_10,
				 ZE_W_CLOSE_HIS_110_10,
			/* END : Addition for A-flex */ 
			/*BEGIN : CR36/302024 - RFI4448*/
                 	/*	 ZE_W_CLOSE_HIS_110_10,
				 ZE_W_OPEN_HIS_110_11, */
			/*END: CR36/302024*/	 

/*ADDED FOR GSL COUNTERS MEMO*/        
                                 ZE_W_CLOSE_HIS_1_1,
                                 ZE_W_OPEN_HIS_1_2,
                                 ZE_W_CLOSE_HIS_18_1,
                                 ZE_W_OPEN_HIS_18_2,
                         /* BEGIN: ADD-WIPRO-B9-P2-CHANGE */
                                 ZE_W_CLOSE_HIS_34_1,
                                 ZE_W_OPEN_HIS_34_2,
                         /* END: ADD-WIPRO-B9-P2-CHANGE */
                         /* BEGIN: ADD-WIPRO-B10-MR2-CHANGE */
                                 ZE_W_CLOSE_HIS_35_0,
                                 /* CR20/225233 */
                                 ZE_W_OPEN_HIS_35_3,
                                 ZE_W_CLOSE_HIS_35_3,
                                 /* CR20/225233 */
                                 ZE_W_OPEN_HIS_35_4,
                                 ZE_W_CLOSE_HIS_35_4,
                                 ZE_W_OPEN_HIS_35_5,
                         /* BEGIN: ADD-WIPRO-B11-MR0-PKG1-CHANGE */
                                 ZE_W_CLOSE_HIS_35_5,
			/* START: CR20/284751 BTS FRQ SYNCH */
                                 ZE_W_OPEN_HIS_35_6,
                         /* BEGIN: ADD-WIPRO-B11-MR0-PKG1-CHANGE */
                                 ZE_W_CLOSE_HIS_35_6,
			/* END: CR20/284751 BTS FRQ SYNCH */
                                ZE_W_OPEN_HIS_35_7,
                                 ZE_W_CLOSE_HIS_35_7,
                                 ZE_W_OPEN_HIS_35_8,
                                 /*CR36/236932*/
                                 ZE_W_CLOSE_HIS_7_1,
                                 ZE_W_OPEN_HIS_7_2,                                 
                                 /*CR36/236932*/
                         /* BEGIN: ADD-WIPRO-B11-MR0-PKG1-CHANGE */
                         /* END: ADD-WIPRO-B10-MR2-CHANGE */                         
                                 ZE_W_RES_FILE_CLOSE,
                                 ZE_W_RES_FILE_REOPEN,
                                 ZE_W_RES_FILE_CLOSE_FOR_REOPEN,
                                 ZE_W_HIS_FILE_CLOSE_2,
                                 ZE_W_HIS_FILE_CLOSE_3,
                                 /*BEGIN: ADD-WIPRO-B10-MR1-CHANGE */                                 
                                 ZE_W_HIS_FILE_CLOSE_7,
                                 /*END: ADD-WIPRO-B10-MR1-CHANGE */
			/*BEGIN : CR20/301337-RFI4448 FILE FORMAT*/
                                 /*BEGIN : CR36/302024 - RFI4448*/
				/* ZE_W_CLOSE_HIS_110_10,
				 ZE_W_OPEN_HIS_110_11*/
				 ZE_W_ELEVENTH_HIS_FILE_OPEN,
				ZE_W_HIS_FILE_CLOSE_11,
				ZE_W_CLOSE_HIS_110_11,
			/*END: CR36/302024*/	 
				/*END : CR20/301337*/
				/*BEGIN : B12_VAMOS*/
				ZE_W_FIRST_HIS_FILE_OPEN_VMS,
				ZE_W_CLOSE_HIS_37_1,
				ZE_W_CLOSE_HIS_37_2,
				/*END : B12_VAMOS*/
				/*BEGIN:AUPOIP*/
				ZE_W_OPEN_HIS_110_12,
				/*END:AUPOIP*/
                                /* BEGIN CR:745699 */
                                ZE_W_CLOSE_HIS_110_12,
				ZE_W_OPEN_HIS_110_15, 
                                /* END CR:745699 */
        /*START CR MOCN */
        ZE_W_OPEN_HIS_110_17,
        ZE_W_CLOSE_HIS_110_17,/*DCTPD01288924 */
/*END CR MOCN */                        
				/*begin CR1238146 A-GPS*/
	/*BEGIN CRI #01443513.01 ADD ERROR STATE HIST110_18*/
				ZE_W_HIS_FILE_CLOSE_18,
	/*END CRI #01443513.01*/     
				ZE_W_OPEN_HIS_110_18,
        ZE_W_CLOSE_HIS_110_18,
				/*end CR1238146 A-GPS*/
				/*BEGIN : CR20/313054 */
	/*BEGIN CRI #01443513.01 ADD ERROR STATE HIST110_13*/
				ZE_W_HIS_FILE_CLOSE_13,
	/* ENDCRI #01443513.01*/						
				ZE_W_OPEN_HIS_110_13,
				ZE_W_CLOSE_HIS_110_13
				/*END : CR20/313054 */
);
                               				
NEWMODE ZM_SCENARIO_EVENT = SET(ZE_EV_NOTHING,
                                ZE_EV_MAX_FILES,
                                ZE_EV_START,
                                ZE_EV_FILE_OPENED,
                                ZE_EV_FILE_CLOSED,
                                ZE_EV_FILE_ERROR);

NEWMODE ZM_TRX_ID = RANGE (0:M_MAX_TRX_PER_CELL);
/* REMOVE AS SOON AS M_TRX_ID IS UPDATED PROPERLY */

NEWMODE ZM_FMM_STATE = SET (ZE_INIT,
                            ZE_ACTIVE,
                            ZE_STANDBY);

NEWMODE ZM_MSG_STATE = SET (ZE_PROCESSED,
                            ZE_TO_BE_PROCESSED,
                            ZE_TO_BE_DEFERRED,
                            ZE_CORRUPTED );

NEWMODE ZM_HIS_TYPE     = SET (E_HIST_NORM,
                               E_HIST_110_4,
                               E_HIST_110_5,
                               E_HIST_110_6,
			   /* BEGIN: CR 605005 */
			   E_HIST_110_14,
			   /* END: CR 605005 */
                               E_HIST_1_2,
                               E_HIST_18_2,
                      /* BEGIN: ADD-WIPRO-B9-P2-CHANGE */
                               E_HIST_34_2,
                      /* END: ADD-WIPRO-B9-P2-CHANGE */
                   /* BEGIN: ADD-WIPRO-B10-MR2-CHANGE */
                               /* CR20/225233 */
                               E_HIST_35_3,
                               /* CR20/225233 */                   
                               E_HIST_35_4,
                               E_HIST_35_5,
                    /* BEGIN: ADD-WIPRO-B11-MR0-PKG1-CHANGE */
/*START: CR20/284751 BTS FRQ SYNCH */
                               E_HIST_35_6,
/*END: CR20/284751 BTS FRQ SYNCH */
                               E_HIST_35_7,
                               E_HIST_35_8,
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
                               E_HIST_110_8,                               
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */  
/*ADDED FOR GSL COUNTERS MEMO*/        
			       E_HIST_110_9,
/*ADDED FOR GSL COUNTERS MEMO*/             
                             /*START : Addition for A-flex */ 
			       E_HIST_110_10,
		             /*END : Addition for A-flex */		
			      /*CR36/236932*/
                               E_HIST_7_2,
                               /*CR36/236932*/
    			     /*BEGIN: CR36/302024 -RFI4448*/
			       E_HIST_110_11,	
			     /*END: CR36/302024*/
                    /*BEGIN:AUPOIP*/
				 E_HIST_110_12,
                                 /* BEGIN CR:745699 */
				 E_HIST_110_15,
                                 /* END CR:745699 */
				 /*END:AUPOIP*/
/*START CR MOCN */
         E_HIST_110_17,
/*END CR MOCN */				 
				 /*BEGIN: CR20/313054 */
				 E_HIST_110_13,                                 
				 /*END: CR20/313054 */
/*begin CR1238146 A-GPS*/
         E_HIST_110_18
/*end CR1238146 A-GPS*/	
                               );
                    /* BEGIN: ADD-WIPRO-B11-MR0-PKG1-CHANGE */
                   /* END: ADD-WIPRO-B10-MR2-CHANGE */

NEWMODE ZM_FILE_PROPS = STRUCT(
        ZB_CPL_CODE     M_CPL_CODE,  /* CPL CODE FOR THIS FILE */
        /* START: CRI00611721 */
        /*ZB_TOT_RECS  INT,*//*PBLO: was M_BYTE, (too small)*/
 	ZB_TOT_RECS 	ZM_INT_TO_LN_INT,	
	/*END: CRI00611721 */
        ZB_ACT_IDX     INT, /* R_PM_ACT IDX FOR CURRENT FILE OR
                             * IN CASE OF HISTORY FILE THE NEXT
                             * ACT_IDX.
                             */
        ZB_MEAS_TYPE    M_MEAS_TYPE,
        ZB_FCB_INFO     M_FCB_INFO,
        ZB_HDL_PROC_ID  M_PROCESS_ID,
        ZB_TABLE_PTR    PTR,    /* PTR TO USER BUFFER */
        ZB_TABLE_SIZE   INT,
        ZB_ERROR        M_JOB_PM_ERR,
        ZB_IS_OPEN      BOOL);

/* CHENZY: CHANGE TWIN FILE BEGIN */

NEWMODE ZM_EXT_FILE_NAME = ARRAY(1:4) CHAR;

NEWMODE ZM_FULL_FILE_NAME = STRUCT(
    CASE OF
     :ZB_FULL_FILE_NAME M_FILE_NAMEVERSION,
     :ZB_FILE_NAME      M_FILE_NAME,
      ZB_EXT_FILE_NAME  ZM_EXT_FILE_NAME
    ESAC);
/* CHENZY: CHANGE TWIN FILE END */

NEWMODE ZM_FILE_NAME_ARR = ARRAY(1:180) M_FILE_NAME;

NEWMODE ZM_FILE_NBR_ARR  = ARRAY(1:180) M_FILE_NBR;

NEWMODE ZM_PM_BEQ_AND_SECTOR   = STRUCT(
                             B_BEQ    M_BEQ_NBR,
                             B_SECTOR M_BEQ_SECTOR_NBR );
/* BEGIN: ADD-WIPRO-B10-MR2-CHANGE */
NEWMODE ZM_PM_TC_ID   = STRUCT(
                             B_TC_ID       M_TC_ID,
			     B_FILLER      M_BYTE);
			      
NEWMODE ZM_PM_BEQ_ID   = STRUCT(
                             B_BEQ    M_BEQ_NBR,
                             B_FILLER M_BYTE);
/* END: ADD-WIPRO-B10-MR2-CHANGE */                             

NEWMODE ZM_TRX_RES   = STRUCT(B_BTS_IDX    M_BEQ_NBR,
                              B_SECT_NO    M_BEQ_SECTOR_NBR,
                              B_TRX_NUM    M_TRX_ID,
                              B_FILLER     M_BYTE );

NEWMODE ZM_TRX_RES_110_4   = STRUCT(
                              B_BTS_IDX    M_BEQ_NBR,
                              B_SECT_NO    M_BEQ_SECTOR_NBR,
                              B_TRX_NUM    M_TRX_ID);

NEWMODE ZM_REC_HDL_ARR  = ARRAY(M_MEAS_TYPE) M_BYTE;

NEWMODE ZM_ERR_BUF_MODE = STRUCT(
                      CASE OF
                        : B_ER_BUF0009    M_EBT0009_DBASE_ACC_FAIL,
                        : B_ER_BUF0019    M_EBT0019_INC_MESS_DATA,
                        : B_ER_NO_DATA    M_USDA
                      ESAC);

/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */                                                            
NEWMODE ZM_TF_DATA = 
     ARRAY(1L:ZS_MAX_180_CELLS) M_TYPE_180_CTRS;
/* END: ADD-WIPRO-B10-MR1-CHANGE */                                                            

NEWMODE ZM_TRAFF_FLOW_DATA = STRUCT( B_TF_CTRS  ZM_TF_DATA);

NEWMODE ZM_TRAFF_FLOW_CELL_INFO = STRUCT( B_ACTIV_CELLS ZM_ACTIV_CELLS,
                                          B_NEXT  ZM_TRAFF_FLOW_CELLS);

/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */                                                            
NEWMODE ZM_ACTIV_CELLS = ARRAY(1:700/*500CR312499*/) INT;
/* END: ADD-WIPRO-B10-MR1-CHANGE */                                                            

NEWMODE ZM_CELL_AND_NEXT = STRUCT ( 
                                    B_NEXT_PAIR INT,
                                    B_SERV_CELL M_PM_CELL_ID_CGI);

NEWMODE ZM_TRAFF_FLOW_CELLS  = 
           ARRAY (ZM_TRAFF_FLOW_LEN)
                              ZM_CELL_AND_NEXT;
SYNMODE ZM_TRAFF_FLOW_LEN = RANGE(1L:ZS_MAX_180_CELLS);
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE ER263*/ 
SYNMODE ZM_MAX_CIC_VALUE = RANGE(1L:
                      CM_FY32_PM_MAX_BSC_CIC_LONG);

/* END: ADD-WIPRO-B10-MR1-CHANGE ER263*/ 
                /* ------------------------------------ */
                /*    TIME RELATED DEFINITIONS          */
                /* ------------------------------------ */

SYNMODE ZM_MONTH_LENGTH = ARRAY (BOOL,1:12) RANGE(28:31);

                /* -------------------------------- */
                /*     R E S U L T     F I L E S    */
                /* -------------------------------- */

  /*-----------------------------------*/
  /*   C U M U L A T I V E   C T R S   */
  /*-----------------------------------*/

/* THIS IS THE GENERAL FORMAT OF THE RESULT RECORD */
NEWMODE ZM_GEN_RES_REC = STRUCT(
                             ZB_HEADER     M_SYS_REC_HEAD,
                             ZB_DATA       ARRAY(1:125) INT);

NEWMODE ZM_GEN_RES_REC_ARR = ARRAY (1:ZS_RES_REC_IN_BUFF)
                                           ZM_GEN_RES_REC;
 /*--------------*/
 /*  T Y P E  1  */
 /*--------------*/


 NEWMODE ZM_RES_TYPE_01_ARR = ARRAY (1:ZS_RES_REC_IN_BUFF)
                                       ZM_RES_TYPE_01_REC;

 NEWMODE ZM_RES_TYPE_01_REC = ZM_GEN_RES_REC;

 NEWMODE ZM_TYPE_01_CELL = STRUCT(
                  ZB_TAG                INT,
                  ZB_LEN                INT,
                  ZB_CELL_ID            ZM_PM_BEQ_AND_SECTOR,
                  ZB_CTRS               M_HIS_TYPE_01_CTRS_CELL);

 NEWMODE ZM_TYPE_01_TRX = STRUCT(
                  ZB_TAG                INT,
                  ZB_LEN                INT,
                  ZB_TRX_ID             ZM_TRX_RES,
                  ZB_CTRS               M_HIS_TYPE_01_CTRS_TRX);


 /*--------------*/
 /*  T Y P E  2  */
 /*--------------*/


 NEWMODE ZM_RES_TYPE_02_ARR = ARRAY (1:ZS_RES_REC_IN_BUFF)
                                       ZM_RES_TYPE_02_REC;

 NEWMODE ZM_RES_TYPE_02_REC = ZM_GEN_RES_REC;

 NEWMODE ZM_TYPE_02_CELL = STRUCT(
                  ZB_TAG                   INT,
                  ZB_LEN                   INT,
                  ZB_BEQS_ID               ZM_PM_BEQ_AND_SECTOR,
                  ZB_CELL_DATA             M_TYPE_02_CTRS_ARR);

 /*-----------------*/
 /*  T Y P E     3  */
 /*-----------------*/

 NEWMODE ZM_RES_TYPE_03_ARR = ARRAY(1:ZS_RES_REC_IN_BUFF)
                                      ZM_RES_TYPE_03_REC;

 NEWMODE ZM_RES_TYPE_03_REC = ZM_GEN_RES_REC;
 /* BEGIN: DELETE-WIPRO-B10-MR1-CHANGE */
 /*NEWMODE ZM_RES_TYPE_03_CELL = STRUCT(
                  ZB_CELL_HEAD       ZM_CELL_HEAD_TYPE_03,
                  ZB_CELL_DATA       ZM_IND_TYPE_03);*/
/* END: DELETE-WIPRO-B10-MR1-CHANGE */                  

 NEWMODE ZM_CELL_HEAD_TYPE_03 = STRUCT(      /* 10 BYTES */
                  ZB_TAG                 INT,
                  ZB_LEN                 INT,
                  ZB_BEQS_ID             ZM_PM_BEQ_AND_SECTOR);

 NEWMODE ZM_IND_TYPE_03 = STRUCT(                /* 24 BYTES */
                  ZB_TAG           INT,
                  ZB_LEN           INT,
                  ZB_BEQS_ID       ZM_PM_BEQ_AND_SECTOR,
                  ZB_TRX_ID        M_TRX_ID,
                  ZB_TS_NBR        M_TS_NUMBER,
                  ZB_TYPE_03_CTRS  M_TYPE_03_CTRS_ARR);

  /*------------*/
  /* T Y P E  4 */
  /*------------*/

NEWMODE ZM_RES_TYPE_04_ARR = ARRAY(1:ZS_RES_REC_IN_BUFF)
                                     ZM_RES_TYPE_04_REC;

NEWMODE ZM_RES_TYPE_04_REC = ZM_GEN_RES_REC;

NEWMODE ZM_CELL_TYPE_04 = STRUCT(
                  ZB_TAG                 INT,
                  ZB_LEN                 INT,
                  ZB_BEQS_ID             ZM_PM_BEQ_AND_SECTOR);

NEWMODE ZM_CHAN_TYPE_04 = STRUCT(
                  ZB_TAG                 INT,
                  ZB_LEN                 INT,
                  ZB_BEQS_ID             ZM_PM_BEQ_AND_SECTOR,
                  ZB_TRX_ID              M_TRX_ID,
                  ZB_TS_NBR              M_TS_NUMBER,
                  ZB_CTRS                M_TYPE_04_CTRS_ARR);

  /*------------*/
  /* T Y P E  5 */
  /*------------*/


NEWMODE ZM_RES_TYPE_05_ARR = ARRAY(1:ZS_RES_REC_IN_BUFF)
                                     ZM_RES_TYPE_05_REC;

NEWMODE ZM_RES_TYPE_05_REC = ZM_GEN_RES_REC;

NEWMODE ZM_CELL_TYPE_05 = STRUCT(
                  ZB_TAG                 INT,
                  ZB_LEN                 INT,
                  ZB_BEQS_ID             ZM_PM_BEQ_AND_SECTOR);

NEWMODE ZM_CHAN_TYPE_05 = STRUCT(
                  ZB_TAG                 INT,
                  ZB_LEN                 INT,
                  ZB_BEQS_ID             ZM_PM_BEQ_AND_SECTOR,
                  ZB_TRX_ID              M_TRX_ID,
                  ZB_TS_NBR              M_TS_NUMBER,
                  ZB_CTRS                M_TYPE_5_HIS_CC);

  /*------------*/
  /* T Y P E  6 */
  /*------------*/


 NEWMODE ZM_RES_TYPE_06_ARR = ARRAY(1:ZS_RES_REC_IN_BUFF)
                                      ZM_RES_TYPE_06_REC;

 NEWMODE ZM_RES_TYPE_06_REC = ZM_GEN_RES_REC;

 NEWMODE ZM_TYPE_06_CELL_DATA = STRUCT(
                  ZB_TAG                 INT,
                  ZB_LEN                 INT,
                  ZB_BEQS_ID             ZM_PM_BEQ_AND_SECTOR,
                  ZB_COUNTERS            CM_FY32_HIS_TY06_CTRS);

  /*------------*/
  /* T Y P E  7 */
  /*------------*/

 NEWMODE ZM_RES_TYPE_07_ARR = ARRAY(1:ZS_RES_REC_IN_BUFF)
                                      ZM_RES_TYPE_07_REC;

 NEWMODE ZM_RES_TYPE_07_REC = ZM_GEN_RES_REC;

 NEWMODE ZM_PM_LAPD_ID_WITHOUT_FILLER = ARRAY(1:4) M_BYTE;

 NEWMODE ZM_RES_LAPD  = STRUCT(
               ZB_TAG             INT,
               ZB_LEN             INT,
               ZB_LAPD_LINK_ID    ZM_PM_LAPD_ID_WITHOUT_FILLER,
               ZB_CTRS            M_TYPE_07_CTRS_ARR);
 /*CR36/236932*/              
 NEWMODE ZM_TYPE_7_2_DATA  = STRUCT (
                  ZB_TAG             INT,
                  ZB_LEN             INT,
                  ZB_GSL_NBR         INT,
                  ZB_7_2_CTRS        CM_FY32_HIS_TYPE_7_CTRS_2);               
/*CR36/236932*/               

  /*------------*/
  /* T Y P E  8 */
  /*------------*/

 NEWMODE ZM_RES_TYPE_08_ARR  = ARRAY(1:2) ZM_RES_TYPE_08_REC;

 NEWMODE ZM_X25_RES_MASK     = STRUCT(
                                  ZB_TAG       INT,
                                  ZB_LEN       INT,
                                  ZB_COUNTERS  M_X25_CC_DATA);

 NEWMODE ZM_RES_TYPE_08_REC = ZM_GEN_RES_REC;


  /*------------*/
  /* T Y P E  9 */
  /*------------*/


 NEWMODE ZM_RES_TYPE_09_ARR = ARRAY(1:ZS_RES_REC_IN_BUFF)
                                      ZM_RES_TYPE_09_REC;

 NEWMODE ZM_RES_TYPE_09_REC = ZM_GEN_RES_REC;

 NEWMODE ZM_NR7_RES_LINK   = STRUCT(
                               ZB_TAG         INT,
                               ZB_LEN         INT,
                               ZB_COUNTERS    CM_FY32_HIS_LINK_MEAS);

 NEWMODE ZM_NR7_RES_LINK_SET   = STRUCT(
                               ZB_TAG         INT,
                               ZB_LEN         INT,
                               ZB_COUNTERS    CM_FY32_HIS_LINK_SET);

 /*-----------------*/
 /*  T Y P E   1 8  */
 /*-----------------*/

 NEWMODE ZM_RES_TYPE_18_ARR = ARRAY(1:ZS_RES_REC_IN_BUFF)
                                      ZM_RES_TYPE_18_REC;

 NEWMODE ZM_RES_TYPE_18_REC = ZM_GEN_RES_REC;

 NEWMODE ZM_RES_TYPE_18     = STRUCT(
                  ZB_TAG             INT,
                  ZB_LEN             INT,
                  ZB_DATA            M_TYPE_18_CTRS_ARR);

 NEWMODE ZM_RES_TYPE_18_CIC = STRUCT(
                  ZB_TAG             INT,
                  ZB_LEN             INT,
                  ZB_CIC             M_CIC,
                  ZB_CTRS            M_HIS_TYPE_18_CIC_CTRS_ARR);

 /*-----------------*/
 /*  T Y P E   1 9  */
 /*-----------------*/
 NEWMODE ZM_RES_TYPE_19_ARR = ARRAY(1:ZS_RES_REC_IN_BUFF)
                                      ZM_RES_TYPE_19_REC;

 NEWMODE ZM_RES_TYPE_19_REC = ZM_GEN_RES_REC;

 NEWMODE ZM_TYPE_19_DATA = STRUCT(
              ZB_TAG                 INT,
              ZB_LEN                 INT,
              ZB_BEQS_ID             ZM_PM_BEQ_AND_SECTOR,
              ZB_COUNTERS            M_TYPE_19_CELL_CTRS);

 /*-----------------*/
 /*  T Y P E   2 5  */
 /*-----------------*/
 NEWMODE ZM_RES_TYPE_25_ARR = ARRAY(1:ZS_RES_REC_IN_BUFF)
                                      ZM_RES_TYPE_25_REC;

 NEWMODE ZM_RES_TYPE_25_REC = ZM_GEN_RES_REC;

 NEWMODE ZM_TYPE_25_SCCP_DATA = STRUCT(
              ZB_TAG                 INT,
              ZB_LEN                 INT,
              ZB_CIC                 M_CIC,
              ZB_COUNTERS            M_TYPE_25_CTRS_ARR);

 SYN ZS_NULL_CIC         M_CIC  = (: .B_LNK_ID :2047,
                                     .B_CH_NBR :31  :);

 /*-----------------*/
 /*  T Y P E   2 6  */
 /*-----------------*/

 NEWMODE ZM_RES_TYPE_26_ARR = ARRAY(1:ZS_RES_REC_IN_BUFF)
                                      ZM_RES_TYPE_26_REC;

 NEWMODE ZM_RES_TYPE_26_REC = ZM_GEN_RES_REC;

 NEWMODE ZM_CELL_HEAD_TYPE_26 = STRUCT(      /* 6 BYTES */
                  ZB_TAG                 INT,
                  ZB_LEN                 INT,
                  ZB_SERV_CELL_ID        ZM_PM_BEQ_AND_SECTOR);

 NEWMODE ZM_IND_TYPE_26 = STRUCT(ZB_TAG      INT,
                                 ZB_LEN      INT,
                          /* BEGIN  DELETE-WIPRO-B9-P1-CHANGE */
                           /*    ZB_LAC_CI   M_LAC_CI,  */
                          /* END  DELETE-WIPRO-B9-P1-CHANGE */
                          /* BEGIN: ADD-WIPRO-B9-P1-CHANGE */
                                 ZB_CGI      M_PM_CELL_ID_CGI,
                          /* END: ADD-WIPRO-B9-P1-CHANGE */
                                 ZB_CTRS     M_HIS_TYPE_26_CTRS);

 /*-----------------*/
 /*  T Y P E   2 7  */
 /*-----------------*/

 NEWMODE ZM_RES_TYPE_27_ARR = ARRAY(1:ZS_RES_REC_IN_BUFF)
                                      ZM_RES_TYPE_27_REC;

 NEWMODE ZM_RES_TYPE_27_REC = ZM_GEN_RES_REC;

 NEWMODE ZM_CELL_HEAD_TYPE_27 = STRUCT(      /* 10 BYTES */
                  ZB_TAG                 INT,
                  ZB_LEN                 INT,
                  ZB_TARG_CELL_ID        ZM_PM_BEQ_AND_SECTOR);

 NEWMODE ZM_IND_TYPE_27 = STRUCT(ZB_TAG      INT,
                                 ZB_LEN      INT,
                        /* BEGIN  DELETE-WIPRO-B9-P1-CHANGE */
                        /*        ZB_LAC_CI   M_LAC_CI,  */
                        /* END  DELETE-WIPRO-B9-P1-CHANGE */
                        /* BEGIN: ADD-WIPRO-B9-P1-CHANGE */
                                 ZB_CGI      M_PM_CELL_ID_CGI,
                        /* END: ADD-WIPRO-B9-P1-CHANGE */
                                 ZB_CTRS     M_HIS_TYPE_27_CTRS);

 /*-----------------*/
 /*  T Y P E   2 8  */
 /*-----------------*/

 NEWMODE ZM_RES_TYPE_28_ARR = ARRAY(1:ZS_RES_REC_IN_BUFF)
                                      ZM_RES_TYPE_28_REC;

 NEWMODE ZM_RES_TYPE_28_REC = STRUCT(
                  ZB_HEADER           M_SYS_REC_HEAD,
                  ZB_DATA             ZM_TYPE_28_CELL_DATA,
                  ZB_FILLER           ARRAY(1:45) INT);

 NEWMODE ZM_TYPE_28_CELL_DATA = STRUCT(
                  ZB_TAG                   INT,
                  ZB_LEN                   INT,
                  ZB_BEQS_ID               ZM_PM_BEQ_AND_SECTOR,
                  ZB_COUNTERS              CM_FY32_HIS_TY28_CTRS);


 /*-----------------*/
 /*  T Y P E   2 9  */
 /*-----------------*/

 NEWMODE ZM_RES_TYPE_29_ARR = ARRAY(1:ZS_RES_REC_IN_BUFF)
                                      ZM_RES_TYPE_29_REC;

 NEWMODE ZM_RES_TYPE_29_REC = ZM_GEN_RES_REC;

 NEWMODE ZM_RES_DIRTED_RT  = STRUCT(
               ZB_TAG             INT,
               ZB_LEN             INT,
               ZB_BEQS_ID         ZM_PM_BEQ_AND_SECTOR,
               ZB_29_CTRS         M_HIS_CTRS_29);

 /*-----------------*/
 /*  T Y P E   3 0  */
 /*-----------------*/

 NEWMODE ZM_RES_TYPE_30_ARR = ARRAY(1:2)ZM_RES_TYPE_30_REC;

 NEWMODE ZM_RES_TYPE_30_REC = ZM_GEN_RES_REC;

 NEWMODE ZM_RES_TYPE_30     = STRUCT(
                  ZB_TAG             INT,
                  ZB_LEN             INT,
                  ZB_DATA            M_HIS_CTRS_30);

 /* BEGIN: ADD-WIPRO-B8-CHANGE-PM-COUNTER NEW TYPE ADDED */
 /*-----------------*/
 /*  T Y P E   3 2  */
 /*-----------------*/

 NEWMODE ZM_RES_TYPE_32_ARR = ARRAY(1:ZS_RES_REC_IN_BUFF)
                      ZM_RES_TYPE_32_REC;

 NEWMODE ZM_RES_TYPE_32_REC = ZM_GEN_RES_REC;
 NEWMODE ZM_TYPE_32_CELL_DATA  = STRUCT(
               ZB_TAG             INT,
               ZB_LEN             INT,
               ZB_BEQS_ID         ZM_PM_BEQ_AND_SECTOR,
               ZB_32_CTRS         CM_FY32_HIS_TYPE_32_CTRS);

 /* END:   ADD-WIPRO-B8-CHANGE-PM-COUNTER NEW TYPE ADDED */

/* BEGIN: ADD-WIPRO-B9-P1-CHANGE */
 /*-----------------*/
 /*  T Y P E   3 3  */
 /*-----------------*/

 NEWMODE ZM_RES_TYPE_33_ARR = ARRAY(1:ZS_RES_REC_IN_BUFF)
                      ZM_RES_TYPE_33_REC;

 NEWMODE ZM_RES_TYPE_33_REC = ZM_GEN_RES_REC;

 /* NEWMODE ZM_TYPE_33_CELL       = STRUCT(
               ZB_TAG             INT,
               ZB_LEN             INT,
               ZB_BEQS_ID         ZM_PM_BEQ_AND_SECTOR,
               ZB_CELL_DATA       CM_FY32_HIS_TYPE_33_CTRS);  */

 /* BEGIN: WITTS 288-WITTS 289 */ 
 NEWMODE ZM_TYPE_33_CELL       = STRUCT(
               ZB_TAG             INT,
               ZB_LEN             INT,
               ZB_BEQS_ID         ZM_PM_BEQ_AND_SECTOR,
               ZB_CELL_DATA       ZM_TYPE_33_CTRS);

 NEWMODE ZM_TYPE_33_CTRS       = STRUCT(
  B_E01_TO_E02      ARRAY(M_TYPE_33_CTRS) INT);

/* NEWMODE ZM_DATA = STRUCT(
                 CASE OF
                   :ZB_INT  INT,
                   :ZB_BIT  BIT(16)
                 ESAC);

 SYNMODE A = BIT(16);
 
 SYNMODE B = INT;  */
                    
 /* END: WITTS 288-WITTS 289 */

/* END: ADD-WIPRO-B9-P1-CHANGE */

/* BEGIN: ADD-WIPRO-B9-P2-CHANGE */
 /*-----------------*/
 /*  T Y P E   3 4  */
 /*-----------------*/

 NEWMODE ZM_RES_TYPE_34_ARR = ARRAY(1:ZS_RES_REC_IN_BUFF)
                      ZM_RES_TYPE_34_REC;

 NEWMODE ZM_RES_TYPE_34_REC = ZM_GEN_RES_REC;

 NEWMODE ZM_RES_TYPE_34         = STRUCT(
               ZB_TAG              INT,
               ZB_LEN              INT,
               ZB_DATA             CM_FY32_HIS_TYPE_34_1_CTRS);

 NEWMODE ZM_RES_TYPE_34_CELL    = STRUCT(
               ZB_TAG              INT,
               ZB_LEN              INT,
               ZB_BEQS_ID          ZM_PM_BEQ_AND_SECTOR,
               ZB_CELL_DATA        CM_FY32_HIS_TYPE_34_2_CTRS);

/* END: ADD-WIPRO-B9-P2-CHANGE */
/* BEGIN: ADD-WIPRO-B10-MR2-CHANGE */
 /*-----------------*/
 /*  T Y P E   3 5  */
 /*-----------------*/

 NEWMODE ZM_RES_TYPE_35_ARR = ARRAY(1:ZS_RES_REC_IN_BUFF)
                      ZM_RES_TYPE_35_REC;

 NEWMODE ZM_RES_TYPE_35_REC = ZM_GEN_RES_REC;

 NEWMODE ZM_RES_TYPE_35_CELL    = STRUCT(
               ZB_TAG              INT,
               ZB_LEN              INT,
               ZB_BEQS_ID          ZM_PM_BEQ_AND_SECTOR,
               ZB_CELL_DATA        CM_FY32_HIS_TYPE_35_CTRS_0);

 NEWMODE ZM_RES_TYPE_35_TC    = STRUCT(
               ZB_TAG              INT,
               ZB_LEN              INT,
               ZB_TC_ID            M_TC_ID,
               ZB_TC_FILLER        M_BYTE, 
               ZB_TC_DATA          CM_FY32_HIS_TYPE_35_CTRS_4);
/* CR20/225233 */                
 NEWMODE ZM_RES_TYPE_35_3_TC    = STRUCT(
               ZB_TAG              INT,
               ZB_LEN              INT,
               ZB_TC_ID            M_TC_ID,
               ZB_TC_FILLER        M_BYTE,
               ZB_TC_DATA          CM_FY32_HIS_TYPE_35_CTRS_3); 
/* CR20/225233 */                                           
 NEWMODE ZM_RES_TYPE_35_BTS    = STRUCT(
               ZB_TAG              INT,
               ZB_LEN              INT,
                /* CR20/225233 */
               /*ZB_TC_ID            M_TC_ID,*/
               ZB_TC_ID            M_BYTE,
                /* CR20/225233 */
               ZB_BTS_ID           M_BEQ_NBR,
               ZB_BTS_DATA         CM_FY32_HIS_TYPE_35_CTRS_5);   
/*START: CR20/284751 BTS FRQ SYNCH */
 NEWMODE ZM_RES_TYPE_35_BTS_B7    = STRUCT(
               ZB_TAG              INT,
               ZB_LEN              INT,
               ZB_BTS_ID           M_BEQ_NBR,
	       ZB_FILLER           M_BYTE,	
               ZB_BTS_DATA         CM_FY32_HIS_TYPE_35_CTRS_6);   
/*END: CR20/284751 BTS FRQ SYNCH */
/* BEGIN: ADD-WIPRO-B11-MR0-PKG1-CHANGE */
 NEWMODE ZM_RES_TYPE_35_GSL    = STRUCT(
               ZB_TAG              INT,
               ZB_LEN              INT,
               ZB_GSL_NBR          INT,
               ZB_GSL_DATA         CM_FY32_HIS_TYPE_35_CTRS_7 );   
               
NEWMODE ZM_RES_TYPE_35_ABIS    = STRUCT(
               ZB_TAG              INT,
               ZB_LEN              INT,
               ZB_ABIS_NBR         INT,
               ZB_ABIS_DATA        CM_FY32_HIS_TYPE_35_CTRS_8);                  
 /* END: ADD-WIPRO-B11-MR0-PKG1-CHANGE */              
               
/*START: IURG*/
 /*-----------------*/
 /*  T Y P E   3 6  */
 /*-----------------*/

NEWMODE ZM_RES_TYPE_36_ARR = ARRAY (1:ZS_RES_REC_IN_BUFF)
                                       ZM_RES_TYPE_36_REC;

NEWMODE ZM_RES_TYPE_36_REC = ZM_GEN_RES_REC;

NEWMODE ZM_TYPE_36_DATA  = STRUCT (
                  ZB_TAG             INT,
                  ZB_LEN             INT,
                  ZB_RNC_ID          M_BYTE,
                  ZB_RNC_FILLER      M_BYTE,
                  ZB_T36_CTRS      CM_FY32_HIS_TYPE_36_CTRS_0);
/*END: IURG*/                           
/*BEGIN:VAMOS*/
/*-----------------*/
/*  T Y P E   3 7  */
 /*-----------------*/
NEWMODE ZM_RES_TYPE_37_ARR = ARRAY (1:ZS_RES_REC_IN_BUFF)
                                       ZM_RES_TYPE_37_REC;

NEWMODE ZM_RES_TYPE_37_REC = ZM_GEN_RES_REC; 

NEWMODE ZM_TYPE_37_0_DATA = STRUCT(
                  ZB_TAG                INT,
                  ZB_LEN                INT,
                  ZB_BEQS_ID            ZM_PM_BEQ_AND_SECTOR,
                  ZB_37_0_CTRS         CM_FY32_HIS_TYPE_37_CTRS_0);
NEWMODE ZM_TYPE_37_1_DATA = STRUCT(
                  ZB_TAG                INT,
                  ZB_LEN                INT,
                  ZB_BEQS_ID            ZM_PM_BEQ_AND_SECTOR,
                  ZB_37_1_CTRS         CM_FY32_HIS_TYPE_37_CTRS_1);				  

/*END:VAMOS*/
/* END: ADD-WIPRO-B10-MR2-CHANGE */
 /*-----------------*/
 /*  T Y P E   110  */
 /*-----------------*/

 NEWMODE ZM_RES_TYPE_110_ARR = ARRAY(1:ZS_RES_REC_IN_BUFF)
                                       ZM_RES_TYPE_110_REC;

 NEWMODE ZM_RES_TYPE_110_REC = ZM_GEN_RES_REC;

 NEWMODE ZM_RES_TYPE_110_1_REC = STRUCT(
                  ZB_HEADER           M_SYS_REC_HEAD,
                  ZB_DATA_110_1       ZM_TYPE_110_1_DATA);

 NEWMODE ZM_TYPE_110_1_DATA = STRUCT(
                  ZB_TAG                INT,
                  ZB_LEN                INT,
                  ZB_BEQS_ID            ZM_PM_BEQ_AND_SECTOR,
                  ZB_110_1_CTRS         CM_FY32_HIS_TYPE_110_CTRS_1);
/*BEGIN:VAMOS*/
/*NEWMODE ZM_TYPE_37_0_DATA = STRUCT(
                  ZB_TAG                INT,
                  ZB_LEN                INT,
                  ZB_BEQS_ID            ZM_PM_BEQ_AND_SECTOR,
                  ZB_37_0_CTRS         CM_FY32_HIS_TYPE_37_0);

NEWMODE ZM_TYPE_37_1_DATA = STRUCT(
                  ZB_TAG                INT,
                  ZB_LEN                INT,
                  ZB_BEQS_ID            ZM_PM_BEQ_AND_SECTOR,
                  ZB_37_1_CTRS         CM_FY32_HIS_TYPE_37_1);*/
/*END:VAMOS*/

 NEWMODE ZM_RES_TYPE_110_2_REC = STRUCT(
                  ZB_HEADER           M_SYS_REC_HEAD,
                  ZB_DATA_110_2       ZM_TYPE_110_2_DATA);

 NEWMODE ZM_TYPE_110_2_DATA = STRUCT(
                  ZB_TAG               INT,
                  ZB_LEN               INT,
                  ZB_BEQS_ID           ZM_PM_BEQ_AND_SECTOR,
                  ZB_110_2_CTRS        CM_FY32_HIS_TYPE_110_CTRS_2,
                  ZB_FILLER            ARRAY(1:14) INT);

/* BEGIN: ADD-WIPRO-B8-CHANGE-PM-COUNTER */
/* New Block added for Type 110   */
/* Existing blocks moved.., 3->4, 4->5, 5->6*/

NEWMODE ZM_RES_TYPE_110_3_REC = STRUCT(
                  ZB_HEADER           M_SYS_REC_HEAD,
                  ZB_DATA_110_3       ZM_TYPE_110_3_DATA);

NEWMODE ZM_TYPE_110_3_DATA = STRUCT(
                  ZB_TAG                INT,
                  ZB_LEN                INT,
                  ZB_BEQS_ID            ZM_PM_BEQ_AND_SECTOR,
                  ZB_110_3_CTRS         CM_FY32_HIS_TYPE_110_CTRS_3,
                  ZB_FILLER             ARRAY(1:11) INT);
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */                                                            
NEWMODE ZM_RES_TYPE_110_7_REC = STRUCT(
                  ZB_HEADER           M_SYS_REC_HEAD,
                  ZB_DATA_110_7       ZM_TYPE_110_7_DATA);

NEWMODE ZM_TYPE_110_7_DATA = STRUCT(
                  ZB_TAG                INT,
                  ZB_LEN                INT,
                  ZB_BEQS_ID            ZM_PM_BEQ_AND_SECTOR,
                  ZB_110_7_CTRS         CM_FY32_HIS_TYPE_110_CTRS_7
                  );     
/* CR 188510 START */
/* CR20/209493 START */
/*SYN ZS_TYPE_110_7_CELL_LEN    = 106;*/
/*SYN ZS_TYPE_110_7_CELL_LEN    = 130;*/
SYN ZS_TYPE_110_7_CELL_LEN    = 246;
/* CR20/209493 END */
/* CR 188510 END */

SYN ZS_TYPE_110_7_CELL_TAG    = 1123;  
/* END: ADD-WIPRO-B10-MR1-CHANGE */                                                                              

 NEWMODE ZM_RES_TYPE_110_4_ARR = ARRAY (1:ZS_RES_REC_IN_BUFF)
                                          ZM_RES_TYPE_110_4_REC;

 NEWMODE ZM_RES_TYPE_110_4_REC = ZM_GEN_RES_REC;
 NEWMODE ZM_TYPE_110_4_GLOB = STRUCT(
                  ZB_TAG               INT,
                  ZB_LEN               INT,
                  ZB_BEQS_ID           ZM_PM_BEQ_AND_SECTOR);

 NEWMODE ZM_TYPE_110_4_TRX = STRUCT(
                  ZB_TAG               INT,
                  ZB_LEN               INT,
                  ZB_TRX_ID            ZM_TRX_RES_110_4,
                  ZB_110_4_CTRS        CM_HIS_TYPE_110_4_CC);
 NEWMODE ZM_RES_TYPE_110_5_ARR = ARRAY (1:ZS_RES_REC_IN_BUFF)
                                          ZM_RES_TYPE_110_5_REC;

 NEWMODE ZM_RES_TYPE_110_5_REC = ZM_GEN_RES_REC;

 NEWMODE ZM_TYPE_110_5_DATA = STRUCT(
                  ZB_TAG               INT,
                  ZB_LEN               INT,
                  ZB_CIC               M_CIC,
                  ZB_110_5_CTRS        CM_FY32_HIS_TYPE_110_CTRS_5);

 NEWMODE ZM_RES_TYPE_110_6_ARR = ARRAY (1:ZS_RES_REC_IN_BUFF)
                                          ZM_RES_TYPE_110_6_REC;

 NEWMODE ZM_RES_TYPE_110_6_REC = ZM_GEN_RES_REC;

 NEWMODE ZM_TYPE_110_6_DATA  = STRUCT (
                  ZB_TAG             INT,
                  ZB_LEN             INT,
                  ZB_110_6_CTRS      CM_FY32_HIS_TYPE_110_CTRS_6);
/* END:   ADD-WIPRO-B8-CHANGE-PM-COUNTER */

/* BEGIN: CR 605005 */

NEWMODE ZM_RES_TYPE_110_14_ARR = ARRAY (1:ZS_RES_REC_IN_BUFF)
                                       ZM_RES_TYPE_110_14_REC;

 NEWMODE ZM_RES_TYPE_110_14_REC = ZM_GEN_RES_REC;

 NEWMODE ZM_TYPE_110_14_DATA  = STRUCT (
                  ZB_TAG             INT,
                  ZB_LEN             INT,
                  ZB_110_14_CTRS     CM_FY32_HIS_TYPE_110_CTRS_14);

/* END: CR 605005 */

/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
 NEWMODE ZM_RES_TYPE_110_8_ARR = ARRAY (1:ZS_RES_REC_IN_BUFF)
                                          ZM_RES_TYPE_110_8_REC;

 NEWMODE ZM_RES_TYPE_110_8_REC = ZM_GEN_RES_REC;

 NEWMODE ZM_TYPE_110_8_DATA  = STRUCT (
                  ZB_TAG             INT,
                  ZB_LEN             INT,
                  /*3BKA36FBR239825*/
                  ZB_MSC_ID          M_BYTE,
                  ZB_MSC_FILLER      M_BYTE,
                  /*ZB_MSC_ID          INT,*/
                  /*3BKA36FBR239825*/
                  ZB_110_8_CTRS      CM_FY32_HIS_TYPE_110_CTRS_8);
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
/*ADDED FOR GSL COUNTERS MEMO*/        
 NEWMODE ZM_RES_TYPE_110_9_ARR = ARRAY (1:ZS_RES_REC_IN_BUFF)
                                          ZM_RES_TYPE_110_9_REC;

 NEWMODE ZM_RES_TYPE_110_9_REC = ZM_GEN_RES_REC;

 NEWMODE ZM_TYPE_110_9_DATA  = STRUCT (
                  ZB_TAG             INT,
                  ZB_LEN             INT,
                  ZB_GSL_NBR         INT,
                  ZB_110_9_CTRS      CM_FY32_HIS_TYPE_110_CTRS_9);

/* START : Addition for A-flex */
NEWMODE ZM_RES_TYPE_110_10_ARR = ARRAY (1:ZS_RES_REC_IN_BUFF)
                                          ZM_RES_TYPE_110_10_REC;

NEWMODE ZM_RES_TYPE_110_10_REC = ZM_GEN_RES_REC;

NEWMODE ZM_RES_TYPE_110_12_ARR = ARRAY (1:ZS_RES_REC_IN_BUFF)
                             	            ZM_RES_TYPE_110_12_REC;

NEWMODE ZM_RES_TYPE_110_12_REC = ZM_GEN_RES_REC;

/* BEGIN CR:745699 */
                                                                                                      
NEWMODE ZM_RES_TYPE_110_15_ARR = ARRAY (1:ZS_RES_REC_IN_BUFF)                   
                         	          ZM_RES_TYPE_110_15_REC;

NEWMODE ZM_RES_TYPE_110_15_REC = ZM_GEN_RES_REC; 
/* END CR : 745699 */
/*START CR MOCN */
NEWMODE ZM_RES_TYPE_110_17_ARR = ARRAY (1:ZS_RES_REC_IN_BUFF)
                             	            ZM_RES_TYPE_110_17_REC;
NEWMODE ZM_RES_TYPE_110_17_REC = ZM_GEN_RES_REC;
/*END CR MOCN */
/*begin CR1238146 A-GPS*/
NEWMODE ZM_RES_TYPE_110_18_ARR = ARRAY (1:ZS_RES_REC_IN_BUFF)
                             	            ZM_RES_TYPE_110_18_REC;
NEWMODE ZM_RES_TYPE_110_18_REC = ZM_GEN_RES_REC;
/*end CR1238146 A-GPS*/
/*BEGIN : CR20/313054 */
NEWMODE ZM_RES_TYPE_110_13_REC = ZM_GEN_RES_REC;

NEWMODE ZM_RES_TYPE_110_13_ARR = ARRAY (1:ZS_RES_REC_IN_BUFF)
                             	            ZM_RES_TYPE_110_13_REC;
/*END : CR20/313054 */

/*BEGIN : CR20/301337-RFI4448 FILE FORMAT*/
/*BEGIN: CR36/302024 -RFI4448*/
/*NEWMODE ZM_RES_TYPE_110_11_ARR = ARRAY (1:ZS_RES_REC_IN_BUFF)
					  ZM_RES_TYPE_110_11_RES;

NEWMODE ZM_RES_TYPE_110_11_RES = ZM_GEN_RES_REC;*/
/*END: CR36/302024*/
/*END : CR20/301337*/

NEWMODE ZM_TYPE_110_10_DATA  = STRUCT (
                  ZB_TAG             INT,
                  ZB_LEN             INT,
                  ZB_NRI_NBR	     INT,
                  ZB_110_10_CTRS      CM_FY32_HIS_TYPE_110_CTRS_10);
                  
NEWMODE ZM_TYPE_110_10_DATA_GLOB  = STRUCT (
                  ZB_TAG             INT,
                  ZB_LEN             INT,
                  ZB_MSC_NBR	     M_BYTE,
                  ZB_FILLER          M_BYTE);
/*BEGIN: CR36/302024 - RFI4448*/
NEWMODE ZM_TYPE_110_11_DATA = STRUCT (
		  ZB_TAG	     INT,
		  ZB_LEN	     INT,
                  ZB_BEQS_ID         ZM_PM_BEQ_AND_SECTOR, 
		  ZB_110_11_CTRS     CM_FY32_HIS_TYPE_110_CTRS_11 );
/*END: CR36/302024*/
				  
/*BEGIN:AUPOIP*/
NEWMODE ZM_TYPE_110_12_DATA  = STRUCT (
                  ZB_TAG             INT,
                  ZB_LEN             INT,
                ZB_MGW_IP 	     LONG_INT,
/*                ZB_MGW_IP 	     INT, */
                  ZB_110_12_CTRS     CM_FY32_HIS_TYPE_110_CTRS_12);

NEWMODE ZM_RES_TYPE_110_12_RES = ZM_GEN_RES_REC;
/*END:AUPOIP*/  

/*START CR MOCN */
NEWMODE ZM_TYPE_110_17_DATA  = STRUCT (
                  ZB_TAG             INT,
                  ZB_LEN             INT,
                  ZB_MSC_IDX 	       M_BYTE,
                  ZB_MSC_FILLER      M_BYTE,
                  ZB_110_17_CTRS     CM_FY32_HIS_TYPE_110_CTRS_17);
                  
NEWMODE ZM_RES_TYPE_110_17_RES = ZM_GEN_RES_REC;                  
/*END CR MOCN */
/*begin CR1238146 A-GPS*/
NEWMODE ZM_TYPE_110_18_DATA  = STRUCT (
                  ZB_TAG             INT,
                  ZB_LEN             INT,
                  ZB_BEQS_ID            ZM_PM_BEQ_AND_SECTOR,
                  ZB_110_18_CTRS     CM_FY32_HIS_TYPE_110_CTRS_18);
                  
NEWMODE ZM_RES_TYPE_110_18_RES = ZM_GEN_RES_REC;                  
/*end CR1238146 A-GPS*/
/* BEGIN CR: 745699 */
NEWMODE ZM_TYPE_110_15_DATA = STRUCT (                                           
                  ZB_TAG            INT,                                    
                  ZB_LEN            INT,                                    
                  ZB_BEQS_ID        ZM_PM_BEQ_SECT_SITE_TRX,                   
                  ZB_110_15_CTRS    CM_FY32_HIS_TYPE_110_CTRS_15
                  );
NEWMODE ZM_PM_BEQ_SECT_SITE_TRX = STRUCT (
                B_BEQ    	M_BEQ_NBR,                                
                B_SECTOR 	M_BEQ_SECTOR_NBR,
/*BEGIN CR: 947833.01*/
                B_RRH_ID	M_RRH_ID,
		B_TRX_ID	M_TRX_ID
/*END CR: 947833.01*/
);          
/*NEWMODE ZM_PM_BEQ_SECT_SITE_TRX = STRUCT (
                 B_BEQ_L    RANGE(0:255) PACK,
                 B_BEQ_H    RANGE(0:15)  PACK,
                 B_SPARE    BIT(1) PACK,
                 B_SECTOR   RANGE(0:6) PACK,
                 B_RRH_ID	M_RRH_ID,
                 B_TRX_ID	M_TRX_ID 
);*/


/* END CR: 745699*/	

/*BEGIN : CR20/313054 */
NEWMODE ZM_TYPE_110_13_DATA = STRUCT(
                  ZB_TAG                INT,
                  ZB_LEN                INT,
                  ZB_BEQS_ID            ZM_PM_BEQ_AND_SECTOR,
                  ZB_110_13_CTRS        CM_FY32_HIS_TYPE_110_CTRS_13
                  );                  
/*END : CR20/313054 */


#ifdef GNU
NEWMODE ZM_INT_INTEL = STRUCT(
         CASE OF
         :B_INT   INT,
         :B_MSB   M_BYTE,
          B_LSB   M_BYTE
         ESAC );
#else
NEWMODE ZM_INT_INTEL = STRUCT(
         CASE OF
         :B_INT   INT,
         :B_LSB   M_BYTE,
          B_MSB   M_BYTE
         ESAC );
#endif

/* END : Addition for A-flex */


/*ADDED FOR GSL COUNTERS MEMO*/        

 /*-----------------*/
 /*  T Y P E   180  */
 /*-----------------*/

 NEWMODE ZM_RES_TYPE_180_ARR = ARRAY(1:ZS_RES_REC_IN_BUFF)
                                      ZM_RES_TYPE_180_REC;

 NEWMODE ZM_RES_TYPE_180_REC = ZM_GEN_RES_REC;

 NEWMODE ZM_RES_TRAFF_FLO_HEAD  = STRUCT(
               ZB_TAG             INT,
               ZB_LEN             INT,
               ZB_BEQS_ID         ZM_PM_BEQ_AND_SECTOR);

 NEWMODE ZM_RES_TRAFF_FLO_CTRS  = STRUCT(
               ZB_TAG                INT,
               ZB_LEN                INT,
             /* BEGIN  DELETE-WIPRO-B9-P1-CHANGE */
              /*  ZB_LAC_CI             M_LAC_CI,  */
             /* END  DELETE-WIPRO-B9-P1-CHANGE */
             /* BEGIN: ADD-WIPRO-B9-P1-CHANGE */
               ZB_CGI                M_PM_CELL_ID_CGI,
             /* END: ADD-WIPRO-B9-P1-CHANGE */
               ZB_180_CTRS           M_TYPE_180_CTRS);

  /*--------------------------------*/
  /*  E N D         R E S U L T S   */
  /*--------------------------------*/

NEWMODE ZM_ADJ_CELL_IDX_ARR = ARRAY(1:ZS_MAX_ADJ_CELLS)
                                M_CELL_IDX;
NEWMODE ZM_ADJ_CELLS_ARR = ARRAY(1:ZS_MAX_ADJ_CELLS)
                                M_LAC_CI;
NEWMODE ZM_ADJ_FLAGS_ARR = ARRAY(1:ZS_MAX_ADJ_CELLS) BOOL;

NEWMODE ZM_ADJ_STAT = STRUCT(
                           ZB_THE_CELL_IDX M_CELL_IDX,
                           ZB_ADJ_LAST     INT,
                           ZB_ADJ_CELLS    ZM_ADJ_CELLS_ARR,
                           ZB_ADJ_FLAGS    ZM_ADJ_FLAGS_ARR
                          );

NEWMODE ZM_ANALYSIS_TYPE = SET (E_NORMAL_ANALYSIS,
                                E_SDCH,
                                E_RTCH);

NEWMODE ZM_BYTE_ARR = ARRAY
                  (1: ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF ) M_BYTE;

NEWMODE ZM_RELV_TS_CELL    = ARRAY(1:M_MAX_TRX_PER_CELL)ZM_RELV_TS_TRX;
NEWMODE ZM_RELV_TS_TRX     = ARRAY(0:7) BOOL;
NEWMODE ZM_RELEVANT_TRX_ID = ARRAY(1:M_MAX_TRX_PER_CELL)
                                   BOOL;
NEWMODE ZM_TRX_ARRAY       = ARRAY(1:M_MAX_TRX_PER_CELL)
                                   M_TRX_IDX;
NEWMODE ZM_TRX_ID_ARRAY    = ARRAY(1:M_MAX_TRX_PER_CELL)
                                   M_TRX_ID;

NEWMODE ZM_TRXS_OF_A_CELL = STRUCT (ZB_CELL_IDX        M_CELL_IDX,
                                    ZB_NUMBER_OF_TRXS  INT,
                                    ZB_TRXS            ZM_TRX_ARRAY,
                                    ZB_ID_TRX          ZM_TRX_ID_ARRAY,
                                    ZB_NUMBER_OF_SDCCH_TRXS INT,
                                    ZB_RELV_TIME_SLOTS ZM_RELV_TS_CELL,
                                    ZB_RELEVANT_TRX_ID_SDCCH
                                                  ZM_RELEVANT_TRX_ID,
                                    ZB_RELEVANT_TRX_ID_RTCH
                                                  ZM_RELEVANT_TRX_ID);

NEWMODE ZM_WRITE_BYTE_ARRAY =
  ARRAY( 0 : ZS_RES_REC_SIZE*ZS_RES_REC_IN_BUFF-1) M_BYTE;

/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
NEWMODE ZM_CELL_ARRAY =  ARRAY(1:700/*500CR312499*/) BOOL;
/* END: ADD-WIPRO-B10-MR1-CHANGE */
/*BEGIN : FR36/307401-02*/
/*NEWMODE ZM_AUOIP_MODE BOOL;*/
NEWMODE ZM_AUPOIP_MODE = SET (
			ZE_AUPOIP_FULL,
			ZE_AUPOIP_MIXED);
/*END : FR36/307401-02*/
/*START: IURG*/
NEWMODE ZM_R_BSS_PAR2 = M_R_BSS_PAR2;

NEWMODE ZM_DLS_REL_INFO = STRUCT (
         ZB_TUPLE_PTR  PTR,
         ZB_TUPLE_SIZE INT,
         ZB_TUPLE_NBR  INT);
/*END: IURG*/
/* START : DCTPD00914281 */
NEWMODE ZM_R_CELL_MGT = ARRAY(1:700) M_R_CELL_MGT;
NEWMODE ZM_R_TRX_MGT = ARRAY(1:1400) M_R_TRX_MGT;
/* END : DCTPD00914281 */

#ifdef GNU
NEWMODE M_INT_INTEL = STRUCT(
         CASE OF
         :B_INT   INT,
         :B_MSB   M_BYTE,
          B_LSB   M_BYTE
         ESAC );
#else
NEWMODE M_INT_INTEL = STRUCT(
         CASE OF
         :B_INT   INT,
         :B_LSB   M_BYTE,
          B_MSB   M_BYTE
         ESAC );
#endif

/**********************************************************************/
/*                                                                    */
/*          4.5  LOCAL DATA DEFINITIONS AND DECLARATIONS              */
/*                                                                    */
/**********************************************************************/
DCL TRACEINFO                M_TRC_INFO; /*RT TRACE*/
DCL Z_ACT_IDX                INT;
DCL Z_ACTIVE_CELLS           ZM_CELL_ARRAY;
DCL Z_ADJ_ST                 ZM_ADJ_STAT;
DCL Z_CALC_REPORTING_PERIOD  INT;
DCL Z_CCI_1_PTR              PTR;
DCL Z_CCI_2_PTR              PTR;
DCL Z_CPL_CODES              M_CPL_CODE;
DCL Z_FMM_STATE              ZM_FMM_STATE;
DCL Z_HISTORY_FILE           ZM_FILE_PROPS;
DCL Z_IO_TIMER               M_TIMER_IDENT;
DCL Z_MECO_PROC_ID           M_PROCESS_ID;
DCL Z_MSG_BUF_PTR            PTR;
DCL Z_OWN_LCE_ID             M_LCE_ID;
DCL Z_OWN_PROC_ID            M_PROCESS_ID;
DCL Z_RES_RRN                INT;
DCL Z_RESULT_FILE            ZM_FILE_PROPS;
DCL Z_SECOND_HIST_FILE       ZM_FILE_PROPS;
DCL Z_THIRD_HIST_FILE        ZM_FILE_PROPS;
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
DCL Z_SEVENTH_HIST_FILE      ZM_FILE_PROPS;
/*BEGIN : CR20/301337-RFI FILE FORMAT*/
DCL Z_ELEVENTH_HIST_FILE     ZM_FILE_PROPS;
/*END : CR20/301337*/
/* END: ADD-WIPRO-B10-MR1-CHANGE */
/*BEGIN : CR20/313054 */
DCL Z_THIRTEENTH_HIST_FILE   ZM_FILE_PROPS;
/*END : CR20/313054 */
/*Begin DCTPD01288924 */
DCL Z_SEVENTEENTH_HIST_FILE   ZM_FILE_PROPS;
/*End DCTPD01288924 */
/*begin CR1238146 A-GPS*/
DCL Z_18TH_HIST_FILE         ZM_FILE_PROPS;
/*end CR1238146 A-GPS*/

DCL Z_TRACE                  INT;
DCL Z_TRXS_OF_A_CELL         ZM_TRXS_OF_A_CELL;
DCL Z_WAIT_INIT_TCB          M_TIMER_IDENT;
DCL Z_OWN_PID                M_PROCESS_ID;/*ER 5739*/
/*START: IURG*/
DCL Z_FA_BSS_PAR2            ZM_DLS_REL_INFO;
/*END: IURG*/

/* STRAT : DTC513 overload alarm */
DCL Z_FA_CELL_MGT            ZM_DLS_REL_INFO;
DCL Z_FA_TRX_MGT            ZM_DLS_REL_INFO;
/* END: DTC513 overload alarm */

/*START: CRI00611721 */
DCL Z_NBR_RES_FILE 	     INT;
/*END: CRI00611721*/

SYN ZS_API_SUB_CLASS_PM = 7;   /*FOR API CLASS*/
SYN ZS_FST_SUB_CLASS_PM = 7;   /*FOR FST CLASS*/
SYN ZS_ERR_SUB_CLASS_PM = 9;   /*FOR ERR CLASS*/

/**********************************************************************/
/*                                                                    */
/*          4.6  SUPERVISOR PART PROCESS DEFINITION                   */
/*                                                                    */
/**********************************************************************/

G_S_FT59AL_CC_RESULTS_HANDLER:SUPERVISOR_PROCESS;

/**********************************************************************/
/*                                                                    */
/*          4.7  LOCAL PROCEDURE DEFINITIONS - SUPERVISOR             */
/*                                                                    */
/**********************************************************************/
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0010_INIT                                        */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (ADC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 96/09/06                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION: ON RECEPTION OF AN 010_INIT_REQ        */
/*                             STATES AND GLOBALS ARE INITIALISED     */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      0020_INIT_CNF                                 */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0240_CCRH_IS_ACTIVE                        */
/*                      Q_S0050_START_TIMER                           */
/*                      Q_S0250_SET_R_PM_TASK                         */
/*                      Q_S0020_INIT_FILE                             */
/*     CALLED FROM:                                                   */
/*                      Q_S0000_MAIN_CCRH                             */
/*     PRIMITIVES CALLED:                                             */
/*                      OWN_PROCESS_ID                                */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0010_INIT: PROC();

Z_TRACE := H'010;

OWN_PROCESS_ID(Z_OWN_PROC_ID);

DO WITH Z_MSG_BUF_PTR->T_MSG_0019_INIT_REQ.T_B_ELMT_STRUCT;
   Z_OWN_LCE_ID:=B_LCE_ID;
   Z_OWN_PROC_ID.B_PID_PROCESS_ID.B_PID_LCE:=Z_OWN_LCE_ID;
   TRANSMIT_DIRECTED_MSG  0020_INIT_CNF (B_ACTION_PARAM,
                                         Z_OWN_PROC_ID,E_SUCC)
                         TO (B_PROCESS_ID);
   Z_WAIT_INIT_TCB:=M_TIMER_IDENT_NULL;

   IF B_ACT_STBY = M_ACT_STBY_ACTIVE
      THEN
      Z_FMM_STATE:=ZE_ACTIVE;

      /* START A TIMER IF THE CCRH IS ACTIVE */
      IF (B_INIT_LEVEL=M_INI_RESTART OR
         B_INIT_LEVEL=M_INI_SYST_REST) AND
         Q_S0240_CCRH_IS_ACTIVE()
         THEN

         Z_WAIT_INIT_TCB:=Q_S0050_START_TIMER(50,
                                              H'0010,
                                              0);
      FI;
   ELSE
      Z_FMM_STATE:=ZE_STANDBY;
   FI; /* TAKEOVER */
OD; /* DO WITH INIT MSG */

Q_S0250_SET_R_PM_TASK(E_PM_CCRH_ACTIVE);
Q_S0020_INIT_FILE(Z_HISTORY_FILE);
Q_S0020_INIT_FILE(Z_RESULT_FILE);

END Q_S0010_INIT;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0020_INIT_FILE                                   */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (ADC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 96/10/18                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION: HISTORY AND RESULT FILES ARE INITIALED */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_FILE ZM_FILE_PROPS LOC                     */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0010_INIT                                  */
/*                      Q_S0320_START_RESULTS                         */
/*                      Q_S0370_STATE_MACHINE                         */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0020_INIT_FILE:PROC(ZF_FILE ZM_FILE_PROPS LOC);

Z_TRACE := H'0020;

DO WITH ZF_FILE;
   ZB_CPL_CODE     := E_NULL_CODE;
   ZB_ACT_IDX      := 0;
   ZB_MEAS_TYPE    := E_MT_ALL_ACTIVATED_MEASMTS;
   PTR(ZB_TABLE_PTR)    := NULL;

   ZB_TABLE_SIZE   := 0;
   ZB_ERROR        := E_SUCC_REPING;
   ZB_HDL_PROC_ID  := M_PROCESS_ID_NULL;
   ZB_IS_OPEN      := FALSE;
   /*START: CRI00611721 */
   ZB_TOT_RECS.ZB_LONG_INT  := 0L;
   /*END: CRI00611721 */
OD;

Z_CPL_CODES:=E_NULL_CODE;

END Q_S0020_INIT_FILE;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0030_HANDLE_SM_ACT_REQ                           */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (ADC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 94/05/11                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION: PERFORMS ACTIONS ON TAKEOVER MSG       */
/*                             FROM HOUSEKEEPING                      */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      0018_SM_ACT_CNF                               */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0000_MAIN_CCRH                             */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0030_HANDLE_SM_ACT_REQ: PROC();

Z_TRACE := H'0030;

DO WITH Z_MSG_BUF_PTR->T_MSG_0017_SM_ACT_REQ.T_B_ELMT_STRUCT;

   IF B_ACTION_PARAM=M_ACT_TAKEOVER_SIG
      THEN
      Z_FMM_STATE:= ZE_ACTIVE;

      TRANSMIT_DIRECTED_MSG
            0018_SM_ACT_CNF (B_ACTION_PARAM,
                             Z_OWN_PROC_ID,
                             E_SUCC,
                             B_ACT_ATTR_SM)
                         TO (B_PROCESS_ID);

   ELSE
     /* THERE IS ONLY ONE SET OF VALUES POSSIBLE IN THIS MESSAGE */
     TRANSMIT_DIRECTED_MSG
            0018_SM_ACT_CNF (B_ACTION_PARAM,
                             Z_OWN_PROC_ID,
                             E_UNSUCC,
                             B_ACT_ATTR_SM)
                         TO (B_PROCESS_ID);
   FI;
OD; /* DO WITH SM_ACT_MSG */

END Q_S0030_HANDLE_SM_ACT_REQ;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE:   Q_S0040_GEN_ERR                                   */
/*                                                                    */
/*     PROGRAMMER:  K.TESTICIOGLU                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                 JP QUINN                            96/01/11       */
/*                                                                    */
/*     CREATION DATE: 94/07/01                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*           CALL TO THE ERROR HANDLER. LAST WORD OF THE ERROR BUFFER */
/*           IS ALWAYS FILLED BY THE FMM IDENTIFICATION. SEQ. NBR. IS */
/*           ALWAYS 0.                                                */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_ER_TYPE M_ER_TYPES,                        */
/*                      ZF_ER_CLASS M_ER_CLASSES,                     */
/*                      ZF_DATA1 INT,                                 */
/*                      ZF_DATA2 INT,                                 */
/*                      ZF_DATA3 INT                                  */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0110_GET_USER_BUF                          */
/*                      Q_S0160_READ_HIST_FILE                        */
/*                      Q_S0260_GET_TRXS_OF_A_CELL                    */
/*                      Q_S0370_STATE_MACHINE                         */
/*                      Q_S0000_MAIN_CCRH                             */
/*     PRIMITIVES CALLED:                                             */
/*                      ERROR_REPORT                                  */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0040_GEN_ERR: PROC(ZF_ER_TYPE   M_ER_TYPES,
                      ZF_ER_CLASS  M_ER_CLASSES,
                      ZF_DATA1     INT,
                      ZF_DATA2     INT,
                      ZF_DATA3     INT);

DCL ZQ_ERR_BUF    ARRAY(1:4) INT;

Z_TRACE := H'0040;
/*WIPRO:B10_MX_MR1 RT TRACE*/
 TRACEINFO :='ERROR (%d)                      ';
      TRC_BSC_PM1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCRH),
              TRACEID(ERIR),
              TRACEINFO,
              LONG_INT((ZF_DATA3)),
              LONG_INT(0),
              LONG_INT(0));
/*END WIPRO:B10_MX_MR1 RT TRACE*/

ZQ_ERR_BUF(1) := ZF_DATA1;
ZQ_ERR_BUF(2) := ZF_DATA2;
ZQ_ERR_BUF(3) := ZF_DATA3;
ZQ_ERR_BUF(4) := INT(M_FI_CC_RESULTS_HANDLER);

ERROR_REPORT (ZF_ER_CLASS, ZF_ER_TYPE, 0 ,-> ZQ_ERR_BUF);

END Q_S0040_GEN_ERR;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0050_START_TIMER                                 */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (ADC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 94/05/11                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION: STARTS A TIMER USING THE DATA PASSED.  */
/*       THE DELAY IS IN TENTHS OF SECONDS AND THE OTHER DATA IS FOR  */
/*       TRACE PURPOSES ONLY.                                         */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_DELAY INT,                                 */
/*                      ZF_PROC_NBR INT,                              */
/*                      ZF_MSG_NBR M_MSG_NBR                          */
/*     RETURNED VALUE:                                                */
/*                      M_TIMER_IDENT                                 */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0010_INIT                                  */
/*                      Q_S0070_WAIT_TIME                             */
/*                      Q_S0140_OPEN_HIST_FILE                        */
/*                      Q_S0150_OPEN_2ND_HIS                          */
/*                      Q_S0160_READ_HIST_FILE                        */
/*                      Q_S0170_CLOSE_HIST_FILE                       */
/*                      Q_S0180_DEL_RES_FILE                          */
/*                      Q_S0190_OPEN_RES_FILE                         */
/*                      Q_S0200_WRITE_RES_FILE                        */
/*                      Q_S0210_CLOSE_RES_FILE                        */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0050_START_TIMER: PROC(ZF_DELAY      INT,
                          ZF_PROC_NBR   INT,
                          ZF_MSG_NBR    M_MSG_NBR)
                          RETURNS (M_TIMER_IDENT);

DCL ZQ_TIMER_PARMS  M_TIMER_PARMS;

Z_TRACE := H'0050;

/* START TIMER TO WAIT FOR REPLY */
DO WITH ZQ_TIMER_PARMS;
   B_DELAY     := ZF_DELAY;
   B_PRIORITY  := ZS_TIMER_PRIORITY;
   B_DATA_1    := 0;
   B_DATA_2    := ZF_PROC_NBR;
   B_DATA_3    := ZF_MSG_NBR;
OD;

/* INITIALISE */
ZQ_TIMER_PARMS.B_TCB_ID := M_TIMER_IDENT_NULL;

START_TIMER(ZQ_TIMER_PARMS);

RETURN ZQ_TIMER_PARMS.B_TCB_ID;

END Q_S0050_START_TIMER;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0060_DB_ERROR                                    */
/*                                                                    */
/*     PROGRAMMER: OSCAR MAZZA (FACE-MI)                              */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 89/07/28                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                 THE FUNCTION OF THIS PROCEDURE IS TO HANDLE THE    */
/*                 ERRORS WHICH ARE DETECTED DURING THE EXECUTION     */
/*                 OF THE FMM                                         */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_ER_CLASS M_ER_CLASSES ,                    */
/*                      ZF_ER_NBR M_SEQUENCE_NUM                      */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0240_CCRH_IS_ACTIVE                        */
/*                      Q_S0280_GET_PM_SCOPE                          */
/*     PRIMITIVES CALLED:                                             */
/*                      ERROR_REPORT                                  */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0060_DB_ERROR : PROC(ZF_ER_CLASS   M_ER_CLASSES  ,
                        ZF_ER_NBR     M_SEQUENCE_NUM);

DCL ZQ_ERROR_BUFFER ZM_ERR_BUF_MODE;
DCL ZQ_RID          M_RID;

Z_TRACE := H'0060;

ZQ_RID := DB_PARMS.B_REL_PTR -> M_DB_REL_TAB_ELEM.B_REL_ID;

DO WITH ZQ_ERROR_BUFFER.B_ER_BUF0009;
   B_DB_STATUS       := M_DB_STATUS(DB_PARMS.B_DB_STATUS);
   B_DB_RELATION_ID  := ZQ_RID;
   B_DB_ACCESS_TYPE  := DB_PARMS.B_COM_ID ;
OD ;

ERROR_REPORT(ZF_ER_CLASS, M_ERT0009_DBASE_ACC_FAIL,
             ZF_ER_NBR,  ->ZQ_ERROR_BUFFER);

END Q_S0060_DB_ERROR;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0070_WAIT_TIME                                   */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (ADC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 96/10/22                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*      WAIT FOR A WHILE IN A LOCAL WAIT CASE.                        */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_FIXED_OFFSET INT                           */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0050_START_TIMER                           */
/*                      Q_S0100_WAIT_FOR_MSG                          */
/*                      Q_S0090_MSG_DEFER                             */
/*     CALLED FROM:                                                   */
/*                      Q_S0110_GET_USER_BUF                          */
/*                      Q_S0240_CCRH_IS_ACTIVE                        */
/*                      Q_S0250_SET_R_PM_TASK                         */
/*                      Q_S0260_GET_TRXS_OF_A_CELL                    */
/*                      Q_S0270_BEQ_SEQ_FROM_CELL_IDX                 */
/*                      Q_S0330_GET_R_PM_ACT                          */
/*                      Q_S0400_GET_ADJ_CELL_IDXS_SERVIN              */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0070_WAIT_TIME: PROC (ZF_FIXED_OFFSET INT);

DCL ZQ_MSG_BUF_PTR  PTR;
DCL ZQ_MSG_NBR      M_MSG_NBR;
DCL ZQ_TCB_ID       M_TIMER_IDENT;
DCL ZQ_TIMER_EXP    BOOL;

Z_TRACE := H'0070;

/*BEGIN CR1547680.01 COREDUMP GENERATED WHEN CC/SI JOBS ACTIVATED*/
/*ZQ_MSG_BUF_PTR := Z_MSG_BUF_PTR;*/
ZQ_MSG_BUF_PTR := NULL;
/*END CR1547680.01*/

ZQ_TIMER_EXP:=FALSE; /* INITIALISATION */

/* START TIMER TO WAIT FOR REPLIES */
ZQ_TCB_ID:=Q_S0050_START_TIMER(ZF_FIXED_OFFSET,
                              0,
                              H'0070);

DO WHILE (ZQ_TIMER_EXP=FALSE);
   ZQ_MSG_NBR:= Q_S0100_WAIT_FOR_MSG(ZQ_MSG_BUF_PTR);

   CASE ZQ_MSG_NBR OF

      (ZS_6836_TIME_OUT):
      DO WITH ZQ_MSG_BUF_PTR->T_MSG_6836_TIME_OUT.T_B_ELMT_STRUCT;
         IF B_TCB_ID=ZQ_TCB_ID
            THEN
            ZQ_TIMER_EXP:=TRUE;
            RELEASE_TIMER(B_TCB_ID);
            /*BEGIN CR1547680.01 COREDUMP GENERATED
              WHEN CC/SI JOBS ACTIVATED*/
            RET_MSG_BUF(ZQ_MSG_BUF_PTR);
            PTR(ZQ_MSG_BUF_PTR) := NULL;
            /*END CR1547680.01*/
			
         ELSE
            Q_S0090_MSG_DEFER(ZQ_MSG_BUF_PTR);
         FI;
      OD; /* WITH MSG */

      ELSE
      Q_S0090_MSG_DEFER(ZQ_MSG_BUF_PTR);

   ESAC;
OD; /* WAIT ON REPLIES TO STOP OR START CALL HND */

END Q_S0070_WAIT_TIME;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0080_SET_HDL_PROC_ID                             */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (ADC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 96/10/18                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION: SAVE HDL PROC ID IN PROPS RECORD       */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_FILE ZM_FILE_PROPS LOC,                    */
/*                      ZF_PROC_ID M_PROCESS_ID                       */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0370_STATE_MACHINE                         */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0080_SET_HDL_PROC_ID:PROC(ZF_FILE    ZM_FILE_PROPS LOC,
                             ZF_PROC_ID M_PROCESS_ID);

Z_TRACE := H'0080;

DO WITH ZF_FILE;
   ZB_HDL_PROC_ID := ZF_PROC_ID;
OD;

END Q_S0080_SET_HDL_PROC_ID;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE:   Q_S0090_MSG_DEFER                                 */
/*                                                                    */
/*     PROGRAMMER:  K.TESTICIOGLU                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                 JP QUINN                            96/01/11       */
/*                                                                    */
/*     CREATION DATE: 94/07/01                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*           DEFERS THE RECEIVED MESSAGE                              */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_MSG_BUF_PTR PTR LOC                        */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0070_WAIT_TIME                             */
/*                      Q_S0000_MAIN_CCRH                             */
/*     PRIMITIVES CALLED:                                             */
/*                      MSG_DEFER                                     */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0090_MSG_DEFER: PROC(ZF_MSG_BUF_PTR  PTR LOC);

Z_TRACE := H'0090;
   IF PTR(ZF_MSG_BUF_PTR) /= NULL THEN
   MSG_DEFER(ZF_MSG_BUF_PTR);
   PTR(ZF_MSG_BUF_PTR):=NULL; 
FI;

END Q_S0090_MSG_DEFER;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE:   Q_S0100_WAIT_FOR_MSG                              */
/*                                                                    */
/*     PROGRAMMER:  JP QUINN                                          */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                 JP QUINN                            96/01/11       */
/*                                                                    */
/*     CREATION DATE: 94/07/01                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*           RETURNS THE EXISTING MESSAGE BUFFER, WAITS UNTIL A       */
/*           NEW MSG. COMES. RETURNS THE NEW MSG. NUMBER TO THE CALLER*/
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_MSG_BUF_PTR PTR LOC                        */
/*     RETURNED VALUE:                                                */
/*                      M_MSG_NBR                                     */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0070_WAIT_TIME                             */
/*                      Q_S0000_MAIN_CCRH                             */
/*     PRIMITIVES CALLED:                                             */
/*                      MSG_WAIT                                      */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0100_WAIT_FOR_MSG: PROC(ZF_MSG_BUF_PTR PTR LOC)
                      RETURNS (M_MSG_NBR);

Z_TRACE := H'0100;
   IF PTR(ZF_MSG_BUF_PTR)/=NULL THEN
   RET_MSG_BUF_WITH_UBUF(ZF_MSG_BUF_PTR);
   
   PTR(ZF_MSG_BUF_PTR):=NULL;
   FI;

MSG_WAIT(ZF_MSG_BUF_PTR, M_NO_PEST);

RETURN ZF_MSG_BUF_PTR->M_MSG_HEAD.B_MB_MINI_HEAD.B_MSG_NUMBER;

END Q_S0100_WAIT_FOR_MSG;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0110_GET_USER_BUF                                */
/*                                                                    */
/*     PROGRAMMER: JP QUINN  (ADC)                                    */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 94/06/17                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_REC_PTR PTR LOC,                           */
/*                      ZF_BUF_LEN INT                                */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0070_WAIT_TIME                             */
/*                      Q_S0040_GEN_ERR                               */
/*     CALLED FROM:                                                   */
/*                      Q_S0120_GET_WRITE_BUF                         */
/*                      Q_S0520_01_MAKE_RES_FILE_01                   */
/*                      Q_S0530_02_MAKE_RES_FILE_02                   */
/*                      Q_S0540_03_MAKE_RES_FILE_03                   */
/*                      Q_S0550_04_MAKE_RES_FILE_04                   */
/*                      Q_S0560_05_MAKE_RES_FILE_05                   */
/*                      Q_S0570_06_MAKE_RES_FILE_06                   */
/*                      Q_S0590_07_MAKE_RES_FILE_07                   */
/*                      Q_S0600_08_MAKE_RES_FILE_08                   */
/*                      Q_S0610_09_MAKE_RES_FILE_09                   */
/*                      Q_S0630_18_MAKE_RES_FILE_18                   */
/*                      Q_S0640_19_MAKE_RES_FILE_19                   */
/*                      Q_S0650_25_MAKE_RES_FILE_25                   */
/*                      Q_S0660_26_MAKE_RES_FILE_26                   */
/*                      Q_S0670_27_MAKE_RES_FILE_27                   */
/*                      Q_S0690_28_MAKE_RES_FILE_28                   */
/*                      Q_S0710_29_MAKE_RES_FILE_29                   */
/*                      Q_S0720_30_MAKE_RES_FILE_30                   */
/*                      Q_S0740_100_MAKE_RES_FILE_100                 */
/*                      Q_S0760_110_MAKE_RES_FILE_110                 */
/*                      Q_S0810_180_MAKE_RES_FILE_180                 */
/*                      Q_S0790_MAKE_RES_FILE_110_3                   */
/*                      Q_S0800_MAKE_RES_FILE_110_4                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0110_GET_USER_BUF: PROC(ZF_REC_PTR   PTR LOC,
                           ZF_BUF_LEN   INT);

DCL ZQ_MEM_PARMS   M_MEM_PARMS;
DCL ZQ_T           INT;

Z_TRACE := H'0110;
   PTR(ZQ_MEM_PARMS.B_MEM_PTR):=NULL;
   PTR(ZF_REC_PTR):=NULL;   
GET_MEM(ZQ_MEM_PARMS, M_REQUEST_SIZE(ZF_BUF_LEN));
ZF_REC_PTR := ZQ_MEM_PARMS.B_MEM_PTR;
DO FOR ZQ_T := 1 TO ZS_MAX_RETRY WHILE ( PTR(ZF_REC_PTR) = NULL);
   Q_S0070_WAIT_TIME(ZS_WAIT_TIME_MEM);
   GET_MEM(ZQ_MEM_PARMS, M_REQUEST_SIZE(ZF_BUF_LEN));
   ZF_REC_PTR:=ZQ_MEM_PARMS.B_MEM_PTR;
OD;
IF PTR(ZF_REC_PTR) = NULL THEN
   Q_S0040_GEN_ERR(M_ERT0050_0808_MSG_UNEXPEC,
                   M_ERC6_USER_REC, 0,0,H'71);

   IF Z_CPL_CODES=E_NULL_CODE
      THEN
      Z_CPL_CODES:=E_TIMEOUT;     /* THIS IS ABUSED */
   FI;

ELSE
   /* FILL IN SECURITY FMM_ID ON TOP OF USER BUFFER */
   ZQ_MEM_PARMS.B_MEM_PTR -> M_FMM_ID := M_FI_CC_RESULTS_HANDLER;
FI;


END Q_S0110_GET_USER_BUF;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0120_GET_WRITE_BUF                               */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 96/11/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       GETS A USER BUFFER OF THE SPECIFIED SIZE AND FILLS IT        */
/*       WITH H'FF                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_RES_TYPE_PTR PTR LOC,                      */
/*                      ZF_SIZE INT                                   */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0110_GET_USER_BUF                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0370_STATE_MACHINE                         */
/*                      Q_S0520_01_MAKE_RES_FILE_01                   */
/*                      Q_S0530_02_MAKE_RES_FILE_02                   */
/*                      Q_S0540_03_MAKE_RES_FILE_03                   */
/*                      Q_S0550_04_MAKE_RES_FILE_04                   */
/*                      Q_S0560_05_MAKE_RES_FILE_05                   */
/*                      Q_S0570_06_MAKE_RES_FILE_06                   */
/*                      Q_S0590_07_MAKE_RES_FILE_07                   */
/*                      Q_S0600_08_MAKE_RES_FILE_08                   */
/*                      Q_S0610_09_MAKE_RES_FILE_09                   */
/*                      Q_S0630_18_MAKE_RES_FILE_18                   */
/*                      Q_S0640_19_MAKE_RES_FILE_19                   */
/*                      Q_S0650_25_MAKE_RES_FILE_25                   */
/*                      Q_S0660_26_MAKE_RES_FILE_26                   */
/*                      Q_S0670_27_MAKE_RES_FILE_27                   */
/*                      Q_S0690_28_MAKE_RES_FILE_28                   */
/*                      Q_S0710_29_MAKE_RES_FILE_29                   */
/*                      Q_S0720_30_MAKE_RES_FILE_30                   */
/*                      Q_S0740_100_MAKE_RES_FILE_100                 */
/*                      Q_S0760_110_MAKE_RES_FILE_110                 */
/*                      Q_S0810_180_MAKE_RES_FILE_180                 */
/*                      Q_S0790_MAKE_RES_FILE_110_3                   */
/*                      Q_S0800_MAKE_RES_FILE_110_4                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0120_GET_WRITE_BUF : PROC(ZF_RES_TYPE_PTR PTR LOC,
                             ZF_SIZE         INT     );

DCL    ZQ_M   INT;

Z_TRACE := H'0120;

Q_S0110_GET_USER_BUF(ZF_RES_TYPE_PTR, ZF_SIZE);
IF PTR(ZF_RES_TYPE_PTR) /= NULL THEN
   DO FOR ZQ_M := 1 TO ZF_SIZE;
      ZF_RES_TYPE_PTR -> ZM_BYTE_ARR(ZQ_M) := H'FF;
   OD;

   DO WITH ZF_RES_TYPE_PTR -> M_SYS_REC_HEAD;
      /*  FILL THE MAIN HEADER   */
      B_HEADER   := ZS_PM_HEADER_SIZE;
      B_REC_SEQ_NBR := 0; /* ALWAYS ZERO FOR THE FIRST PART */
      B_REC_TYPE := E_PGHR;
  OD;

FI;

END Q_S0120_GET_WRITE_BUF;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0130_RET_ALL_BUF                                 */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY: NAIKA              DATE:          */
/*                                                                    */
/*     CREATION DATE: 96/11/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*      RETURNS THE HISTORY FILE AND RESULTS FILE USER BUFFERS.       */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0370_STATE_MACHINE                         */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0130_RET_ALL_BUF : PROC();

Z_TRACE := H'0130;
IF PTR(Z_HISTORY_FILE.ZB_TABLE_PTR) /= NULL THEN
   RET_MEM(Z_HISTORY_FILE.ZB_TABLE_PTR);
   Z_HISTORY_FILE.ZB_TABLE_PTR := NULL;
   Z_HISTORY_FILE.ZB_TABLE_SIZE:= 0;
FI;

IF Z_RESULT_FILE.ZB_MEAS_TYPE = E_MT_CELL_TRX_OVERVIEW_COUNTERS
   THEN
    IF PTR(Z_SECOND_HIST_FILE.ZB_TABLE_PTR) /= NULL THEN
      RET_MEM(Z_SECOND_HIST_FILE.ZB_TABLE_PTR);
      Z_SECOND_HIST_FILE.ZB_TABLE_PTR := NULL;
      Z_SECOND_HIST_FILE.ZB_TABLE_SIZE:= 0;
    FI;
    /*  ADDED FOR 3RD HIST FILE FOR T110 */ 
    IF Z_THIRD_HIST_FILE.ZB_TABLE_PTR /= NULL
      THEN
      RET_MEM(Z_THIRD_HIST_FILE.ZB_TABLE_PTR);
      Z_THIRD_HIST_FILE.ZB_TABLE_PTR := NULL;
      Z_THIRD_HIST_FILE.ZB_TABLE_SIZE := 0;   
      /* ADDED FOR 3RD HIST FILE FOR T110 */
   FI;
   /*BEGIN:ADD-WIPRO-B10-MR1-CHANGE */
   IF Z_SEVENTH_HIST_FILE.ZB_TABLE_PTR /= NULL
      THEN
      RET_MEM(Z_SEVENTH_HIST_FILE.ZB_TABLE_PTR);
      Z_SEVENTH_HIST_FILE.ZB_TABLE_PTR := NULL;
      Z_SEVENTH_HIST_FILE.ZB_TABLE_SIZE := 0;   
   FI;
   /*END:ADD-WIPRO-B10-MR1-CHANGE */
  /*BEGIN: CR20/313054 */
   IF Z_THIRTEENTH_HIST_FILE.ZB_TABLE_PTR /= NULL
      THEN
      RET_MEM(Z_THIRTEENTH_HIST_FILE.ZB_TABLE_PTR);
      Z_THIRTEENTH_HIST_FILE.ZB_TABLE_PTR := NULL;
      Z_THIRTEENTH_HIST_FILE.ZB_TABLE_SIZE := 0;   
   FI;
  /*END: CR20/313054 */
  
/*BEGIN : CR20/301337-RFI4448 FILE FORMAT*/
   IF Z_ELEVENTH_HIST_FILE.ZB_TABLE_PTR /= NULL
      THEN
      RET_MEM(Z_ELEVENTH_HIST_FILE.ZB_TABLE_PTR);
      Z_ELEVENTH_HIST_FILE.ZB_TABLE_PTR := NULL;
      Z_ELEVENTH_HIST_FILE.ZB_TABLE_SIZE := 0;   
   FI;
/*END : CR20/301337*/
  /*Begin DCTPD01288924 */
  IF Z_SEVENTEENTH_HIST_FILE.ZB_TABLE_PTR /= NULL
      THEN
      RET_MEM(Z_SEVENTEENTH_HIST_FILE.ZB_TABLE_PTR);
      Z_SEVENTEENTH_HIST_FILE.ZB_TABLE_PTR := NULL;
      Z_SEVENTEENTH_HIST_FILE.ZB_TABLE_SIZE := 0;   
   FI;
  /*End DCTPD01288924 */
/*begin CR1238146 A-GPS*/
  IF Z_18TH_HIST_FILE.ZB_TABLE_PTR /= NULL
      THEN
      RET_MEM(Z_18TH_HIST_FILE.ZB_TABLE_PTR);
      Z_18TH_HIST_FILE.ZB_TABLE_PTR := NULL;
      Z_18TH_HIST_FILE.ZB_TABLE_SIZE := 0;   
   FI;
/*end CR1238146 A-GPS*/
/*START: VAMOS*/
ELSIF Z_RESULT_FILE.ZB_MEAS_TYPE = E_MT_VAMOS
   THEN
    IF PTR(Z_SECOND_HIST_FILE.ZB_TABLE_PTR) /= NULL THEN
      RET_MEM(Z_SECOND_HIST_FILE.ZB_TABLE_PTR);
      Z_SECOND_HIST_FILE.ZB_TABLE_PTR := NULL;
      Z_SECOND_HIST_FILE.ZB_TABLE_SIZE:= 0;
    FI;
/*END: VAMOS*/
FI;

IF Z_RESULT_FILE.ZB_TABLE_PTR /= NULL
   THEN
   RET_MEM(Z_RESULT_FILE.ZB_TABLE_PTR);
   Z_RESULT_FILE.ZB_TABLE_PTR := NULL;
   Z_RESULT_FILE.ZB_TABLE_SIZE:= 0;
FI;

END Q_S0130_RET_ALL_BUF;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0140_OPEN_HIST_FILE                              */
/*                                                                    */
/*     PROGRAMMER: A.FRANZETTI(MIDC)                                  */
/*                                                                    */
/*                LAST MODIFIED BY:NAIKA               DATE:02/08/02  */
/*                                                                    */
/*     CREATION DATE: 89/11/16                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                  THE MEASUREMENT HISTORY FILE IS HERE OPENED.      */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_HIS_TYPE ZM_HIS_TYPE                       */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      0121_OPEN_FILE                                */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0870_HIS_FILE_NUM                          */
/*                      Q_S0050_START_TIMER                           */
/*     CALLED FROM:                                                   */
/*                      Q_S0320_START_RESULTS                         */
/*                      Q_S0370_STATE_MACHINE                         */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0140_OPEN_HIST_FILE : PROC (ZF_HIS_TYPE ZM_HIS_TYPE);

DCL ZQ_HIS_NUM     INT;
DCL ZQ_HIS_TYPE    INT;

Z_TRACE := H'0140;

CASE ZF_HIS_TYPE OF
   (E_HIST_NORM):
   ZQ_HIS_TYPE := 0;

   (E_HIST_110_4):
   ZQ_HIS_TYPE := 3;

   (E_HIST_110_5):
   ZQ_HIS_TYPE := 10;

   (E_HIST_110_6):
   ZQ_HIS_TYPE := 12;
   
   /* BEGIN: CR 605005 */
   (E_HIST_110_14):
     ZQ_HIS_TYPE := 34;
   /* END: CR 605005 */
   
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
   (E_HIST_110_8):
   ZQ_HIS_TYPE := 17;
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */   
/*ADDED FOR GSL COUNTERS MEMO*/        
   (E_HIST_110_9):
   ZQ_HIS_TYPE := 18;
/*ADDED FOR GSL COUNTERS MEMO*/ 
   /*CR36/236932*/
 /* START : Addition for A-flex */  
   (E_HIST_110_10):
   ZQ_HIS_TYPE := 26; 
 /* END : Addition for A-flex */
/*BEGIN: CR36/302024 -RFI4448*/
   (E_HIST_110_11):
   ZQ_HIS_TYPE := 29;
/*END: CR36/302024*/
    /*BEGIN:AUPOIP*/
   (E_HIST_110_12):
   ZQ_HIS_TYPE := 30;
   /*END:AUPOIP*/
   /*BEGIN CR:745699*/
   (E_HIST_110_15):
   ZQ_HIS_TYPE := 35 ;
   /*END CR:745699*/
/*START CR MOCN */
   (E_HIST_110_17):
   ZQ_HIS_TYPE := 37 ;
/*END CR MOCN */   
/*begin CR1238146 A-GPS*/
   (E_HIST_110_18):
   ZQ_HIS_TYPE := 38 ;
/*end CR1238146 A-GPS*/
   /*BEGIN:CR20/313054*/
   (E_HIST_110_13):
   ZQ_HIS_TYPE := 33;
   /*END:CR20/313054*/
   (E_HIST_7_2):
   ZQ_HIS_TYPE := 37;    
   /*CR36/236932*/
   (E_HIST_1_2):
   ZQ_HIS_TYPE := 23;

   (E_HIST_18_2):
   ZQ_HIS_TYPE := 15;

/* BEGIN: ADD-WIPRO-B9-P2-CHANGE */
   (E_HIST_34_2):
   ZQ_HIS_TYPE := 1;
/* END: ADD-WIPRO-B9-P2-CHANGE */
/* BEGIN: ADD-WIPRO-B9-P2-CHANGE */
  /* CR20/225233 */
   (E_HIST_35_3):
   ZQ_HIS_TYPE := 1;
  /* CR20/225233 */
   (E_HIST_35_4):
   ZQ_HIS_TYPE := 2;
   (E_HIST_35_5):
   ZQ_HIS_TYPE := 3;
/*START: CR20/284751 BTS FRQ SYNCH */
   (E_HIST_35_6):
   ZQ_HIS_TYPE := 8;
/* END: CR20/284751 BTS FRQ SYNCH */
/* BEGIN: ADD-WIPRO-B11-MR0-PKG1-CHANGE */
   (E_HIST_35_7):
   ZQ_HIS_TYPE := 4;
   (E_HIST_35_8):
   ZQ_HIS_TYPE := 5;
/* BEGIN: ADD-WIPRO-B11-MR0-PKG1-CHANGE */
/* END: ADD-WIPRO-B9-P2-CHANGE */

ESAC;

ZQ_HIS_NUM := Q_S0870_HIS_FILE_NUM(R_PM_ACT.D_MEAS_TYP);

DO WITH Z_HISTORY_FILE;
   DO WITH ZB_FCB_INFO;
      B_FILE_NO       := ZS_FILE_NBR(ZQ_HIS_NUM + ZQ_HIS_TYPE);
      B_FILE_NAME     := ZS_FILE_NAME(ZQ_HIS_NUM + ZQ_HIS_TYPE);
      B_PCS           := 1 + ZS_BASE_PCS;
      B_FILE_TYPE     := E_HPMF;
      B_TWIN_FILE     := FALSE;
      B_ACCESS        := E_READ_REQ; /* IT MUST EXIST */
      B_TIMEOUT       := 60;  /*  6  SECONDS */
      B_REC_SIZE      := ZS_HPMR_SIZE;
#ifdef MXELITE
      B_DRIVE_NO      := E_SSD_C;
#else
      B_DRIVE_NO      := E_SYS_NON_PREF;
#endif
   OD; /* WITH ZB_FCB_INFO */

   TRANSMIT_BASIC_MSG
       0121_OPEN_FILE(-> ZB_FCB_INFO,
                         Z_OWN_PROC_ID);

   Z_IO_TIMER := Q_S0050_START_TIMER(ZS_DISK_TIMEOUT,
                                     Z_TRACE,
                                     ZS_0121_OPEN_FILE);
OD;

END Q_S0140_OPEN_HIST_FILE;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0150_OPEN_2ND_HIS                                */
/*                                                                    */
/*     PROGRAMMER: A.FRANZETTI(MIDC)                                  */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 89/11/16                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                  THE SECOND HISTORY FILE IN TYPE 110 RESULT FILE   */
/*                  IS REQUESTED TO BE OPENED                         */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      0121_OPEN_FILE                                */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0870_HIS_FILE_NUM                          */
/*                      Q_S0050_START_TIMER                           */
/*     CALLED FROM:                                                   */
/*                      Q_S0370_STATE_MACHINE                         */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0150_OPEN_2ND_HIS : PROC ();

DCL ZQ_HIS_NUM     INT;

Z_TRACE := H'0150;

ZQ_HIS_NUM := Q_S0870_HIS_FILE_NUM(R_PM_ACT.D_MEAS_TYP);

DO WITH Z_SECOND_HIST_FILE;
   DO WITH ZB_FCB_INFO;
      B_FILE_NO       := ZS_FILE_NBR(ZQ_HIS_NUM+1);
      B_FILE_NAME     := ZS_FILE_NAME(ZQ_HIS_NUM+1);
      B_PCS           := 1 + ZS_BASE_PCS;
      B_FILE_TYPE     := E_HPMF;
      B_TWIN_FILE     := FALSE;
      B_ACCESS        := E_READ_REQ; /* IT MUST EXIST */
      B_TIMEOUT       := 60;  /*  6  SECONDS */
      B_REC_SIZE      := ZS_HPMR_SIZE;
#ifdef MXELITE
      B_DRIVE_NO      := E_SSD_C;
#else
      B_DRIVE_NO      := E_SYS_NON_PREF;
#endif
   OD; /* WITH ZB_FCB_INFO */

   TRANSMIT_BASIC_MSG
       0121_OPEN_FILE(-> ZB_FCB_INFO,
                      Z_OWN_PROC_ID);

   Z_IO_TIMER := Q_S0050_START_TIMER(ZS_DISK_TIMEOUT,
                                     Z_TRACE,
                                     ZS_0121_OPEN_FILE);
OD;

END Q_S0150_OPEN_2ND_HIS;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0990_OPEN_3ND_HIS                                */
/*                                                                    */
/*     PROGRAMMER: AMITRAJ NAIK (WIPRO)                               */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 02/08/02                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                  THE THIRD HISTORY FILE IN TYPE 110 RESULT FILE    */
/*                  IS REQUESTED TO BE OPENED..ADDED FOR RELEASE B8   */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      0121_OPEN_FILE                                */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0870_HIS_FILE_NUM                          */
/*                      Q_S0050_START_TIMER                           */
/*     CALLED FROM:                                                   */
/*                      Q_S0370_STATE_MACHINE                         */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0990_OPEN_3RD_HIS : PROC ();

DCL ZQ_HIS_NUM     INT;

Z_TRACE := H'0150;

ZQ_HIS_NUM := Q_S0870_HIS_FILE_NUM(R_PM_ACT.D_MEAS_TYP);

DO WITH Z_THIRD_HIST_FILE;
   DO WITH ZB_FCB_INFO;
      B_FILE_NO       := ZS_FILE_NBR(ZQ_HIS_NUM+2);
      B_FILE_NAME     := ZS_FILE_NAME(ZQ_HIS_NUM+2);
      B_PCS           := 1 + ZS_BASE_PCS;
      B_FILE_TYPE     := E_HPMF;
      B_TWIN_FILE     := FALSE;
      B_ACCESS        := E_READ_REQ; /* IT MUST EXIST */
      B_TIMEOUT       := 60;  /*  6  SECONDS */
      B_REC_SIZE      := ZS_HPMR_SIZE;
#ifdef MXELITE
      B_DRIVE_NO      := E_SSD_C;
#else
      B_DRIVE_NO      := E_SYS_NON_PREF;
#endif
   OD; /* WITH ZB_FCB_INFO */

   TRANSMIT_BASIC_MSG
       0121_OPEN_FILE(-> ZB_FCB_INFO,
                      Z_OWN_PROC_ID);

   Z_IO_TIMER := Q_S0050_START_TIMER(ZS_DISK_TIMEOUT,
                                     Z_TRACE,
                                     ZS_0121_OPEN_FILE);
OD;

END Q_S0990_OPEN_3RD_HIS;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0160_READ_HIST_FILE                              */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 89/11/16                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                  THE MEASUREMENT HISTORY FILE IS HERE READ.        */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_HIST_FILE REF ZM_FILE_PROPS,               */
/*                      ZF_REC_HDL INT,                               */
/*                      ZF_START_REC INT,                             */
/*                      ZF_HPMR_SIZE INT                              */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      0124_READ_REC_CNF                             */
/*                      6836_TIME_OUT                                 */
/*     SENT MESSAGES:                                                 */
/*                      0123_READ_REC                                 */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0050_START_TIMER                           */
/*                      Q_S0040_GEN_ERR                               */
/*     CALLED FROM:                                                   */
/*                      Q_S0520_01_MAKE_RES_FILE_01                   */
/*                      Q_S0530_02_MAKE_RES_FILE_02                   */
/*                      Q_S0540_03_MAKE_RES_FILE_03                   */
/*                      Q_S0550_04_MAKE_RES_FILE_04                   */
/*                      Q_S0560_05_MAKE_RES_FILE_05                   */
/*                      Q_S0570_06_MAKE_RES_FILE_06                   */
/*                      Q_S0590_07_MAKE_RES_FILE_07                   */
/*                      Q_S0600_08_MAKE_RES_FILE_08                   */
/*                      Q_S0610_09_MAKE_RES_FILE_09                   */
/*                      Q_S0630_18_MAKE_RES_FILE_18                   */
/*                      Q_S0640_19_MAKE_RES_FILE_19                   */
/*                      Q_S0650_25_MAKE_RES_FILE_25                   */
/*                      Q_S0660_26_MAKE_RES_FILE_26                   */
/*                      Q_S0670_27_MAKE_RES_FILE_27                   */
/*                      Q_S0690_28_MAKE_RES_FILE_28                   */
/*                      Q_S0710_29_MAKE_RES_FILE_29                   */
/*                      Q_S0720_30_MAKE_RES_FILE_30                   */
/*                      Q_S0740_100_MAKE_RES_FILE_100                 */
/*                      Q_S0760_110_MAKE_RES_FILE_110                 */
/*                      Q_S0810_180_MAKE_RES_FILE_180                 */
/*                      Q_S0790_MAKE_RES_FILE_110_3                   */
/*                      Q_S0800_MAKE_RES_FILE_110_4                   */
/*     PRIMITIVES CALLED:                                             */
/*                      CANCEL_TIMER                                  */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0160_READ_HIST_FILE : PROC (ZF_HIST_FILE     REF ZM_FILE_PROPS,
                               ZF_REC_HDL       INT,
                               ZF_START_REC     INT,
                               ZF_HPMR_SIZE     INT);

DCL ZQ_IO_TIMER  M_TIMER_IDENT;
DCL ZQ_TIMER_ID  M_TIMER_IDENT;

SYN ZS_OFFSET_FOR_PHHR = 1; 
  /* THERE IS ONE HEADER RECORD NOT TAKEN INTO ACCOUNT 
     BY CALLING PROCEDURES */

Z_TRACE := H'0160;

DO WITH ZF_HIST_FILE->;
   /* GET THE NEXT HISTORY FILE RECORD */
   DO WITH ZB_FCB_INFO;
      B_NO_REC_HDL       := ZF_REC_HDL;
      B_START_REC_NO     := ZF_START_REC+ZS_OFFSET_FOR_PHHR;
      B_USER_BUFF_LENGTH := ZB_TABLE_SIZE;
      B_PTR_USER_BUFFER  := ZB_TABLE_PTR;
      B_REC_SIZE         := ZF_HPMR_SIZE;
#ifdef MXELITE
      B_DRIVE_NO      := E_SSD_C;
#else
      B_DRIVE_NO      := E_SYS_NON_PREF;
#endif
   OD;

   TRANSMIT_DIRECTED_MSG
           0123_READ_REC(-> ZB_FCB_INFO,
                         Z_OWN_PROC_ID)
           TO (ZB_HDL_PROC_ID);

   ZQ_IO_TIMER := Q_S0050_START_TIMER(ZS_DISK_TIMEOUT,
                                      Z_TRACE,
                                      ZS_0124_READ_REC_CNF);
   L_WAIT_READ_CNF:
      WAIT_CASE;

      0124_READ_REC_CNF(*,
                        *,
                        ZB_CPL_CODE ):

         CANCEL_TIMER(ZQ_IO_TIMER);
      END_WAIT_CASE_CLAUSE;

      6836_TIME_OUT(*,
                    *,
                    *,
                    ZQ_TIMER_ID):

         IF ZQ_TIMER_ID = ZQ_IO_TIMER
            THEN
            RELEASE_TIMER(ZQ_IO_TIMER);
            ZB_CPL_CODE := E_READ_ERROR;
         ELSE
            RELEASE_TIMER(ZQ_TIMER_ID);
         FI;
      END_WAIT_CASE_CLAUSE;
      /* ALL OTHER MESSAGES ARE DEFERRED */
   ESAC_TIAW L_WAIT_READ_CNF;

   IF ZB_CPL_CODE /= E_NULL_CODE
      THEN
      Z_CPL_CODES := ZB_CPL_CODE;
      Q_S0040_GEN_ERR(M_ERT0050_0808_MSG_UNEXPEC,
                      M_ERC6_USER_REC,
                      0,
                      0,
                      H'73);
  /*FR36_270318*/
                TRACEINFO :=
                         'GLOBAL STOP READ_HIS_FILE (%d)  ';

               TRC_BSC_PM3(
                    FILENAME,
                    LONG_INT(__LINENO__),
                    LONG_INT(SUB_CLASS_PM_CCRH),
                    TRACEID(NORM),
                    TRACEINFO,
                    LONG_INT((Z_CPL_CODES)),
                    LONG_INT((0)),
                    LONG_INT((0)));
   /*FR36_270318*/

   FI;
OD;

END Q_S0160_READ_HIST_FILE;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0170_CLOSE_HIST_FILE                             */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 96/11/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                  THE MEASUREMENT RESULT FILE FOR A PARTICULAR      */
/*                  MEASUREMENT TYPE IS HERE CLOSED.                  */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_HIST_FILE REF ZM_FILE_PROPS                */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      0127_CLOSE_FILE                               */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0050_START_TIMER                           */
/*     CALLED FROM:                                                   */
/*                      Q_S0370_STATE_MACHINE                         */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0170_CLOSE_HIST_FILE : PROC (ZF_HIST_FILE REF ZM_FILE_PROPS);

Z_TRACE := H'0170;

DO WITH ZF_HIST_FILE -> ;
      TRANSMIT_DIRECTED_MSG
             0127_CLOSE_FILE(-> ZB_FCB_INFO,
                             Z_OWN_PROC_ID)
             TO (ZB_HDL_PROC_ID);

      Z_IO_TIMER := Q_S0050_START_TIMER(ZS_DISK_TIMEOUT,
                                        Z_TRACE,
                                        ZS_0127_CLOSE_FILE);
   ZB_HDL_PROC_ID:=M_PROCESS_ID_NULL;
OD;

END Q_S0170_CLOSE_HIST_FILE;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0180_DEL_RES_FILE                                */
/*                                                                    */
/*     PROGRAMMER: DENIZ BELGIN                                       */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/01/03                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*     THIS PROCEDURE WILL DELETE AN INCOMPLETE RESULT FILE IF IT     */
/*     EXISTS.                                                        */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_SSD M_DRIVE_NO                             */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      0317_FILE_HNDL_CNF                            */
/*                      6836_TIME_OUT                                 */
/*     SENT MESSAGES:                                                 */
/*                      0316_FILE_HNDL_REQ                            */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0050_START_TIMER                           */
/*     CALLED FROM:                                                   */
/*                      Q_S0190_OPEN_RES_FILE                         */
/*     PRIMITIVES CALLED:                                             */
/*                      CANCEL_TIMER                                  */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0180_DEL_RES_FILE : PROC (ZF_SSD M_DRIVE_NO ) RETURNS( BOOL );

DCL ZQ_DELETED     BOOL;
DCL ZQ_FILE_IDX    RANGE(1:180);
DCL ZQ_IO_TIMER    M_TIMER_IDENT;
DCL ZQ_TIMER_ID    M_TIMER_IDENT;

Z_TRACE := H'0180;

ZQ_DELETED := FALSE;

DO WITH Z_RESULT_FILE;
   DO WITH ZB_FCB_INFO;

      ZQ_FILE_IDX:=NUM(ZB_MEAS_TYPE);

      B_FILE_NO   := ZS_FILE_NBR(ZQ_FILE_IDX);
      B_FILE_NAME := ZS_FILE_NAME(ZQ_FILE_IDX);
      B_FILE_TYPE := E_GPMF;
      B_ACCESS    := E_DELETE_REQ;
      B_TWIN_FILE := FALSE;
      B_TIMEOUT   := 30;/* 3 SEC */
      B_DRIVE_NO  := ZF_SSD;

      TRANSMIT_BASIC_MSG
         0316_FILE_HNDL_REQ(-> ZB_FCB_INFO,Z_OWN_PROC_ID);
            ZQ_IO_TIMER := Q_S0050_START_TIMER(ZS_DISK_TIMEOUT,
                                               Z_TRACE,
                                               ZS_0317_FILE_HNDL_CNF);

      L_WAIT_WRITE_CNF:
         WAIT_CASE;
            0317_FILE_HNDL_CNF(*,
                               *,
                               ZB_CPL_CODE ):

            CANCEL_TIMER(ZQ_IO_TIMER);
         END_WAIT_CASE_CLAUSE;

            6836_TIME_OUT(*,
                          *,
                          *,
                          ZQ_TIMER_ID):

            IF ZQ_TIMER_ID = ZQ_IO_TIMER
               THEN
               RELEASE_TIMER(ZQ_IO_TIMER);
               ZB_CPL_CODE := E_ACCESS_ERROR;
            ELSE
               RELEASE_TIMER(ZQ_TIMER_ID);
            FI;
         END_WAIT_CASE_CLAUSE;
        /* ALL OTHER MESSAGES ARE DEFERRED */
      ESAC_TIAW L_WAIT_WRITE_CNF;

      /* DONT UPDATE THE GLOBAL COMPLETION CODE JUST INFORM */
      /* UPPER LEVEL IF SUCCESSFULLY DELETED OR NOT         */
      IF Z_CPL_CODES=E_NULL_CODE
         THEN
         ZQ_DELETED := TRUE;
      FI;
   OD; /* WITH ZB_FCB_INFO */
OD; /* WITH Z_RESULT_FILE */

RETURN( ZQ_DELETED );

END Q_S0180_DEL_RES_FILE;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0190_OPEN_RES_FILE                               */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 96/11/16                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*     THE RESULT FILE IS CREATED AND OPENED - IT IS ASSUMED THAT IT  */
/*     DOES NOT EXIST.                                                */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_ERROR BOOL LOC,                            */
/*                      ZF_ACCESS M_ACCESS                            */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      0121_OPEN_FILE                                */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0180_DEL_RES_FILE                          */
/*                      Q_S0050_START_TIMER                           */
/*     CALLED FROM:                                                   */
/*                      Q_S0370_STATE_MACHINE                         */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0190_OPEN_RES_FILE : PROC (ZF_ERROR BOOL LOC,
                              ZF_ACCESS M_ACCESS);

/*DCL ZQ_DB_OK    BOOL;*//*UNUSED*/
DCL ZQ_FILE_IDX RANGE(1:180);

Z_TRACE := H'0190;

ZF_ERROR:=TRUE;

DO WITH Z_RESULT_FILE;
   ZB_ACT_IDX      := R_PM_ACT.D_ACT_IDX;
   ZB_MEAS_TYPE    := R_PM_ACT.D_MEAS_TYP;
   DO WITH ZB_FCB_INFO;
      /*START: CRI00611721 */
      /*B_PCS := ZS_BASE_PCS + R_PM_ACT.D_RES_PCS.B_PCS;*/
      IF Z_NBR_RES_FILE >= 1
      THEN
       /* ASCII value for 'A' is 65, BASE_PCS= 16640 
        * FOR 'B', BASE_PCS = 16896 and so on 
        * B_PCS := 16641; (16641=('A'*256+('1'-'0')+('0'-'0')*10)==>01A) 
        * B_PCS := 16897; (16897=('B'*256+('1'-'0')+('0'-'0')*10)==>01B)
        */
         B_PCS 	  := ((Z_NBR_RES_FILE + 65) * 256) + 
			R_PM_ACT.D_RES_PCS.B_PCS;
      ELSE
         B_PCS    := ZS_BASE_PCS + R_PM_ACT.D_RES_PCS.B_PCS;
      FI;
      /*END: CRI00611721*/
      ZF_ERROR:=FALSE;

      ZQ_FILE_IDX:=NUM(R_PM_ACT.D_MEAS_TYP);

      /* IF AN INCOMPLETE RESULT FILE RESIDES ON THE DISK   */
      /* FIRST IT IS TO BE DELETED. THIS MAY HAPPEN ONLY    */
      /* AFTER A RESTART                                    */

      IF ZF_ACCESS = E_WRITE_REQ  THEN

         /* TRY TO DELETE ANY INCOMPLETE RESULT FILE */

         Q_S0180_DEL_RES_FILE(E_SSD_C);
         Q_S0180_DEL_RES_FILE(E_SSD_D);
      FI;

      /* CONTINUE TO OPEN THE RESULT FILE         */
      B_FILE_NO   := ZS_FILE_NBR(ZQ_FILE_IDX);
      B_FILE_NAME := ZS_FILE_NAME(ZQ_FILE_IDX);
      B_FILE_TYPE := E_GPMF;
      B_REC_SIZE  := ZS_RES_REC_SIZE;
      B_NO_REC_HDL:= 10; /* THIS FIELD IS IRRELEVANT SO WHY NOT 10? */
      B_ACCESS    := ZF_ACCESS;
      B_TWIN_FILE := FALSE;
      B_TIMEOUT   := 60;/* 6 SEC */

      IF ZF_ACCESS = E_WRITE_REQ THEN
        B_DRIVE_NO  := E_SYS_NON_PREF;
      FI;

      TRANSMIT_BASIC_MSG
           0121_OPEN_FILE(-> ZB_FCB_INFO,Z_OWN_PROC_ID);

      Z_IO_TIMER := Q_S0050_START_TIMER(ZS_DISK_TIMEOUT,
                                        Z_TRACE,
                                        ZS_0121_OPEN_FILE);
   OD; /* WITH ZB_FCB_INFO   */
OD;    /* WITH Z_RESULT_FILE */

END Q_S0190_OPEN_RES_FILE;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0200_WRITE_RES_FILE                              */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 89/11/16                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                  THE MEASUREMENT RESULT FILE FOR A PARTICULAR      */
/*                  MEASUREMENT TYPE IS HERE WRITTEN.                 */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_REC_HDL INT,                               */
/*                      ZF_START_REC INT                              */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      0126_WRITE_REC_CNF                            */
/*                      6836_TIME_OUT                                 */
/*     SENT MESSAGES:                                                 */
/*                      0125_WRITE_REC                                */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0050_START_TIMER                           */
/*     CALLED FROM:                                                   */
/*                      Q_S0500_FILL_REC_HEAD                         */
/*                      Q_S0600_08_MAKE_RES_FILE_08                   */
/*                      Q_S0610_09_MAKE_RES_FILE_09                   */
/*                      Q_S0630_18_MAKE_RES_FILE_18                   */
/*                      Q_S0720_30_MAKE_RES_FILE_30                   */
/*                      Q_S0740_100_MAKE_RES_FILE_100                 */
/*                      Q_S0820_RECORD_FULL                           */
/*                      Q_S0830_CHECK_LAST_WRITE                      */
/*     PRIMITIVES CALLED:                                             */
/*                      CANCEL_TIMER                                  */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
/*START: CRI00611721 */
/*Q_S0200_WRITE_RES_FILE : PROC (ZF_REC_HDL INT,
                               ZF_START_REC INT);*/
Q_S0200_WRITE_RES_FILE : PROC (ZF_REC_HDL INT,
			       ZF_START_REC LONG_INT);	

DCL ZQ_REC_HDL 		ZM_INT_TO_LN_INT;
DCL ZQ_START_REC 	ZM_INT_TO_LN_INT;
DCL ZQ_SPACE 		LONG_INT;
/*END: CRI00611721 */

DCL ZQ_FILE_IDX   RANGE(1:180);
DCL ZQ_I          INT;
DCL ZQ_IO_TIMER   M_TIMER_IDENT;
DCL ZQ_TIMER_ID   M_TIMER_IDENT;

Z_TRACE := H'0200;

/*START: CRI00611721 */
ZQ_START_REC.ZB_LONG_INT := ZF_START_REC;
/*END: CRI00611721 */
DO WITH Z_RESULT_FILE;
   ZQ_FILE_IDX:=NUM(ZB_MEAS_TYPE);
   /*START: CRI00611721 */
   /*ZB_TOT_RECS:=ZB_TOT_RECS+ ZF_REC_HDL;*/
   ZQ_REC_HDL.ZB_LOW_INT 	:= ZF_REC_HDL;
   ZQ_REC_HDL.ZB_HIGH_INT 	:= 0;
   ZB_TOT_RECS.ZB_LONG_INT 	:= ZB_TOT_RECS.ZB_LONG_INT + 
        			  ZQ_REC_HDL.ZB_LONG_INT;
   /*END: CRI00611721 */

   DO WITH ZB_FCB_INFO;
      B_FILE_NO   := ZS_FILE_NBR(ZQ_FILE_IDX);
      B_FILE_NAME := ZS_FILE_NAME(ZQ_FILE_IDX);
      B_FILE_TYPE        := E_GPMF;
      B_NO_REC_HDL       := ZF_REC_HDL;
      /*START: CRI00611721 */
      /*B_START_REC_NO     := ZF_START_REC;*/
      B_START_REC_NO     := ZQ_START_REC.ZB_LOW_INT;
      /*END: CRI00611721 */
      B_USER_BUFF_LENGTH := ZF_REC_HDL * ZS_RES_REC_SIZE;
      B_PTR_USER_BUFFER  := ZB_TABLE_PTR;
      B_TWIN_FILE        := FALSE;
    /*B_DRIVE_NO  := E_SYS_NON_PREF; */
   OD; /* WITH ZB_FCB_INFO */

   /*START: CRI00611721*/
   ZQ_SPACE := LONG_INT((ZS_MAX_RECORDS_IN_FILE 
                        *(LONG_INT(Z_NBR_RES_FILE +1))
			* 256L) -
		(ZF_START_REC * 256L));

   IF Z_RESULT_FILE.ZB_TOT_RECS.ZB_LONG_INT 
       <= (ZS_MAX_RECORDS_IN_FILE * (LONG_INT(Z_NBR_RES_FILE +1)))
	AND
       (ZQ_SPACE > LONG_INT((ZF_REC_HDL * ZS_RES_REC_SIZE)))
   THEN
	TRANSMIT_DIRECTED_MSG
           0125_WRITE_REC(-> ZB_FCB_INFO,
                          Z_OWN_PROC_ID)
           TO (ZB_HDL_PROC_ID);
   ELSIF ZF_START_REC = 0L
   THEN
	TRANSMIT_DIRECTED_MSG
           0125_WRITE_REC(-> ZB_FCB_INFO,
                          Z_OWN_PROC_ID)
           TO (ZB_HDL_PROC_ID);
   ELSE
	Z_RESULT_FILE.ZB_ERROR := E_NO_SPACE_FOR_NEW_REC;
	Z_CPL_CODES := E_NULL_CODE;
        RETURN;
   FI;
   /*END: CRI00611721*/ 

   ZQ_IO_TIMER := Q_S0050_START_TIMER(ZS_DISK_TIMEOUT,
                                      Z_TRACE,
                                      ZS_0126_WRITE_REC_CNF);
    L_WAIT_WRITE_CNF:
      WAIT_CASE;
         0126_WRITE_REC_CNF(*,
                            *,
                            ZB_CPL_CODE ):

         CANCEL_TIMER(ZQ_IO_TIMER);
      END_WAIT_CASE_CLAUSE;

         6836_TIME_OUT(*,
                       *,
                       *,
                       ZQ_TIMER_ID):

         IF ZQ_TIMER_ID = ZQ_IO_TIMER
            THEN
            RELEASE_TIMER(ZQ_IO_TIMER);
            ZB_CPL_CODE := E_WRITE_ERROR;
         ELSE
            RELEASE_TIMER(ZQ_TIMER_ID);
         FI;
      END_WAIT_CASE_CLAUSE;
     /* ALL OTHER MESSAGES ARE DEFERRED */
    ESAC_TIAW L_WAIT_WRITE_CNF;
   
   /* UPDATE THE GLOBAL CPL CODE */
   IF Z_CPL_CODES=E_NULL_CODE
      THEN
      Z_CPL_CODES:=ZB_CPL_CODE;
   FI;
      /*FR36_270318*/
      IF Z_CPL_CODES /= E_NULL_CODE
      THEN
       TRACEINFO    :=
               'GLOBAL STOP WRITE_RES_FILE (%d) ';

     TRC_BSC_PM3(
       FILENAME,
       LONG_INT(__LINENO__),
       LONG_INT(SUB_CLASS_PM_CCRH),
       TRACEID(NORM),
       TRACEINFO,
       LONG_INT((Z_CPL_CODES)),
       LONG_INT((0)),
       LONG_INT((0)));
      FI;
       /*FR36_270318*/

   DO FOR ZQ_I := 0 TO ZS_RES_REC_SIZE*ZF_REC_HDL-1;
      Z_RESULT_FILE.ZB_TABLE_PTR -> ZM_WRITE_BYTE_ARRAY(ZQ_I):=H'FF;
   OD;
OD; /* WITH Z_RESULT_FILE */

END Q_S0200_WRITE_RES_FILE;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0210_CLOSE_RES_FILE                              */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 89/11/16                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                  THE MEASUREMENT RESULT FILE FOR A PARTICULAR      */
/*                  MEASUREMENT TYPE IS HERE CLOSED.                  */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      0127_CLOSE_FILE                               */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0050_START_TIMER                           */
/*     CALLED FROM:                                                   */
/*                      Q_S0370_STATE_MACHINE                         */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0210_CLOSE_RES_FILE : PROC ( );

Z_TRACE := H'0210;

/*WITTS 5739*/
/*ADD by ZHUJ TO DECIDE WHICH DRIVE_NO TO TRANSFER*/
Q_S0001_GET_OWN_LCE_ID();
/*END by ZHUJ*/

DO WITH Z_RESULT_FILE;
      TRANSMIT_DIRECTED_MSG
                  0127_CLOSE_FILE(-> ZB_FCB_INFO,
                                  Z_OWN_PROC_ID)
                  TO (ZB_HDL_PROC_ID);

      Z_IO_TIMER := Q_S0050_START_TIMER(ZS_DISK_TIMEOUT,
                                        Z_TRACE,
                                        ZS_0127_CLOSE_FILE);
   ZB_HDL_PROC_ID:=M_PROCESS_ID_NULL;
OD;

END Q_S0210_CLOSE_RES_FILE;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0220_FILE_OPENED                                 */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (ADC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 96/10/16                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION: FILE IS OPENED.                        */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_EVENT ZM_SCENARIO_EVENT LOC,               */
/*                      ZF_PROC_ID M_PROCESS_ID LOC                   */
/*     RETURNED VALUE:                                                */
/*                      ZM_MSG_STATE                                  */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0000_MAIN_CCRH                             */
/*     PRIMITIVES CALLED:                                             */
/*                      CANCEL_TIMER                                  */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0220_FILE_OPENED: PROC(ZF_EVENT     ZM_SCENARIO_EVENT LOC,
                          ZF_PROC_ID   M_PROCESS_ID LOC)
                        RETURNS (ZM_MSG_STATE);

Z_TRACE := H'0220;
 /*ADDED FOR FR20/206272 Shailesh*/
 IF Z_IO_TIMER = M_TIMER_IDENT_NULL
 THEN
    RETURN (ZE_CORRUPTED);
 FI;
 /*ADDED FOR FR20/206272 Shailesh*/
 
CANCEL_TIMER(Z_IO_TIMER);
 /*ADDED FOR FR20/206272 Shailesh*/
 Z_IO_TIMER := M_TIMER_IDENT_NULL;
 /*ADDED FOR FR20/206272 Shailesh*/

DO WITH Z_MSG_BUF_PTR->T_MSG_0122_FILE_OPENED.T_B_ELMT_STRUCT;
   IF B_CPL_CODE = E_NULL_CODE
      THEN
      ZF_EVENT := ZE_EV_FILE_OPENED;
   ELSIF B_CPL_CODE = E_NO_ACT_OVERLOAD
      THEN
      ZF_EVENT := ZE_EV_MAX_FILES;

    /*WIPRO: B11_MX_MR0_PKG1 RT TRACE*/
     
    TRACEINFO    :=
               'GLOBAL STOP OVERLOAD (%d)       ';

     TRC_BSC_PM3(
       FILENAME,
       LONG_INT(__LINENO__),
       LONG_INT(SUB_CLASS_PM_CCRH),
       TRACEID(NORM),
       TRACEINFO,
       LONG_INT((ZF_EVENT)),
       LONG_INT((0)),
       LONG_INT((0)));
    /*END WIPRO: B11_MX_MR0_PKG1 RT TRACE*/

   ELSE
      ZF_EVENT := ZE_EV_FILE_ERROR;
    /*WIPRO: B11_MX_MR0_PKG1 RT TRACE*/
     
    TRACEINFO    :=
               'GLOBAL STOP FILE ERR (%d)       ';

     TRC_BSC_PM3(
       FILENAME,
       LONG_INT(__LINENO__),
       LONG_INT(SUB_CLASS_PM_CCRH),
       TRACEID(NORM),
       TRACEINFO,
       LONG_INT((ZF_EVENT)),
       LONG_INT((0)),
       LONG_INT((0)));
    /*END WIPRO: B11_MX_MR0_PKG1 RT TRACE*/
   FI;
   /*FR36_270318*/
   IF B_CPL_CODE /= E_NULL_CODE
      THEN
                TRACEINFO :=
                         'GLOBAL STOP FILE OPEN ER (%d %d)';

               TRC_BSC_PM3(
                    FILENAME,
                    LONG_INT(__LINENO__),
                    LONG_INT(SUB_CLASS_PM_CCRH),
                    TRACEID(NORM),
                    TRACEINFO,
                    LONG_INT((B_CPL_CODE)),
                    LONG_INT((ZF_EVENT)),
                    LONG_INT((0)));
   FI;
   /*FR36_270318*/

   /* GET A COPY OF THE PROC ID AS WHO KNOWS WHEN THIS  */
   /* CHANGES - PERHAPS DUE TO TAKEOVER.                */

   ZF_PROC_ID:=B_ME_PROC_ID;
OD;

RETURN (ZE_TO_BE_PROCESSED);

END Q_S0220_FILE_OPENED;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0230_FILE_CLOSED                                 */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (ADC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 96/10/16                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION: FILE IS CLOSED.                        */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_EVENT ZM_SCENARIO_EVENT LOC                */
/*     RETURNED VALUE:                                                */
/*                      ZM_MSG_STATE                                  */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0000_MAIN_CCRH                             */
/*     PRIMITIVES CALLED:                                             */
/*                      CANCEL_TIMER                                  */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0230_FILE_CLOSED: PROC(ZF_EVENT ZM_SCENARIO_EVENT LOC)
                        RETURNS (ZM_MSG_STATE);
DCL ZQ_RESULT M_RESULT;
DCL ZQ_TRC_INTARG2 ZM_INT_TO_LN_INT; /*RT TRACE*/

Z_TRACE := H'0230;
/*ADDED FOR FR20/206272 Shailesh*/
 IF Z_IO_TIMER = M_TIMER_IDENT_NULL
 THEN
    RETURN (ZE_CORRUPTED);
 FI;
 /*ADDED FOR FR20/206272 Shailesh*/
CANCEL_TIMER(Z_IO_TIMER);
/*ADDED FOR FR20/206272 Shailesh*/
Z_IO_TIMER := M_TIMER_IDENT_NULL;
/*ADDED FOR FR20/206272 Shailesh*/
DO WITH Z_MSG_BUF_PTR->T_MSG_0128_FILE_CLOSED.T_B_ELMT_STRUCT;
   IF B_CPL_CODE=E_NULL_CODE
      THEN
      ZF_EVENT:=ZE_EV_FILE_CLOSED;
      /* IF CLOSED FILE IS RESULT FILE, SYNCHRONIZE IT WITH ANOTHER 
         OCPR DISK*/
      DO WITH B_FCB_PTR->M_FCB_INFO;
        IF B_FILE_NAME(3) = 'R' /*RESULT FILE*/
        THEN
          ZQ_RESULT := Q_S0890_SYN_FILE(B_FILE_NAME, 
                                        B_PCS, 
                                        B_DRIVE_NO); 
              
          IF ZQ_RESULT = E_UNSUCC
          THEN
            /*DEL by ZHUJ FOR CR6333 begin*/ 
            /*
            ZF_EVENT:=ZE_EV_FILE_ERROR;
            */
            /*DEL END*/
          /*ADD API RTTRACE*/
          TRACEINFO    :=
            'CALL SYN FILE API (%d %d %d)    ';
          ZQ_TRC_INTARG2.ZB_LOW_INT := B_PCS - ZS_BASE_PCS;
          ZQ_TRC_INTARG2.ZB_HIGH_INT := B_FILE_NO;
          TRC_BSC_PM1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCRH),
              TRACEID(NORM),
              TRACEINFO,
              LONG_INT((B_DRIVE_NO)),
              LONG_INT((ZQ_TRC_INTARG2.ZB_LONG_INT)),
              LONG_INT((ZQ_RESULT))); 
            /*ADD by ZHUJ FOR CR6333 begin*/
            Q_S0040_GEN_ERR(M_ERT0027_MSF_DISK_ERROR,
                   M_ERC6_USER_REC, Z_TRACE, 
                   NUM(B_DRIVE_NO), B_FILE_NO);
            /*ADD END*/
          FI;
        FI;
      OD;
   ELSE
      ZF_EVENT:=ZE_EV_FILE_ERROR;
   FI;

   /*FR36_270318*/
   IF B_CPL_CODE /= E_NULL_CODE
      THEN
                TRACEINFO :=
                         'GLOBAL STOP FILE_CLE_R (%d %d)  ';

               TRC_BSC_PM3(
                    FILENAME,
                    LONG_INT(__LINENO__),
                    LONG_INT(SUB_CLASS_PM_CCRH),
                    TRACEID(NORM),
                    TRACEINFO,
                    LONG_INT((B_CPL_CODE)),
                    LONG_INT((ZF_EVENT)),
                    LONG_INT((0)));
   FI;
   /*FR36_270318*/

OD;

RETURN ZE_TO_BE_PROCESSED;

END Q_S0230_FILE_CLOSED;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0240_CCRH_IS_ACTIVE                              */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*     CREATION DATE: 96/10/16                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       CHECKS IF THE CCRH FMM IS ACTIVE IN THE DATABASE.            */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0070_WAIT_TIME                             */
/*                      Q_S0060_DB_ERROR                              */
/*     CALLED FROM:                                                   */
/*                      Q_S0010_INIT                                  */
/*                      Q_S0380_HANDLE_TIME_OUT                       */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      GET     R_PM_TASK                             */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0240_CCRH_IS_ACTIVE : PROC ()
                         RETURNS(BOOL);

Z_TRACE := H'0240;

GET R_PM_TASK WHERE (D_INDEX=ZS_CCRH_REL_IDX);

DO WHILE DB_PARMS.B_DB_STATUS = M_DB_TUPHELD;
   Q_S0070_WAIT_TIME(ZS_WAIT_TIME_DB);

   GET R_PM_TASK WHERE (D_INDEX=ZS_CCRH_REL_IDX);
OD;

IF DB_PARMS.B_DB_STATUS/= M_DB_SUCCESS
   THEN
   Q_S0060_DB_ERROR(M_ERC6_USER_REC,34);
   /*WIPRO:B10_MX_MR1 RT TRACE*/
 TRACEINFO    :='DB ACCESS FAIL (%d)             ';
      TRC_BSC_PM1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCRH),
              TRACEID(ERIR),
              TRACEINFO,
              LONG_INT((ZS_CCRH_REL_IDX)),
              LONG_INT(0),
              LONG_INT(0));
/*END WIPRO:B10_MX_MR1 RT TRACE*/

FI;

RETURN (DB_PARMS.B_DB_STATUS = M_DB_SUCCESS AND
        R_PM_TASK.D_MEA_TASK=E_PM_CCRH_ACTIVE);
END Q_S0240_CCRH_IS_ACTIVE;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0250_SET_R_PM_TASK                               */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 96/10/16                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*      SETS THE ACTIVE-IDLE STATE IN THE DATABASE FOR CCRH.          */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_TASK M_PM_MEAS_TASK                        */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0070_WAIT_TIME                             */
/*     CALLED FROM:                                                   */
/*                      Q_S0010_INIT                                  */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      MODIFY  R_PM_TASK                             */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0250_SET_R_PM_TASK : PROC (ZF_TASK M_PM_MEAS_TASK);

Z_TRACE := H'0250;

MODIFY R_PM_TASK WHERE (D_INDEX=ZS_CCRH_REL_IDX)
                 TO (D_MEA_TASK:=ZF_TASK) ECHO;

DO WHILE DB_PARMS.B_DB_STATUS = M_DB_TUPHELD;
   Q_S0070_WAIT_TIME(ZS_WAIT_TIME_DB);
   MODIFY R_PM_TASK WHERE (D_INDEX=ZS_CCRH_REL_IDX)
                       TO (D_MEA_TASK:=ZF_TASK) ECHO;

OD;

END Q_S0250_SET_R_PM_TASK;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0260_GET_TRXS_OF_A_CELL                          */
/*                                                                    */
/*     PROGRAMMER: DENIZ BELGIN                                       */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/01/31                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION: GETS ALL TRXS ASSOCIATED TO A CELL     */
/*       AND FILL IN THE STRUCTURE Z_TRXS_OF_A_CELL.                  */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_CELL_IDX M_CELL_IDX ,                      */
/*                      ZF_TYPE ZM_ANALYSIS_TYPE                      */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0070_WAIT_TIME                             */
/*                      Q_S0040_GEN_ERR                               */
/*     CALLED FROM:                                                   */
/*                      Q_S0550_04_MAKE_RES_FILE_04                   */
/*                      Q_S0560_05_MAKE_RES_FILE_05                   */
/*                      Q_S0790_MAKE_RES_FILE_110_3                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      GET     R_TRX_MGT                             */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0260_GET_TRXS_OF_A_CELL : PROC( ZF_CELL_IDX   M_CELL_IDX ,
                                   ZF_TYPE       ZM_ANALYSIS_TYPE);

DCL ZQ_I       INT;
DCL ZQ_J       INT;
DCL ZQ_SDCCH   BOOL;
DCL ZQ_T       INT;
DCL ZQ_TRX_IDX INT;
DCL ZQ_FOUND BOOL;
DCL ZQ_K, ZQ_TRX INT;
Z_TRACE := H'0260;

ZQ_FOUND := FALSE;

DO WITH Z_TRXS_OF_A_CELL;

   DO FOR ZQ_I := 1 TO M_MAX_TRX_PER_CELL;
      ZB_TRXS(ZQ_I) := M_NULL_TRX_IDX;
   OD;

   DO FOR ZQ_I := 1 TO M_MAX_TRX_PER_CELL;
     DO FOR ZQ_J := 0 TO 7;
       ZB_RELV_TIME_SLOTS( ZQ_I, ZQ_J ) := FALSE;
     OD;

      ZB_RELEVANT_TRX_ID_RTCH ( ZQ_I ) := FALSE;
      ZB_RELEVANT_TRX_ID_SDCCH( ZQ_I ) := FALSE;
   OD;

   ZB_NUMBER_OF_TRXS := 0;
   ZB_NUMBER_OF_SDCCH_TRXS := 0;
   ZB_CELL_IDX       := ZF_CELL_IDX;

  /* GET R_TRX_MGT WHERE (D_CELL_IDX = ZF_CELL_IDX);

   DO FOR ZQ_T := 1 TO ZS_MAX_RETRY
      WHILE DB_PARMS.B_DB_STATUS = M_DB_TUPHELD;

      Q_S0070_WAIT_TIME(ZS_WAIT_TIME_DB);
      GET R_TRX_MGT WHERE (D_CELL_IDX = ZF_CELL_IDX);
   OD;

   DO WHILE DB_PARMS.B_DB_STATUS = M_DB_SUCCESS;

      ZB_NUMBER_OF_TRXS := ZB_NUMBER_OF_TRXS + 1;

      IF ZF_TYPE = E_SDCH THEN

         ZQ_SDCCH := FALSE;

         DO FOR ZQ_I := 0 TO 7;
            IF R_TRX_MGT.D_TRX_TSCF( ZQ_I ) =
                  M_CHAN_TYPE_MAIN_COMB_BCCH OR
               R_TRX_MGT.D_TRX_TSCF( ZQ_I ) =
                  M_CHAN_TYPE_MCBCCH_W_CBCH  OR
               R_TRX_MGT.D_TRX_TSCF( ZQ_I ) =
                  M_CHAN_TYPE_SDCCH OR
               R_TRX_MGT.D_TRX_TSCF( ZQ_I ) =
                  M_CHAN_TYPE_SDCCH_W_CBCH OR
               R_TRX_MGT.D_TRX_TSCF( ZQ_I ) =
                  M_CHAN_TYPE_DYN_SDCCH
               THEN
               ZQ_SDCCH := TRUE;
               ZB_RELV_TIME_SLOTS(R_TRX_MGT.D_TRX_ID,ZQ_I) := TRUE;
            FI;
         OD;

         IF ZQ_SDCCH THEN
            ZB_NUMBER_OF_SDCCH_TRXS := ZB_NUMBER_OF_SDCCH_TRXS + 1;
            ZB_RELEVANT_TRX_ID_SDCCH(R_TRX_MGT.D_TRX_ID) := TRUE;
         FI;

      ELSIF ZF_TYPE = E_RTCH THEN

         DO FOR ZQ_I := 0 TO 7;
            IF R_TRX_MGT.D_TRX_TSCF( ZQ_I ) =
                  M_CHAN_TYPE_TCH_FULL_RATE OR
               R_TRX_MGT.D_TRX_TSCF( ZQ_I ) =
                  M_CHAN_TYPE_TCH_DUAL_RATE OR
               R_TRX_MGT.D_TRX_TSCF( ZQ_I ) =
                  M_CHAN_TYPE_DYN_SDCCH
               THEN
               ZB_RELV_TIME_SLOTS(R_TRX_MGT.D_TRX_ID,ZQ_I) := TRUE;
               ZB_RELEVANT_TRX_ID_RTCH(R_TRX_MGT.D_TRX_ID) := TRUE;

            FI;
         OD;
      FI;

      IF ZB_NUMBER_OF_TRXS > M_MAX_TRX_PER_CELL
         THEN
         Q_S0040_GEN_ERR(M_ERT0050_0808_MSG_UNEXPEC,
                         M_ERC6_USER_REC, 0,0,H'74);
      ELSE

         ZB_TRXS(R_TRX_MGT.D_TRX_ID)  := R_TRX_MGT.D_TRX_IDX;
         ZB_ID_TRX(R_TRX_MGT.D_TRX_ID):= R_TRX_MGT.D_TRX_ID;
      FI;

      GET R_TRX_MGT WHERE (D_CELL_IDX = ZF_CELL_IDX) IN SEQ;

      DO FOR ZQ_T := 1 TO ZS_MAX_RETRY
         WHILE DB_PARMS.B_DB_STATUS = M_DB_TUPHELD;

         Q_S0070_WAIT_TIME(ZS_WAIT_TIME_DB);
         GET R_TRX_MGT WHERE (D_CELL_IDX = ZF_CELL_IDX) IN SEQ;
      OD;
   OD;  /..* DO WHILE *../
OD; /..* DO WITH */

/* START: DTC513    */
DO FOR ZQ_TRX_IDX := 1 TO 1400 WHILE NOT ZQ_FOUND;
 DO WITH Z_FA_TRX_MGT.ZB_TUPLE_PTR -> ZM_R_TRX_MGT(INT((ZQ_TRX_IDX)));
	
      /*DO WHILE DB_PARMS.B_DB_STATUS = M_DB_SUCCESS;*/
      IF( D_CELL_IDX = ZF_CELL_IDX )
        THEN
        ZQ_TRX :=  ZQ_TRX_IDX;
        ZQ_FOUND := TRUE;
      FI;
  OD;
OD;        


   IF ZQ_FOUND
    THEN
  
    ZQ_FOUND := FALSE;

     DO FOR ZQ_K := ZQ_TRX  TO 1400 WHILE NOT ZQ_FOUND;
      DO WITH Z_FA_TRX_MGT.ZB_TUPLE_PTR -> 
                             ZM_R_TRX_MGT(INT((ZQ_K)));
       IF ( D_CELL_IDX = ZF_CELL_IDX)
       THEN
    /*    ZQ_FOUND := TRUE;
       ELSE  */
         ZB_NUMBER_OF_TRXS := ZB_NUMBER_OF_TRXS + 1;

          IF ZF_TYPE = E_SDCH THEN

            ZQ_SDCCH := FALSE;

            DO FOR ZQ_I := 0 TO 7;
             IF D_TRX_TSCF( ZQ_I ) =
                  M_CHAN_TYPE_MAIN_COMB_BCCH OR
                D_TRX_TSCF( ZQ_I ) =
                  M_CHAN_TYPE_MCBCCH_W_CBCH  OR
                D_TRX_TSCF( ZQ_I ) =
                  M_CHAN_TYPE_SDCCH OR
                D_TRX_TSCF( ZQ_I ) =
                  M_CHAN_TYPE_SDCCH_W_CBCH OR
                D_TRX_TSCF( ZQ_I ) =
                  M_CHAN_TYPE_DYN_SDCCH
               THEN
                ZQ_SDCCH := TRUE;
                ZB_RELV_TIME_SLOTS(D_TRX_ID,ZQ_I) := TRUE;
             FI;
            OD;

            IF ZQ_SDCCH THEN
              ZB_NUMBER_OF_SDCCH_TRXS := ZB_NUMBER_OF_SDCCH_TRXS + 1;
              ZB_RELEVANT_TRX_ID_SDCCH(D_TRX_ID) := TRUE;
            FI;

        ELSIF ZF_TYPE = E_RTCH THEN

         DO FOR ZQ_I := 0 TO 7;
            IF D_TRX_TSCF( ZQ_I ) =
                  M_CHAN_TYPE_TCH_FULL_RATE OR
               D_TRX_TSCF( ZQ_I ) =
                  M_CHAN_TYPE_TCH_DUAL_RATE OR
               D_TRX_TSCF( ZQ_I ) =
                  M_CHAN_TYPE_DYN_SDCCH
               THEN
               ZB_RELV_TIME_SLOTS(D_TRX_ID,ZQ_I) := TRUE;
               ZB_RELEVANT_TRX_ID_RTCH(D_TRX_ID) := TRUE;

            FI;
         OD;
      FI;

      IF ZB_NUMBER_OF_TRXS > M_MAX_TRX_PER_CELL
         THEN
         Q_S0040_GEN_ERR(M_ERT0050_0808_MSG_UNEXPEC,
                         M_ERC6_USER_REC, 0,0,H'74);
      ELSE

        ZB_TRXS(D_TRX_ID)  := ZQ_K; /* Gives TRX_IDX value or tupple*/
        ZB_ID_TRX(D_TRX_ID):= D_TRX_ID;
      FI;
      
    FI; /* D_CELL_IDX /= ZF_CELL_IDX */
  OD;
 OD; 
FI; /* ZQ_FOUND */
OD; /* Z_TRXS_OF_A_CELL */

END Q_S0260_GET_TRXS_OF_A_CELL;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0270_BEQ_SEQ_FROM_CELL_IDX                       */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (ADC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 96/01/29                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION: EXTRACTS THE BEQ_SECTOR OUT OF THE     */
/*                             CELL_IDX IF ONE EXISTS.                */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_CELL_IDX M_CELL_IDX                        */
/*     RETURNED VALUE:                                                */
/*                      ZM_PM_BEQ_AND_SECTOR                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0070_WAIT_TIME                             */
/*     CALLED FROM:                                                   */
/*                      Q_S0520_01_MAKE_RES_FILE_01                   */
/*                      Q_S0530_02_MAKE_RES_FILE_02                   */
/*                      Q_S0540_03_MAKE_RES_FILE_03                   */
/*                      Q_S0550_04_MAKE_RES_FILE_04                   */
/*                      Q_S0560_05_MAKE_RES_FILE_05                   */
/*                      Q_S0570_06_MAKE_RES_FILE_06                   */
/*                      Q_S0640_19_MAKE_RES_FILE_19                   */
/*                      Q_S0660_26_MAKE_RES_FILE_26                   */
/*                      Q_S0670_27_MAKE_RES_FILE_27                   */
/*                      Q_S0690_28_MAKE_RES_FILE_28                   */
/*                      Q_S0710_29_MAKE_RES_FILE_29                   */
/*                      Q_S0760_110_MAKE_RES_FILE_110                 */
/*                      Q_S0810_180_MAKE_RES_FILE_180                 */
/*                      Q_S0790_MAKE_RES_FILE_110_3                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      GET     R_CELL_MGT                            */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0270_BEQ_SEQ_FROM_CELL_IDX: PROC(ZF_CELL_IDX M_CELL_IDX,
                                    ZF_BEQ_SECTOR
                                     ZM_PM_BEQ_AND_SECTOR LOC)
                                    RETURNS (BOOL);

DCL ZQ_FOUND      BOOL;
DCL ZQ_T          INT;
DCL ZQ_CELL_IDX INT ;
Z_TRACE := H'0270;

ZF_BEQ_SECTOR.B_BEQ    := M_NULL_BEQ;
ZF_BEQ_SECTOR.B_SECTOR := M_NULL_SECTOR;
ZQ_FOUND               := FALSE;

IF ZF_CELL_IDX/=M_NULL_CELL_IDX
   THEN
   /* STRAT : DTC513 overload alarm */ 
 DO FOR ZQ_CELL_IDX := 1 TO 700 WHILE ZQ_FOUND /= TRUE ; 
  DO WITH Z_FA_CELL_MGT.ZB_TUPLE_PTR -> 
                       ZM_R_CELL_MGT(INT((ZQ_CELL_IDX)));  
   /* END : DTC513 overload alarm */  
  /* GET R_CELL_MGT WHERE (D_CELL_IDX=ZF_CELL_IDX);

   DO FOR ZQ_T := 1 TO ZS_MAX_RETRY
      WHILE DB_PARMS.B_DB_STATUS = M_DB_TUPHELD;

      Q_S0070_WAIT_TIME(ZS_WAIT_TIME_DB);
      GET R_CELL_MGT WHERE (D_CELL_IDX = ZF_CELL_IDX);
   OD; */

   /*IF DB_PARMS.B_DB_STATUS=M_DB_SUCCESS
      THEN*/
     IF ( ZQ_CELL_IDX = INT((ZF_CELL_IDX)))
      THEN
      ZF_BEQ_SECTOR.B_BEQ    := D_BEQ_NBR;  /*DTC513 overload alarm */
      ZF_BEQ_SECTOR.B_SECTOR := D_SECT_NBR; /*DTC513 overload alarm */
      IF ZF_BEQ_SECTOR.B_BEQ /= 0
        THEN
        ZQ_FOUND := TRUE;
      FI;
   FI;
  OD;
 OD; /* DO with */ 
FI;



RETURN (ZQ_FOUND);
/*WARNING REMOVAL FOR AL30K*/
/*GET R_CELL_MGT WHERE (D_CELL_IDX=ZF_CELL_IDX);*/

END Q_S0270_BEQ_SEQ_FROM_CELL_IDX;

/* BEGIN CR:745699 */
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0270_BEQ_SEC_FROM_OLC_CELL_IDX                   */
/*                                                                    */
/*     PROGRAMMER: SABIYA                                             */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE:                                                 */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION: EXTRACTS THE BEQ_SECTOR OUT OF THE     */
/*                             CELL_IDX IF ONE EXISTS.                */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_CELL_IDX M_CELL_IDX                        */
/*     RETURNED VALUE:                                                */
/*                      ZM_PM_BEQ_SECT_SITE_TRX                       */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0070_WAIT_TIME                             */
/*     CALLED FROM:                                                   */
/*                      Q_S0809_MAKE_RES_FILE_110_15                  */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      GET     R_CELL_MGT                            */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0270_BEQ_SEQ_FROM_OLC_CELL_IDX: PROC(ZF_CELL_IDX M_CELL_IDX,
                                    ZF_BEQ_SECTOR
                                     ZM_PM_BEQ_SECT_SITE_TRX LOC)
                                    RETURNS (BOOL);

DCL ZQ_FOUND      BOOL;
DCL ZQ_T          INT;

Z_TRACE := H'0270;

ZF_BEQ_SECTOR.B_BEQ    := M_NULL_BEQ;
ZF_BEQ_SECTOR.B_SECTOR := M_NULL_SECTOR;
ZF_BEQ_SECTOR.B_TRX_ID  := 0;
ZF_BEQ_SECTOR.B_RRH_ID  := 0;
ZQ_FOUND               := FALSE;

IF ZF_CELL_IDX/=M_NULL_CELL_IDX
   THEN
   GET R_CELL_MGT WHERE (D_CELL_IDX=ZF_CELL_IDX);

   DO FOR ZQ_T := 1 TO ZS_MAX_RETRY
      WHILE DB_PARMS.B_DB_STATUS = M_DB_TUPHELD;

      Q_S0070_WAIT_TIME(ZS_WAIT_TIME_DB);
      GET R_CELL_MGT WHERE (D_CELL_IDX = ZF_CELL_IDX);
   OD;

   IF DB_PARMS.B_DB_STATUS=M_DB_SUCCESS
      THEN
      ZF_BEQ_SECTOR.B_BEQ    := R_CELL_MGT.D_BEQ_NBR;
      ZF_BEQ_SECTOR.B_SECTOR := R_CELL_MGT.D_SECT_NBR;
      IF ZF_BEQ_SECTOR.B_BEQ /= 0
        THEN
        ZQ_FOUND := TRUE;
      FI;
   FI;
FI;

RETURN (ZQ_FOUND);

END Q_S0270_BEQ_SEQ_FROM_OLC_CELL_IDX; 

/* END CR:745699 */
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0280_GET_PM_SCOPE                                */
/*                                                                    */
/*     PROGRAMMER: D.BELGIN                                           */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 96/07/30                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*          READS THE RELEVANT TUPLE OF THE RELATION R_PM_SC_G2       */
/*          RETURNS FALSE IF NOT FOUND.                               */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_ACT_IDX INT                                */
/*     RETURNED VALUE:                                                */
/*                      M_PM_SCOPE_IN_G2                              */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0060_DB_ERROR                              */
/*     CALLED FROM:                                                   */
/*                      Q_S0550_04_MAKE_RES_FILE_04                   */
/*                      Q_S0560_05_MAKE_RES_FILE_05                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      GET     R_PM_SC_G2                            */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0280_GET_PM_SCOPE : PROC ( ZF_ACT_IDX   INT )
               RETURNS (M_PM_SCOPE_IN_G2);

DCL ZQ_CELL_BIT_MAP   M_PM_SCOPE_IN_G2;

Z_TRACE := H'0280;

GET R_PM_SC_G2  WHERE (D_ACT_IDX = ZF_ACT_IDX);
IF DB_PARMS.B_DB_STATUS /= M_DB_SUCCESS THEN

   Q_S0060_DB_ERROR(M_ERC6_USER_REC,63);
    /*WIPRO:B10_MX_MR1 RT TRACE*/
 TRACEINFO    :='DB ACCESS FAIL (%d)             ';
      TRC_BSC_PM1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCRH),
              TRACEID(ERIR),
              TRACEINFO,
              LONG_INT((ZF_ACT_IDX)),
              LONG_INT(0),
              LONG_INT(0));
/*END WIPRO:B10_MX_MR1 RT TRACE*/
ELSE
   ZQ_CELL_BIT_MAP := R_PM_SC_G2.D_SCOP_G2;
FI;

RETURN (ZQ_CELL_BIT_MAP);

END Q_S0280_GET_PM_SCOPE;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0290_GET_TRX_ID                                  */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (ADC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 94/06/04                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION: GETS THE TRX_ID FROM THE IDX.          */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_TRX_IDX M_TRX_IDX,                         */
/*                      ZF_TRX_ID M_TRX_ID LOC                        */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0550_04_MAKE_RES_FILE_04                   */
/*                      Q_S0560_05_MAKE_RES_FILE_05                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      GET     R_TRX_MGT                             */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0290_GET_TRX_ID: PROC (ZF_TRX_IDX   M_TRX_IDX,
                          ZF_TRX_ID    M_TRX_ID  LOC);

Z_TRACE := H'0290;

GET R_TRX_MGT WHERE (D_TRX_IDX=ZF_TRX_IDX);

IF DB_PARMS.B_DB_STATUS=M_DB_SUCCESS
   THEN
   ZF_TRX_ID:=R_TRX_MGT.D_TRX_ID;
ELSE
   ZF_TRX_ID:=0;
FI;

END Q_S0290_GET_TRX_ID;
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0295_GET_CELL_TRX_ID                             */
/*                                                                    */
/*     PROGRAMMER: A.H.SWANN                                          */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 01/06/11                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION: GETS THE TRX_ID FROM THE IDX.          */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_TRX_IDX M_TRX_IDX,                         */
/*                      ZF_TRX_ID M_TRX_ID LOC                        */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0525_MAKE_RES_FILE_1_2                     */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      GET     R_TRX_MGT                             */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0295_GET_CELL_TRX_ID: PROC (ZF_TRX_IDX        M_TRX_IDX,
                               ZF_CELL_TRX_ID    ZM_TRX_RES  LOC,
                               ZF_CELL_IDX       M_CELL_IDX  LOC);

DCL ZQ_CELL_ID   ZM_PM_BEQ_AND_SECTOR;

Z_TRACE := H'0295;

/*CRI01323736.02 bgn, Relation can accessed directly using index,  
  no need to loop.*/
 IF ZF_TRX_IDX /= H'FFFF
 THEN
   DO WITH Z_FA_TRX_MGT.ZB_TUPLE_PTR -> ZM_R_TRX_MGT(INT((ZF_TRX_IDX)));
/*CRI01323736.02 end*/
    ZF_CELL_IDX := D_CELL_IDX;
    ZF_CELL_TRX_ID.B_TRX_NUM := D_TRX_ID;
    Q_S0270_BEQ_SEQ_FROM_CELL_IDX(D_CELL_IDX,ZQ_CELL_ID);
    ZF_CELL_TRX_ID.B_BTS_IDX := ZQ_CELL_ID.B_BEQ;
    ZF_CELL_TRX_ID.B_SECT_NO := ZQ_CELL_ID.B_SECTOR;
   OD; 
 ELSE

    ZF_CELL_TRX_ID.B_TRX_NUM := 0;
    ZF_CELL_IDX := H'FFFF;/*CRI01323736.02*/
 FI;
 
 
 ZF_CELL_TRX_ID.B_FILLER := H'FF;

END Q_S0295_GET_CELL_TRX_ID;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0300_SEND_PM_CC_RES_CNF                          */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 96/10/16                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       SEND OUT THE 1085_PM_CC_RES_CNF MESSAGE.                     */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_PM_JOB_ERR M_JOB_PM_ERR                    */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      1085_PM_CC_RES_CNF                            */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0310_PM_CC_RES_REQ                         */
/*                      Q_S0370_STATE_MACHINE                         */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0300_SEND_PM_CC_RES_CNF: PROC(ZF_PM_JOB_ERR M_JOB_PM_ERR);

/*START: CRI00611721 */
DCL ZQ_TOT_RECS	M_LONG_INT;
/*END: CRI00611721 */

Z_TRACE := H'300;

DO WITH Z_RESULT_FILE;
   /*START: CRI00611721 */
   ZQ_TOT_RECS.B_LOW  := ZB_TOT_RECS.ZB_LOW_INT;
   ZQ_TOT_RECS.B_HIGH := ZB_TOT_RECS.ZB_HIGH_INT;
   /*END: CRI00611721 */

   TRANSMIT_DIRECTED_MSG 1085_PM_CC_RES_CNF(ZB_MEAS_TYPE,
                                            ZB_ACT_IDX,
                                            ZF_PM_JOB_ERR,
                               /*START: CRI00611721 */
	         		Z_NBR_RES_FILE+1,
                                ZQ_TOT_RECS)
		         	/*END: CRI00611721 */
          TO (Z_MECO_PROC_ID);



              /*WIPRO: B11_MX_MR0_PKG1 RT TRACE*/
     
                TRACEINFO :=
                         'PM ERR 1085         (%d)        ';

               TRC_BSC_PM3(
                    FILENAME,
                    LONG_INT(__LINENO__),
                    LONG_INT(SUB_CLASS_PM_CCRH),
                    TRACEID(NORM),
                    TRACEINFO,
                    LONG_INT((ZF_PM_JOB_ERR)),
                    LONG_INT((0)),
                    LONG_INT((0)));
               /*END WIPRO: B11_MX_MR0_PKG1 RT TRACE*/

    
 
OD;

END Q_S0300_SEND_PM_CC_RES_CNF;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0310_PM_CC_RES_REQ                               */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (ADC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                JP QUINN                             96/10/16       */
/*                                                                    */
/*     CREATION DATE: 96/01/09                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       PROCESS THE 1083_PM_CC_RES_REQ MESSAGE                       */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      ZM_MSG_STATE                                  */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0330_GET_R_PM_ACT                          */
/*                      Q_S0300_SEND_PM_CC_RES_CNF                    */
/*     CALLED FROM:                                                   */
/*                      Q_S0000_MAIN_CCRH                             */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0310_PM_CC_RES_REQ: PROC() RETURNS (ZM_MSG_STATE);

DCL ZQ_MSG_STATE     ZM_MSG_STATE;

Z_TRACE := H'0310;

DO WITH Z_MSG_BUF_PTR -> T_MSG_1083_PM_CC_RES_REQ;
   DO WITH T_B_ELMT_STRUCT;
      Z_MECO_PROC_ID:=B_PROC_ID;
      Z_ACT_IDX := B_ACT_IDX;
      Z_CCI_1_PTR := B_CCI_1_PTR;
      Z_CCI_2_PTR := B_CCI_2_PTR;

      Q_S0330_GET_R_PM_ACT(B_ACT_IDX);
      IF DB_PARMS.B_DB_STATUS = M_DB_SUCCESS
         THEN
         IF R_PM_ACT.D_SUCC_UPD = FALSE
            THEN
  /*FR36_270318*/
                TRACEINFO :=
                         'GLOBAL STOP DB_SUCC (%d %d)     ';

               TRC_BSC_PM3(
                    FILENAME,
                    LONG_INT(__LINENO__),
                    LONG_INT(SUB_CLASS_PM_CCRH),
                    TRACEID(NORM),
                    TRACEINFO,
                    LONG_INT((NUM(E_NO_REP_IO_ERR))),
                    LONG_INT((B_ACT_IDX)),
                    LONG_INT((0)));
   /*FR36_270318*/
 

            Q_S0300_SEND_PM_CC_RES_CNF(E_NO_REP_IO_ERR);
            ZQ_MSG_STATE := ZE_PROCESSED;
         ELSE
            /*ER7614 begin by ZHUJ*/
            /*IF it is T26 or T180, and PTR is NULL, CCRH should inform
             MECO with 1085 the error status, which won't trigger global
             stop, here we select E_OLD_FILE_DELD, it will be recorded 
             in DIR file status; error report should be triggered here, 
             so ZQ_MSG_STATE is ZE_CORRUPTED*/
            IF ((R_PM_ACT.D_MEAS_TYP = E_MT_TRAFFIC_FLOW OR 
              R_PM_ACT.D_MEAS_TYP = E_MT_HANDOVER_PER_SERVINGCELL)
              AND
              (Z_CCI_1_PTR = NULL OR Z_CCI_2_PTR = NULL))
            THEN
               Q_S0300_SEND_PM_CC_RES_CNF(E_OLD_FILE_DELD);
               ZQ_MSG_STATE := ZE_CORRUPTED;
            /*ER7614 end by ZHUJ*/
            ELSE
               ZQ_MSG_STATE := ZE_TO_BE_PROCESSED;
            FI;
         FI;
         
      ELSE
  /*FR36_270318*/
                TRACEINFO :=
                         'GLOBAL STOP DB_UNSUCC (%d %d)   ';

               TRC_BSC_PM3(
                    FILENAME,
                    LONG_INT(__LINENO__),
                    LONG_INT(SUB_CLASS_PM_CCRH),
                    TRACEID(NORM),
                    TRACEINFO,
                    LONG_INT((NUM(E_NO_REP_IO_ERR))),
                    LONG_INT((DB_PARMS.B_DB_STATUS)),
                    LONG_INT((0)));
   /*FR36_270318*/

         Q_S0300_SEND_PM_CC_RES_CNF(E_NO_REP_IO_ERR);
         ZQ_MSG_STATE := ZE_CORRUPTED;
      FI;
   OD; /* B_ELMT_STRUCT */
OD; /* DO WITH MSG */

RETURN (ZQ_MSG_STATE);

END Q_S0310_PM_CC_RES_REQ;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0320_START_RESULTS                               */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (ADC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                NAIKA                                02/08/02       */
/*                JP QUINN                             96/10/16       */
/*                                                                    */
/*     CREATION DATE: 96/01/09                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       START THE RESULT FILE PRODUCTION.                            */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0020_INIT_FILE                             */
/*                      Q_S0140_OPEN_HIST_FILE                        */
/*     CALLED FROM:                                                   */
/*                      Q_S0370_STATE_MACHINE                         */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0320_START_RESULTS: PROC();

Z_TRACE := H'0320;

Q_S0020_INIT_FILE(Z_HISTORY_FILE);
Q_S0020_INIT_FILE(Z_SECOND_HIST_FILE);
Q_S0020_INIT_FILE(Z_THIRD_HIST_FILE);
 /* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
Q_S0020_INIT_FILE(Z_SEVENTH_HIST_FILE);
 /* END: ADD-WIPRO-B10-MR1-CHANGE */
 /* BEGIN: CR20/313054 */
Q_S0020_INIT_FILE(Z_THIRTEENTH_HIST_FILE);
 /* END: CR20/313054 */ 
/*BEGIN : CR20/301337-RFI4448 FILE FORMAT*/
Q_S0020_INIT_FILE(Z_ELEVENTH_HIST_FILE);
/*END : CR20/301337*/
/*Begin DCTPD01288924 */
Q_S0020_INIT_FILE(Z_SEVENTEENTH_HIST_FILE);
/*End DCTPD01288924 */
/*begin CR1238146 A-GPS*/
Q_S0020_INIT_FILE(Z_18TH_HIST_FILE);
/*end CR1238146 A-GPS*/
Q_S0020_INIT_FILE(Z_RESULT_FILE);
Q_S0140_OPEN_HIST_FILE(E_HIST_NORM);

/*START: CRI00611721*/
Z_NBR_RES_FILE := 0;
/*END: CRI00611721*/

END Q_S0320_START_RESULTS;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0330_GET_R_PM_ACT                                */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (ADC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                JP QUINN                             96/10/16       */
/*                                                                    */
/*     CREATION DATE: 96/10/16                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       CREATE THE RESULT FILE.                                      */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_ACT_IDX INT                                */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0070_WAIT_TIME                             */
/*     CALLED FROM:                                                   */
/*                      Q_S0310_PM_CC_RES_REQ                         */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      GET     R_PM_ACT                              */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0330_GET_R_PM_ACT: PROC (ZF_ACT_IDX INT);

Z_TRACE := H'0330;

GET R_PM_ACT WHERE (D_ACT_IDX = ZF_ACT_IDX);

/* RETRY UNTIL THE TUPLE IS FREE */
DO WHILE DB_PARMS.B_DB_STATUS = M_DB_TUPHELD;
   Q_S0070_WAIT_TIME(ZS_WAIT_TIME_DB);

   /* FIND THE CREATED RESULT FILES */
   GET R_PM_ACT WHERE (D_ACT_IDX = ZF_ACT_IDX);
OD;

IF DB_PARMS.B_DB_STATUS = M_DB_SUCCESS
   THEN
   /* SAVE A COPY OF THE FIRST RESULT FILE PROPERTIES */
   DO WITH Z_RESULT_FILE;
      ZB_ACT_IDX  := R_PM_ACT.D_ACT_IDX;
      ZB_MEAS_TYPE:= R_PM_ACT.D_MEAS_TYP;
      ZB_CPL_CODE := E_NULL_CODE;
      /*START: CRI00611721 */
      /*ZB_TOT_RECS := 0; */
      ZB_TOT_RECS.ZB_LONG_INT := 0L;
      /*END: CRI00611721 */
   OD;

   DO WITH Z_HISTORY_FILE;
/*
      IF DB_PARMS.B_DB_STATUS /= M_DB_SUCCESS
         THEN
         ZB_ACT_IDX:=0;
         ZB_MEAS_TYPE:=E_MT_ALL_ACTIVATED_MEASMTS;
      FI;
*/
      ZB_CPL_CODE:=E_NULL_CODE;
      /*START: CRI00611721 */
      /*ZB_TOT_RECS := 0; */
      ZB_TOT_RECS.ZB_LONG_INT := 0L;
      /*END: CRI00611721 */

   OD; /* WITH Z_HISTORY_FILE */
FI; /* IF DB_PARMS = SUCCESS */

END Q_S0330_GET_R_PM_ACT;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0340_CALC_END_COLL_TI                            */
/*                                                                    */
/*     PROGRAMMER: A.H.SWANN                                          */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 98/04/03                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*     GETS THE REAL TIME THEN ROUNDS DOWN TO THE PREVIOUS            */
/*     15_MINUTE BOUNDARY                                             */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      M_GEN_TIME                                    */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0470_PM_TIME_TO_GT_TIME                    */
/*     CALLED FROM:                                                   */
/*                      Q_S0500_FILL_REC_HEAD                         */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0340_CALC_END_COLL_TI : PROC ()
                       RETURNS (M_GEN_TIME);

DCL ZQ_DATE                 M_DATE;
DCL ZQ_GET_TIME             M_GET_TIME;
DCL ZQ_PM_TIME              M_PM_SCHED_TIME;
DCL ZQ_MINUTES              M_BYTE;

Z_TRACE := H'0340;

P_YS8RAA_S020_GET_TIME(ZQ_GET_TIME);

P_YS8RAA_S050_GET_DATE(ZQ_DATE);

ZQ_PM_TIME.B_SC_YEAR := ZQ_DATE.B_YEAR;
ZQ_PM_TIME.B_SC_MONTH := ZQ_DATE.B_MOUNTH;
ZQ_PM_TIME.B_SC_DAY := ZQ_DATE.B_DAY;
ZQ_PM_TIME.B_SC_HOUR := ZQ_GET_TIME.B_TIME.B_HOURS;

ZQ_MINUTES := ZQ_GET_TIME.B_TIME.B_MINUTES / 15;
ZQ_PM_TIME.B_SC_MINUTE := ZQ_MINUTES * 15;

RETURN (Q_S0470_PM_TIME_TO_GT_TIME(ZQ_PM_TIME));

END Q_S0340_CALC_END_COLL_TI;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0350_ADD_COLL_PERIOD                             */
/*                                                                    */
/*     PROGRAMMER: A. FRANZETTI (FACE-MI)                             */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                JP QUINN                             96/10/16       */
/*                                                                    */
/*     CREATION DATE: 86/10/14                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*     ADDS A NUMBER OF QUARTERS FROM THE TIME AND RETURNS A          */
/*     GENERAL TIME FORMAT FOR THE NEW TIME.                          */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_PM_TIME M_PM_SCHED_TIME,                   */
/*                      ZF_QUART_NBR INT                              */
/*     RETURNED VALUE:                                                */
/*                      M_GEN_TIME                                    */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0360_ADD_DAY                               */
/*                      Q_S0470_PM_TIME_TO_GT_TIME                    */
/*     CALLED FROM:                                                   */
/*                      Q_S0500_FILL_REC_HEAD                         */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0350_ADD_COLL_PERIOD : PROC (ZF_PM_TIME    M_PM_SCHED_TIME,
                                ZF_QUART_NBR  INT)
                       RETURNS (M_GEN_TIME);

DCL  ZQ_QUART_IND  INT;

Z_TRACE := H'0350;

/* LOOP DECREMENTING THE COLLECTION PERIOD UNTIL BOUNDARY CONDITIONS */
/* AT THE MINUTE AND HOUR ARE REACHED THEN CHECK FOR NEW DAY OR YEAR.*/
DO FOR ZQ_QUART_IND := 1 TO ZF_QUART_NBR;
   DO WITH ZF_PM_TIME;
      IF B_SC_MINUTE = 60 - ZS_COLL_PERIOD
         THEN
         /* NEW HOUR */
         B_SC_MINUTE := 0;
         IF B_SC_HOUR = 23
            THEN
            /* NEW DAY */
            B_SC_HOUR := 0;
            Q_S0360_ADD_DAY(B_SC_YEAR,B_SC_MONTH,B_SC_DAY);
         ELSE
            B_SC_HOUR := B_SC_HOUR + 1;
         FI;
      ELSE
         B_SC_MINUTE := B_SC_MINUTE + ZS_COLL_PERIOD;
      FI;
   OD; /* DO WITH ZF_PM_TIME */
OD; /* FOR QUARTERS */

RETURN (Q_S0470_PM_TIME_TO_GT_TIME(ZF_PM_TIME));

END Q_S0350_ADD_COLL_PERIOD;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0360_ADD_DAY                                     */
/*                                                                    */
/*     PROGRAMMER: A.FRANZETTI(MIDC)                                  */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                JP QUINN                             96/10/16       */
/*                                                                    */
/*     CREATION DATE: 86/10/14                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*                    THIS PROCEDURE ADDS ONE DAY TO A GIVEN DAY      */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_YEAR INT LOC,                              */
/*                      ZF_MONTH M_MONTH LOC,                         */
/*                      ZF_DAY M_DAY LOC                              */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0350_ADD_COLL_PERIOD                       */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0360_ADD_DAY : PROC (ZF_YEAR     INT      LOC,
                        ZF_MONTH    M_MONTH  LOC,
                        ZF_DAY      M_DAY    LOC);

DCL ZQ_LEAP_YEAR  BOOL;

Z_TRACE := H'0360;

/* THIS IS GOOD FOR THE NEXT 400 YEARS EVEN IF NOT   */
/* CORRECT FOR ANY YEAR.                             */
ZQ_LEAP_YEAR:=(ZF_YEAR REM 4=0);

IF ZS_MONTH_LENGTH(ZQ_LEAP_YEAR,ZF_MONTH) = ZF_DAY
   THEN
   ZF_DAY :=1;
   ZF_MONTH:=(ZF_MONTH REM 12)+1;
   IF ZF_MONTH = 1
      THEN
      ZF_YEAR:=ZF_YEAR+1;
   FI;
ELSE
   ZF_DAY:=ZF_DAY+1;
FI;

END Q_S0360_ADD_DAY;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0370_STATE_MACHINE                               */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (ADC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY: NAIKA              DATE:          */
/*                                                                    */
/*     CREATION DATE: 96/10/17                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*      MESSAGE BASED STATE MACHINE WHICH CONTROLS THE SUB-SCENARIOS. */
/*      IT PROVIDES ONE ENTRY POINT FOR ALL THE SUB-SCENARIOS.        */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_EVENT ZM_SCENARIO_EVENT,                   */
/*                      ZF_STATE ZM_SCENARIO_STATE LOC,               */
/*                      ZF_PROC_ID M_PROCESS_ID                       */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0320_START_RESULTS                         */
/*                      Q_S0080_SET_HDL_PROC_ID                       */
/*                      Q_S0150_OPEN_2ND_HIS                          */
/*                      Q_S0190_OPEN_RES_FILE                         */
/*                      Q_S0300_SEND_PM_CC_RES_CNF                    */
/*                      Q_S0170_CLOSE_HIST_FILE                       */
/*                      Q_S0510_MAKE_RESULT_FILE                      */
/*                      Q_S0130_RET_ALL_BUF                           */
/*                      Q_S0210_CLOSE_RES_FILE                        */
/*                      Q_S0020_INIT_FILE                             */
/*                      Q_S0140_OPEN_HIST_FILE                        */
/*                      Q_S0790_MAKE_RES_FILE_110_3                   */
/*                      Q_S0800_MAKE_RES_FILE_110_4                   */
/*                      Q_S0120_GET_WRITE_BUF                         */
/*                      Q_S0500_FILL_REC_HEAD                         */
/*                      Q_S0040_GEN_ERR                               */
/*     CALLED FROM:                                                   */
/*                      Q_S0000_MAIN_CCRH                             */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0370_STATE_MACHINE : PROC(ZF_EVENT ZM_SCENARIO_EVENT,
                             ZF_STATE ZM_SCENARIO_STATE LOC,
                             ZF_PROC_ID M_PROCESS_ID);

DCL ZQ_ERROR        BOOL;
DCL ZQ_NEW_STATE    ZM_SCENARIO_STATE;
/*DCL ZQ_REC_HDL      INT;*//*UNUSED*/
DCL ZQ_TRC_INTARG1 ZM_INT_TO_LN_INT; /*RT TRACE*/

Z_TRACE := H'0370;

ZQ_NEW_STATE := ZF_STATE;
ZQ_ERROR     := FALSE;

CASE ZF_STATE OF

   (ZE_IDLE):
   /*****************************************************************/
      Q_S0320_START_RESULTS();
      ZQ_NEW_STATE := ZE_W_HIS_FILE_OPEN;

   (ZE_W_HIS_FILE_OPEN):
   /*****************************************************************/

      CASE ZF_EVENT OF

        (ZE_EV_FILE_OPENED):
           Z_HISTORY_FILE.ZB_IS_OPEN := TRUE;
           Q_S0080_SET_HDL_PROC_ID(Z_HISTORY_FILE, ZF_PROC_ID);
           IF R_PM_ACT.D_MEAS_TYP =
                       E_MT_CELL_TRX_OVERVIEW_COUNTERS
              AND Z_SECOND_HIST_FILE.ZB_IS_OPEN = FALSE
              THEN
              Q_S0150_OPEN_2ND_HIS();
              ZQ_NEW_STATE:=ZE_W_FIRST_HIS_FILE_OPEN;
/* BEGIN : B12_VAMOS */
	   ELSIF R_PM_ACT.D_MEAS_TYP =
			E_MT_VAMOS
	      AND Z_SECOND_HIST_FILE.ZB_IS_OPEN = FALSE
	      THEN
	      Q_S0150_OPEN_2ND_HIS();
              ZQ_NEW_STATE := ZE_W_FIRST_HIS_FILE_OPEN_VMS;
/*END : B12_VAMOS*/
           ELSE
              Q_S0190_OPEN_RES_FILE(ZQ_ERROR,E_WRITE_REQ);
              ZQ_NEW_STATE:=ZE_W_RES_FILE_OPEN;
           FI;

        ELSE
           /* HISTORY FILE NOT OPENED */
/* ZQ1H */ Z_RESULT_FILE.ZB_MEAS_TYPE := R_PM_ACT.D_MEAS_TYP;
/* ZQ1I */ Z_RESULT_FILE.ZB_ACT_IDX   := R_PM_ACT.D_ACT_IDX;
           Q_S0300_SEND_PM_CC_RES_CNF(E_NO_REP_IO_ERR);
           ZQ_NEW_STATE              := ZE_IDLE;
           
           /*ADD ERR RTTRACE*/
           TRACEINFO    :=
             '1stHIS FILE OPEN ERR (%d %d %d) ';
           ZQ_TRC_INTARG1.ZB_LOW_INT := (NUM)(ZF_STATE);
           ZQ_TRC_INTARG1.ZB_HIGH_INT := (NUM)(ZQ_NEW_STATE);
           TRC_BSC_PM2(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCRH),
              TRACEID(WARN),
              TRACEINFO,
              LONG_INT((ZQ_TRC_INTARG1.ZB_LONG_INT)),
              LONG_INT((ZF_EVENT)),
              LONG_INT((Z_HISTORY_FILE.ZB_FCB_INFO.B_FILE_NO))); 
 /*FR36_270318*/
                TRACEINFO :=
                         'GLOBAL STOP HIS_F_OPEN (%d %d)  ';

               TRC_BSC_PM3(
                    FILENAME,
                    LONG_INT(__LINENO__),
                    LONG_INT(SUB_CLASS_PM_CCRH),
                    TRACEID(NORM),
                    TRACEINFO,
                    LONG_INT((ZF_EVENT)),
                    LONG_INT((Z_RESULT_FILE.ZB_MEAS_TYPE)),
                    LONG_INT((0)));
 /*FR36_270318*/
        ESAC; /* ZF_EVENT */
/*START: VAMOS*/
   (ZE_W_FIRST_HIS_FILE_OPEN_VMS):
   /*****************************************************************/
      CASE ZF_EVENT OF
         (ZE_EV_FILE_OPENED):
            Z_SECOND_HIST_FILE.ZB_IS_OPEN := TRUE;
            Q_S0080_SET_HDL_PROC_ID(Z_SECOND_HIST_FILE,ZF_PROC_ID);
            Q_S0190_OPEN_RES_FILE(ZQ_ERROR,E_WRITE_REQ);
            ZQ_NEW_STATE:=ZE_W_RES_FILE_OPEN;
      ELSE
            /* HISTORY FILE NOT OPENED */
            IF ZF_PROC_ID.B_PID_PID /=  M_PROCESS_ID_NULL.B_PID_PID
              THEN
              Q_S0080_SET_HDL_PROC_ID(Z_SECOND_HIST_FILE,ZF_PROC_ID);
              Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
            /*ADDED FOR FR20/206272 Shailesh*/
              ZQ_NEW_STATE            := ZE_W_HIS_FILE_CLOSE;
              Z_RESULT_FILE.ZB_ERROR  := E_NO_REP_IO_ERR;
      /*FR36_270318*/
      /* BEGIN:CR36/288765 - TRACE IMPROVEMENT */
                TRACEINFO :=
                         'G.STOP 1st_H_FILE_OPEN ( %d %d )';
               TRC_BSC_PM3(
                    FILENAME,
                    LONG_INT(__LINENO__),
                    LONG_INT(SUB_CLASS_PM_CCRH),
                    TRACEID(NORM),
                    TRACEINFO,
                    LONG_INT((ZF_EVENT)),
                    LONG_INT((Z_RESULT_FILE.ZB_MEAS_TYPE)),
                    LONG_INT((0)));
      /* END:CR36/288765 - TRACE IMPROVEMENT */
     /*FR36_270318*/
            ELSE
                Z_RESULT_FILE.ZB_ERROR  := E_NO_REP_IO_ERR;
   /*FR36_270318*/
  /* BEGIN:CR36/288765 - TRACE IMPROVEMENT */
                TRACEINFO :=
                         'G.STOP 1ST H_FILE_OPEN ( %d %d )';
               TRC_BSC_PM3(
                    FILENAME,
                    LONG_INT(__LINENO__),
                    LONG_INT(SUB_CLASS_PM_CCRH),
                    TRACEID(NORM),
                    TRACEINFO,
                    LONG_INT((ZF_EVENT)),
                    LONG_INT((Z_RESULT_FILE.ZB_MEAS_TYPE)),
                    LONG_INT((0)));
        /* END:CR36/288765 - TRACE IMPROVEMENT */
        /*FR36_270318*/
                Q_S0300_SEND_PM_CC_RES_CNF(E_NO_REP_IO_ERR);
                ZQ_NEW_STATE            := ZE_IDLE;
            /*ADDED FOR FR20/206272 Shailesh*/
            FI;
            /*ADD ERR RTTRACE*/
            TRACEINFO    :=
               '2ndHIS FILE OPEN ERR (%d %d %d) ';
            ZQ_TRC_INTARG1.ZB_LOW_INT := (NUM)(ZF_STATE);
            ZQ_TRC_INTARG1.ZB_HIGH_INT := (NUM)(ZQ_NEW_STATE);
            TRC_BSC_PM2(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCRH),
              TRACEID(WARN),
              TRACEINFO,
              LONG_INT((ZQ_TRC_INTARG1.ZB_LONG_INT)),
              LONG_INT((ZF_EVENT)),
              LONG_INT((Z_SECOND_HIST_FILE.ZB_FCB_INFO.B_FILE_NO)));
      ESAC; /* ZF_EVENT */

/*END : B12_VAMOS*/
   (ZE_W_FIRST_HIS_FILE_OPEN):
   /*****************************************************************/

      CASE ZF_EVENT OF

         (ZE_EV_FILE_OPENED):
            Z_SECOND_HIST_FILE.ZB_IS_OPEN := TRUE;
            Q_S0080_SET_HDL_PROC_ID(Z_SECOND_HIST_FILE,ZF_PROC_ID);
            Q_S0990_OPEN_3RD_HIS();
            ZQ_NEW_STATE:=ZE_W_SECOND_HIS_FILE_OPEN;
            
         ELSE
            /* HISTORY FILE NOT OPENED */
            IF ZF_PROC_ID.B_PID_PID /=  M_PROCESS_ID_NULL.B_PID_PID
              THEN
              Q_S0080_SET_HDL_PROC_ID(Z_SECOND_HIST_FILE,ZF_PROC_ID);
              Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
            /*ADDED FOR FR20/206272 Shailesh*/
              ZQ_NEW_STATE            := ZE_W_HIS_FILE_CLOSE;
              Z_RESULT_FILE.ZB_ERROR  := E_NO_REP_IO_ERR;
   /*FR36_270318*/
      /* BEGIN:CR36/288765 - TRACE IMPROVEMENT */
                TRACEINFO :=
                         'G.STOP 1st_H_FILE_OPEN ( %d %d )';
               TRC_BSC_PM3(
                    FILENAME,
                    LONG_INT(__LINENO__),
                    LONG_INT(SUB_CLASS_PM_CCRH),
                    TRACEID(NORM),
                    TRACEINFO,
                    LONG_INT((ZF_EVENT)),
                    LONG_INT((Z_RESULT_FILE.ZB_MEAS_TYPE)),
                    LONG_INT((0)));
      /* END:CR36/288765 - TRACE IMPROVEMENT */
    /*FR36_270318*/

            ELSE
                Z_RESULT_FILE.ZB_ERROR  := E_NO_REP_IO_ERR;
   /*FR36_270318*/
       /* BEGIN:CR36/288765 - TRACE IMPROVEMENT */

                TRACEINFO :=
                         'G.STOP 1ST H_FILE_OPEN ( %d %d )';
               TRC_BSC_PM3(
                    FILENAME,
                    LONG_INT(__LINENO__),
                    LONG_INT(SUB_CLASS_PM_CCRH),
                    TRACEID(NORM),
                    TRACEINFO,
                    LONG_INT((ZF_EVENT)),
                    LONG_INT((Z_RESULT_FILE.ZB_MEAS_TYPE)),
                    LONG_INT((0)));
        /* END:CR36/288765 - TRACE IMPROVEMENT */

    /*FR36_270318*/

                Q_S0300_SEND_PM_CC_RES_CNF(E_NO_REP_IO_ERR);
                ZQ_NEW_STATE            := ZE_IDLE;
            /*ADDED FOR FR20/206272 Shailesh*/                
            FI;
            
            /*ADD ERR RTTRACE*/
            TRACEINFO    :=
               '2ndHIS FILE OPEN ERR (%d %d %d) ';
            ZQ_TRC_INTARG1.ZB_LOW_INT := (NUM)(ZF_STATE);
            ZQ_TRC_INTARG1.ZB_HIGH_INT := (NUM)(ZQ_NEW_STATE);
            TRC_BSC_PM2(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCRH),
              TRACEID(WARN),
              TRACEINFO,
              LONG_INT((ZQ_TRC_INTARG1.ZB_LONG_INT)),
              LONG_INT((ZF_EVENT)),
              LONG_INT((Z_SECOND_HIST_FILE.ZB_FCB_INFO.B_FILE_NO))); 

      ESAC; /* ZF_EVENT */
   
   /* BEGIN: ADD-WIPRO-B8-CHANGE-PM-COUNTER NEW STATE ADDED*/
   (ZE_W_SECOND_HIS_FILE_OPEN): 
   /*****************************************************************/

      CASE ZF_EVENT OF

         (ZE_EV_FILE_OPENED):
            Z_THIRD_HIST_FILE.ZB_IS_OPEN := TRUE;
            Q_S0080_SET_HDL_PROC_ID(Z_THIRD_HIST_FILE,ZF_PROC_ID);
            /* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
             Q_S0991_OPEN_7TH_HIS();
             ZQ_NEW_STATE:=ZE_W_SEVENTH_HIS_FILE_OPEN;
            /* END: ADD-WIPRO-B10-MR1-CHANGE */
             /* BEGIN: DELETE-WIPRO-B10-MR1-CHANGE */
            /*Q_S0190_OPEN_RES_FILE(ZQ_ERROR,E_WRITE_REQ);
            ZQ_NEW_STATE:=ZE_W_RES_FILE_OPEN;*/
             /* BEGIN: DELETE-WIPRO-B10-MR1-CHANGE */
            
         ELSE
            /* HISTORY FILE NOT OPENED */
            /*ADDED FOR FR20/206272 Shailesh*/
            Z_RESULT_FILE.ZB_ERROR  := E_NO_REP_IO_ERR;
            /*ADDED FOR FR20/206272 Shailesh*/
            IF ZF_PROC_ID.B_PID_PID /=  M_PROCESS_ID_NULL.B_PID_PID
              THEN
              Q_S0080_SET_HDL_PROC_ID(Z_THIRD_HIST_FILE,ZF_PROC_ID);
              Q_S0170_CLOSE_HIST_FILE(->Z_SECOND_HIST_FILE);

            /*ADDED FOR FR20/206272*/
              ZQ_NEW_STATE            := ZE_W_HIS_FILE_CLOSE_2;
                /*ADDED FOR FR20/206272 Shailesh*/
 /*FR36_270318*/
    /* BEGIN:CR36/288765 - TRACE IMPROVEMENT */

                TRACEINFO :=
                         'GLOBAL STOP 2_H_F_OPEN (%d %d)  ';

               TRC_BSC_PM3(
                    FILENAME,
                    LONG_INT(__LINENO__),
                    LONG_INT(SUB_CLASS_PM_CCRH),
                    TRACEID(NORM),
                    TRACEINFO,
                    LONG_INT((ZF_EVENT)),
                    LONG_INT((Z_RESULT_FILE.ZB_MEAS_TYPE)),
                    LONG_INT((0)));
            ELSE

                TRACEINFO :=
                         'GLOBAL STOP 2ND_H_F_OPEN (%d %d)';

               TRC_BSC_PM3(
                    FILENAME,
                    LONG_INT(__LINENO__),
                    LONG_INT(SUB_CLASS_PM_CCRH),
                    TRACEID(NORM),
                    TRACEINFO,
                    LONG_INT((ZF_EVENT)),
                    LONG_INT((Z_RESULT_FILE.ZB_MEAS_TYPE)),
                    LONG_INT((0)));
    /* END:CR36/288765 - TRACE IMPROVEMENT */ 
 /*FR36_270318*/
                Q_S0300_SEND_PM_CC_RES_CNF(E_NO_REP_IO_ERR);
                ZQ_NEW_STATE            := ZE_IDLE;  
            /*ADDED FOR FR20/206272 Shailesh*/
            /*END FR 20/206272*/

            /*COMMENTED FOR FR 20/206272*/
             /* Z_SECOND_HIST_FILE.ZB_IS_OPEN := FALSE;
              Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);*/
            /*COMMENTED FOR FR 20/206272*/

            FI;

            /*COMMENTED FOR FR 20/206272*/
           /* ZQ_NEW_STATE            := ZE_W_HIS_FILE_CLOSE;*/
            /*COMMENTED FOR FR 20/206272*/

            
            /*ADD ERR RTTRACE*/
            TRACEINFO    :=
               '3rdHIS FILE OPEN ERR (%d %d %d) ';
            ZQ_TRC_INTARG1.ZB_LOW_INT := (NUM)(ZF_STATE);
            ZQ_TRC_INTARG1.ZB_HIGH_INT := (NUM)(ZQ_NEW_STATE);
            TRC_BSC_PM2(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCRH),
              TRACEID(WARN),
              TRACEINFO,
              LONG_INT((ZQ_TRC_INTARG1.ZB_LONG_INT)),
              LONG_INT((ZF_EVENT)),
              LONG_INT((Z_THIRD_HIST_FILE.ZB_FCB_INFO.B_FILE_NO)));
      ESAC; /* ZF_EVENT */
   /* END:   ADD-WIPRO-B8-CHANGE-PM-COUNTER NEW STATE ADDED*/
   /* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
   (ZE_W_SEVENTH_HIS_FILE_OPEN): 
   /*****************************************************************/

      CASE ZF_EVENT OF

         (ZE_EV_FILE_OPENED):
            Z_SEVENTH_HIST_FILE.ZB_IS_OPEN := TRUE;
/*BEGIN : CR20/301337-RFI4448 FILE FORMAT*/
            Q_S0080_SET_HDL_PROC_ID(Z_SEVENTH_HIST_FILE,ZF_PROC_ID);
          /*Q_S0080_SET_HDL_PROC_ID(Z_ELEVENTH_HIST_FILE,ZF_PROC_ID);*/
/*END : CR20/301337*/
/*BEGIN : CR20/301337-RFI4448 FILE FORMAT*/
/*            Q_S0190_OPEN_RES_FILE(ZQ_ERROR,E_WRITE_REQ);*/
/*BEGIN CHANGE : CR20/313054 ...........................
  	   Q_S0992_OPEN_11TH_HIS();
..CHANGE TO : CR20/313054.......................*/
	   Q_S0993_OPEN_13TH_HIS();
/*END CHANGE : CR20/313054......................*/	   
/*END : CR20/301337*/
/*BEGIN : CR20/301337 - RFI4448 FILE FORMAT*/
            /*ZQ_NEW_STATE:=ZE_W_RES_FILE_OPEN;*/
/*BEGIN CHANGE : CR20/313054...........................			
            ZQ_NEW_STATE:=ZE_W_ELEVENTH_HIS_FILE_OPEN;
..CHANGE TO : CR20/313054...............................*/
            ZQ_NEW_STATE:=ZE_W_OPEN_HIS_110_13;
/*END CHANGE : CR20/313054..............................*/			
			
/*END : CR20/301337*/
            
         ELSE
            /* HISTORY FILE NOT OPENED */
            Z_RESULT_FILE.ZB_ERROR  := E_NO_REP_IO_ERR;
            IF ZF_PROC_ID.B_PID_PID /=  M_PROCESS_ID_NULL.B_PID_PID
              THEN
/*BEGIN : CR20/301337-RFI4448 FILE FORMAT*/
      /*Q_S0080_SET_HDL_PROC_ID(Z_SEVENTH_HIST_FILE,ZF_PROC_ID);*/
          Q_S0080_SET_HDL_PROC_ID(Z_ELEVENTH_HIST_FILE,ZF_PROC_ID);
              /*Q_S0170_CLOSE_HIST_FILE(->Z_THIRD_HIST_FILE);*/
              Q_S0170_CLOSE_HIST_FILE(->Z_SEVENTH_HIST_FILE);
            /*ADDED FOR FR20/206272*/
/*END : CR20/301337*/
		/*CR20/301337-RFI4448*/
              /*ZQ_NEW_STATE            := ZE_W_HIS_FILE_CLOSE_3;*/
              ZQ_NEW_STATE            := ZE_W_HIS_FILE_CLOSE_7;
            
            /*END FR 20/206272*/
            /*ADDED FOR FR20/206272 Shailesh*/

 /*FR36_270318*/
                TRACEINFO :=
                         'GLOBAL STOP 7_H_F_OPEN (%d)     ';

               TRC_BSC_PM3(
                    FILENAME,
                    LONG_INT(__LINENO__),
                    LONG_INT(SUB_CLASS_PM_CCRH),
                    TRACEID(NORM),
                    TRACEINFO,
                    LONG_INT((ZF_EVENT)),
                    LONG_INT((0)),
                    LONG_INT((0)));
            ELSE

                TRACEINFO :=
                         'GLOBAL STOP 7TH_H_F_OPEN (%d)   ';

               TRC_BSC_PM3(
                    FILENAME,
                    LONG_INT(__LINENO__),
                    LONG_INT(SUB_CLASS_PM_CCRH),
                    TRACEID(NORM),
                    TRACEINFO,
                    LONG_INT((ZF_EVENT)),
                    LONG_INT((0)),
                    LONG_INT((0)));
 /*FR36_270318*/

                Q_S0300_SEND_PM_CC_RES_CNF(E_NO_REP_IO_ERR);
                ZQ_NEW_STATE            := ZE_IDLE;  
            /*ADDED FOR FR20/206272 Shailesh*/
            /*COMMENTED FOR FR20/206272*/
               /* Z_THIRD_HIST_FILE.ZB_IS_OPEN := FALSE;
              Q_S0170_CLOSE_HIST_FILE(->Z_SECOND_HIST_FILE);
              Z_SECOND_HIST_FILE.ZB_IS_OPEN := FALSE;
              Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);*/
            /*COMMENTED FOR FR20/206272*/
            FI;
           /*COMMENTED FOR FR20/206272*/
           /* ZQ_NEW_STATE            := ZE_W_HIS_FILE_CLOSE;*/
           /*COMMENTED FOR FR20/206272*/
      
     ESAC; /* ZF_EVENT */
  /* END: ADD-WIPRO-B10-MR1-CHANGE */
/*BEGIN : CR20/301337-RI4448 FILE FORMAT*/

/*BEGIN : CR20/313054 */
(ZE_W_OPEN_HIS_110_13): 
   /*****************************************************************/

      CASE ZF_EVENT OF

         (ZE_EV_FILE_OPENED):
            Z_THIRTEENTH_HIST_FILE.ZB_IS_OPEN := TRUE;
/*BEGIN : CR20/301337-RFI4448 FILE FORMAT*/
            Q_S0080_SET_HDL_PROC_ID(Z_THIRTEENTH_HIST_FILE,ZF_PROC_ID);
  	        Q_S0992_OPEN_11TH_HIS();		
            ZQ_NEW_STATE:=ZE_W_ELEVENTH_HIS_FILE_OPEN;            
         ELSE
            /* HISTORY FILE NOT OPENED */
            Z_RESULT_FILE.ZB_ERROR  := E_NO_REP_IO_ERR;
            IF ZF_PROC_ID.B_PID_PID /=  M_PROCESS_ID_NULL.B_PID_PID
            THEN
             Q_S0080_SET_HDL_PROC_ID(Z_THIRTEENTH_HIST_FILE,ZF_PROC_ID);              
             Q_S0170_CLOSE_HIST_FILE(->Z_THIRTEENTH_HIST_FILE);            
     /*BEGIN CRI #01479747.01 USE ERROR CLOSE STATE FOR HIS_110_13*/ 
             ZQ_NEW_STATE            := ZE_W_HIS_FILE_CLOSE_13;                
             /*ZQ_NEW_STATE            := ZE_W_CLOSE_HIS_110_13;*/ 
     /*END CRI #01479747.01*/
            ELSE  
                Q_S0300_SEND_PM_CC_RES_CNF(E_NO_REP_IO_ERR);
                ZQ_NEW_STATE            := ZE_IDLE;             
            FI;         
      
     ESAC; /* ZF_EVENT */
  
/*END : CR20/313054 */

   (ZE_W_ELEVENTH_HIS_FILE_OPEN) :
   /*****************************************************************/
	CASE ZF_EVENT OF

         (ZE_EV_FILE_OPENED):
       /*BEGIN CRI #01443513.01 11TH OPEN NOT 7TH*/ 
            Z_ELEVENTH_HIST_FILE.ZB_IS_OPEN := TRUE;
       /*END CRI #01443513.01*/     	 
            Q_S0080_SET_HDL_PROC_ID(Z_ELEVENTH_HIST_FILE,ZF_PROC_ID);
           /* Q_S0190_OPEN_RES_FILE(ZQ_ERROR,E_WRITE_REQ);
            ZQ_NEW_STATE:=ZE_W_RES_FILE_OPEN;*/
            /*begin CR1238146 A-GPS*/
	          Q_S0994_OPEN_18TH_HIS();
            ZQ_NEW_STATE := ZE_W_OPEN_HIS_110_18;
	          /*end CR1238146 A-GPS*/
         ELSE
            /* HISTORY FILE NOT OPENED */
            Z_RESULT_FILE.ZB_ERROR  := E_NO_REP_IO_ERR;
            IF ZF_PROC_ID.B_PID_PID /=  M_PROCESS_ID_NULL.B_PID_PID
              THEN
              Q_S0080_SET_HDL_PROC_ID(Z_ELEVENTH_HIST_FILE,ZF_PROC_ID);
              Q_S0170_CLOSE_HIST_FILE(->Z_ELEVENTH_HIST_FILE);
              ZQ_NEW_STATE            := ZE_W_HIS_FILE_CLOSE_11;
			ELSE
              Q_S0300_SEND_PM_CC_RES_CNF(E_NO_REP_IO_ERR);
              ZQ_NEW_STATE            := ZE_IDLE;  
            FI;
     ESAC; /* ZF_EVENT */
/*END : CR20/301337*/
   (ZE_W_OPEN_HIS_110_18):
   /*****************************************************************/
     CASE ZF_EVENT OF

         (ZE_EV_FILE_OPENED):
            Z_18TH_HIST_FILE.ZB_IS_OPEN := TRUE;
            Q_S0080_SET_HDL_PROC_ID(Z_18TH_HIST_FILE,ZF_PROC_ID);
  	        Q_S0190_OPEN_RES_FILE(ZQ_ERROR,E_WRITE_REQ);		
            ZQ_NEW_STATE:=ZE_W_RES_FILE_OPEN;            
         ELSE
            /* HISTORY FILE NOT OPENED */
            Z_RESULT_FILE.ZB_ERROR  := E_NO_REP_IO_ERR;
            IF ZF_PROC_ID.B_PID_PID /=  M_PROCESS_ID_NULL.B_PID_PID
            THEN
             Q_S0080_SET_HDL_PROC_ID(Z_18TH_HIST_FILE,ZF_PROC_ID);              
             Q_S0170_CLOSE_HIST_FILE(->Z_18TH_HIST_FILE);            
    /*BEGIN CRI #01479747.01 USE ERROR CLOSE STATE FOR HIS_110_18*/ 
             ZQ_NEW_STATE            := ZE_W_HIS_FILE_CLOSE_18;                          
             /*ZQ_NEW_STATE            := ZE_W_CLOSE_HIS_110_18; */
    /*END CRI #01479747.01*/     
            ELSE  
                Q_S0300_SEND_PM_CC_RES_CNF(E_NO_REP_IO_ERR);
                ZQ_NEW_STATE            := ZE_IDLE;             
            FI;         
      
     ESAC; /* ZF_EVENT */
   (ZE_W_RES_FILE_OPEN):
   /*****************************************************************/

      CASE ZF_EVENT OF

        (ZE_EV_FILE_OPENED):
           Z_RESULT_FILE.ZB_IS_OPEN := TRUE;
           Q_S0080_SET_HDL_PROC_ID(Z_RESULT_FILE,ZF_PROC_ID);
           ZQ_ERROR := Q_S0510_MAKE_RESULT_FILE();
           Q_S0130_RET_ALL_BUF();

           IF NOT ZQ_ERROR THEN
              CASE (Z_RESULT_FILE.ZB_MEAS_TYPE) OF
              /*START: VAMOS*/
              (E_MT_VAMOS):
                 Q_S0170_CLOSE_HIST_FILE(->Z_SECOND_HIST_FILE);
                 ZQ_NEW_STATE:=ZE_W_CLOSE_HIS_37_1;
              /*END: VAMOS*/

              (E_MT_TRAFFIC):
                 Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
                 ZQ_NEW_STATE:=ZE_W_CLOSE_HIS_1_1;

              (E_MT_A_AND_ABIS_ITF_ANALYSIS):
                 Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
                 ZQ_NEW_STATE:=ZE_W_CLOSE_HIS_18_1;

            /* BEGIN: ADD-WIPRO-B9-P2-CHANGE */
              (E_MT_VGCS):
                 Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
                 ZQ_NEW_STATE:=ZE_W_CLOSE_HIS_34_1;
            /* END: ADD-WIPRO-B9-P2-CHANGE */
	    /* BEGIN: ADD-WIPRO-B10-MR2-CHANGE */
              (E_MT_IP):
                 Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
                 ZQ_NEW_STATE:=ZE_W_CLOSE_HIS_35_0;
            /* END: ADD-WIPRO-B10-MR2-CHANGE */
              (E_MT_CELL_TRX_OVERVIEW_COUNTERS):
                 Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
                 ZQ_NEW_STATE:=ZE_W_CLOSE_HIS_110_1;
              /*CR36/236932*/
              (E_MT_LAPD):
                 Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
                 ZQ_NEW_STATE:=ZE_W_CLOSE_HIS_7_1;              
              /*CR36/236932*/   
              ELSE
                 Q_S0210_CLOSE_RES_FILE();
                 ZQ_NEW_STATE:=ZE_W_RES_FILE_CLOSE_FOR_REOPEN;
              ESAC;
           ELSE
              IF Z_CPL_CODES = E_NO_SPACE_ON_DISK THEN
                 /* NO SPACE ON DISK */
                 Z_RESULT_FILE.ZB_ERROR := E_NO_REP_NO_SPACE;



               /*WIPRO: B11_MX_MR0_PKG1 RT TRACE*/
              /*FR36_270318*/ 
                TRACEINFO :=
                         'GLOBAL STOP PM ERR   (%d %d %d) ';

               TRC_BSC_PM3(
                    FILENAME,
                    LONG_INT(__LINENO__),
                    LONG_INT(SUB_CLASS_PM_CCRH),
                    TRACEID(NORM),
                    TRACEINFO,
                    LONG_INT((Z_RESULT_FILE.ZB_ERROR)),
                    LONG_INT((ZF_EVENT)),
                    LONG_INT((Z_CPL_CODES)));
              /*FR36_270318*/  
             /*END WIPRO: B11_MX_MR0_PKG1 RT TRACE*/

              ELSE
                 Z_RESULT_FILE.ZB_ERROR := E_NO_REP_IO_ERR;
              /*FR36_270318*/
                TRACEINFO :=
                         'GLOBAL STOP 2 PM ERR (%d %d %d) ';

               TRC_BSC_PM3(
                    FILENAME,
                    LONG_INT(__LINENO__),
                    LONG_INT(SUB_CLASS_PM_CCRH),
                    TRACEID(NORM),
                    TRACEINFO,
                    LONG_INT((Z_RESULT_FILE.ZB_ERROR)),
                    LONG_INT((ZF_EVENT)),
                    LONG_INT((Z_CPL_CODES)));
              /*FR36_270318*/
              FI;
              Q_S0210_CLOSE_RES_FILE();
              ZQ_NEW_STATE := ZE_W_RES_FILE_CLOSE;
              /*ADD ERR RTTRACE*/
              TRACEINFO    :=
                'MAKE RES FILE ERR(%d %d %d)     ';
              ZQ_TRC_INTARG1.ZB_LOW_INT := (NUM)(ZF_STATE);
              ZQ_TRC_INTARG1.ZB_HIGH_INT := (NUM)(ZQ_NEW_STATE);
              TRC_BSC_PM2(
                FILENAME,
                LONG_INT(__LINENO__),
                LONG_INT(SUB_CLASS_PM_CCRH),
                TRACEID(WARN),
                TRACEINFO,
                LONG_INT((ZQ_TRC_INTARG1.ZB_LONG_INT)),
                LONG_INT((Z_RESULT_FILE.ZB_ERROR)),
                LONG_INT((Z_RESULT_FILE.ZB_FCB_INFO.B_FILE_NO))); 
           FI;

        (ZE_EV_MAX_FILES):
           /* RESULT FILE NOT OPENED   */
           /* MAX NUMBER FILES ON DISK */
           Z_RESULT_FILE.ZB_ERROR  := E_NO_REP_NO_SPACE;
           /*ADDED CHANGE FOR FR20/206272*/
           /*ADDED FOR FR20/206272 Shailesh*/
           IF ZF_PROC_ID.B_PID_PID /=  M_PROCESS_ID_NULL.B_PID_PID
           /*ADDED FOR FR20/206272 Shailesh*/
           THEN
/*BEGIN CRI #01479747.01 CLOSE HIST 18->11->13->7->3->2->1*/  
             IF Z_18TH_HIST_FILE.ZB_IS_OPEN
              THEN
               Q_S0170_CLOSE_HIST_FILE(->Z_18TH_HIST_FILE);                           
               ZQ_NEW_STATE  := ZE_W_HIS_FILE_CLOSE_18;                                   
             ELSIF Z_ELEVENTH_HIST_FILE.ZB_IS_OPEN                                        
              THEN                                                                      
               Q_S0170_CLOSE_HIST_FILE(->Z_ELEVENTH_HIST_FILE);                           
               ZQ_NEW_STATE  := ZE_W_HIS_FILE_CLOSE_11;
             ELSIF Z_THIRTEENTH_HIST_FILE.ZB_IS_OPEN                                   
              THEN                                                                         
               Q_S0170_CLOSE_HIST_FILE(->Z_THIRTEENTH_HIST_FILE);                         
               ZQ_NEW_STATE  := ZE_W_HIS_FILE_CLOSE_13;
/*END CRI #01479747.01*/
             ELSIF Z_SEVENTH_HIST_FILE.ZB_IS_OPEN 
              THEN                                                                       
               Q_S0170_CLOSE_HIST_FILE(->Z_SEVENTH_HIST_FILE);                        
               ZQ_NEW_STATE  := ZE_W_HIS_FILE_CLOSE_7; 
             ELSIF Z_THIRD_HIST_FILE.ZB_IS_OPEN                                         
              THEN                                                                       
               Q_S0170_CLOSE_HIST_FILE(->Z_THIRD_HIST_FILE);                         
               ZQ_NEW_STATE  := ZE_W_HIS_FILE_CLOSE_3;                               
             ELSIF Z_SECOND_HIST_FILE.ZB_IS_OPEN                                        
              THEN                                                                       
               Q_S0170_CLOSE_HIST_FILE(->Z_SECOND_HIST_FILE);                        
               ZQ_NEW_STATE  := ZE_W_HIS_FILE_CLOSE_2;
             ELSE
    /*BEGIN CRI #01479581.01 NO HIST FILE CLOSE FOR TYPE180 OR 26*/
         IF (R_PM_ACT.D_MEAS_TYP = E_MT_TRAFFIC_FLOW OR                    
           R_PM_ACT.D_MEAS_TYP = E_MT_HANDOVER_PER_SERVINGCELL)             
          THEN
           Z_HISTORY_FILE.ZB_IS_OPEN := FALSE;                              
           Q_S0300_SEND_PM_CC_RES_CNF(Z_RESULT_FILE.ZB_ERROR);              
           ZQ_NEW_STATE := ZE_IDLE;
    /*END CRI #01479581.01*/                                         
         ELSE                                                              
           Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);                       
           ZQ_NEW_STATE  := ZE_W_HIS_FILE_CLOSE;                            
         FI;  
	    FI;
              /*FR36_270318*/
                TRACEINFO :=
                         'GLOBAL STOP RES_FILE_OPEN (%d)  ';

               TRC_BSC_PM3(
                    FILENAME,
                    LONG_INT(__LINENO__),
                    LONG_INT(SUB_CLASS_PM_CCRH),
                    TRACEID(NORM),
                    TRACEINFO,
                    LONG_INT((ZF_EVENT)),
                    LONG_INT((0)),
                    LONG_INT((0)));
              /*FR36_270318*/

	   /*ADDED FOR FR20/206272 Shailesh*/  
           ELSE
              /*FR36_270318*/
                TRACEINFO :=
                         'GLOBAL STOP RES_F_OPEN(%d)      ';

               TRC_BSC_PM3(
                    FILENAME,
                    LONG_INT(__LINENO__),
                    LONG_INT(SUB_CLASS_PM_CCRH),
                    TRACEID(NORM),
                    TRACEINFO,
                    LONG_INT((ZF_EVENT)),
                    LONG_INT((0)),
                    LONG_INT((0)));
              /*FR36_270318*/

             Q_S0300_SEND_PM_CC_RES_CNF(E_NO_REP_IO_ERR);
             ZQ_NEW_STATE            := ZE_IDLE;  
           FI;
           /*ADDED FOR FR20/206272 Shailesh*/
       /*END CHANGE FOR FR20/206272*/
           /*ADD ERR RTTRACE*/
           TRACEINFO    :=
               'MAX RES FILE OPEN ERR(%d %d %d) ';
           ZQ_TRC_INTARG1.ZB_LOW_INT := (NUM)(ZF_STATE);
           ZQ_TRC_INTARG1.ZB_HIGH_INT := (NUM)(ZQ_NEW_STATE);
           TRC_BSC_PM2(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCRH),
              TRACEID(WARN),
              TRACEINFO,
              LONG_INT((ZQ_TRC_INTARG1.ZB_LONG_INT)),
              LONG_INT((ZF_EVENT)),
              LONG_INT((Z_RESULT_FILE.ZB_FCB_INFO.B_FILE_NO))); 

        ELSE
         /*ADDED FOR FR20/206272 Shailesh*/
         Z_RESULT_FILE.ZB_ERROR  := E_NO_REP_IO_ERR;
         IF ZF_PROC_ID.B_PID_PID /=  M_PROCESS_ID_NULL.B_PID_PID
         THEN   
        /*ADDED FOR FR20/206272 Shailesh*/ 
        /*ADDED CHANGE FOR FR20/206272*/
/*BEGIN CRI #01479747.01 CLOSE HIST 18->11->13->7->3->2->1*/  
           IF Z_18TH_HIST_FILE.ZB_IS_OPEN
           THEN
           Q_S0170_CLOSE_HIST_FILE(->Z_18TH_HIST_FILE);                           
           ZQ_NEW_STATE  := ZE_W_HIS_FILE_CLOSE_18;                                   
           ELSIF Z_ELEVENTH_HIST_FILE.ZB_IS_OPEN                                        
           THEN                                                                      
           Q_S0170_CLOSE_HIST_FILE(->Z_ELEVENTH_HIST_FILE);                           
           ZQ_NEW_STATE  := ZE_W_HIS_FILE_CLOSE_11;
           ELSIF Z_THIRTEENTH_HIST_FILE.ZB_IS_OPEN                                   
           THEN                                                                         
           Q_S0170_CLOSE_HIST_FILE(->Z_THIRTEENTH_HIST_FILE);                         
           ZQ_NEW_STATE  := ZE_W_HIS_FILE_CLOSE_13;
/*END CRI #01479747.01*/
           ELSIF Z_SEVENTH_HIST_FILE.ZB_IS_OPEN 
           THEN                                                                       
           Q_S0170_CLOSE_HIST_FILE(->Z_SEVENTH_HIST_FILE);                        
           ZQ_NEW_STATE  := ZE_W_HIS_FILE_CLOSE_7; 
           ELSIF Z_THIRD_HIST_FILE.ZB_IS_OPEN                                         
           THEN                                                                       
           Q_S0170_CLOSE_HIST_FILE(->Z_THIRD_HIST_FILE);                         
           ZQ_NEW_STATE  := ZE_W_HIS_FILE_CLOSE_3;                               
           ELSIF Z_SECOND_HIST_FILE.ZB_IS_OPEN                                        
           THEN                                                                       
           Q_S0170_CLOSE_HIST_FILE(->Z_SECOND_HIST_FILE);                        
           ZQ_NEW_STATE  := ZE_W_HIS_FILE_CLOSE_2;
           ELSE
        /*BEGIN CRI #01427571.01 NO HIST FILE CLOSE FOR TYPE180 OR 26*/
              IF (R_PM_ACT.D_MEAS_TYP = E_MT_TRAFFIC_FLOW OR                    
                 R_PM_ACT.D_MEAS_TYP = E_MT_HANDOVER_PER_SERVINGCELL)              
                THEN
                Z_HISTORY_FILE.ZB_IS_OPEN := FALSE;                                        
	              Q_S0300_SEND_PM_CC_RES_CNF(Z_RESULT_FILE.ZB_ERROR);                        
	              ZQ_NEW_STATE := ZE_IDLE;                                                                  
                ELSE                                                              
	              Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
	              ZQ_NEW_STATE  := ZE_W_HIS_FILE_CLOSE;                        
              FI;
       /*END CRI #01427571.01*/
         FI;

              /*FR36_270318*/
                TRACEINFO :=
                         'GLOBAL STOP R_F_OPEN (%d)       ';

               TRC_BSC_PM3(
                    FILENAME,
                    LONG_INT(__LINENO__),
                    LONG_INT(SUB_CLASS_PM_CCRH),
                    TRACEID(NORM),
                    TRACEINFO,
                    LONG_INT((ZF_EVENT)),
                    LONG_INT((0)),
                    LONG_INT((0)));
              /*FR36_270318*/
       ELSE
             /*FR36_270318*/
                TRACEINFO :=
                         'GLOBAL STOP R_F_OP_ERR (%d)     ';

               TRC_BSC_PM3(
                    FILENAME,
                    LONG_INT(__LINENO__),
                    LONG_INT(SUB_CLASS_PM_CCRH),
                    TRACEID(NORM),
                    TRACEINFO,
                    LONG_INT((ZF_EVENT)),
                    LONG_INT((0)),
                    LONG_INT((0)));
              /*FR36_270318*/


           Q_S0300_SEND_PM_CC_RES_CNF(E_NO_REP_IO_ERR);
           ZQ_NEW_STATE            := ZE_IDLE;  
         FI;
         /* RESULT FILE NOT OPENED */
        /* ZQ_NEW_STATE  := ZE_W_HIS_FILE_CLOSE;*/
       /*END CHANGE FOR FR20/206272*/
           /*ADD ERR RTTRACE*/
           TRACEINFO    :=
               'RES FILE OPEN ERR(%d %d %d)     ';
           ZQ_TRC_INTARG1.ZB_LOW_INT := (NUM)(ZF_STATE);
           ZQ_TRC_INTARG1.ZB_HIGH_INT := (NUM)(ZQ_NEW_STATE);
           TRC_BSC_PM2(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCRH),
              TRACEID(WARN),
              TRACEINFO,
              LONG_INT((ZQ_TRC_INTARG1.ZB_LONG_INT)),
              LONG_INT((ZF_EVENT)),
              LONG_INT((Z_RESULT_FILE.ZB_FCB_INFO.B_FILE_NO)));
        ESAC;

   (ZE_W_CLOSE_HIS_110_1):
   /*****************************************************************/

        Z_HISTORY_FILE.ZB_IS_OPEN := FALSE;
        Q_S0170_CLOSE_HIST_FILE(->Z_SECOND_HIST_FILE);
        ZQ_NEW_STATE := ZE_W_CLOSE_HIS_110_2;


   (ZE_W_CLOSE_HIS_110_2):   
   /*****************************************************************/

        Z_SECOND_HIST_FILE.ZB_IS_OPEN := FALSE;
        Q_S0170_CLOSE_HIST_FILE(->Z_THIRD_HIST_FILE);
/* BEGIN: ADD-WIPRO-B8-CHANGE-PM-COUNTER EXISTING STATE MODIFIED*/
        /*BEGIN:ADD-WIPRO-B10-MR1-CHANGE */
        ZQ_NEW_STATE := ZE_W_CLOSE_HIS_110_7;
        /*END:ADD-WIPRO-B10-MR1-CHANGE */
        /*START:DELETE-WIPRO-B10-MR1-CHANGE */
        /*Q_S0170_CLOSE_HIST_FILE(->Z_THIRD_HIST_FILE);
        ZQ_NEW_STATE := ZE_W_CLOSE_HIS_110_3;*/
        /*END:DELETE-WIPRO-B10-MR1-CHANGE */
/* END:   ADD-WIPRO-B8-CHANGE-PM-COUNTER EXISTING STATE MODIFIED*/

   /* BEGIN: ADD-WIPRO-B8-CHANGE-PM-COUNTER NEW STATE ADDED */
   /*BEGIN:ADD-WIPRO-B10-MR1-CHANGE */
   (ZE_W_CLOSE_HIS_110_7):   
   /*****************************************************************/

        Z_THIRD_HIST_FILE.ZB_IS_OPEN := FALSE;
        Q_S0170_CLOSE_HIST_FILE(->Z_SEVENTH_HIST_FILE);
        ZQ_NEW_STATE := ZE_W_CLOSE_HIS_110_3;
    /*END:ADD-WIPRO-B10-MR1-CHANGE */        
   (ZE_W_CLOSE_HIS_110_3):
   /*****************************************************************/
	/*BEGIN:ADD-WIPRO-B10-MR1-CHANGE */
        Z_SEVENTH_HIST_FILE.ZB_IS_OPEN := FALSE;
        /*END:ADD-WIPRO-B10-MR1-CHANGE */
        /*START:DELETE-WIPRO-B10-MR1-CHANGE */
        /*Z_THIRD_HIST_FILE.ZB_IS_OPEN := FALSE;*/
        /*END:DELETE-WIPRO-B10-MR1-CHANGE */
	/*BEGIN : CR20/301337-RFI4448 FILE FORMAT*/
/*        Q_S0020_INIT_FILE(Z_HISTORY_FILE);
        Q_S0140_OPEN_HIST_FILE(E_HIST_110_4);
        ZQ_NEW_STATE := ZE_W_OPEN_HIS_110_4;*/
	/*BEGIN CHANGE: CR20/313054.... 	
	Q_S0170_CLOSE_HIST_FILE(->Z_ELEVENTH_HIST_FILE);
	ZQ_NEW_STATE := ZE_W_CLOSE_HIS_110_11;
	....CR20/313054 CHANGE TO.......................*/
	  Q_S0170_CLOSE_HIST_FILE(->Z_THIRTEENTH_HIST_FILE);
	  ZQ_NEW_STATE := ZE_W_CLOSE_HIS_110_13;
	/*END CHANGE: CR20/313054 */
	
/*END : CR20/301337*/
   /* END:   ADD-WIPRO-B8-CHANGE-PM-COUNTER NEW STATE ADDED */ 
   
    /*BEGIN: CR20/313054 */
   (ZE_W_CLOSE_HIS_110_13):
   /*****************************************************************/
      Z_THIRTEENTH_HIST_FILE.ZB_IS_OPEN := FALSE;
      Q_S0170_CLOSE_HIST_FILE(->Z_ELEVENTH_HIST_FILE);
      ZQ_NEW_STATE  := ZE_W_CLOSE_HIS_110_11; 
   /*END: CR20/313054 */
    /*BEGIN : CR20/301337-RFI4448 FILE FORMAT*/
   (ZE_W_CLOSE_HIS_110_11):
   /*****************************************************************/
	Z_ELEVENTH_HIST_FILE.ZB_IS_OPEN := FALSE;
	/*Q_S0020_INIT_FILE(Z_HISTORY_FILE);
	Q_S0140_OPEN_HIST_FILE(E_HIST_110_4);
	ZQ_NEW_STATE := ZE_W_OPEN_HIS_110_4;*/
	/*begin CR1238146 A-GPS*/
	Q_S0170_CLOSE_HIST_FILE(->Z_18TH_HIST_FILE);
	ZQ_NEW_STATE  := ZE_W_CLOSE_HIS_110_18;
	/*end CR1238146 A-GPS*/
/*END : CR20/301337*/
/*begin CR1238146 A-GPS*/
   (ZE_W_CLOSE_HIS_110_18):
	 /*****************************************************************/
/*BEGIN CRI #01443513.01*/
	 Z_18TH_HIST_FILE.ZB_IS_OPEN := FALSE;
/*END CRI #01443513.01*/ 
	 Z_HISTORY_FILE.ZB_IS_OPEN := FALSE;
	 Q_S0020_INIT_FILE(Z_HISTORY_FILE);
   Q_S0140_OPEN_HIST_FILE(E_HIST_110_4);
	 ZQ_NEW_STATE := ZE_W_OPEN_HIS_110_4;
/*end CR1238146 A-GPS*/
   /* BEGIN: ADD-WIPRO-B8-CHANGE-PM-COUNTER EXISTING STATE MODIFIED*/
   (ZE_W_OPEN_HIS_110_4):
   /* END:   ADD-WIPRO-B8-CHANGE-PM-COUNTER EXISTING STATE MODIFIED*/
   /*****************************************************************/

      CASE ZF_EVENT OF

         (ZE_EV_FILE_OPENED):
            Z_HISTORY_FILE.ZB_IS_OPEN := TRUE;
            Q_S0080_SET_HDL_PROC_ID(Z_HISTORY_FILE,ZF_PROC_ID);
/* BEGIN: ADD-WIPRO-B8-CHANGE-PM-COUNTER EXISTING STATE MODIFIED*/
            Q_S0790_MAKE_RES_FILE_110_4();
/* END:   ADD-WIPRO-B8-CHANGE-PM-COUNTER EXISTING STATE MODIFIED*/
            Q_S0130_RET_ALL_BUF();
            Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
/* BEGIN: ADD-WIPRO-B8-CHANGE-PM-COUNTER EXISTING STATE MODIFIED*/
            ZQ_NEW_STATE:=ZE_W_CLOSE_HIS_110_4;
/* END:   ADD-WIPRO-B8-CHANGE-PM-COUNTER EXISTING STATE MODIFIED*/

         ELSE
            /* HISTORY FILE NOT OPENED */
            IF ZF_PROC_ID.B_PID_PID /=  M_PROCESS_ID_NULL.B_PID_PID
              THEN
              Q_S0080_SET_HDL_PROC_ID(Z_HISTORY_FILE,ZF_PROC_ID);
              Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
            FI;
            ZQ_NEW_STATE            := ZE_W_HIS_FILE_CLOSE;
            Z_RESULT_FILE.ZB_ERROR  := E_NO_REP_IO_ERR;
            /*ADD ERR RTTRACE*/
            TRACEINFO    :=
               'HIS110-4 OPEN ERR(%d %d %d)     ';
            ZQ_TRC_INTARG1.ZB_LOW_INT := (NUM)(ZF_STATE);
            ZQ_TRC_INTARG1.ZB_HIGH_INT := (NUM)(ZQ_NEW_STATE);
            TRC_BSC_PM2(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCRH),
              TRACEID(WARN),
              TRACEINFO,
              LONG_INT((ZQ_TRC_INTARG1.ZB_LONG_INT)),
              LONG_INT((ZF_EVENT)),
              LONG_INT((Z_HISTORY_FILE.ZB_FCB_INFO.B_FILE_NO)));
              /*FR36_270318*/
                TRACEINFO :=
                         'GLOBAL STOP OPEN_H_110_4  (%d)  ';

               TRC_BSC_PM3(
                    FILENAME,
                    LONG_INT(__LINENO__),
                    LONG_INT(SUB_CLASS_PM_CCRH),
                    TRACEID(NORM),
                    TRACEINFO,
                    LONG_INT((ZF_EVENT)),
                    LONG_INT((0)),
                    LONG_INT((0)));
              /*FR36_270318*/

      ESAC; /* ZF_EVENT */

/* BEGIN: ADD-WIPRO-B8-CHANGE-PM-COUNTER EXISTING STATE MODIFIED*/
   (ZE_W_CLOSE_HIS_110_4):
/* END:   ADD-WIPRO-B8-CHANGE-PM-COUNTER EXISTING STATE MODIFIED*/
   /****************************************************************/

        Z_HISTORY_FILE.ZB_IS_OPEN := FALSE;
        Q_S0020_INIT_FILE(Z_HISTORY_FILE);
 /* BEGIN: ADD-WIPRO-B8-CHANGE-PM-COUNTER EXISTING STATE MODIFIED*/
        Q_S0140_OPEN_HIST_FILE(E_HIST_110_5);
        ZQ_NEW_STATE := ZE_W_OPEN_HIS_110_5;
 /* END:   ADD-WIPRO-B8-CHANGE-PM-COUNTER EXISTING STATE MODIFIED*/

 /* BEGIN: ADD-WIPRO-B8-CHANGE-PM-COUNTER EXISTING STATE MODIFIED*/
   (ZE_W_OPEN_HIS_110_5):
   /* END: ADD-WIPRO-B8-CHANGE-PM-COUNTER EXISTING STATE MODIFIED*/
   /**************************************************************/

      CASE ZF_EVENT OF

         (ZE_EV_FILE_OPENED):
            Z_HISTORY_FILE.ZB_IS_OPEN := TRUE;
            Q_S0080_SET_HDL_PROC_ID(Z_HISTORY_FILE,ZF_PROC_ID);
        /* BEGIN: ADD-WIPRO-B8-CHANGE-PM-COUNTER */
            /* EXISTING STATE MODIFIED*/
            Q_S0800_MAKE_RES_FILE_110_5();
        /* END:   ADD-WIPRO-B8-CHANGE-PM-COUNTER */
            /* EXISTING STATE MODIFIED*/
            Q_S0130_RET_ALL_BUF();
            Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
/* BEGIN: ADD-WIPRO-B8-CHANGE-PM-COUNTER EXISTING STATE MODIFIED*/
            ZQ_NEW_STATE:= ZE_W_CLOSE_HIS_110_5;
/* END:   ADD-WIPRO-B8-CHANGE-PM-COUNTER EXISTING STATE MODIFIED*/

         ELSE
            /* HISTORY FILE NOT OPENED */
            IF ZF_PROC_ID.B_PID_PID /=  M_PROCESS_ID_NULL.B_PID_PID
              THEN
              Q_S0080_SET_HDL_PROC_ID(Z_HISTORY_FILE,ZF_PROC_ID);
              Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
            FI;
            ZQ_NEW_STATE            := ZE_W_HIS_FILE_CLOSE;
            Z_RESULT_FILE.ZB_ERROR  := E_NO_REP_IO_ERR;
            /*ADD ERR RTTRACE*/
            TRACEINFO    :=
               'HIS110-5 OPEN ERR(%d %d %d)     ';
            ZQ_TRC_INTARG1.ZB_LOW_INT := (NUM)(ZF_STATE);
            ZQ_TRC_INTARG1.ZB_HIGH_INT := (NUM)(ZQ_NEW_STATE);
            TRC_BSC_PM2(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCRH),
              TRACEID(WARN),
              TRACEINFO,
              LONG_INT((ZQ_TRC_INTARG1.ZB_LONG_INT)),
              LONG_INT((ZF_EVENT)),
              LONG_INT((Z_HISTORY_FILE.ZB_FCB_INFO.B_FILE_NO)));
              /*FR36_270318*/
                TRACEINFO :=
                         'GLOBAL STOP OPEN_H_110_5 (%d)   ';

               TRC_BSC_PM3(
                    FILENAME,
                    LONG_INT(__LINENO__),
                    LONG_INT(SUB_CLASS_PM_CCRH),
                    TRACEID(NORM),
                    TRACEINFO,
                    LONG_INT((ZF_EVENT)),
                    LONG_INT((0)),
                    LONG_INT((0)));
              /*FR36_270318*/
   
   ESAC; /* ZF_EVENT */

   (ZE_W_CLOSE_HIS_110_5):
  /*****************************************************************/

        Z_HISTORY_FILE.ZB_IS_OPEN := FALSE;
        Q_S0020_INIT_FILE(Z_HISTORY_FILE);
        Q_S0140_OPEN_HIST_FILE(E_HIST_110_6);
        ZQ_NEW_STATE := ZE_W_OPEN_HIS_110_6;
        
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */        
   (ZE_W_OPEN_HIS_110_6):
   /**************************************************************/
      CASE ZF_EVENT OF
         (ZE_EV_FILE_OPENED):
            Z_HISTORY_FILE.ZB_IS_OPEN := TRUE;
            Q_S0080_SET_HDL_PROC_ID(Z_HISTORY_FILE,ZF_PROC_ID);
            Q_S0805_MAKE_RES_FILE_110_6();
            Q_S0130_RET_ALL_BUF();
            Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
            ZQ_NEW_STATE:= ZE_W_CLOSE_HIS_110_6;
         ELSE
            IF ZF_PROC_ID.B_PID_PID /=  M_PROCESS_ID_NULL.B_PID_PID
              THEN
              Q_S0080_SET_HDL_PROC_ID(Z_HISTORY_FILE,ZF_PROC_ID);
              Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
            FI;
            ZQ_NEW_STATE            := ZE_W_HIS_FILE_CLOSE;
            Z_RESULT_FILE.ZB_ERROR  := E_NO_REP_IO_ERR;
            TRACEINFO    :=
               'HIS110-6 OPEN ERR(%d %d %d)     ';
            ZQ_TRC_INTARG1.ZB_LOW_INT := (NUM)(ZF_STATE);
            ZQ_TRC_INTARG1.ZB_HIGH_INT := (NUM)(ZQ_NEW_STATE);
            TRC_BSC_PM2(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCRH),
              TRACEID(WARN),
              TRACEINFO,
              LONG_INT((ZQ_TRC_INTARG1.ZB_LONG_INT)),
              LONG_INT((ZF_EVENT)),
              LONG_INT((Z_HISTORY_FILE.ZB_FCB_INFO.B_FILE_NO)));
              /*FR36_270318*/
                TRACEINFO :=
                         'GLOBAL STOP OPEN_H_110_6 (%d)   ';

               TRC_BSC_PM3(
                    FILENAME,
                    LONG_INT(__LINENO__),
                    LONG_INT(SUB_CLASS_PM_CCRH),
                    TRACEID(NORM),
                    TRACEINFO,
                    LONG_INT((ZF_EVENT)),
                    LONG_INT((0)),
                    LONG_INT((0)));
              /*FR36_270318*/

      ESAC; 
   (ZE_W_CLOSE_HIS_110_6):
 /*****************************************************************/

        Z_HISTORY_FILE.ZB_IS_OPEN := FALSE;
        Q_S0020_INIT_FILE(Z_HISTORY_FILE);
		/* BEGIN: Updated for CR 605005....		 
        Q_S0140_OPEN_HIST_FILE(E_HIST_110_8);
		ZQ_NEW_STATE := ZE_W_OPEN_HIS_110_8;
		.....to */
		Q_S0140_OPEN_HIST_FILE(E_HIST_110_14);
        ZQ_NEW_STATE := ZE_W_OPEN_HIS_110_14; 
		/* END: Updated for CR 605005 */
			
	/* BEGIN: CR 605005 */		
			
   (ZE_W_OPEN_HIS_110_14):
     /***************************************************************/
	 CASE ZF_EVENT OF
         (ZE_EV_FILE_OPENED):
            Z_HISTORY_FILE.ZB_IS_OPEN := TRUE;
            Q_S0080_SET_HDL_PROC_ID(Z_HISTORY_FILE,ZF_PROC_ID);
            Q_S0807_MAKE_RES_FILE_110_14();
            Q_S0130_RET_ALL_BUF();
            Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
            ZQ_NEW_STATE:= ZE_W_CLOSE_HIS_110_14;
         ELSE
            IF ZF_PROC_ID.B_PID_PID /=  M_PROCESS_ID_NULL.B_PID_PID
              THEN
              Q_S0080_SET_HDL_PROC_ID(Z_HISTORY_FILE,ZF_PROC_ID);
              Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
            FI;
            ZQ_NEW_STATE            := ZE_W_HIS_FILE_CLOSE;
            Z_RESULT_FILE.ZB_ERROR  := E_NO_REP_IO_ERR;
            TRACEINFO    :=
               'HIS110-14 OPEN ERR(%d %d %d)    ';
            ZQ_TRC_INTARG1.ZB_LOW_INT := (NUM)(ZF_STATE);
            ZQ_TRC_INTARG1.ZB_HIGH_INT := (NUM)(ZQ_NEW_STATE);
            TRC_BSC_PM2(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCRH),
              TRACEID(WARN),
              TRACEINFO,
              LONG_INT((ZQ_TRC_INTARG1.ZB_LONG_INT)),
              LONG_INT((ZF_EVENT)),
              LONG_INT((Z_HISTORY_FILE.ZB_FCB_INFO.B_FILE_NO)));
              /*FR36_270318*/
                TRACEINFO :=
                         'GLOBAL STOP OPEN_H_110_14 (%d)  ';

               TRC_BSC_PM3(
                    FILENAME,
                    LONG_INT(__LINENO__),
                    LONG_INT(SUB_CLASS_PM_CCRH),
                    TRACEID(NORM),
                    TRACEINFO,
                    LONG_INT((ZF_EVENT)),
                    LONG_INT((0)),
                    LONG_INT((0)));
              /*FR36_270318*/

      ESAC; 
	  
   (ZE_W_CLOSE_HIS_110_14):
 /*****************************************************************/
    Z_HISTORY_FILE.ZB_IS_OPEN := FALSE;
    Q_S0020_INIT_FILE(Z_HISTORY_FILE);

    /*Begin DCTPD01288924 */
		IF Z_FA_BSS_PAR2.ZB_TUPLE_PTR-> ZM_R_BSS_PAR2.D_EN_MOCN
    THEN
        Q_S0993_OPEN_17TH_HIS(); 
        ZQ_NEW_STATE := ZE_W_OPEN_HIS_110_17;
    ELSE
        Q_S0140_OPEN_HIST_FILE(E_HIST_110_8);
        ZQ_NEW_STATE := ZE_W_OPEN_HIS_110_8;  
    FI;     
    /*End DCTPD01288924 */
   
	/* END: CR 605005 */	
		
   /*ADDED FOR GSL COUNTERS MEMO*/                
   (ZE_W_OPEN_HIS_110_8):
   /**************************************************************/
      CASE ZF_EVENT OF
         (ZE_EV_FILE_OPENED):
            Z_HISTORY_FILE.ZB_IS_OPEN := TRUE;
            Q_S0080_SET_HDL_PROC_ID(Z_HISTORY_FILE,ZF_PROC_ID);
            Q_S0805_MAKE_RES_FILE_110_8();
            Q_S0130_RET_ALL_BUF();
            Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
            ZQ_NEW_STATE:= ZE_W_CLOSE_HIS_110_8;
         ELSE
            IF ZF_PROC_ID.B_PID_PID /=  M_PROCESS_ID_NULL.B_PID_PID
              THEN
              Q_S0080_SET_HDL_PROC_ID(Z_HISTORY_FILE,ZF_PROC_ID);
              Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
            FI;
            ZQ_NEW_STATE            := ZE_W_HIS_FILE_CLOSE;
            Z_RESULT_FILE.ZB_ERROR  := E_NO_REP_IO_ERR;
            TRACEINFO    :=
               'HIS110-8 OPEN ERR(%d %d %d)     ';
            ZQ_TRC_INTARG1.ZB_LOW_INT := (NUM)(ZF_STATE);
            ZQ_TRC_INTARG1.ZB_HIGH_INT := (NUM)(ZQ_NEW_STATE);
            TRC_BSC_PM2(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCRH),
              TRACEID(WARN),
              TRACEINFO,
              LONG_INT((ZQ_TRC_INTARG1.ZB_LONG_INT)),
              LONG_INT((ZF_EVENT)),
              LONG_INT((Z_HISTORY_FILE.ZB_FCB_INFO.B_FILE_NO)));
      ESAC; 
   (ZE_W_CLOSE_HIS_110_8):
   /*****************************************************************/

/*START CR MOCN */
      Z_HISTORY_FILE.ZB_IS_OPEN := FALSE;
      Q_S0020_INIT_FILE(Z_HISTORY_FILE);
      IF Z_SEVENTEENTH_HIST_FILE.ZB_IS_OPEN = TRUE
      THEN
        Q_S0170_CLOSE_HIST_FILE(->Z_SEVENTEENTH_HIST_FILE);
        ZQ_NEW_STATE:= ZE_W_CLOSE_HIS_110_17;
      ELSE
        Q_S0140_OPEN_HIST_FILE(E_HIST_110_9);
        ZQ_NEW_STATE := ZE_W_OPEN_HIS_110_9;  
      FI;   
/*END CR MOCN */
            
   (ZE_W_OPEN_HIS_110_9):
   /*****************************************************************/

      CASE ZF_EVENT OF

         (ZE_EV_FILE_OPENED):
            Z_HISTORY_FILE.ZB_IS_OPEN := TRUE;
            Q_S0080_SET_HDL_PROC_ID(Z_HISTORY_FILE,ZF_PROC_ID);
            Q_S0805_MAKE_RES_FILE_110_9();
            Q_S0130_RET_ALL_BUF();
            Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
            /*Q_S0210_CLOSE_RES_FILE();*/
            
        /*Commented for A-flex */
	/*  ZQ_NEW_STATE:=ZE_W_RES_FILE_CLOSE_FOR_REOPEN;*/ 
        
        /*START : Addition for A-flex */  
	    ZQ_NEW_STATE:= ZE_W_CLOSE_HIS_110_9; 
        /*END : Addition for A-flex */

         ELSE
             IF ZF_PROC_ID.B_PID_PID /=  M_PROCESS_ID_NULL.B_PID_PID
              THEN
              Q_S0080_SET_HDL_PROC_ID(Z_HISTORY_FILE,ZF_PROC_ID);
              Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
            FI;
            ZQ_NEW_STATE            := ZE_W_HIS_FILE_CLOSE;
            Z_RESULT_FILE.ZB_ERROR  := E_NO_REP_IO_ERR;
            TRACEINFO    :=
               'HIS110-9 OPEN ERR(%d %d %d)     ';
            ZQ_TRC_INTARG1.ZB_LOW_INT := (NUM)(ZF_STATE);
            ZQ_TRC_INTARG1.ZB_HIGH_INT := (NUM)(ZQ_NEW_STATE);
            TRC_BSC_PM2(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCRH),
              TRACEID(WARN),
              TRACEINFO,
              LONG_INT((ZQ_TRC_INTARG1.ZB_LONG_INT)),
              LONG_INT((ZF_EVENT)),
              LONG_INT((Z_HISTORY_FILE.ZB_FCB_INFO.B_FILE_NO)));
              /*FR36_270318*/
                TRACEINFO :=
                         'GLOBAL STOP OPEN_H_110_9 (%d)   ';

               TRC_BSC_PM3(
                    FILENAME,
                    LONG_INT(__LINENO__),
                    LONG_INT(SUB_CLASS_PM_CCRH),
                    TRACEID(NORM),
                    TRACEINFO,
                    LONG_INT((ZF_EVENT)),
                    LONG_INT((0)),
                    LONG_INT((0)));
              /*FR36_270318*/

       ESAC; 
/*ADDED FOR GSL COUNTERS MEMO*/

/*START CR MOCN */
(ZE_W_CLOSE_HIS_110_17):/*DCTPD01288924 */
/*****************************************************************/
 
        Z_SEVENTEENTH_HIST_FILE.ZB_IS_OPEN := FALSE;
        Q_S0020_INIT_FILE(Z_SEVENTEENTH_HIST_FILE);
        Q_S0140_OPEN_HIST_FILE(E_HIST_110_9);
        ZQ_NEW_STATE := ZE_W_OPEN_HIS_110_9; 

(ZE_W_OPEN_HIS_110_17):
/*****************************************************************/
   CASE ZF_EVENT OF
	    (ZE_EV_FILE_OPENED):
            Z_SEVENTEENTH_HIST_FILE.ZB_IS_OPEN := TRUE;
            Q_S0080_SET_HDL_PROC_ID(Z_SEVENTEENTH_HIST_FILE,ZF_PROC_ID);
            Q_S0140_OPEN_HIST_FILE(E_HIST_110_8);
            ZQ_NEW_STATE := ZE_W_OPEN_HIS_110_8;
 
         ELSE
             IF ZF_PROC_ID.B_PID_PID /=  M_PROCESS_ID_NULL.B_PID_PID
              THEN
              Q_S0080_SET_HDL_PROC_ID(Z_HISTORY_FILE,ZF_PROC_ID);
              Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
            FI;
            ZQ_NEW_STATE            := ZE_W_HIS_FILE_CLOSE;
            Z_RESULT_FILE.ZB_ERROR  := E_NO_REP_IO_ERR;
            
      ESAC;          
/*END CR MOCN */

/* START : Addition for A-flex */
    (ZE_W_CLOSE_HIS_110_9):
 /*****************************************************************/
 
 	Z_HISTORY_FILE.ZB_IS_OPEN := FALSE;
        Q_S0020_INIT_FILE(Z_HISTORY_FILE);
        Q_S0140_OPEN_HIST_FILE(E_HIST_110_10);
        ZQ_NEW_STATE := ZE_W_OPEN_HIS_110_10;  
 
 (ZE_W_OPEN_HIS_110_10):
 /*****************************************************************/
  
     CASE ZF_EVENT OF
     
          (ZE_EV_FILE_OPENED):
            Z_HISTORY_FILE.ZB_IS_OPEN := TRUE;
            Q_S0080_SET_HDL_PROC_ID(Z_HISTORY_FILE,ZF_PROC_ID);
            Q_S0805_MAKE_RES_FILE_110_10();
            Q_S0130_RET_ALL_BUF();
           /*Q_S0210_CLOSE_RES_FILE();  for aupoip*/ 
	       /*BEGIN : CR20/301337-RFI4448 FILE FORMAT*/
	       /*BEGIN: CR36/302024 - RFI4448*/
           /*ZQ_NEW_STATE:=ZE_W_RES_FILE_CLOSE_FOR_REOPEN;*/
	       Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
            ZQ_NEW_STATE := ZE_W_CLOSE_HIS_110_10;
	    /*END: CR36/302024*/
	    /*END : CR20/301337*/
           ELSE
             IF ZF_PROC_ID.B_PID_PID /=  M_PROCESS_ID_NULL.B_PID_PID
              THEN
              Q_S0080_SET_HDL_PROC_ID(Z_HISTORY_FILE,ZF_PROC_ID);
              Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
            FI;
            ZQ_NEW_STATE            := ZE_W_HIS_FILE_CLOSE; 
	        Z_RESULT_FILE.ZB_ERROR  := E_NO_REP_IO_ERR;
        ESAC; 
      
/* END : Addition for A-flex */
	  
	  /*BEGIN:AUPOIP*/
	  
  (ZE_W_CLOSE_HIS_110_10):
/*****************************************************************/
 
        Z_HISTORY_FILE.ZB_IS_OPEN := FALSE;
        Q_S0020_INIT_FILE(Z_HISTORY_FILE);
        Q_S0140_OPEN_HIST_FILE(E_HIST_110_12);
        ZQ_NEW_STATE := ZE_W_OPEN_HIS_110_12;  
		
(ZE_W_OPEN_HIS_110_12):
/*****************************************************************/
   CASE ZF_EVENT OF
	    (ZE_EV_FILE_OPENED):
            Z_HISTORY_FILE.ZB_IS_OPEN := TRUE;
            Q_S0080_SET_HDL_PROC_ID(Z_HISTORY_FILE,ZF_PROC_ID);
            Q_S0805_MAKE_RES_FILE_110_12();
            Q_S0130_RET_ALL_BUF();
            /* BEGIN CR:745699 */
            /*Q_S0210_CLOSE_RES_FILE();
            ZQ_NEW_STATE:=ZE_W_RES_FILE_CLOSE_FOR_REOPEN;*/
            Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
            ZQ_NEW_STATE := ZE_W_CLOSE_HIS_110_12;
			/*END CR:745699*/
         ELSE
             IF ZF_PROC_ID.B_PID_PID /=  M_PROCESS_ID_NULL.B_PID_PID
              THEN
              Q_S0080_SET_HDL_PROC_ID(Z_HISTORY_FILE,ZF_PROC_ID);
              Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
            FI;
            ZQ_NEW_STATE            := ZE_W_HIS_FILE_CLOSE;
            Z_RESULT_FILE.ZB_ERROR  := E_NO_REP_IO_ERR;
            
      ESAC; 
	  /*END:AUPOIP*/
/* BEGIN CR:745699 */
(ZE_W_CLOSE_HIS_110_12):
/*****************************************************************/
 
        Z_HISTORY_FILE.ZB_IS_OPEN := FALSE;
        Q_S0020_INIT_FILE(Z_HISTORY_FILE);
        Q_S0140_OPEN_HIST_FILE(E_HIST_110_15);
        ZQ_NEW_STATE := ZE_W_OPEN_HIS_110_15;  
		
(ZE_W_OPEN_HIS_110_15):
/*****************************************************************/
   CASE ZF_EVENT OF
	    (ZE_EV_FILE_OPENED):
            Z_HISTORY_FILE.ZB_IS_OPEN := TRUE;
            Q_S0080_SET_HDL_PROC_ID(Z_HISTORY_FILE,ZF_PROC_ID);
            Q_S0809_MAKE_RES_FILE_110_15();
            Q_S0130_RET_ALL_BUF();
/*START CR MOCN /.DCTPD01288924 ./ ./
            IF Z_FA_BSS_PAR2.ZB_TUPLE_PTR-> ZM_R_BSS_PAR2.D_EN_MOCN
            THEN
               Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);            
               ZQ_NEW_STATE:=ZE_W_CLOSE_HIS_110_15;
            ELSE
*/            
               Q_S0210_CLOSE_RES_FILE();
               ZQ_NEW_STATE:=ZE_W_RES_FILE_CLOSE_FOR_REOPEN;
      /*      FI;   
/.END CR MOCN */
         ELSE
             IF ZF_PROC_ID.B_PID_PID /=  M_PROCESS_ID_NULL.B_PID_PID
              THEN
              Q_S0080_SET_HDL_PROC_ID(Z_HISTORY_FILE,ZF_PROC_ID);
              Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
            FI;
            ZQ_NEW_STATE            := ZE_W_HIS_FILE_CLOSE;
            Z_RESULT_FILE.ZB_ERROR  := E_NO_REP_IO_ERR;
            
      ESAC; 
/* END CR:745699*/

 (ZE_W_CLOSE_HIS_37_1):
   /*****************************************************************/
        Z_SECOND_HIST_FILE.ZB_IS_OPEN := FALSE; 
        Q_S0210_CLOSE_RES_FILE();
        ZQ_NEW_STATE:=ZE_W_RES_FILE_CLOSE_FOR_REOPEN;

/*END : B12_VAMOS*/
                 
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
   (ZE_W_CLOSE_HIS_1_1):
   /*****************************************************************/

        Z_HISTORY_FILE.ZB_IS_OPEN := FALSE;
        Q_S0020_INIT_FILE(Z_HISTORY_FILE);
        Q_S0140_OPEN_HIST_FILE(E_HIST_1_2);
        ZQ_NEW_STATE := ZE_W_OPEN_HIS_1_2;


   (ZE_W_OPEN_HIS_1_2):
   /*****************************************************************/

      CASE ZF_EVENT OF

         (ZE_EV_FILE_OPENED):
            Z_HISTORY_FILE.ZB_IS_OPEN := TRUE;
            Q_S0080_SET_HDL_PROC_ID(Z_HISTORY_FILE,ZF_PROC_ID);
            Q_S0525_MAKE_RES_FILE_1_2();
            Q_S0130_RET_ALL_BUF();
            Q_S0210_CLOSE_RES_FILE();
            ZQ_NEW_STATE:=ZE_W_RES_FILE_CLOSE_FOR_REOPEN;

         ELSE
            /* HISTORY FILE NOT OPENED */
            IF ZF_PROC_ID.B_PID_PID /=  M_PROCESS_ID_NULL.B_PID_PID
              THEN
              Q_S0080_SET_HDL_PROC_ID(Z_HISTORY_FILE,ZF_PROC_ID);
              Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
            FI;
            ZQ_NEW_STATE            := ZE_W_HIS_FILE_CLOSE;
            Z_RESULT_FILE.ZB_ERROR  := E_NO_REP_IO_ERR;
             /*ADD ERR RTTRACE*/
            TRACEINFO    :=
               'HIS1-2 OPEN ERR(%d %d %d)       ';
            ZQ_TRC_INTARG1.ZB_LOW_INT := (NUM)(ZF_STATE);
            ZQ_TRC_INTARG1.ZB_HIGH_INT := (NUM)(ZQ_NEW_STATE);
            TRC_BSC_PM2(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCRH),
              TRACEID(WARN),
              TRACEINFO,
              LONG_INT((ZQ_TRC_INTARG1.ZB_LONG_INT)),
              LONG_INT((ZF_EVENT)),
              LONG_INT((Z_HISTORY_FILE.ZB_FCB_INFO.B_FILE_NO)));
              /*FR36_270318*/
                TRACEINFO :=
                         'GLOBAL STOP OPEN_H_1_2   (%d)   ';

               TRC_BSC_PM3(
                    FILENAME,
                    LONG_INT(__LINENO__),
                    LONG_INT(SUB_CLASS_PM_CCRH),
                    TRACEID(NORM),
                    TRACEINFO,
                    LONG_INT((ZF_EVENT)),
                    LONG_INT((0)),
                    LONG_INT((0)));
              /*FR36_270318*/

      ESAC; /* ZF_EVENT */
/*CR36/236932*/
   (ZE_W_CLOSE_HIS_7_1):
   /*****************************************************************/

        Z_HISTORY_FILE.ZB_IS_OPEN := FALSE;
        Q_S0020_INIT_FILE(Z_HISTORY_FILE);
        Q_S0140_OPEN_HIST_FILE(E_HIST_7_2);
        ZQ_NEW_STATE := ZE_W_OPEN_HIS_7_2;


   (ZE_W_OPEN_HIS_7_2):
   /*****************************************************************/

      CASE ZF_EVENT OF

         (ZE_EV_FILE_OPENED):
            Z_HISTORY_FILE.ZB_IS_OPEN := TRUE;
            Q_S0080_SET_HDL_PROC_ID(Z_HISTORY_FILE,ZF_PROC_ID);
            Q_S0806_MAKE_RES_FILE_7_2();
            Q_S0130_RET_ALL_BUF();
            Q_S0210_CLOSE_RES_FILE();
            ZQ_NEW_STATE:=ZE_W_RES_FILE_CLOSE_FOR_REOPEN;

         ELSE
            /* HISTORY FILE NOT OPENED */
            IF ZF_PROC_ID.B_PID_PID /=  M_PROCESS_ID_NULL.B_PID_PID
              THEN
              Q_S0080_SET_HDL_PROC_ID(Z_HISTORY_FILE,ZF_PROC_ID);
              Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
            FI;
            ZQ_NEW_STATE            := ZE_W_HIS_FILE_CLOSE;
            Z_RESULT_FILE.ZB_ERROR  := E_NO_REP_IO_ERR;
             /*ADD ERR RTTRACE*/
            TRACEINFO    :=
               'HIS1-2 OPEN ERR(%d %d %d)       ';
            ZQ_TRC_INTARG1.ZB_LOW_INT := (NUM)(ZF_STATE);
            ZQ_TRC_INTARG1.ZB_HIGH_INT := (NUM)(ZQ_NEW_STATE);
            TRC_BSC_PM2(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCRH),
              TRACEID(WARN),
              TRACEINFO,
              LONG_INT((ZQ_TRC_INTARG1.ZB_LONG_INT)),
              LONG_INT((ZF_EVENT)),
              LONG_INT((Z_HISTORY_FILE.ZB_FCB_INFO.B_FILE_NO)));
               
               /*FR36_270318*/
                TRACEINFO :=
                         'GLOBAL STOP OPEN_H_7_2   (%d)   ';

               TRC_BSC_PM3(
                    FILENAME,
                    LONG_INT(__LINENO__),
                    LONG_INT(SUB_CLASS_PM_CCRH),
                    TRACEID(NORM),
                    TRACEINFO,
                    LONG_INT((ZF_EVENT)),
                    LONG_INT((0)),
                    LONG_INT((0)));
              /*FR36_270318*/
     
      ESAC; /* ZF_EVENT */
/*CR36/236932*/
   (ZE_W_CLOSE_HIS_18_1):
   /*****************************************************************/

        Z_HISTORY_FILE.ZB_IS_OPEN := FALSE;
        Q_S0020_INIT_FILE(Z_HISTORY_FILE);
        Q_S0140_OPEN_HIST_FILE(E_HIST_18_2);
        ZQ_NEW_STATE := ZE_W_OPEN_HIS_18_2;


   (ZE_W_OPEN_HIS_18_2):
   /*****************************************************************/

      CASE ZF_EVENT OF

         (ZE_EV_FILE_OPENED):
            Z_HISTORY_FILE.ZB_IS_OPEN := TRUE;
            Q_S0080_SET_HDL_PROC_ID(Z_HISTORY_FILE,ZF_PROC_ID);
            Q_S0635_MAKE_RES_FILE_18_2();
            Q_S0130_RET_ALL_BUF();
            Q_S0210_CLOSE_RES_FILE();
            ZQ_NEW_STATE:=ZE_W_RES_FILE_CLOSE_FOR_REOPEN;

         ELSE
            /* HISTORY FILE NOT OPENED */
            IF ZF_PROC_ID.B_PID_PID /=  M_PROCESS_ID_NULL.B_PID_PID
              THEN
              Q_S0080_SET_HDL_PROC_ID(Z_HISTORY_FILE,ZF_PROC_ID);
              Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
            FI;
            ZQ_NEW_STATE            := ZE_W_HIS_FILE_CLOSE;
            Z_RESULT_FILE.ZB_ERROR  := E_NO_REP_IO_ERR;
            /*ADD ERR RTTRACE*/
            TRACEINFO    :=
               'HIS18-2 OPEN ERR(%d %d %d)      ';
            ZQ_TRC_INTARG1.ZB_LOW_INT := (NUM)(ZF_STATE);
            ZQ_TRC_INTARG1.ZB_HIGH_INT := (NUM)(ZQ_NEW_STATE);
            TRC_BSC_PM2(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCRH),
              TRACEID(WARN),
              TRACEINFO,
              LONG_INT((ZQ_TRC_INTARG1.ZB_LONG_INT)),
              LONG_INT((ZF_EVENT)),
              LONG_INT((Z_HISTORY_FILE.ZB_FCB_INFO.B_FILE_NO)));

              /*FR36_270318*/
                TRACEINFO :=
                         'GLOBAL STOP OPEN_H_18_2  (%d)   ';

               TRC_BSC_PM3(
                    FILENAME,
                    LONG_INT(__LINENO__),
                    LONG_INT(SUB_CLASS_PM_CCRH),
                    TRACEID(NORM),
                    TRACEINFO,
                    LONG_INT((ZF_EVENT)),
                    LONG_INT((0)),
                    LONG_INT((0)));
              /*FR36_270318*/

      ESAC; /* ZF_EVENT */

/* BEGIN: ADD-WIPRO-B9-P2-CHANGE */
   (ZE_W_CLOSE_HIS_34_1):
   /*****************************************************************/

        Z_HISTORY_FILE.ZB_IS_OPEN := FALSE;
        Q_S0020_INIT_FILE(Z_HISTORY_FILE);
        Q_S0140_OPEN_HIST_FILE(E_HIST_34_2);
        ZQ_NEW_STATE := ZE_W_OPEN_HIS_34_2;

   (ZE_W_OPEN_HIS_34_2):
   /*****************************************************************/

      CASE ZF_EVENT OF

         (ZE_EV_FILE_OPENED):
            Z_HISTORY_FILE.ZB_IS_OPEN := TRUE;
            Q_S0080_SET_HDL_PROC_ID(Z_HISTORY_FILE,ZF_PROC_ID);
            Q_S0755_34_MAKE_RES_FILE_34_2();
            Q_S0130_RET_ALL_BUF();
            Q_S0210_CLOSE_RES_FILE();
            ZQ_NEW_STATE:=ZE_W_RES_FILE_CLOSE_FOR_REOPEN;

         ELSE
            /* HISTORY FILE NOT OPENED */
            IF ZF_PROC_ID.B_PID_PID /=  M_PROCESS_ID_NULL.B_PID_PID
              THEN
              Q_S0080_SET_HDL_PROC_ID(Z_HISTORY_FILE,ZF_PROC_ID);
              Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
            FI;
            ZQ_NEW_STATE            := ZE_W_HIS_FILE_CLOSE;
            Z_RESULT_FILE.ZB_ERROR  := E_NO_REP_IO_ERR;
             /*ADD ERR RTTRACE*/
            TRACEINFO    :=
               'HIS34-2 OPEN ERR(%d %d %d)      ';
            ZQ_TRC_INTARG1.ZB_LOW_INT := (NUM)(ZF_STATE);
            ZQ_TRC_INTARG1.ZB_HIGH_INT := (NUM)(ZQ_NEW_STATE);
            TRC_BSC_PM2(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCRH),
              TRACEID(WARN),
              TRACEINFO,
              LONG_INT((ZQ_TRC_INTARG1.ZB_LONG_INT)),
              LONG_INT((ZF_EVENT)),
              LONG_INT((Z_HISTORY_FILE.ZB_FCB_INFO.B_FILE_NO)));
              /*FR36_270318*/
                TRACEINFO :=
                         'GLOBAL STOP OPEN_H_34_2  (%d)   ';

               TRC_BSC_PM3(
                    FILENAME,
                    LONG_INT(__LINENO__),
                    LONG_INT(SUB_CLASS_PM_CCRH),
                    TRACEID(NORM),
                    TRACEINFO,
                    LONG_INT((ZF_EVENT)),
                    LONG_INT((0)),
                    LONG_INT((0)));
              /*FR36_270318*/

      ESAC; /* ZF_EVENT */

/* END: ADD-WIPRO-B9-P2-CHANGE */
/* BEGIN: ADD-WIPRO-B10-MR2-CHANGE */
   (ZE_W_CLOSE_HIS_35_0):
   /*****************************************************************/

        Z_HISTORY_FILE.ZB_IS_OPEN := FALSE;
        Q_S0020_INIT_FILE(Z_HISTORY_FILE);
  /* CR20/225233 */        
        Q_S0140_OPEN_HIST_FILE(E_HIST_35_3);
        ZQ_NEW_STATE := ZE_W_OPEN_HIS_35_3;
   (ZE_W_OPEN_HIS_35_3):
   /*****************************************************************/

      CASE ZF_EVENT OF

         (ZE_EV_FILE_OPENED):
            Z_HISTORY_FILE.ZB_IS_OPEN := TRUE;
            Q_S0080_SET_HDL_PROC_ID(Z_HISTORY_FILE,ZF_PROC_ID);
            Q_S0752_35_MAKE_RES_FILE_35_3();
            Q_S0130_RET_ALL_BUF();
            Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
            ZQ_NEW_STATE:=ZE_W_CLOSE_HIS_35_3;

         ELSE
            /* HISTORY FILE NOT OPENED */
            IF ZF_PROC_ID.B_PID_PID /=  M_PROCESS_ID_NULL.B_PID_PID
              THEN
              Q_S0080_SET_HDL_PROC_ID(Z_HISTORY_FILE,ZF_PROC_ID);
              Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
            FI;
            ZQ_NEW_STATE            := ZE_W_HIS_FILE_CLOSE;
            Z_RESULT_FILE.ZB_ERROR  := E_NO_REP_IO_ERR;
             /*ADD ERR RTTRACE*/
            TRACEINFO    :=
               'HIS34-2 OPEN ERR(%d %d %d)      ';
            ZQ_TRC_INTARG1.ZB_LOW_INT := (NUM)(ZF_STATE);
            ZQ_TRC_INTARG1.ZB_HIGH_INT := (NUM)(ZQ_NEW_STATE);
            TRC_BSC_ERR2(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(ZS_ERR_SUB_CLASS_PM),
              TRACEID(WARN),
              TRACEINFO,
              LONG_INT((ZQ_TRC_INTARG1.ZB_LONG_INT)),
              LONG_INT((ZF_EVENT)),
              LONG_INT((Z_HISTORY_FILE.ZB_FCB_INFO.B_FILE_NO)));
      ESAC; /* ZF_EVENT */
   (ZE_W_CLOSE_HIS_35_3):
   /*****************************************************************/

        Z_HISTORY_FILE.ZB_IS_OPEN := FALSE;
        Q_S0020_INIT_FILE(Z_HISTORY_FILE);
        Q_S0140_OPEN_HIST_FILE(E_HIST_35_4);
        ZQ_NEW_STATE := ZE_W_OPEN_HIS_35_4;        
   /* CR20/225233 */       

   (ZE_W_OPEN_HIS_35_4):
   /*****************************************************************/

      CASE ZF_EVENT OF

         (ZE_EV_FILE_OPENED):
            Z_HISTORY_FILE.ZB_IS_OPEN := TRUE;
            Q_S0080_SET_HDL_PROC_ID(Z_HISTORY_FILE,ZF_PROC_ID);
            Q_S0752_35_MAKE_RES_FILE_35_4();
            Q_S0130_RET_ALL_BUF();
            Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
            ZQ_NEW_STATE:=ZE_W_CLOSE_HIS_35_4;

         ELSE
            /* HISTORY FILE NOT OPENED */
            IF ZF_PROC_ID.B_PID_PID /=  M_PROCESS_ID_NULL.B_PID_PID
              THEN
              Q_S0080_SET_HDL_PROC_ID(Z_HISTORY_FILE,ZF_PROC_ID);
              Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
            FI;
            ZQ_NEW_STATE            := ZE_W_HIS_FILE_CLOSE;
            Z_RESULT_FILE.ZB_ERROR  := E_NO_REP_IO_ERR;
             /*ADD ERR RTTRACE*/
            TRACEINFO    :=
               'HIS34-2 OPEN ERR(%d %d %d)      ';
            ZQ_TRC_INTARG1.ZB_LOW_INT := (NUM)(ZF_STATE);
            ZQ_TRC_INTARG1.ZB_HIGH_INT := (NUM)(ZQ_NEW_STATE);
            TRC_BSC_ERR2(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(ZS_ERR_SUB_CLASS_PM),
              TRACEID(WARN),
              TRACEINFO,
              LONG_INT((ZQ_TRC_INTARG1.ZB_LONG_INT)),
              LONG_INT((ZF_EVENT)),
              LONG_INT((Z_HISTORY_FILE.ZB_FCB_INFO.B_FILE_NO)));
      ESAC; /* ZF_EVENT */
   (ZE_W_CLOSE_HIS_35_4):
   /*****************************************************************/

        Z_HISTORY_FILE.ZB_IS_OPEN := FALSE;
        Q_S0020_INIT_FILE(Z_HISTORY_FILE);
        Q_S0140_OPEN_HIST_FILE(E_HIST_35_5);
        ZQ_NEW_STATE := ZE_W_OPEN_HIS_35_5;

   (ZE_W_OPEN_HIS_35_5):
   /*****************************************************************/

      CASE ZF_EVENT OF

         (ZE_EV_FILE_OPENED):
            Z_HISTORY_FILE.ZB_IS_OPEN := TRUE;
            Q_S0080_SET_HDL_PROC_ID(Z_HISTORY_FILE,ZF_PROC_ID);
            Q_S0753_35_MAKE_RES_FILE_35_5();
            Q_S0130_RET_ALL_BUF();
/* BEGIN: ADD-WIPRO-FR36229339-CHANGE */   
            Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
/* END: ADD-WIPRO-FR36229339-CHANGE */   
/* BEGIN: ADD-WIPRO-B11-MR0-PKG1-CHANGE */                        
            /*Q_S0210_CLOSE_RES_FILE();
            ZQ_NEW_STATE:=ZE_W_RES_FILE_CLOSE_FOR_REOPEN;*/
            /*CR2517*/
            /*ZQ_NEW_STATE:=ZE_W_CLOSE_HIS_35_5;*/
            ZQ_NEW_STATE:=ZE_W_CLOSE_HIS_35_5;
            /*CR2517*/
/* END: ADD-WIPRO-B10-MR0-PKG1-CHANGE */            

         ELSE
            /* HISTORY FILE NOT OPENED */
            IF ZF_PROC_ID.B_PID_PID /=  M_PROCESS_ID_NULL.B_PID_PID
              THEN
              Q_S0080_SET_HDL_PROC_ID(Z_HISTORY_FILE,ZF_PROC_ID);
              Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
            FI;
            ZQ_NEW_STATE            := ZE_W_HIS_FILE_CLOSE;
            Z_RESULT_FILE.ZB_ERROR  := E_NO_REP_IO_ERR;
             /*ADD ERR RTTRACE*/
            TRACEINFO    :=
               'HIS34-2 OPEN ERR(%d %d %d)      ';
            ZQ_TRC_INTARG1.ZB_LOW_INT := (NUM)(ZF_STATE);
            ZQ_TRC_INTARG1.ZB_HIGH_INT := (NUM)(ZQ_NEW_STATE);
            TRC_BSC_ERR2(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(ZS_ERR_SUB_CLASS_PM),
              TRACEID(WARN),
              TRACEINFO,
              LONG_INT((ZQ_TRC_INTARG1.ZB_LONG_INT)),
              LONG_INT((ZF_EVENT)),
              LONG_INT((Z_HISTORY_FILE.ZB_FCB_INFO.B_FILE_NO)));
      ESAC; /* ZF_EVENT */
/* BEGIN: ADD-WIPRO-B11-MR0-PKG1-CHANGE */                        
(ZE_W_CLOSE_HIS_35_5):
   /*****************************************************************/

        Z_HISTORY_FILE.ZB_IS_OPEN := FALSE;
        Q_S0020_INIT_FILE(Z_HISTORY_FILE);
        Q_S0140_OPEN_HIST_FILE(E_HIST_35_6);
        ZQ_NEW_STATE := ZE_W_OPEN_HIS_35_6;
/*START: CR20/284751 BTS FRQ SYNCH */
   (ZE_W_OPEN_HIS_35_6):
   /*****************************************************************/

      CASE ZF_EVENT OF

         (ZE_EV_FILE_OPENED):
            Z_HISTORY_FILE.ZB_IS_OPEN := TRUE;
            Q_S0080_SET_HDL_PROC_ID(Z_HISTORY_FILE,ZF_PROC_ID);
            Q_S0753_35_MAKE_RES_FILE_35_6();
            Q_S0130_RET_ALL_BUF();
/* BEGIN: ADD-WIPRO-FR36229339-CHANGE */   
            Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
/* END: ADD-WIPRO-FR36229339-CHANGE */   
/* BEGIN: ADD-WIPRO-B11-MR0-PKG1-CHANGE */                        
            /*Q_S0210_CLOSE_RES_FILE();
            ZQ_NEW_STATE:=ZE_W_RES_FILE_CLOSE_FOR_REOPEN;*/
            /*CR2517*/
            /*ZQ_NEW_STATE:=ZE_W_CLOSE_HIS_35_5;*/
            ZQ_NEW_STATE:=ZE_W_CLOSE_HIS_35_6;
            /*CR2517*/
/* END: ADD-WIPRO-B10-MR0-PKG1-CHANGE */            

         ELSE
            /* HISTORY FILE NOT OPENED */
            IF ZF_PROC_ID.B_PID_PID /=  M_PROCESS_ID_NULL.B_PID_PID
              THEN
              Q_S0080_SET_HDL_PROC_ID(Z_HISTORY_FILE,ZF_PROC_ID);
              Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
            FI;
            ZQ_NEW_STATE            := ZE_W_HIS_FILE_CLOSE;
            Z_RESULT_FILE.ZB_ERROR  := E_NO_REP_IO_ERR;
             /*ADD ERR RTTRACE*/
            TRACEINFO    :=
               'HIS34-6 OPEN ERR(%d %d %d)      ';
            ZQ_TRC_INTARG1.ZB_LOW_INT := (NUM)(ZF_STATE);
            ZQ_TRC_INTARG1.ZB_HIGH_INT := (NUM)(ZQ_NEW_STATE);
            TRC_BSC_ERR2(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(ZS_ERR_SUB_CLASS_PM),
              TRACEID(WARN),
              TRACEINFO,
              LONG_INT((ZQ_TRC_INTARG1.ZB_LONG_INT)),
              LONG_INT((ZF_EVENT)),
              LONG_INT((Z_HISTORY_FILE.ZB_FCB_INFO.B_FILE_NO)));
      ESAC; /* ZF_EVENT */
/* BEGIN: ADD-WIPRO-B11-MR0-PKG1-CHANGE */                        
(ZE_W_CLOSE_HIS_35_6):
   /*****************************************************************/

        Z_HISTORY_FILE.ZB_IS_OPEN := FALSE;
        Q_S0020_INIT_FILE(Z_HISTORY_FILE);
        Q_S0140_OPEN_HIST_FILE(E_HIST_35_8);
        ZQ_NEW_STATE := ZE_W_OPEN_HIS_35_8;
/*START: CR20/284751 BTS FRQ SYNCH */
(ZE_W_OPEN_HIS_35_7):
   /*****************************************************************/
    CASE ZF_EVENT OF
         (ZE_EV_FILE_OPENED):
            Z_HISTORY_FILE.ZB_IS_OPEN := TRUE;
            Q_S0080_SET_HDL_PROC_ID(Z_HISTORY_FILE,ZF_PROC_ID);
            Q_S0754_35_MAKE_RES_FILE_35_7();
            Q_S0130_RET_ALL_BUF();
/* BEGIN: ADD-WIPRO-FR36229339-CHANGE */   
            Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
/* END: ADD-WIPRO-FR36229339-CHANGE */   
            ZQ_NEW_STATE:=ZE_W_CLOSE_HIS_35_7;
         ELSE
            /* HISTORY FILE NOT OPENED */
            IF ZF_PROC_ID.B_PID_PID /=  M_PROCESS_ID_NULL.B_PID_PID
              THEN
              Q_S0080_SET_HDL_PROC_ID(Z_HISTORY_FILE,ZF_PROC_ID);
              Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
            FI;
            ZQ_NEW_STATE            := ZE_W_HIS_FILE_CLOSE;
            Z_RESULT_FILE.ZB_ERROR  := E_NO_REP_IO_ERR;
             /*ADD ERR RTTRACE*/
            TRACEINFO    :=
               'HIS34-2 OPEN ERR(%d %d %d)      ';
            ZQ_TRC_INTARG1.ZB_LOW_INT := (NUM)(ZF_STATE);
            ZQ_TRC_INTARG1.ZB_HIGH_INT := (NUM)(ZQ_NEW_STATE);
            TRC_BSC_ERR2(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(ZS_ERR_SUB_CLASS_PM),
              TRACEID(WARN),
              TRACEINFO,
              LONG_INT((ZQ_TRC_INTARG1.ZB_LONG_INT)),
              LONG_INT((ZF_EVENT)),
              LONG_INT((Z_HISTORY_FILE.ZB_FCB_INFO.B_FILE_NO)));
      ESAC; /* ZF_EVENT */
(ZE_W_CLOSE_HIS_35_7):
   /*****************************************************************/

        Z_HISTORY_FILE.ZB_IS_OPEN := FALSE;
        Q_S0020_INIT_FILE(Z_HISTORY_FILE);
        Q_S0140_OPEN_HIST_FILE(E_HIST_35_8);
        ZQ_NEW_STATE := ZE_W_OPEN_HIS_35_8;
(ZE_W_OPEN_HIS_35_8):
   /*****************************************************************/
    CASE ZF_EVENT OF
         (ZE_EV_FILE_OPENED):
            Z_HISTORY_FILE.ZB_IS_OPEN := TRUE;
            Q_S0080_SET_HDL_PROC_ID(Z_HISTORY_FILE,ZF_PROC_ID);
            Q_S0755_35_MAKE_RES_FILE_35_8();
            Q_S0130_RET_ALL_BUF();
            Q_S0210_CLOSE_RES_FILE();
            ZQ_NEW_STATE:=ZE_W_RES_FILE_CLOSE_FOR_REOPEN;
         ELSE
            /* HISTORY FILE NOT OPENED */
            IF ZF_PROC_ID.B_PID_PID /=  M_PROCESS_ID_NULL.B_PID_PID
              THEN
              Q_S0080_SET_HDL_PROC_ID(Z_HISTORY_FILE,ZF_PROC_ID);
              Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
            FI;
            ZQ_NEW_STATE            := ZE_W_HIS_FILE_CLOSE;
            Z_RESULT_FILE.ZB_ERROR  := E_NO_REP_IO_ERR;
             /*ADD ERR RTTRACE*/
            TRACEINFO    :=
               'HIS34-2 OPEN ERR(%d %d %d)      ';
            ZQ_TRC_INTARG1.ZB_LOW_INT := (NUM)(ZF_STATE);
            ZQ_TRC_INTARG1.ZB_HIGH_INT := (NUM)(ZQ_NEW_STATE);
            TRC_BSC_ERR2(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(ZS_ERR_SUB_CLASS_PM),
              TRACEID(WARN),
              TRACEINFO,
              LONG_INT((ZQ_TRC_INTARG1.ZB_LONG_INT)),
              LONG_INT((ZF_EVENT)),
              LONG_INT((Z_HISTORY_FILE.ZB_FCB_INFO.B_FILE_NO)));
      ESAC; /* ZF_EVENT */                
/* END: ADD-WIPRO-B11-MR0-PKG1-CHANGE */                              
/* END: ADD-WIPRO-B10-MR2-CHANGE */
   (ZE_W_RES_FILE_CLOSE_FOR_REOPEN):
   /*****************************************************************/

      CASE ZF_EVENT OF

        (ZE_EV_FILE_CLOSED):
           /* OPEN RESULT FILE FOR HEADER UPDATE */
           Z_RESULT_FILE.ZB_IS_OPEN := FALSE;
           Q_S0190_OPEN_RES_FILE(ZQ_ERROR,E_MOD_REQ);
           ZQ_NEW_STATE:=ZE_W_RES_FILE_REOPEN;

        ELSE
           Z_RESULT_FILE.ZB_ERROR  := E_NO_REP_IO_ERR;
    /*BEGIN CRI #01479581.01 NO HIST FILE CLOSE FOR TYPE180 OR 26*/ 
           IF (R_PM_ACT.D_MEAS_TYP = E_MT_TRAFFIC_FLOW OR                    
              R_PM_ACT.D_MEAS_TYP = E_MT_HANDOVER_PER_SERVINGCELL)             
            THEN
             Z_HISTORY_FILE.ZB_IS_OPEN := FALSE;                              
             Q_S0300_SEND_PM_CC_RES_CNF(Z_RESULT_FILE.ZB_ERROR);              
             ZQ_NEW_STATE := ZE_IDLE;
    /*END CRI #01479581.01*/         	                                             
            ELSE                            
             Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);                          
             ZQ_NEW_STATE  := ZE_W_HIS_FILE_CLOSE;    
           FI ;   
           /*ADD ERR RTTRACE*/
           TRACEINFO    :=
               'RES FILE CLOSE ERR(%d %d %d)    ';
           ZQ_TRC_INTARG1.ZB_LOW_INT := (NUM)(ZF_STATE);
           ZQ_TRC_INTARG1.ZB_HIGH_INT := (NUM)(ZQ_NEW_STATE);
           TRC_BSC_PM2(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCRH),
              TRACEID(WARN),
              TRACEINFO,
              LONG_INT((ZQ_TRC_INTARG1.ZB_LONG_INT)),
              LONG_INT((ZF_EVENT)),
              LONG_INT((Z_RESULT_FILE.ZB_FCB_INFO.B_FILE_NO)));
              /*FR36_270318*/
                TRACEINFO :=
                         'GLOBAL STOP RF_CLOSE_REOPEN (%d)';

               TRC_BSC_PM3(
                    FILENAME,
                    LONG_INT(__LINENO__),
                    LONG_INT(SUB_CLASS_PM_CCRH),
                    TRACEID(NORM),
                    TRACEINFO,
                    LONG_INT((ZF_EVENT)),
                    LONG_INT((0)),
                    LONG_INT((0)));
              /*FR36_270318*/

        ESAC;

   (ZE_W_RES_FILE_REOPEN):
   /*****************************************************************/

   CASE ZF_EVENT OF

     (ZE_EV_FILE_OPENED):
        Z_RESULT_FILE.ZB_IS_OPEN := TRUE;
        Q_S0080_SET_HDL_PROC_ID(Z_RESULT_FILE, ZF_PROC_ID);
        /* DO THE UPDATE HEADER ACTION FOR THIS RESULT FILE */
        Q_S0120_GET_WRITE_BUF(Z_RESULT_FILE.ZB_TABLE_PTR,
                              ZS_RES_REC_SIZE);
        IF Z_CPL_CODES = E_NULL_CODE THEN
           Z_RESULT_FILE.ZB_TABLE_SIZE := ZS_RES_REC_SIZE;
           Q_S0500_FILL_REC_HEAD(Z_RESULT_FILE.ZB_TABLE_PTR,
                                 0,
                                 E_PGHR);
        FI;

        Q_S0130_RET_ALL_BUF();
        IF Z_CPL_CODES /= E_NULL_CODE
           THEN
           IF Z_CPL_CODES = E_NO_SPACE_ON_DISK THEN
              /* NO SPACE ON DISK */
              Z_RESULT_FILE.ZB_ERROR  := E_NO_REP_NO_SPACE;

             /*WIPRO: B11_MX_MR0_PKG1 RT TRACE*/
             /*FR36_270318*/
             TRACEINFO    :=
                         'GLOBAL STOP DISK FULL (%d %d)   ';

             TRC_BSC_PM3(
                FILENAME,
                LONG_INT(__LINENO__),
                LONG_INT(SUB_CLASS_PM_CCRH),
                TRACEID(NORM),
                TRACEINFO,
                LONG_INT((Z_RESULT_FILE.ZB_ERROR)),
                LONG_INT((ZF_EVENT)),
                LONG_INT((0)));
            /*FR36_270318*/
           /*END WIPRO: B11_MX_MR0_PKG1 RT TRACE*/

           ELSE
              Z_RESULT_FILE.ZB_ERROR  := E_NO_REP_IO_ERR;
              /*FR36_270318*/
                TRACEINFO :=
                         'GLOBAL STOP RF_REOPEN_E (%d)    ';

               TRC_BSC_PM3(
                    FILENAME,
                    LONG_INT(__LINENO__),
                    LONG_INT(SUB_CLASS_PM_CCRH),
                    TRACEID(NORM),
                    TRACEINFO,
                    LONG_INT((ZF_EVENT)),
                    LONG_INT((0)),
                    LONG_INT((0)));
              /*FR36_270318*/

           FI;
        FI;
        Q_S0210_CLOSE_RES_FILE();
        /*START: CRI00611721 */
	IF Z_RESULT_FILE.ZB_ERROR = E_NO_SPACE_FOR_NEW_REC
	THEN
	  Z_NBR_RES_FILE := Z_NBR_RES_FILE + 1;
	  Q_S0190_OPEN_RES_FILE(ZQ_ERROR,E_WRITE_REQ);
	  ZQ_NEW_STATE := ZE_W_RES_FILE_OPEN;
 	ELSE
	/*END: CRI00611721 */
        IF Z_RESULT_FILE.ZB_MEAS_TYPE = E_MT_TRAFFIC_FLOW
           /* WITTS 76 */
           OR 
           Z_RESULT_FILE.ZB_MEAS_TYPE = 
                               E_MT_HANDOVER_PER_SERVINGCELL
           /* END WITTS 76 */
           /*START: VAMOS*/
		  /* CRI01436258.01 CLOSE FIRST HIS 370 BEGIN*/
          /*  OR
           Z_RESULT_FILE.ZB_MEAS_TYPE = 
                              E_MT_VAMOS  */
		  /* CRI01436258.01 CLOSE FIRST HIS 370 END*/				  
           /*END: VAMOS*/
		   
        THEN
           ZQ_NEW_STATE := ZE_W_HIS_FILE_CLOSE;
        ELSE
           ZQ_NEW_STATE := ZE_W_RES_FILE_CLOSE;
        FI;
        /*START: CRI00611721 */
	FI;
	/*END: CRI00611721 */
        /*ADD BY ZHUJ FOR RT TRACE*/
        IF Z_CPL_CODES /= E_NULL_CODE
        THEN
          TRACEINFO    :=
               'GET RES FILE HEAD ERR(%d %d %d) ';
          ZQ_TRC_INTARG1.ZB_LOW_INT := (NUM)(ZF_STATE);
          ZQ_TRC_INTARG1.ZB_HIGH_INT := (NUM)(ZQ_NEW_STATE);
          TRC_BSC_PM2(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCRH),
              TRACEID(WARN),
              TRACEINFO,
              LONG_INT((ZQ_TRC_INTARG1.ZB_LONG_INT)),
              LONG_INT((Z_CPL_CODES)),
              LONG_INT((Z_RESULT_FILE.ZB_FCB_INFO.B_FILE_NO)));
        FI;
     ELSE
        Z_RESULT_FILE.ZB_ERROR  := E_NO_REP_IO_ERR;
    /*BEGIN CRI #01479581.01 NO HIST FILE CLOSE FOR TYPE180 OR 26*/
        IF (R_PM_ACT.D_MEAS_TYP = E_MT_TRAFFIC_FLOW OR                    
          R_PM_ACT.D_MEAS_TYP = E_MT_HANDOVER_PER_SERVINGCELL)              
        THEN   
         Z_HISTORY_FILE.ZB_IS_OPEN := FALSE;                                        
         Q_S0300_SEND_PM_CC_RES_CNF(Z_RESULT_FILE.ZB_ERROR);                        
         ZQ_NEW_STATE := ZE_IDLE;
    /*END CRI #01479581.01*/                                                                  
        ELSE                                                              
         Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
         ZQ_NEW_STATE  := ZE_W_HIS_FILE_CLOSE;                        
        FI;   
        /*ADD ERR RTTRACE*/
        TRACEINFO    :=
               'RES FILE REOPEN ERR(%d %d %d)   ';
        ZQ_TRC_INTARG1.ZB_LOW_INT := (NUM)(ZF_STATE);
        ZQ_TRC_INTARG1.ZB_HIGH_INT := (NUM)(ZQ_NEW_STATE);
        TRC_BSC_PM2(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCRH),
              TRACEID(WARN),
              TRACEINFO,
              LONG_INT((ZQ_TRC_INTARG1.ZB_LONG_INT)),
              LONG_INT((ZF_EVENT)),
              LONG_INT((Z_RESULT_FILE.ZB_FCB_INFO.B_FILE_NO)));

     ESAC;

   (ZE_W_RES_FILE_CLOSE):
   /*****************************************************************/

      Z_RESULT_FILE.ZB_IS_OPEN := FALSE;
/* BEGIN: ADD-WIPRO-B8-CHANGE-PM-COUNTER EXISTING STATE MODIFIED*/
      /*BEGIN:ADD-WIPRO-B10-MR1-CHANGE */
/*BEGIN : CR20/301337 RFI4448 FILE FORMAT*/
/*BEGIN CRI #01443513.01 CLOSE HIST 18->11->13->7->3->2->1*/  
      IF Z_18TH_HIST_FILE.ZB_IS_OPEN
      THEN
       Q_S0170_CLOSE_HIST_FILE(->Z_18TH_HIST_FILE);                           
       ZQ_NEW_STATE  := ZE_W_HIS_FILE_CLOSE_18;                                   
      ELSIF Z_ELEVENTH_HIST_FILE.ZB_IS_OPEN                                        
      THEN                                                                      
       Q_S0170_CLOSE_HIST_FILE(->Z_ELEVENTH_HIST_FILE);                           
       ZQ_NEW_STATE  := ZE_W_HIS_FILE_CLOSE_11;                                
	/*BEGIN: CR20/313054 */                                                        
      ELSIF Z_THIRTEENTH_HIST_FILE.ZB_IS_OPEN                                   
      THEN                                                                         
      Q_S0170_CLOSE_HIST_FILE(->Z_THIRTEENTH_HIST_FILE);                         
      ZQ_NEW_STATE  := ZE_W_HIS_FILE_CLOSE_13;
/*END CRI #01443513.01*/                                    
/*END: CR20/313054 */	                                                      
      ELSIF Z_SEVENTH_HIST_FILE.ZB_IS_OPEN  
/*      IF Z_SEVENTH_HIST_FILE.ZB_IS_OPEN*/
/*END : CR20/301337*/
      THEN
        Q_S0170_CLOSE_HIST_FILE(->Z_SEVENTH_HIST_FILE);
        ZQ_NEW_STATE  := ZE_W_HIS_FILE_CLOSE_7;
      ELSIF Z_THIRD_HIST_FILE.ZB_IS_OPEN  
      /*END:ADD-WIPRO-B10-MR1-CHANGE */
      /*START:DELETE-WIPRO-B10-MR1-CHANGE */
      /*IF Z_THIRD_HIST_FILE.ZB_IS_OPEN*/
      /*END:DELETE-WIPRO-B10-MR1-CHANGE */
      THEN
        Q_S0170_CLOSE_HIST_FILE(->Z_THIRD_HIST_FILE);
        ZQ_NEW_STATE  := ZE_W_HIS_FILE_CLOSE_3;
      ELSIF Z_SECOND_HIST_FILE.ZB_IS_OPEN
      THEN
        Q_S0170_CLOSE_HIST_FILE(->Z_SECOND_HIST_FILE);
        ZQ_NEW_STATE := ZE_W_HIS_FILE_CLOSE_2;
/* END:   ADD-WIPRO-B8-CHANGE-PM-COUNTER EXISTING STATE MODIFIED*/
      ELSE
    /*BEGIN CRI #01479581.01 NO HIST FILE CLOSE FOR TYPE180 OR 26*/ 
        IF (R_PM_ACT.D_MEAS_TYP = E_MT_TRAFFIC_FLOW OR                    
          R_PM_ACT.D_MEAS_TYP = E_MT_HANDOVER_PER_SERVINGCELL)             
      	THEN
      		Z_HISTORY_FILE.ZB_IS_OPEN := FALSE;                              
      		Q_S0300_SEND_PM_CC_RES_CNF(Z_RESULT_FILE.ZB_ERROR);              
      		ZQ_NEW_STATE := ZE_IDLE;
   /*END CRI #01479581.01*/                                         
      	ELSE                                                                                                                           
      		Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);                            
      		ZQ_NEW_STATE  := ZE_W_HIS_FILE_CLOSE;    
        FI; 
      FI;

   (ZE_W_HIS_FILE_CLOSE_2): /* PBLO: ADDED FOR TYPE 110 */
   /*****************************************************************/

      /* 2ND HISTORY FILE WAS CLOSED FIRST */
      Z_SECOND_HIST_FILE.ZB_IS_OPEN := FALSE;
      Q_S0170_CLOSE_HIST_FILE(->Z_HISTORY_FILE);
      ZQ_NEW_STATE  := ZE_W_HIS_FILE_CLOSE;

   /* BEGIN: ADD-WIPRO-B8-CHANGE-PM-COUNTER NEW STATE ADDED*/
   (ZE_W_HIS_FILE_CLOSE_3):
   /*****************************************************************/

      /* 3RD HISTORY FILE WAS CLOSED FIRST */
      Z_THIRD_HIST_FILE.ZB_IS_OPEN := FALSE;
      Q_S0170_CLOSE_HIST_FILE(->Z_SECOND_HIST_FILE);
      ZQ_NEW_STATE  := ZE_W_HIS_FILE_CLOSE_2;
/*BEGIN:ADD-WIPRO-B10-MR1-CHANGE */
   (ZE_W_HIS_FILE_CLOSE_7):
   /*****************************************************************/
      Z_SEVENTH_HIST_FILE.ZB_IS_OPEN := FALSE;
      Q_S0170_CLOSE_HIST_FILE(->Z_THIRD_HIST_FILE);
      ZQ_NEW_STATE  := ZE_W_HIS_FILE_CLOSE_3;
/*END:ADD-WIPRO-B10-MR1-CHANGE */

/*BEGIN CRI #01443513.01 CLOSE HIST 18->11->13->7->3->2->1*/     	
  (ZE_W_HIS_FILE_CLOSE_13):                                                      
   /*****************************************************************/          
      Z_THIRTEENTH_HIST_FILE.ZB_IS_OPEN := FALSE;	                                
      Q_S0170_CLOSE_HIST_FILE(->Z_SEVENTH_HIST_FILE);
      ZQ_NEW_STATE  := ZE_W_HIS_FILE_CLOSE_7;		
      
/*BEGIN : CR20/301337-RFI4448 FILE FORMAT*/
  (ZE_W_HIS_FILE_CLOSE_11):
  /*****************************************************************/
      Z_ELEVENTH_HIST_FILE.ZB_IS_OPEN := FALSE; 
      Q_S0170_CLOSE_HIST_FILE(->Z_THIRTEENTH_HIST_FILE);
      ZQ_NEW_STATE  := ZE_W_HIS_FILE_CLOSE_13;	  
/*END : CR20/301337*/     	
  (ZE_W_HIS_FILE_CLOSE_18):                                                      
  /*****************************************************************/          
      Z_18TH_HIST_FILE.ZB_IS_OPEN := FALSE;	                                
      Q_S0170_CLOSE_HIST_FILE(->Z_ELEVENTH_HIST_FILE);                           
      ZQ_NEW_STATE  := ZE_W_HIS_FILE_CLOSE_11;
/*END CRI #01443513.01*/
  (ZE_W_HIS_FILE_CLOSE):
  /*****************************************************************/
     Z_HISTORY_FILE.ZB_IS_OPEN := FALSE;
     Q_S0300_SEND_PM_CC_RES_CNF(Z_RESULT_FILE.ZB_ERROR);
     ZQ_NEW_STATE              := ZE_IDLE;

   ELSE
   /*****************************************************************/

      /* UNEXPECTED STATE   */
      Q_S0040_GEN_ERR(M_ERT0050_0808_MSG_UNEXPEC,
                      M_ERC6_USER_REC,
                      NUM(ZF_EVENT),
                      NUM(ZE_W_HIS_FILE_CLOSE),
                      H'81);
   
    ESAC;

ZF_STATE := ZQ_NEW_STATE;

END Q_S0370_STATE_MACHINE;

/*BEGIN : CR20/301337-RFI4448 FILE FORMAT*/
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0991_OPEN_11TH_HIS                               */
/*                                                                    */
/*     PROGRAMMER:                                                    */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE:                                                 */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                                                                    */
/*     RETURNED VALUE:                                                */
/*                                                                    */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                                                                    */
/*     CALLED FROM:                                                   */
/*                                                                    */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0992_OPEN_11TH_HIS : PROC ();

DCL ZQ_HIS_NUM     INT;

Z_TRACE := H'0150;

ZQ_HIS_NUM := Q_S0870_HIS_FILE_NUM(R_PM_ACT.D_MEAS_TYP);

DO WITH Z_ELEVENTH_HIST_FILE;
   DO WITH ZB_FCB_INFO;
      B_FILE_NO       := ZS_FILE_NBR(ZQ_HIS_NUM+29);
      B_FILE_NAME     := ZS_FILE_NAME(ZQ_HIS_NUM+29);
      B_PCS           := 1 + ZS_BASE_PCS;
      B_FILE_TYPE     := E_HPMF;
    /*FR36/270318 CORRECTION*/ 
      B_TWIN_FILE     := FALSE;
    /*FR36/270318 CORRECTION*/ 
      B_ACCESS        := E_READ_REQ; /* IT MUST EXIST */
      B_TIMEOUT       := 60;  /*  6  SECONDS */
      B_REC_SIZE      := ZS_HPMR_SIZE;
#ifdef MXELITE
      B_DRIVE_NO      := E_SSD_C;
#else
      B_DRIVE_NO      := E_SYS_NON_PREF;
#endif
   OD; /* WITH ZB_FCB_INFO */

   TRANSMIT_BASIC_MSG
       0121_OPEN_FILE(-> ZB_FCB_INFO,
                      Z_OWN_PROC_ID);

   Z_IO_TIMER := Q_S0050_START_TIMER(ZS_DISK_TIMEOUT,
                                     Z_TRACE,
                                     ZS_0121_OPEN_FILE);
OD;

END Q_S0992_OPEN_11TH_HIS;

/*END : CR20/301337*/
/*Begin DCTPD01288924 */
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0991_OPEN_11TH_HIS                               */
/*                                                                    */
/*     PROGRAMMER:                                                    */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE:                                                 */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                                                                    */
/*     RETURNED VALUE:                                                */
/*                                                                    */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                                                                    */
/*     CALLED FROM:                                                   */
/*                                                                    */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0993_OPEN_17TH_HIS : PROC ();

DCL ZQ_HIS_NUM     INT;

Z_TRACE := H'0150;

ZQ_HIS_NUM := Q_S0870_HIS_FILE_NUM(R_PM_ACT.D_MEAS_TYP);

DO WITH Z_SEVENTEENTH_HIST_FILE;
   DO WITH ZB_FCB_INFO;
      B_FILE_NO       := ZS_FILE_NBR(ZQ_HIS_NUM+37);
      B_FILE_NAME     := ZS_FILE_NAME(ZQ_HIS_NUM+37);
      B_PCS           := 1 + ZS_BASE_PCS;
      B_FILE_TYPE     := E_HPMF;
    /*FR36/270318 CORRECTION*/ 
      B_TWIN_FILE     := FALSE;
    /*FR36/270318 CORRECTION*/ 
      B_ACCESS        := E_READ_REQ; /* IT MUST EXIST */
      B_TIMEOUT       := 60;  /*  6  SECONDS */
      B_REC_SIZE      := ZS_HPMR_SIZE;
#ifdef MXELITE
      B_DRIVE_NO      := E_SSD_C;
#else
      B_DRIVE_NO      := E_SYS_NON_PREF;
#endif
   OD; /* WITH ZB_FCB_INFO */

   TRANSMIT_BASIC_MSG
       0121_OPEN_FILE(-> ZB_FCB_INFO,
                      Z_OWN_PROC_ID);

   Z_IO_TIMER := Q_S0050_START_TIMER(ZS_DISK_TIMEOUT,
                                     Z_TRACE,
                                     ZS_0121_OPEN_FILE);
OD;

END Q_S0993_OPEN_17TH_HIS;
/*End DCTPD01288924 */
/*BEGIN:ADD-WIPRO-B10-MR1-CHANGE */
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0991_OPEN_7TH_HIS                                */
/*                                                                    */
/*     PROGRAMMER: SHAILESH                                           */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE:                                                 */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                                                                    */
/*     RETURNED VALUE:                                                */
/*                                                                    */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                                                                    */
/*     CALLED FROM:                                                   */
/*                                                                    */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0991_OPEN_7TH_HIS : PROC ();

DCL ZQ_HIS_NUM     INT;

Z_TRACE := H'0150;

ZQ_HIS_NUM := Q_S0870_HIS_FILE_NUM(R_PM_ACT.D_MEAS_TYP);

DO WITH Z_SEVENTH_HIST_FILE;
   DO WITH ZB_FCB_INFO;
      B_FILE_NO       := ZS_FILE_NBR(ZQ_HIS_NUM+16);
      B_FILE_NAME     := ZS_FILE_NAME(ZQ_HIS_NUM+16);
      B_PCS           := 1 + ZS_BASE_PCS;
      B_FILE_TYPE     := E_HPMF;
    /*FR36/270318 CORRECTION*/ 
      B_TWIN_FILE     := FALSE;
    /*FR36/270318 CORRECTION*/ 
      B_ACCESS        := E_READ_REQ; /* IT MUST EXIST */
      B_TIMEOUT       := 60;  /*  6  SECONDS */
      B_REC_SIZE      := ZS_HPMR_SIZE;
#ifdef MXELITE
      B_DRIVE_NO      := E_SSD_C;
#else
      B_DRIVE_NO      := E_SYS_NON_PREF;
#endif
   OD; /* WITH ZB_FCB_INFO */

   TRANSMIT_BASIC_MSG
       0121_OPEN_FILE(-> ZB_FCB_INFO,
                      Z_OWN_PROC_ID);

   Z_IO_TIMER := Q_S0050_START_TIMER(ZS_DISK_TIMEOUT,
                                     Z_TRACE,
                                     ZS_0121_OPEN_FILE);
OD;

END Q_S0991_OPEN_7TH_HIS;

/*BEGIN: CR20/313054 */
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0993_OPEN_13TH_HIS                               */
/*                                                                    */
/*     PROGRAMMER: BALA                                               */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE:                                                 */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                                                                    */
/*     RETURNED VALUE:                                                */
/*                                                                    */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                                                                    */
/*     CALLED FROM:                                                   */
/*                                                                    */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0993_OPEN_13TH_HIS : PROC ();

DCL ZQ_HIS_NUM     INT;

Z_TRACE := H'0150;

ZQ_HIS_NUM := Q_S0870_HIS_FILE_NUM(R_PM_ACT.D_MEAS_TYP);

DO WITH Z_THIRTEENTH_HIST_FILE;
   DO WITH ZB_FCB_INFO;
      B_FILE_NO       := ZS_FILE_NBR(ZQ_HIS_NUM+33);
      B_FILE_NAME     := ZS_FILE_NAME(ZQ_HIS_NUM+33);
      B_PCS           := 1 + ZS_BASE_PCS;
      B_FILE_TYPE     := E_HPMF;     
      B_TWIN_FILE     := FALSE;     
      B_ACCESS        := E_READ_REQ; /* IT MUST EXIST */
      B_TIMEOUT       := 60;  /*  6  SECONDS */
      B_REC_SIZE      := ZS_HPMR_SIZE;
#ifdef MXELITE
      B_DRIVE_NO      := E_SSD_C;
#else
      B_DRIVE_NO      := E_SYS_NON_PREF;
#endif
   OD; /* WITH ZB_FCB_INFO */

   TRANSMIT_BASIC_MSG
       0121_OPEN_FILE(-> ZB_FCB_INFO,
                      Z_OWN_PROC_ID);

   Z_IO_TIMER := Q_S0050_START_TIMER(ZS_DISK_TIMEOUT,
                                     Z_TRACE,
                                     ZS_0121_OPEN_FILE);
OD;

END Q_S0993_OPEN_13TH_HIS;
/*END : CR20/313054 */

/*begin CR1238146 A-GPS*/
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0994_OPEN_18TH_HIS                               */
/*                                                                    */
/*     PROGRAMMER:                                                    */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE:                                                 */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                                                                    */
/*     RETURNED VALUE:                                                */
/*                                                                    */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                                                                    */
/*     CALLED FROM:                                                   */
/*                                                                    */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0994_OPEN_18TH_HIS : PROC ();

DCL ZQ_HIS_NUM     INT;

Z_TRACE := H'0150;

ZQ_HIS_NUM := Q_S0870_HIS_FILE_NUM(R_PM_ACT.D_MEAS_TYP);

DO WITH Z_18TH_HIST_FILE;
   DO WITH ZB_FCB_INFO;
      B_FILE_NO       := ZS_FILE_NBR(ZQ_HIS_NUM+38);
      B_FILE_NAME     := ZS_FILE_NAME(ZQ_HIS_NUM+38);
      B_PCS           := 1 + ZS_BASE_PCS;
      B_FILE_TYPE     := E_HPMF;
    /*FR36/270318 CORRECTION*/ 
      B_TWIN_FILE     := FALSE;
    /*FR36/270318 CORRECTION*/ 
      B_ACCESS        := E_READ_REQ; /* IT MUST EXIST */
      B_TIMEOUT       := 60;  /*  6  SECONDS */
      B_REC_SIZE      := ZS_HPMR_SIZE;
#ifdef MXELITE
      B_DRIVE_NO      := E_SSD_C;
#else
      B_DRIVE_NO      := E_SYS_NON_PREF;
#endif
   OD; /* WITH ZB_FCB_INFO */

   TRANSMIT_BASIC_MSG
       0121_OPEN_FILE(-> ZB_FCB_INFO,
                      Z_OWN_PROC_ID);

   Z_IO_TIMER := Q_S0050_START_TIMER(ZS_DISK_TIMEOUT,
                                     Z_TRACE,
                                     ZS_0121_OPEN_FILE);
OD;

END Q_S0994_OPEN_18TH_HIS;
/*end CR1238146 A-GPS*/

/*BEGIN :ADD-WIPRO-B10-MR1-CHANGE */
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0380_HANDLE_TIME_OUT                             */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (ADC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 96/01/18                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION: ON EXPIRY OF A TIMER THIS PROCEDURE    */
/*       FIND THE SOURCE OF THE TIMER FROM THE TIMER QUEUE AND        */
/*       INITIATES ANY ACTION THAT IS NECESSARY.                      */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_EVENT ZM_SCENARIO_EVENT LOC                */
/*     RETURNED VALUE:                                                */
/*                      ZM_MSG_STATE                                  */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0240_CCRH_IS_ACTIVE                        */
/*     CALLED FROM:                                                   */
/*                      Q_S0000_MAIN_CCRH                             */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0380_HANDLE_TIME_OUT: PROC(ZF_EVENT     ZM_SCENARIO_EVENT LOC,
                              ZF_PROC_ID   M_PROCESS_ID LOC)
                        RETURNS (ZM_MSG_STATE);

DCL ZQ_RC ZM_MSG_STATE;

Z_TRACE := H'0380;

ZQ_RC:=ZE_PROCESSED;

DO WITH Z_MSG_BUF_PTR->T_MSG_6836_TIME_OUT.T_B_ELMT_STRUCT;
   IF B_TCB_ID = Z_WAIT_INIT_TCB
      THEN
      IF Q_S0240_CCRH_IS_ACTIVE()
         THEN
         /* START PROCESSING THE RESULT FILES */
         ZF_EVENT:= ZE_EV_START;
         Z_WAIT_INIT_TCB:=M_TIMER_IDENT_NULL;
      FI;

   ELSIF B_TCB_ID = Z_IO_TIMER
      THEN
      ZQ_RC      := ZE_TO_BE_PROCESSED;
      ZF_EVENT   := ZE_EV_FILE_ERROR;
      ZF_PROC_ID := M_PROCESS_ID_NULL;
       /*ADDED FOR FR20/206272 Shailesh*/
      Z_IO_TIMER := M_TIMER_IDENT_NULL;
       /*ADDED FOR FR20/206272 Shailesh*/

   ELSE
         ZF_EVENT:=ZE_EV_NOTHING;
   FI;

   /* A TIMER HAS EXPIRED SO RELEASE IT */
   /*RELEASE_TIMER(B_TCB_ID);*/
   /*WIPRO:B10_MX_MR1 RT TRACE*/

/* Comnented for FR36/284387 */

/*             TRACEINFO :='TIMER EXPIRY (%d)               ';
             TRC_BSC_PM2(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCRH),
              TRACEID(NORM),
              TRACEINFO,
              LONG_INT((B_TCB_ID)),
              LONG_INT((0)),
              LONG_INT((0)));
*/

/* Comnented for FR36/284387 */

   RELEASE_TIMER(B_TCB_ID);
/*END WIPRO:B10_MX_MR1 RT TRACE*/


OD;

RETURN ZQ_RC;

END Q_S0380_HANDLE_TIME_OUT;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0400_GET_ADJ_CELL_IDXS_SERVIN                    */
/*                                                                    */
/*     PROGRAMMER: DENIZ BELGIN                                       */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/03/06                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*       THIS PROCEDURE FILLS IN Z_ADJ_ST WITH THE INFORMATION OF     */
/*       ALL ADJACENT CELLS TO THE SERVING ONE GIVEN AS THE           */
/*       PARAMETER.                                                   */
/*       THIS PORCEDURE WILL BE USED FOR MEAS 26 RESULT               */
/*       FILE PRODUCTION.                                             */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_THE_CELL_IDX M_CELL_IDX                    */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0070_WAIT_TIME                             */
/*     CALLED FROM:                                                   */
/*                      Q_S0660_26_MAKE_RES_FILE_26                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      GET     R_MAP_ADJ                             */
/*                      GET     R_PAR_ADJ                             */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0400_GET_ADJ_CELL_IDXS_SERVIN: PROC( ZF_THE_CELL_IDX M_CELL_IDX );

DCL ZQ_I INT;

Z_TRACE := H'0400;

DO WITH Z_ADJ_ST;

   /* INITIALIZE THE ADJACENCY INFORMATION STRUCTURE */
   ZB_ADJ_LAST := 0;
   ZB_THE_CELL_IDX := ZF_THE_CELL_IDX;
   DO FOR ZQ_I := 1 TO ZS_MAX_ADJ_CELLS;
      ZB_ADJ_CELLS(ZQ_I).ZB_CI  := ZS_NULL_CI;
      ZB_ADJ_CELLS(ZQ_I).ZB_LAC := ZS_NULL_LAC;
      ZB_ADJ_FLAGS(ZQ_I)        := TRUE;
   OD;

   /* FIND INFO OF THE FIRST NEIGHBOURING CELL */
   GET R_MAP_ADJ WHERE (D_CELL_IDX = ZF_THE_CELL_IDX );

   /* RETRY UNTIL THE TUPLE IS FREE */
   DO WHILE DB_PARMS.B_DB_STATUS = M_DB_TUPHELD;
      Q_S0070_WAIT_TIME(ZS_WAIT_TIME_DB);

      GET R_MAP_ADJ WHERE (D_CELL_IDX = ZF_THE_CELL_IDX );

   OD;

   DO WHILE DB_PARMS.B_DB_STATUS = M_DB_SUCCESS;

      /* TO REACH THE NEIGHBOURING CELL  */
      /* IDX FROM NEIGHBOURING CELL INFO */

      IF R_MAP_ADJ.D_ADJ_IDX /= 0 THEN

         GET R_PAR_ADJ WHERE (D_ADJ_IDX = R_MAP_ADJ.D_ADJ_IDX );
         /* RETRY UNTIL THE TUPLE IS FREE */
         DO WHILE DB_PARMS.B_DB_STATUS = M_DB_TUPHELD;
            Q_S0070_WAIT_TIME(ZS_WAIT_TIME_DB);

            GET R_PAR_ADJ WHERE (D_ADJ_IDX = R_MAP_ADJ.D_ADJ_IDX );
         OD;

         IF DB_PARMS.B_DB_STATUS = M_DB_SUCCESS AND
            R_PAR_ADJ.D_CY_ID  /= ZS_NULL_CI AND
            R_PAR_ADJ.D_CY_LAC /= ZS_NULL_LAC
            THEN

            ZB_ADJ_LAST := ZB_ADJ_LAST + 1;
            ZB_ADJ_CELLS(ZB_ADJ_LAST).ZB_CI  := R_PAR_ADJ.D_CY_ID;
            ZB_ADJ_CELLS(ZB_ADJ_LAST).ZB_LAC := R_PAR_ADJ.D_CY_LAC;
            ZB_ADJ_FLAGS( ZB_ADJ_LAST ) := FALSE;

         FI;
      FI;
      /* NEXT NEIGHBOURING CELL INFO */
      GET R_MAP_ADJ WHERE (D_CELL_IDX = ZF_THE_CELL_IDX ) IN SEQ;

      /* RETRY UNTIL THE TUPLE IS FREE */
      DO WHILE DB_PARMS.B_DB_STATUS = M_DB_TUPHELD;

         Q_S0070_WAIT_TIME(ZS_WAIT_TIME_DB);

         GET R_MAP_ADJ WHERE (D_CELL_IDX = ZF_THE_CELL_IDX ) IN SEQ;

      OD;
   OD;
OD;

END Q_S0400_GET_ADJ_CELL_IDXS_SERVIN;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0410_MARK_ADJ_LAC_CI                             */
/*                                                                    */
/*     PROGRAMMER: DENIZ BELGIN                                       */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/03/06                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*       THIS PROCEDURE SETS THE FLAG OF CELL_IDX GIVEN AS A          */
/*       PARAMETER INDICATING THAT THIS CELL_IDX HAS BEEN             */
/*       INCLUDED IN THE RESULT FILE                                  */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_CELL_IDX M_CELL_IDX                        */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0660_26_MAKE_RES_FILE_26                   */
/*                      Q_S0670_27_MAKE_RES_FILE_27                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0410_MARK_ADJ_LAC_CI: PROC(ZF_LAC_CI M_LAC_CI);

DCL ZQ_I     INT;
DCL ZQ_FOUND BOOL;

Z_TRACE := H'0410;

ZQ_FOUND := FALSE;

DO FOR ZQ_I := 1 TO ZS_MAX_ADJ_CELLS WHILE ZQ_FOUND = FALSE;
   IF Z_ADJ_ST.ZB_ADJ_CELLS(ZQ_I).ZB_CI  = ZF_LAC_CI.ZB_CI AND
      Z_ADJ_ST.ZB_ADJ_CELLS(ZQ_I).ZB_LAC = ZF_LAC_CI.ZB_LAC
      THEN
      Z_ADJ_ST.ZB_ADJ_FLAGS ( ZQ_I ) := TRUE;
      ZQ_FOUND := TRUE;
   FI;
OD;

END Q_S0410_MARK_ADJ_LAC_CI;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0420_GET_ADJ_CELLIDX_UNMARKED                    */
/*                                                                    */
/*     PROGRAMMER: DENIZ BELGIN                                       */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/03/06                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*       THIS PROCEDURE RETURNS THE UNMARKED CELL_IDX                 */
/*       HERE UNMARKED MEANS "THE FLAGS IN Z_ADJ_ST IS FALSE" WHICH   */
/*       SIGNIFIES THAT "THIS NEIGHBOURING CELL_IDX" HAS NOT BEEN     */
/*       INCLUDED IN THE RESULT FILE YET. ( FOR MEAS 26/27 )          */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_I INT                                      */
/*     RETURNED VALUE:                                                */
/*                      M_CELL_IDX                                    */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0660_26_MAKE_RES_FILE_26                   */
/*                      Q_S0670_27_MAKE_RES_FILE_27                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0420_GET_ADJ_CELLIDX_UNMARKED: PROC (ZF_I INT) RETURNS
                                       (M_LAC_CI);

DCL ZQ_UNMARKED_CI_LAC M_LAC_CI;

Z_TRACE := H'0420;

ZQ_UNMARKED_CI_LAC.ZB_CI  := ZS_NULL_CI;
ZQ_UNMARKED_CI_LAC.ZB_LAC := ZS_NULL_LAC;

DO WITH Z_ADJ_ST;

   IF NOT ZB_ADJ_FLAGS ( ZF_I ) THEN
      ZQ_UNMARKED_CI_LAC.ZB_CI := ZB_ADJ_CELLS( ZF_I ).ZB_CI;
      ZQ_UNMARKED_CI_LAC.ZB_LAC := ZB_ADJ_CELLS( ZF_I ).ZB_LAC;
   FI;
OD;

RETURN( ZQ_UNMARKED_CI_LAC );

END Q_S0420_GET_ADJ_CELLIDX_UNMARKED;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0430_ONE_ASCII                                   */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 96/11/07                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_BYTE M_BYTE                                */
/*     RETURNED VALUE:                                                */
/*                      M_ONE_ASCII                                   */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0460_CONVERT_TIME_ASCII                    */
/*                      Q_S0470_PM_TIME_TO_GT_TIME                    */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0430_ONE_ASCII: PROC(ZF_BYTE M_BYTE)
                   RETURNS (M_ONE_ASCII);

DCL  ZQ_ASC_VAL       M_ONE_ASCII;

Z_TRACE := H'0430;

ZQ_ASC_VAL := ZS_ONE_ZERO + (ZF_BYTE REM 10);

RETURN ZQ_ASC_VAL;

END Q_S0430_ONE_ASCII;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0440_TWO_ASCII                                   */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 96/11/07                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_BYTE M_BYTE LOC                            */
/*     RETURNED VALUE:                                                */
/*                      M_TWO_ASCII                                   */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0460_CONVERT_TIME_ASCII                    */
/*                      Q_S0470_PM_TIME_TO_GT_TIME                    */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0440_TWO_ASCII : PROC(ZF_BYTE M_BYTE LOC)
                    RETURNS (M_TWO_ASCII);

SYN ZS_TWO_ZEROS   M_TWO_ASCII = (:(1:2):H'30:);

DCL  ZQ_ASC_VAL   M_TWO_ASCII;
DCL  ZQ_I         RANGE(1:2);    /* DIGIT COUNTER  */

Z_TRACE := H'0440;

ZQ_ASC_VAL := ZS_TWO_ZEROS;
DO FOR ZQ_I := 2 DOWN TO 1    WHILE ZF_BYTE /= 0;
   ZQ_ASC_VAL(ZQ_I) := ZQ_ASC_VAL(ZQ_I) + (ZF_BYTE REM 10);
   ZF_BYTE   := ZF_BYTE/10;
OD;

RETURN ZQ_ASC_VAL;

END Q_S0440_TWO_ASCII;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0450_FOUR_ASCII                                  */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 96/11/07                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_INTEGER INT LOC                            */
/*     RETURNED VALUE:                                                */
/*                      M_FOUR_ASCII                                  */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0460_CONVERT_TIME_ASCII                    */
/*                      Q_S0470_PM_TIME_TO_GT_TIME                    */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0450_FOUR_ASCII : PROC(ZF_INTEGER INT LOC)
                     RETURNS (M_FOUR_ASCII);

SYN ZS_FOUR_ZEROS    M_FOUR_ASCII  = (:(1:4):H'30:);

DCL  ZQ_ASC_VAL      M_FOUR_ASCII;
DCL  ZQ_I            RANGE(1:4);    /* DIGIT COUNTER    */

Z_TRACE := H'0450;

ZQ_ASC_VAL := ZS_FOUR_ZEROS;
DO FOR ZQ_I := 4 DOWN TO 1   WHILE ZF_INTEGER /= 0;
   ZQ_ASC_VAL(ZQ_I) := ZQ_ASC_VAL(ZQ_I) + (ZF_INTEGER REM 10);
   ZF_INTEGER   := ZF_INTEGER / 10;
OD;

RETURN ZQ_ASC_VAL;

END Q_S0450_FOUR_ASCII;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0460_CONVERT_TIME_ASCII                          */
/*                                                                    */
/*     PROGRAMMER: JP QUINN                                           */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 96/11/04                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_TIME M_TIME LOC,                           */
/*                      ZF_DATE M_DATE LOC                            */
/*     RETURNED VALUE:                                                */
/*                      M_GEN_TIME                                    */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0450_FOUR_ASCII                            */
/*                      Q_S0440_TWO_ASCII                             */
/*                      Q_S0430_ONE_ASCII                             */
/*     CALLED FROM:                                                   */
/*                      Q_S0500_FILL_REC_HEAD                         */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0460_CONVERT_TIME_ASCII : PROC(ZF_TIME M_TIME LOC,
                                  ZF_DATE M_DATE LOC)
                     RETURNS (M_GEN_TIME);

DCL ZQ_GEN_TIME M_GEN_TIME;

Z_TRACE := H'0460;

DO WITH ZQ_GEN_TIME;
   DO WITH ZF_DATE;
      B_GT_YEAR  := Q_S0450_FOUR_ASCII(B_YEAR);
      B_GT_MONTH := Q_S0440_TWO_ASCII(B_MOUNTH);
      B_GT_DAY   := Q_S0440_TWO_ASCII(B_DAY);
   OD;
   DO WITH ZF_TIME;
      B_GT_HOUR   := Q_S0440_TWO_ASCII(B_HOURS);
      B_GT_MINUTE := Q_S0440_TWO_ASCII(B_MINUTES);
      B_GT_SECOND := Q_S0440_TWO_ASCII(B_SECONDS);
      B_GT_POINT  := '.';
      B_GT_TENTHS := Q_S0430_ONE_ASCII(B_HUNDRED_SEC/10);
   OD;
OD; /* ZQ_GEN_TIME */

RETURN (ZQ_GEN_TIME);

END Q_S0460_CONVERT_TIME_ASCII;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0470_PM_TIME_TO_GT_TIME                          */
/*                                                                    */
/*     PROGRAMMER: JP QUINN                                           */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 96/11/04                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*      CONVERT THE PM SCHED TIME TO THE M_GET_TIME FORMAT.           */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_PM_TIME M_PM_SCHED_TIME LOC                */
/*     RETURNED VALUE:                                                */
/*                      M_GEN_TIME                                    */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0450_FOUR_ASCII                            */
/*                      Q_S0440_TWO_ASCII                             */
/*                      Q_S0430_ONE_ASCII                             */
/*     CALLED FROM:                                                   */
/*                      Q_S0340_CALC_END_COLL_TI                      */
/*                      Q_S0350_ADD_COLL_PERIOD                       */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0470_PM_TIME_TO_GT_TIME : PROC(ZF_PM_TIME M_PM_SCHED_TIME LOC)
                             RETURNS (M_GEN_TIME);

DCL ZQ_GEN_TIME M_GEN_TIME;

Z_TRACE := H'0470;

DO WITH ZQ_GEN_TIME;
   DO WITH ZF_PM_TIME;
      B_GT_YEAR  := Q_S0450_FOUR_ASCII(B_SC_YEAR);
      B_GT_MONTH := Q_S0440_TWO_ASCII(B_SC_MONTH);
      B_GT_DAY   := Q_S0440_TWO_ASCII(B_SC_DAY);

      B_GT_HOUR   := Q_S0440_TWO_ASCII(B_SC_HOUR);
      B_GT_MINUTE := Q_S0440_TWO_ASCII(B_SC_MINUTE);

      /* THERE IS NO INTEREST IN SEC AND TENTHS SO ZERO THESE */
      B_GT_SECOND := Q_S0440_TWO_ASCII(0);
      B_GT_POINT  := '.';
      B_GT_TENTHS := Q_S0430_ONE_ASCII(0);
   OD;
OD; /* ZQ_GEN_TIME */

RETURN (ZQ_GEN_TIME);

END Q_S0470_PM_TIME_TO_GT_TIME;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0480_AVRG_FOR_REP_PERIOD                         */
/*                                                                    */
/*     PROGRAMMER: A. KILBOURNE                                       */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 13/08/97                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*        THIS PROCEDURE DIVIDES THE INTEGER COUNTER VALUE BY THE     */
/*        NUMBER OF REPORTING PERIODS TO GIVE AN AVERAGE VALUE.       */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_CNTR INT                                   */
/*     RETURNED VALUE:                                                */
/*                      INT                                           */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0740_100_MAKE_RES_FILE_100                 */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0480_AVRG_FOR_REP_PERIOD: PROC(ZF_CNTR M_STA_DPVAL)
                             RETURNS(M_STA_DPVAL);

DCL ZQ_DIV       INT;
DCL ZQ_RD_VAL    M_STA_DPVAL;
DCL ZQ_REM       INT;

Z_TRACE := H'0480;

IF Z_CALC_REPORTING_PERIOD /= 0 THEN

/*ZQ1G */
   IF ZF_CNTR.B_HIGH /= -1 AND ZF_CNTR.B_LOW /= -2 THEN
     IF ZF_CNTR.B_HIGH = 0
        THEN
        ZQ_RD_VAL.B_HIGH := 0;
        ZQ_RD_VAL.B_LOW := ZF_CNTR.B_LOW / Z_CALC_REPORTING_PERIOD;
        ZQ_REM  := ZF_CNTR.B_LOW REM Z_CALC_REPORTING_PERIOD;
        ZQ_DIV  := Z_CALC_REPORTING_PERIOD / 2;

        IF ZQ_REM > ZQ_DIV THEN
           ZQ_RD_VAL.B_LOW := ZQ_RD_VAL.B_LOW + 1;
        FI;
     ELSE
        ZQ_RD_VAL.B_HIGH := ZF_CNTR.B_HIGH/ Z_CALC_REPORTING_PERIOD;
        ZQ_REM  := ZF_CNTR.B_HIGH REM Z_CALC_REPORTING_PERIOD;
        ZQ_RD_VAL.B_LOW := ZF_CNTR.B_LOW/Z_CALC_REPORTING_PERIOD +
                       ((H'7FFF / Z_CALC_REPORTING_PERIOD) * ZQ_REM);
     FI;
   ELSE
     ZQ_RD_VAL.B_LOW  := ZS_FFFF;
     ZQ_RD_VAL.B_HIGH := ZS_FFFF;
   FI;
ELSE
   ZQ_RD_VAL.B_LOW  := 0;
   ZQ_RD_VAL.B_HIGH := 0;
FI;

RETURN(ZQ_RD_VAL);

END Q_S0480_AVRG_FOR_REP_PERIOD;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0485_AVRG_EME_FOR_ACC_PERIOD                     */
/*                                                                    */
/*     PROGRAMMER: DUHITA D.                                          */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 23/08/2004                                      */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*        THIS PROCEDURE DIVIDES THE M_STA_DPVAL  COUNTER VALUE BY    */
/*        4 AS EME IS ALWAYS REPORTED OVER AN HOUR                    */
/*        TO GIVE AN AVERAGE VALUE.                                   */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_CNTR INT                                   */
/*     RETURNED VALUE:                                                */
/*                      BIN(16)                                       */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                                                                    */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

/* BEGIN: WITTS 288-WITTS 289 */
Q_S0485_AVRG_EME_FOR_ACC_PERIOD: PROC(ZF_CNTR M_STA_DPVAL)
                             RETURNS(INT);

DCL ZQ_NBR_REPORTING_PERIOD INT;
DCL ZQ_AVG_LOW    INT;
DCL ZQ_AVG_HIGH   INT;
DCL ZQ_RES        INT;
DCL ZQ_OFFSET     INT ;
DCL ZQ_NET        INT;
DCL ZQ_NET_BIN    BIT(16);
DCL ZQ_DIFF       INT;
DCL ZQ_DIFF_BIT   BIT(16);
DCL ZQ_AVG_HIGH_BIT BIT(16);
Z_TRACE := H'0485;

ZQ_NBR_REPORTING_PERIOD := 4;

   IF (ZF_CNTR.B_HIGH >= ZQ_NBR_REPORTING_PERIOD
       OR ZF_CNTR.B_HIGH < 0)
   THEN 
/*
      ZQ_RES.ZB_INT := -1;   */
      ZQ_RES := -1;
      RETURN (ZQ_RES);
   FI;

   IF ZF_CNTR.B_HIGH = 0
   THEN 
     ZQ_AVG_HIGH := 1;
   ELSIF ZF_CNTR.B_HIGH = 1
   THEN
     ZQ_AVG_HIGH := 16385;
   ELSIF ZF_CNTR.B_HIGH = 2
   THEN
   /*
     ZQ_AVG_HIGH_BIT := B'1000000000000000';
     ZQ_AVG_HIGH := B(ZQ_AVG_HIGH_BIT);  */
     ZQ_AVG_HIGH := -32767;
   ELSIF ZF_CNTR.B_HIGH = 3
   THEN
     ZQ_AVG_HIGH := -16383;
   FI;

   IF ZF_CNTR.B_LOW >= 0
   THEN
     ZQ_AVG_LOW := ZF_CNTR.B_LOW/ZQ_NBR_REPORTING_PERIOD;
   ELSE
     ZQ_AVG_LOW := (ZF_CNTR.B_LOW+32767+1)/ZQ_NBR_REPORTING_PERIOD;
     ZQ_AVG_LOW := 8192 + ZQ_AVG_LOW;
   FI;

   IF (ZQ_AVG_HIGH + ZQ_AVG_LOW - 1) < 0
   THEN
     ZQ_NET := (ZQ_AVG_HIGH + ZQ_AVG_LOW + 32767); 
 /*    ZQ_NET_BIN := A(ZQ_NET);
     ZQ_RES.ZB_BIT := B'1000000000000000' OR ZQ_NET_BIN;
                   */
     ZQ_RES := (ZQ_NET - 32767 - 1);
   ELSE
   ZQ_RES := (ZQ_AVG_HIGH + ZQ_AVG_LOW - 1);
   FI;
   RETURN(ZQ_RES);

/* END: WITTS 288-WITTS 289 */
END Q_S0485_AVRG_EME_FOR_ACC_PERIOD;


/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0490_CALCULATE_ACTUAL_REP_PER                    */
/*                                                                    */
/*     PROGRAMMER: DENIZ BELGIN                                       */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/01/31                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*        THIS PROCEDURE IS USED TO CALCULATE THE ACTUAL REPORTING    */
/*        PERIOD OF THE RESULT FILE. THIS IS NEEDED TO BE CALCULATED  */
/*        OUT OF SEVERAL REASONS.                                     */
/*                                                                    */
/*        WHAT IS MEANT BY 'ACTUAL REPORTING PERIOD' IS AS FOLLOWS    */
/*        HOW MANY COLLECTION PERIODS WERE USED TO COLLECT THE DATA   */
/*        PRESENTED WITH THE PARTICULAR RESULT FILE IN QUESTION.      */
/*        THIS MAY PROOVE TO BE VERY TRICKY.                          */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0510_MAKE_RESULT_FILE                      */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0490_CALCULATE_ACTUAL_REP_PER : PROC();

DCL ZQ_CURRENT_PERIOD       INT;
DCL ZQ_LAST_REP             INT;

Z_TRACE := H'0490;

DO WITH R_PM_ACT;

   /* MECO INCREMENTS THE CURRENT PERIOD ALWAYS; EVEN IF */
   /* JOB IS GOING TO BE STOPPED */
   ZQ_CURRENT_PERIOD := D_CURR_PER-1;

   /* MECO INCREMENTS D_LAST_REP BEFORE CCRH IS ACTIVATED */
   ZQ_LAST_REP := D_LAST_REP;

   IF D_LAST_REP /=0 AND

      /* THE FOLLOWING CONDITION RULES OUT MEASUREMENT */
      /* ON DEMAND REPORTS FOR WHICH INCREMENTATION OF */
      /* D_LAST_REP IS NOT DONE BY MECO                */

      ZQ_CURRENT_PERIOD REM D_INTV_DES.B_REP_PER = 0 THEN

      ZQ_LAST_REP := ZQ_LAST_REP - D_INTV_DES.B_REP_PER;
   FI;

   Z_CALC_REPORTING_PERIOD := ZQ_CURRENT_PERIOD - ZQ_LAST_REP;  /*felix cp number?*/

OD; /* WITH R_PM_ACT */

END Q_S0490_CALCULATE_ACTUAL_REP_PER;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0500_FILL_REC_HEAD                               */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 96/10/28                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                   THE WHOLE RESULT RECORD HEADER(COMMON TO MOST    */
/*                   MEASUREMENT TYPES) IS FILLED IN A LOCAL VARIABLE.*/
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_HEADER_PTR PTR ,                           */
/*                      ZF_REC_SEQ M_BYTE,                            */
/*                      ZF_REC_TYPE M_REC_TYPE                        */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0460_CONVERT_TIME_ASCII                    */
/*                      Q_S0350_ADD_COLL_PERIOD                       */
/*                      Q_S0340_CALC_END_COLL_TI                      */
/*                      Q_S0200_WRITE_RES_FILE                        */
/*     CALLED FROM:                                                   */
/*                      Q_S0370_STATE_MACHINE                         */
/*                      Q_S0600_08_MAKE_RES_FILE_08                   */
/*                      Q_S0610_09_MAKE_RES_FILE_09                   */
/*                      Q_S0630_18_MAKE_RES_FILE_18                   */
/*                      Q_S0720_30_MAKE_RES_FILE_30                   */
/*                      Q_S0740_100_MAKE_RES_FILE_100                 */
/*                      Q_S0820_RECORD_FULL                           */
/*                      Q_S0830_CHECK_LAST_WRITE                      */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0500_FILL_REC_HEAD: PROC (ZF_HEADER_PTR PTR ,
                             ZF_REC_SEQ    INT,
                             ZF_REC_TYPE   M_REC_TYPE);

DCL ZQ_CURRENT_PERIOD       INT;
DCL ZQ_DATE                 M_DATE;
DCL ZQ_GET_TIME             M_GET_TIME;
/*START: CRI00611721 */
DCL ZQ_FILE_SIZE            M_STA_DPVAL;
DCL ZQ_NUM_REC		    ZM_INT_TO_LN_INT;
/*END: CRI00611721 */

Z_TRACE := H'0500;

/*START: CRI00611721 */
ZQ_NUM_REC.ZB_LONG_INT := 0L;
/*END: CRI00611721 */

DO WITH ZF_HEADER_PTR-> M_SYS_REC_HEAD;
   B_REC_SEQ_NBR := ZF_REC_SEQ;
   B_FILE_TYPE   := E_GPMF;
   B_REC_TYPE    := ZF_REC_TYPE;

   CASE ZF_REC_TYPE OF

    (E_PGHR) :

      /*  FILL THE MAIN HEADER   */
      B_HEADER   := ZS_PM_HEADER_SIZE;
      B_REC_SEQ_NBR := 0; /* ALWAYS ZERO FOR THE FIRST PART */
      B_REC_TYPE := E_PGHR;

      P_YS8RAA_S020_GET_TIME(ZQ_GET_TIME);

      P_YS8RAA_S050_GET_DATE(ZQ_DATE);

      DO WITH Z_RESULT_FILE;
        /* MODIFIED FOR CR241594 MERGE FROM B11 G2 */
        /* M_PM_HEADER_RECORD ILL BE USED */
        /*ADDED FOR M_BSS_PH_VERSION ISSUE*/
        DO WITH ZB_TABLE_PTR -> M_PM_HEADER_RECORD;
        /*ADDED FOR M_BSS_PH_VERSION ISSUE*/
          DO WITH B_REC_HEAD;
            /* BEGIN  DELETE-WIPRO-B9-P1-CHANGE */
            /* B_BSS_PHASE  := M_BSS_PH_VERSION_RELEASE_81300; */
            /* END  DELETE-WIPRO-B9-P1-CHANGE */
            /* BEGIN: ADD-WIPRO-B9-P1-CHANGE */
        /*ADDED FOR M_BSS_PH_VERSION ISSUE*/
            B_BSS_PHASE  := M_BSS_CURRENT_PH_VERSION;
        /*ADDED FOR M_BSS_PH_VERSION ISSUE*/
            /* END: ADD-WIPRO-B9-P1-CHANGE */
            /*BEGIN:ADDED FOR CR241594*/
            B_BSS_RELEASE := M_BSC_CURRENT_RELEASE;
            B_FILLER     := H'FF ;
            /*END :ADDED FOR CR241594*/
            B_OBJ_CLASS  := M_ATT_MEAS;
            B_OBJ_INST   := R_PM_ACT.D_MEAS_ID;
            B_FILE_CREAT := Q_S0460_CONVERT_TIME_ASCII(
                                      ZQ_GET_TIME.B_TIME,
                                      ZQ_DATE);
             B_FILE_SIZE :=Q_S0505_CALCULATE_FILE_SIZE(
                             ZB_FCB_INFO.B_NO_REC_IN_FILE);

            B_NBR_OF_REC:=ZB_FCB_INFO.B_NO_REC_IN_FILE;

            B_THR_ACH   := ZS_FFFF;
            B_THR_RTS   := H'FF;

            B_MEAS_TYPE := NUM(ZB_MEAS_TYPE);

            /* CALCULATE THE TIME STARTING FOR THIS REPORT BASED
             * ON THE NUMBER OF QUARTERS AND THE START AND STOP
             * TIMES INTEH DATABASE.
             */

            /* THE ADD COLL PERIOD CALLINGS HERE MAY PROOVE TO BE */
            /* CLUMSY FOR LONG JOBS... THIS MUST BE CONSIDERED    */
            /* FOR THE FUTURE PCS S                               */

            DO WITH R_PM_ACT;

              /* MECO INCREMENTS THE CURRENT PERIOD ALWAYS; EVEN IF */
              /* JOB IS GOING TO BE STOPPED */

              ZQ_CURRENT_PERIOD := D_CURR_PER-1;

              B_BEG_COLL_TIME:=Q_S0350_ADD_COLL_PERIOD
                                  (D_INTV_DES.B_START_TIME,
                                   ZQ_CURRENT_PERIOD -
                                   Z_CALC_REPORTING_PERIOD );

              B_END_COLL_TIME:=Q_S0340_CALC_END_COLL_TI();

            OD; /* WITH R_PM_ACT */
          OD; /* WITH B_REC_HEAD */
        OD; /* WITH M_PM_HEADER_RECORD */
      OD; /* WITH Z_RESULT_FILE */

    /* WRITE ONE RECORD TO THE FIRST LOCATION    PGHR */
    /*START: CRI00611721 */
    /*Q_S0200_WRITE_RES_FILE(1, 0);*/
    Q_S0200_WRITE_RES_FILE(1, 0L);
    /*END: CRI00611721 */ 

    /* SINCE THE ABOVE WRITEIS ACTUALLY A MODIFY THE ZB_TOT_RECS */
    /* COUNTER MUST BE ADJUSTED BY DECREMENTATION...             */

    /*START: CRI00611721 */
    /*Z_RESULT_FILE.ZB_TOT_RECS := Z_RESULT_FILE.ZB_TOT_RECS - 1;*/
    Z_RESULT_FILE.ZB_TOT_RECS.ZB_LONG_INT := 
			Z_RESULT_FILE.ZB_TOT_RECS.ZB_LONG_INT - 1L;
    /*END: CRI00611721 */

    ELSE
    /******/

      /*  FILL THE RECORD INTERMEDIATE RESULTS HEADER  */
      B_HEADER   := SIZE(M_SYS_REC_HEAD);
      B_REC_TYPE := E_GPMR;

  ESAC;

OD;

END Q_S0500_FILL_REC_HEAD;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0505_CALCULATE_FILE_SIZE                         */
/*                                                                    */
/*     PROGRAMMER: DENIZ BELGIN                                       */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/01/31                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*        THIS PROCEDURE IS USED TO CALCULATE THE FILE SIZE           */
/*        WHICH IS STORED IN TWO INTS                                 */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0510_MAKE_RESULT_FILE                      */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0505_CALCULATE_FILE_SIZE : PROC(ZF_NUM_RECS INT)
                               RETURNS (M_STA_DPVAL);

DCL ZQ_SIZE                   M_STA_DPVAL;
DCL ZQ_MAX_RES_RECS_PER_INT   INT;

ZQ_MAX_RES_RECS_PER_INT := 256;
/*EXISTING
ZQ_SIZE.B_LOW := (ZF_NUM_RECS REM ZQ_MAX_RES_RECS_PER_INT)
                  *ZS_RES_REC_SIZE;
ZQ_SIZE.B_HIGH := (ZF_NUM_RECS/ZQ_MAX_RES_RECS_PER_INT);
*/
ZQ_SIZE.B_LOW := (ZF_NUM_RECS REM ZQ_MAX_RES_RECS_PER_INT)
                  *ZS_RES_REC_SIZE;
ZQ_SIZE.B_HIGH := (ZF_NUM_RECS/ZQ_MAX_RES_RECS_PER_INT);
RETURN (ZQ_SIZE);

END Q_S0505_CALCULATE_FILE_SIZE;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0510_MAKE_RESULT_FILE                            */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY: DUHITA D      DATE: 03/05/2004    */
/*                                                                    */
/*     CREATION DATE: 96/11/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                 THE RESULT FILE FOR THE GIVEN MEASUREMENT TYPE IS  */
/*                 FILLED WITH DATA FROM THE HISTORY FILE.            */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0490_CALCULATE_ACTUAL_REP_PER              */
/*                      Q_S0520_01_MAKE_RES_FILE_01                   */
/*                      Q_S0530_02_MAKE_RES_FILE_02                   */
/*                      Q_S0540_03_MAKE_RES_FILE_03                   */
/*                      Q_S0550_04_MAKE_RES_FILE_04                   */
/*                      Q_S0560_05_MAKE_RES_FILE_05                   */
/*                      Q_S0570_06_MAKE_RES_FILE_06                   */
/*                      Q_S0590_07_MAKE_RES_FILE_07                   */
/*                      Q_S0600_08_MAKE_RES_FILE_08                   */
/*                      Q_S0610_09_MAKE_RES_FILE_09                   */
/*                      Q_S0630_18_MAKE_RES_FILE_18                   */
/*                      Q_S0640_19_MAKE_RES_FILE_19                   */
/*                      Q_S0650_25_MAKE_RES_FILE_25                   */
/*                      Q_S0660_26_MAKE_RES_FILE_26                   */
/*                      Q_S0670_27_MAKE_RES_FILE_27                   */
/*                      Q_S0690_28_MAKE_RES_FILE_28                   */
/*                      Q_S0710_29_MAKE_RES_FILE_29                   */
/*                      Q_S0720_30_MAKE_RES_FILE_30                   */
/*                      Q_S0735_32_MAKE_RES_FILE_32                   */
/*                      Q_S0740_33_MAKE_RES_FILE_33                 */
/*                      Q_S0760_110_MAKE_RES_FILE_110                 */
/*                      Q_S0810_180_MAKE_RES_FILE_180                 */
/*     CALLED FROM:                                                   */
/*                      Q_S0370_STATE_MACHINE                         */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0510_MAKE_RESULT_FILE : PROC () RETURNS (BOOL);

DCL ZQ_ERROR    BOOL;

Z_TRACE := H'0510;

Q_S0490_CALCULATE_ACTUAL_REP_PER();

DO WITH Z_RESULT_FILE;
   CASE  ZB_MEAS_TYPE OF

    (E_MT_TRAFFIC):
      /*  MEASUREMENT  TYPE 01           */
      Q_S0520_01_MAKE_RES_FILE_01 ();

    (E_MT_RESOURCE_AVAILABILITY):
      /*  MEASUREMENT  TYPE 02           */
      Q_S0530_02_MAKE_RES_FILE_02 ( );

    (E_MT_RESOURCE_USAGE_CCCH  ):
      /*  MEASUREMENT  TYPE 03           */
      Q_S0540_03_MAKE_RES_FILE_03 ( );

    (E_MT_RESOURCE_USAGE_SDCCH):
      /*  MEASUREMENT  TYPE 04           */
      Q_S0550_04_MAKE_RES_FILE_04 ( );

    (E_MT_RESOURCE_USAGE_RTCH):
      /*  MEASUREMENT  TYPE 05           */
      Q_S0560_05_MAKE_RES_FILE_05 ( );

    (E_MT_HANDOVER):
      /*  MEASUREMENT  TYPE 06           */
      Q_S0570_06_MAKE_RES_FILE_06 ( );

    (E_MT_LAPD):
      /*  MEASUREMENT  TYPE 07           */
      Q_S0590_07_MAKE_RES_FILE_07 ( );

    (E_MT_X25):
      /*  MEASUREMENT  TYPE 08           */
      Q_S0600_08_MAKE_RES_FILE_08 ( );

    (E_MT_NUMBER7):
      /*  MEASUREMENT  TYPE 09           */
      Q_S0610_09_MAKE_RES_FILE_09 ( );

    (E_MT_A_AND_ABIS_ITF_ANALYSIS):
      /*  MEASUREMENT  TYPE 18           */
      Q_S0630_18_MAKE_RES_FILE_18 ( );

    (E_MT_SMS):
      /*  MEASUREMENT  TYPE 19           */
      Q_S0640_19_MAKE_RES_FILE_19 ( );

    (E_MT_SCCP):
      /*  MEASUREMENT  TYPE 25           */
      Q_S0650_25_MAKE_RES_FILE_25 ( );

    (E_MT_HANDOVER_PER_SERVINGCELL):
      /*  MEASUREMENT  TYPE 26           */
      Q_S0660_26_MAKE_RES_FILE_26 ( );

    (E_MT_HANDOVER_PER_TARGETCELL):
      /*  MEASUREMENT  TYPE 27           */
      Q_S0670_27_MAKE_RES_FILE_27 ( );

    (E_MT_HANDOVER_SDCCH):
      /*  MEASUREMENT  TYPE 28           */
      Q_S0690_28_MAKE_RES_FILE_28 ( );

    (E_MT_DIRECTED_RETRY):
      /*  MEASUREMENT  TYPE 29           */
      Q_S0710_29_MAKE_RES_FILE_29 ( );

    (E_MT_SMSCB):
      /*  MEASUREMENT  TYPE 30           */
      Q_S0720_30_MAKE_RES_FILE_30 ( );

    (E_MT_MULTIBAND_HANDOVERS):
      Q_S0735_32_MAKE_RES_FILE_32 ( );

/* BEGIN: ADD-WIPRO-B9-P1-CHANGE */
    (E_MT_EME):
      Q_S0740_33_MAKE_RES_FILE_33 ( );
/* END: ADD-WIPRO-B9-P1-CHANGE */      

/* BEGIN: ADD-WIPRO-B9-P2-CHANGE */
    (E_MT_VGCS):
      Q_S0750_34_MAKE_RES_FILE_34 ( );
/* END: ADD-WIPRO-B9-P2-CHANGE */

/* BEGIN: ADD-WIPRO-B10-MR2-CHANGE */
    (E_MT_IP):
      Q_S0751_35_MAKE_RES_FILE_35 ( );
	
   /*START: IURG*/
    (E_MT_IURG):
      Q_S0901_36_MAKE_RES_FILE_36 ( );
   /*END: IURG*/
   
   /*BEGIN:VAMOS*/
   (E_MT_VAMOS):
       Q_S0901_37_MAKE_RES_FILE_37 ();
   /*END:VAMOS*/
/* END: ADD-WIPRO-B10-MR2-CHANGE */
    (E_MT_CELL_TRX_OVERVIEW_COUNTERS):
      /*  MEASUREMENT  TYPE 110          */
      Q_S0760_110_MAKE_RES_FILE_110 ( );

    (E_MT_TRAFFIC_FLOW):
      /*  MEASUREMENT  TYPE 180          */
      Q_S0810_180_MAKE_RES_FILE_180 ( );

    ELSE
      /* OTHER MEAS TYPES                */

   ESAC;

  ZQ_ERROR:=Z_CPL_CODES/=E_NULL_CODE;
OD;

/*BEGIN CR1530686.01 BSC PM ENHANCEMENT FOR CCRH*/
Q_S0070_WAIT_TIME(ZS_WAIT_TIME_RES_WRT);
/*END CR1530686.01*/

RETURN (ZQ_ERROR);

END Q_S0510_MAKE_RESULT_FILE;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0520_01_MAKE_RES_FILE_01                         */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY: DUHITA DHARWADKAR  DATE: 03/03/03 */
/*                                                                    */
/*     CREATION DATE: 96/11/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION: CHANGED TO REFLECT THE R3.2 CHANGES    */
/*                             ( ONE CELL PER RECORD IN HISTORY AND   */
/*                               RESULT FILES )                       */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0110_GET_USER_BUF                          */
/*                      Q_S0120_GET_WRITE_BUF                         */
/*                      Q_S0160_READ_HIST_FILE                        */
/*                      Q_S0270_BEQ_SEQ_FROM_CELL_IDX                 */
/*                      Q_S0860_INCREM_PTR                            */
/*                      Q_S0840_CHECK_DPVAL                           */
/*                      Q_S0820_RECORD_FULL                           */
/*                      Q_S0830_CHECK_LAST_WRITE                      */
/*     CALLED FROM:                                                   */
/*                      Q_S0510_MAKE_RESULT_FILE                      */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0520_01_MAKE_RES_FILE_01 : PROC ( );

DCL  ZQ_BUF             M_BYTE; /* INDEX IN BUFFER */
DCL  ZQ_CELL_ID         ZM_PM_BEQ_AND_SECTOR;
DCL  ZQ_FILL_PTR        PTR;
DCL  ZQ_I               M_TYPE_01_CTRS_CELL;
DCL  ZQ_IND_OBJ         INT;
DCL  ZQ_IND_REC         INT;
DCL  ZQ_REC             M_BYTE; /* REC IN BUFFER   */
DCL  ZQ_RECS_PER_BUFF   INT;
DCL  ZQ_RES_RRN         INT;
DCL  ZQ_START_REC_NO    INT;

Z_TRACE := H'0520;

/* NOTE THAT THE GENERIC HEADER IS ALWAYS IN THE FIRST RECORD */
/* HENCE THE FIRST ITEM STARTS AT THE SECOND RECORD.          */
ZQ_IND_REC       := 2;
ZQ_RECS_PER_BUFF := 8;
ZQ_IND_OBJ       := 1;
ZQ_RES_RRN       := -1;

   /*-----------------------------------------------------------+
   |      M E A S U R E M E N T   T Y P E    0 1                |
   +-----------------------------------------------------------*/

DO WITH Z_HISTORY_FILE;
   ZB_TABLE_SIZE := ZQ_RECS_PER_BUFF * SIZE(M_HIS_TYPE_01_CELL);
   Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                        ZB_TABLE_SIZE);
OD; /* WITH Z_HISTORY_TABLE */

DO WITH Z_RESULT_FILE;
   ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
   Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
               -> ZM_RES_TYPE_01_ARR(ZQ_IND_REC).ZB_DATA;

/* DO FOR THE NUMBER OF BUFFERS REQUIRED FOR ALL CELLS */
DO FOR ZQ_BUF := 0 TO (M_PM_MAX_CELLS_FOR_A_MEAS_JOB /
                       ZQ_RECS_PER_BUFF ) - 1
   WHILE Z_CPL_CODES = E_NULL_CODE;

   ZQ_START_REC_NO := ZQ_BUF * ZQ_RECS_PER_BUFF;

   Q_S0160_READ_HIST_FILE (->Z_HISTORY_FILE,
                           ZQ_RECS_PER_BUFF,
                           ZQ_START_REC_NO,
                           SIZE(M_HIS_TYPE_01_CELL));
   DO FOR ZQ_REC := 1 TO ZQ_RECS_PER_BUFF WHILE Z_CPL_CODES
                                              = E_NULL_CODE;
      /* DO FOR THE RECORDS IN THE BUFFER */
      DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR ->
                         CM_FY32_HIS_TYPE_01_CELL_BUF(ZQ_REC);
         IF Q_S0270_BEQ_SEQ_FROM_CELL_IDX(B_CELL,ZQ_CELL_ID)
            THEN
            /* FILL FOR THE CELLS */
            DO WITH ZQ_FILL_PTR -> ZM_TYPE_01_CELL;
               ZB_TAG     := ZS_TYPE_01_CELL_TAG;
               ZB_LEN     := ZS_TYPE_01_CELL_LEN;
               ZB_CELL_ID := ZQ_CELL_ID;

   /* ZQ02 */  DO FOR ZQ_I := E_MT_01_CTR_C01 TO E_MT_01_CTR_C02I;
                  DO WITH B_CTRS_CELLPT;
                    B_C01_TO_C02I(ZQ_I) := Q_S0840_CHECK_DPVAL
                                           (B_C01_TO_C02I(ZQ_I));
                  OD;
               OD;
               ZB_CTRS := B_CTRS_CELLPT;
            OD; /* WITH ZQ_FILL_PTR */

            /* INCREMENT THE FILL PTR BY THE SIZE OF THE STRUCTURE */
            /* IN THE RESULT FILE.                                 */
            ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                                   SIZE(ZM_RES_TYPE_01_REC));

            IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                   ZQ_IND_REC,
                                   ZQ_RES_RRN,
                                   E_HIST_NORM)
               THEN
               ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                              -> ZM_RES_TYPE_01_ARR
                                 (ZQ_IND_REC).ZB_DATA;
            FI;
         FI;
      OD;  /* DO WITH Z_HISTORY_FILE .... */
   OD; /* DO FOR ... */
OD; /* DO FOR .. */

/* ONCE HERE IS REACHED IT IS CERTAIN THAT ALL RECORDS OF THE  */
/* HISTORY FILE RELATED TO THIS MEASUREMENT TYPE ARE READ AND  */
/* CORRESPONDING RESULT RECORDS ARE PUT IN WRITE BUFFER OF     */
/* RESULT FILE. NOW, IT IS TO BE CHECKED IF ANY RECORDS ARE    */
/* WAITING TO BE PHYSICLLY WRITTEN TO THE RESULT FILE          */

Q_S0830_CHECK_LAST_WRITE(ZQ_IND_OBJ,
                         ZQ_IND_REC,
                         ZQ_RES_RRN);

/* THE PGHR UPDATE IS A PROBLEM. SINCE THE RESULT FILE IS OPENED */
/* FOR WRITE THERE IS NO POSSIBILITY TO UPDATE A RECORD          */
/* THE RESULT FILE MUST BE CLOSED, REOPENED FOR MODIFY AND       */
/* THE HEADER UPDATE MUST TAKE PLACE...                          */
/* AND THEN THE BUFFERS ARE TO BE RETURNED                       */

Z_RES_RRN     := ZQ_RES_RRN + ZQ_IND_REC - 1;

END Q_S0520_01_MAKE_RES_FILE_01;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0525_MAKE_RES_FILE_1_2                           */
/*                                                                    */
/*     PROGRAMMER: A.H.SWANN                                          */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 96/11/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       CREATE THE FORTH (AND FINAL) TYPE 110 RESULT FILE BLOCK      */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0110_GET_USER_BUF                          */
/*                      Q_S0120_GET_WRITE_BUF                         */
/*                      Q_S0270_BEQ_SEQ_FROM_CELL_IDX                 */
/*                      Q_S0860_INCREM_PTR                            */
/*                      Q_S0260_GET_TRXS_OF_A_CELL                    */
/*                      Q_S0160_READ_HIST_FILE                        */
/*                      Q_S0850_CHECK_3_INT_CNTR                      */
/*                      Q_S0820_RECORD_FULL                           */
/*                      Q_S0830_CHECK_LAST_WRITE                      */
/*     CALLED FROM:                                                   */
/*                      Q_S0370_STATE_MACHINE                         */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0525_MAKE_RES_FILE_1_2 : PROC ( );

DCL ZQ_BUF              INT;
DCL ZQ_CELL_LIST        M_PM_SCOPE_IN_G2;
DCL ZQ_CELL_TRX_ID      ZM_TRX_RES;
DCL ZQ_FILL_PTR         PTR;
DCL ZQ_HIS_REC_IN_BUFF  INT;
DCL ZQ_I                M_TYPE_01_CTRS_TRX;
DCL ZQ_IND_OBJ          INT;
DCL ZQ_IND_REC          INT;
DCL ZQ_REC              M_BYTE;
DCL ZQ_RES_RRN          INT;
DCL ZQ_START_REC_NO     INT;
DCL ZQ_CELL_IDX         M_CELL_IDX;

Z_TRACE := H'0525;

/* NOTE THAT THE GENERIC HEADER IS ALWAYS IN THE FIRST RECORD */
/* HENCE THE FIRST ITEM STARTS AT THE SECOND RECORD.          */
ZQ_IND_REC         := 1;
ZQ_IND_OBJ         := 1;
ZQ_RES_RRN         := Z_RES_RRN;
ZQ_HIS_REC_IN_BUFF := 28;

DO WITH Z_HISTORY_FILE;
  ZB_TABLE_SIZE := SIZE(M_HIS_TYPE_01_TRX) * ZQ_HIS_REC_IN_BUFF;
  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                       ZB_TABLE_SIZE);
OD; /* WITH Z_HISTORY_TABLE */

DO WITH Z_RESULT_FILE;
  ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
  Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
               -> ZM_RES_TYPE_01_ARR(ZQ_IND_REC).ZB_DATA;

ZQ_CELL_LIST := Q_S0280_GET_PM_SCOPE(Z_ACT_IDX);

/*CRI01323736.02 bgn,Do for 1400 TRX not 448*/
DO FOR ZQ_BUF := 0 TO 49 
/*CRI01323736.02 end*/

   WHILE Z_CPL_CODES = E_NULL_CODE;

   ZQ_START_REC_NO:= ZQ_HIS_REC_IN_BUFF * ZQ_BUF;

   Q_S0160_READ_HIST_FILE (->Z_HISTORY_FILE,
                           ZQ_HIS_REC_IN_BUFF,
                           ZQ_START_REC_NO,
                           SIZE(M_HIS_TYPE_01_TRX));

   DO FOR ZQ_REC := 1 TO ZQ_HIS_REC_IN_BUFF WHILE
                                 Z_CPL_CODES = E_NULL_CODE;
      DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR
                        -> CM_FY32_HIS_TYPE_01_TRX_BUF(ZQ_REC);

         IF B_TRX_IDX /= M_NULL_TRX_IDX  THEN

            Q_S0295_GET_CELL_TRX_ID(B_TRX_IDX, ZQ_CELL_TRX_ID,
                                    ZQ_CELL_IDX);
/*CRI01323736.02 bgn*/						
            IF ZQ_CELL_LIST(ZQ_CELL_IDX) AND ZQ_CELL_IDX /= H'FFFF
/*CRI01323736.02 end*/
              THEN
              DO WITH ZQ_FILL_PTR -> ZM_TYPE_01_TRX;
                 ZB_TAG       := ZS_TYPE_01_TRX_TAG;
                 ZB_LEN       := ZS_TYPE_01_TRX_LEN;
                 ZB_TRX_ID    := ZQ_CELL_TRX_ID;
                 DO FOR ZQ_I := E_MT_01_CTR_C621 TO E_MT_01_CTR_C746B;
                    DO WITH B_CTRS_TRXPT;
                      IF B_C621_TO_C746B(ZQ_I) = ZS_DPVAL_OVERFLOW
                        THEN
                        B_C621_TO_C746B(ZQ_I) := ZS_DPVAL_INVALID;
                         /* AM: CR682571 Merge miss for FR20/212243 */        
                      	   ELSIF B_C621_TO_C746B(ZQ_I) = ZS_DPVAL_INVALID
                             THEN
                                 B_C621_TO_C746B(ZQ_I) := 0;
                           FI;
                        /* AM: CR682571 Merge miss for FR20/212243 */ 
                    OD;
                 OD;
                 ZB_CTRS := B_CTRS_TRXPT;
              OD; /* DO WITH ZQ_FILL_PTR */
              ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                                 SIZE(ZM_TYPE_01_TRX));

              IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                     ZQ_IND_REC,
                                     ZQ_RES_RRN,
                                     E_HIST_1_2)
                 THEN
                 ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                            -> ZM_RES_TYPE_01_ARR(ZQ_IND_REC).ZB_DATA;
              FI;
            FI;
         FI;
      OD; /* DO WITH Z_HIST */
   OD; /* DO FOR ZQ_REC */
OD; /* DO FOR ZQ_BUF */

Q_S0830_CHECK_LAST_WRITE(ZQ_IND_OBJ,
                         ZQ_IND_REC,
                         ZQ_RES_RRN);



END Q_S0525_MAKE_RES_FILE_1_2;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0530_02_MAKE_RES_FILE_02                         */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 96/11/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0110_GET_USER_BUF                          */
/*                      Q_S0120_GET_WRITE_BUF                         */
/*                      Q_S0160_READ_HIST_FILE                        */
/*                      Q_S0270_BEQ_SEQ_FROM_CELL_IDX                 */
/*                      Q_S0860_INCREM_PTR                            */
/*                      Q_S0820_RECORD_FULL                           */
/*                      Q_S0830_CHECK_LAST_WRITE                      */
/*     CALLED FROM:                                                   */
/*                      Q_S0510_MAKE_RESULT_FILE                      */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0530_02_MAKE_RES_FILE_02 : PROC ( );

DCL  ZQ_BUF             M_BYTE; /* INDEX IN BUFFER */
DCL  ZQ_CELL_ID         ZM_PM_BEQ_AND_SECTOR;
DCL  ZQ_FILL_PTR        PTR;
DCL  ZQ_HIS_BUFFER_RECS INT;
DCL  ZQ_I               M_TYPE_02_CTRS;
DCL  ZQ_IND_OBJ         INT;
DCL  ZQ_IND_REC         INT;
DCL  ZQ_REC             M_BYTE; /* REC IN BUFFER */
DCL  ZQ_RES_RRN         INT;
DCL  ZQ_START_REC_NO    INT;

Z_TRACE := H'0530;

/* NOTE THAT THE GENERIC HEADER IS ALWAYS IN THE FIRST RECORD */
/* HENCE THE FIRST ITEM STARTS AT THE SECOND RECORD.          */
ZQ_IND_REC         := 2;
ZQ_HIS_BUFFER_RECS := 20;
ZQ_IND_OBJ         := 1;
ZQ_RES_RRN         := -1;

DO WITH Z_HISTORY_FILE;
  ZB_TABLE_SIZE := ZQ_HIS_BUFFER_RECS * SIZE(M_HIS_TYPE_02);
  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                       ZB_TABLE_SIZE);
OD; /* WITH Z_HISTORY_TABLE */

DO WITH Z_RESULT_FILE;
  ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
  Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
               -> ZM_RES_TYPE_02_ARR(ZQ_IND_REC).ZB_DATA;

DO FOR ZQ_BUF := 0 TO (M_PM_MAX_CELLS_FOR_A_MEAS_JOB /
                       ZQ_HIS_BUFFER_RECS) - 1
   WHILE Z_CPL_CODES = E_NULL_CODE;

   ZQ_START_REC_NO := ZQ_BUF * ZQ_HIS_BUFFER_RECS;

   Q_S0160_READ_HIST_FILE (->Z_HISTORY_FILE,
                           ZQ_HIS_BUFFER_RECS,
                           ZQ_START_REC_NO,
                           SIZE(M_HIS_TYPE_02));

   DO FOR ZQ_REC := 1 TO ZQ_HIS_BUFFER_RECS WHILE
                               Z_CPL_CODES = E_NULL_CODE;
      DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR ->
                                 CM_FY32_HIS_TYPE_02_BUF(ZQ_REC);
         IF Q_S0270_BEQ_SEQ_FROM_CELL_IDX(B_CELL_ID,ZQ_CELL_ID)
            THEN

            DO WITH ZQ_FILL_PTR -> ZM_TYPE_02_CELL;
               ZB_TAG     := ZS_TYPE_02_CELL_TAG;
               ZB_LEN     := ZS_TYPE_02_CELL_LEN;
               ZB_BEQS_ID := ZQ_CELL_ID;
               DO FOR ZQ_I := E_MT_02_CTR_C24 TO E_MT_02_CTR_C141;
                  IF B_HIS_CC_MT_02(ZQ_I) = ZS_DPVAL_OVERFLOW THEN
                     B_HIS_CC_MT_02(ZQ_I) := ZS_DPVAL_INVALID ;
                  FI;
               OD;
               ZB_CELL_DATA := B_HIS_CC_MT_02;
            OD; /* ZQ_FILL_PTR */

            ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                             SIZE(ZM_TYPE_02_CELL));

            /* CHECK IF THE RECORD IS FULL OR IT IS THE LAST.     */
            /* THIS ROUTINE ALSO MODIFIES THE INDEX PARAMETERS    */
            /* PASSED, WRITES TO THE FILE AND FILLS IN THE HEADER */
            /* - THERE IS NO TIME TO CLEAN THIS UP WITH RISK.     */

            IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                   ZQ_IND_REC,
                                   ZQ_RES_RRN,
                                   E_HIST_NORM)
               THEN
               ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                              -> ZM_RES_TYPE_02_ARR
                                 (ZQ_IND_REC).ZB_DATA;
            FI; /* RECORD FULL */
         FI;
      OD;  /* HIST FILE */
   OD; /* ZQ_REC */
OD; /* ZQ_I */

Q_S0830_CHECK_LAST_WRITE(ZQ_IND_OBJ,
                         ZQ_IND_REC,
                         ZQ_RES_RRN);

END Q_S0530_02_MAKE_RES_FILE_02;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0540_03_MAKE_RES_FILE_03                         */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 93/06/17                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0110_GET_USER_BUF                          */
/*                      Q_S0120_GET_WRITE_BUF                         */
/*                      Q_S0160_READ_HIST_FILE                        */
/*                      Q_S0270_BEQ_SEQ_FROM_CELL_IDX                 */
/*                      Q_S0860_INCREM_PTR                            */
/*                      Q_S0840_CHECK_DPVAL                           */
/*                      Q_S0820_RECORD_FULL                           */
/*                      Q_S0830_CHECK_LAST_WRITE                      */
/*     CALLED FROM:                                                   */
/*                      Q_S0510_MAKE_RESULT_FILE                      */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0540_03_MAKE_RES_FILE_03 : PROC ( );

DCL ZQ_CELL_ID         ZM_PM_BEQ_AND_SECTOR;
DCL ZQ_FILL_PTR        PTR;
DCL ZQ_I               M_TYPE_03_CTRS;
DCL ZQ_IND_OBJ         INT;
DCL ZQ_IND_REC         INT;
DCL ZQ_REC             M_BYTE;
DCL ZQ_RECS_PER_BUFF   INT;
DCL ZQ_RES_RRN         INT;
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
DCL ZQ_REC_SIZE        INT;
DCL ZQ_NUM_CCCH_TS     M_TS_NUMBER;
DCL ZQ_CCCH_REC	       INT;
/* END: ADD-WIPRO-B10-MR1-CHANGE */

Z_TRACE := H'0540;

/* NOTE THAT THE GENERIC HEADER IS ALWAYS IN THE FIRST RECORD */
/* HENCE THE FIRST ITEM STARTS AT THE SECOND RECORD.          */
ZQ_IND_REC       := 2;
ZQ_RECS_PER_BUFF := 40;
ZQ_IND_OBJ       := 1;
ZQ_RES_RRN       := -1;

DO WITH Z_HISTORY_FILE;
   ZB_TABLE_SIZE := SIZE(M_HIS_TYPE_03) * ZQ_RECS_PER_BUFF;
   Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                        ZB_TABLE_SIZE);
OD; /* WITH Z_HISTORY_TABLE */

DO WITH Z_RESULT_FILE;
   ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
   Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

Q_S0160_READ_HIST_FILE (->Z_HISTORY_FILE,
                        ZQ_RECS_PER_BUFF,
                        ZS_FIRST_HIST_REC,
                        SIZE(M_HIS_TYPE_03));

ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
               -> ZM_RES_TYPE_03_ARR(ZQ_IND_REC).ZB_DATA;
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */               
ZQ_REC_SIZE :=0;
/* END: ADD-WIPRO-B10-MR1-CHANGE */
DO FOR ZQ_REC := 1 TO ZQ_RECS_PER_BUFF WHILE
                             Z_CPL_CODES = E_NULL_CODE;
   DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR
                         -> CM_FY32_HIS_TYPE_03_BUF(ZQ_REC);

      /* BEGIN: DELETE-WIPRO-B10-MR1-CHANGE */
      /*DO WITH ZQ_FILL_PTR -> ZM_RES_TYPE_03_CELL;*/
      /* END: DELETE-WIPRO-B10-MR1-CHANGE */

         IF Q_S0270_BEQ_SEQ_FROM_CELL_IDX(B_CELL_IDX,ZQ_CELL_ID)
            THEN

            DO WITH ZQ_FILL_PTR -> ZM_CELL_HEAD_TYPE_03;
               ZB_TAG       := ZS_TYPE_03_GLOB_TAG;
               ZB_LEN       := ZS_TYPE_03_GLOB_LEN;
               ZB_BEQS_ID   := ZQ_CELL_ID;

               ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                            SIZE(ZM_CELL_HEAD_TYPE_03));
               /* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
               ZQ_REC_SIZE := ZQ_REC_SIZE +
                             SIZE(ZM_CELL_HEAD_TYPE_03);
               IF Q_S0825_REC_FULL_SIZE(ZQ_IND_OBJ,
                                        ZQ_IND_REC,
	                                ZQ_RES_RRN,
	                                ZQ_REC_SIZE,
	                                ZS_3_REC_SIZE)
	       THEN
	           ZQ_FILL_PTR:=->Z_RESULT_FILE.ZB_TABLE_PTR
	                        -> ZM_RES_TYPE_03_ARR
	                        (ZQ_IND_REC).ZB_DATA;
	           ZQ_REC_SIZE := 0;
	       FI;
               /* END: ADD-WIPRO-B10-MR1-CHANGE */                              

            OD; /* ZB_CELL_HEAD */
            /* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
            ZQ_NUM_CCCH_TS:=B_INDEX_TS;
            DO FOR ZQ_CCCH_REC:=1 TO ZQ_NUM_CCCH_TS;
            /* END: ADD-WIPRO-B10-MR1-CHANGE */        
            DO WITH ZQ_FILL_PTR -> ZM_IND_TYPE_03;
               ZB_TAG  := ZS_TYPE_03_CELL_TAG;
               ZB_LEN  := ZS_TYPE_03_CELL_LEN;
               ZB_BEQS_ID   := ZQ_CELL_ID;
               ZB_TRX_ID    := B_INDEX_TRX;
               /* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
               DO WITH B_TYPE_03_CTRS_ARR(ZQ_CCCH_REC);
               /* END: ADD-WIPRO-B10-MR1-CHANGE */  
               /* BEGIN: DELETE-WIPRO-B10-MR1-CHANGE */             
                    /*ZB_TS_NBR    := 0;*/
               /* BEGIN: DELETE-WIPRO-B10-MR1-CHANGE */   
                    /* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
	            ZB_TS_NBR    := B_CCCH_TS_NBR;
	            /* END: ADD-WIPRO-B10-MR1-CHANGE */  
		/*  DO FOR ZQ_I  := E_MT_03_C8C TO E_MT_03_C8D; */ 
			/* START : Changes for A-flex */
                  /*DO FOR ZQ_I  := E_MT_03_C8C TO E_MT_03_C8E;*/ 
                 /*CR36/251325 START*/ 
                    DO FOR ZQ_I  := E_MT_03_C8C TO E_MT_03_C8D;
                 /*CR36/251325 END*/ 
			/* START : Changes for A-flex */
                        B_HIS_CC_MT_03(ZQ_I) := Q_S0840_CHECK_DPVAL
                             (B_HIS_CC_MT_03(ZQ_I));
                    OD;
                    ZB_TYPE_03_CTRS := B_HIS_CC_MT_03;
	       /* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */        
               OD;
               /* END: ADD-WIPRO-B10-MR1-CHANGE */               
            OD; /* WITH CELL DATA */

            ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                            SIZE(ZM_IND_TYPE_03));
             /* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */               
             ZQ_REC_SIZE := ZQ_REC_SIZE +
                                       SIZE(ZM_IND_TYPE_03);
                                       
             IF Q_S0825_REC_FULL_SIZE(ZQ_IND_OBJ,
                                     ZQ_IND_REC,
                                     ZQ_RES_RRN,
                                     ZQ_REC_SIZE,
                                     ZS_3_REC_SIZE)
             THEN
                 ZQ_FILL_PTR:=->Z_RESULT_FILE.ZB_TABLE_PTR
                              -> ZM_RES_TYPE_03_ARR
                              (ZQ_IND_REC).ZB_DATA;
                 ZQ_REC_SIZE := 0;
             FI;                          
	     /* END: ADD-WIPRO-B10-MR1-CHANGE */                            
             /* BEGIN: DELETE-WIPRO-B10-MR1-CHANGE */                                                            
             /*IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                   ZQ_IND_REC,
                                   ZQ_RES_RRN,
                                   E_HIST_NORM)
             THEN
               ZQ_FILL_PTR:=-> Z_RESULT_FILE.ZB_TABLE_PTR
                            -> ZM_RES_TYPE_03_ARR(ZQ_IND_REC).ZB_DATA;
             FI;*/
             /* END: DELETE-WIPRO-B10-MR1-CHANGE */ 
             /* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */                
           OD; 
           /* END: ADD-WIPRO-B10-MR1-CHANGE */      
         FI;
      /* BEGIN: DELETE-WIPRO-B10-MR1-CHANGE */   
      /*OD;*/ /* DO WITH ZQ_FILL_PTR */
      /* END: DELETE-WIPRO-B10-MR1-CHANGE */
   OD; /* DO WITH Z_HIST */
OD; /* DO FOR ZQ_REC */

Q_S0830_CHECK_LAST_WRITE(ZQ_IND_OBJ,
                         ZQ_IND_REC,
                         ZQ_RES_RRN);

END Q_S0540_03_MAKE_RES_FILE_03;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0550_04_MAKE_RES_FILE_04                         */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 96/11/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0110_GET_USER_BUF                          */
/*                      Q_S0120_GET_WRITE_BUF                         */
/*                      Q_S0280_GET_PM_SCOPE                          */
/*                      Q_S0270_BEQ_SEQ_FROM_CELL_IDX                 */
/*                      Q_S0260_GET_TRXS_OF_A_CELL                    */
/*                      Q_S0160_READ_HIST_FILE                        */
/*                      Q_S0860_INCREM_PTR                            */
/*                      Q_S0290_GET_TRX_ID                            */
/*                      Q_S0840_CHECK_DPVAL                           */
/*                      Q_S0820_RECORD_FULL                           */
/*                      Q_S0830_CHECK_LAST_WRITE                      */
/*     CALLED FROM:                                                   */
/*                      Q_S0510_MAKE_RESULT_FILE                      */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0550_04_MAKE_RES_FILE_04 : PROC ( );

DCL ZQ_BEQS_ID         ZM_PM_BEQ_AND_SECTOR;
DCL ZQ_C               M_TCU_TYPE_4;
DCL ZQ_CELL_IDX        INT;
DCL ZQ_CELL_LIST       M_PM_SCOPE_IN_G2;
DCL ZQ_FILL_PTR        PTR;
DCL ZQ_GLOB            BOOL;
DCL ZQ_INCLUDE         BOOL;
DCL ZQ_IND_OBJ         INT;
DCL ZQ_IND_REC         INT;
DCL ZQ_REL_TID         M_TRX_ID;
DCL ZQ_RES_RRN         INT;
DCL ZQ_TRX_ID          M_TRX_ID;
DCL ZQ_TRX_IDX         M_TRX_IDX;
DCL ZQ_TRX_IDX_HIST    M_TRX_IDX;
DCL ZQ_WHICH_RRN       INT;
DCL ZQ_NBR_OF_TSL      INT;
DCL ZQ_TRX             INT;
DCL ZQ_REC_SIZE        INT;

Z_TRACE := H'0550;

/* NOTE THAT THE GENERIC HEADER IS ALWAYS IN THE FIRST RECORD  */
/* HENCE THE FIRST ITEM STARTS AT THE SECOND RECORD.           */
ZQ_IND_REC       := 2;
ZQ_IND_OBJ       := 1;
ZQ_RES_RRN       := -1;
ZQ_GLOB          := FALSE;
ZQ_REC_SIZE      := 0;

DO WITH Z_HISTORY_FILE;
  ZB_TABLE_SIZE := SIZE(M_HIS_TYPE_04);
  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

DO WITH Z_RESULT_FILE;
  ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
  Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
               -> ZM_RES_TYPE_04_ARR(ZQ_IND_REC).ZB_DATA;

ZQ_CELL_LIST := Q_S0280_GET_PM_SCOPE(Z_ACT_IDX);

DO FOR ZQ_CELL_IDX:=1 TO CM_FY32_MAX_CELLS_PER_BSC;

  IF ZQ_CELL_LIST(ZQ_CELL_IDX) AND
     Q_S0270_BEQ_SEQ_FROM_CELL_IDX(ZQ_CELL_IDX,ZQ_BEQS_ID)
     THEN
     ZQ_GLOB := FALSE;
     Q_S0260_GET_TRXS_OF_A_CELL( ZQ_CELL_IDX , E_SDCH);
     DO FOR ZQ_REL_TID := 1 TO M_MAX_TRX_PER_CELL;

       IF Z_TRXS_OF_A_CELL.ZB_RELEVANT_TRX_ID_SDCCH( ZQ_REL_TID )
         THEN

         /* AH4V - SDON */
         ZQ_NBR_OF_TSL := 0;
         DO FOR ZQ_TRX := 0 TO 7;
           IF Z_TRXS_OF_A_CELL.
             ZB_RELV_TIME_SLOTS(ZQ_REL_TID,ZQ_TRX)
             THEN
             ZQ_NBR_OF_TSL := ZQ_NBR_OF_TSL + 1;
             ZQ_TRX_IDX := Z_TRXS_OF_A_CELL.ZB_TRXS( ZQ_REL_TID );
             /* HERE READ THE RELEVANT HISTORY FILE RECORD */
             ZQ_WHICH_RRN := (ZQ_NBR_OF_TSL - 1) *
                   CM_FY32_MAX_TRX_PER_BSC + ZQ_TRX_IDX - 1;
             Q_S0160_READ_HIST_FILE(->Z_HISTORY_FILE,
                                    1,
                                    ZQ_WHICH_RRN,
                                    SIZE(M_HIS_TYPE_04));

             DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR ->
                                        M_HIS_TYPE_04;

               ZQ_INCLUDE := FALSE;
               ZQ_TRX_IDX_HIST := B_INDEX_TRX;
               IF ZQ_TRX_IDX_HIST /= M_NULL_TRX_IDX THEN
                 ZQ_INCLUDE:=TRUE;
               FI;

               IF ZQ_INCLUDE
                 THEN
                 IF NOT ZQ_GLOB
                   THEN
                   ZQ_GLOB := TRUE;
                   /* THIS IS THE HEADER FOR A CELL */
                   DO WITH ZQ_FILL_PTR -> ZM_CELL_TYPE_04;
                     ZB_TAG := ZS_TYPE_04_GLOB_TAG;
                     ZB_LEN := ZS_TYPE_04_GLOB_LEN;
                     ZB_BEQS_ID:=ZQ_BEQS_ID;

                     /* POINT TO THE NEXT STRUCTURE */
                     ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                                   SIZE(ZM_CELL_TYPE_04));
                     ZQ_REC_SIZE := ZQ_REC_SIZE +
                                       SIZE(ZM_CELL_TYPE_04);
                     IF Q_S0825_REC_FULL_SIZE(ZQ_IND_OBJ,
                                              ZQ_IND_REC,
                                              ZQ_RES_RRN,
                                              ZQ_REC_SIZE,
                                              ZS_4_REC_SIZE)
                       THEN
                       ZQ_FILL_PTR:=->Z_RESULT_FILE.ZB_TABLE_PTR
                                    ->ZM_RES_TYPE_04_ARR
                                      (ZQ_IND_REC).ZB_DATA;
                       ZQ_REC_SIZE := 0;
                     FI;
                   OD; /* ZQ_FILL_PTR */
                 FI; /* ZQ_GLOB */

                 Q_S0290_GET_TRX_ID(ZQ_TRX_IDX_HIST, ZQ_TRX_ID);

                 /* THESE ARE THE SDCCH DATA ITEMS PER TS */
                 DO WITH ZQ_FILL_PTR -> ZM_CHAN_TYPE_04;
                   ZB_TAG := ZS_TYPE_04_CELL_TAG;
                   ZB_LEN := ZS_TYPE_04_CELL_LEN;
                   ZB_BEQS_ID := ZQ_BEQS_ID;
                   ZB_TRX_ID := ZQ_TRX_ID;
                   ZB_TS_NBR := B_TS_NUMBER;
                   DO FOR ZQ_C := E_C39_NBR_TOT_DCCH_ACC TO
                                  E_C40_TOT_USAGE_TIME_DCCH;
                     B_HIS_CC_MT_04(ZQ_C) :=
                                  Q_S0840_CHECK_DPVAL
                                           (B_HIS_CC_MT_04(ZQ_C));
                   OD;
                   ZB_CTRS := B_HIS_CC_MT_04;
                 OD; /* ZQ_FILL_PTR */

                 ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                                   SIZE(ZM_CHAN_TYPE_04));
                 ZQ_REC_SIZE := ZQ_REC_SIZE +
                                       SIZE(ZM_CHAN_TYPE_04);
                 IF Q_S0825_REC_FULL_SIZE(ZQ_IND_OBJ,
                                          ZQ_IND_REC,
                                          ZQ_RES_RRN,
                                          ZQ_REC_SIZE,
                                          ZS_4_REC_SIZE)
                   THEN
                   ZQ_FILL_PTR:=->Z_RESULT_FILE.ZB_TABLE_PTR
                                ->ZM_RES_TYPE_04_ARR
                                 (ZQ_IND_REC).ZB_DATA;
                   ZQ_REC_SIZE := 0;
                 FI;
               FI;
             OD; /* DO WITH Z_RESULT_FILE */
           FI; /* IF ZQ_RELV_TIME_SLOTS */
         OD;  /* DO FOR ZQ_TRX   */
       FI; /* IF Z_TRXS_OF_A_CELL ... */
     OD; /* DO FOR ZQ_REL_TID */
  FI;
OD; /* DO FOR ZQ_CELL_IDX */

Q_S0830_CHECK_LAST_WRITE(ZQ_IND_OBJ,
                         ZQ_IND_REC,
                         ZQ_RES_RRN);

END Q_S0550_04_MAKE_RES_FILE_04;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0560_05_MAKE_RES_FILE_05                         */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 96/11/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0110_GET_USER_BUF                          */
/*                      Q_S0120_GET_WRITE_BUF                         */
/*                      Q_S0280_GET_PM_SCOPE                          */
/*                      Q_S0270_BEQ_SEQ_FROM_CELL_IDX                 */
/*                      Q_S0260_GET_TRXS_OF_A_CELL                    */
/*                      Q_S0160_READ_HIST_FILE                        */
/*                      Q_S0860_INCREM_PTR                            */
/*                      Q_S0290_GET_TRX_ID                            */
/*                      Q_S0840_CHECK_DPVAL                           */
/*                      Q_S0820_RECORD_FULL                           */
/*                      Q_S0830_CHECK_LAST_WRITE                      */
/*     CALLED FROM:                                                   */
/*                      Q_S0510_MAKE_RESULT_FILE                      */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0560_05_MAKE_RES_FILE_05 : PROC ( );

DCL ZQ_BEQS_ID         ZM_PM_BEQ_AND_SECTOR;
DCL ZQ_C               M_TCU_TYPE_5;
DCL ZQ_CELL_IDX        INT;
DCL ZQ_CELL_LIST       M_PM_SCOPE_IN_G2;
DCL ZQ_FILL_PTR        PTR;
DCL ZQ_GLOB            BOOL;
DCL ZQ_INCLUDE         BOOL;
DCL ZQ_IND_OBJ         INT;
DCL ZQ_IND_REC         INT;
DCL ZQ_OBJ             M_BYTE;
DCL ZQ_REL_TID         M_TRX_ID;
DCL ZQ_RES_RRN         INT;
DCL ZQ_TRX_ID          M_TRX_ID;
DCL ZQ_TRX_IDX         M_TRX_IDX;
DCL ZQ_TRX_IDX_HIST    M_TRX_IDX;
DCL ZQ_WHICH_RRN       INT;
DCL ZQ_REC_SIZE        INT;

Z_TRACE := H'0560;

/* NOTE THAT THE GENERIC HEADER IS ALWAYS IN THE FIRST RECORD  */
/* HENCE THE FIRST ITEM STARTS AT THE SECOND RECORD.           */
ZQ_IND_REC   := 2;
ZQ_IND_OBJ   := 1;
ZQ_RES_RRN   := -1;
ZQ_GLOB      := FALSE;

DO WITH Z_HISTORY_FILE;
  ZB_TABLE_SIZE := SIZE(M_HIS_TYPE_05);
  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

DO WITH Z_RESULT_FILE;
  ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
  Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
               -> ZM_RES_TYPE_05_ARR(ZQ_IND_REC).ZB_DATA;
ZQ_REC_SIZE  := 0;

ZQ_CELL_LIST := Q_S0280_GET_PM_SCOPE(Z_ACT_IDX);

DO FOR ZQ_CELL_IDX:=1 TO CM_FY32_MAX_CELLS_PER_BSC;

   IF ZQ_CELL_LIST( ZQ_CELL_IDX ) AND
      Q_S0270_BEQ_SEQ_FROM_CELL_IDX(ZQ_CELL_IDX,ZQ_BEQS_ID)
      THEN
      ZQ_GLOB := FALSE;
      Q_S0260_GET_TRXS_OF_A_CELL( ZQ_CELL_IDX , E_RTCH);
      DO FOR ZQ_REL_TID := 1 TO M_MAX_TRX_PER_CELL;
         IF Z_TRXS_OF_A_CELL.ZB_RELEVANT_TRX_ID_RTCH(ZQ_REL_TID)
            THEN
            ZQ_TRX_IDX := Z_TRXS_OF_A_CELL.ZB_TRXS(ZQ_REL_TID);
            /* HERE READ THE RELEVANT HISTORY FILE RECORD */
            ZQ_WHICH_RRN := ZQ_TRX_IDX - 1;
            Q_S0160_READ_HIST_FILE(->Z_HISTORY_FILE,
                                   1,
                                   ZQ_WHICH_RRN,
                                   SIZE(M_HIS_TYPE_05));
            DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR ->
                                      M_HIS_TYPE_05;
               /* INCLUDE THE CELL IF IT IS PRESENT */
               /* AND IN THE CELL LIST              */
               ZQ_INCLUDE := FALSE;
               ZQ_TRX_IDX_HIST := B_INDEX_TRX;
               IF ZQ_TRX_IDX_HIST /= M_NULL_TRX_IDX THEN
                  ZQ_INCLUDE:=TRUE;
               FI;

               IF ZQ_INCLUDE
                  THEN
                  IF NOT ZQ_GLOB
                     THEN
                     ZQ_GLOB := TRUE;
                     /* THIS IS THE HEADER FOR A CELL */
                     DO WITH ZQ_FILL_PTR -> ZM_CELL_TYPE_05;
                        ZB_TAG    := ZS_TYPE_05_GLOB_TAG;
                        ZB_LEN    := ZS_TYPE_05_GLOB_LEN;
                        ZB_BEQS_ID:=ZQ_BEQS_ID;

                        /* POINT TO THE NEXT STRUCTURE */
                        ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                               SIZE(ZM_CELL_TYPE_05));
                        ZQ_REC_SIZE := ZQ_REC_SIZE +
                                       SIZE(ZM_CELL_TYPE_05);
                        IF Q_S0825_REC_FULL_SIZE(ZQ_IND_OBJ,
                                                 ZQ_IND_REC,
                                                 ZQ_RES_RRN,
                                                 ZQ_REC_SIZE,
                                                 ZS_5_REC_SIZE)
                           THEN
                           ZQ_FILL_PTR:=->Z_RESULT_FILE.ZB_TABLE_PTR
                                        -> ZM_RES_TYPE_05_ARR
                                          (ZQ_IND_REC).ZB_DATA;
                           ZQ_REC_SIZE := 0;
                        FI;
                     OD; /* ZQ_FILL_PTR */
                  FI; /* ZQ_GLOB */

                  /* FOR 8 TS FOR THE TRX */
                  Q_S0290_GET_TRX_ID(ZQ_TRX_IDX_HIST, ZQ_TRX_ID);
                  DO FOR ZQ_OBJ:= 0 TO 7  WHILE /* TS NUMBER */
                                  Z_CPL_CODES = E_NULL_CODE;

                     IF Z_TRXS_OF_A_CELL.ZB_RELV_TIME_SLOTS
                        ( ZQ_TRX_ID , ZQ_OBJ)
                        THEN

                        /* THESE ARE THE RTCH DATA ITEMS PER TS */

                        DO WITH ZQ_FILL_PTR -> ZM_CHAN_TYPE_05;
                           ZB_TAG     := ZS_TYPE_05_CELL_TAG;
                           ZB_LEN     := ZS_TYPE_05_CELL_LEN;
                           ZB_BEQS_ID := ZQ_BEQS_ID;
                           ZB_TRX_ID  := ZQ_TRX_ID;
                           ZB_TS_NBR  := ZQ_OBJ;
                           DO FOR ZQ_C := E_C370A_NBR_RTCH_SEIZ_FULL TO
                              E_C381B_TOT_RTCH_OCCY_HALF_MULTI;
                              B_TS_DATA(ZQ_OBJ,ZQ_C) :=
                                    Q_S0840_CHECK_DPVAL
                                    (B_TS_DATA(ZQ_OBJ,ZQ_C));
                              ZB_CTRS(ZQ_C)  := B_TS_DATA(ZQ_OBJ,ZQ_C);
                           OD;
                        OD; /* ZQ_FILL_PTR */

                        ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                               SIZE(ZM_CHAN_TYPE_05));
                        ZQ_REC_SIZE := ZQ_REC_SIZE +
                                       SIZE(ZM_CHAN_TYPE_05);
                     FI;
                     IF Q_S0825_REC_FULL_SIZE(ZQ_IND_OBJ,
                                              ZQ_IND_REC,
                                              ZQ_RES_RRN,
                                              ZQ_REC_SIZE,
                                              ZS_5_REC_SIZE)
                        THEN
                        ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                                       -> ZM_RES_TYPE_05_ARR
                                          (ZQ_IND_REC).ZB_DATA;
                        ZQ_REC_SIZE := 0;
                     FI;
                  OD;

               FI;
            OD; /* WITH Z_HISTORY_FILE... */
         FI; /* IF ZB_RELEVANT_TRX_ID */
      OD; /* FOR ALL TRX S OF A CELL */
   FI;
OD;   /* DO FOR ZQ_CELL_IDX */

Q_S0830_CHECK_LAST_WRITE(ZQ_IND_OBJ,
                         ZQ_IND_REC,
                         ZQ_RES_RRN);


END Q_S0560_05_MAKE_RES_FILE_05;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0570_06_MAKE_RES_FILE_06                         */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY: A.H.SWANN         DATE: 95/09/21  */
/*                                                                    */
/*     CREATION DATE: 96/11/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0110_GET_USER_BUF                          */
/*                      Q_S0120_GET_WRITE_BUF                         */
/*                      Q_S0160_READ_HIST_FILE                        */
/*                      Q_S0270_BEQ_SEQ_FROM_CELL_IDX                 */
/*                      Q_S0580_CHECK_TYPE_06_OVERFLOW                */
/*                      Q_S0820_RECORD_FULL                           */
/*                      Q_S0830_CHECK_LAST_WRITE                      */
/*     CALLED FROM:                                                   */
/*                      Q_S0510_MAKE_RESULT_FILE                      */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0570_06_MAKE_RES_FILE_06 : PROC ( );

DCL ZQ_BUF             M_BYTE;
DCL ZQ_CELL_ID         ZM_PM_BEQ_AND_SECTOR;
DCL ZQ_FILL_PTR        PTR;
DCL ZQ_HIS_BUFFER_RECS INT;
DCL ZQ_IND_OBJ         INT;
DCL ZQ_IND_REC         INT;
DCL ZQ_REC             M_BYTE;
DCL ZQ_RES_RRN         INT;
DCL ZQ_START_REC_NO    INT;

Z_TRACE := H'0570;

/* NOTE THAT THE GENERIC HEADER IS ALWAYS IN THE FIRST RECORD  */
/* HENCE THE FIRST ITEM STARTS AT THE SECOND RECORD.           */
ZQ_IND_REC         := 2;
ZQ_HIS_BUFFER_RECS := 8;
ZQ_IND_OBJ         := 1;
ZQ_RES_RRN         := -1;

DO WITH Z_HISTORY_FILE;
   ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_06) * ZQ_HIS_BUFFER_RECS;
   Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                        ZB_TABLE_SIZE);
OD; /* WITH Z_HISTORY_TABLE */

DO WITH Z_RESULT_FILE;
   ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
   Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

DO FOR ZQ_BUF := 0 TO (M_PM_MAX_CELLS_FOR_A_MEAS_JOB /
                      ZQ_HIS_BUFFER_RECS) -1
   WHILE Z_CPL_CODES = E_NULL_CODE;

   ZQ_START_REC_NO := ZQ_HIS_BUFFER_RECS * ZQ_BUF;

   Q_S0160_READ_HIST_FILE (->Z_HISTORY_FILE,
                           ZQ_HIS_BUFFER_RECS,
                           ZQ_START_REC_NO,
                           SIZE(CM_FY32_HIS_TYPE_06));

   ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                  -> ZM_RES_TYPE_06_ARR(ZQ_IND_REC).ZB_DATA;

   DO FOR ZQ_REC := 1 TO ZQ_HIS_BUFFER_RECS WHILE
                                       Z_CPL_CODES = E_NULL_CODE;
      DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR
                          -> CM_FY32_HIS_TYPE_06_BUF(ZQ_REC);
         IF Q_S0270_BEQ_SEQ_FROM_CELL_IDX(B_CELL_ID,ZQ_CELL_ID)
            THEN
            DO WITH ZQ_FILL_PTR -> ZM_TYPE_06_CELL_DATA;
               ZB_TAG       := ZS_TYPE_06_CELL_TAG;
               ZB_LEN       := ZS_TYPE_06_CELL_LEN;
               ZB_BEQS_ID   := ZQ_CELL_ID;
               Q_S0580_CHECK_TYPE_06_OVERFLOW(->B_HIS_CC_MT_06);
               ZB_COUNTERS := B_HIS_CC_MT_06;
            OD; /* DO WITH ZQ_FILL_PTR */

            IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                   ZQ_IND_REC,
                                   ZQ_RES_RRN,
                                   E_HIST_NORM)
               THEN
               ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                              -> ZM_RES_TYPE_06_ARR
                                 (ZQ_IND_REC).ZB_DATA;
            FI;
         FI;
      OD; /* DO WITH Z_HIST */
   OD; /* DO FOR ZQ_REC */
OD; /* DO FOR ZQ_BUF */

Q_S0830_CHECK_LAST_WRITE(ZQ_IND_OBJ,
                         ZQ_IND_REC,
                         ZQ_RES_RRN);

END Q_S0570_06_MAKE_RES_FILE_06;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0580_CHECK_TYPE_06_OVERFLOW                      */
/*                                                                    */
/*     PROGRAMMER: A.H.SWANN                                          */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/10/09                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       CHECK FOR OVERFLOW COUNTERS IN TYPE 06                       */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_HIS_CC REF CM_FY32_HIS_TY06_CTRS           */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0840_CHECK_DPVAL                           */
/*     CALLED FROM:                                                   */
/*                      Q_S0570_06_MAKE_RES_FILE_06                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0580_CHECK_TYPE_06_OVERFLOW : PROC (ZF_HIS_CC REF
                                       CM_FY32_HIS_TY06_CTRS);

DCL ZQ_I    INT;

Z_TRACE := H'0580;

DO WITH ZF_HIS_CC -> ;

   DO FOR ZQ_I := 1 TO 55;
      CASE ZQ_I OF
      (1:2):
         IF B_FROM_C43_TO_C541(ZQ_I) = ZS_DPVAL_OVERFLOW
         THEN
         B_FROM_C43_TO_C541(ZQ_I) := ZS_DPVAL_INVALID;
      FI;

      (3:4):
         B_FROM_C46_TO_C45A(ZQ_I) := Q_S0840_CHECK_DPVAL
                                    (B_FROM_C46_TO_C45A(ZQ_I));

      (5:6):
         IF B_FROM_C48_TO_C47(ZQ_I) = ZS_DPVAL_OVERFLOW
         THEN
            B_FROM_C48_TO_C47(ZQ_I) := ZS_DPVAL_INVALID;
         FI;

      (8:9):
         IF B_FROM_C57_TO_C58(ZQ_I) = ZS_DPVAL_OVERFLOW
         THEN
            B_FROM_C57_TO_C58(ZQ_I) := ZS_DPVAL_INVALID;
         FI;

      (13:14):
         IF B_FROM_C53_TO_C561(ZQ_I) = ZS_DPVAL_OVERFLOW
         THEN
            B_FROM_C53_TO_C561(ZQ_I) := ZS_DPVAL_INVALID;
         FI;

      (16:17):
         IF B_FROM_C63_TO_C67(ZQ_I) = ZS_DPVAL_OVERFLOW
         THEN
            B_FROM_C63_TO_C67(ZQ_I) := ZS_DPVAL_INVALID;
         FI;

      (18:30):
         B_FROM_C470_TO_C585F(ZQ_I) := Q_S0840_CHECK_DPVAL
                                  (B_FROM_C470_TO_C585F(ZQ_I));

      (31:32):
         IF B_FROM_C541A_TO_C41B(ZQ_I) = ZS_DPVAL_OVERFLOW
         THEN
            B_FROM_C541A_TO_C41B(ZQ_I) := ZS_DPVAL_INVALID;
         FI;

      (33:39):
         B_FROM_C586A_TO_C411(ZQ_I) := Q_S0840_CHECK_DPVAL
                                    (B_FROM_C586A_TO_C411(ZQ_I));

      (41:55):
         B_FROM_C413_TO_C461(ZQ_I) := Q_S0840_CHECK_DPVAL
                                    (B_FROM_C413_TO_C461(ZQ_I));

      ELSE

      ESAC;
   OD;

   B_C42  := Q_S0840_CHECK_DPVAL(B_C42);

   B_C56  := Q_S0840_CHECK_DPVAL(B_C56);
   B_C55A := Q_S0840_CHECK_DPVAL(B_C55A);

   IF B_C51 = ZS_DPVAL_OVERFLOW THEN
      B_C51 := ZS_DPVAL_INVALID;
   FI;

   B_C52 := Q_S0840_CHECK_DPVAL(B_C52);
   B_C62 := Q_S0840_CHECK_DPVAL(B_C62);

   IF B_C412 = ZS_DPVAL_OVERFLOW THEN
      B_C412 := ZS_DPVAL_INVALID;
   FI;

OD;

END Q_S0580_CHECK_TYPE_06_OVERFLOW;
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0590_07_MAKE_RES_FILE_07                         */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY: NAIKA              DATE:          */
/*                                                                    */
/*     CREATION DATE: 96/11/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0110_GET_USER_BUF                          */
/*                      Q_S0120_GET_WRITE_BUF                         */
/*                      Q_S0160_READ_HIST_FILE                        */
/*                      Q_S0860_INCREM_PTR                            */
/*                      Q_S0840_CHECK_DPVAL                           */
/*                      Q_S0820_RECORD_FULL                           */
/*                      Q_S0830_CHECK_LAST_WRITE                      */
/*     CALLED FROM:                                                   */
/*                      Q_S0510_MAKE_RESULT_FILE                      */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0590_07_MAKE_RES_FILE_07 : PROC ( );

DCL ZQ_BUF              INT;
DCL ZQ_FILL_PTR         PTR;
DCL ZQ_GLOB             BOOL;
/*CR36/236932*/
DCL ZQ_RECORD_FULL      BOOL;
/*CR36/236932*/
DCL ZQ_HIS_BUFFER_RECS  INT;
DCL ZQ_I                M_TCU_TYPE_7;
DCL ZQ_IND_OBJ          INT;
DCL ZQ_IND_REC          INT;
DCL ZQ_PF               PTR;
DCL ZQ_PT               PTR;
DCL ZQ_REC              INT;
DCL ZQ_RES_RRN          INT;
DCL ZQ_START_REC_NO     INT;
DCL ZQ_START            INT;

NEWMODE ZM_BYTE_ARRAY_5 = ARRAY(1:5) M_BYTE;

 Z_TRACE := H'0590;

 /* NOTE THAT THE GENERIC HEADER IS ALWAYS IN THE FIRST RECORD */
 /* HENCE THE FIRST ITEM STARTS AT THE SECOND RECORD.          */
 ZQ_IND_REC:= 2;
 ZQ_GLOB := FALSE;
 /*CR36/236932*/
 ZQ_RECORD_FULL := FALSE;
 /*CR36/236932*/
 ZQ_IND_OBJ         := 1;
 ZQ_RES_RRN         := -1;
 ZQ_HIS_BUFFER_RECS := 42;

 DO WITH Z_HISTORY_FILE;
   ZB_TABLE_SIZE := SIZE(M_HIS_TYPE_07) * ZQ_HIS_BUFFER_RECS;
   Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                        ZB_TABLE_SIZE);
 OD;

 DO WITH Z_RESULT_FILE;
   ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
   Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
 OD;

 ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                -> ZM_RES_TYPE_07_ARR(ZQ_IND_REC).ZB_DATA;
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
 DO FOR ZQ_BUF:=0 TO (ZS_MAX_LAPD_PER_BSC/ZQ_HIS_BUFFER_RECS)-1;
/* END: ADD-WIPRO-B10-MR1-CHANGE */
    ZQ_START_REC_NO := ZQ_HIS_BUFFER_RECS * ZQ_BUF;

    Q_S0160_READ_HIST_FILE (->Z_HISTORY_FILE,
                            ZQ_HIS_BUFFER_RECS,
                            ZQ_START_REC_NO,
                            SIZE(M_HIS_TYPE_07));

    DO FOR ZQ_REC := 1 TO ZQ_HIS_BUFFER_RECS WHILE
                         Z_CPL_CODES = E_NULL_CODE;
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
       DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR
                          -> CM_FY32_HIS_TYPE_07_BUF(LONG_INT(ZQ_REC));
/* END: ADD-WIPRO-B10-MR1-CHANGE */

          IF B_LAPD_ID.B_SBL_TYP /= ZS_PM_NULL_SBLT THEN

             DO WITH ZQ_FILL_PTR -> ZM_RES_LAPD;
                ZB_TAG     := ZS_TYPE_07_LINK_TAG;
                ZB_LEN     := ZS_TYPE_07_LINK_LEN;
                /* THE  FOLLOWING IS THE INTEND BUT THE SOURCE HAS */
                /* GOT 5  BYTES ( WITH A UNFORTUNATE FILLER ) DUE  */
                /* TO CHILL ALINGMENT RULES THEREFORE THE TASK HERE*/
                /* IS TO GET RID OF THE 2ND BYTE AND COPY THE      */
                /* REST INTO A CONTIGUOUS 4 BYTE SPACE             */
                ZQ_PF := -> B_LAPD_ID;
                ZQ_PT := -> ZB_LAPD_LINK_ID;

                ZQ_PT->ZM_BYTE_ARRAY_5(1):= ZQ_PF->ZM_BYTE_ARRAY_5(1);
                ZQ_PT->ZM_BYTE_ARRAY_5(2):= ZQ_PF->ZM_BYTE_ARRAY_5(3);
                ZQ_PT->ZM_BYTE_ARRAY_5(3):= ZQ_PF->ZM_BYTE_ARRAY_5(4);
                ZQ_PT->ZM_BYTE_ARRAY_5(4):= ZQ_PF->ZM_BYTE_ARRAY_5(5);

                DO FOR ZQ_I := E_L1_1_NBR_INFO_FRM_XMT TO
                               E_L1_18_TIME_LAPD_CONG;
                   B_HIS_CC_MT_07(ZQ_I) := Q_S0840_CHECK_DPVAL
                                           (B_HIS_CC_MT_07(ZQ_I));
                OD;
                ZB_CTRS := B_HIS_CC_MT_07;
             OD; /* ZM_RES_LAPD */

             ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                               SIZE(ZM_RES_LAPD));

             IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                    ZQ_IND_REC,
                                    ZQ_RES_RRN,
                                    E_HIST_NORM)
                THEN

                ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                                 -> ZM_RES_TYPE_07_ARR
                                    (ZQ_IND_REC).ZB_DATA;
            /*CR36/236932*/
               ZQ_RECORD_FULL := TRUE;
            ELSE
               ZQ_RECORD_FULL := FALSE;
            /*CR36/236932*/                                    
             FI;

          FI; /* IF LAPD /= NULL */
       OD;  /* Z_HISTORY_FILE .. */
    OD; /* FOR ZQ_REC */
    ZQ_START := 0;
 OD; /* FOR ZQ_BUF */

 Q_S0830_CHECK_LAST_WRITE(ZQ_IND_OBJ,
                          ZQ_IND_REC,
                          ZQ_RES_RRN);
/*CR36/236932*/
IF ZQ_RECORD_FULL
  THEN
    Z_RES_RRN := ZQ_RES_RRN + ZQ_IND_REC - 1;
  ELSE
    Z_RES_RRN := ZQ_RES_RRN + ZQ_IND_REC;
FI;                          
/*CR36/236932*/
END Q_S0590_07_MAKE_RES_FILE_07;
/*CR36/236932*/
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0806_MAKE_RES_FILE_7_2                           */
/*                                                                    */
/*     PROGRAMMER: SHAILESH                                           */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE:                                                 */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*     CALLED FROM:                                                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0806_MAKE_RES_FILE_7_2 : PROC ( );
DCL ZQ_START_REC_NO     INT;
DCL ZQ_IND_OBJ          INT;
DCL ZQ_RES_RRN          INT;
DCL ZQ_IND_REC          INT;
DCL ZQ_REC              M_BYTE;
DCL ZQ_FILL_PTR         PTR;
DCL ZQ_HIS_REC_IN_BUFF  INT;
DCL ZQ_BUF              INT;
DCL ZQ_I                CM_TYPE_7_CTRS_2;
DCL ZQ_GSL_ID           INT;
DCL ZQ_RECORD_FULL      BOOL;


Z_TRACE := H'0751;

ZQ_IND_REC         := 1;
ZQ_IND_OBJ         := 1;
ZQ_RES_RRN         := Z_RES_RRN;
ZQ_HIS_REC_IN_BUFF := 7;
ZQ_RECORD_FULL := FALSE;

DO WITH Z_HISTORY_FILE;
  ZB_TABLE_SIZE := SIZE(CM_HIS_TYPE_07_2) 
      * ZQ_HIS_REC_IN_BUFF;
  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                       ZB_TABLE_SIZE);
OD; /* WITH Z_HISTORY_TABLE */

DO WITH Z_RESULT_FILE;
 ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
 Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
          -> ZM_RES_TYPE_07_ARR(ZQ_IND_REC).ZB_DATA;

DO FOR ZQ_BUF := 0 TO (CM_FY32_MAX_GSL_PER_BSC /
                        ZQ_HIS_REC_IN_BUFF )

   WHILE Z_CPL_CODES = E_NULL_CODE;

   ZQ_START_REC_NO:= ZQ_HIS_REC_IN_BUFF * ZQ_BUF;

   IF ZQ_START_REC_NO + ( ZQ_HIS_REC_IN_BUFF - 1 ) >
                          CM_FY32_MAX_GSL_PER_BSC THEN

      /* LAST HISTORY BUFFER TO BE READ FOR THIS MEAS TYPE */
      ZQ_HIS_REC_IN_BUFF := CM_FY32_MAX_GSL_PER_BSC REM
                           ZQ_HIS_REC_IN_BUFF;
      Z_HISTORY_FILE.ZB_TABLE_SIZE := SIZE(CM_HIS_TYPE_07_2)
                                       * ZQ_HIS_REC_IN_BUFF;
   FI;
   Q_S0160_READ_HIST_FILE (->Z_HISTORY_FILE,
                           ZQ_HIS_REC_IN_BUFF,
                           ZQ_START_REC_NO,
                           SIZE(CM_HIS_TYPE_07_2));

   DO FOR ZQ_REC := 1 TO ZQ_HIS_REC_IN_BUFF WHILE
                                 Z_CPL_CODES = E_NULL_CODE;
      DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR
                        -> CM_FY32_HIS_TYPE_072_BUF(ZQ_REC);
         IF B_GSL_NBR /= H'FFFF
         THEN
            DO WITH ZQ_FILL_PTR -> ZM_TYPE_7_2_DATA;
               ZB_TAG       := ZS_TYPE_7_2_GSL_TAG;
               ZB_LEN       := ZS_TYPE_7_2_GSL_LEN;
               ZB_GSL_NBR    := B_GSL_NBR;
               DO FOR ZQ_I := E_MT_7_CTR_L2_1 
                                     TO E_MT_7_CTR_L2_7;
                DO WITH B_CTRS_MT_7_2;
                 B_L2_1_TO_L2_7(ZQ_I) := 
                   Q_S0840_CHECK_DPVAL(B_L2_1_TO_L2_7(ZQ_I));
                OD;
               OD;
               ZB_7_2_CTRS :=  B_CTRS_MT_7_2;
            OD; /* DO WITH ZQ_FILL_PTR */
            ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                               SIZE(ZM_TYPE_7_2_DATA));
            IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                   ZQ_IND_REC,
                                   ZQ_RES_RRN,
                                   E_HIST_7_2)
               THEN
               ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                    -> ZM_RES_TYPE_07_ARR(ZQ_IND_REC).ZB_DATA;
               ZQ_RECORD_FULL := TRUE;
            ELSE
               ZQ_RECORD_FULL := FALSE;
            FI;
         FI;
      OD; /* DO WITH Z_HIST */
   OD; /* DO FOR ZQ_REC */
OD; /* DO FOR ZQ_BUF */

Q_S0830_CHECK_LAST_WRITE(ZQ_IND_OBJ,
                         ZQ_IND_REC,
                         ZQ_RES_RRN);
END Q_S0806_MAKE_RES_FILE_7_2;

/* BEGIN: CR 605005 */
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0807_MAKE_RES_FILE_110_14                        */
/*                                                                    */
/*     PROGRAMMER: KARTEEK                    					      */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 12/05/04                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59YX_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*     CALLED FROM:                                                   */
/*			Q_S0370_STATE_MACHINE                                     */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0807_MAKE_RES_FILE_110_14:PROC();

DCL ZQ_RES_RRN          INT;
DCL ZQ_IND_REC          INT;
DCL ZQ_FILL_PTR         PTR;
/*DCL ZQ_SPECIFIC_PM_FLAG    BOOL;

ZQ_SPECIFIC_PM_FLAG := TRUE; */

Z_TRACE := H'0807;

ZQ_IND_REC         := 1;
ZQ_RES_RRN         := Z_RES_RRN;

DO WITH Z_RESULT_FILE;
  ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
  Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

DO WITH Z_HISTORY_FILE;
  ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_110_14_BUF);
  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                       ZB_TABLE_SIZE);
OD; /* WITH Z_HISTORY_TABLE */

Q_S0160_READ_HIST_FILE (->Z_HISTORY_FILE,
                          1,
                          0,
                          SIZE(CM_FY32_HIS_TYPE_110_14));

ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
               -> ZM_RES_TYPE_110_14_REC.ZB_DATA;

    /* CR605005 NEW CHANGE - begin */
DO WITH Z_FA_BSS_PAR2.ZB_TUPLE_PTR->
                      ZM_R_BSS_PAR2;
			   
IF Z_CPL_CODES=E_NULL_CODE AND D_EN_SP_PM
   THEN
   /* CR605005 NEW CHANGE - end */

  DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR -> CM_FY32_HIS_TYPE_110_14_BUF;
    DO WITH ZQ_FILL_PTR -> ZM_TYPE_110_14_DATA;
      ZB_TAG                := ZS_TYPE_110_14_BSC_TAG;
      ZB_LEN                := ZS_TYPE_110_14_BSC_LEN;	

	  DO WITH B_CTRS_PT14_MT_110;
        IF B_MC1540_TO_MC1541(E_MT_110_CTR_MC1540) = ZS_DPVAL_OVERFLOW
        THEN
          B_MC1540_TO_MC1541(E_MT_110_CTR_MC1540) := ZS_DPVAL_INVALID;
        FI;
	  
	    IF B_MC1540_TO_MC1541(E_MT_110_CTR_MC1541) = ZS_DPVAL_OVERFLOW
        THEN
          B_MC1540_TO_MC1541(E_MT_110_CTR_MC1541) := ZS_DPVAL_INVALID;
        FI;
	  
        ZB_110_14_CTRS.B_MC1540_TO_MC1541(E_MT_110_CTR_MC1540) := 	  
	                    B_MC1540_TO_MC1541(E_MT_110_CTR_MC1540);
						
		ZB_110_14_CTRS.B_MC1540_TO_MC1541(E_MT_110_CTR_MC1541) := 	  
	                    B_MC1540_TO_MC1541(E_MT_110_CTR_MC1541);				
			
      OD;
    OD;
  OD;
 
 
  Q_S0500_FILL_REC_HEAD(->Z_RESULT_FILE.ZB_TABLE_PTR
                        ->ZM_RES_TYPE_110_14_REC.ZB_HEADER,
                          ZQ_RES_RRN+ZQ_IND_REC,
                          E_GPMR);

  Q_S0200_WRITE_RES_FILE(ZQ_IND_REC,LONG_INT( ZQ_RES_RRN+1));
  /* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
  Z_RES_RRN     := ZQ_RES_RRN + ZQ_IND_REC ;
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */  
FI;
OD;

END Q_S0807_MAKE_RES_FILE_110_14;  

/* END : CR 605005 */

/*CR36/236932*/
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0600_08_MAKE_RES_FILE_08                         */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 96/11/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0110_GET_USER_BUF                          */
/*                      Q_S0120_GET_WRITE_BUF                         */
/*                      Q_S0160_READ_HIST_FILE                        */
/*                      Q_S0860_INCREM_PTR                            */
/*                      Q_S0500_FILL_REC_HEAD                         */
/*                      Q_S0200_WRITE_RES_FILE                        */
/*     CALLED FROM:                                                   */
/*                      Q_S0510_MAKE_RESULT_FILE                      */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0600_08_MAKE_RES_FILE_08 : PROC ( );

DCL ZQ_IND_OBJ         INT;
DCL ZQ_RES_RRN         INT;
DCL ZQ_IND_REC         INT;
DCL ZQ_REC             M_BYTE;
DCL ZQ_I               M_TYPE_08_CTRS;
DCL ZQ_FILL_PTR        PTR;

Z_TRACE := H'0600;

/* NOTE THAT THE GENERIC HEADER IS ALWAYS IN THE FIRST RECORD */
/* HENCE THE FIRST ITEM STARTS AT THE SECOND RECORD.          */
ZQ_IND_REC:= 2;
ZQ_IND_OBJ:= 1;
ZQ_RES_RRN:= -1;

DO WITH Z_HISTORY_FILE;
  ZB_TABLE_SIZE := SIZE(M_HIS_TYPE_08) * ZS_MAX_X25_LINKS;
  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                       ZB_TABLE_SIZE);
OD; /* WITH Z_HISTORY_TABLE */

DO WITH Z_RESULT_FILE;
  ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
  Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

Q_S0160_READ_HIST_FILE(->Z_HISTORY_FILE,
                       ZS_MAX_X25_LINKS,
                       ZS_FIRST_HIST_REC,
                       SIZE(M_HIS_TYPE_08));

IF Z_CPL_CODES=E_NULL_CODE
   THEN
   ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                  -> ZM_RES_TYPE_08_ARR(ZQ_IND_REC).ZB_DATA;

   DO FOR ZQ_REC := 1 TO ZS_MAX_X25_LINKS WHILE
                                       Z_CPL_CODES = E_NULL_CODE;
      DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR->
                       CM_FY32_HIS_TYPE_08_BUF(ZQ_REC);
         IF B_HIS_DATA_08.B_LINK_ID /= M_LCE_ID_NULL
            THEN
            DO WITH ZQ_FILL_PTR -> ZM_X25_RES_MASK;
               ZB_TAG      := ZS_TYPE_08_LINK_TAG;
               ZB_LEN      := ZS_TYPE_08_LINK_LEN;
               DO FOR ZQ_I := E_08_SUCC_INC_CALLS TO
                              E_08_UNSUCC_OTG_CALLS;
                  IF B_HIS_DATA_08.B_HIS_CC_MT_08(ZQ_I) =
                     ZS_DPVAL_OVERFLOW THEN
                     B_HIS_DATA_08.B_HIS_CC_MT_08(ZQ_I)
                                     := ZS_DPVAL_INVALID ;
                  FI;
               OD;
               ZB_COUNTERS := B_HIS_DATA_08;
            OD;
            ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                             SIZE(ZM_X25_RES_MASK));
         FI;
      OD; /* WITH Z_HISTORY_FILE.ZB_ .. */
   OD; /* FOR ZQ_REC */

   Q_S0500_FILL_REC_HEAD(->Z_RESULT_FILE.ZB_TABLE_PTR
                         -> ZM_RES_TYPE_08_ARR(ZQ_IND_REC).ZB_HEADER,
                            ZQ_IND_REC-1,/* THIS REMAINS TO BE TRUE */
                                         /* AS LONG AS RESULT FILE  */
                                         /* HAS LESS THAN 11 RECORDS*/
                                         /* AT THE MOMENT ONLY 2    */
                            E_GPMR);

   				/*START: CRI00611721 */
   Q_S0200_WRITE_RES_FILE(ZQ_IND_REC,LONG_INT(ZQ_RES_RRN+1));
				/*END:  CRI00611721 */

FI;

END Q_S0600_08_MAKE_RES_FILE_08;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0610_09_MAKE_RES_FILE_09                         */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY: A.H.SWANN          DATE: 97/10/21 */
/*                                                                    */
/*     CREATION DATE: 96/11/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0110_GET_USER_BUF                          */
/*                      Q_S0120_GET_WRITE_BUF                         */
/*                      Q_S0160_READ_HIST_FILE                        */
/*                      Q_S0860_INCREM_PTR                            */
/*                      Q_S0620_CHECK_TYPE_09_OVERFLOW                */
/*                      Q_S0820_RECORD_FULL                           */
/*                      Q_S0500_FILL_REC_HEAD                         */
/*                      Q_S0840_CHECK_DPVAL                           */
/*                      Q_S0200_WRITE_RES_FILE                        */
/*     CALLED FROM:                                                   */
/*                      Q_S0510_MAKE_RESULT_FILE                      */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0610_09_MAKE_RES_FILE_09 : PROC ( );

DCL ZQ_REC             M_BYTE;
DCL ZQ_IND_OBJ         INT;
DCL ZQ_RES_RRN         INT;
DCL ZQ_IND_REC         INT;
DCL ZQ_FILL_PTR        PTR;
DCL ZQ_LINK_PRES_FLAG  BOOL;


Z_TRACE := H'0610;

/* NOTE THAT THE GENERIC HEADER IS ALWAYS IN THE FIRST RECORD */
/* HENCE THE FIRST ITEM STARTS AT THE SECOND RECORD.          */
ZQ_IND_REC := 2;
ZQ_IND_OBJ := 1;
ZQ_RES_RRN := -1;
/* ER2887 */
ZQ_LINK_PRES_FLAG := FALSE;
/*ER 2887 */

DO WITH Z_HISTORY_FILE;
  ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_09) *
                        CM_FY32_PM_MAX_NBR_DTC_N7;
  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                       ZB_TABLE_SIZE);
OD; /* WITH Z_HISTORY_TABLE */

DO WITH Z_RESULT_FILE;
  ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
  Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

Q_S0160_READ_HIST_FILE(->Z_HISTORY_FILE,
                       CM_FY32_PM_MAX_NBR_DTC_N7,
                       ZS_FIRST_HIST_REC,
                       SIZE(CM_FY32_HIS_TYPE_09));
                    
IF Z_CPL_CODES=E_NULL_CODE
   THEN
   ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                  -> ZM_RES_TYPE_09_ARR(ZQ_IND_REC).ZB_DATA;
   DO FOR ZQ_REC := 1 TO CM_FY32_PM_MAX_NBR_DTC_N7 WHILE
                                   Z_CPL_CODES = E_NULL_CODE;
      DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR ->
                       CM_FY32_HIS_TYPE_09_BUF(ZQ_REC);
         IF B_HIS_LINK_MEAS.B_LINK_ID /= ZS_NULL_CIC
            THEN
            /*ER2887*/
            ZQ_LINK_PRES_FLAG := TRUE;
            /*ER2887*/
            DO WITH ZQ_FILL_PTR -> ZM_NR7_RES_LINK;
               ZB_TAG      := ZS_TYPE_09_N7_TAG;
               ZB_LEN      := ZS_TYPE_09_N7_LEN;
               Q_S0620_CHECK_TYPE_09_OVERFLOW(->B_HIS_LINK_MEAS);
               ZB_COUNTERS := B_HIS_LINK_MEAS;
            OD;
            ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                             SIZE(ZM_NR7_RES_LINK));

            IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                   ZQ_IND_REC,
                                   ZQ_RES_RRN,
                                   E_HIST_NORM)
               THEN
               ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                              -> ZM_RES_TYPE_09_ARR
                                 (ZQ_IND_REC).ZB_DATA;
            FI;

         FI; /* NOT NULL CIC */
      OD; /* WITH HISTORY FILE */
   OD; /* FOR REC IN BUFFER */

   IF Z_CPL_CODES=E_NULL_CODE AND ZQ_LINK_PRES_FLAG
      THEN
      Q_S0500_FILL_REC_HEAD(->Z_RESULT_FILE.ZB_TABLE_PTR
                            ->ZM_RES_TYPE_09_ARR(ZQ_IND_REC).ZB_HEADER,
                            ZQ_RES_RRN+ZQ_IND_REC,
                            E_GPMR);
      DO WITH ZQ_FILL_PTR -> ZM_NR7_RES_LINK_SET;
         ZB_TAG := ZS_TYPE_09_LINK_TAG;
         ZB_LEN := ZS_TYPE_09_LINK_LEN;
         DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR->
                         CM_FY32_HIS_TYPE_09_BUF(1);
            B_HIS_LINK_SET.B_N42 := Q_S0840_CHECK_DPVAL
                                       (B_HIS_LINK_SET.B_N42);
            ZB_COUNTERS := B_HIS_LINK_SET;
         OD;
      OD;

      				/*START: CRI00611721 */
      Q_S0200_WRITE_RES_FILE(ZQ_IND_REC, LONG_INT(ZQ_RES_RRN+1));
				/*END: CRI00611721 */
   FI; /* Z_CPL_CODES =E_NULL_CODE */

FI; /* Z_CPL_CODES =E_NULL_CODE */

END Q_S0610_09_MAKE_RES_FILE_09;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0620_CHECK_TYPE_09_OVERFLOW                      */
/*                                                                    */
/*     PROGRAMMER: A.H.SWANN                                          */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/10/09                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       CHECK FOR OVERFLOW COUNTERS IN TYPE 9                        */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_HIS_CC PTR                                 */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0840_CHECK_DPVAL                           */
/*     CALLED FROM:                                                   */
/*                      Q_S0610_09_MAKE_RES_FILE_09                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0620_CHECK_TYPE_09_OVERFLOW : PROC (ZF_HIS_CC PTR );

DCL ZQ_I    RANGE (E_MT_09_CTR_N1_1:E_MT_09_CTR_N3_5);

Z_TRACE := H'0620;

DO WITH ZF_HIS_CC -> CM_FY32_HIS_LINK_MEAS;
   DO FOR ZQ_I := E_MT_09_CTR_N1_1 TO E_MT_09_CTR_N3_5;
      CASE ZQ_I OF
      (E_MT_09_CTR_N1_1):
         B_N11  := Q_S0840_CHECK_DPVAL(B_N11);

      (E_MT_09_CTR_N1_2:E_MT_09_CTR_N3_7):
         IF B_FROM_N12_TO_N37(ZQ_I) = ZS_DPVAL_OVERFLOW
            THEN
            B_FROM_N12_TO_N37(ZQ_I) := ZS_DPVAL_INVALID;
         FI;
/*
      (E_MT_09_CTR_N2_7:E_MT_09_CTR_N3_7):
         IF B_FROM_N12_TO_N37(ZQ_I) = ZS_DPVAL_OVERFLOW
            THEN
            B_FROM_N12_TO_N37(ZQ_I) := ZS_DPVAL_INVALID;
         FI;
*/
      (E_MT_09_CTR_N3_10):
         B_N310 := Q_S0840_CHECK_DPVAL(B_N310);

      (E_MT_09_CTR_N3_11):
         IF B_N311  = ZS_DPVAL_OVERFLOW THEN
            B_N311 := ZS_DPVAL_INVALID;
         FI;

      (E_MT_09_CTR_N1_8:E_MT_09_CTR_N3_5):
         B_FROM_N18_TO_N35(ZQ_I) := Q_S0840_CHECK_DPVAL
                                    (B_FROM_N18_TO_N35(ZQ_I));

      ESAC;
   OD;
OD;

END Q_S0620_CHECK_TYPE_09_OVERFLOW;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0630_18_MAKE_RES_FILE_18                         */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY: A.H.SWANN          DATE: 97/10/21 */
/*                                                                    */
/*     CREATION DATE: 96/11/05                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*          COPY THE CONTENT OF THE HISTORY FILE FOR BSS COUNTERS 18  */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0110_GET_USER_BUF                          */
/*                      Q_S0120_GET_WRITE_BUF                         */
/*                      Q_S0160_READ_HIST_FILE                        */
/*                      Q_S0840_CHECK_DPVAL                           */
/*                      Q_S0500_FILL_REC_HEAD                         */
/*                      Q_S0200_WRITE_RES_FILE                        */
/*     CALLED FROM:                                                   */
/*                      Q_S0510_MAKE_RESULT_FILE                      */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0630_18_MAKE_RES_FILE_18 : PROC ( );

DCL ZQ_RES_RRN         INT;
DCL ZQ_IND_REC         INT;
DCL ZQ_FILL_PTR        PTR;
DCL ZQ_C               M_DTC_TRF_CNTRS_TYPE18;

Z_TRACE := H'0630;

/* NOTE THAT THE GENERIC HEADER IS ALWAYS IN THE FIRST RECORD */
/* HENCE THE FIRST ITEM STARTS AT THE SECOND RECORD.          */
ZQ_IND_REC  := 2;
ZQ_RES_RRN  := -1;

DO WITH Z_HISTORY_FILE;
  ZB_TABLE_SIZE := SIZE(M_HIS_TYPE_18);
  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                       ZB_TABLE_SIZE);

OD; /* WITH Z_HISTORY_TABLE */

DO WITH Z_RESULT_FILE;
  ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
  Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

Q_S0160_READ_HIST_FILE(->Z_HISTORY_FILE,
                       1, 0,
                       SIZE(M_HIS_TYPE_18));

IF Z_CPL_CODES=E_NULL_CODE
   THEN

   /* ONLY ON RECORD IN HISTORY FILE */
   DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR -> M_HIS_TYPE_18;

      ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                     -> ZM_RES_TYPE_18_ARR(ZQ_IND_REC).ZB_DATA;

      DO WITH ZQ_FILL_PTR -> ZM_RES_TYPE_18;
         ZB_TAG    := ZS_TYPE_18_GLOB_TAG;
         ZB_LEN    := ZS_TYPE_18_GLOB_LEN;
        /*DO FOR ZQ_C := E_C180A_NBR_CLR_REQ_RADIO_MESS_F TO */
    /*ZQ02*/          /* E_C182_NBR_N7_CLEAR_REQ_EST_PHAS; */
  /*  FOR AUPOIP*/
	     /*BEGIN:AUPOIP*/
		 DO FOR ZQ_C := E_C180A_NBR_CLR_REQ_RADIO_MESS_F 
			/*BEGIN : FR36/307401 */
				/*TO E_C181P_NB_ASFAIL_CAL_ID_ALOC;*/
				TO E_C182_NBR_N7_CLEAR_REQ_EST_PHAS;
			/*END : FR36/307401*/
		 /*END:AUPOIP*/
    
            B_HIS_CC(ZQ_C) := Q_S0840_CHECK_DPVAL(B_HIS_CC(ZQ_C));
         OD;/*DO : ZQ_C*/
		/*BEGIN : FR36/307401*/
		DO FOR ZQ_C := E_C181M_NB_ASFAIL_RQNTSUP_UNAV
			    TO E_C181N_NBASFAIL_CDCNTSUP_UNAV;
		DO WITH Z_FA_BSS_PAR2.ZB_TUPLE_PTR->
		      ZM_R_BSS_PAR2;
	       IF (D_EN_AUOIP = TRUE)
		THEN 
                     B_HIS_CC(ZQ_C) := 
			Q_S0840_CHECK_DPVAL(B_HIS_CC(ZQ_C));
		ELSE 
		     B_HIS_CC(ZQ_C).B_HIGH := 0;
		     B_HIS_CC(ZQ_C).B_LOW := 0;
		FI;
		OD;
		OD;/*DO : ZQ_C*/
		ZQ_C := E_C181O_NB_ASFAIL_REDLEVNTSUP;
		B_HIS_CC(ZQ_C).B_HIGH := 0;
		B_HIS_CC(ZQ_C).B_LOW := 0;
		
		ZQ_C := E_C181P_NB_ASFAIL_CAL_ID_ALOC;
		DO WITH Z_FA_BSS_PAR2.ZB_TUPLE_PTR->
		      ZM_R_BSS_PAR2;
	       IF (D_EN_AUOIP = TRUE)
		THEN 
                     B_HIS_CC(ZQ_C) := 
			Q_S0840_CHECK_DPVAL(B_HIS_CC(ZQ_C));
		ELSE 
		     B_HIS_CC(ZQ_C).B_HIGH := 0;
		     B_HIS_CC(ZQ_C).B_LOW := 0;
		FI;
		OD;
		/*END : FR36/307401*/
         ZB_DATA := B_HIS_CC;
      OD; /* DO WITH ZQ_FILL_PTR */
   OD;

   Q_S0500_FILL_REC_HEAD(->Z_RESULT_FILE.ZB_TABLE_PTR
                         ->ZM_RES_TYPE_18_ARR(ZQ_IND_REC).ZB_HEADER,
                           ZQ_IND_REC-1,/* AS LONG AS RESULT FILE */
                                        /* HAS LESS THAN 8 RECORDS*/
                                        /* AT THE MOMENT ONLY 2   */
                           E_GPMR);

   				/*START: CRI00611721 */
   Q_S0200_WRITE_RES_FILE(ZQ_IND_REC, LONG_INT(ZQ_RES_RRN+1));
				/*END: CRI00611721 */

FI;

Z_RES_RRN     := ZQ_RES_RRN + ZQ_IND_REC;

END Q_S0630_18_MAKE_RES_FILE_18;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0635_MAKE_RES_FILE_18_2                          */
/*                                                                    */
/*     PROGRAMMER: A.H.SWANN                                          */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 96/11/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       CREATE THE FORTH (AND FINAL) TYPE 110 RESULT FILE BLOCK      */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0110_GET_USER_BUF                          */
/*                      Q_S0120_GET_WRITE_BUF                         */
/*                      Q_S0270_BEQ_SEQ_FROM_CELL_IDX                 */
/*                      Q_S0860_INCREM_PTR                            */
/*                      Q_S0260_GET_TRXS_OF_A_CELL                    */
/*                      Q_S0160_READ_HIST_FILE                        */
/*                      Q_S0850_CHECK_3_INT_CNTR                      */
/*                      Q_S0820_RECORD_FULL                           */
/*                      Q_S0830_CHECK_LAST_WRITE                      */
/*     CALLED FROM:                                                   */
/*                      Q_S0370_STATE_MACHINE                         */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0635_MAKE_RES_FILE_18_2 : PROC ( );
DCL ZQ_START_REC_NO     INT;
DCL ZQ_IND_OBJ          INT;
DCL ZQ_RES_RRN          INT;
DCL ZQ_IND_REC          INT;
DCL ZQ_REC              M_BYTE;
DCL ZQ_FILL_PTR         PTR;
DCL ZQ_HIS_REC_IN_BUFF  INT;
DCL ZQ_BUF              INT;
DCL ZQ_I                M_HIS_TYPE_18_CIC_CTRS;
DCL ZQ_AUPOIP_MODE      BOOL;
Z_TRACE := H'0635;

/* NOTE THAT THE GENERIC HEADER IS ALWAYS IN THE FIRST RECORD */
/* HENCE THE FIRST ITEM STARTS AT THE SECOND RECORD.          */
ZQ_IND_REC         := 1;
ZQ_IND_OBJ         := 1;
ZQ_RES_RRN         := Z_RES_RRN;
/*DEL by ZHUJ for ER6389 begin*/
/*
ZQ_HIS_REC_IN_BUFF := 72;
*/
/*DEL by ZHUJ end*/

/*ADD by ZHUJ for ER6389 begin*/
/*make sure CM_FY32_PM_MAX_CIC*SIZE(M_HIS_TYPE_18_CIC)<=2K*/
ZQ_HIS_REC_IN_BUFF := CM_FY32_PM_MAX_CIC;
/*ADD by ZHUJ end*/

/*BEGIN : FR36/307402*/
ZQ_AUPOIP_MODE := BOOL (Q_S4290_GET_AUOIP_MODE ());
/* F36/308661 - AUoIP is disabled */
DO WITH Z_FA_BSS_PAR2.ZB_TUPLE_PTR->
		      ZM_R_BSS_PAR2;
IF (D_EN_AUOIP = FALSE) OR (ZQ_AUPOIP_MODE)/*Update counters when TDM*/
THEN
/*END : FR36/307402*/

DO WITH Z_HISTORY_FILE;
  ZB_TABLE_SIZE := SIZE(M_HIS_TYPE_18_CIC) * ZQ_HIS_REC_IN_BUFF;
  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                       ZB_TABLE_SIZE);
OD; /* WITH Z_HISTORY_TABLE */

DO WITH Z_RESULT_FILE;
  ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
  Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
               -> ZM_RES_TYPE_29_ARR(ZQ_IND_REC).ZB_DATA;

/*DEL by ZHUJ for ER6389 begin*/
/*
DO FOR ZQ_BUF := 0 TO ((M_PM_MAX_BSC_CIC /
                      ZQ_HIS_REC_IN_BUFF)-1)
*/                      
/*DEL by ZHUJ end*/

/*ADD by ZHUJ for ER6389 begin*/
DO FOR ZQ_BUF := 0 TO ((CM_FY32_PM_MAX_BSC_CIC /
                      ZQ_HIS_REC_IN_BUFF)-1)
/*ADD by ZHUJ end*/
   WHILE Z_CPL_CODES = E_NULL_CODE;

   ZQ_START_REC_NO:= ZQ_HIS_REC_IN_BUFF * ZQ_BUF;

  /*DEL by ZHUJ for ER6389 begin*/
  /*
   IF ZQ_START_REC_NO + ( ZQ_HIS_REC_IN_BUFF - 1 ) >
                          M_PM_MAX_BSC_CIC THEN
  */
  /*DEL by ZHUJ end*/
  /*ADD by ZHUJ for ER6389 begin*/
   IF ZQ_START_REC_NO + ( ZQ_HIS_REC_IN_BUFF - 1 ) >
                          CM_FY32_PM_MAX_BSC_CIC THEN
  /*ADD by ZHUJ end*/
  
      /* LAST HISTORY BUFFER TO BE READ FOR THIS MEAS TYPE */
      /*DEL by ZHUJ for ER6389 begin*/
      /*
      ZQ_HIS_REC_IN_BUFF := M_PM_MAX_BSC_CIC REM
                           ZQ_HIS_REC_IN_BUFF;
      */
      /*DEL by ZHUJ end*/
      /*ADD by ZHUJ for ER6389 begin*/
      ZQ_HIS_REC_IN_BUFF := CM_FY32_PM_MAX_BSC_CIC REM
                           ZQ_HIS_REC_IN_BUFF;
      /*ADD by ZHUJ end*/
      Z_HISTORY_FILE.ZB_TABLE_SIZE := SIZE(M_HIS_TYPE_18_CIC)
                                       * ZQ_HIS_REC_IN_BUFF;
   FI;

   Q_S0160_READ_HIST_FILE (->Z_HISTORY_FILE,
                           ZQ_HIS_REC_IN_BUFF,
                           ZQ_START_REC_NO,
                           SIZE(M_HIS_TYPE_18_CIC));

   DO FOR ZQ_REC := 1 TO ZQ_HIS_REC_IN_BUFF WHILE
                                 Z_CPL_CODES = E_NULL_CODE;
      DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR
      /* BEGIN: ADD-WIPRO-B10-MR1-CHANGE ER263*/  
             /*-> CM_FY32_HIS_TYPE_18_CIC_BUF(ZQ_REC);*/
             -> CM_FY32_HIS_TYPE_18_CIC_BUF
                (ZM_MAX_CIC_VALUE(ZQ_REC));
      /* END: ADD-WIPRO-B10-MR1-CHANGE ER263*/ 

         IF B_CIC /= ZS_NULL_CIC  THEN
           DO WITH ZQ_FILL_PTR -> ZM_RES_TYPE_18_CIC;
               ZB_TAG       := ZS_TYPE_18_LINK_TAG;
               ZB_LEN       := ZS_TYPE_18_LINK_LEN;
               ZB_CIC       := B_CIC;
               DO FOR ZQ_I := E_MT_18_CTR_C750 TO E_MT_18_CTR_C751;
                 DO WITH B_CIC_CTRS;
                   ZB_CTRS.B_C750_TO_C751(ZQ_I) :=
                   Q_S0840_CHECK_DPVAL(B_C750_TO_C751(ZQ_I));
                 OD;
               OD;
         OD; /* DO WITH ZQ_FILL_PTR */
            ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                               SIZE(ZM_RES_TYPE_18_CIC));

            IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                   ZQ_IND_REC,
                                   ZQ_RES_RRN,
                                   E_HIST_18_2)
               THEN
               ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                           -> ZM_RES_TYPE_18_ARR(ZQ_IND_REC).ZB_DATA;
            FI;
         FI;
      OD; /* DO WITH Z_HIST */
   OD; /* DO FOR ZQ_REC */
OD; /* DO FOR ZQ_BUF */

/*BEGIN : FR36/307402*/
FI;
/*END : FR36/307402*/
/* F36/308661 - AUoIP is disabled */
OD;

Q_S0830_CHECK_LAST_WRITE(ZQ_IND_OBJ,
                         ZQ_IND_REC,
                         ZQ_RES_RRN);


END Q_S0635_MAKE_RES_FILE_18_2;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0640_19_MAKE_RES_FILE_19                         */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY: A.H.SWANN          DATE: 97/10/21 */
/*                                                                    */
/*     CREATION DATE: 96/11/05                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*          COPY THE CONTENT OF THE HISTORY FILE FOR ALL CELLS        */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0110_GET_USER_BUF                          */
/*                      Q_S0120_GET_WRITE_BUF                         */
/*                      Q_S0160_READ_HIST_FILE                        */
/*                      Q_S0270_BEQ_SEQ_FROM_CELL_IDX                 */
/*                      Q_S0860_INCREM_PTR                            */
/*                      Q_S0840_CHECK_DPVAL                           */
/*                      Q_S0820_RECORD_FULL                           */
/*                      Q_S0830_CHECK_LAST_WRITE                      */
/*     CALLED FROM:                                                   */
/*                      Q_S0510_MAKE_RESULT_FILE                      */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0640_19_MAKE_RES_FILE_19 : PROC ( );

DCL ZQ_START_REC_NO     INT;
DCL ZQ_RES_RRN          INT;
DCL ZQ_IND_OBJ          INT;
DCL ZQ_IND_REC          INT;
DCL ZQ_I                M_HIS_TYPE_19_CTRS;
DCL ZQ_BUF              M_BYTE;
DCL ZQ_REC              M_BYTE;
DCL ZQ_FILL_PTR         PTR;
DCL ZQ_CELL_ID          ZM_PM_BEQ_AND_SECTOR;
DCL ZQ_HIS_REC_IN_BUFF  INT;

Z_TRACE := H'0640;

/* NOTE THAT THE GENERIC HEADER IS ALWAYS IN THE FIRST RECORD */
/* HENCE THE FIRST ITEM STARTS AT THE SECOND RECORD.          */
ZQ_IND_REC         := 2;
ZQ_IND_OBJ         := 1;
ZQ_RES_RRN         := -1;
ZQ_HIS_REC_IN_BUFF := 20;

DO WITH Z_HISTORY_FILE;
  ZB_TABLE_SIZE := SIZE(M_HIS_TYPE_19) * ZQ_HIS_REC_IN_BUFF;
  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                       ZB_TABLE_SIZE);
OD; /* WITH Z_HISTORY_TABLE */

DO WITH Z_RESULT_FILE;
  ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
  Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
               -> ZM_RES_TYPE_19_ARR(ZQ_IND_REC).ZB_DATA;


/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
/*DO FOR ZQ_BUF := 0 TO (CM_FY32_MAX_CELLS_PER_BSC */
                      /*ZQ_HIS_REC_IN_BUFF)*/
DO FOR ZQ_BUF := 0 TO (CM_FY32_MAX_CELLS_PER_BSC /
                      ZQ_HIS_REC_IN_BUFF) -1
/* END: ADD-WIPRO-B10-MR1-CHANGE */
   WHILE Z_CPL_CODES = E_NULL_CODE;

   ZQ_START_REC_NO:= ZQ_HIS_REC_IN_BUFF * ZQ_BUF;

   IF ZQ_START_REC_NO + ( ZQ_HIS_REC_IN_BUFF - 1 ) >
                          CM_FY32_MAX_CELLS_PER_BSC THEN

      /* LAST HISTORY BUFFER TO BE READ FOR THIS MEAS TYPE */
      ZQ_HIS_REC_IN_BUFF := CM_FY32_MAX_CELLS_PER_BSC REM
                           ZQ_HIS_REC_IN_BUFF;
      Z_HISTORY_FILE.ZB_TABLE_SIZE := SIZE(M_HIS_TYPE_19)
                                       * ZQ_HIS_REC_IN_BUFF;
   FI;

   Q_S0160_READ_HIST_FILE (->Z_HISTORY_FILE,
                           ZQ_HIS_REC_IN_BUFF,
                           ZQ_START_REC_NO,
                           SIZE(M_HIS_TYPE_19));

   DO FOR ZQ_REC := 1 TO ZQ_HIS_REC_IN_BUFF WHILE
                                 Z_CPL_CODES = E_NULL_CODE;
      DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR
                        -> CM_FY32_HIS_TYPE_19_BUF(ZQ_REC);

         IF Q_S0270_BEQ_SEQ_FROM_CELL_IDX(B_CELL_ID,ZQ_CELL_ID)
            THEN
            DO WITH ZQ_FILL_PTR -> ZM_TYPE_19_DATA;
               ZB_TAG       := ZS_TYPE_19_CELL_TAG;
               ZB_LEN       := ZS_TYPE_19_CELL_LEN;
               ZB_BEQS_ID   := ZQ_CELL_ID;
               DO FOR ZQ_I := E_MT_19_CTR_C190 TO E_MT_19_CTR_C195;
                  B_HIS_CC_MT_19(ZQ_I) := Q_S0840_CHECK_DPVAL
                                          (B_HIS_CC_MT_19(ZQ_I));
               OD;
               ZB_COUNTERS := B_HIS_CC_MT_19;
            OD; /* WITH CELL DATA */

            ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                             SIZE(ZM_TYPE_19_DATA));

            IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                   ZQ_IND_REC,
                                   ZQ_RES_RRN,
                                   E_HIST_NORM)
               THEN
               ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                           -> ZM_RES_TYPE_19_ARR(ZQ_IND_REC).ZB_DATA;
            FI;
         FI;
      OD; /* DO WITH Z_HIST */
   OD; /* DO FOR ZQ_REC */
OD; /* DO FOR ZQ_BUF */

Q_S0830_CHECK_LAST_WRITE(ZQ_IND_OBJ,
                         ZQ_IND_REC,
                         ZQ_RES_RRN);

END Q_S0640_19_MAKE_RES_FILE_19;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0650_25_MAKE_RES_FILE_25                         */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY: A.H.SWANN          DATE: 97/10/21 */
/*                                                                    */
/*     CREATION DATE: 96/11/05                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*          COPY THE CONTENT OF THE HISTORY FILE FOR ALL N7.          */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0110_GET_USER_BUF                          */
/*                      Q_S0120_GET_WRITE_BUF                         */
/*                      Q_S0160_READ_HIST_FILE                        */
/*                      Q_S0860_INCREM_PTR                            */
/*                      Q_S0840_CHECK_DPVAL                           */
/*                      Q_S0820_RECORD_FULL                           */
/*                      Q_S0830_CHECK_LAST_WRITE                      */
/*     CALLED FROM:                                                   */
/*                      Q_S0510_MAKE_RESULT_FILE                      */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0650_25_MAKE_RES_FILE_25 : PROC ( );

DCL ZQ_IND_OBJ             INT;
DCL ZQ_RES_RRN             INT;
DCL ZQ_IND_REC             INT;
DCL ZQ_REC                 INT;
DCL ZQ_CTRS                M_SCCP_CNTR_NAME;
DCL ZQ_FILL_PTR            PTR;
DCL ZQ_FORCE_TO_PRINT_250  BOOL;

Z_TRACE := H'0650;

/* NOTE THAT THE GENERIC HEADER IS ALWAYS IN THE FIRST RECORD  */
/* HENCE THE FIRST ITEM STARTS AT THE SECOND RECORD.           */
ZQ_IND_REC            := 2;
ZQ_IND_OBJ            := 1;
ZQ_RES_RRN            := -1;
ZQ_FORCE_TO_PRINT_250 := FALSE;

DO WITH Z_HISTORY_FILE;
  ZB_TABLE_SIZE := SIZE(M_HIS_TYPE_25) * ZS_MAX_N7_LINKS;
  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                       ZB_TABLE_SIZE);
OD; /* WITH Z_HISTORY_TABLE */

DO WITH Z_RESULT_FILE;
  ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
  Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

Q_S0160_READ_HIST_FILE(->Z_HISTORY_FILE,
                       ZS_MAX_N7_LINKS,
                       ZS_FIRST_HIST_REC,
                       SIZE(M_HIS_TYPE_25));
ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
               -> ZM_RES_TYPE_25_ARR(ZQ_IND_REC).ZB_DATA;
/* THERE IS ONE HIS FILE AND RESULT FILE BUFFER */
IF Z_CPL_CODES=E_NULL_CODE
   THEN

   DO FOR ZQ_REC := 1 TO ZS_MAX_N7_LINKS WHILE
                                       Z_CPL_CODES = E_NULL_CODE;
      DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR
                 -> CM_FY32_HIS_TYPE_25_BUF(ZQ_REC).B_DATA_MT_25;
         IF B_LINK_ID /= ZS_NULL_CIC
            THEN
            ZQ_FORCE_TO_PRINT_250 := FALSE;
            DO WITH ZQ_FILL_PTR -> ZM_TYPE_25_SCCP_DATA;
               ZB_TAG      := ZS_TYPE_25_N7_TAG;
               ZB_LEN      := ZS_TYPE_25_N7_LEN;
               ZB_CIC      := B_LINK_ID;
               DO FOR ZQ_CTRS:= E_C251_SCCPC_UDT_TX TO
                                E_C153B_N7_CON_EST_FAIL_BSS;
                  B_HIS_CC(ZQ_CTRS) := Q_S0840_CHECK_DPVAL
                                       (B_HIS_CC(ZQ_CTRS));
               OD;
               ZB_COUNTERS := B_HIS_CC;
            OD; /* WITH ZM_TYPE_25...*/
            ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                             SIZE(ZM_TYPE_25_SCCP_DATA));
            IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                   ZQ_IND_REC,
                                   ZQ_RES_RRN,
                                   E_HIST_NORM)
               THEN
               ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                              -> ZM_RES_TYPE_25_ARR(ZQ_IND_REC).
                                   ZB_DATA;

            FI;
         FI; /* NOT NULL CIC */
      OD; /* WITH HISTORY FILE */
   OD; /* FOR REC IN BUFFER */
FI; /* Z_CPL_CODES =E_NULL_CODE */

IF ZQ_FORCE_TO_PRINT_250 AND
   ZQ_IND_OBJ = 1        AND
   ZQ_IND_REC = 2
THEN
  ZQ_IND_OBJ := ZQ_IND_OBJ + 1;

FI;

Q_S0830_CHECK_LAST_WRITE(ZQ_IND_OBJ,
                         ZQ_IND_REC,
                         ZQ_RES_RRN);

END Q_S0650_25_MAKE_RES_FILE_25;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0660_26_MAKE_RES_FILE_26                         */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY: DUHITA D          DATE: 04/05/21  */
/*                                                                    */
/*     CREATION DATE: 96/11/05                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*          COPY THE CONTENT OF THE HISTORY FILE FOR ONE CELL         */
/*          IF THIS CELL IS ADJACENT TO THE SERVING ONE.              */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0110_GET_USER_BUF                          */
/*                      Q_S0120_GET_WRITE_BUF                         */
/*                      Q_S0160_READ_HIST_FILE                        */
/*                      Q_S0400_GET_ADJ_CELL_IDXS_SERVIN              */
/*                      Q_S0270_BEQ_SEQ_FROM_CELL_IDX                 */
/*                      Q_S0860_INCREM_PTR                            */
/*                      Q_S0820_RECORD_FULL                           */
/*                      Q_S0410_MARK_ADJ_LAC_CI                       */
/*                      Q_S0420_GET_ADJ_CELLIDX_UNMARKED              */
/*                      Q_S0830_CHECK_LAST_WRITE                      */
/*     CALLED FROM:                                                   */
/*                      Q_S0510_MAKE_RESULT_FILE                      */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0660_26_MAKE_RES_FILE_26 : PROC ( );                                         

DCL ZQ_FILL_PTR            PTR;                                                 
DCL ZQ_FORCE_TO_PRINT_260  BOOL;                                                

DCL ZQ_IND_OBJ             INT;                                                 
DCL ZQ_IND_REC             INT;                                                 
DCL ZQ_REC                 M_BYTE;                                              
DCL ZQ_RES_RRN             INT;                                                 
DCL ZQ_NO_CELL             BOOL;                                                
DCL ZQ_HIS_REC_IN_BUFF     INT;                                                 
DCL ZQ_BUF                 INT;                                                 
DCL ZQ_START_REC_NO        INT;                                                 
DCL ZQ_HEADER_WRTTN        BOOL;                                                
DCL ZQ_START_POINT         INT;                                                 
                                          
DCL ZQ_INVALID             BOOL;                                                

DCL ZQ_I                   INT;
DCL ZQ_J                   INT;
DCL ZQ_BEQ_AND_SECTOR      ZM_PM_BEQ_AND_SECTOR;
/* WITTS 76 */
DCL ZQ_T26_PTR             PTR;
DCL ZQ_FOUND               BOOL;
/* END WITTS 76 */

Z_TRACE := H'0660;                                                              
                                                                                
/* NOTE THAT THE GENERIC HEADER IS ALWAYS IN THE FIRST RECORD  */               
/* HENCE THE FIRST ITEM STARTS AT THE SECOND RECORD.           */               
ZQ_IND_REC            := 2;                                                     
ZQ_FORCE_TO_PRINT_260 := FALSE;                                                 
ZQ_IND_OBJ            := 1;                                                     
ZQ_RES_RRN            := -1;                                                    
ZQ_NO_CELL            := FALSE; /* ZQ02 - SDON */                               

ZQ_HIS_REC_IN_BUFF    := 130;                                                    
ZQ_HEADER_WRTTN       := FALSE;                                                 

/* WITTS 76 */
                                                              
DO WITH Z_RESULT_FILE;
  ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;                       
  Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);                          
OD;                                                                             
                                                                                
ZQ_T26_PTR := Z_CCI_1_PTR;

ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
               -> ZM_RES_TYPE_26_ARR(ZQ_IND_REC).ZB_DATA;

/* WITTS 76 */
DO FOR ZQ_BUF := 0 TO 1;
  DO FOR ZQ_I := 1 TO 20;
    IF Z_CPL_CODES=E_NULL_CODE
    THEN                      
      DO WITH ZQ_T26_PTR ->                              
                       CM_FY32_HIS_TYPE_26_BUF_EL(0);
    /*  Q_S0400_GET_ADJ_CELL_IDXS_SERVIN(B_SERV_CELL);  */
        ZQ_INVALID  := B_INVALID;
        DO WITH ZQ_FILL_PTR ->ZM_CELL_HEAD_TYPE_26;                         
          /* CONVERT CELL IDX TO BEQ AND SECTOR */                         
          IF Q_S0270_BEQ_SEQ_FROM_CELL_IDX(B_SERV_CELL, 
                                           ZQ_BEQ_AND_SECTOR)                   
          THEN
            /* FR 36/133308 CHENZY BEGIN*/
            ZQ_FOUND := FALSE;
            DO FOR ZQ_REC := 1 TO 64 WHILE ZQ_FOUND = FALSE;
              DO WITH ZQ_T26_PTR -> 
                       CM_FY32_HIS_TYPE_26_BUF_EL(ZQ_REC);
/* BEGIN  DELETE-WIPRO-B9-P1-CHANGE */
/*
                IF B_ADJ_CELL.ZB_LAC /= ZS_NULL_CI AND                          
                   B_ADJ_CELL.ZB_CI /= ZS_NULL_LAC   
*/
/* END  DELETE-WIPRO-B9-P1-CHANGE */

/* BEGIN: ADD-WIPRO-B9-P1-CHANGE */
                IF B_ADJ_CELL.B_LAC /= ZS_NULL_LAC AND
                   B_ADJ_CELL.B_CI/= ZS_NULL_CI AND
                   B_ADJ_CELL.B_MCC/= ZS_NULL_MCC_DIGITS AND
                   B_ADJ_CELL.B_MNC/= ZS_NULL_MNC_DIGITS
/* END: ADD-WIPRO-B9-P1-CHANGE */
                THEN
                   ZQ_FOUND := TRUE;
                FI;
              OD;
            OD;
            IF ZQ_FOUND = TRUE
            THEN
              ZB_TAG := ZS_TYPE_26_GLOB_TAG;                           
              ZB_LEN := ZS_TYPE_26_GLOB_LEN;        
              ZB_SERV_CELL_ID.B_BEQ := ZQ_BEQ_AND_SECTOR.B_BEQ;                                     
              ZB_SERV_CELL_ID.B_SECTOR := 
                                    ZQ_BEQ_AND_SECTOR.B_SECTOR;                   
       /*   IF Z_ADJ_ST.ZB_ADJ_LAST = 0 
            THEN                              */
                /* THIS MEANS THERE ARE NO NEIGHBOURS.    */                
                /* IN THIS SITUATION BLOCK 260 IS REQUIRED */               
                /* TO APPEAR IN THE RESULT FILE.          */                
       /*     ZQ_FORCE_TO_PRINT_260 := TRUE;                              
            FI;                                 */                          
              ZQ_HEADER_WRTTN := TRUE;                                         
            /*ZQ_START_POINT := ZQ_START_POINT + 1;*/
            ELSE
              ZQ_HEADER_WRTTN := FALSE;
              ZQ_INVALID := TRUE;
            FI;
            /* FR 36/133308 CHENZY END*/
          ELSE
            ZQ_NO_CELL := TRUE;
          FI;
        OD; /* DO WITH ZQ_FILL_PTR */
        IF ZQ_HEADER_WRTTN = TRUE
        THEN
          ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                              SIZE(ZM_CELL_HEAD_TYPE_26));
          IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                ZQ_IND_REC,
                                ZQ_RES_RRN,
                                E_HIST_NORM)
          THEN
            ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                          -> ZM_RES_TYPE_26_ARR
                          (ZQ_IND_REC).ZB_DATA;
          FI;
        FI;                                                                 
      OD;                      
    FI;                                                                       
     
    IF (NOT ZQ_NO_CELL)                                                       
    THEN                                                                    
      IF (NOT ZQ_INVALID)
      THEN
        ZQ_FOUND := TRUE;
        DO FOR ZQ_REC := 1 TO 64
                    WHILE (ZQ_FOUND = TRUE 
                           AND Z_CPL_CODES = E_NULL_CODE);
          DO WITH ZQ_T26_PTR ->
                         CM_FY32_HIS_TYPE_26_BUF_EL(ZQ_REC);

/* BEGIN  DELETE-WIPRO-B9-P1-CHANGE */
/*
            IF B_ADJ_CELL.ZB_LAC /= ZS_NULL_CI AND                          
               B_ADJ_CELL.ZB_CI /= ZS_NULL_LAC     
*/
/* END  DELETE-WIPRO-B9-P1-CHANGE */

           /* BEGIN: ADD-WIPRO-B9-P1-CHANGE */
            IF B_ADJ_CELL.B_LAC /= ZS_NULL_LAC AND
               B_ADJ_CELL.B_CI /= ZS_NULL_CI AND
               B_ADJ_CELL.B_MCC /= ZS_NULL_MCC_DIGITS AND
               B_ADJ_CELL.B_MNC /= ZS_NULL_MNC_DIGITS      
           /* END: ADD-WIPRO-B9-P1-CHANGE */                   
            THEN
                                                                       
              ZQ_FILL_PTR ->ZM_IND_TYPE_26.ZB_TAG :=                       
                                    ZS_TYPE_26_SERV_TAG;                    
              ZQ_FILL_PTR ->ZM_IND_TYPE_26.ZB_LEN :=                       
                                    ZS_TYPE_26_SERV_LEN;                    
              ZQ_FILL_PTR ->ZM_IND_TYPE_26.ZB_CGI:= B_ADJ_CELL;         
              Q_S0665_CHECK_TYPE_26_OVERFLOW(->B_CTRS);                    
              ZQ_FILL_PTR ->ZM_IND_TYPE_26.ZB_CTRS := B_CTRS;              
                                                                               
              ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,               
                                  SIZE(ZM_IND_TYPE_26));                      
                                                                                
              IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,                           
                                     ZQ_IND_REC,                           
                                     ZQ_RES_RRN,                           
                                     E_HIST_NORM)                          
              THEN                                                       
                ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR               
                               -> ZM_RES_TYPE_26_ARR                       
                               (ZQ_IND_REC).ZB_DATA;                    
              FI;                                                          
                                                                                
              /* MARK THAT THIS NEIGHBOURING */                            
              /* CELL IDX IS PRINTED */                                    
            /*Q_S0410_MARK_ADJ_LAC_CI ( B_ADJ_CELL );WITTS 76*/                      
            ELSE
              ZQ_FOUND := FALSE;
            FI; /* IF CELL NOT NULL */                                      
          OD; /* WITH HISTORY FILE */                                        
        OD; /* FOR REC IN BUFFER */                                           
      FI;                                                                     
    FI; /* ZQ_NO_CELL */      
    ZQ_T26_PTR := ->ZQ_T26_PTR->CM_FY32_HIS_TYPE_26A_BUF(2);
    ZQ_HEADER_WRTTN := FALSE;
  OD; /* DO FOR ZQ_I */   
  ZQ_T26_PTR := Z_CCI_2_PTR;
OD;                                                                             

/* END WITTS 76 */

/*DO NOT REPORT THOSE NEIGHBOURING CELLS WHERE HANDOVERS DID NOT OCCUR*/        
                                                                                
IF NOT ZQ_NO_CELL AND                                                           
  Z_CPL_CODES = E_NULL_CODE                                                    
THEN                                                                         
  ZQ_FORCE_TO_PRINT_260 := TRUE;                                               
FI; /* Z_CPL_CODES =E_NULL_CODE */                                              
                                                                                
IF ZQ_FORCE_TO_PRINT_260 AND                                                    
   ZQ_IND_OBJ = 1        AND                                                    
   ZQ_IND_REC = 2        AND                                                    
   NOT ZQ_NO_CELL                                                               
THEN                                                                            
  ZQ_IND_OBJ := ZQ_IND_OBJ + 1;                                                 
FI;                                                                             
                                                                                
Q_S0830_CHECK_LAST_WRITE(ZQ_IND_OBJ,                                            
                         ZQ_IND_REC,                                            
                         ZQ_RES_RRN);                                           
                                                                                
END Q_S0660_26_MAKE_RES_FILE_26;                                                

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0665_CHECK_TYPE_26_OVERFLOW                      */
/*                                                                    */
/*     PROGRAMMER: A.H.SWANN                                          */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/10/09                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       CHECK FOR OVERFLOW COUNTERS IN TYPE 26                       */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_HIS_CC REF M_HIS_TYPE_26_CTRS              */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0840_CHECK_DPVAL                           */
/*     CALLED FROM:                                                   */
/*                      Q_S0660_26_MAKE_RES_FILE_26                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0665_CHECK_TYPE_26_OVERFLOW : PROC (ZF_HIS_CC REF
                                       M_HIS_TYPE_26_CTRS);

Z_TRACE := H'0665;

DO WITH ZF_HIS_CC -> ;

/*
   B_MT_26_FILLER.B_LOW    := ZS_DPVAL_INVALID ;
   B_MT_26_FILLER.B_HIGH    := ZS_DPVAL_INVALID ;
*/
   IF B_MT_26_CTR_720  = ZS_DPVAL_OVERFLOW THEN
      B_MT_26_CTR_720 := ZS_DPVAL_INVALID ;
   FI;
   IF B_MT_26_CTR_721  = ZS_DPVAL_OVERFLOW THEN
      B_MT_26_CTR_721 := ZS_DPVAL_INVALID ;
   FI;
   IF B_MT_26_CTR_722  = ZS_DPVAL_OVERFLOW THEN
      B_MT_26_CTR_722 := ZS_DPVAL_INVALID ;
   FI;
   IF B_MT_26_CTR_723  = ZS_DPVAL_OVERFLOW THEN
      B_MT_26_CTR_723 := ZS_DPVAL_INVALID ;
   FI;

   B_MT_26_CTR_724 := Q_S0840_CHECK_DPVAL(B_MT_26_CTR_724);
   B_MT_26_CTR_725 := Q_S0840_CHECK_DPVAL(B_MT_26_CTR_725);
   B_MT_26_CTR_727 := Q_S0840_CHECK_DPVAL(B_MT_26_CTR_727);
   B_MT_26_CTR_728 := Q_S0840_CHECK_DPVAL(B_MT_26_CTR_728);
OD;

END Q_S0665_CHECK_TYPE_26_OVERFLOW;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0670_27_MAKE_RES_FILE_27                         */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY: DUHITA D           DATE: 04/05/21 */
/*                                                                    */
/*     CREATION DATE: 96/11/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*      CREATES THE TYPE 27 RESULT FILE.                              */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0110_GET_USER_BUF                          */
/*                      Q_S0120_GET_WRITE_BUF                         */
/*                      Q_S0160_READ_HIST_FILE                        */
/*                      Q_S0270_BEQ_SEQ_FROM_CELL_IDX                 */
/*                      Q_S0860_INCREM_PTR                            */
/*                      Q_S0680_CHECK_TYPE_27_OVERFLOW                */
/*                      Q_S0820_RECORD_FULL                           */
/*                      Q_S0410_MARK_ADJ_LAC_CI                       */
/*                      Q_S0420_GET_ADJ_CELLIDX_UNMARKED              */
/*                      Q_S0830_CHECK_LAST_WRITE                      */
/*     CALLED FROM:                                                   */
/*                      Q_S0510_MAKE_RESULT_FILE                      */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0670_27_MAKE_RES_FILE_27 : PROC ( );

DCL ZQ_FILL_PTR            PTR;
DCL ZQ_FORCE_TO_PRINT_270  BOOL;
DCL ZQ_IND_OBJ             INT;
DCL ZQ_IND_REC             INT;
DCL ZQ_REC                 M_BYTE;
DCL ZQ_RES_RRN             INT;
DCL ZQ_NO_CELL             BOOL;
DCL ZQ_HIS_REC_IN_BUFF     INT;
DCL ZQ_BUF                 INT;
DCL ZQ_START_REC_NO        INT;
DCL ZQ_HEADER_WRTTN        BOOL;
DCL ZQ_START_POINT         INT;
DCL ZQ_NO_EMPTY_REC        BOOL;

/*BEGIN ADD-WIPRO-CHANGE-B8-FR 36/134802*/
DCL ZQ_TARG_CELL_ID ZM_PM_BEQ_AND_SECTOR;
DCL ZQ_FOUND BOOL;
/*END ADD-WIPRO-CHANGE-B8-FR 36/134802*/

Z_TRACE := H'0670;

/* NOTE THAT THE GENERIC HEADER IS ALWAYS IN THE FIRST RECORD    */
/* HENCE THE FIRST ITEM STARTS AT THE SECOND RECORD.             */
ZQ_IND_REC            := 2;
/* IT IS REQUIRED TO HAVE A RESULT FILE       */
/* EVEN IF THE TARGET  CELL HAS NO NEIGHBOURS */
ZQ_FORCE_TO_PRINT_270 := TRUE;
ZQ_IND_OBJ            := 1;
ZQ_RES_RRN            := -1;
ZQ_HIS_REC_IN_BUFF    := 13;
ZQ_HEADER_WRTTN       := FALSE;
ZQ_NO_EMPTY_REC       := TRUE;

DO WITH Z_HISTORY_FILE;
   ZB_TABLE_SIZE := SIZE(M_HIS_TYPE_27) * ZQ_HIS_REC_IN_BUFF;
   Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                        ZB_TABLE_SIZE);
OD; /* WITH Z_HISTORY_TABLE */

DO WITH Z_RESULT_FILE;
   ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
   Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
               -> ZM_RES_TYPE_27_ARR(ZQ_IND_REC).ZB_DATA;

DO FOR ZQ_BUF := 0 TO 4
   WHILE (Z_CPL_CODES = E_NULL_CODE AND ZQ_NO_EMPTY_REC);

   ZQ_START_REC_NO:= ZQ_HIS_REC_IN_BUFF * ZQ_BUF;

   Q_S0160_READ_HIST_FILE(->Z_HISTORY_FILE,
                          ZQ_HIS_REC_IN_BUFF,
                          ZQ_START_REC_NO,
                          SIZE(M_HIS_TYPE_27));
   ZQ_START_POINT := 0;
   IF Z_CPL_CODES=E_NULL_CODE
      THEN
      IF (ZQ_HEADER_WRTTN = FALSE)
         THEN
         DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR ->
                             CM_FY32_HIS_TYPE_27_BUF(0);
            DO WITH ZQ_FILL_PTR ->ZM_CELL_HEAD_TYPE_27;

/*
               Q_S0270_BEQ_SEQ_FROM_CELL_IDX
                                   (B_TARG_CELL,ZB_TARG_CELL_ID);
*/

               IF NOT Q_S0270_BEQ_SEQ_FROM_CELL_IDX
                                   (B_TARG_CELL,ZQ_TARG_CELL_ID)
               THEN

               /* ZQ1G - SDON */
/*
               IF ZB_TARG_CELL_ID.B_BEQ = 0 AND
                  ZB_TARG_CELL_ID.B_SECTOR = 1
                  THEN
*/
                  ZQ_NO_CELL := TRUE;
               ELSE
                  ZQ_NO_CELL := FALSE;
                  ZQ_FOUND := FALSE;
                  DO FOR ZQ_REC := 1 TO 12 WHILE NOT ZQ_FOUND;
                    DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR ->
                             CM_FY32_HIS_TYPE_27_BUF(ZQ_REC);

                      /* BEGIN  DELETE-WIPRO-B9-P1-CHANGE */
                      /*                   
                      IF B_ADJ_CELL.ZB_LAC /= ZS_NULL_LAC AND
                         B_ADJ_CELL.ZB_CI /= ZS_NULL_CI
                                                        */
                      /* END  DELETE-WIPRO-B9-P1-CHANGE */

                      /* BEGIN: ADD-WIPRO-B9-P1-CHANGE */
                      IF B_ADJ_CELL.B_LAC /= ZS_NULL_LAC AND
                         B_ADJ_CELL.B_CI /= ZS_NULL_CI AND
                         B_ADJ_CELL.B_MCC /= ZS_NULL_MCC_DIGITS AND
                         B_ADJ_CELL.B_MNC /= ZS_NULL_MNC_DIGITS
                      THEN
                      /* END: ADD-WIPRO-B9-P1-CHANGE */
                         ZQ_FOUND := TRUE;
                      FI;
                    OD;
                  OD;
                  IF ZQ_FOUND
                  THEN
                     ZB_TAG     := ZS_TYPE_27_GLOB_TAG;
                     ZB_LEN     := ZS_TYPE_27_GLOB_LEN;
                     ZB_TARG_CELL_ID.B_BEQ :=
                                    ZQ_TARG_CELL_ID.B_BEQ;
                     ZB_TARG_CELL_ID.B_SECTOR :=
                                    ZQ_TARG_CELL_ID.B_SECTOR;
                     /* CONVERT CELL IDX TO BEQ AND SECTOR */
                     ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                                   SIZE(ZM_CELL_HEAD_TYPE_27));
                  ELSE 
                    ZQ_FORCE_TO_PRINT_270 := FALSE;
                  FI;
               FI;
            OD; /* DO WITH ZQ_FILL_PTR */
            ZQ_HEADER_WRTTN := TRUE; 
            ZQ_START_POINT := 1;
         OD; /* WITH HISTORY FILE */
      FI;

      IF NOT ZQ_NO_CELL THEN     /* ZQ1G - SDON */
        DO FOR ZQ_REC := ZQ_START_POINT TO
                          (ZQ_HIS_REC_IN_BUFF -1) WHILE
                           (Z_CPL_CODES = E_NULL_CODE AND
                            ZQ_NO_EMPTY_REC);
           DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR ->
                           CM_FY32_HIS_TYPE_27_BUF(ZQ_REC);

              /* BEGIN  DELETE-WIPRO-B9-P1-CHANGE */
              /*
              IF B_ADJ_CELL.ZB_CI /= ZS_NULL_CI AND
                 B_ADJ_CELL.ZB_LAC /= ZS_NULL_LAC
                                                 */
              /* END  DELETE-WIPRO-B9-P1-CHANGE */

              /* BEGIN: ADD-WIPRO-B9-P1-CHANGE */
                 IF B_ADJ_CELL.B_LAC /= ZS_NULL_LAC AND
                    B_ADJ_CELL.B_CI /= ZS_NULL_CI AND
                    B_ADJ_CELL.B_MCC /= ZS_NULL_MCC_DIGITS AND
                    B_ADJ_CELL.B_MNC /= ZS_NULL_MNC_DIGITS
              /* END: ADD-WIPRO-B9-P1-CHANGE */
                 THEN
              /* BEGIN  DELETE-WIPRO-B9-P1-CHANGE */
               /*
                 IF B_ADJ_CELL.ZB_CI = 0 AND
                    B_ADJ_CELL.ZB_LAC = 0
                                               */
              /* END  DELETE-WIPRO-B9-P1-CHANGE */

              /* BEGIN: ADD-WIPRO-B9-P1-CHANGE */
                 IF B_ADJ_CELL.B_CI = 0 AND
                    B_ADJ_CELL.B_LAC = 0
              /* END: ADD-WIPRO-B9-P1-CHANGE */
                    THEN
                    ZQ_NO_EMPTY_REC := FALSE;
                 FI;
                 ZQ_FORCE_TO_PRINT_270 := FALSE;
                 ZQ_FILL_PTR ->ZM_IND_TYPE_27.ZB_TAG :=
                        ZS_TYPE_27_TARG_TAG;
                 ZQ_FILL_PTR ->ZM_IND_TYPE_27.ZB_LEN :=
                        ZS_TYPE_27_TARG_LEN;
                 ZQ_FILL_PTR ->ZM_IND_TYPE_27.ZB_CGI
                             := B_ADJ_CELL;
                 Q_S0680_CHECK_TYPE_27_OVERFLOW(->B_CTRS);
                 ZQ_FILL_PTR ->ZM_IND_TYPE_27.ZB_CTRS := B_CTRS;
                 ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                                     SIZE(ZM_IND_TYPE_27));

                 IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                        ZQ_IND_REC,
                                        ZQ_RES_RRN,
                                        E_HIST_NORM)
                    THEN
                    ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                                   -> ZM_RES_TYPE_27_ARR
                                      (ZQ_IND_REC).ZB_DATA;
                 FI;
              FI; /* IF CELL NOT NULL */
           OD; /* FOR REC IN BUFFER */
        OD;
      FI; /* ZQ_NO_CELL */
   FI;
OD;

IF ZQ_FORCE_TO_PRINT_270 AND
   ZQ_IND_OBJ = 1        AND
   ZQ_IND_REC = 2        AND
   NOT ZQ_NO_CELL  /* ZQ1G - SDON */
   THEN
   ZQ_IND_OBJ := ZQ_IND_OBJ + 1;

FI;

Q_S0830_CHECK_LAST_WRITE(ZQ_IND_OBJ,
                         ZQ_IND_REC,
                         ZQ_RES_RRN);

END Q_S0670_27_MAKE_RES_FILE_27;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0680_CHECK_TYPE_27_OVERFLOW                      */
/*                                                                    */
/*     PROGRAMMER: A.H.SWANN                                          */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/10/09                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       CHECK FOR OVERFLOW COUNTERS IN TYPE 26                       */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_HIS_CC REF M_HIS_TYPE_26_CTRS              */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0840_CHECK_DPVAL                           */
/*     CALLED FROM:                                                   */
/*                      Q_S0660_26_MAKE_RES_FILE_26                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0680_CHECK_TYPE_27_OVERFLOW : PROC (ZF_HIS_CC REF
                                       M_HIS_TYPE_27_CTRS);

Z_TRACE := H'0680;

DO WITH ZF_HIS_CC -> ;

   IF B_C730_INC_HO_ATPT  = ZS_DPVAL_OVERFLOW THEN
      B_C730_INC_HO_ATPT := ZS_DPVAL_INVALID ;
   FI;
   IF B_C731_INC_HO_SUCC  = ZS_DPVAL_OVERFLOW THEN
      B_C731_INC_HO_SUCC := ZS_DPVAL_INVALID ;
   FI;
   IF B_C733_UNSUCC_HO_SEIZ_FAIL  = ZS_DPVAL_OVERFLOW THEN
      B_C733_UNSUCC_HO_SEIZ_FAIL := ZS_DPVAL_INVALID ;
   FI;
   B_C734_INC_EMERGENCY_ATPT := Q_S0840_CHECK_DPVAL
                                (B_C734_INC_EMERGENCY_ATPT);
   B_C735_INC_BETTERCELL_ATPT := Q_S0840_CHECK_DPVAL
                                (B_C735_INC_BETTERCELL_ATPT);
   B_C737_INC_TRAFFIC_ATPT := Q_S0840_CHECK_DPVAL
                                (B_C737_INC_TRAFFIC_ATPT);
   B_C738_INC_FORCED_DR_ATPT := Q_S0840_CHECK_DPVAL
                                (B_C738_INC_FORCED_DR_ATPT);
   B_C753_INC_HO_OTHER_ATPT := Q_S0840_CHECK_DPVAL
                                (B_C753_INC_HO_OTHER_ATPT);
OD;

END Q_S0680_CHECK_TYPE_27_OVERFLOW;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0690_28_MAKE_RES_FILE_28                         */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY: A.H.SWANN          DATE: 97/10/21 */
/*                                                                    */
/*     CREATION DATE: 96/11/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*      CREATES THE TYPE 28 RESULT FILE.                              */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0110_GET_USER_BUF                          */
/*                      Q_S0120_GET_WRITE_BUF                         */
/*                      Q_S0160_READ_HIST_FILE                        */
/*                      Q_S0270_BEQ_SEQ_FROM_CELL_IDX                 */
/*                      Q_S0700_CHECK_TYPE_28_OVERFLOW                */
/*                      Q_S0820_RECORD_FULL                           */
/*                      Q_S0830_CHECK_LAST_WRITE                      */
/*     CALLED FROM:                                                   */
/*                      Q_S0510_MAKE_RESULT_FILE                      */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0690_28_MAKE_RES_FILE_28 : PROC ( );

DCL ZQ_START_REC_NO     INT;
DCL ZQ_IND_OBJ          INT;
DCL ZQ_RES_RRN          INT;
DCL ZQ_IND_REC          INT;
DCL ZQ_BUF              M_BYTE;
DCL ZQ_REC              M_BYTE;
DCL ZQ_FILL_PTR         PTR;
DCL ZQ_CELL_ID          ZM_PM_BEQ_AND_SECTOR;
DCL ZQ_HIS_REC_IN_BUFF  INT;

Z_TRACE := H'0690;

/* NOTE THAT THE GENERIC HEADER IS ALWAYS IN THE FIRST RECORD  */
/* HENCE THE FIRST ITEM STARTS AT THE SECOND RECORD.           */
ZQ_IND_REC         := 2;
ZQ_IND_OBJ         := 1;
ZQ_RES_RRN         := -1;
ZQ_HIS_REC_IN_BUFF := 10;

DO WITH Z_HISTORY_FILE;
   ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_28) * ZQ_HIS_REC_IN_BUFF;
   Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                        ZB_TABLE_SIZE);
OD; /* WITH Z_HISTORY_TABLE */

DO WITH Z_RESULT_FILE;
   ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
   Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
/*DO FOR ZQ_BUF := 0 TO (CM_FY32_MAX_CELLS_PER_BSC */
                      /*ZQ_HIS_REC_IN_BUFF)*/
DO FOR ZQ_BUF := 0 TO (CM_FY32_MAX_CELLS_PER_BSC /
                      ZQ_HIS_REC_IN_BUFF) -1 
/* END: ADD-WIPRO-B10-MR1-CHANGE */
   WHILE Z_CPL_CODES = E_NULL_CODE;

   ZQ_START_REC_NO:= ZQ_HIS_REC_IN_BUFF * ZQ_BUF;

   IF ZQ_START_REC_NO + ( ZQ_HIS_REC_IN_BUFF - 1 ) >
                          CM_FY32_MAX_CELLS_PER_BSC THEN

      /* LAST HISTORY BUFFER TO BE READ FOR THIS MEAS TYPE */
      ZQ_HIS_REC_IN_BUFF := CM_FY32_MAX_CELLS_PER_BSC REM
                           ZQ_HIS_REC_IN_BUFF;
      Z_HISTORY_FILE.ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_28)
                                       * ZQ_HIS_REC_IN_BUFF;
   FI;

   Q_S0160_READ_HIST_FILE (->Z_HISTORY_FILE,
                           ZQ_HIS_REC_IN_BUFF,
                           ZQ_START_REC_NO,
                           SIZE(CM_FY32_HIS_TYPE_28));

   ZQ_FILL_PTR :=-> Z_RESULT_FILE.ZB_TABLE_PTR
                 -> ZM_RES_TYPE_28_ARR(ZQ_IND_REC).ZB_DATA;

   DO FOR ZQ_REC := 1 TO ZQ_HIS_REC_IN_BUFF WHILE
                                       Z_CPL_CODES = E_NULL_CODE;
      DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR
                         -> CM_FY32_HIS_TYPE_28_BUF(LONG_INT(ZQ_REC));
         IF Q_S0270_BEQ_SEQ_FROM_CELL_IDX(B_CELL_ID,ZQ_CELL_ID)
            THEN
            DO WITH ZQ_FILL_PTR -> ZM_TYPE_28_CELL_DATA;
               ZB_TAG       := ZS_TYPE_28_CELL_TAG;
               ZB_LEN       := ZS_TYPE_28_CELL_LEN;
               ZB_BEQS_ID   := ZQ_CELL_ID;
               Q_S0700_CHECK_TYPE_28_OVERFLOW(->B_HIS_CC_MT_28);
               ZB_COUNTERS  := B_HIS_CC_MT_28;
            OD; /* DO WITH ZQ_FILL_PTR */

            IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                   ZQ_IND_REC,
                                   ZQ_RES_RRN,
                                   E_HIST_NORM)
               THEN
               /* GET ANOTHER RECORD OF THE RESULT FILE TO WRITE TO */
               ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                              -> ZM_RES_TYPE_28_ARR
                                 (ZQ_IND_REC).ZB_DATA;
            FI;
         FI;
      OD; /* DO WITH Z_HIST */
   OD; /* DO FOR ZQ_REC */
OD; /* DO FOR ZQ_BUF */

Q_S0830_CHECK_LAST_WRITE(ZQ_IND_OBJ,
                         ZQ_IND_REC,
                         ZQ_RES_RRN);

END Q_S0690_28_MAKE_RES_FILE_28;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0700_CHECK_TYPE_28_OVERFLOW                      */
/*                                                                    */
/*     PROGRAMMER: A.H.SWANN                                          */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/10/17                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       CHECK FOR COUNTERS IN OVERFLOW CONDITION IN TYPE 28          */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_HIS_CC REF CM_FY32_HIS_TY28_CTRS           */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0840_CHECK_DPVAL                           */
/*     CALLED FROM:                                                   */
/*                      Q_S0690_28_MAKE_RES_FILE_28                   */
/*                      Q_S0810_180_MAKE_RES_FILE_180                 */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0700_CHECK_TYPE_28_OVERFLOW : PROC (ZF_HIS_CC REF
                                       CM_FY32_HIS_TY28_CTRS);

DCL ZQ_I    INT;

Z_TRACE := H'0700;

DO WITH ZF_HIS_CC -> ;
   DO FOR ZQ_I := 1 TO 43;
      CASE ZQ_I OF
      (1:2):
         IF B_FROM_C83_TO_C81(ZQ_I) = ZS_DPVAL_OVERFLOW
         THEN
         B_FROM_C83_TO_C81(ZQ_I) := ZS_DPVAL_INVALID;
      FI;

      (3:4):
         B_FROM_C86_TO_C85A(ZQ_I) := Q_S0840_CHECK_DPVAL
                                    (B_FROM_C86_TO_C85A(ZQ_I));

      (5:6):
         IF B_FROM_C88_TO_C87(ZQ_I) = ZS_DPVAL_OVERFLOW
         THEN
            B_FROM_C88_TO_C87(ZQ_I) := ZS_DPVAL_INVALID;
         FI;

      (8:9):
         IF B_FROM_C97_TO_C98(ZQ_I) = ZS_DPVAL_OVERFLOW
         THEN
            B_FROM_C97_TO_C98(ZQ_I) := ZS_DPVAL_INVALID;
         FI;

      (13:14):
         IF B_FROM_C93_TO_C101(ZQ_I) = ZS_DPVAL_OVERFLOW
         THEN
            B_FROM_C93_TO_C101(ZQ_I) := ZS_DPVAL_INVALID;
         FI;

      (16:17):
         IF B_FROM_C103_TO_C107(ZQ_I) = ZS_DPVAL_OVERFLOW
         THEN
            B_FROM_C103_TO_C107(ZQ_I) := ZS_DPVAL_INVALID;
         FI;

      (18:43):
         B_FROM_C510_TO_C361(ZQ_I) := Q_S0840_CHECK_DPVAL
                                     (B_FROM_C510_TO_C361(ZQ_I));

      ELSE

      ESAC;
   OD;

   B_C82 := Q_S0840_CHECK_DPVAL(B_C82);
   B_C96 := Q_S0840_CHECK_DPVAL(B_C96);
   B_C95A := Q_S0840_CHECK_DPVAL(B_C95A);
   IF B_C91 = ZS_DPVAL_OVERFLOW THEN
      B_C91 := ZS_DPVAL_INVALID;
   FI;
   B_C92 := Q_S0840_CHECK_DPVAL(B_C92);
   B_C102:= Q_S0840_CHECK_DPVAL(B_C102);

OD;

END Q_S0700_CHECK_TYPE_28_OVERFLOW;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0710_29_MAKE_RES_FILE_29                         */
/*                                                                    */
/*     PROGRAMMER: A.H.SWANN                                          */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 98/06/16                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*      CREATES THE TYPE 29 RESULT FILE.                              */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0110_GET_USER_BUF                          */
/*                      Q_S0120_GET_WRITE_BUF                         */
/*                      Q_S0160_READ_HIST_FILE                        */
/*                      Q_S0270_BEQ_SEQ_FROM_CELL_IDX                 */
/*                      Q_S0820_RECORD_FULL                           */
/*                      Q_S0830_CHECK_LAST_WRITE                      */
/*     CALLED FROM:                                                   */
/*                      Q_S0510_MAKE_RESULT_FILE                      */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0710_29_MAKE_RES_FILE_29 : PROC ( );

DCL ZQ_START_REC_NO     INT;
DCL ZQ_IND_OBJ          INT;
DCL ZQ_RES_RRN          INT;
DCL ZQ_IND_REC          INT;
DCL ZQ_BUF              M_BYTE;
DCL ZQ_REC              M_BYTE;
DCL ZQ_FILL_PTR         PTR;
DCL ZQ_CELL_ID          ZM_PM_BEQ_AND_SECTOR;
DCL ZQ_HIS_REC_IN_BUFF  INT;

Z_TRACE := H'0710;

/* NOTE THAT THE GENERIC HEADER IS ALWAYS IN THE FIRST RECORD */
/* HENCE THE FIRST ITEM STARTS AT THE SECOND RECORD.          */
ZQ_IND_REC         := 2;
ZQ_IND_OBJ         := 1;
ZQ_RES_RRN         := -1;
ZQ_HIS_REC_IN_BUFF := 20;

DO WITH Z_HISTORY_FILE;
  ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_29) * ZQ_HIS_REC_IN_BUFF;
  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                       ZB_TABLE_SIZE);
OD; /* WITH Z_HISTORY_TABLE */

DO WITH Z_RESULT_FILE;
  ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
  Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
               -> ZM_RES_TYPE_29_ARR(ZQ_IND_REC).ZB_DATA;

/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
/*DO FOR ZQ_BUF := 0 TO (CM_FY32_MAX_CELLS_PER_BSC */
                      /*ZQ_HIS_REC_IN_BUFF)*/
DO FOR ZQ_BUF := 0 TO (CM_FY32_MAX_CELLS_PER_BSC /
                      ZQ_HIS_REC_IN_BUFF) -1
   WHILE Z_CPL_CODES = E_NULL_CODE;
/* END: ADD-WIPRO-B10-MR1-CHANGE */

   ZQ_START_REC_NO:= ZQ_HIS_REC_IN_BUFF * ZQ_BUF;

   IF ZQ_START_REC_NO + ( ZQ_HIS_REC_IN_BUFF - 1 ) >
                          CM_FY32_MAX_CELLS_PER_BSC THEN

      /* LAST HISTORY BUFFER TO BE READ FOR THIS MEAS TYPE */
      ZQ_HIS_REC_IN_BUFF := CM_FY32_MAX_CELLS_PER_BSC REM
                           ZQ_HIS_REC_IN_BUFF;
      Z_HISTORY_FILE.ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_29)
                                       * ZQ_HIS_REC_IN_BUFF;
   FI;

   Q_S0160_READ_HIST_FILE (->Z_HISTORY_FILE,
                           ZQ_HIS_REC_IN_BUFF,
                           ZQ_START_REC_NO,
                           SIZE(CM_FY32_HIS_TYPE_29));

   DO FOR ZQ_REC := 1 TO ZQ_HIS_REC_IN_BUFF WHILE
                                 Z_CPL_CODES = E_NULL_CODE;
      DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR
                        -> CM_FY32_HIS_TYPE_29_BUF(ZQ_REC);

         IF Q_S0270_BEQ_SEQ_FROM_CELL_IDX(B_CELL_ID,ZQ_CELL_ID)
            THEN
            DO WITH ZQ_FILL_PTR -> ZM_RES_DIRTED_RT;
               ZB_TAG       := ZS_TYPE_29_CELL_TAG;
               ZB_LEN       := ZS_TYPE_29_CELL_LEN;
               ZB_BEQS_ID   := ZQ_CELL_ID;
               Q_S0715_CHECK_TYPE_29_OVERFLOW( ->B_DIR_RETRY_CTRS);
               ZB_29_CTRS   := B_DIR_RETRY_CTRS.B_ALL_CTRS;
            OD; /* DO WITH ZQ_FILL_PTR */
            ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                               SIZE(ZM_RES_DIRTED_RT));

            IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                   ZQ_IND_REC,
                                   ZQ_RES_RRN,
                                   E_HIST_NORM)
               THEN
               ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                           -> ZM_RES_TYPE_29_ARR(ZQ_IND_REC).ZB_DATA;
            FI;
         FI;
      OD; /* DO WITH Z_HIST */
   OD; /* DO FOR ZQ_REC */
OD; /* DO FOR ZQ_BUF */

Q_S0830_CHECK_LAST_WRITE(ZQ_IND_OBJ,
                         ZQ_IND_REC,
                         ZQ_RES_RRN);

END Q_S0710_29_MAKE_RES_FILE_29;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0715_CHECK_TYPE_29_OVERFLOW                      */
/*                                                                    */
/*     PROGRAMMER: A.H.SWANN                                          */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 99/05/05                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       CHECK FOR COUNTERS IN OVERFLOW CONDITION IN TYPE 29          */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_HIS_CC REF CM_FY32_HIS_TY28_CTRS           */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0840_CHECK_DPVAL                           */
/*     CALLED FROM:                                                   */
/*                      Q_S0690_28_MAKE_RES_FILE_28                   */
/*                      Q_S0810_180_MAKE_RES_FILE_180                 */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0715_CHECK_TYPE_29_OVERFLOW : PROC (ZF_HIS_CC REF
                                       CM_FY32_HIS_TY29_CTRS);

DCL ZQ_I    INT;

Z_TRACE := H'0715;

DO WITH ZF_HIS_CC -> ;

   DO FOR ZQ_I := 1 TO 25;
      CASE ZQ_I OF
      (1:4):
         B_FROM_C142A_TO_C142D(ZQ_I) := Q_S0840_CHECK_DPVAL
                                    (B_FROM_C142A_TO_C142D(ZQ_I));

      (5:12):
         IF B_FROM_C143A_TO_C143H(ZQ_I) = ZS_DPVAL_OVERFLOW
         THEN
            B_FROM_C143A_TO_C143H(ZQ_I) := ZS_DPVAL_INVALID;
         FI;

      (13:21):
         B_FROM_C144A_TO_C151(ZQ_I) := Q_S0840_CHECK_DPVAL
                                    (B_FROM_C144A_TO_C151(ZQ_I));

      (22):
         IF B_C152 = ZS_DPVAL_OVERFLOW
         THEN
            B_C152 := ZS_DPVAL_INVALID;
         FI;

      (23:24):
         B_FROM_C153_TO_C154(ZQ_I) := Q_S0840_CHECK_DPVAL
                                    (B_FROM_C153_TO_C154(ZQ_I));

      (25):
         IF B_C555 = ZS_DPVAL_OVERFLOW
         THEN
            B_C555 := ZS_DPVAL_INVALID;
         FI;

      ELSE

      ESAC;
   OD;

OD;

END Q_S0715_CHECK_TYPE_29_OVERFLOW;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0720_30_MAKE_RES_FILE_30                         */
/*                                                                    */
/*     PROGRAMMER: A.H.SWANN (BDC)                                    */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 98/01/08                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*          COPY THE CONTENT OF THE HISTORY FILE FOR BSS COUNTERS 30  */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0110_GET_USER_BUF                          */
/*                      Q_S0120_GET_WRITE_BUF                         */
/*                      Q_S0160_READ_HIST_FILE                        */
/*                      Q_S0730_CHECK_TYPE_30_OVERFLOW                */
/*                      Q_S0500_FILL_REC_HEAD                         */
/*                      Q_S0200_WRITE_RES_FILE                        */
/*     CALLED FROM:                                                   */
/*                      Q_S0510_MAKE_RESULT_FILE                      */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0720_30_MAKE_RES_FILE_30 : PROC ( );

DCL ZQ_IND_OBJ         INT;
DCL ZQ_RES_RRN         INT;
DCL ZQ_IND_REC         INT;
DCL ZQ_FILL_PTR        PTR;

Z_TRACE := H'0720;

/* NOTE THAT THE GENERIC HEADER IS ALWAYS IN THE FIRST RECORD */
/* HENCE THE FIRST ITEM STARTS AT THE SECOND RECORD.          */
ZQ_IND_REC  := 2;
ZQ_IND_OBJ  := 1;
ZQ_RES_RRN  := -1;

DO WITH Z_HISTORY_FILE;
  ZB_TABLE_SIZE := SIZE(M_HIS_TYPE_30);
  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                       ZB_TABLE_SIZE);

OD; /* WITH Z_HISTORY_TABLE */

DO WITH Z_RESULT_FILE;
  ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
  Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

Q_S0160_READ_HIST_FILE(->Z_HISTORY_FILE,
                       1, 0,
                       SIZE(M_HIS_TYPE_30));

IF Z_CPL_CODES=E_NULL_CODE
   THEN

   /* ONLY ON RECORD IN HISTORY FILE */
   DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR -> M_HIS_TYPE_30;

      ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                     -> ZM_RES_TYPE_30_ARR(ZQ_IND_REC).ZB_DATA;

      DO WITH ZQ_FILL_PTR -> ZM_RES_TYPE_30;
         ZB_TAG    := ZS_TYPE_30_GLOB_TAG;
         ZB_LEN    := ZS_TYPE_30_GLOB_LEN;
         Q_S0730_CHECK_TYPE_30_OVERFLOW(->B_HIS_SMSCB);
         ZB_DATA := B_HIS_SMSCB;
      OD; /* DO WITH ZQ_FILL_PTR */
   OD;

   Q_S0500_FILL_REC_HEAD(->Z_RESULT_FILE.ZB_TABLE_PTR
                         ->ZM_RES_TYPE_30_ARR(ZQ_IND_REC).ZB_HEADER,
                           ZQ_IND_REC-1,
                           E_GPMR);

   				/*START: CRI00611721 */
   Q_S0200_WRITE_RES_FILE(ZQ_IND_REC, LONG_INT(ZQ_RES_RRN+1));
					/*END: CRI00611721 */

FI;

END Q_S0720_30_MAKE_RES_FILE_30;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0730_CHECK_TYPE_30_OVERFLOW                      */
/*                                                                    */
/*     PROGRAMMER: A.H.SWANN                                          */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/10/17                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       CHECK FOR COUNTERS IN OVERFLOW CONDITION IN TYPE 30          */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_HIS_CC REF M_HIS_CTRS_30                   */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0840_CHECK_DPVAL                           */
/*     CALLED FROM:                                                   */
/*                      Q_S0720_30_MAKE_RES_FILE_30                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0730_CHECK_TYPE_30_OVERFLOW : PROC (ZF_HIS_CC REF
                                       M_HIS_CTRS_30);

/*DCL ZQ_I    INT;*//*UNUSED*/

Z_TRACE := H'0730;

DO WITH ZF_HIS_CC -> ;
   B_MT_30_CTR_CB601 := Q_S0840_CHECK_DPVAL(B_MT_30_CTR_CB601);
   B_MT_30_CTR_CB602 := Q_S0840_CHECK_DPVAL(B_MT_30_CTR_CB602);

   IF B_MT_30_CTR_CB603 = ZS_DPVAL_OVERFLOW
      THEN
      B_MT_30_CTR_CB603 := ZS_DPVAL_INVALID;
   FI;

   IF B_MT_30_CTR_CB604 = ZS_DPVAL_OVERFLOW
      THEN
      B_MT_30_CTR_CB604 := ZS_DPVAL_INVALID;
   FI;

OD;

END Q_S0730_CHECK_TYPE_30_OVERFLOW;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0735_32_MAKE_RES_FILE_32                         */
/*                                                                    */
/*     PROGRAMMER: NAIKA                                              */
/*                                                                    */
/*                LAST MODIFIED BY:                                   */
/*                                                                    */
/*     CREATION DATE: 02/07/26                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION: CREATE TYPE 32 RESULT FILE             */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0110_GET_USER_BUF                          */
/*                      Q_S0120_GET_WRITE_BUF                         */
/*                      Q_S0160_READ_HIST_FILE                        */
/*                      Q_S0270_BEQ_SEQ_FROM_CELL_IDX                 */
/*                      Q_S0860_INCREM_PTR                            */
/*                      Q_S0840_CHECK_DPVAL                           */
/*                      Q_S0820_RECORD_FULL                           */
/*                      Q_S0830_CHECK_LAST_WRITE                      */
/*     CALLED FROM:                                                   */
/*                      Q_S0510_MAKE_RESULT_FILE                      */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
/* TYPE 32 ADDED FOR B8 */
Q_S0735_32_MAKE_RES_FILE_32 : PROC ( );

DCL  ZQ_BUF             M_BYTE; /* INDEX IN BUFFER */
DCL  ZQ_CELL_ID         ZM_PM_BEQ_AND_SECTOR;
DCL  ZQ_FILL_PTR        PTR;
DCL  ZQ_I               M_TYPE_32_CTRS;
DCL  ZQ_IND_OBJ         INT;
DCL  ZQ_IND_REC         INT;
DCL  ZQ_REC             M_BYTE; /* REC IN BUFFER   */
DCL  ZQ_RECS_PER_BUFF   INT;
DCL  ZQ_RES_RRN         INT;
DCL  ZQ_START_REC_NO    INT;

Z_TRACE := H'0520;
/* NOTE THAT THE GENERIC HEADER IS ALWAYS IN THE FIRST RECORD */
/* HENCE THE FIRST ITEM STARTS AT THE SECOND RECORD.          */
ZQ_IND_REC       := 2;
ZQ_RECS_PER_BUFF := 20;
ZQ_IND_OBJ       := 1;
ZQ_RES_RRN       := -1;

   /*-----------------------------------------------------------+
   |      M E A S U R E M E N T   T Y P E    3 2                |
   +-----------------------------------------------------------*/

DO WITH Z_HISTORY_FILE;
   ZB_TABLE_SIZE := ZQ_RECS_PER_BUFF * SIZE(CM_FY32_HIS_TYPE_32);
   Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                        ZB_TABLE_SIZE);
OD; /* WITH Z_HISTORY_TABLE */

DO WITH Z_RESULT_FILE;
   ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
   Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
               -> ZM_RES_TYPE_32_ARR(ZQ_IND_REC).ZB_DATA;

/* DO FOR THE NUMBER OF BUFFERS REQUIRED FOR ALL CELLS */
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
/*DO FOR ZQ_BUF := 0 TO (CM_FY32_MAX_CELLS_PER_BSC */
                       /*ZQ_RECS_PER_BUFF )*/
DO FOR ZQ_BUF := 0 TO (CM_FY32_MAX_CELLS_PER_BSC /
                       ZQ_RECS_PER_BUFF ) -1
/* END: ADD-WIPRO-B10-MR1-CHANGE */
   WHILE Z_CPL_CODES = E_NULL_CODE;

   ZQ_START_REC_NO := ZQ_BUF * ZQ_RECS_PER_BUFF;

   IF ZQ_START_REC_NO + ( ZQ_RECS_PER_BUFF - 1) >
                          CM_FY32_MAX_CELLS_PER_BSC THEN

     /* LAST HISTORY BUFFER TO BE READ FOR THIS MEAS TYPE */
     ZQ_RECS_PER_BUFF := CM_FY32_MAX_CELLS_PER_BSC REM
                                           ZQ_RECS_PER_BUFF;
     Z_HISTORY_FILE.ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_32)
                                      * ZQ_RECS_PER_BUFF;
   FI;

   Q_S0160_READ_HIST_FILE (->Z_HISTORY_FILE,
                           ZQ_RECS_PER_BUFF,
                           ZQ_START_REC_NO,
                           SIZE(CM_FY32_HIS_TYPE_32));
   DO FOR ZQ_REC := 1 TO ZQ_RECS_PER_BUFF WHILE Z_CPL_CODES
                                              = E_NULL_CODE;
      /* DO FOR THE RECORDS IN THE BUFFER */
      DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR ->
                         CM_FY32_HIS_TYPE_32_BUF(ZQ_REC);
         IF Q_S0270_BEQ_SEQ_FROM_CELL_IDX(B_CELL_ID,ZQ_CELL_ID)
            THEN
            /* FILL FOR THE CELLS */
            DO WITH ZQ_FILL_PTR -> ZM_TYPE_32_CELL_DATA;
               ZB_TAG     := ZS_TYPE_32_CELL_TAG;
               ZB_LEN     := ZS_TYPE_32_CELL_LEN;
               ZB_BEQS_ID := ZQ_CELL_ID;
               DO FOR ZQ_I := E_MT_32_CTR_C403A TO E_MT_32_CTR_C421B;
                 B_CTRS_CELL_MT_32.B_C403A_TO_C421B(ZQ_I) := 
               Q_S0840_CHECK_DPVAL
                   (B_CTRS_CELL_MT_32.B_C403A_TO_C421B(ZQ_I));
               OD;
               ZB_32_CTRS := B_CTRS_CELL_MT_32;
     
            OD; /* WITH ZQ_FILL_PTR */

            /* INCREMENT THE FILL PTR BY THE SIZE OF THE STRUCTURE */
            /* IN THE RESULT FILE.                                 */
            ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                                   SIZE(ZM_TYPE_32_CELL_DATA));
            IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                   ZQ_IND_REC,
                                   ZQ_RES_RRN,
                                   E_HIST_NORM)
               THEN
               ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                              -> ZM_RES_TYPE_32_ARR
                                 (ZQ_IND_REC).ZB_DATA;
            FI;
         FI;
      OD;  /* DO WITH Z_HISTORY_FILE .... */
   OD; /* DO FOR ZQ_REC */
OD; /* DO FOR ZQ_BUF */

/* ONCE HERE IS REACHED IT IS CERTAIN THAT ALL RECORDS OF THE  */
/* HISTORY FILE RELATED TO THIS MEASUREMENT TYPE ARE READ AND  */
/* CORRESPONDING RESULT RECORDS ARE PUT IN WRITE BUFFER OF     */
/* RESULT FILE. NOW, IT IS TO BE CHECKED IF ANY RECORDS ARE    */
/* WAITING TO BE PHYSICLLY WRITTEN TO THE RESULT FILE          */

Q_S0830_CHECK_LAST_WRITE(ZQ_IND_OBJ,
                         ZQ_IND_REC,
                         ZQ_RES_RRN);

/* THE PGHR UPDATE IS A PROBLEM. SINCE THE RESULT FILE IS OPENED */
/* FOR WRITE THERE IS NO POSSIBILITY TO UPDATE A RECORD          */
/* THE RESULT FILE MUST BE CLOSED, REOPENED FOR MODIFY AND       */
/* THE HEADER UPDATE MUST TAKE PLACE...                          */
/* AND THEN THE BUFFERS ARE TO BE RETURNED                       */

END Q_S0735_32_MAKE_RES_FILE_32;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0740_33_MAKE_RES_FILE_33                         */
/*                                                                    */
/*     PROGRAMMER: DUHITA D                                           */
/*                                                                    */
/*                LAST MODIFIED BY:                                   */
/*                                                                    */
/*     CREATION DATE: 03/05/2004                                      */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION: CREATE TYPE 33 RESULT FILE             */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0110_GET_USER_BUF                          */
/*                      Q_S0120_GET_WRITE_BUF                         */
/*                      Q_S0160_READ_HIST_FILE                        */
/*                      Q_S0270_BEQ_SEQ_FROM_CELL_IDX                 */
/*                      Q_S0860_INCREM_PTR                            */
/*                      Q_S0840_CHECK_DPVAL                           */
/*                      Q_S0820_RECORD_FULL                           */
/*                      Q_S0830_CHECK_LAST_WRITE                      */
/*     CALLED FROM:                                                   */
/*                      Q_S0510_MAKE_RESULT_FILE                      */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
/* BEGIN: ADD-WIPRO-B9-P1-CHANGE */
/* TYPE 33 ADDED FOR B9 */
Q_S0740_33_MAKE_RES_FILE_33 : PROC ( );

DCL  ZQ_BUF             M_BYTE; /* INDEX IN BUFFER */
DCL  ZQ_CELL_ID         ZM_PM_BEQ_AND_SECTOR;
DCL  ZQ_FILL_PTR        PTR;
DCL  ZQ_I               M_TYPE_33_CTRS;
DCL  ZQ_IND_OBJ         INT;
DCL  ZQ_IND_REC         INT;
DCL  ZQ_REC             M_BYTE; /* REC IN BUFFER   */
DCL  ZQ_RECS_PER_BUFF   INT;
DCL  ZQ_RES_RRN         INT;
DCL  ZQ_START_REC_NO    INT;

Z_TRACE := H'0740;
/* NOTE THAT THE GENERIC HEADER IS ALWAYS IN THE FIRST RECORD */
/* HENCE THE FIRST ITEM STARTS AT THE SECOND RECORD.          */
ZQ_IND_REC       := 2;
ZQ_RECS_PER_BUFF := 40;
ZQ_IND_OBJ       := 1;
ZQ_RES_RRN       := -1;

   /*-----------------------------------------------------------+
   |      M E A S U R E M E N T   T Y P E    3 3                |
   +-----------------------------------------------------------*/

DO WITH Z_HISTORY_FILE;
   ZB_TABLE_SIZE := ZQ_RECS_PER_BUFF * SIZE(CM_FY32_HIS_TYPE_33);
   Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                        ZB_TABLE_SIZE);
OD; /* WITH Z_HISTORY_TABLE */

DO WITH Z_RESULT_FILE;
   ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
   Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
               -> ZM_RES_TYPE_33_ARR(ZQ_IND_REC).ZB_DATA;

/* DO FOR THE NUMBER OF BUFFERS REQUIRED FOR ALL CELLS */
DO FOR ZQ_BUF := 0 TO (CM_FY32_MAX_CELLS_PER_BSC /
                       ZQ_RECS_PER_BUFF )
   WHILE Z_CPL_CODES = E_NULL_CODE;

   ZQ_START_REC_NO := ZQ_BUF * ZQ_RECS_PER_BUFF;

   IF ZQ_START_REC_NO + ( ZQ_RECS_PER_BUFF - 1) >
                      CM_FY32_MAX_CELLS_PER_BSC THEN

     /* LAST HISTORY BUFFER TO BE READ FOR THIS MEAS TYPE */
     ZQ_RECS_PER_BUFF := CM_FY32_MAX_CELLS_PER_BSC REM
                       ZQ_RECS_PER_BUFF;
     Z_HISTORY_FILE.ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_33)
                                      * ZQ_RECS_PER_BUFF;
   FI;

   Q_S0160_READ_HIST_FILE (->Z_HISTORY_FILE,
                           ZQ_RECS_PER_BUFF,
                           ZQ_START_REC_NO,
                           SIZE(CM_FY32_HIS_TYPE_33));
   DO FOR ZQ_REC := 1 TO ZQ_RECS_PER_BUFF WHILE Z_CPL_CODES
                                              = E_NULL_CODE;
      /* DO FOR THE RECORDS IN THE BUFFER */
      DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR ->
                         CM_FY32_HIS_TYPE_33_BUF(ZQ_REC);
         IF Q_S0270_BEQ_SEQ_FROM_CELL_IDX(B_CELL_ID,ZQ_CELL_ID)
            THEN
            /* FILL FOR THE CELLS */
            DO WITH ZQ_FILL_PTR -> ZM_TYPE_33_CELL;
               ZB_TAG     := ZS_TYPE_33_CELL_TAG;
               ZB_LEN     := ZS_TYPE_33_CELL_LEN;
               ZB_BEQS_ID := ZQ_CELL_ID;

/* 
               DO FOR ZQ_I := E_MT_33_CTR_E01 TO E_MT_33_CTR_E02;
                  DO WITH B_CTRS_CELL_MT_33;
                     IF B_E01_TO_E02(ZQ_I) = ZS_DPVAL_OVERFLOW OR
                        B_E01_TO_E02(ZQ_I) = ZS_DPVAL_INVALID
                       THEN
                        B_E01_TO_E02(ZQ_I) := ZS_DPVAL_INVALID;
                       ELSE
                        B_E01_TO_E02(ZQ_I) := B_E01_TO_E02(ZQ_I)/4;
                     FI;
                  OD;
               OD;
               ZB_CELL_DATA := B_CTRS_CELL_MT_33;   */

               /* BEGIN: WITTS 288-WITTS 289 */

               ZB_CELL_DATA.B_E01_TO_E02(E_MT_33_CTR_E01) :=
                              (Q_S0485_AVRG_EME_FOR_ACC_PERIOD
                 (B_CTRS_CELL_MT_33.B_E01_TO_E02(E_MT_33_CTR_E01)));

               ZB_CELL_DATA.B_E01_TO_E02(E_MT_33_CTR_E02) :=
                              (Q_S0485_AVRG_EME_FOR_ACC_PERIOD
                 (B_CTRS_CELL_MT_33.B_E01_TO_E02(E_MT_33_CTR_E02)));

               /* END: WITTS 288-WITTS 289 */ 
            OD; /* WITH ZQ_FILL_PTR */

            /* INCREMENT THE FILL PTR BY THE SIZE OF THE STRUCTURE */
            /* IN THE RESULT FILE.                                 */
            ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                                   SIZE(ZM_TYPE_33_CELL));
            IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                   ZQ_IND_REC,
                                   ZQ_RES_RRN,
                                   E_HIST_NORM)
               THEN
               ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                              -> ZM_RES_TYPE_33_ARR
                                 (ZQ_IND_REC).ZB_DATA;
            FI;
         FI;
      OD;  /* DO WITH Z_HISTORY_FILE .... */
   OD; /* DO FOR ZQ_REC */
OD; /* DO FOR ZQ_BUF */
/* ONCE HERE IS REACHED IT IS CERTAIN THAT ALL RECORDS OF THE  */
/* HISTORY FILE RELATED TO THIS MEASUREMENT TYPE ARE READ AND  */
/* CORRESPONDING RESULT RECORDS ARE PUT IN WRITE BUFFER OF     */
/* RESULT FILE. NOW, IT IS TO BE CHECKED IF ANY RECORDS ARE    */
/* WAITING TO BE PHYSICLLY WRITTEN TO THE RESULT FILE          */

Q_S0830_CHECK_LAST_WRITE(ZQ_IND_OBJ,
                         ZQ_IND_REC,
                         ZQ_RES_RRN);

/* THE PGHR UPDATE IS A PROBLEM. SINCE THE RESULT FILE IS OPENED */
/* FOR WRITE THERE IS NO POSSIBILITY TO UPDATE A RECORD          */
/* THE RESULT FILE MUST BE CLOSED, REOPENED FOR MODIFY AND       */
/* THE HEADER UPDATE MUST TAKE PLACE...                          */
/* AND THEN THE BUFFERS ARE TO BE RETURNED                       */

END Q_S0740_33_MAKE_RES_FILE_33;
/* END: ADD-WIPRO-B9-P1-CHANGE */

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0750_34_MAKE_RES_FILE_34                         */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY: DUHITA D           DATE: 97/10/21 */
/*                                                                    */
/*     CREATION DATE: 96/11/05                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*          COPY THE CONTENT OF THE HISTORY FILE FOR BSS COUNTERS 34  */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0110_GET_USER_BUF                          */
/*                      Q_S0120_GET_WRITE_BUF                         */
/*                      Q_S0160_READ_HIST_FILE                        */
/*                      Q_S0840_CHECK_DPVAL                           */
/*                      Q_S0500_FILL_REC_HEAD                         */
/*                      Q_S0200_WRITE_RES_FILE                        */
/*     CALLED FROM:                                                   */
/*                      Q_S0510_MAKE_RESULT_FILE                      */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

/* BEGIN: ADD-WIPRO-B9-P2-CHANGE */
Q_S0750_34_MAKE_RES_FILE_34 : PROC ( );

DCL ZQ_RES_RRN         INT;
DCL ZQ_IND_REC         INT;
DCL ZQ_FILL_PTR        PTR;
DCL ZQ_C               M_TYPE_34_1_CTRS;

Z_TRACE := H'0750;

/* NOTE THAT THE GENERIC HEADER IS ALWAYS IN THE FIRST RECORD */
/* HENCE THE FIRST ITEM STARTS AT THE SECOND RECORD.          */
ZQ_IND_REC  := 2;
ZQ_RES_RRN  := -1;

DO WITH Z_HISTORY_FILE;
  ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_34_1_BUF);
  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                       ZB_TABLE_SIZE);

OD; /* WITH Z_HISTORY_TABLE */

DO WITH Z_RESULT_FILE;
  ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
  Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

Q_S0160_READ_HIST_FILE(->Z_HISTORY_FILE,
                       1, 0,
                       SIZE(CM_FY32_HIS_TYPE_34_1_BUF));

IF Z_CPL_CODES=E_NULL_CODE
   THEN

   /* ONLY ON RECORD IN HISTORY FILE */
   DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR -> CM_FY32_HIS_TYPE_34_1_BUF;

      ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                     -> ZM_RES_TYPE_34_ARR(ZQ_IND_REC).ZB_DATA;

      DO WITH ZQ_FILL_PTR -> ZM_RES_TYPE_34;
         ZB_TAG    := ZS_TYPE_34_BSC_TAG;
         ZB_LEN    := ZS_TYPE_34_BSC_LEN;
         DO FOR ZQ_C := E_MT_34_CTR_V11 TO
                              E_MT_34_CTR_V17;
            DO WITH B_BSS_CNTRS;
               IF B_V11_TO_V17(ZQ_C) = ZS_DPVAL_OVERFLOW
                  THEN
                  B_V11_TO_V17(ZQ_C) := ZS_DPVAL_INVALID;
               FI;
            OD;
         OD;
         ZB_DATA := B_BSS_CNTRS;
      OD; /* DO WITH ZQ_FILL_PTR */
   OD;

   Q_S0500_FILL_REC_HEAD(->Z_RESULT_FILE.ZB_TABLE_PTR
                         ->ZM_RES_TYPE_34_ARR(ZQ_IND_REC).ZB_HEADER,
                           ZQ_IND_REC-1,/* AS LONG AS RESULT FILE */
                                        /* HAS LESS THAN 8 RECORDS*/
                                        /* AT THE MOMENT ONLY 2   */
                           E_GPMR);

   				/*START: CRI00611721 */
   Q_S0200_WRITE_RES_FILE(ZQ_IND_REC, LONG_INT(ZQ_RES_RRN+1));
				/*END: CRI00611721 */

FI;

Z_RES_RRN     := ZQ_RES_RRN + ZQ_IND_REC;

END Q_S0750_34_MAKE_RES_FILE_34;
/* END: ADD-WIPRO-B9-P2-CHANGE */

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0755_34_MAKE_RES_FILE_34_2                       */
/*                                                                    */
/*     PROGRAMMER: A.H.SWANN                                          */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 96/11/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       CREATE THE FORTH (AND FINAL) TYPE 110 RESULT FILE BLOCK      */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0110_GET_USER_BUF                          */
/*                      Q_S0120_GET_WRITE_BUF                         */
/*                      Q_S0270_BEQ_SEQ_FROM_CELL_IDX                 */
/*                      Q_S0860_INCREM_PTR                            */
/*                      Q_S0260_GET_TRXS_OF_A_CELL                    */
/*                      Q_S0160_READ_HIST_FILE                        */
/*                      Q_S0850_CHECK_3_INT_CNTR                      */
/*                      Q_S0820_RECORD_FULL                           */
/*                      Q_S0830_CHECK_LAST_WRITE                      */
/*     CALLED FROM:                                                   */
/*                      Q_S0370_STATE_MACHINE                         */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

/* BEGIN: ADD-WIPRO-B9-P2-CHANGE */
Q_S0755_34_MAKE_RES_FILE_34_2  : PROC ( );
DCL ZQ_START_REC_NO     INT;
DCL ZQ_IND_OBJ          INT;
DCL ZQ_RES_RRN          INT;
DCL ZQ_IND_REC          INT;
DCL ZQ_REC              M_BYTE;
DCL ZQ_FILL_PTR         PTR;
DCL ZQ_HIS_REC_IN_BUFF  INT;
DCL ZQ_BUF              INT;
DCL ZQ_I                M_TYPE_34_2_CTRS;
DCL  ZQ_CELL_ID         ZM_PM_BEQ_AND_SECTOR;

Z_TRACE := H'0755;

/* NOTE THAT THE GENERIC HEADER IS ALWAYS IN THE FIRST RECORD */
/* HENCE THE FIRST ITEM STARTS AT THE SECOND RECORD.          */
ZQ_IND_REC         := 1;
ZQ_IND_OBJ         := 1;
ZQ_RES_RRN         := Z_RES_RRN;
ZQ_HIS_REC_IN_BUFF := 43;

DO WITH Z_HISTORY_FILE;
  ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_34_2) * ZQ_HIS_REC_IN_BUFF;
  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                       ZB_TABLE_SIZE);
OD; /* WITH Z_HISTORY_TABLE */

DO WITH Z_RESULT_FILE;
  ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
  Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
               -> ZM_RES_TYPE_34_ARR(ZQ_IND_REC).ZB_DATA;

DO FOR ZQ_BUF := 0 TO (CM_FY32_MAX_CELLS_PER_BSC /
                        ZQ_HIS_REC_IN_BUFF )

   WHILE Z_CPL_CODES = E_NULL_CODE;

   ZQ_START_REC_NO:= ZQ_HIS_REC_IN_BUFF * ZQ_BUF;

   IF ZQ_START_REC_NO + ( ZQ_HIS_REC_IN_BUFF - 1 ) >
                          CM_FY32_MAX_CELLS_PER_BSC THEN

      /* LAST HISTORY BUFFER TO BE READ FOR THIS MEAS TYPE */
      ZQ_HIS_REC_IN_BUFF := CM_FY32_MAX_CELLS_PER_BSC REM
                           ZQ_HIS_REC_IN_BUFF;
      Z_HISTORY_FILE.ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_34_2)
                                       * ZQ_HIS_REC_IN_BUFF;
   FI;

   Q_S0160_READ_HIST_FILE (->Z_HISTORY_FILE,
                           ZQ_HIS_REC_IN_BUFF,
                           ZQ_START_REC_NO,
                           SIZE(CM_FY32_HIS_TYPE_34_2));

   DO FOR ZQ_REC := 1 TO ZQ_HIS_REC_IN_BUFF WHILE
                                 Z_CPL_CODES = E_NULL_CODE;
      DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR
                        -> CM_FY32_HIS_TYPE_34_2_BUF(ZQ_REC);

         IF Q_S0270_BEQ_SEQ_FROM_CELL_IDX(B_CELL_ID,ZQ_CELL_ID)
            THEN

            DO WITH ZQ_FILL_PTR -> ZM_RES_TYPE_34_CELL;
               ZB_TAG       := ZS_TYPE_34_CELL_TAG;
               ZB_LEN       := ZS_TYPE_34_CELL_LEN;
               ZB_BEQS_ID   := ZQ_CELL_ID;
               DO FOR ZQ_I := E_MT_34_CTR_V01 TO E_MT_34_CTR_V20;
                 DO WITH B_CTRS_CELL_MT_34;
                   IF B_V01_TO_V20(ZQ_I) = ZS_DPVAL_OVERFLOW
                      THEN
                      B_V01_TO_V20(ZQ_I) := ZS_DPVAL_INVALID;
                   FI;
                 OD;
               OD;
               ZB_CELL_DATA := B_CTRS_CELL_MT_34;
            OD; /* DO WITH ZQ_FILL_PTR */
            ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                               SIZE(ZM_RES_TYPE_34_CELL));

            IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                   ZQ_IND_REC,
                                   ZQ_RES_RRN,
                                   E_HIST_34_2)
               THEN
               ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                           -> ZM_RES_TYPE_34_ARR(ZQ_IND_REC).ZB_DATA;
            FI;
         FI;
      OD; /* DO WITH Z_HIST */
   OD; /* DO FOR ZQ_REC */
OD; /* DO FOR ZQ_BUF */

Q_S0830_CHECK_LAST_WRITE(ZQ_IND_OBJ,
                         ZQ_IND_REC,
                         ZQ_RES_RRN);


END Q_S0755_34_MAKE_RES_FILE_34_2;
/* END: ADD-WIPRO-B9-P2-CHANGE */
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0751_35_MAKE_RES_FILE_35                         */
/*                                                                    */
/*     PROGRAMMER: SHAILESH                                           */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 06/06/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*     CALLED FROM:                                                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

/* BEGIN: ADD-WIPRO-B10-MR2-CHANGE*/
Q_S0751_35_MAKE_RES_FILE_35  : PROC ( );
DCL ZQ_START_REC_NO     INT;
DCL ZQ_IND_OBJ          INT;
DCL ZQ_RES_RRN          INT;
DCL ZQ_IND_REC          INT;
DCL ZQ_REC              M_BYTE;
DCL ZQ_FILL_PTR         PTR;
DCL ZQ_HIS_REC_IN_BUFF  INT;
DCL ZQ_BUF              INT;
/*CR2517*/
DCL ZQ_I                CM_TYPE_35_CTRS_0;
/*CR2517*/
DCL  ZQ_CELL_ID         ZM_PM_BEQ_AND_SECTOR;
/* BEGIN: MODIFY-ER-581-CHANGE */
DCL ZQ_RECORD_FULL      BOOL;
/* END: MODIFY-ER-581-CHANGE */
/*FR36/246260 */
DCL ZQ_NO_CELL      BOOL; 
/*FR36/246260 */

Z_TRACE := H'0751;

/* NOTE THAT THE GENERIC HEADER IS ALWAYS IN THE FIRST RECORD */
/* HENCE THE FIRST ITEM STARTS AT THE SECOND RECORD.          */
/* BEGIN: MODIFY-ER-581-CHANGE */
ZQ_RECORD_FULL := FALSE;
/*ZQ_IND_REC         := 1;*/
ZQ_IND_REC         := 2;
/* END: MODIFY-ER-581-CHANGE */
ZQ_IND_OBJ         := 1;
ZQ_RES_RRN         := -1;
ZQ_HIS_REC_IN_BUFF := 40;

/*FR36/246260 */
ZQ_NO_CELL := TRUE; 
/*FR36/246260 */

DO WITH Z_HISTORY_FILE;
  ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_35_0) * ZQ_HIS_REC_IN_BUFF;
  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                       ZB_TABLE_SIZE);
OD; /* WITH Z_HISTORY_TABLE */

DO WITH Z_RESULT_FILE;
  ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
  Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
               -> ZM_RES_TYPE_35_ARR(ZQ_IND_REC).ZB_DATA;

DO FOR ZQ_BUF := 0 TO (CM_FY32_MAX_CELLS_PER_BSC /
                        ZQ_HIS_REC_IN_BUFF )

   WHILE Z_CPL_CODES = E_NULL_CODE;

   ZQ_START_REC_NO:= ZQ_HIS_REC_IN_BUFF * ZQ_BUF;

   IF ZQ_START_REC_NO + ( ZQ_HIS_REC_IN_BUFF - 1 ) >
                          CM_FY32_MAX_CELLS_PER_BSC THEN

      /* LAST HISTORY BUFFER TO BE READ FOR THIS MEAS TYPE */
      ZQ_HIS_REC_IN_BUFF := CM_FY32_MAX_CELLS_PER_BSC REM
                           ZQ_HIS_REC_IN_BUFF;
      Z_HISTORY_FILE.ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_35_0)
                                       * ZQ_HIS_REC_IN_BUFF;
   FI;

   Q_S0160_READ_HIST_FILE (->Z_HISTORY_FILE,
                           ZQ_HIS_REC_IN_BUFF,
                           ZQ_START_REC_NO,
                           SIZE(CM_FY32_HIS_TYPE_35_0));

   DO FOR ZQ_REC := 1 TO ZQ_HIS_REC_IN_BUFF WHILE
                                 Z_CPL_CODES = E_NULL_CODE;
      DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR
                        -> CM_FY32_HIS_TYPE_35_0_BUF(ZQ_REC);

         IF Q_S0270_BEQ_SEQ_FROM_CELL_IDX(B_CELL_ID,ZQ_CELL_ID)
            THEN

            DO WITH ZQ_FILL_PTR -> ZM_RES_TYPE_35_CELL;
               ZB_TAG       := ZS_TYPE_35_CELL_TAG;
               ZB_LEN       := ZS_TYPE_35_CELL_LEN;
               ZB_BEQS_ID   := ZQ_CELL_ID;
               /*CR2517*/
               DO FOR ZQ_I := E_MT_35_CTR_IP11 TO E_MT_35_CTR_IP51;
               /*CR2517*/
                 DO WITH B_CTRS_PT0_MT_35;
                  /*CR2517*/
                    CASE ZQ_I OF
                     (E_MT_35_CTR_IP11:E_MT_35_CTR_IP13):
                  /*CR2517*/
                        IF B_IP11_TO_IP13(ZQ_I) = ZS_DPVAL_OVERFLOW
                        THEN
                          B_IP11_TO_IP13(ZQ_I) := ZS_DPVAL_INVALID;
                        FI;
                     /*CR2517*/   
                     (E_MT_35_CTR_IP50:E_MT_35_CTR_IP51):
                        B_IP11_TO_IP13(ZQ_I) := 0;
                   ESAC;  
                     /*CR2517*/
                        
                 OD;
               OD;
               ZB_CELL_DATA :=  B_CTRS_PT0_MT_35;
            OD; /* DO WITH ZQ_FILL_PTR */
            ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                               SIZE(ZM_RES_TYPE_35_CELL));

            IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                   ZQ_IND_REC,
                                   ZQ_RES_RRN,
                                   E_HIST_NORM)
               THEN
               ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                           -> ZM_RES_TYPE_35_ARR(ZQ_IND_REC).ZB_DATA;
            /* BEGIN: MODIFY-ER-581-CHANGE */                           
               ZQ_RECORD_FULL := TRUE;
            ELSE
               ZQ_RECORD_FULL := FALSE;
            /* END: MODIFY-ER-581-CHANGE */     
            FI;
            /*FR36/246260 */
            ZQ_NO_CELL := FALSE; 
            /*FR36/246260 */
            
         FI;
      OD; /* DO WITH Z_HIST */
   OD; /* DO FOR ZQ_REC */
OD; /* DO FOR ZQ_BUF */

Q_S0830_CHECK_LAST_WRITE(ZQ_IND_OBJ,
                         ZQ_IND_REC,
                         ZQ_RES_RRN);


/* BEGIN: MODIFY-ER-581-CHANGE */

/*FR36/246260 */
IF ZQ_RECORD_FULL OR ZQ_NO_CELL 
/*FR36/246260 */
  THEN
    Z_RES_RRN := ZQ_RES_RRN + ZQ_IND_REC - 1;
  ELSE
    Z_RES_RRN := ZQ_RES_RRN + ZQ_IND_REC;
FI;
/* END: MODIFY-ER-581-CHANGE */
END Q_S0751_35_MAKE_RES_FILE_35;
/* END: ADD-WIPRO-B10-MR2-CHANGE */
  /* CR20/225233 */
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0752_35_MAKE_RES_FILE_35_3                       */
/*                                                                    */
/*     PROGRAMMER: SHAILESH                                           */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 06/06/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*     CALLED FROM:                                                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0752_35_MAKE_RES_FILE_35_3  : PROC ( );
DCL ZQ_START_REC_NO     INT;
DCL ZQ_IND_OBJ          INT;
DCL ZQ_RES_RRN          INT;
DCL ZQ_IND_REC          INT;
DCL ZQ_REC              M_BYTE;
DCL ZQ_FILL_PTR         PTR;
DCL ZQ_HIS_REC_IN_BUFF  INT;
DCL ZQ_BUF              INT;
DCL ZQ_I                CM_TYPE_35_CTRS_3;
DCL ZQ_TC_ID            M_TC_ID;
/* BEGIN: MODIFY-ER-581-CHANGE */
DCL ZQ_RECORD_FULL      BOOL;
/* END: MODIFY-ER-581-CHANGE */
/*BEGIN : FR36/307402*/
DCL ZQ_AUPOIP_MODE      BOOL;
/*END : FR36/307402*/
Z_TRACE := H'0751;

/* NOTE THAT THE GENERIC HEADER IS ALWAYS IN THE FIRST RECORD */
/* HENCE THE FIRST ITEM STARTS AT THE SECOND RECORD.          */
ZQ_IND_REC         := 1;
ZQ_IND_OBJ         := 1;
ZQ_RES_RRN         := Z_RES_RRN;
/* BEGIN: MODIFY-ER-581-CHANGE */
/*ZQ_HIS_REC_IN_BUFF := 8;*/
ZQ_RECORD_FULL := FALSE;
/* END: MODIFY-ER-581-CHANGE */

DO WITH Z_HISTORY_FILE;
  ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_35_3) * ZS_MAX_TC;
  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                       ZB_TABLE_SIZE);
OD; /* WITH Z_HISTORY_TABLE */

DO WITH Z_RESULT_FILE;
  ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
  Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

Q_S0160_READ_HIST_FILE (->Z_HISTORY_FILE,
                           ZS_MAX_TC,
                           ZS_FIRST_HIST_REC,
                           SIZE(CM_FY32_HIS_TYPE_35_3));
IF Z_CPL_CODES=E_NULL_CODE
   THEN
     ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
               -> ZM_RES_TYPE_35_ARR(ZQ_IND_REC).ZB_DATA;
     DO FOR ZQ_REC := 1 TO ZS_MAX_TC WHILE
                                 Z_CPL_CODES = E_NULL_CODE;
      DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR
                        -> CM_FY32_HIS_TYPE_35_3_BUF(ZQ_REC);

       IF B_TC_IDX /= H'FF
       THEN
	  /*BEGIN : FR36/307402*/
	  ZQ_AUPOIP_MODE := BOOL (Q_S4290_GET_AUOIP_MODE());
	  DO WITH Z_FA_BSS_PAR2.ZB_TUPLE_PTR->
		      ZM_R_BSS_PAR2;
	/*START: FR CRI00596704*/ 
        /* START: DCTPD00842744 */
	 IF (D_EN_AUOIP = TRUE)
	  THEN
	  IF (ZQ_AUPOIP_MODE)/*REPORT THE BLOCK WHEN TDM MODE*/
	  /*IF ((D_EN_AUOIP = TRUE) AND (ZQ_AUPOIP_MODE = TRUE))*/
          /* END: DCTPD00842744 */
	  /*END: FR CRI00596704*/ 
	    THEN
	  /*END : FR36/307402*/
            DO WITH ZQ_FILL_PTR -> ZM_RES_TYPE_35_3_TC;
               ZB_TAG       := ZS_TYPE_35_3_TC_TAG;
               ZB_LEN       := ZS_TYPE_35_3_TC_LEN;
               ZB_TC_ID     := B_TC_IDX;
               ZB_TC_FILLER := H'FF ;
               Q_S0786_CHECK_TYPE_35_3_OVERFLO(->B_CTRS_PT3_MT_35);
               ZB_TC_DATA := B_CTRS_PT3_MT_35;
            OD; /* DO WITH ZQ_FILL_PTR */
            ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                               SIZE(ZM_RES_TYPE_35_3_TC));

            IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                   ZQ_IND_REC,
                                   ZQ_RES_RRN,
                                   /* BEGIN: MODIFY-ER-581-CHANGE*/
                                   /*E_HIST_NORM*/
                                   E_HIST_35_3
                                   /* END: MODIFY-ER-581-CHANGE */
                                   )
               THEN
               ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                           -> ZM_RES_TYPE_35_ARR(ZQ_IND_REC).ZB_DATA;
               /* BEGIN: MODIFY-ER-581-CHANGE */                           
               ZQ_RECORD_FULL := TRUE;
            ELSE
               ZQ_RECORD_FULL := FALSE;
               /* END: MODIFY-ER-581-CHANGE */ 
            FI;
	  /*BEGIN : FR36/307402*/
	  /*START: FR CRI00596704*/
          /* START: DCTPD00842744 */
	  FI; /*CHECK FOR ZQ_AUPOIP_MODE*/
          /* END: DCTPD00842744 */
	  /*END: FR CRI00596704*/
	  ELSE /*FEATURE = FALSE*/
	  DO WITH ZQ_FILL_PTR -> ZM_RES_TYPE_35_3_TC;
               ZB_TAG       := ZS_TYPE_35_3_TC_TAG;
               ZB_LEN       := ZS_TYPE_35_3_TC_LEN;
               ZB_TC_ID     := B_TC_IDX;
               ZB_TC_FILLER := H'FF ;
               Q_S0786_CHECK_TYPE_35_3_OVERFLO(->B_CTRS_PT3_MT_35);
               ZB_TC_DATA := B_CTRS_PT3_MT_35;
            OD; /* DO WITH ZQ_FILL_PTR */
	    
            ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                               SIZE(ZM_RES_TYPE_35_3_TC));

            IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                   ZQ_IND_REC,
                                   ZQ_RES_RRN,
                                   /* BEGIN: MODIFY-ER-581-CHANGE*/
                                   /*E_HIST_NORM*/
                                   E_HIST_35_3
                                   /* END: MODIFY-ER-581-CHANGE */
                                   )
               THEN
               ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                           -> ZM_RES_TYPE_35_ARR(ZQ_IND_REC).ZB_DATA;
               /* BEGIN: MODIFY-ER-581-CHANGE */                           
               ZQ_RECORD_FULL := TRUE;
            ELSE
               ZQ_RECORD_FULL := FALSE;
               /* END: MODIFY-ER-581-CHANGE */ 
            FI;

	  FI;/*CHECK FOR FEATURE ENABLED OR DISABLED1*/
	  OD;
	  /*END : FR36/307402*/
         FI;
      OD; /* DO WITH Z_HIST */
    OD; /* DO FOR ZQ_REC */
FI;
Q_S0830_CHECK_LAST_WRITE(ZQ_IND_OBJ,
                         ZQ_IND_REC,
                         ZQ_RES_RRN);
/* BEGIN: MODIFY-ER-581-CHANGE */
/* BEGIN: ADD-WIPRO-B11-MR0-PKG1-CHANGE */   
/*IF (ZQ_IND_OBJ /= 1 OR ZQ_IND_REC /= 1)
THEN*/
/* END: ADD-WIPRO-B11-MR0-PKG1-CHANGE */   
 IF ZQ_RECORD_FULL OR 
/* BEGIN: ADD-WIPRO-FR36229339-CHANGE */   
      (ZQ_IND_OBJ = 1 AND ZQ_IND_REC = 1) 
/* END: ADD-WIPRO-FR36229339-CHANGE */   
 THEN
    Z_RES_RRN := ZQ_RES_RRN + ZQ_IND_REC - 1;
 ELSE
    Z_RES_RRN := ZQ_RES_RRN + ZQ_IND_REC;
 FI;
/* BEGIN: ADD-WIPRO-B11-MR0-PKG1-CHANGE */    
/*FI;*/
/* END: ADD-WIPRO-B11-MR0-PKG1-CHANGE */   
/* END: MODIFY-ER-581-CHANGE */

END Q_S0752_35_MAKE_RES_FILE_35_3;
  /* CR20/225233 */
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0752_35_MAKE_RES_FILE_35_4                       */
/*                                                                    */
/*     PROGRAMMER: SHAILESH                                           */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 06/06/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*     CALLED FROM:                                                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

/* BEGIN: ADD-WIPRO-B10-MR2-CHANGE*/
Q_S0752_35_MAKE_RES_FILE_35_4  : PROC ( );
DCL ZQ_START_REC_NO     INT;
DCL ZQ_IND_OBJ          INT;
DCL ZQ_RES_RRN          INT;
DCL ZQ_IND_REC          INT;
DCL ZQ_REC              M_BYTE;
DCL ZQ_FILL_PTR         PTR;
DCL ZQ_HIS_REC_IN_BUFF  INT;
DCL ZQ_BUF              INT;
DCL ZQ_I                CM_TYPE_35_CTRS_4;
DCL ZQ_TC_ID            M_TC_ID;
/* BEGIN: MODIFY-ER-581-CHANGE */
DCL ZQ_RECORD_FULL      BOOL;
/* END: MODIFY-ER-581-CHANGE */
/*BEGIN : FR36/307402*/
DCL ZQ_AUPOIP_MODE      BOOL;
/*END : FR36/307402*/
Z_TRACE := H'0751;

/* NOTE THAT THE GENERIC HEADER IS ALWAYS IN THE FIRST RECORD */
/* HENCE THE FIRST ITEM STARTS AT THE SECOND RECORD.          */
ZQ_IND_REC         := 1;
ZQ_IND_OBJ         := 1;
ZQ_RES_RRN         := Z_RES_RRN;
/* BEGIN: MODIFY-ER-581-CHANGE */
/*ZQ_HIS_REC_IN_BUFF := 8;*/
ZQ_RECORD_FULL := FALSE;
/* END: MODIFY-ER-581-CHANGE */

DO WITH Z_HISTORY_FILE;
  ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_35_4) * ZS_MAX_TC;
  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                       ZB_TABLE_SIZE);
OD; /* WITH Z_HISTORY_TABLE */

DO WITH Z_RESULT_FILE;
  ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
  Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

Q_S0160_READ_HIST_FILE (->Z_HISTORY_FILE,
                           ZS_MAX_TC,
                           ZS_FIRST_HIST_REC,
                           SIZE(CM_FY32_HIS_TYPE_35_4));

/* BEGIN: MODIFY-ER-581-CHANGE */
/*ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
               -> ZM_RES_TYPE_35_ARR(ZQ_IND_REC).ZB_DATA;*/
/* END: MODIFY-ER-581-CHANGE */   
           
IF Z_CPL_CODES=E_NULL_CODE
   THEN
     /* BEGIN: MODIFY-ER-581-CHANGE */
     ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
               -> ZM_RES_TYPE_35_ARR(ZQ_IND_REC).ZB_DATA;
     /* END: MODIFY-ER-581-CHANGE */  
     DO FOR ZQ_REC := 1 TO ZS_MAX_TC WHILE
                                 Z_CPL_CODES = E_NULL_CODE;
      DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR
                        -> CM_FY32_HIS_TYPE_35_4_BUF(ZQ_REC);

     /* BEGIN: MODIFY-ER-581-CHANGE */
         /*IF B_TC_IDX /= ZS_NULL*/
       IF B_TC_IDX /= H'FF
     /* END: MODIFY-ER-581-CHANGE */  
         THEN
	  /*BEGIN : FR36/307402*/
	  ZQ_AUPOIP_MODE := BOOL (Q_S4290_GET_AUOIP_MODE());
	  DO WITH Z_FA_BSS_PAR2.ZB_TUPLE_PTR->
		      ZM_R_BSS_PAR2;
         /*START: FR CRI00596704*/ 
         /* START: DCTPD00842744 */
         IF (D_EN_AUOIP = TRUE)
	  THEN
	  IF (ZQ_AUPOIP_MODE) /*BLOCK REPORTED IN TDM MODE ONLY*/
        /*IF ((D_EN_AUOIP = TRUE) AND (ZQ_AUPOIP_MODE = TRUE))*/
        /* END: DCTPD00842744 */
	 /*END: FR CRI00596704*/ 
	    THEN
	    /*END : FR36/307402*/
            DO WITH ZQ_FILL_PTR -> ZM_RES_TYPE_35_TC;
               ZB_TAG       := ZS_TYPE_35_TC_TAG;
               ZB_LEN       := ZS_TYPE_35_TC_LEN;
               ZB_TC_ID     := B_TC_IDX;
               ZB_TC_FILLER := H'FF;
               Q_S0786_CHECK_TYPE_35_4_OVERFLO(->B_CTRS_PT4_MT_35);
               ZB_TC_DATA := B_CTRS_PT4_MT_35;
            OD; /* DO WITH ZQ_FILL_PTR */
            ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                               SIZE(ZM_RES_TYPE_35_TC));

            IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                   ZQ_IND_REC,
                                   ZQ_RES_RRN,
                                   /* BEGIN: MODIFY-ER-581-CHANGE*/
                                   /*E_HIST_NORM*/
                                   E_HIST_35_4
                                   /* END: MODIFY-ER-581-CHANGE */
                                   )
               THEN
               ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                           -> ZM_RES_TYPE_35_ARR(ZQ_IND_REC).ZB_DATA;
               /* BEGIN: MODIFY-ER-581-CHANGE */                           
               ZQ_RECORD_FULL := TRUE;
            ELSE
               ZQ_RECORD_FULL := FALSE;
               /* END: MODIFY-ER-581-CHANGE */ 
            FI;
	  /*BEGIN : FR36/307402*/
	  /*START: FR CRI0059674*/
         /* START: DCTPD00842744 */
	   FI; /*check for MODE : TDM or IP*/
         /* END: DCTPD00842744 */
	  /*END: FR CRI00596704*/
	  ELSE /*FEATURE = FALSE*/
          DO WITH ZQ_FILL_PTR -> ZM_RES_TYPE_35_TC;
               ZB_TAG       := ZS_TYPE_35_TC_TAG;
               ZB_LEN       := ZS_TYPE_35_TC_LEN;
               ZB_TC_ID     := B_TC_IDX;
               ZB_TC_FILLER := H'FF;
               Q_S0786_CHECK_TYPE_35_4_OVERFLO(->B_CTRS_PT4_MT_35);
               ZB_TC_DATA := B_CTRS_PT4_MT_35;
            OD; /* DO WITH ZQ_FILL_PTR */
            ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                               SIZE(ZM_RES_TYPE_35_TC));

            IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                   ZQ_IND_REC,
                                   ZQ_RES_RRN,
                                   /* BEGIN: MODIFY-ER-581-CHANGE*/
                                   /*E_HIST_NORM*/
                                   E_HIST_35_4
                                   /* END: MODIFY-ER-581-CHANGE */
                                   )
               THEN
               ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                           -> ZM_RES_TYPE_35_ARR(ZQ_IND_REC).ZB_DATA;
               /* BEGIN: MODIFY-ER-581-CHANGE */                           
               ZQ_RECORD_FULL := TRUE;
            ELSE
               ZQ_RECORD_FULL := FALSE;
               /* END: MODIFY-ER-581-CHANGE */ 
            FI;
	  FI;/*check for feature enabled or diabled*/
	  OD;
	  /*END : FR36/307402*/
         FI;
      OD; /* DO WITH Z_HIST */
    OD; /* DO FOR ZQ_REC */
FI;
Q_S0830_CHECK_LAST_WRITE(ZQ_IND_OBJ,
                         ZQ_IND_REC,
                         ZQ_RES_RRN);
/* BEGIN: MODIFY-ER-581-CHANGE */
/* BEGIN: ADD-WIPRO-B11-MR0-PKG1-CHANGE */   
/*IF (ZQ_IND_OBJ /= 1 OR ZQ_IND_REC /= 1)
THEN*/
/* END: ADD-WIPRO-B11-MR0-PKG1-CHANGE */   
 IF ZQ_RECORD_FULL OR 
/* BEGIN: ADD-WIPRO-FR36229339-CHANGE */   
      (ZQ_IND_OBJ = 1 AND ZQ_IND_REC = 1) 
/* END: ADD-WIPRO-FR36229339-CHANGE */   
 THEN
    Z_RES_RRN := ZQ_RES_RRN + ZQ_IND_REC - 1;
 ELSE
    Z_RES_RRN := ZQ_RES_RRN + ZQ_IND_REC;
 FI;
/* BEGIN: ADD-WIPRO-B11-MR0-PKG1-CHANGE */    
/*FI;*/
/* END: ADD-WIPRO-B11-MR0-PKG1-CHANGE */   
/* END: MODIFY-ER-581-CHANGE */

END Q_S0752_35_MAKE_RES_FILE_35_4;
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0786_CHECK_TYPE_35_4_OVERFLO                     */
/*                                                                    */
/*     PROGRAMMER: SHAILESH                                           */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 06/06/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*     CALLED FROM:                                                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0786_CHECK_TYPE_35_4_OVERFLO : PROC (ZF_HIS_CC REF
                                         CM_FY32_HIS_TYPE_35_CTRS_4);

DCL ZQ_I    RANGE(E_MT_35_CTR_IP21:E_MT_35_CTR_IP35D);
DCL ZS_AUPOIP_MODE BOOL;
Z_TRACE := H'0786;

DO WITH ZF_HIS_CC -> ;
   /*DO FOR ZQ_I := E_MT_35_CTR_IP21 TO E_MT_35_CTR_IP23;*/
     /* CR20/225233 */
   /*DO FOR ZQ_I := E_MT_35_CTR_IP21 TO E_MT_35_CTR_IP33F;*/
   /*CR2517*/
   /*DO FOR ZQ_I := E_MT_35_CTR_IP21 TO E_MT_35_CTR_IP58; */
  /* for AUPOIP*/
   /*BEGIN:AUPOIP*/
      DO FOR ZQ_I := E_MT_35_CTR_IP21 TO E_MT_35_CTR_IP35D;
   /*END:AUPOIP*/
   /*CR2517*/
     /* CR20/225233 */

      CASE ZQ_I OF
      /*(E_MT_35_CTR_IP21:E_MT_35_CTR_IP23):*/
      /* CR20/225233 */
      (E_MT_35_CTR_IP21:E_MT_35_CTR_IP28G):
       /*B_IP21_TO_IP23(ZQ_I) := Q_S0840_CHECK_DPVAL
                                    (B_IP21_TO_IP23(ZQ_I));*/
      /*B_IP21_TO_IP28H(ZQ_I) := Q_S0840_CHECK_DPVAL*/
        B_IP21_TO_IP35D(ZQ_I) := Q_S0840_CHECK_DPVAL
                                /*  (B_IP21_TO_IP28H(ZQ_I));*/
                                    (B_IP21_TO_IP35D(ZQ_I));
      /* CR20/225233 */                                    
   
   /*CR2517*/
       /* START: CR 614323 */
       /* (E_MT_35_CTR_IP58):
        END: CR 614323
        B_IP21_TO_IP35D(ZQ_I).B_HIGH := 0;
        B_IP21_TO_IP35D(ZQ_I).B_LOW := 0; 
        B_IP21_TO_IP28H(ZQ_I).B_HIGH := 0;
        B_IP21_TO_IP28H(ZQ_I).B_LOW := 0;*/
   /*CR2517*/ 
  /*       
    BEGIN:AUPOIP */

      /* START: CR 614323 */
      (E_MT_35_CTR_IP30N:E_MT_35_CTR_IP35D):
      /* END: CR 614323 */

        IF (ZQ_I = E_MT_35_CTR_IP58)
        THEN 
          B_IP21_TO_IP35D(ZQ_I).B_HIGH := 0;
          B_IP21_TO_IP35D(ZQ_I).B_LOW := 0;
        ELSE

/* BEGIN : FR36/306441 */
/*   B_IP35A_TO_IP35D(ZQ_I) := Q_S0840_CHECK_DPVAL*/
	/*BEGIN : FR36/307401*/
	/*DO WITH Z_FA_BSS_PAR2.ZB_TUPLE_PTR->
		      ZM_R_BSS_PAR2;
	   IF (D_EN_AUOIP = TRUE)
	      AND
	      (NOT D_TDM_COD.B_RESERVED)
	   THEN*/
	/* BEGIN : FR36-308826*/
	 DO WITH Z_FA_BSS_PAR2.ZB_TUPLE_PTR->
		         ZM_R_BSS_PAR2;
	   IF (D_EN_AUOIP = TRUE) THEN
	/*END : FR36-308826*/
	   ZS_AUPOIP_MODE := BOOL(Q_S4290_GET_AUOIP_MODE());
	    IF (ZS_AUPOIP_MODE)/*UPDATE COUNTERS IN TDM MODE*/
	     THEN
	      B_IP21_TO_IP35D(ZQ_I) := Q_S0840_CHECK_DPVAL
                                /*(B_IP35A_TO_IP35D(ZQ_I));*/
				 (B_IP21_TO_IP35D(ZQ_I));
	    ELSIF (NOT ZS_AUPOIP_MODE)/*UPDATE COUNTERS AS ZERO
		 IN IP MODE*/
	     THEN
 	     B_IP21_TO_IP35D(ZQ_I).B_HIGH := 0;
 	     B_IP21_TO_IP35D(ZQ_I).B_LOW := 0;
	    FI;
	/* BEGIN : FR36-308826*/
	   ELSE
 	     B_IP21_TO_IP35D(ZQ_I).B_HIGH := 0;
 	     B_IP21_TO_IP35D(ZQ_I).B_LOW := 0;
	   FI;
	OD;
       FI; /* IF ZQ_I = E_MT_35_CTR_IP58 */
	/*END : FR36-308826*/
	/*END : FR36/307401*/
/* END : FR36/306441 */
          ELSE
	ESAC;
	OD;
	/*END:AUPOIP*/ 
OD;
END Q_S0786_CHECK_TYPE_35_4_OVERFLO;
  /* CR20/225233 */
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0786_CHECK_TYPE_35_3_OVERFLO                     */
/*                                                                    */
/*     PROGRAMMER: SHAILESH                                           */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 06/06/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*     CALLED FROM:                                                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0786_CHECK_TYPE_35_3_OVERFLO : PROC (ZF_HIS_CC REF
                                         CM_FY32_HIS_TYPE_35_CTRS_3);

/*DCL ZQ_I    RANGE(E_MT_35_CTR_IP33A:E_MT_35_CTR_IP33F);*/
      /*CR2517*/
    DCL ZQ_I CM_TYPE_35_CTRS_3;
      /*CR2517*/


Z_TRACE := H'0786;

DO WITH ZF_HIS_CC -> ;
      /*CR2517*/
   DO FOR ZQ_I := E_MT_35_CTR_IP33A TO E_MT_35_CTR_IP53;
      /*CR2517*/
      CASE ZQ_I OF


      (E_MT_35_CTR_IP33A:E_MT_35_CTR_IP33F):
         B_IP33A_TO_IP33F(ZQ_I) := Q_S0840_CHECK_DPVAL
                                    (B_IP33A_TO_IP33F(ZQ_I));
      /*CR2517*/
      (E_MT_35_CTR_IP52:E_MT_35_CTR_IP53):
         B_IP33A_TO_IP33F(ZQ_I).B_HIGH := 0;
         B_IP33A_TO_IP33F(ZQ_I).B_LOW := 0;
      /*CR2517*/
      ESAC;
   OD;
OD;
END Q_S0786_CHECK_TYPE_35_3_OVERFLO;
 /* CR20/225233 */
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0753_35_MAKE_RES_FILE_35_5                       */
/*                                                                    */
/*     PROGRAMMER: SHAILESH                                           */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 06/06/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*     CALLED FROM:                                                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
/* BEGIN: ADD-WIPRO-B10-MR2-CHANGE*/
Q_S0753_35_MAKE_RES_FILE_35_5  : PROC ( );
DCL ZQ_START_REC_NO     INT;
DCL ZQ_IND_OBJ          INT;
DCL ZQ_RES_RRN          INT;
DCL ZQ_IND_REC          INT;
DCL ZQ_REC              M_BYTE;
DCL ZQ_FILL_PTR         PTR;
DCL ZQ_HIS_REC_IN_BUFF  INT;
DCL ZQ_BUF              INT;
/*CR2517*/
DCL ZQ_I                CM_TYPE_35_CTRS_5;
/*CR2517*/
DCL ZQ_BTS_ID           M_BEQ_NBR;
/* BEGIN: ADD-WIPRO-B11-MR0-PKG1-CHANGE */   
DCL ZQ_RECORD_FULL      BOOL;
/* END: ADD-WIPRO-B11-MR0-PKG1-CHANGE */ 
DCL ZS_AUPOIP_MODE BOOL;
Z_TRACE := H'0751;

/* NOTE THAT THE GENERIC HEADER IS ALWAYS IN THE FIRST RECORD */
/* HENCE THE FIRST ITEM STARTS AT THE SECOND RECORD.          */
ZQ_IND_REC         := 1;
ZQ_IND_OBJ         := 1;
ZQ_RES_RRN         := Z_RES_RRN;
/* BEGIN: ADD-WIPRO-B11-MR0-PKG1-CHANGE */   
/*ZQ_HIS_REC_IN_BUFF := 40;*/
/* BEGIN: ADD-WIPRO-FR36229339-CHANGE */   
/*ZQ_HIS_REC_IN_BUFF := 8;*/
ZQ_HIS_REC_IN_BUFF := 10;
/* BEGIN: ADD-WIPRO-FR36229339-CHANGE */   
ZQ_RECORD_FULL := FALSE;
/* END: ADD-WIPRO-B11-MR0-PKG1-CHANGE */   

DO WITH Z_HISTORY_FILE;
  ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_35_5) * ZQ_HIS_REC_IN_BUFF;
  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                       ZB_TABLE_SIZE);
OD; /* WITH Z_HISTORY_TABLE */

DO WITH Z_RESULT_FILE;
  ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
  Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
               -> ZM_RES_TYPE_35_ARR(ZQ_IND_REC).ZB_DATA;

DO FOR ZQ_BUF := 0 TO (CM_FY32_MAX_BTS_PER_BSC /
                        ZQ_HIS_REC_IN_BUFF )

   WHILE Z_CPL_CODES = E_NULL_CODE;

   ZQ_START_REC_NO:= ZQ_HIS_REC_IN_BUFF * ZQ_BUF;

   IF ZQ_START_REC_NO + ( ZQ_HIS_REC_IN_BUFF - 1 ) >
                          CM_FY32_MAX_BTS_PER_BSC THEN

      /* LAST HISTORY BUFFER TO BE READ FOR THIS MEAS TYPE */
      ZQ_HIS_REC_IN_BUFF := CM_FY32_MAX_BTS_PER_BSC REM
                           ZQ_HIS_REC_IN_BUFF;
      Z_HISTORY_FILE.ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_35_5)
                                       * ZQ_HIS_REC_IN_BUFF;
   FI;

   Q_S0160_READ_HIST_FILE (->Z_HISTORY_FILE,
                           ZQ_HIS_REC_IN_BUFF,
                           ZQ_START_REC_NO,
                           SIZE(CM_FY32_HIS_TYPE_35_5));

   DO FOR ZQ_REC := 1 TO ZQ_HIS_REC_IN_BUFF WHILE
                                 Z_CPL_CODES = E_NULL_CODE;
      DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR
                        -> CM_FY32_HIS_TYPE_35_5_BUF(ZQ_REC);

         /*IF Q_S0270_BEQ_SEQ_FROM_CELL_IDX(B_CELL_ID,ZQ_CELL_ID)
            THEN*/
         /* BEGIN: MODIFY-ER-581-CHANGE */
         /*AM: START DCTPD761944*/ 
         /*IF B_BTS_IDX /= H'FF*/
         /* BEGIN CRI#01410758.02 BTS ID RANGE */
         /* IF B_BTS_IDX /= H'FF AND
            Q_S0455_CHK_IF_IP_BTS(B_BTS_IDX) */
            IF ((B_BTS_IDX >= H'01 AND B_BTS_IDX <= H'FF) AND
 	                Q_S0455_CHK_IF_IP_BTS(B_BTS_IDX))
         /* END CRI#01410758.02 BTS ID RANGE */   
         /*AM: END DCTPD761944*/ 
         THEN
        /* END: MODIFY-ER-581-CHANGE */  
	   DO WITH ZQ_FILL_PTR -> ZM_RES_TYPE_35_BTS;
               ZB_TAG       := ZS_TYPE_35_BTS_TAG;
               ZB_LEN       := ZS_TYPE_35_BTS_LEN;
               ZB_BTS_ID    := B_BTS_IDX;
            /*BEGIN : FR36/307402*/
	     DO WITH Z_FA_BSS_PAR2.ZB_TUPLE_PTR->
		      ZM_R_BSS_PAR2;
	       IF (D_EN_AUOIP = TRUE)
		THEN 
		 ZS_AUPOIP_MODE := BOOL(Q_S4290_GET_AUOIP_MODE());
			/*IF FULL MODE*/
		  IF (NOT ZS_AUPOIP_MODE)
		  THEN
               	      ZB_TC_ID     := H'FF; 
	          ELSE
		      ZB_TC_ID := B_TC_IDX;
	          FI;
	       ELSE
		   ZB_TC_ID := B_TC_IDX;
	       FI;
	       OD;
	/*END : FR36/307402*/
               Q_S0787_CHECK_TYPE_35_5_OVERFLO(->B_CTRS_PT5_MT_35);
	       ZB_BTS_DATA :=  B_CTRS_PT5_MT_35;
            OD;  /* DO WITH ZQ_FILL_PTR */

                /* CR20/225233 */
                /* CR20/225233 */
               /* BEGIN: ADD-WIPRO-B11-MR0-PKG1-CHANGE */   
               /*DO WITH B_CTRS_PT5_MT_35;
                   IF B_IP12_TO_IP12(E_MT_35_CTR_IP12)
                      = ZS_DPVAL_OVERFLOW
                      THEN
                      B_IP12_TO_IP12(E_MT_35_CTR_IP12)
                          := ZS_DPVAL_INVALID;
                   FI;
               OD;*/
	/*START : FR36/307402*/
              /*Q_S0787_CHECK_TYPE_35_5_OVERFLO(->B_CTRS_PT5_MT_35);*/
	/*END : FR36/307402*/
               /* END: ADD-WIPRO-B11-MR0-PKG1-CHANGE */       
               
                   ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                               SIZE(ZM_RES_TYPE_35_BTS));

            IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                   ZQ_IND_REC,
                                   ZQ_RES_RRN,
                                   E_HIST_35_5)
               THEN
               ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                           -> ZM_RES_TYPE_35_ARR(ZQ_IND_REC).ZB_DATA;
           /* BEGIN: ADD-WIPRO-B11-MR0-PKG1-CHANGE */                              
               ZQ_RECORD_FULL := TRUE;
            ELSE
               ZQ_RECORD_FULL := FALSE;
            /* END: ADD-WIPRO-B11-MR0-PKG1-CHANGE */      
            FI;
         /* BEGIN: MODIFY-ER-581-CHANGE */
         FI;
        /* END: MODIFY-ER-581-CHANGE */  
      OD; /* DO WITH Z_HIST */
   OD; /* DO FOR ZQ_REC */
OD; /* DO FOR ZQ_BUF */

Q_S0830_CHECK_LAST_WRITE(ZQ_IND_OBJ,
                         ZQ_IND_REC,
                         ZQ_RES_RRN);

/* BEGIN: ADD-WIPRO-B11-MR0-PKG1-CHANGE */   
IF ZQ_RECORD_FULL
/* BEGIN: ADD-WIPRO-FR36229339-CHANGE */   
 OR (ZQ_IND_OBJ = 1 AND ZQ_IND_REC = 1)
/* END: ADD-WIPRO-FR36229339-CHANGE */   
 THEN
    Z_RES_RRN := ZQ_RES_RRN + ZQ_IND_REC - 1;
 ELSE
    Z_RES_RRN := ZQ_RES_RRN + ZQ_IND_REC;
 FI;
/* END: ADD-WIPRO-B11-MR0-PKG1-CHANGE */   

END Q_S0753_35_MAKE_RES_FILE_35_5;
/*AM: START DCTPD00761944*/
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0455_CHK_IF_IP_BTS                               */        
/*                                                                    */        
/*     PROGRAMMER:ATMARAM MORE                                        */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:26/7/2012 */        
/*                                                                    */        
/*     CREATION DATE: 97/11/11                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                                                                    */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*     CALLED FROM: Q_S0753_35_MAKE_RES_FILE_35_5                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                   GET R_BEQ_MGT                                    */        
/*                   GET R_ABIS_INF                                   */
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0455_CHK_IF_IP_BTS: PROC(ZF_BTS_EQ M_UNIT_NBR)RETURNS (BOOL);                               

DCL ZQ_ABIS_NBR M_ABIS_LINK_NBR;
DCL ZQ_IP_BTS BOOL;

ZQ_IP_BTS := FALSE;
ZQ_ABIS_NBR := ZS_FFFF;

GET R_BEQ_MGT WHERE (D_BEQ_NBR = ZF_BTS_EQ);
IF DB_PARMS.B_DB_STATUS=M_DB_SUCCESS
   THEN
   ZQ_ABIS_NBR := R_BEQ_MGT.D_ABIS_NBR;
FI;   

IF (ZQ_ABIS_NBR /= ZS_FFFF)
THEN
   GET R_ABIS_INF WHERE (D_ABIS_NBR = ZQ_ABIS_NBR);
   IF DB_PARMS.B_DB_STATUS=M_DB_SUCCESS
      THEN
           IF (R_ABIS_INF.D_CUR_MODE = M_ABIS_TRANS_MODE_IPETH)
           OR (R_ABIS_INF.D_CUR_MODE = M_ABIS_TRANS_MODE_IPFR)
           OR (R_ABIS_INF.D_CUR_MODE = M_ABIS_TRANS_MODE_IPUN)
           OR (R_ABIS_INF.D_CUR_MODE = M_ABIS_TRANS_MODE_IP_E1WCP)
        THEN
       	     ZQ_IP_BTS := TRUE;
          FI;
    FI;
FI; 
RETURN (ZQ_IP_BTS);
END Q_S0455_CHK_IF_IP_BTS;
/*AM:END DCTPD00761944*/

/* BEGIN: ADD-WIPRO-B10-MR2-CHANGE*/
/* BEGIN: ADD-WIPRO-B11-MR0-PKG1-CHANGE */   
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0787_CHECK_TYPE_35_5_OVERFLO                     */
/*                                                                    */
/*     PROGRAMMER: SHAILESH                                           */
/*                                                                    */
/*                LAST MODIFIED BY:PURNA CHANDRA       DATE:          */
/*                                                                    */
/*     CREATION DATE: 06/06/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*     CALLED FROM:                                                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0787_CHECK_TYPE_35_5_OVERFLO : PROC (ZF_HIS_CC REF
                                         CM_FY32_HIS_TYPE_35_CTRS_5);

  /*CR2517*/ 
 /*DCL ZQ_I    RANGE(E_MT_35_CTR_IP12:E_MT_35_CTR_IP63);*/ 
/*BEGIN:ADD PROVISIONAL COUNTERS*/
/*FOR AUPOIP*/
  /*DCL ZQ_I    RANGE(E_MT_35_CTR_IP12:E_MT_35_CTR_IP62);*/
    DCL ZQ_I    RANGE(E_MT_35_CTR_IP12:E_MT_35_CTR_IP69);
 /*END:ADD PROVISIONAL COUNTERS*/
  /*CR2517*/ 
  /*DCL ZQ_I M_TYPE_35_CTRS_5;*/
/*FR36/307401-02*/
   DCL ZS_AUPOIP_MODE BOOL;

Z_TRACE := H'0786;

DO WITH ZF_HIS_CC -> ;
    /*CR2517*/  
    /*DO FOR ZQ_I := E_MT_35_CTR_IP12 TO E_MT_35_CTR_IP63;*/  
/*FOR AUPOIP*/
        /*BEGIN:ADD PROVISIONAL COUNTERS*/
	/* DO FOR ZQ_I := E_MT_35_CTR_IP12 TO E_MT_35_CTR_IP62;*/
	/*BEGIN : FR36/307401*/
           DO FOR ZQ_I := E_MT_35_CTR_IP12 TO E_MT_35_CTR_IP69;
	/*END : FR36/307401*/
        /*END:ADD PROVISIONAL COUNTERS*/
    /*CR2517*/  
    CASE ZQ_I OF
  
      (E_MT_35_CTR_IP12):
        IF B_IP12_TO_IP12 = ZS_DPVAL_OVERFLOW
        THEN
          B_IP12_TO_IP12 := ZS_DPVAL_INVALID;
        FI;
      /*BEGIN : FR36/307401-02*/
      /*(E_MT_35_CTR_IP25A:E_MT_35_CTR_IP30M):*/
      (E_MT_35_CTR_IP25A:E_MT_35_CTR_IP29L):
        B_IP25A_TO_IP30M(ZQ_I) := Q_S0840_CHECK_DPVAL
                                    (B_IP25A_TO_IP30M(ZQ_I));    
      (E_MT_35_CTR_IP30A:E_MT_35_CTR_IP30M):

        /* START: CR 614323 */ 

        DO WITH Z_FA_BSS_PAR2.ZB_TUPLE_PTR->                                      
		      ZM_R_BSS_PAR2;                                                          
	  IF (D_EN_AUOIP = TRUE)
          THEN
            B_IP25A_TO_IP30M(ZQ_I).B_HIGH := 0;
	    B_IP25A_TO_IP30M(ZQ_I).B_LOW  := 0;
          ELSE
            B_IP25A_TO_IP30M(ZQ_I) := Q_S0840_CHECK_DPVAL
                                 (B_IP25A_TO_IP30M(ZQ_I));
          FI;
        OD;
 
	/* ZS_AUPOIP_MODE := BOOL(Q_S4290_GET_AUOIP_MODE());*/
	/*IF (ZS_AUPOIP_MODE)*/ /*IF TDM MODE*/
	/* THEN
	B_IP25A_TO_IP30M(ZQ_I) := Q_S0840_CHECK_DPVAL
                                 (B_IP25A_TO_IP30M(ZQ_I));
	ELSE
	B_IP25A_TO_IP30M(ZQ_I).B_HIGH := 0;
	B_IP25A_TO_IP30M(ZQ_I).B_LOW  := 0;
	FI;*/
        /* END: CR 614323 */
	/*END : FR36/307401-02*/
      (E_MT_35_CTR_IP31A):
       B_IP31A_TO_IP31A := Q_S0850_CHECK_3_INT_CNTR
                                    (B_IP31A_TO_IP31A);
      
      (E_MT_35_CTR_IP31C:E_MT_35_CTR_IP42D):
       B_IP31C_TO_IP42D(ZQ_I) := Q_S0840_CHECK_DPVAL
                                    (B_IP31C_TO_IP42D(ZQ_I));

      (E_MT_35_CTR_IP29I):
         B_IP29I.B_HIGH:=0;
         B_IP29I.B_LOW:=0;

/*commented for aupoip as IP63 is not in block 355*/  /*CR2517*/                              
     /* (E_MT_35_CTR_IP59:E_MT_35_CTR_IP63): 
       B_IP59_TO_IP63(ZQ_I).B_HIGH := 0;
       B_IP59_TO_IP63(ZQ_I).B_LOW := 0;*/
       /*CR2517*/

	/*BEGIN:FOR AUPOIP : FR36/307401*/
	   (E_MT_35_CTR_IP59:E_MT_35_CTR_IP62): 
            /* BEGIN : FR36/308660: AUOIP disabled */
            DO WITH Z_FA_BSS_PAR2.ZB_TUPLE_PTR->
		      ZM_R_BSS_PAR2;
            IF D_EN_AUOIP = FALSE
            THEN
               B_IP59_TO_IP62(ZQ_I).B_HIGH := 0;
               B_IP59_TO_IP62(ZQ_I).B_LOW  := 0;
            ELSE 
            /* END : FR36/308660: AUOIP disabled */

	   /*BEGIN : FR36/307401*/
	  /* DO WITH Z_FA_BSS_PAR2.ZB_TUPLE_PTR->
		      ZM_R_BSS_PAR2;*/
	   /*BEGIN : FR36-308826*/
	     DO WITH Z_FA_BSS_PAR2.ZB_TUPLE_PTR->
		         ZM_R_BSS_PAR2;
	      IF (D_EN_AUOIP = TRUE)  
	       THEN
	   /*END : FR36-308826*/
	       ZS_AUPOIP_MODE := BOOL(Q_S4290_GET_AUOIP_MODE ());
	/* BEGIN : DN-PM INLINE AUPOIP */	
	      /*IF (NOT ZS_AUPOIP_MODE) */
	 	IF ((ZS_AUPOIP_MODE) AND
		    (R_ABIS_INF.D_CUR_MODE=1))
	/* END : DN-PM INLINE AUPOIP */	
	       	 THEN
	/* BEGIN : DN-PM INLINE AUPOIP */
	   /*UPDATE COUNTERS WHEN FULL AUOIP*/
		    B_IP59_TO_IP62(ZQ_I).B_HIGH := 0;
		    B_IP59_TO_IP62(ZQ_I).B_LOW  := 0;
	/* END : DN-PM INLINE AUPOIP */
		         /*  B_IP59_TO_IP62(ZQ_I):= 
  			Q_S0840_CHECK_DPVAL
                        (B_IP59_TO_IP62(ZQ_I));
	       ELSIF (ZS_AUPOIP_MODE)*/
	/* BEGIN : DN-PM INLINE AUPOIP */
		ELSE/*UPDATE COUNTERS AS ZERO WHEN 
		FULL TDM */
                /* THEN
		 B_IP59_TO_IP62(ZQ_I).B_HIGH := 0;
		 B_IP59_TO_IP62(ZQ_I).B_LOW  := 0;*/
		    B_IP59_TO_IP62(ZQ_I):= 
  			Q_S0840_CHECK_DPVAL
                        (B_IP59_TO_IP62(ZQ_I));
	/* END : DN-PM INLINE AUPOIP */
	        FI;
	/*BEGIN : FR36-308826*/
	      ELSE
		B_IP59_TO_IP62(ZQ_I).B_HIGH := 0;
		B_IP59_TO_IP62(ZQ_I).B_LOW  := 0;
	      FI;
	   OD;
	/*END : FR36-308826*/	
	   /*END : FR36/307401 */								
	/*END:FOR AUPOIP : FR36/307401*/
       /*BEGIN:ADD PROVISIONAL COUNTERS - FR36/307401*/
           /* BEGIN : FR36/308660: AUOIP disabled */
           FI;
           OD;
           /* END : FR36/308660: AUOIP disabled */

	   (E_MT_35_CTR_IP66:E_MT_35_CTR_IP69):
	 	B_IP66_TO_IP69(ZQ_I).B_HIGH := 0;
          	B_IP66_TO_IP69(ZQ_I).B_LOW := 0;
      /*END:ADD PROVISIONAL COUNTERS - FR36/307401*/
       ELSE;
      ESAC;
   OD;
OD;
END Q_S0787_CHECK_TYPE_35_5_OVERFLO;
/*BEGIN : FR36/307401-02*/
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE:    Q_S4290_GET_AUOIP_MODE                           */
/*                                                                    */
/*     PROGRAMMER: RAJASHRI                                           */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 16/03/11                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*     TO GET THE MODE FOR AUP : TDM OR IP                            */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*     CALLED FROM:                                                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S4290_GET_AUOIP_MODE : PROC()                
RETURNS(ZM_AUPOIP_MODE);        
                                                                                

  DO WITH Z_FA_BSS_PAR2.ZB_TUPLE_PTR->
                  ZM_R_BSS_PAR2;         
   IF M_BYTE(D_TDM_COD) = H'00  
  THEN       
                   
     RETURN(ZE_AUPOIP_FULL);   
  ELSE                    
     
    RETURN(ZE_AUPOIP_MIXED);
  FI;
OD; 

END Q_S4290_GET_AUOIP_MODE;      
/*END : FR36/307401-02*/
/*START: BTS FRQ SYNCH FEATURE*/
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0753_35_MAKE_RES_FILE_35_6                       */
/*                                                                    */
/*     PROGRAMMER: AMITABH                                            */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 06/06/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*     USED TO UPDATE BLOCK 7 COUNTERS TO RESULT FILE                 */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*     CALLED FROM:                                                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0753_35_MAKE_RES_FILE_35_6  : PROC ( );
DCL ZQ_START_REC_NO     INT;
DCL ZQ_IND_OBJ          INT;
DCL ZQ_RES_RRN          INT;
DCL ZQ_IND_REC          INT;
DCL ZQ_REC              M_BYTE;
DCL ZQ_FILL_PTR         PTR;
DCL ZQ_HIS_REC_IN_BUFF  INT;
DCL ZQ_BUF              INT;
DCL ZQ_RECORD_FULL      BOOL;
/*AUPOIP*/
DCL ZQ_I  RANGE(E_MT_35_CTR_IP70:E_MT_35_CTR_IP89);

Z_TRACE := H'0751;

/* NOTE THAT THE GENERIC HEADER IS ALWAYS IN THE FIRST RECORD */
/* HENCE THE FIRST ITEM STARTS AT THE SECOND RECORD.          */
ZQ_IND_REC         := 1;
ZQ_IND_OBJ         := 1;
ZQ_RES_RRN         := Z_RES_RRN;

ZQ_HIS_REC_IN_BUFF := 10;





ZQ_RECORD_FULL := FALSE;

DO WITH Z_HISTORY_FILE;
  ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_35_6) * ZQ_HIS_REC_IN_BUFF;
  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                       ZB_TABLE_SIZE);
OD; /* WITH Z_HISTORY_TABLE */

DO WITH Z_RESULT_FILE;
  ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
  Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
               -> ZM_RES_TYPE_35_ARR(ZQ_IND_REC).ZB_DATA;

DO FOR ZQ_BUF := 0 TO (CM_FY32_MAX_BTS_PER_BSC /
                        ZQ_HIS_REC_IN_BUFF )

   WHILE Z_CPL_CODES = E_NULL_CODE;

   ZQ_START_REC_NO:= ZQ_HIS_REC_IN_BUFF * ZQ_BUF;

   IF ZQ_START_REC_NO + ( ZQ_HIS_REC_IN_BUFF - 1 ) >
                          CM_FY32_MAX_BTS_PER_BSC THEN

      /* LAST HISTORY BUFFER TO BE READ FOR THIS MEAS TYPE */
      ZQ_HIS_REC_IN_BUFF := CM_FY32_MAX_BTS_PER_BSC REM
                           ZQ_HIS_REC_IN_BUFF;
      Z_HISTORY_FILE.ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_35_6)
                                       * ZQ_HIS_REC_IN_BUFF;
   FI;

   Q_S0160_READ_HIST_FILE (->Z_HISTORY_FILE,
                           ZQ_HIS_REC_IN_BUFF,
                           ZQ_START_REC_NO,
                           SIZE(CM_FY32_HIS_TYPE_35_6));

   DO FOR ZQ_REC := 1 TO ZQ_HIS_REC_IN_BUFF WHILE
                                 Z_CPL_CODES = E_NULL_CODE;
      DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR
                        -> CM_FY32_HIS_TYPE_35_6_BUF(ZQ_REC);
          /* BEGIN CRI#01410758.02 BTS ID RANGE */
          /* BEGIN CR 01757372 MISSING T35 IN NPO */
          /* IF B_BTS_IDX /= H'FF */
          IF (B_BTS_IDX >= H'01 AND B_BTS_IDX <= H'FF)
	   /* END CR 01757372 MISSING T35 IN NPO */
          /* END CRI#01410758.02 BTS ID RANGE */
         THEN
             DO WITH ZQ_FILL_PTR -> ZM_RES_TYPE_35_BTS_B7;
               ZB_TAG       := ZS_TYPE_35_BTS_BLK_7_8_TAG;
               ZB_LEN       := ZS_TYPE_35_BTS_BLK_7_8_LEN;
               ZB_BTS_ID    := B_BTS_IDX;
               ZB_FILLER    := H'FF;
               Q_S0787_CHECK_TYPE_35_6_OVERFLO(->B_CTRS_PT6_MT_35);
        /*AM START :DCT00800022*/             
                /*BEGIN:AUPOIP*/	
		/*DO FOR ZQ_I := E_MT_35_CTR_IP70 
                                     TO E_MT_35_CTR_IP89;
                 DO WITH B_CTRS_PT6_MT_35;
		
								 
		   CASE (ZQ_I) OF 
		      (E_MT_35_CTR_IP70:E_MT_35_CTR_IP73):
			 B_IP70_TO_IP73(ZQ_I):=0;
					 
		      (E_MT_35_CTR_IP74):
			B_IP74_TO_IP79(ZQ_I).B_HIGH:=0;
			B_IP74_TO_IP79(ZQ_I).B_LOW:=0;
		     ELSE
		   ESAC;
		  OD;
		 OD;*/
              /*END:AUPOIP*/
       /*AM END :DCT00800022*/ 
               ZB_BTS_DATA :=  B_CTRS_PT6_MT_35;
            OD; /* DO WITH ZQ_FILL_PTR */
            ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                               SIZE(ZM_RES_TYPE_35_BTS_B7));

            IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                   ZQ_IND_REC,
                                   ZQ_RES_RRN,
                                   E_HIST_35_6)
               THEN
               ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                           -> ZM_RES_TYPE_35_ARR(ZQ_IND_REC).ZB_DATA;
                ZQ_RECORD_FULL := TRUE;
            ELSE
               ZQ_RECORD_FULL := FALSE;
             FI;
           FI;
      OD; /* DO WITH Z_HIST */
   OD; /* DO FOR ZQ_REC */
OD; /* DO FOR ZQ_BUF */

Q_S0830_CHECK_LAST_WRITE(ZQ_IND_OBJ,
                         ZQ_IND_REC,
                         ZQ_RES_RRN);

IF ZQ_RECORD_FULL
 OR (ZQ_IND_OBJ = 1 AND ZQ_IND_REC = 1)
 THEN
    Z_RES_RRN := ZQ_RES_RRN + ZQ_IND_REC - 1;
 ELSE
    Z_RES_RRN := ZQ_RES_RRN + ZQ_IND_REC;
 FI;

END Q_S0753_35_MAKE_RES_FILE_35_6;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0787_CHECK_TYPE_35_6_OVERFLO                     */
/*                                                                    */
/*     PROGRAMMER: AMITABH                                            */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 06/06/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*     CALLED FROM:                                                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0787_CHECK_TYPE_35_6_OVERFLO : PROC (ZF_HIS_CC REF
                                         CM_FY32_HIS_TYPE_35_CTRS_6);

  DCL ZQ_I    RANGE(E_MT_35_CTR_IP70:E_MT_35_CTR_IP73);
Z_TRACE := H'0789;

DO WITH ZF_HIS_CC -> ;
    DO FOR ZQ_I := E_MT_35_CTR_IP70 TO E_MT_35_CTR_IP73;
    /*BEGIN: DCTPD00633131.01*/
    /*CASE ZQ_I OF
  
        (E_MT_35_CTR_IP70:E_MT_35_CTR_IP73):*/
    /*END: DCTPD00633131.01*/
     IF ( (B_IP70_TO_IP73(ZQ_I) = ZS_FFFF) OR
            (B_IP70_TO_IP73(ZQ_I) = H'FFFE) )
      THEN
      B_IP70_TO_IP73(ZQ_I):= ZS_FFFF;
     FI;
    /*BEGIN: DCTPD00633131.01*/
    /*ESAC;*/
    /*END: DCTPD00633131.01*/
   OD;
OD;
END Q_S0787_CHECK_TYPE_35_6_OVERFLO;
/*END:CR20/284751 BTS FRQ SYNCH */	
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0754_35_MAKE_RES_FILE_35_7                       */
/*                                                                    */
/*     PROGRAMMER: SHAILESH                                           */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 06/06/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*     CALLED FROM:                                                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0754_35_MAKE_RES_FILE_35_7  : PROC ( );
DCL ZQ_START_REC_NO     INT;
DCL ZQ_IND_OBJ          INT;
DCL ZQ_RES_RRN          INT;
DCL ZQ_IND_REC          INT;
DCL ZQ_REC              M_BYTE;
DCL ZQ_FILL_PTR         PTR;
DCL ZQ_HIS_REC_IN_BUFF  INT;
DCL ZQ_BUF              INT;
DCL ZQ_I                M_TYPE_35_CTRS_7;
DCL ZQ_GSL_ID           INT;
DCL ZQ_RECORD_FULL      BOOL;


Z_TRACE := H'0751;

ZQ_IND_REC         := 1;
ZQ_IND_OBJ         := 1;
ZQ_RES_RRN         := Z_RES_RRN;
ZQ_HIS_REC_IN_BUFF := 8;
ZQ_RECORD_FULL := FALSE;

DO WITH Z_HISTORY_FILE;
  ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_35_7) * ZQ_HIS_REC_IN_BUFF;
  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                       ZB_TABLE_SIZE);
OD; /* WITH Z_HISTORY_TABLE */

DO WITH Z_RESULT_FILE;
  ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
  Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
               -> ZM_RES_TYPE_35_ARR(ZQ_IND_REC).ZB_DATA;

DO FOR ZQ_BUF := 0 TO (CM_FY32_MAX_GSL_PER_BSC /
                        ZQ_HIS_REC_IN_BUFF )

   WHILE Z_CPL_CODES = E_NULL_CODE;

   ZQ_START_REC_NO:= ZQ_HIS_REC_IN_BUFF * ZQ_BUF;

   IF ZQ_START_REC_NO + ( ZQ_HIS_REC_IN_BUFF - 1 ) >
                          CM_FY32_MAX_GSL_PER_BSC THEN

      /* LAST HISTORY BUFFER TO BE READ FOR THIS MEAS TYPE */
      ZQ_HIS_REC_IN_BUFF := CM_FY32_MAX_GSL_PER_BSC REM
                           ZQ_HIS_REC_IN_BUFF;
      Z_HISTORY_FILE.ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_35_7)
                                       * ZQ_HIS_REC_IN_BUFF;
   FI;

   Q_S0160_READ_HIST_FILE (->Z_HISTORY_FILE,
                           ZQ_HIS_REC_IN_BUFF,
                           ZQ_START_REC_NO,
                           SIZE(CM_FY32_HIS_TYPE_35_7));

   DO FOR ZQ_REC := 1 TO ZQ_HIS_REC_IN_BUFF WHILE
                                 Z_CPL_CODES = E_NULL_CODE;
      DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR
                        -> CM_FY32_HIS_TYPE_35_7_BUF(ZQ_REC);
         IF B_GSL_NBR /= H'FFFF
         THEN
            DO WITH ZQ_FILL_PTR -> ZM_RES_TYPE_35_GSL;
               ZB_TAG       := ZS_TYPE_35_GSL_TAG;
               ZB_LEN       := ZS_TYPE_35_GSL_LEN;
               ZB_GSL_NBR    := B_GSL_NBR;
               Q_S0788_CHECK_TYPE_35_7_OVERFLO(->B_CTRS_PT7_MT_35);
               ZB_GSL_DATA :=  B_CTRS_PT7_MT_35;
            OD; /* DO WITH ZQ_FILL_PTR */
            ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                               SIZE(ZM_RES_TYPE_35_GSL));
            IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                   ZQ_IND_REC,
                                   ZQ_RES_RRN,
                                   E_HIST_35_7)
               THEN
               ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                           -> ZM_RES_TYPE_35_ARR(ZQ_IND_REC).ZB_DATA;
               ZQ_RECORD_FULL := TRUE;
            ELSE
               ZQ_RECORD_FULL := FALSE;
            FI;
         FI;
      OD; /* DO WITH Z_HIST */
   OD; /* DO FOR ZQ_REC */
OD; /* DO FOR ZQ_BUF */

Q_S0830_CHECK_LAST_WRITE(ZQ_IND_OBJ,
                         ZQ_IND_REC,
                         ZQ_RES_RRN);

IF ZQ_RECORD_FULL
/* BEGIN: ADD-WIPRO-FR36229339-CHANGE */   
 OR (ZQ_IND_OBJ = 1 AND ZQ_IND_REC = 1)
/* END: ADD-WIPRO-FR36229339-CHANGE */   
 THEN
    Z_RES_RRN := ZQ_RES_RRN + ZQ_IND_REC - 1;
 ELSE
    Z_RES_RRN := ZQ_RES_RRN + ZQ_IND_REC;
 FI;
END Q_S0754_35_MAKE_RES_FILE_35_7;
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0788_CHECK_TYPE_35_7_OVERFLO                     */
/*                                                                    */
/*     PROGRAMMER: SHAILESH                                           */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 06/06/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*     CALLED FROM:                                                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0788_CHECK_TYPE_35_7_OVERFLO : PROC (ZF_HIS_CC REF
                                         CM_FY32_HIS_TYPE_35_CTRS_7);

 DCL ZQ_I M_TYPE_35_CTRS_7;


Z_TRACE := H'0788;

DO WITH ZF_HIS_CC -> ;

    DO FOR ZQ_I :=  E_MT_35_CTR_IP24A TO  E_MT_35_CTR_IP24C;
    /*BEGIN: DCTPD00633131.01*/
    /*CASE ZQ_I OF
      (E_MT_35_CTR_IP24A:E_MT_35_CTR_IP24C):*/
    /*END: DCTPD00633131.01*/
        B_IP24A_TO_IP24C(ZQ_I) := Q_S0840_CHECK_DPVAL
                                    (B_IP24A_TO_IP24C(ZQ_I));    
     /*BEGIN: DCTPD00633131.01*/
      /*ESAC;*/
     /*END: DCTPD00633131.01*/
   OD;
OD;
END Q_S0788_CHECK_TYPE_35_7_OVERFLO;
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0755_35_MAKE_RES_FILE_35_8                       */
/*                                                                    */
/*     PROGRAMMER: SHAILESH                                           */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 06/06/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*     CALLED FROM:                                                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0755_35_MAKE_RES_FILE_35_8  : PROC ( );
DCL ZQ_START_REC_NO     INT;
DCL ZQ_IND_OBJ          INT;
DCL ZQ_RES_RRN          INT;
DCL ZQ_IND_REC          INT;
DCL ZQ_REC              M_BYTE;
DCL ZQ_FILL_PTR         PTR;
DCL ZQ_HIS_REC_IN_BUFF  INT;
DCL ZQ_BUF              INT;
DCL ZQ_I                CM_TYPE_35_CTRS_8;
DCL ZQ_RECORD_FULL      BOOL;


Z_TRACE := H'0755;

ZQ_IND_REC         := 1;
ZQ_IND_OBJ         := 1;
ZQ_RES_RRN         := Z_RES_RRN;
ZQ_HIS_REC_IN_BUFF := 40;

DO WITH Z_HISTORY_FILE;
  ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_35_8) * ZQ_HIS_REC_IN_BUFF;
  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                       ZB_TABLE_SIZE);
OD; /* WITH Z_HISTORY_TABLE */

DO WITH Z_RESULT_FILE;
  ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
  Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
               -> ZM_RES_TYPE_35_ARR(ZQ_IND_REC).ZB_DATA;

DO FOR ZQ_BUF := 0 TO (CM_FY32_MAX_ABIS_NBR_PER_BSC /
                        ZQ_HIS_REC_IN_BUFF )

   WHILE Z_CPL_CODES = E_NULL_CODE;

   ZQ_START_REC_NO:= ZQ_HIS_REC_IN_BUFF * ZQ_BUF;

   IF ZQ_START_REC_NO + ( ZQ_HIS_REC_IN_BUFF - 1 ) >
                          CM_FY32_MAX_ABIS_NBR_PER_BSC THEN

      /* LAST HISTORY BUFFER TO BE READ FOR THIS MEAS TYPE */
      ZQ_HIS_REC_IN_BUFF := CM_FY32_MAX_ABIS_NBR_PER_BSC REM
                           ZQ_HIS_REC_IN_BUFF;
      Z_HISTORY_FILE.ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_35_8)
                                       * ZQ_HIS_REC_IN_BUFF;
   FI;

   Q_S0160_READ_HIST_FILE (->Z_HISTORY_FILE,
                           ZQ_HIS_REC_IN_BUFF,
                           ZQ_START_REC_NO,
                           SIZE(CM_FY32_HIS_TYPE_35_8));

   DO FOR ZQ_REC := 1 TO ZQ_HIS_REC_IN_BUFF WHILE
                                 Z_CPL_CODES = E_NULL_CODE;
      DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR
                        -> CM_FY32_HIS_TYPE_35_8_BUF(ZQ_REC);
         IF B_ABIS_NBR /= H'FFFF
         THEN
            DO WITH ZQ_FILL_PTR -> ZM_RES_TYPE_35_ABIS;
               ZB_TAG       := ZS_TYPE_35_ABIS_TAG;
               ZB_LEN       := ZS_TYPE_35_ABIS_LEN;
               ZB_ABIS_NBR    := B_ABIS_NBR;
               Q_S0789_CHECK_TYPE_35_8_OVERFLO(->B_CTRS_PT8_MT_35);
               ZB_ABIS_DATA :=  B_CTRS_PT8_MT_35;
            OD; /* DO WITH ZQ_FILL_PTR */
            ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                               SIZE(ZM_RES_TYPE_35_ABIS));
            IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                   ZQ_IND_REC,
                                   ZQ_RES_RRN,
                                   E_HIST_35_8)
               THEN
               ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                           -> ZM_RES_TYPE_35_ARR(ZQ_IND_REC).ZB_DATA;
               ZQ_RECORD_FULL := TRUE;
            ELSE
               ZQ_RECORD_FULL := FALSE;
            FI;
         FI;
      OD; /* DO WITH Z_HIST */
   OD; /* DO FOR ZQ_REC */
OD; /* DO FOR ZQ_BUF */

Q_S0830_CHECK_LAST_WRITE(ZQ_IND_OBJ,
                         ZQ_IND_REC,
                         ZQ_RES_RRN);
END Q_S0755_35_MAKE_RES_FILE_35_8;
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0789_CHECK_TYPE_35_8_OVERFLO                     */
/*                                                                    */
/*     PROGRAMMER: SHAILESH                                           */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 06/06/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*     CALLED FROM:                                                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0789_CHECK_TYPE_35_8_OVERFLO : PROC (ZF_HIS_CC REF
                                         CM_FY32_HIS_TYPE_35_CTRS_8);


/*DCL ZQ_I M_TYPE_35_CTRS_8;*/
/*CR2517*/
DCL ZQ_I    RANGE(E_MT_35_CTR_IP32A:E_MT_35_CTR_IP65);
/*CR2517*/

Z_TRACE := H'0789;

DO WITH ZF_HIS_CC -> ;
    /*CR2517*/
    DO FOR ZQ_I := E_MT_35_CTR_IP32A TO E_MT_35_CTR_IP65;
    /*CR2517*/
    CASE ZQ_I OF
   
      (E_MT_35_CTR_IP32A:E_MT_35_CTR_IP32B):
       B_IP32A_TO_IP32B (ZQ_I) := Q_S0850_CHECK_3_INT_CNTR
                                    (B_IP32A_TO_IP32B(ZQ_I));
      
      (E_MT_35_CTR_IP32C:E_MT_35_CTR_IP32F):
       B_IP32C_TO_IP32F(ZQ_I) := Q_S0840_CHECK_DPVAL
                                    (B_IP32C_TO_IP32F(ZQ_I)); 
      /*CR2517*/                              
      (E_MT_35_CTR_IP64:E_MT_35_CTR_IP65): 
       B_IP64_TO_IP65(ZQ_I).B_HIGH := 0;
       B_IP64_TO_IP65(ZQ_I).B_LOW := 0;                                
      /*CR2517*/
                                                                    
      ESAC;
   OD;
OD;
END Q_S0789_CHECK_TYPE_35_8_OVERFLO;
/* END: ADD-WIPRO-B11-MR0-PKG1-CHANGE */   

/*START: IURG*/
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0901_36_MAKE_RES_FILE_36                         */
/*                                                                    */
/*     PROGRAMMER: AMRITPAL (WIPRO)                                   */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 10/07/01                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*               CREATE TYPE 36 RESULT FILE                           */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0110_GET_USER_BUF                          */
/*                      Q_S0120_GET_WRITE_BUF                         */
/*                      Q_S0160_READ_HIST_FILE                        */
/*                      Q_S0270_BEQ_SEQ_FROM_CELL_IDX                 */
/*                      Q_S0860_INCREM_PTR                            */
/*                      Q_S0820_RECORD_FULL                           */
/*                      Q_S0830_CHECK_LAST_WRITE                      */
/*     CALLED FROM:                                                   */
/*                      Q_S0510_MAKE_RESULT_FILE                      */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0901_36_MAKE_RES_FILE_36 : PROC ( );

DCL  ZQ_BUF             M_BYTE; /* INDEX IN BUFFER */
DCL  ZQ_FILL_PTR        PTR;
DCL  ZQ_HIS_BUFFER_RECS INT;
DCL  ZQ_I               M_TYPE_36_CTRS_0;
DCL  ZQ_IND_OBJ         INT;
DCL  ZQ_IND_REC         INT;
DCL  ZQ_REC             M_BYTE; /* REC IN BUFFER */
DCL  ZQ_RES_RRN         INT;
DCL  ZQ_START_REC_NO    INT;
#ifdef GNU
NEWMODE M_INT_INTEL = STRUCT(
         CASE OF
         :B_INT   INT,
         :B_MSB   M_BYTE,
          B_LSB   M_BYTE
         ESAC );
#else
NEWMODE M_INT_INTEL = STRUCT(
         CASE OF
         :B_INT   INT,
         :B_LSB   M_BYTE,
          B_MSB   M_BYTE
         ESAC );
#endif
DCL ZQ_RNC_IDX         M_INT_INTEL;

Z_TRACE := H'0530;

/* NOTE THAT THE GENERIC HEADER IS ALWAYS IN THE FIRST RECORD */
/* HENCE THE FIRST ITEM STARTS AT THE SECOND RECORD.          */
ZQ_IND_REC         := 2;
ZQ_HIS_BUFFER_RECS := 7;
ZQ_IND_OBJ         := 1;
ZQ_RES_RRN         := -1;

DO WITH Z_HISTORY_FILE;
  ZB_TABLE_SIZE := ZQ_HIS_BUFFER_RECS * SIZE(CM_FY32_HIS_TYPE_36_0);
  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                       ZB_TABLE_SIZE);
OD; /* WITH Z_HISTORY_TABLE */

DO WITH Z_RESULT_FILE;
  ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
  Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
               -> ZM_RES_TYPE_36_ARR(ZQ_IND_REC).ZB_DATA;

DO FOR ZQ_BUF := 0 TO (M_MAX_RNC/ZQ_HIS_BUFFER_RECS)
   WHILE Z_CPL_CODES = E_NULL_CODE;

   ZQ_START_REC_NO := ZQ_BUF * ZQ_HIS_BUFFER_RECS;

   IF ZQ_START_REC_NO + ( ZQ_HIS_BUFFER_RECS - 1 ) >
                          M_MAX_RNC THEN
      /* LAST HISTORY BUFFER TO BE READ FOR THIS MEAS TYPE */
      ZQ_HIS_BUFFER_RECS := M_MAX_RNC REM
                           ZQ_HIS_BUFFER_RECS;
      Z_HISTORY_FILE.ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_36_0)
                                       * ZQ_HIS_BUFFER_RECS;
   FI;
   
   Q_S0160_READ_HIST_FILE (->Z_HISTORY_FILE,
                           ZQ_HIS_BUFFER_RECS,
                           ZQ_START_REC_NO,
                           SIZE(CM_FY32_HIS_TYPE_36_0));

   DO FOR ZQ_REC := 1 TO ZQ_HIS_BUFFER_RECS WHILE
                               Z_CPL_CODES = E_NULL_CODE;
      DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR ->
                                 CM_FY32_HIS_TYPE_36_BUF(ZQ_REC);
          IF (B_RNC_IDX /= H'FFFF) AND (B_RNC_IDX > 0)
         THEN
            ZQ_RNC_IDX.B_INT := B_RNC_IDX;
            DO WITH ZQ_FILL_PTR -> ZM_TYPE_36_DATA;
               ZB_TAG       := ZS_TYPE_36_RNC_TAG;
               ZB_LEN       := ZS_TYPE_36_RNC_LEN;
               ZB_RNC_ID    := ZQ_RNC_IDX.B_LSB;
               Q_S0785_CHECK_TYPE_36_OVERFLO(-> B_CTRS_PT0_MT_36);
               ZB_T36_CTRS := B_CTRS_PT0_MT_36;
            OD; /* DO WITH ZQ_FILL_PTR */
            ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                               SIZE(ZM_TYPE_36_DATA));


            /* CHECK IF THE RECORD IS FULL OR IT IS THE LAST.     */
            /* THIS ROUTINE ALSO MODIFIES THE INDEX PARAMETERS    */
            /* PASSED, WRITES TO THE FILE AND FILLS IN THE HEADER */
            /* - THERE IS NO TIME TO CLEAN THIS UP WITH RISK.     */

            IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                   ZQ_IND_REC,
                                   ZQ_RES_RRN,
                                   E_HIST_NORM)
               THEN
               ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                              -> ZM_RES_TYPE_36_ARR
                                 (ZQ_IND_REC).ZB_DATA;
            FI; /* RECORD FULL */
         FI;
      OD;  /* HIST FILE */
   OD; /* ZQ_REC */
OD; /* ZQ_I */

Q_S0830_CHECK_LAST_WRITE(ZQ_IND_OBJ,
                         ZQ_IND_REC,
                         ZQ_RES_RRN);

END Q_S0901_36_MAKE_RES_FILE_36;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0785_CHECK_TYPE_36_OVERFLO                       */
/*                                                                    */
/*     PROGRAMMER: AMRITPAL (WIPRO)                                   */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 10/07/01                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*             CHECK IF COUNTER VALUES ARE OVERFLOW                   */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0840_CHECK_DPVAL                           */
/*     CALLED FROM:                                                   */
/*                      Q_S0901_36_MAKE_RES_FILE_36                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0785_CHECK_TYPE_36_OVERFLO : PROC (ZF_HIS_CC REF
                                         CM_FY32_HIS_TYPE_36_CTRS_0);

/*DCL ZQ_I    RANGE(E_MT_36_CTR_C1301:E_MT_36_CTR_C1306);*/ 
DCL ZQ_I    M_TYPE_36_CTRS_0; 
Z_TRACE := H'0780;

DO WITH ZF_HIS_CC -> ;
   DO FOR ZQ_I := E_MT_36_CTR_C1301 TO E_MT_36_CTR_C1306;
     /*BEGIN: DCTPD00633131.01*/
     /*CASE ZQ_I OF
      (E_MT_36_CTR_C1301:E_MT_36_CTR_C1306):*/
     /*END: DCTPD00633131.01*/
        B_MC1301_TO_MC1306(ZQ_I) := Q_S0840_CHECK_DPVAL
                                 (B_MC1301_TO_MC1306(ZQ_I));
      /*BEGIN: DCTPD00633131.01*/
      /*ESAC;*/
      /*END: DCTPD00633131.01*/
   OD;
OD;
END Q_S0785_CHECK_TYPE_36_OVERFLO;
/*END: IURG*/

/*BEGIN:VAMOS*/
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0901_37_MAKE_RES_FILE_37                         */
/*                                                                    */
/*     PROGRAMMER: PURNA (WIPRO)                                   */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 06/01/2011                                      */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*               CREATE TYPE 37 RESULT FILE                           */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0110_GET_USER_BUF                          */
/*                      Q_S0120_GET_WRITE_BUF                         */
/*                      Q_S0160_READ_HIST_FILE                        */
/*                      Q_S0270_BEQ_SEQ_FROM_CELL_IDX                 */
/*                      Q_S0860_INCREM_PTR                            */
/*                      Q_S0820_RECORD_FULL                           */
/*                      Q_S0830_CHECK_LAST_WRITE                      */
/*     CALLED FROM:                                                   */
/*                      Q_S0510_MAKE_RESULT_FILE                      */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0901_37_MAKE_RES_FILE_37 : PROC ( );

DCL ZQ_START_REC_NO     INT;
DCL ZQ_IND_OBJ          INT;
DCL ZQ_RES_RRN          INT;
DCL ZQ_IND_REC          INT;
DCL ZQ_HIS_BUFFER_RECS  INT;
DCL ZQ_BUF              M_BYTE;
DCL ZQ_REC              M_BYTE;
DCL ZQ_FILL_PTR         PTR;
DCL ZQ_CELL_ID          ZM_PM_BEQ_AND_SECTOR;
DCL ZQ_I                INT;
DCL ZQ_CELL_IDX         M_CELL_IDX;
DCL ZQ_CHECK_VAMOS		BOOL;

Z_TRACE := H'0760;

/* NOTE THAT THE GENERIC HEADER IS ALWAYS IN THE FIRST RECORD */
/* HENCE THE FIRST ITEM STARTS AT THE SECOND RECORD.          */
ZQ_IND_REC         := 2;
ZQ_IND_OBJ         := 1;
ZQ_RES_RRN         := -1;
ZQ_HIS_BUFFER_RECS := 8;
ZQ_CHECK_VAMOS 	   := FALSE;

DO FOR ZQ_I := 1 TO ZS_MAX_CELLS;
   Z_ACTIVE_CELLS(ZQ_I) := FALSE;
OD;

DO WITH Z_HISTORY_FILE;
  ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_37_0) *
			 ZQ_HIS_BUFFER_RECS;
  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                       ZB_TABLE_SIZE);
OD; /* WITH Z_HISTORY_TABLE */

 DO WITH Z_SECOND_HIST_FILE;
  ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_37_1)/*
			 ZQ_HIS_BUFFER_RECS*/;
  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                       ZB_TABLE_SIZE);
OD; /* WITH Z_HISTORY_TABLE */


DO WITH Z_RESULT_FILE;
  ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
  Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

DO FOR ZQ_BUF := 0 TO (CM_FY32_MAX_CELLS_PER_BSC /
                      ZQ_HIS_BUFFER_RECS)
   WHILE Z_CPL_CODES = E_NULL_CODE;
   
   ZQ_START_REC_NO := ZQ_HIS_BUFFER_RECS * ZQ_BUF;

   IF ZQ_START_REC_NO + ( ZQ_HIS_BUFFER_RECS - 1 ) >
                          CM_FY32_MAX_CELLS_PER_BSC THEN

      /* LAST HISTORY BUFFER TO BE READ FOR THIS MEAS TYPE */
      ZQ_HIS_BUFFER_RECS := CM_FY32_MAX_CELLS_PER_BSC REM
                           ZQ_HIS_BUFFER_RECS;
      Z_HISTORY_FILE.ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_37_0)
                                       * ZQ_HIS_BUFFER_RECS;
   FI;

   Q_S0160_READ_HIST_FILE (->Z_HISTORY_FILE,
                             ZQ_HIS_BUFFER_RECS,
                             ZQ_START_REC_NO,
                             SIZE(CM_FY32_HIS_TYPE_37_0));

   DO FOR ZQ_REC := 1 TO ZQ_HIS_BUFFER_RECS WHILE
                                       Z_CPL_CODES = E_NULL_CODE;

      DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR
                  -> CM_FY32_HIS_TYPE_37_0_BUF(LONG_INT(ZQ_REC));

         ZQ_CELL_IDX := B_CELL_ID;
         IF Q_S0270_BEQ_SEQ_FROM_CELL_IDX(B_CELL_ID,ZQ_CELL_ID)
            THEN
            Z_ACTIVE_CELLS(ZQ_CELL_IDX) := TRUE;
	    ZQ_CHECK_VAMOS:=Q_S0770_CHECK_TYPE_37_0_VAMOS
				(->B_CTRS_PT0_MT_37);
	    IF (ZQ_CHECK_VAMOS = TRUE)
	      THEN
                 ZQ_FILL_PTR:=-> Z_RESULT_FILE.ZB_TABLE_PTR
                         -> ZM_RES_TYPE_37_ARR(ZQ_IND_REC).ZB_DATA;

                 DO WITH ZQ_FILL_PTR -> ZM_TYPE_37_0_DATA;
                  ZB_TAG       := ZS_TYPE_37_0_CELL_TAG;
                  ZB_LEN       := ZS_TYPE_37_0_CELL_LEN;
                  ZB_BEQS_ID    := ZQ_CELL_ID;
           	  Q_S0770_CHECK_TYPE_37_0_OVERFLO(->B_CTRS_PT0_MT_37);
          	  ZB_37_0_CTRS := B_CTRS_PT0_MT_37;
	         OD; /* DO WITH ZQ_FILL_PTR */
            /*START: FR36/308400*/
	    /*FI;		*/
            /*END: FR36/308400*/
            IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                   ZQ_IND_REC,
                                   ZQ_RES_RRN,
                                   E_HIST_NORM)
              THEN
                 ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                            -> ZM_RES_TYPE_37_ARR(ZQ_IND_REC).
                            ZB_DATA;
            FI;
            /*START: FR36/308400*/
	    FI;
            /*END: FR36/308400*/
         ELSE
         ZQ_CELL_IDX := -1;
        FI;
      OD;
      /*START: FR 314871*/	
     /* TRACEINFO :=
                         'BLOCK 371 DETAILS (%d %d %d)    ';

               TRC_BSC_PM3(
                    FILENAME,
                    LONG_INT(__LINENO__),
                    LONG_INT(SUB_CLASS_PM_CCRH),
                    TRACEID(NORM),
                    TRACEINFO,
                    LONG_INT((ZQ_CELL_IDX)),
                    LONG_INT((ZQ_CHECK_VAMOS)),
                    LONG_INT((Z_ACTIVE_CELLS(ZQ_CELL_IDX))));*/

       /*END: FR 314871*/	  
      IF ZQ_CELL_IDX /= M_NULL_CELL_IDX AND ZQ_CHECK_VAMOS
        THEN
        IF Z_ACTIVE_CELLS(ZQ_CELL_IDX)
          THEN
          /*fr36_308618 */
	  /*START: FR 314871*/
          /*IF (ZQ_REC+(ZQ_BUF * 8)-1) < SIZE(CM_FY32_HIS_TYPE_37_1) 
          THEN*/
	  /*END: FR 314871*/
           Q_S0160_READ_HIST_FILE (->Z_SECOND_HIST_FILE,
                                  1,
                             /*fr36_308618 */ 
                                 ZQ_REC+(ZQ_BUF *ZQ_HIS_BUFFER_RECS)-1,
                                /*ZQ_REC+(ZQ_BUF * 8)-1,*/
                                  SIZE(CM_FY32_HIS_TYPE_37_1));
          
           DO WITH Z_SECOND_HIST_FILE.ZB_TABLE_PTR
                           ->CM_FY32_HIS_TYPE_37_1/*_BUF*/
			/*	(LONG_INT(ZQ_REC))*/;
			
	     DO WITH ZQ_FILL_PTR -> ZM_TYPE_37_1_DATA;
               ZB_TAG       := ZS_TYPE_37_1_CELL_TAG;
               ZB_LEN       := ZS_TYPE_37_1_CELL_LEN;
               ZB_BEQS_ID    := ZQ_CELL_ID;
               Q_S0770_CHECK_TYPE_37_1_OVERFLO(->B_CTRS_PT1_MT_37);
		/*IF (ZQ_CHECK_VAMOS = FALSE)
		  THEN 	
		       Q_S0770_INVALID_TYPE_37_1_VAMOS
					(->B_CTRS_PT1_MT_37);
                FI;*/
		ZB_37_1_CTRS :=B_CTRS_PT1_MT_37 ;
            OD; /* DO WITH ZQ_FILL_PTR */
           OD;  
             
            IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                 ZQ_IND_REC,
                                 ZQ_RES_RRN,
                                 E_HIST_NORM)
             THEN
             ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                            -> ZM_RES_TYPE_37_ARR(ZQ_IND_REC).ZB_DATA;
             FI;
	  /*START: FR 314871*/
         /* FI; *//*END: FR 314871*/ /*fr36_308618 */ 
          FI;
      FI;
   
   OD; /* DO FOR ZQ_REC */
OD; /* DO FOR ZQ_BUF */

Q_S0830_CHECK_LAST_WRITE(ZQ_IND_OBJ,
                         ZQ_IND_REC,
                         ZQ_RES_RRN);
Z_RES_RRN     := ZQ_RES_RRN + ZQ_IND_REC - 1;

END Q_S0901_37_MAKE_RES_FILE_37;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0770_CHECK_TYPE_37_0_OVERFLO                     */
/*                                                                    */
/*     PROGRAMMER: PURNA CHANDRA                                      */
/*                                                                    */
/*                LAST MODIFIED BY: PURNA       DATE:05/01/2011       */
/*                                                                    */
/*     CREATION DATE: 05/01/2011                                      */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       CHECK FOR COUNTERS IN OVERFLOW CONDITION IN TYPE 37          */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_HIS_CC REF CM_FY32_HIS_TYPE_37_CTRS_0      */
/*                                                                    */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0840_CHECK_DPVAL                           */
/*     CALLED FROM:                                                   */
/*                      Q_S0901_37_MAKE_RES_FILE_37                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0770_CHECK_TYPE_37_0_OVERFLO : PROC (ZF_HIS_CC REF 
					CM_FY32_HIS_TYPE_37_CTRS_0);
                                         
/*START: CR20_310381*/
/*DCL ZQ_I    RANGE(E_MT_37_CTR_MC1401A:E_MT_37_CTR_MC1424D); */
DCL ZQ_I    RANGE(E_MT_37_CTR_MC1401A:E_MT_37_CTR_MC1427); 
/*END: CR20_310381*/

Z_TRACE := H'0780;

DO WITH ZF_HIS_CC -> ;
/*BEGIN : CR20_310381*/
/*   DO FOR ZQ_I := E_MT_37_CTR_MC1401A TO E_MT_37_CTR_MC1424D;*/
   DO FOR ZQ_I := E_MT_37_CTR_MC1401A TO E_MT_37_CTR_MC1427;
/*END: CR20_310381*/
      CASE ZQ_I OF
    
      (E_MT_37_CTR_MC1401A:E_MT_37_CTR_MC1409D):
         B_MC1401A_TO_MC1409D(ZQ_I) := Q_S0840_CHECK_DPVAL
	        		        (B_MC1401A_TO_MC1409D(ZQ_I));
							
      (E_MT_37_CTR_MC1420A:E_MT_37_CTR_MC1421D):
	      B_MC1420A_TO_MC1421D(ZQ_I):= Q_S0840_CHECK_DPVAL
	                         	   (B_MC1420A_TO_MC1421D(ZQ_I));
       /* Start FR/00619406 */ 
      (E_MT_37_CTR_MC1422A:E_MT_37_CTR_MC1423D): 
        IF B_MC1422A_TO_MC1423D(ZQ_I) = H'FE  
         THEN 
          B_MC1422A_TO_MC1423D(ZQ_I):= ZS_VOID ; 
        FI;
       /* End FR/00619406 */ 
       /*PROVISIONAL COUNTERS*/
        /*START CR DCTPD1099054 */
        /*BEGIN: CRI #01165185.02 move MC1424D*/						
       (E_MT_37_CTR_MC1424A):
       	/*END: CRI #01165185.02*/
	/*BEGIN : CR20_310381*/
	/*	B_MC1424A_TO_MC1424D(ZQ_I).B_HIGH:=0;
		B_MC1424A_TO_MC1424D(ZQ_I).B_LOW:=0;*/
		      B_MC1424A_TO_MC1427(ZQ_I).B_HIGH:=0;
		      B_MC1424A_TO_MC1427(ZQ_I).B_LOW:=0;		      	
		/*BEGIN: CRI #01165185.02 add MC1424D*/	
		(E_MT_37_CTR_MC1427,E_MT_37_CTR_MC1424B,
		E_MT_37_CTR_MC1424C,E_MT_37_CTR_MC1424D):
		/*END: CRI #01165185.02*/
	      B_MC1424A_TO_MC1427(ZQ_I):= Q_S0840_CHECK_DPVAL
				    (B_MC1424A_TO_MC1427(ZQ_I));
	/*END : CR20_310381*/
      ELSE
         
      ESAC;
   OD;
   
OD;
END Q_S0770_CHECK_TYPE_37_0_OVERFLO;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0770_CHECK_TYPE_37_0_VAMOS                       */
/*                                                                    */
/*     PROGRAMMER: PURNA CHANDRA                                      */
/*                                                                    */
/*                LAST MODIFIED BY: PURNA       DATE:05/01/2011       */
/*                                                                    */
/*     CREATION DATE: 05/01/2011                                      */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       CHECK FOR MC1410 COUNTERS IF THEY HAVE VALUE GREATER         */
/*       THAN ZERO						      */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_HIS_CC REF CM_FY32_HIS_TYPE_37_CTRS_0      */
/*                                                                    */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0840_CHECK_DPVAL                           */
/*     CALLED FROM:                                                   */
/*                      Q_S0901_37_MAKE_RES_FILE_37                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
/*NEW PROCEDURE ADDED FOR A NEW BLOCK (BLOCK 370) IN TYPE 37 */
Q_S0770_CHECK_TYPE_37_0_VAMOS : PROC (ZF_HIS_CC REF 
				CM_FY32_HIS_TYPE_37_CTRS_0)
        			 RETURNS (BOOL);
               										 
DCL ZQ_J     RANGE(E_MT_37_CTR_MC1410A:E_MT_37_CTR_MC1410E);

Z_TRACE := H'0780;

DO WITH ZF_HIS_CC -> ;

   DO FOR ZQ_J:=E_MT_37_CTR_MC1410A TO E_MT_37_CTR_MC1410E;
        /*BEGIN: DCTPD00633131.01*/
    	/*CASE ZQ_J OF                                                                
           (E_MT_37_CTR_MC1410A:E_MT_37_CTR_MC1410E): */
        /*END: DCTPD00633131.01*/
	    IF B_MC1410A_TO_MC1410E(ZQ_J) > 0 AND
              (B_MC1410A_TO_MC1410E(ZQ_J) /= H'FE OR
                B_MC1410A_TO_MC1410E(ZQ_J) /= H'FF) 
		THEN
	          RETURN (TRUE);
	    FI;
      /*BEGIN: DCTPD00633131.01*/
      /*ESAC;*/
      /*END: DCTPD00633131.01*/
   OD;
   RETURN (FALSE);
OD;

END Q_S0770_CHECK_TYPE_37_0_VAMOS;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0770_INVALID_TYPE_37_0_VAMOS                     */
/*                                                                    */
/*     PROGRAMMER: PURNA                                              */
/*                                                                    */
/*                LAST MODIFIED BY:        DATE:	              */
/*                                                                    */
/*     CREATION DATE: 11/01/2011                                      */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       							      */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_HIS_CC REF CM_FY32_HIS_TYPE_37_CTRS_0      */
/*                                                                    */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0840_CHECK_DPVAL                           */
/*     CALLED FROM:                                                   */
/*                      Q_S0901_37_MAKE_RES_FILE_37                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
/*NEW PROCEDURE ADDED FOR A NEW BLOCK (BLOCK 370) IN TYPE 37 */
/*Q_S0770_INVALID_TYPE_37_0_VAMOS : PROC (ZF_HIS_CC REF 
				  CM_FY32_HIS_TYPE_37_CTRS_0);
                                         

  DCL ZQ_J     RANGE(E_MT_37_CTR_MC1401A : E_MT_37_CTR_MC1424D);*/
   /* DCL ZQ_J      M_TYPE_37_CTRS_0;*/

/*DO WITH ZF_HIS_CC -> ;

	DO FOR ZQ_J := E_MT_37_CTR_MC1401A TO E_MT_37_CTR_MC1424D;
      CASE ZQ_J OF
      (E_MT_37_CTR_MC1401A:E_MT_37_CTR_MC1424D):
         B_MC1401A_TO_MC1424D(ZQ_I).B_HIGH := H'FFFE;
		 B_MC1401A_TO_MC1424D(ZQ_I).B_LOW := H'FFFE;
	  ESAC;
	OD;
	
OD;
END Q_S0770_INVALID_TYPE_37_0_VAMOS;*/
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0770_CHECK_TYPE_37_1_OVERFLO                     */
/*                                                                    */
/*     PROGRAMMER: PURNA CHANDRA                                      */
/*                                                                    */
/*                LAST MODIFIED BY: PURNA         DATE:05/01/2011     */
/*                                                                    */
/*     CREATION DATE: 05/01/2011                                      */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       CHECK FOR COUNTERS IN OVERFLOW CONDITION IN TYPE 37          */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_HIS_CC REF CM_FY32_HIS_TYPE_37_CTRS_1      */
/*                                                                    */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0840_CHECK_DPVAL                           */
/*     CALLED FROM:                                                   */
/*                      Q_S0901_37_MAKE_RES_FILE_37                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0770_CHECK_TYPE_37_1_OVERFLO : PROC (ZF_HIS_CC REF
                                         CM_FY32_HIS_TYPE_37_CTRS_1);

/*BEGIN : CR20_310381*/
/*DCL ZQ_I    RANGE(E_MT_37_CTR_MC1411A:E_MT_37_CTR_MC1419D); */
DCL ZQ_I    RANGE(E_MT_37_CTR_MC1411A:E_MT_37_CTR_MC1426D); 
/*END : CR20_310381*/
Z_TRACE := H'0780;

DO WITH ZF_HIS_CC -> ;
/*BEGIN : CR20_310381*/
   /*DO FOR ZQ_I := E_MT_37_CTR_MC1411A TO E_MT_37_CTR_MC1419D;*/
   DO FOR ZQ_I := E_MT_37_CTR_MC1411A TO E_MT_37_CTR_MC1426D;
/*END : CR20_310381*/
      CASE ZQ_I OF
        /*PROVISIONAL COUNTERS*/
        (E_MT_37_CTR_MC1411E):
         B_MC1411A_TO_MC1419D(ZQ_I).B_HIGH:=0;
         B_MC1411A_TO_MC1419D(ZQ_I).B_LOW:=0;
      
        /*START: CR36/307898*/
	/*(E_MT_37_CTR_MC1419A:E_MT_37_CTR_MC1419D):
         B_MC1411A_TO_MC1419D(ZQ_I).B_HIGH:=0;
         B_MC1411A_TO_MC1419D(ZQ_I).B_LOW:=0;*/
        /*END: CR36/307898*/
       
  	(E_MT_37_CTR_MC1411A:E_MT_37_CTR_MC1411D):
	 B_MC1411A_TO_MC1419D(ZQ_I):=Q_S0840_CHECK_DPVAL
                                    (B_MC1411A_TO_MC1419D(ZQ_I));
        /*START: CR36/307898*/
  	/*(E_MT_37_CTR_MC1412A:E_MT_37_CTR_MC1418D):*/
  	(E_MT_37_CTR_MC1412A:E_MT_37_CTR_MC1419D):
        /*END: CR36/307898*/
         B_MC1411A_TO_MC1419D(ZQ_I):=Q_S0840_CHECK_DPVAL
                                    (B_MC1411A_TO_MC1419D(ZQ_I));
         /*BEGIN : CR20_310381*/
	 (E_MT_37_CTR_MC1425A:E_MT_37_CTR_MC1426D):
	 B_MC1425A_TO_MC1426D(ZQ_I):=Q_S0840_CHECK_DPVAL
				    (B_MC1425A_TO_MC1426D(ZQ_I));
	 /*END : CR20_310381*/
      ELSE 

      ESAC;
   OD;
OD;
END Q_S0770_CHECK_TYPE_37_1_OVERFLO;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0770_INVALID_TYPE_37_0_VAMOS                     */
/*                                                                    */
/*     PROGRAMMER: PURNA                                              */
/*                                                                    */
/*                LAST MODIFIED BY:        DATE:           	  */
/*                                                                    */
/*     CREATION DATE: 11/01/2011                                      */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       							      */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_HIS_CC REF CM_FY32_HIS_TYPE_37_CTRS_0      */
/*                                                                    */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0840_CHECK_DPVAL                           */
/*     CALLED FROM:                                                   */
/*                      Q_S0901_37_MAKE_RES_FILE_37                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
/*NEW PROCEDURE ADDED FOR A NEW BLOCK (BLOCK 370) IN TYPE 37 */
/*Q_S0770_INVALID_TYPE_37_1_VAMOS : PROC (ZF_HIS_CC REF
                                         CM_FY32_HIS_TYPE_37_CTRS_1);
*/
     /* DCL ZQ_J     RANGE(E_MT_37_CTR_MC1411A:E_MT_37_CTR_MC1419D);*/
/*  DCL ZQ_J      M_TYPE_37_CTRS_1;

DO WITH ZF_HIS_CC -> ;

	DO FOR ZQ_J := E_MT_37_CTR_MC1411A TO E_MT_37_CTR_MC1419D;
      CASE ZQ_J OF
      (E_MT_37_CTR_MC1411A:E_MT_37_CTR_MC1419D):
         B_MC1411A_TO_MC1419D(ZQ_I).B_HIGH :=H'FFFE;
		 B_MC1411A_TO_MC1419D(ZQ_I).B_LOW :=H'FFFE;
	  ESAC;
	OD;
	
OD;
END Q_S0770_INVALID_TYPE_37_1_VAMOS;*/
/*END:VAMOS*/
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0760_110_MAKE_RES_FILE_110                       */
/*                                                                    */
/*     PROGRAMMER: A.H.SWANN                                          */
/*                                                                    */
/*                LAST MODIFIED BY: NAIKA              DATE:          */
/*                                                                    */
/*     CREATION DATE: 96/10/27                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       CREATE THE TYPE 110 RESULT FILE (BLOCKS 1, 2 AND 3)          */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0110_GET_USER_BUF                          */
/*                      Q_S0120_GET_WRITE_BUF                         */
/*                      Q_S0160_READ_HIST_FILE                        */
/*                      Q_S0270_BEQ_SEQ_FROM_CELL_IDX                 */
/*                      Q_S0770_CHECK_TYPE_110_1_OVERFLO              */
/*                      Q_S0820_RECORD_FULL                           */
/*                      Q_S0780_CHECK_TYPE_110_2_OVERFLO              */
/*                      Q_S0830_CHECK_LAST_WRITE                      */
/*     CALLED FROM:                                                   */
/*                      Q_S0510_MAKE_RESULT_FILE                      */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0760_110_MAKE_RES_FILE_110 : PROC ( );

DCL ZQ_START_REC_NO     INT;
DCL ZQ_IND_OBJ          INT;
DCL ZQ_RES_RRN          INT;
DCL ZQ_IND_REC          INT;
DCL ZQ_HIS_BUFFER_RECS  INT;
DCL ZQ_BUF              M_BYTE;
DCL ZQ_REC              M_BYTE;
DCL ZQ_FILL_PTR         PTR;
DCL ZQ_CELL_ID          ZM_PM_BEQ_AND_SECTOR;
DCL ZQ_I                INT;
DCL ZQ_CELL_IDX         M_CELL_IDX;
/* BEGIN:3BKA36FBR313758  */
DCL ZQ_HIS_BUF_RECS INT;
/* END:3BKA36FBR313758  */
DCL ZQ_J               RANGE(E_MT_110_CTR_MC923E:E_MT_110_CTR_MC947J);

Z_TRACE := H'0760;

/* NOTE THAT THE GENERIC HEADER IS ALWAYS IN THE FIRST RECORD */
/* HENCE THE FIRST ITEM STARTS AT THE SECOND RECORD.          */
ZQ_IND_REC         := 2;
ZQ_IND_OBJ         := 1;
ZQ_RES_RRN         := -1;
ZQ_HIS_BUFFER_RECS := 8;
/* BEGIN:3BKA36FBR313758  */
ZQ_HIS_BUF_RECS := ZQ_HIS_BUFFER_RECS;
/* END:3BKA36FBR313758  */
DO FOR ZQ_I := 1 TO ZS_MAX_CELLS;
   Z_ACTIVE_CELLS(ZQ_I) := FALSE;
OD;

DO WITH Z_HISTORY_FILE;
  ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_110_1) * ZQ_HIS_BUFFER_RECS;
  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                       ZB_TABLE_SIZE);
OD; /* WITH Z_HISTORY_TABLE */

DO WITH Z_SECOND_HIST_FILE;
  ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_110_2);
  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                       ZB_TABLE_SIZE);
OD; /* WITH Z_HISTORY_TABLE */

DO WITH Z_THIRD_HIST_FILE;
/* BEGIN:3BKA36FBR313758  */ 
/*ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_110_3) * ZQ_HIS_BUFFER_RECS;*/
  ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_110_3);
/* END:3BKA36FBR313758  */
  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                       ZB_TABLE_SIZE);
OD; /* WITH Z_HISTORY_TABLE */
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
DO WITH Z_SEVENTH_HIST_FILE;
/* BEGIN:3BKA36FBR313758  */
/*ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_110_7) * ZQ_HIS_BUFFER_RECS;*/
  ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_110_7);
/* END:3BKA36FBR313758  */
  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                       ZB_TABLE_SIZE);
OD; /* WITH Z_HISTORY_TABLE */
/* END: ADD-WIPRO-B10-MR1-CHANGE */

/* BEGIN: CR20/313054 */
DO WITH Z_THIRTEENTH_HIST_FILE;
/*DCTPD000646615 BEGIN CHANGE.........................................
  ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_110_13) * ZQ_HIS_BUFFER_RECS;
....CHANGE TO.......................................................*/
  ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_110_13);
/*DCTPD000646615 END CHANGE.........................................*/
  
  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                       ZB_TABLE_SIZE);
OD; /* WITH Z_HISTORY_TABLE */
/* END: CR20/313054 */

/*BEGIN : CR20/301337-RFI4448 FILE FORMAT*/
DO WITH Z_ELEVENTH_HIST_FILE;
/* BEGIN:3BKA36FBR313758  */
/*ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_110_11) * ZQ_HIS_BUFFER_RECS;*/
  ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_110_11);
/* END:3BKA36FBR313758  */
  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
			ZB_TABLE_SIZE);
OD;/*WITH Z_HISTORY_TABLE*/
/*END : CR20/301337*/

/*begin CR1238146 A-GPS*/
DO WITH Z_18TH_HIST_FILE;
   ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_110_18);
  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                       ZB_TABLE_SIZE);
OD; 
/*end CR1238146 A-GPS*/

DO WITH Z_RESULT_FILE;
  ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
  Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

/* BEGIN: ADD-WIPRO-B10-ER864-CHANGE */
/*DO FOR ZQ_BUF := 0 TO (CM_FY32_MAX_CELLS_PER_BSC /
                      ZQ_HIS_BUFFER_RECS) -1
   WHILE Z_CPL_CODES = E_NULL_CODE;*/
DO FOR ZQ_BUF := 0 TO (CM_FY32_MAX_CELLS_PER_BSC /
                      ZQ_HIS_BUFFER_RECS)
   WHILE Z_CPL_CODES = E_NULL_CODE;
/* END: ADD-WIPRO-B10-ER864-CHANGE */
   
   ZQ_START_REC_NO := ZQ_HIS_BUFFER_RECS * ZQ_BUF;
/* BEGIN: ADD-WIPRO-B10-ER864-CHANGE */
   IF ZQ_START_REC_NO + ( ZQ_HIS_BUFFER_RECS - 1 ) >
                          CM_FY32_MAX_CELLS_PER_BSC THEN

      /* LAST HISTORY BUFFER TO BE READ FOR THIS MEAS TYPE */
   /* BEGIN:3BKA36FBR313758  */ 
     /*ZQ_HIS_BUFFER_RECS := CM_FY32_MAX_CELLS_PER_BSC REM
                           ZQ_HIS_BUFFER_RECS;
      Z_HISTORY_FILE.ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_110_1)
                                       * ZQ_HIS_BUFFER_RECS; */
									   
      ZQ_HIS_BUF_RECS := CM_FY32_MAX_CELLS_PER_BSC REM
                           ZQ_HIS_BUFFER_RECS;
      Z_HISTORY_FILE.ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_110_1)
                                       * ZQ_HIS_BUF_RECS; 									   
   /* END:3BKA36FBR313758  */
   FI;
/* END: ADD-WIPRO-B10-ER864-CHANGE */

   Q_S0160_READ_HIST_FILE (->Z_HISTORY_FILE,
                            /* BEGIN:3BKA36FBR313758  */
                             /*ZQ_HIS_BUFFER_RECS,*/
				 ZQ_HIS_BUF_RECS, 
			   /* END:3BKA36FBR313758  */ 
                             ZQ_START_REC_NO,
                             SIZE(CM_FY32_HIS_TYPE_110_1));

 /* BEGIN:3BKA36FBR313758  */
   /*DO FOR ZQ_REC := 1 TO ZQ_HIS_BUFFER_RECS WHILE
                                       Z_CPL_CODES = E_NULL_CODE; */
   DO FOR ZQ_REC := 1 TO ZQ_HIS_BUF_RECS WHILE
                                       Z_CPL_CODES = E_NULL_CODE;
   /* END:3BKA36FBR313758  */ 
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
      DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR
                  -> CM_FY32_HIS_TYPE_110_1A_BUF(LONG_INT(ZQ_REC));
/* END: ADD-WIPRO-B10-MR1-CHANGE */
         ZQ_CELL_IDX := B_CELL_ID;
         IF Q_S0270_BEQ_SEQ_FROM_CELL_IDX(B_CELL_ID,ZQ_CELL_ID)
            THEN
            Z_ACTIVE_CELLS(ZQ_CELL_IDX) := TRUE;

            ZQ_FILL_PTR:=-> Z_RESULT_FILE.ZB_TABLE_PTR
                         -> ZM_RES_TYPE_110_ARR(ZQ_IND_REC).ZB_DATA;

            DO WITH ZQ_FILL_PTR -> ZM_TYPE_110_1_DATA;
               ZB_TAG       := ZS_TYPE_110_1_CELL_TAG;
               ZB_LEN       := ZS_TYPE_110_1_CELL_LEN;
               ZB_BEQS_ID    := ZQ_CELL_ID;
               Q_S0770_CHECK_TYPE_110_1_OVERFLO(->B_CTRS_PT1_MT_110);
               ZB_110_1_CTRS := B_CTRS_PT1_MT_110;
            OD; /* DO WITH ZQ_FILL_PTR */

            IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                   ZQ_IND_REC,
                                   ZQ_RES_RRN,
                                   E_HIST_NORM)
               THEN
               ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                              -> ZM_RES_TYPE_110_ARR(ZQ_IND_REC).
                                 ZB_DATA;
            FI;
/*WORKAROUND FOR FR 20/181121*/
         ELSE
         ZQ_CELL_IDX := -1;
/*END OF FIX*/
         FI;
      OD;/*DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR*/

      IF ZQ_CELL_IDX /= M_NULL_CELL_IDX
        THEN
        IF Z_ACTIVE_CELLS(ZQ_CELL_IDX)
          THEN

          Q_S0160_READ_HIST_FILE (->Z_SECOND_HIST_FILE,
                                  1,
                                  ZQ_REC+(ZQ_BUF *ZQ_HIS_BUFFER_RECS)-1,
                                  SIZE(CM_FY32_HIS_TYPE_110_2));

          DO WITH Z_SECOND_HIST_FILE.ZB_TABLE_PTR
                                 -> CM_FY32_HIS_TYPE_110_2;

             DO WITH ZQ_FILL_PTR -> ZM_TYPE_110_2_DATA;
                ZB_TAG       := ZS_TYPE_110_2_CELL_TAG;
                ZB_LEN       := ZS_TYPE_110_2_CELL_LEN;
                ZB_BEQS_ID    := ZQ_CELL_ID;
                Q_S0780_CHECK_TYPE_110_2_OVERFLO(->B_CTRS_PT2_MT_110);
                ZB_110_2_CTRS := B_CTRS_PT2_MT_110;
             OD;
          OD;
          IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                 ZQ_IND_REC,
                                 ZQ_RES_RRN,
                                 E_HIST_NORM)
             THEN
             ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                            -> ZM_RES_TYPE_110_ARR(ZQ_IND_REC).ZB_DATA;
          FI;
      Q_S0160_READ_HIST_FILE (->Z_THIRD_HIST_FILE,
                                  1,
                                  ZQ_REC+(ZQ_BUF *ZQ_HIS_BUFFER_RECS)-1,
                                  SIZE(CM_FY32_HIS_TYPE_110_3));

          DO WITH Z_THIRD_HIST_FILE.ZB_TABLE_PTR
                                 -> CM_FY32_HIS_TYPE_110_3;

             DO WITH ZQ_FILL_PTR -> ZM_TYPE_110_3_DATA;
                ZB_TAG       := ZS_TYPE_110_3_CELL_TAG;
                ZB_LEN       := ZS_TYPE_110_3_CELL_LEN;
                ZB_BEQS_ID    := ZQ_CELL_ID;
                Q_S0785_CHECK_TYPE_110_3_OVERFLO(->B_CTRS_PT3_MT_110);
                ZB_110_3_CTRS := B_CTRS_PT3_MT_110;
             OD;
          OD;
          IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                 ZQ_IND_REC,
                                 ZQ_RES_RRN,
                                 E_HIST_NORM)
             THEN
             ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                            -> ZM_RES_TYPE_110_ARR(ZQ_IND_REC).ZB_DATA;
          FI;
          /* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
          Q_S0160_READ_HIST_FILE (->Z_SEVENTH_HIST_FILE,
                                  1,
                                  ZQ_REC+(ZQ_BUF *ZQ_HIS_BUFFER_RECS)-1,
                                  SIZE(CM_FY32_HIS_TYPE_110_7));
          DO WITH Z_SEVENTH_HIST_FILE.ZB_TABLE_PTR
                                 -> CM_FY32_HIS_TYPE_110_7;
             DO WITH ZQ_FILL_PTR -> ZM_TYPE_110_7_DATA;
                ZB_TAG       := ZS_TYPE_110_7_CELL_TAG;
                ZB_LEN       := ZS_TYPE_110_7_CELL_LEN;
                ZB_BEQS_ID    := ZQ_CELL_ID;
                Q_S0785_CHECK_TYPE_110_7_OVERFLO(->B_CTRS_PT7_MT_110);
                ZB_110_7_CTRS := B_CTRS_PT7_MT_110;
             OD;
          OD;
          IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                 ZQ_IND_REC,
                                 ZQ_RES_RRN,
                                 E_HIST_NORM)
             THEN
             ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                            -> ZM_RES_TYPE_110_ARR(ZQ_IND_REC).ZB_DATA;
          FI;
          /* END: ADD-WIPRO-B10-MR1-CHANGE */
		  /*BEGIN : CR20/313054 */
		  Q_S0160_READ_HIST_FILE (->Z_THIRTEENTH_HIST_FILE,
                                  1,
                                  ZQ_REC+(ZQ_BUF *ZQ_HIS_BUFFER_RECS)-1,
                                  SIZE(CM_FY32_HIS_TYPE_110_13));
          DO WITH Z_THIRTEENTH_HIST_FILE.ZB_TABLE_PTR
                                 -> CM_FY32_HIS_TYPE_110_13;
             DO WITH ZQ_FILL_PTR -> ZM_TYPE_110_13_DATA;
                ZB_TAG       := ZS_TYPE_110_13_CELL_TAG;
                ZB_LEN       := ZS_TYPE_110_13_CELL_LEN;
                ZB_BEQS_ID    := ZQ_CELL_ID;

              
                Q_S0785_CHECK_TYPE_110_13_OVERFLO(->B_CTRS_PT13_MT_110);
                ZB_110_13_CTRS := B_CTRS_PT13_MT_110;
             OD;
          OD;
          IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                 ZQ_IND_REC,
                                 ZQ_RES_RRN,
                                 E_HIST_NORM)
             THEN
             ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                            -> ZM_RES_TYPE_110_ARR(ZQ_IND_REC).ZB_DATA;
          FI;
	/*END : CR20/313054 */
	
	/*BEGIN : CR20/301337-RFI4448 FILE FORMAT*/
	Q_S0160_READ_HIST_FILE (->Z_ELEVENTH_HIST_FILE,
				1,
				ZQ_REC+(ZQ_BUF * ZQ_HIS_BUFFER_RECS)-1,
				SIZE(CM_FY32_HIS_TYPE_110_11));
	DO WITH Z_ELEVENTH_HIST_FILE.ZB_TABLE_PTR
				-> CM_FY32_HIS_TYPE_110_11;
	   DO WITH ZQ_FILL_PTR -> ZM_TYPE_110_11_DATA;
		ZB_TAG := ZS_TYPE_110_11_CELL_TAG;
		ZB_LEN := ZS_TYPE_110_11_CELL_LEN;
		ZB_BEQS_ID := ZQ_CELL_ID;
		Q_S0785_CHECK_TYPE_110_11_OVERFLO(->B_CTRS_PT11_MT_110);
		ZB_110_11_CTRS := B_CTRS_PT11_MT_110;
	   OD;
	OD;
	IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
				ZQ_IND_REC,
				ZQ_RES_RRN,
				E_HIST_NORM)
	   THEN
	   ZQ_FILL_PTR := ->Z_RESULT_FILE.ZB_TABLE_PTR
			  ->ZM_RES_TYPE_110_ARR(ZQ_IND_REC).ZB_DATA;
	FI;
	/*END : CR20/301337*/
	/*begin CR1238146 A-GPS*/
	Q_S0160_READ_HIST_FILE (->Z_18TH_HIST_FILE,
				1,
				ZQ_REC+(ZQ_BUF * ZQ_HIS_BUFFER_RECS)-1,
				SIZE(CM_FY32_HIS_TYPE_110_18));
	DO WITH Z_18TH_HIST_FILE.ZB_TABLE_PTR
				-> CM_FY32_HIS_TYPE_110_18;
	   DO WITH ZQ_FILL_PTR -> ZM_TYPE_110_18_DATA;
		ZB_TAG := ZS_TYPE_110_18_CELL_TAG;
		ZB_LEN := ZS_TYPE_110_18_CELL_LEN;
		ZB_BEQS_ID := ZQ_CELL_ID;
		 DO FOR ZQ_J := E_MT_110_CTR_MC923E
                       TO E_MT_110_CTR_MC947J; 
				  DO WITH B_CTRS_PT18_MT_110;
				    CASE ZQ_J OF
/* BEGIN CRI#01621520.01 THE DEFAULT VALUE OF BLK 1127 CC CTRS */
				      (E_MT_110_CTR_MC923E:E_MT_110_CTR_MC946H):
                 B_MC923E_TO_B_MC947J(ZQ_J) := 
                        Q_S0840_CHECK_DPVAL_INVALID
                             (B_MC923E_TO_B_MC947J(ZQ_J));
      /* Q_S0840_CHECK_DPVAL(B_MC923E_TO_B_MC947J(ZQ_J)); */
/* END CRI#01621520.01 THE DEFAULT VALUE OF BLK 1127 CC CTRS */
              (ELSE):
                 B_MC923E_TO_B_MC947J(ZQ_J).B_LOW := 0;
                 B_MC923E_TO_B_MC947J(ZQ_J).B_HIGH := 0;
            ESAC;             
          OD;  
		    OD;
		    
		      ZB_110_18_CTRS := B_CTRS_PT18_MT_110;

	   OD; /* DO WITH ZQ_FILL_PTR */
	OD;
	IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
				ZQ_IND_REC,
				ZQ_RES_RRN,
				E_HIST_NORM)
	   THEN
	   ZQ_FILL_PTR := ->Z_RESULT_FILE.ZB_TABLE_PTR
			  ->ZM_RES_TYPE_110_ARR(ZQ_IND_REC).ZB_DATA;
	FI;
	/*end CR1238146 A-GPS*/
        FI;/*Z_ACTIVE_CELLS(ZQ_CELL_IDX)*/
      FI;/*ZQ_CELL_IDX /= M_NULL_CELL_IDX*/

      
   OD; /* DO FOR ZQ_REC */
OD; /* DO FOR ZQ_BUF */

Q_S0830_CHECK_LAST_WRITE(ZQ_IND_OBJ,
                         ZQ_IND_REC,
                         ZQ_RES_RRN);
Z_RES_RRN     := ZQ_RES_RRN + ZQ_IND_REC - 1;
END Q_S0760_110_MAKE_RES_FILE_110;

/*BEGIN : CR20/301337-RFI4448 FILE FORMAT*/

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0785_CHECK_TYPE_110_11_OVERFLO                   */
/*                                                                    */
/*     PROGRAMMER: SHAILESH S                                         */
/*                                                                    */
/*                LAST MODIFIED BY:         DATE:13/03/06             */
/*                                                                    */
/*     CREATION DATE: 13/03/06                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       CHECK FOR COUNTERS IN OVERFLOW CONDITION IN TYPE 110 BLOCK 7 */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_HIS_CC REF CM_FY32_HIS_TYPE_110_CTRS_ -    */
/*                      7                                             */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0840_CHECK_DPVAL                           */
/*     CALLED FROM:                                                   */
/*                      Q_S0760_110_MAKE_RES_FILE_110                 */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
/*NEW PROCEDURE ADDED FOR A NEW BLOCK (BLOCK 11) IN TYPE 110 */
Q_S0785_CHECK_TYPE_110_11_OVERFLO : PROC (ZF_HIS_CC REF
                                         CM_FY32_HIS_TYPE_110_CTRS_11);

DCL ZQ_I    RANGE(E_MT_110_CTR_MC718A:E_MT_110_CTR_MC975D);
/*DCL ZQ_I    CM_TYPE_110_CTRS_11; */


/*   Z_TRACE := H'0780;*/

  DO WITH ZF_HIS_CC -> ;

     /*BEGIN CRI 00605444 & DCTPD00602805*/
      	DO FOR ZQ_I := E_MT_110_CTR_MC718A 
                                     TO E_MT_110_CTR_MC719L;
/* BEGIN CRI#01619313.01 THE DEFAULT VALUE OF BLK 1126 CC CTRS */      
		B_MC718A_TO_B_MC975D(ZQ_I) := 
                   Q_S0840_CHECK_DPVAL_INVALID
                       (B_MC718A_TO_B_MC975D(ZQ_I));
           /* Q_S0840_CHECK_DPVAL(B_MC718A_TO_B_MC975D(ZQ_I)); */
/* END CRI#01619313.01 THE DEFAULT VALUE OF BLK 1126 CC CTRS */                       
	OD;
     /*END CRI 00605444 & DCTPD00602805*/

     /*for aupoip*/
    /*DO FOR ZQ_I := E_MT_110_CTR_MC718A TO E_MT_110_CTR_MC719L;*/
     /*BEGIN CRI 00605444 & DCTPD00602805*/
	DO FOR ZQ_I := E_MT_110_CTR_MC718I
      /*DO FOR ZQ_I := E_MT_110_CTR_MC718A*/
     /*END CRI 00605444 & DCTPD00602805*/ 
			/*BEGIN : FR36/307401*/
                                     /*TO E_MT_110_CTR_MC975D;*/
                                     TO E_MT_110_CTR_MC718J;
			/*END : FR36/307401*/

          /*B_MC718A_TO_B_MC719L(ZQ_I) := Q_S0840_CHECK_DPVAL
                                  (B_MC718A_TO_B_MC719L(ZQ_I));*/
		/*BEGIN:AUPOIP*/
		/*BEGIN : FR36-308826*/ 
	    DO WITH Z_FA_BSS_PAR2.ZB_TUPLE_PTR->
		      ZM_R_BSS_PAR2;
	       IF (D_EN_AUOIP = TRUE)
	       THEN
/* BEGIN CRI#01619313.01 THE DEFAULT VALUE OF BLK 1126 CC CTRS */  
		B_MC718A_TO_B_MC975D(ZQ_I) :=		
                   Q_S0840_CHECK_DPVAL_INVALID
                       (B_MC718A_TO_B_MC975D(ZQ_I));
          /* Q_S0840_CHECK_DPVAL(B_MC718A_TO_B_MC975D(ZQ_I)); */         
/* END CRI#01619313.01 THE DEFAULT VALUE OF BLK 1126 CC CTRS */                 
	       ELSE
		B_MC718A_TO_B_MC975D(ZQ_I).B_HIGH := 0;
		B_MC718A_TO_B_MC975D(ZQ_I).B_LOW := 0;
	 FI;
	 OD;
         /*END:AUPOIP*/
	OD;
	/*BEGIN : FR36/307401*/
	DO FOR ZQ_I := E_MT_110_CTR_MC975A
			TO
		       E_MT_110_CTR_MC975D;
	DO WITH Z_FA_BSS_PAR2.ZB_TUPLE_PTR->
		      ZM_R_BSS_PAR2;
	 IF (D_EN_AUOIP = TRUE)
	 THEN
/* BEGIN CRI#01619313.01 THE DEFAULT VALUE OF BLK 1126 CC CTRS */
		B_MC718A_TO_B_MC975D(ZQ_I) := 		
                      Q_S0840_CHECK_DPVAL_INVALID
                           (B_MC718A_TO_B_MC975D(ZQ_I));
          /* Q_S0840_CHECK_DPVAL(B_MC718A_TO_B_MC975D(ZQ_I)); */
/* END CRI#01619313.01 THE DEFAULT VALUE OF BLK 1126 CC CTRS */             
	 ELSE
		B_MC718A_TO_B_MC975D(ZQ_I).B_HIGH := 0;
		B_MC718A_TO_B_MC975D(ZQ_I).B_LOW := 0;
	 FI;
	 OD;
	 OD; 
	/*END : FR36/307401*/
  OD;

END Q_S0785_CHECK_TYPE_110_11_OVERFLO;
/*END : CR20/301337*/

/*BEGIN:AUPOIP*/
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0785_CHECK_TYPE_110_12_OVERFLO                   */
/*                                                                    */
/*     PROGRAMMER: PURNA                                              */
/*                                                                    */
/*                LAST MODIFIED BY:         DATE:11/01/2011           */
/*                                                                    */
/*     CREATION DATE: 11/01/2011                                      */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       HECK FOR COUNTERS IN OVERFLOW CONDITION IN TYPE 110 BLOCK 12 */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_HIS_CC REF CM_FY32_HIS_TYPE_110_CTRS_ -    */
/*                      12                                            */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0840_CHECK_DPVAL                           */
/*     CALLED FROM:                                                   */
/*                      Q_S0760_110_MAKE_RES_FILE_110                 */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
/*NEW PROCEDURE ADDED FOR A NEW BLOCK (BLOCK 12) IN TYPE 110 */
Q_S0785_CHECK_TYPE_110_12_OVERFLO : PROC (ZF_HIS_CC REF
                                         CM_FY32_HIS_TYPE_110_CTRS_12);

/* BEGIN CR 725623 Change */
/*DCL ZQ_I  RANGE(E_MT_110_CTR_AIP10A:E_MT_110_CTR_AIP54);*/
/* BEGIN CR:DCTPD00979074 */
/* BEGIN CR:1053653 */
DCL ZQ_I  RANGE(E_MT_110_CTR_AIP10A:E_MT_110_CTR_AIP20E);
/*DCL ZQ_I  RANGE(E_MT_110_CTR_AIP10A:E_MT_110_CTR_AIP20D);*/
/* END CR:1053653 */
/* END CR:DCTPD00979074 */
/* END CR 725623 Change */
/*DCL ZQ_I CM_TYPE_110_CTRS_12;*/


  DO WITH ZF_HIS_CC -> ;
/* BEGIN CR 725623 Change */
	DO FOR ZQ_I := E_MT_110_CTR_AIP10A
                           /* BEGIN CR:DCTPD00979074 */
			   /* BEGIN CR:1053653 */
                                     TO E_MT_110_CTR_AIP20E; 
                           /* TO E_MT_110_CTR_AIP20D; */
			   /* END CR:1053653 */
                          /* END CR:DCTPD00979074 */
       /* B_AIP10A_TO_AIP54(ZQ_I) := 
                Q_S0840_CHECK_DPVAL(B_AIP10A_TO_AIP54(ZQ_I));*/
/* BEGIN CR:DCTPD00979074 */
/* BEGIN CR:1053653 */
        B_AIP10A_TO_AIP20E(ZQ_I) := 
                Q_S0840_CHECK_DPVAL(B_AIP10A_TO_AIP20E(ZQ_I));
      /* B_AIP10A_TO_AIP20D(ZQ_I) := 
                Q_S0840_CHECK_DPVAL(B_AIP10A_TO_AIP20D(ZQ_I));*/
/* END CR:1053653 */
/* END CR:DCTPD00979074 */
        /* END CR 725623 Change */ 
	OD;
  OD;

END Q_S0785_CHECK_TYPE_110_12_OVERFLO;
/*END:AUPOIP*/

/*BEGIN:CR20/313054 */
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0785_CHECK_TYPE_110_13_OVERFLO                   */
/*                                                                    */
/*     PROGRAMMER: BALA                                               */
/*                                                                    */
/*                LAST MODIFIED BY:         DATE:                     */
/*                                                                    */
/*     CREATION DATE: 23/11/2011                                      */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       HECK FOR COUNTERS IN OVERFLOW CONDITION IN TYPE 110 BLOCK 13 */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_HIS_CC REF CM_FY32_HIS_TYPE_110_CTRS_ -    */
/*                      13                                            */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0840_CHECK_DPVAL                           */
/*     CALLED FROM:                                                   */
/*                      Q_S0760_110_MAKE_RES_FILE_110                 */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
/*NEW PROCEDURE ADDED FOR A NEW BLOCK (BLOCK 13) IN TYPE 110 */
Q_S0785_CHECK_TYPE_110_13_OVERFLO : PROC (ZF_HIS_CC REF
                                         CM_FY32_HIS_TYPE_110_CTRS_13);
										 
DCL ZQ_I    RANGE(E_MT_110_CTR_MC1520:E_MT_110_CTR_MC1539); 
Z_TRACE := H'0780;

DO WITH ZF_HIS_CC -> ;
   DO FOR ZQ_I := E_MT_110_CTR_MC1520 TO E_MT_110_CTR_MC1539;
      CASE ZQ_I OF
/* BEGIN CRI#01613577.01 THE DEFAULT VALUE OF BLK 1124 CC CTRS */      
      (E_MT_110_CTR_MC1520:E_MT_110_CTR_MC1531):
         /* B_MC1520_TO_MC1539(ZQ_I) := Q_S0840_CHECK_DPVAL */
         B_MC1520_TO_MC1539(ZQ_I) := Q_S0840_CHECK_DPVAL_INVALID
                                    (B_MC1520_TO_MC1539(ZQ_I));  
/* END CRI#01613577.01 THE DEFAULT VALUE OF BLK 1124 CC CTRS */
      (E_MT_110_CTR_MC1532:E_MT_110_CTR_MC1539):	
         B_MC1520_TO_MC1539(ZQ_I).B_HIGH := 0;
         B_MC1520_TO_MC1539(ZQ_I).B_LOW  := 0;		 
      ESAC;
   OD;
OD;
END Q_S0785_CHECK_TYPE_110_13_OVERFLO;
/*END:CR20/313054 */

/*BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0785_CHECK_TYPE_110_7_OVERFLO                    */
/*                                                                    */
/*     PROGRAMMER: SHAILESH S                                         */
/*                                                                    */
/*                LAST MODIFIED BY: SHAILESH        DATE:13/03/06     */
/*                                                                    */
/*     CREATION DATE: 13/03/06                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       CHECK FOR COUNTERS IN OVERFLOW CONDITION IN TYPE 110 BLOCK 7 */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_HIS_CC REF CM_FY32_HIS_TYPE_110_CTRS_ -    */
/*                      7                                             */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0840_CHECK_DPVAL                           */
/*     CALLED FROM:                                                   */
/*                      Q_S0760_110_MAKE_RES_FILE_110                 */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
/*NEW PROCEDURE ADDED FOR A NEW BLOCK (BLOCK 7) IN TYPE 110 */
Q_S0785_CHECK_TYPE_110_7_OVERFLO : PROC (ZF_HIS_CC REF
                                         CM_FY32_HIS_TYPE_110_CTRS_7);
/* CR 20/199132 */
/* CR20/209493 START */
 /* DCL ZQ_I    RANGE(E_MT_110_CTR_MC191:E_MT_110_CTR_MC928I);*/
 /* DCL ZQ_I    RANGE(E_MT_110_CTR_MC191:E_MT_110_CTR_MC935); */
/*START: IURG MODE CHANGES*/
/* DCL ZQ_I    RANGE(E_MT_110_CTR_MC191:E_MT_110_CTR_MC974); */
   DCL ZQ_I    RANGE(E_MT_110_CTR_MC191:E_MT_110_CTR_MC1309); 
/*END: IURG MODE CHANGES*/
/* CR20/209493 END */
/* CR 20/199132 */


Z_TRACE := H'0780;

DO WITH ZF_HIS_CC -> ;

/* CR 20/199132 */
/* CR20/209493 START */
   /*DO FOR ZQ_I := E_MT_110_CTR_MC191 TO E_MT_110_CTR_MC928I;*/
   /*DO FOR ZQ_I := E_MT_110_CTR_MC191 TO E_MT_110_CTR_MC935; */
/*START: IURG MODE CHANGES*/
/* DO FOR ZQ_I := E_MT_110_CTR_MC191 TO E_MT_110_CTR_MC974;*/
   DO FOR ZQ_I := E_MT_110_CTR_MC191 TO E_MT_110_CTR_MC1309;
/*END: IURG MODE CHANGES*/
/* CR20/209493 END */
/* CR 20/199132 */
/* BEGIN CRI#01608150.01 THE DEFAULT VALUE OF BLK 1123 CC CTRS */
      CASE ZQ_I OF
      /*CR20/233490*/
      (E_MT_110_CTR_MC191:E_MT_110_CTR_MC701G):
         /* BEGIN CRI#01608150.01 */
         /* B_MC191_TO_MC975(ZQ_I) := Q_S0840_CHECK_DPVAL */
         B_MC191_TO_MC975(ZQ_I) := Q_S0840_CHECK_DPVAL_INVALID
                                    (B_MC191_TO_MC975(ZQ_I));
         /* END CRI#01608150.01 */                          
      (E_MT_110_CTR_MC925A:E_MT_110_CTR_MC925H):
         B_MC191_TO_MC975(ZQ_I) := Q_S0840_CHECK_DPVAL_INVALID
                                    (B_MC191_TO_MC975(ZQ_I));
      (E_MT_110_CTR_MC927A:E_MT_110_CTR_MC928I):
         /* BEGIN CRI#01608150.01 */
         /* B_MC191_TO_MC975(ZQ_I) := Q_S0840_CHECK_DPVAL */
         B_MC191_TO_MC975(ZQ_I) := Q_S0840_CHECK_DPVAL_INVALID
                                    (B_MC191_TO_MC975(ZQ_I));
         /* END CRI#01608150.01 */                           
      (E_MT_110_CTR_MC930):
         B_MC191_TO_MC975(ZQ_I) := Q_S0840_CHECK_DPVAL_INVALID
                                    (B_MC191_TO_MC975(ZQ_I));
      (E_MT_110_CTR_MC931:E_MT_110_CTR_MC937):
         /* BEGIN CRI#01608150.01 */
         /* B_MC191_TO_MC975(ZQ_I) := Q_S0840_CHECK_DPVAL */
         B_MC191_TO_MC975(ZQ_I) := Q_S0840_CHECK_DPVAL_INVALID
                                    (B_MC191_TO_MC975(ZQ_I));
         /* END CRI#01608150.01 */
	/* START : Changes for A-flex */
	/*(E_MT_110_CTR_MC961):*/ 
	/*(E_MT_110_CTR_MC8E):*/ 
      /*CR36/251325 START*/	
        (E_MT_110_CTR_MC961): 
      /*CR36/251325 END*/
        /* BEGIN CRI#01608150.01 */
        /* B_MC191_TO_MC975(ZQ_I) := Q_S0840_CHECK_DPVAL */
        B_MC191_TO_MC975(ZQ_I) := Q_S0840_CHECK_DPVAL_INVALID
                                    (B_MC191_TO_MC975(ZQ_I));
        /* END CRI#01608150.01 */                           
	/* END : Changes for A-flex */ 
   
   /*CR20/233490*/
 /* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */      
      /*(E_MT_110_CTR_MC938:E_MT_110_CTR_MC974):*/
      (E_MT_110_CTR_MC938:E_MT_110_CTR_MC950):
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */      
/*         B_MC191_TO_MC975(ZQ_I).B_HIGH := 0; */ 
/*         B_MC191_TO_MC975(ZQ_I).B_LOW := 0; */ 

	/* START : Changes for NB-AMR */
	/* BEGIN CRI#01608150.01 */
        /* B_MC191_TO_MC975(ZQ_I) := Q_S0840_CHECK_DPVAL */
        B_MC191_TO_MC975(ZQ_I) := Q_S0840_CHECK_DPVAL_INVALID
                                    (B_MC191_TO_MC975(ZQ_I));
        /* END CRI#01608150.01 */                            
	/* END : Changes for NB-AMR */

/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */      
      (E_MT_110_CTR_MC951:E_MT_110_CTR_MC956):
         /* BEGIN CRI#01608150.01 */
         /* B_MC191_TO_MC975(ZQ_I) := Q_S0840_CHECK_DPVAL */
         B_MC191_TO_MC975(ZQ_I) := Q_S0840_CHECK_DPVAL_INVALID
                       (B_MC191_TO_MC975(ZQ_I));
         /* END CRI#01608150.01 */              
    /*  (E_MT_110_CTR_MC957:E_MT_110_CTR_MC974):
         B_MC191_TO_MC975(ZQ_I).B_HIGH := 0;
         B_MC191_TO_MC975(ZQ_I).B_LOW := 0;  */

/* BEGIN: ADD-TRX-POWER-SAVING-FEATURE */
      (E_MT_110_CTR_MC957:E_MT_110_CTR_MC958):
         /* BEGIN CRI#01608150.01 */
         /* B_MC191_TO_MC975(ZQ_I) := Q_S0840_CHECK_DPVAL */
         B_MC191_TO_MC975(ZQ_I) := Q_S0840_CHECK_DPVAL_INVALID
                       (B_MC191_TO_MC975(ZQ_I));
         /* END CRI#01608150.01 */              
/* END: ADD-TRX-POWER-SAVING-FEATURE */


/* CR 20/245729 START */
     /* CR 20/243517 */ 

  (E_MT_110_CTR_MC959:E_MT_110_CTR_MC960):
         /* BEGIN CRI#01608150.01 */
         /* B_MC191_TO_MC975(ZQ_I) := Q_S0840_CHECK_DPVAL */
         B_MC191_TO_MC975(ZQ_I) := Q_S0840_CHECK_DPVAL_INVALID
                                    (B_MC191_TO_MC975(ZQ_I));
         /* END CRI#01608150.01 */
     /*Commented for CR260349*/	
   /*(E_MT_110_CTR_MC962:E_MT_110_CTR_MC963):*/
     /* CR260349 START */
     (E_MT_110_CTR_MC962:E_MT_110_CTR_MC964):
     /* CR260349 END */
         /* BEGIN CRI#01608150.01 */
         /* B_MC191_TO_MC975(ZQ_I) := Q_S0840_CHECK_DPVAL */
         B_MC191_TO_MC975(ZQ_I) := Q_S0840_CHECK_DPVAL_INVALID
                                    (B_MC191_TO_MC975(ZQ_I));
         /* END CRI#01608150.01 */                          
     /*BEGIN :CR20_299359- Lb Interface*/
      (E_MT_110_CTR_MC965:E_MT_110_CTR_MC966):
        /* BEGIN CRI#01608150.01 */
	 /* B_MC191_TO_MC975(ZQ_I) := Q_S0840_CHECK_DPVAL */
	 B_MC191_TO_MC975(ZQ_I) := Q_S0840_CHECK_DPVAL_INVALID
                                     (B_MC191_TO_MC975(ZQ_I));
        /* END CRI#01608150.01 */                           
     /*END : CR20_299359*/
     /*START :CR312407*/
	(E_MT_110_CTR_MC182A):
	 /* BEGIN CRI#01608150.01 */
	 /* B_MC191_TO_MC975(ZQ_I):= Q_S0840_CHECK_DPVAL */
	 B_MC191_TO_MC975(ZQ_I):= Q_S0840_CHECK_DPVAL_INVALID
                                     (B_MC191_TO_MC975(ZQ_I));
        /* END CRI#01608150.01 */
      /*STOP :CR312407*/
    /* START : Addition for A-flex */
      /*  (E_MT_110_CTR_MC957:E_MT_110_CTR_MC960): */
      /*  (E_MT_110_CTR_MC959:E_MT_110_CTR_MC960): 
         B_MC191_TO_MC975(ZQ_I).B_HIGH := 0;
         B_MC191_TO_MC975(ZQ_I).B_LOW := 0;*/

       /* (E_MT_110_CTR_MC962:E_MT_110_CTR_MC974):
         B_MC191_TO_MC975(ZQ_I).B_HIGH := 0;
         B_MC191_TO_MC975(ZQ_I).B_LOW := 0;*/
    /* END : Addition for A-flex */
     /*Commented for CR260349*/
     /*(E_MT_110_CTR_MC964:E_MT_110_CTR_MC974):*/
     /*(E_MT_110_CTR_MC965:E_MT_110_CTR_MC974):*/
     /*START: IURG*/
     /*Commented to resolve the conflict 
       between IURG and Lb Interface*/
     /* (E_MT_110_CTR_MC965:E_MT_110_CTR_MC971): */
     /*END: IURG*/
      /*BEGIN : CR20_299359- Lb Interface*/
     /*(E_MT_110_CTR_MC965:E_MT_110_CTR_MC1309):*/
     /*New line is added to resolve the 
       conflict between IURG and Lb Interface*/
     /*(E_MT_110_CTR_MC967:E_MT_110_CTR_MC1309):*/
     /*START :CR312407*/
	/*(E_MT_110_CTR_MC967:E_MT_110_CTR_MC971):*/
     /*STOP :CR312407*/

	/*END : CR20_299359*/
     /*END: IURG MODE CHANGES*/
	(E_MT_110_CTR_MC968:E_MT_110_CTR_MC971):
         B_MC191_TO_MC975(ZQ_I).B_HIGH := 0;
         B_MC191_TO_MC975(ZQ_I).B_LOW := 0; 

     /*START: IURG*/
     (E_MT_110_CTR_MC1307:E_MT_110_CTR_MC1309):
      IF Z_FA_BSS_PAR2.ZB_TUPLE_PTR->
         ZM_R_BSS_PAR2.D_EN_IURG = TRUE
        THEN
        /* BEGIN CRI#01608150.01 */
        /* B_MC191_TO_MC975(ZQ_I) := Q_S0840_CHECK_DPVAL */
        B_MC191_TO_MC975(ZQ_I) := Q_S0840_CHECK_DPVAL_INVALID
                                   (B_MC191_TO_MC975(ZQ_I));
        /* END CRI#01608150.01 */                           
      ELSE
         B_MC191_TO_MC975(ZQ_I).B_LOW  := 0;
         B_MC191_TO_MC975(ZQ_I).B_HIGH := 0;
      FI;
     /*END: IURG*/
/* END CRI#01608150.01 THE DEFAULT VALUE OF BLK 1123 CC CTRS */     
    /* CR 20/243517 */
/* CR 20/245729 END */ 

/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */      
      ESAC;
   OD;
OD;
END Q_S0785_CHECK_TYPE_110_7_OVERFLO;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0770_CHECK_TYPE_110_1_OVERFLO                    */
/*                                                                    */
/*     PROGRAMMER: A.H.SWANN                                          */
/*                                                                    */
/*                LAST MODIFIED BY: NAIKA              DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/10/28                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       CHECK FOR OVERFLOW COUNTERS IN TYPE 110 BLOCK 1              */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_HIS_CC REF CM_FY32_HIS_TYPE_110_CTRS_ -    */
/*                      1                                             */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0840_CHECK_DPVAL                           */
/*     CALLED FROM:                                                   */
/*                      Q_S0760_110_MAKE_RES_FILE_110                 */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0770_CHECK_TYPE_110_1_OVERFLO : PROC (ZF_HIS_CC REF
                                         CM_FY32_HIS_TYPE_110_CTRS_1);

DCL ZQ_I    RANGE(E_MT_110_CTR_MC01:E_MT_110_CTR_MC921E);
/*BEGIN : FR36/607401-02*/
DCL ZS_AUPOIP_MODE BOOL;
/*END : FR36/607401-02*/
Z_TRACE := H'0770;

DO WITH ZF_HIS_CC -> ;
   DO FOR ZQ_I := E_MT_110_CTR_MC01 TO E_MT_110_CTR_MC921E;
      CASE ZQ_I OF
 /* BEGIN CRI#01587851.01 THE DEFAULT VALUE OF BLK 1110 CC CTRS */
      (E_MT_110_CTR_MC01:E_MT_110_CTR_MC149):
         B_MC01_TO_MC149(ZQ_I) := Q_S0840_CHECK_DPVAL_INVALID
                                 (B_MC01_TO_MC149(ZQ_I));
/* END CRI#01587851.01 THE DEFAULT VALUE OF BLK 1110 CC CTRS */
      (E_MT_110_CTR_MC24:E_MT_110_CTR_MC141): /* SI CTRS */
         IF B_MC24_TO_MC141(ZQ_I) = ZS_DPVAL_OVERFLOW
            THEN
            B_MC24_TO_MC141(ZQ_I) := ZS_DPVAL_INVALID;
         FI;
/* BEGIN CRI#01587851.01 THE DEFAULT VALUE OF BLK 1110 CC CTRS */
      (E_MT_110_CTR_MC8A:E_MT_110_CTR_MC8D):
         B_MC8A_TO_MC8D(ZQ_I) := Q_S0840_CHECK_DPVAL_INVALID
                                 (B_MC8A_TO_MC8D(ZQ_I));                                
       /* BEGIN : FR36/307401-02 */
      /*(E_MT_110_CTR_MC541A:E_MT_110_CTR_MC41B):*/
      (E_MT_110_CTR_MC541A):
      /*   IF B_MC541A_TO_MC41B(ZQ_I) = ZS_DPVAL_OVERFLOW
            THEN
            B_MC541A_TO_MC41B(ZQ_I) := ZS_DPVAL_INVALID;
         FI;
         */
         B_MC541A_TO_MC41B(ZQ_I) := Q_S0841_CHECK_VAL_INVALID
                                        (B_MC541A_TO_MC41B(ZQ_I));
	(E_MT_110_CTR_MC41B):
	ZS_AUPOIP_MODE := BOOL(Q_S4290_GET_AUOIP_MODE());
	IF (NOT ZS_AUPOIP_MODE) /*FOR IP MODE: ZERO*/
	THEN
	   B_MC541A_TO_MC41B(ZQ_I):= 0;
	ELSE/* B_MC541A_TO_MC41B(ZQ_I) = ZS_DPVAL_OVERFLOW 
	   THEN
	       B_MC541A_TO_MC41B(ZQ_I) := ZS_DPVAL_INVALID; */
	  B_MC541A_TO_MC41B(ZQ_I) := Q_S0841_CHECK_VAL_INVALID
                                        (B_MC541A_TO_MC41B(ZQ_I));     
	FI;

       /*END : FR36/307401-02*/
      (E_MT_110_CTR_MC586A:E_MT_110_CTR_MC153):
         B_MC586A_TO_MC153(ZQ_I) := Q_S0840_CHECK_DPVAL_INVALID
                                 (B_MC586A_TO_MC153(ZQ_I));
      (E_MT_110_CTR_MC555):
       /*  IF B_MC555 = ZS_DPVAL_OVERFLOW
            THEN
            B_MC555 := ZS_DPVAL_INVALID;
         FI; */
        B_MC555 := Q_S0841_CHECK_VAL_INVALID(B_MC555);
      (E_MT_110_CTR_MC196:E_MT_110_CTR_MC461):
         B_MC196_TO_MC461(ZQ_I) := Q_S0840_CHECK_DPVAL_INVALID
                                 (B_MC196_TO_MC461(ZQ_I));
      (E_MT_110_CTR_MC921A:E_MT_110_CTR_MC921E):
        /* IF B_MC921A_TO_MC921E(ZQ_I) = ZS_DPVAL_OVERFLOW
            THEN
            B_MC921A_TO_MC921E(ZQ_I) := ZS_DPVAL_INVALID;
         FI; */
      B_MC921A_TO_MC921E(ZQ_I) := Q_S0841_CHECK_VAL_INVALID
                                (B_MC921A_TO_MC921E(ZQ_I));   
 /* END CRI#01587851.01 THE DEFAULT VALUE OF BLK 1110 CC CTRS */
      ESAC;
   OD;
OD;
END Q_S0770_CHECK_TYPE_110_1_OVERFLO;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0780_CHECK_TYPE_110_2_OVERFLO                    */
/*                                                                    */
/*     PROGRAMMER: A.H.SWANN                                          */
/*                                                                    */
/*                LAST MODIFIED BY: NAIKA              DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/10/28                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       CHECK FOR COUNTERS IN OVERFLOW CONDITION IN TYPE 110 BLOCK 2 */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_HIS_CC REF CM_FY32_HIS_TYPE_110_CTRS_ -    */
/*                      2                                             */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0840_CHECK_DPVAL                           */
/*     CALLED FROM:                                                   */
/*                      Q_S0760_110_MAKE_RES_FILE_110                 */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0780_CHECK_TYPE_110_2_OVERFLO : PROC (ZF_HIS_CC REF
                                         CM_FY32_HIS_TYPE_110_CTRS_2);

DCL ZQ_I    RANGE(E_MT_110_CTR_MC607:E_MT_110_CTR_MC162);
/*BEGIN : FR36/307401-03*/
DCL ZS_AUPOIP_MODE BOOL;
/*END : FR36/307401-02*/

Z_TRACE := H'0780;

DO WITH ZF_HIS_CC -> ;
   DO FOR ZQ_I := E_MT_110_CTR_MC607 TO E_MT_110_CTR_MC162;
      CASE ZQ_I OF
/* BEGIN CRI#01590857.01 THE DEFAULT VALUE OF BLK 1120 CC CTRS */
      (E_MT_110_CTR_MC607:E_MT_110_CTR_MC612D):
        B_MC607_TO_MC612D(ZQ_I) := Q_S0840_CHECK_DPVAL_INVALID
                                    (B_MC607_TO_MC612D(ZQ_I));
      /*BEGIN : FR36/307401-02*/
      /*(E_MT_110_CTR_MC541:E_MT_110_CTR_MC81):*/
      (E_MT_110_CTR_MC81):
        /* IF B_MC541_TO_MC81(ZQ_I) = ZS_DPVAL_OVERFLOW
            THEN
            B_MC541_TO_MC81(ZQ_I) := ZS_DPVAL_INVALID;
         FI; */
        B_MC541_TO_MC81(ZQ_I) :=Q_S0841_CHECK_VAL_INVALID
                                     (B_MC541_TO_MC81(ZQ_I));
	(E_MT_110_CTR_MC541):
	  ZS_AUPOIP_MODE := BOOL (Q_S4290_GET_AUOIP_MODE());
          IF (NOT ZS_AUPOIP_MODE)/*IP MODE : ZERO*/ 
          THEN
	     B_MC541_TO_MC81(ZQ_I) := 0;
	  /*ELSIF B_MC541_TO_MC81(ZQ_I) = ZS_DPVAL_OVERFLOW
	  THEN
                 B_MC541_TO_MC81(ZQ_I) := ZS_DPVAL_INVALID; */
          ELSE
            B_MC541_TO_MC81(ZQ_I) := Q_S0841_CHECK_VAL_INVALID
                                        (B_MC541_TO_MC81(ZQ_I));
          FI;
         	
      /*END : FR36/307401-02*/
      (E_MT_110_CTR_MC642):
        B_MC642 := Q_S0840_CHECK_DPVAL_INVALID(B_MC642);

      (E_MT_110_CTR_MC643):
         /* IF B_MC643 = ZS_DPVAL_OVERFLOW
            THEN
            B_MC643 := ZS_DPVAL_INVALID;
         FI; */
        B_MC643 := Q_S0841_CHECK_VAL_INVALID(B_MC643);

      (E_MT_110_CTR_MC645A:E_MT_110_CTR_MC646):
       B_MC645A_TO_MC646(ZQ_I) := Q_S0840_CHECK_DPVAL_INVALID
                                 (B_MC645A_TO_MC646(ZQ_I));
      (E_MT_110_CTR_MC647:E_MT_110_CTR_MC648):
         /* IF B_MC647_TO_MC648(ZQ_I) = ZS_DPVAL_OVERFLOW
            THEN
            B_MC647_TO_MC648(ZQ_I) := ZS_DPVAL_INVALID;
         FI; */
         
       B_MC647_TO_MC648(ZQ_I) := Q_S0841_CHECK_VAL_INVALID
                                  (B_MC647_TO_MC648(ZQ_I));
      (E_MT_110_CTR_MC650):
       B_MC650 := Q_S0840_CHECK_DPVAL_INVALID(B_MC650);

      (E_MT_110_CTR_MC551:E_MT_110_CTR_MC91):
         /* IF B_MC551_TO_MC91(ZQ_I) = ZS_DPVAL_OVERFLOW
            THEN
            B_MC551_TO_MC91(ZQ_I) := ZS_DPVAL_INVALID;
         FI; */
       B_MC551_TO_MC91(ZQ_I) :=  Q_S0841_CHECK_VAL_INVALID
                                 (B_MC551_TO_MC91(ZQ_I));
      (E_MT_110_CTR_MC652):
       B_MC652 := Q_S0840_CHECK_DPVAL_INVALID(B_MC652);

      (E_MT_110_CTR_MC653):
         /* IF B_MC653 = ZS_DPVAL_OVERFLOW
            THEN
            B_MC653 := ZS_DPVAL_INVALID;
         FI; */
       B_MC653 :=  Q_S0841_CHECK_VAL_INVALID(B_MC653);

      (E_MT_110_CTR_MC655A:E_MT_110_CTR_MC656):
       B_MC655A_TO_MC656(ZQ_I) := Q_S0840_CHECK_DPVAL_INVALID
                                 (B_MC655A_TO_MC656(ZQ_I));

      (E_MT_110_CTR_MC657:E_MT_110_CTR_MC658):
         /* IF B_MC657_TO_MC658(ZQ_I) = ZS_DPVAL_OVERFLOW
            THEN
            B_MC657_TO_MC658(ZQ_I) := ZS_DPVAL_INVALID;
         FI; */
       B_MC657_TO_MC658(ZQ_I) :=  Q_S0841_CHECK_VAL_INVALID
                              (B_MC657_TO_MC658(ZQ_I));

      (E_MT_110_CTR_MC660):
       B_MC660 := Q_S0840_CHECK_DPVAL_INVALID(B_MC660);

      (E_MT_110_CTR_MC561:E_MT_110_CTR_MC101):
         /* IF B_MC561_TO_MC101(ZQ_I) = ZS_DPVAL_OVERFLOW
            THEN
            B_MC561_TO_MC101(ZQ_I) := ZS_DPVAL_INVALID;
         FI; */
       B_MC561_TO_MC101(ZQ_I) := Q_S0841_CHECK_VAL_INVALID
                            (B_MC561_TO_MC101(ZQ_I));

      (E_MT_110_CTR_MC662):
       B_MC662 := Q_S0840_CHECK_DPVAL_INVALID(B_MC662);

      (E_MT_110_CTR_MC663:E_MT_110_CTR_MC667):
         /* IF B_MC663_TO_MC667(ZQ_I) = ZS_DPVAL_OVERFLOW
            THEN
            B_MC663_TO_MC667(ZQ_I) := ZS_DPVAL_INVALID;
         FI; */
       B_MC663_TO_MC667(ZQ_I) := Q_S0841_CHECK_VAL_INVALID
                           (B_MC663_TO_MC667(ZQ_I));

      (E_MT_110_CTR_MC670:E_MT_110_CTR_MC820):
       B_MC670_TO_MC820(ZQ_I) := Q_S0840_CHECK_DPVAL_INVALID
                                 (B_MC670_TO_MC820(ZQ_I));
       /* SI CTRS */
      (E_MT_110_CTR_MC320A:E_MT_110_CTR_MC320E):
         /*IF B_MC320A_TO_MC320E(ZQ_I) = ZS_DPVAL_OVERFLOW
            THEN
            B_MC320A_TO_MC320E(ZQ_I) := ZS_DPVAL_INVALID; */
           /*AM: DCTPD00749235 */
           /* ELSIF B_MC320A_TO_MC320E(ZQ_I) = ZS_DPVAL_INVALID
                  THEN
                  B_MC320A_TO_MC320E(ZQ_I) := 0; */ 
           /*AM: DCTPD00749235 */       
        /* FI;*/
       B_MC320A_TO_MC320E(ZQ_I) := Q_S0841_CHECK_VAL_INVALID
                  (B_MC320A_TO_MC320E(ZQ_I));
      (E_MT_110_CTR_MC821):
       B_MC821 := Q_S0840_CHECK_DPVAL_INVALID(B_MC821);

      (E_MT_110_CTR_MC250:E_MT_110_CTR_MC29A):
        IF ZQ_I = E_MT_110_CTR_MC29A
            THEN
          B_MC250_TO_MC29A(ZQ_I) := Q_S0841_CHECK_VAL_INVALID
                                 (B_MC250_TO_MC29A(ZQ_I));
         ELSIF B_MC250_TO_MC29A(ZQ_I) = ZS_DPVAL_OVERFLOW
            THEN
            B_MC250_TO_MC29A(ZQ_I) := ZS_DPVAL_INVALID;/* SI CTRS */
         FI;
      
      (E_MT_110_CTR_MC830:E_MT_110_CTR_MC831):
       B_MC830_TO_MC831(ZQ_I) := Q_S0840_CHECK_DPVAL_INVALID
                                 (B_MC830_TO_MC831(ZQ_I));

      (E_MT_110_CTR_MC34:E_MT_110_CTR_MC31):
         /* IF B_MC34_TO_MC31(ZQ_I) = ZS_DPVAL_OVERFLOW
            THEN
            B_MC34_TO_MC31(ZQ_I) := ZS_DPVAL_INVALID;
         FI; */
        B_MC34_TO_MC31(ZQ_I) := Q_S0841_CHECK_VAL_INVALID
                               (B_MC34_TO_MC31(ZQ_I));
      (E_MT_110_CTR_MC870:E_MT_110_CTR_MC871):
       B_MC870_TO_MC871(ZQ_I) := Q_S0840_CHECK_DPVAL_INVALID
                                 (B_MC870_TO_MC871(ZQ_I));

      (E_MT_110_CTR_MC803):
         /* IF B_MC803 = ZS_DPVAL_OVERFLOW
            THEN
            B_MC803 := ZS_DPVAL_INVALID;
         FI; */
       B_MC803 := Q_S0841_CHECK_VAL_INVALID(B_MC803);

      (E_MT_110_CTR_MC1040:E_MT_110_CTR_MC162):
         B_MC1040_TO_MC162(ZQ_I) := Q_S0840_CHECK_DPVAL_INVALID
                                 (B_MC1040_TO_MC162(ZQ_I));
/* END CRI#01590857.01 THE DEFAULT VALUE OF BLK 1120 CC CTRS */
      ESAC;
   OD;
OD;
END Q_S0780_CHECK_TYPE_110_2_OVERFLO;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0785_CHECK_TYPE_110_3_OVERFLO                    */
/*                                                                    */
/*     PROGRAMMER: NAIKA                                              */
/*                                                                    */
/*                LAST MODIFIED BY: PURNA        DATE:10/01/2011      */
/*                                                                    */
/*     CREATION DATE: 02/08/01                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       CHECK FOR COUNTERS IN OVERFLOW CONDITION IN TYPE 110 BLOCK 3 */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_HIS_CC REF CM_FY32_HIS_TYPE_110_CTRS_ -    */
/*                      3                                             */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0840_CHECK_DPVAL                           */
/*     CALLED FROM:                                                   */
/*                      Q_S0760_110_MAKE_RES_FILE_110                 */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
/*NEW PROCEDURE ADDED FOR A NEW BLOCK (BLOCK 3) IN TYPE 110 */
Q_S0785_CHECK_TYPE_110_3_OVERFLO : PROC (ZF_HIS_CC REF
                                         CM_FY32_HIS_TYPE_110_CTRS_3);
/* BEGIN: ADD-WIPRO-B9-P2-CHANGE CR 36/160486 */
/* CR20/225233 */
  /*DCL ZQ_I    RANGE(E_MT_110_CTR_MC448A:E_MT_110_CTR_MC924K);*/
  /*DCL ZQ_I    RANGE(E_MT_110_CTR_MC448A:E_MT_110_CTR_MC482); 
		 FOR LTE TO GSM HO */
  
 /*START:LTE TO GSM HO*/
 /* BEGIN : B12 AUPOIP */
  /* DCL ZQ_I    RANGE(E_MT_110_CTR_MC448A:E_MT_110_CTR_MC929H);*/
 /* END ; B12 AUPOIP */
   /*END:LTE TO GSM HO*/
 
/* CR20/225233 */  
/* END: ADD-WIPRO-B9-P2-CHANGE CR 36/160486 */

/* BEGIN: ADD-WIPRO-B9-P2-CHANGE CR 36/160486 */
/* CR20/225233 */
   /*DO FOR ZQ_I := E_MT_110_CTR_MC448A TO E_MT_110_CTR_MC924K;*/
   /*DCL ZQ_I    RANGE(E_MT_110_CTR_MC448A:E_MT_110_CTR_MC482);*/ 
 /* FOR AUPOIP*/
  /*BEGIN:AUPOIP*/
  /*START: FR36/310288*/
  /*DCL ZQ_I    RANGE(E_MT_110_CTR_MC448A:E_MT_110_CTR_MC701J);*/
  DCL ZQ_I    RANGE(E_MT_110_CTR_MC448A:E_MT_110_CTR_MC490B);
  /*END: FR36/310288*/
  /*END:AUPOIP*/ 
   Z_TRACE := H'0780;  
/* CR20/225233 */   
/* END: ADD-WIPRO-B9-P2-CHANGE CR 36/160486 */
      DO WITH ZF_HIS_CC -> ;
	   DO FOR ZQ_I := E_MT_110_CTR_MC448A TO E_MT_110_CTR_MC490B;
	  CASE ZQ_I OF
/* BEGIN CRI#01591912.01 THE DEFAULT VALUE OF BLK 1122 CC CTRS */
      (E_MT_110_CTR_MC448A:E_MT_110_CTR_MC922D):
         B_MC448A_TO_MC922D(ZQ_I) := Q_S0840_CHECK_DPVAL_INVALID
                                    (B_MC448A_TO_MC922D(ZQ_I));

      (E_MT_110_CTR_MC800:E_MT_110_CTR_MC802B):
         IF ((ZQ_I = E_MT_110_CTR_MC800) OR 
              (ZQ_I = E_MT_110_CTR_MC801A) OR
              (ZQ_I = E_MT_110_CTR_MC802A))
           THEN
             IF B_MC800_TO_MC802B(ZQ_I) = ZS_DPVAL_OVERFLOW
                THEN
                   B_MC800_TO_MC802B(ZQ_I) := ZS_DPVAL_INVALID;
             FI;
         ELSE
           B_MC800_TO_MC802B(ZQ_I) := Q_S0841_CHECK_VAL_INVALID
                                  (B_MC800_TO_MC802B(ZQ_I));
        FI;
      (E_MT_110_CTR_MC804A:E_MT_110_CTR_MC02I):
         B_MC804A_TO_MC02I(ZQ_I) := Q_S0840_CHECK_DPVAL_INVALID
                                 (B_MC804A_TO_MC02I(ZQ_I));

      /* CR20/225233 */  
      (E_MT_110_CTR_MC462A:E_MT_110_CTR_MC924G):
	  
         /* IF B_MC462A_TO_MC482(ZQ_I) = ZS_DPVAL_OVERFLOW
            THEN
            B_MC462A_TO_MC482(ZQ_I) := ZS_DPVAL_INVALID;
         FI; */
         B_MC462A_TO_MC482(ZQ_I) := Q_S0841_CHECK_VAL_INVALID
                              (B_MC462A_TO_MC482(ZQ_I));
	  /*(E_MT_110_CTR_MC924H:E_MT_110_CTR_MC924K):*/
      (E_MT_110_CTR_MC924H:E_MT_110_CTR_MC924K):
            B_MC462A_TO_MC482(ZQ_I) := 0;
      (E_MT_110_CTR_MC482):
        /* IF B_MC462A_TO_MC482(ZQ_I) = ZS_DPVAL_OVERFLOW
            THEN
            B_MC462A_TO_MC482(ZQ_I) := ZS_DPVAL_INVALID;
         FI;  */           
     /* CR20/225233 */  
       B_MC462A_TO_MC482(ZQ_I) := Q_S0841_CHECK_VAL_INVALID
                                (B_MC462A_TO_MC482(ZQ_I));
   /*BEGIN:LTE TO GSM HO*/

       (E_MT_110_CTR_MC929A:E_MT_110_CTR_MC929D):
         B_MC929A_TO_MC929D(ZQ_I):= Q_S0840_CHECK_DPVAL_INVALID
                                    (B_MC929A_TO_MC929D(ZQ_I));

	(E_MT_110_CTR_MC929E:E_MT_110_CTR_MC929H):
	  /* IF (B_MC929E_TO_MC929H(ZQ_I)=ZS_DPVAL_OVERFLOW)
	     THEN 
	       B_MC929E_TO_MC929H(ZQ_I):=ZS_DPVAL_INVALID; 
          FI; */
          B_MC929E_TO_MC929H(ZQ_I) := Q_S0841_CHECK_VAL_INVALID
                                  (B_MC929E_TO_MC929H(ZQ_I));

    /*END:LTE TO GSM HO*/
	/*BEGIN:AUPOIP*/	
		/*(E_MT_110_CTR_MC490A:E_MT_110_CTR_MC701J):*/
                /*START: FR36/310288*/
		/*(E_MT_110_CTR_MC490A:E_MT_110_CTR_MC701J):*/
		(E_MT_110_CTR_MC490A:E_MT_110_CTR_MC490B):
                /*END: FR36/310288*/
		/*BEGIN : FR36-308826*/
		DO WITH Z_FA_BSS_PAR2.ZB_TUPLE_PTR->
		         ZM_R_BSS_PAR2;
		IF (D_EN_AUOIP = TRUE)  
		THEN
		        B_MC490A_TO_MC701J(ZQ_I):=
			Q_S0840_CHECK_DPVAL_INVALID
                                 (B_MC490A_TO_MC701J(ZQ_I));
		ELSE
			B_MC490A_TO_MC701J(ZQ_I).B_HIGH := 0;
			B_MC490A_TO_MC701J(ZQ_I).B_LOW := 0;
		FI;
		OD;
/* END CRI#01591912.01 THE DEFAULT VALUE OF BLK 1122 CC CTRS */
		/*END : FR36-308826*/
		/*BEGIN : FR36/307401*/
		/*(E_MT_110_CTR_MC490A:E_MT_110_CTR_MC490B):
		DO WITH Z_FA_BSS_PAR2.ZB_TUPLE_PTR->
		         ZM_R_BSS_PAR2;
		IF (D_EN_AUOIP = TRUE)  
		THEN
		       B_MC490A_TO_MC701J(ZQ_I):=
			Q_S0840_CHECK_DPVAL
                                 (B_MC490A_TO_MC701J(ZQ_I));
		ELSE
			B_MC490A_TO_MC701J(ZQ_I).B_HIGH := 0;
			B_MC490A_TO_MC701J(ZQ_I).B_LOW := 0;
		FI;
		OD;*/
		/*END : FR36/307401*/
		/*END:AUPOIP*/ 
      ELSE
      ESAC;
   OD;
OD;
END Q_S0785_CHECK_TYPE_110_3_OVERFLO;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0790_MAKE_RES_FILE_110_4                         */
/*                                                                    */
/*     PROGRAMMER: A.H.SWANN                                          */
/*                                                                    */
/*                LAST MODIFIED BY:NAIKA               DATE:          */
/*                                                                    */
/*     CREATION DATE: 96/11/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */ 
/*       CREATE THE THIRD TYPE 110 RESULT FILE BLOCK                  */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0110_GET_USER_BUF                          */
/*                      Q_S0120_GET_WRITE_BUF                         */
/*                      Q_S0270_BEQ_SEQ_FROM_CELL_IDX                 */
/*                      Q_S0860_INCREM_PTR                            */
/*                      Q_S0260_GET_TRXS_OF_A_CELL                    */
/*                      Q_S0160_READ_HIST_FILE                        */
/*                      Q_S0850_CHECK_3_INT_CNTR                      */
/*                      Q_S0820_RECORD_FULL                           */
/*                      Q_S0830_CHECK_LAST_WRITE                      */
/*     CALLED FROM:                                                   */
/*                      Q_S0370_STATE_MACHINE                         */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
/*EXISTING BLOCK 3 FOR TYPE 110 MOVED TO BLOCK 4 IN B8 */
Q_S0790_MAKE_RES_FILE_110_4 : PROC ();

DCL ZQ_CELL_ID          ZM_PM_BEQ_AND_SECTOR;
DCL ZQ_CELL_TRXS        M_BYTE;
DCL ZQ_CELLS            INT;
DCL ZQ_FILL_PTR         PTR;
DCL ZQ_GLOB             BOOL;
DCL ZQ_IND_OBJ          INT;
DCL ZQ_IND_REC          INT;
DCL ZQ_RES_RRN          INT;
DCL ZQ_TRX_IDX          M_TRX_IDX;
DCL ZQ_RECORD_FULL      BOOL;

Z_TRACE := H'0790;

/* NOTE THAT THE GENERIC HEADER IS ALWAYS IN THE FIRST RECORD */
/* HENCE THE FIRST ITEM STARTS AT THE SECOND RECORD.          */
ZQ_IND_REC         := 1;
ZQ_IND_OBJ         := 1;
ZQ_RES_RRN         := Z_RES_RRN;
ZQ_RECORD_FULL     := FALSE;

DO WITH Z_HISTORY_FILE;
  ZB_TABLE_SIZE := SIZE(CM_HIS_TYPE_110_4);
  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                       ZB_TABLE_SIZE);
OD; /* WITH Z_HISTORY_TABLE */

DO WITH Z_RESULT_FILE;
  ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
  Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
               -> ZM_RES_TYPE_110_4_ARR(ZQ_IND_REC).ZB_DATA;

DO FOR ZQ_CELLS := 1 TO CM_FY32_MAX_CELLS_PER_BSC;
   ZQ_GLOB      := FALSE;
   IF Z_ACTIVE_CELLS(ZQ_CELLS) AND
      Q_S0270_BEQ_SEQ_FROM_CELL_IDX(ZQ_CELLS,ZQ_CELL_ID)
      THEN
      Q_S0260_GET_TRXS_OF_A_CELL( ZQ_CELLS, E_NORMAL_ANALYSIS);

      DO FOR ZQ_CELL_TRXS := 1 TO CM_FY32_MAX_TRX_PER_CELL;
         ZQ_TRX_IDX := Z_TRXS_OF_A_CELL.ZB_TRXS(ZQ_CELL_TRXS);
         IF ZQ_TRX_IDX /= M_NULL_TRX_IDX THEN

            IF ZQ_RECORD_FULL THEN
               ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                              -> ZM_RES_TYPE_110_4_ARR 
                                 (ZQ_IND_REC).ZB_DATA;

               ZQ_RECORD_FULL := FALSE;
            FI;
            Q_S0160_READ_HIST_FILE (->Z_HISTORY_FILE,
                                    1,
                                    ZQ_TRX_IDX-1,
                                    SIZE(CM_HIS_TYPE_110_4));

            DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR
                          -> CM_HIS_TYPE_110_4;
               /* FIRST GLOBAL RECORD ? */
               IF NOT  ZQ_GLOB
                  THEN
                  ZQ_GLOB := TRUE;
                  DO WITH ZQ_FILL_PTR -> ZM_TYPE_110_4_GLOB;
                     ZB_TAG      := ZS_TYPE_110_4_GLOB_TAG;
                     ZB_LEN      := ZS_TYPE_110_4_GLOB_LEN;
                     ZB_BEQS_ID  := ZQ_CELL_ID;
                  OD;
                  ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                                 SIZE(ZM_TYPE_110_4_GLOB));
               FI;
               DO WITH ZQ_FILL_PTR -> ZM_TYPE_110_4_TRX;
                  ZB_TAG       := ZS_TYPE_110_4_CELL_TAG;
                  ZB_LEN       := ZS_TYPE_110_4_CELL_LEN;
                  ZB_TRX_ID.B_BTS_IDX:= ZQ_CELL_ID.B_BEQ;
                  ZB_TRX_ID.B_SECT_NO:= ZQ_CELL_ID.B_SECTOR;
                  ZB_TRX_ID.B_TRX_NUM:= Z_TRXS_OF_A_CELL.ZB_ID_TRX
                                          (ZQ_CELL_TRXS);
                  Q_S0795_CHECK_TYPE_110_4_OVERFLO 
                      (->B_CTRS_PT4_MT_110);
                  ZB_110_4_CTRS := B_CTRS_PT4_MT_110;
               OD;
            OD; /* DO WITH ZQ_FILL_PTR */

            ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                             SIZE(ZM_TYPE_110_4_TRX));
            IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                   ZQ_IND_REC,
                                   ZQ_RES_RRN,
                                   E_HIST_110_4)
               THEN
               ZQ_RECORD_FULL := TRUE;
            FI;
         FI;
      OD;
   FI;
OD;

/*IF ZQ_RECORD_FULL
  THEN
  ZQ_IND_OBJ := ZS_OBJ_IN_RES_REC
                 (SUCC(Z_RESULT_FILE.ZB_MEAS_TYPE));
  IF ZQ_IND_REC > 1
    THEN
    ZQ_IND_REC := ZQ_IND_REC - 1;
  ELSE
    ZQ_IND_REC := 0;
  FI;
  ELSE
  ZQ_IND_OBJ := ZQ_IND_OBJ - 1;
FI;*/

Q_S0830_CHECK_LAST_WRITE(ZQ_IND_OBJ,
                         ZQ_IND_REC,
                         ZQ_RES_RRN);

IF ZQ_RECORD_FULL
  THEN
    Z_RES_RRN := ZQ_RES_RRN + ZQ_IND_REC - 1;
  ELSE
    Z_RES_RRN := ZQ_RES_RRN + ZQ_IND_REC;
FI;

/*Z_RES_RRN     := ZQ_RES_RRN + ZQ_IND_REC ;*/

END Q_S0790_MAKE_RES_FILE_110_4;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0795_CHECK_TYPE_110_4_OVERFLO                    */
/*                                                                    */
/*     PROGRAMMER: A.H.SWANN                                          */
/*                                                                    */
/*                LAST MODIFIED BY:NAIKA               DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/10/28                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       CHECK FOR OVERFLOW COUNTERS IN TYPE 110 BLOCK 1              */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_HIS_CC REF CM_FY32_HIS_TYPE_110_CTRS_ -    */
/*                      1                                             */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0840_CHECK_DPVAL                           */
/*     CALLED FROM:                                                   */
/*                      Q_S0760_110_MAKE_RES_FILE_110                 */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
/*EXISTING PROCEDURE Q_S0795_CHECK_TYPE_110_3_OVERFLO MOVED IN ORDER 
  TO CHECK FOR 4TH BLOCK OF TYPE 110 FOR OVERFLOW*/
Q_S0795_CHECK_TYPE_110_4_OVERFLO : PROC (ZF_HIS_CC REF
                                         CM_HIS_TYPE_110_4_CC);
/* CR20/225233 */
/*DCL ZQ_I    RANGE(E_MT_110_CTR_MC621:E_MT_110_CTR_MC400);*/
/*CR2517*/
/*START: MC Counters*/
/*DCL ZQ_I    RANGE(E_MT_110_CTR_MC621:E_MT_110_CTR_MC1203);*/
DCL ZQ_I    RANGE(E_MT_110_CTR_MC621:E_MT_110_CTR_MC320J);
/*END: MC Counters*/
/*CR2517*/
/* CR20/225233 */

Z_TRACE := H'0795;

DO WITH ZF_HIS_CC -> ;
   /* CR20/225233 */
   /*DO FOR ZQ_I := E_MT_110_CTR_MC621 TO E_MT_110_CTR_MC400;*/
   /*CR2517*/
   /*START: MC Counters*/
   /*DO FOR ZQ_I := E_MT_110_CTR_MC621 TO E_MT_110_CTR_MC1203;*/
   /*DO FOR ZQ_I := E_MT_110_CTR_MC621 TO E_MT_110_CTR_MC1227;*/
    /*START: CR312407*/
     DO FOR ZQ_I := E_MT_110_CTR_MC621 TO E_MT_110_CTR_MC320J;
    /*STOP : CR312407*/
   /*END: MC Counters*/
   /*CR2517*/
   /* CR20/225233 */
      CASE ZQ_I OF

      (E_MT_110_CTR_MC621:E_MT_110_CTR_MC746B):
      /*BEGIN CRI#1592824:INVALID CC COUNTERS CONCERNING BLOCK 1130*/
         B_MC621_TO_MC746B(ZQ_I) := Q_S0841_CHECK_VAL_INVALID
         					(B_MC621_TO_MC746B(ZQ_I));
      
      /* IF B_MC621_TO_MC746B(ZQ_I) = ZS_DPVAL_OVERFLOW
            THEN
            B_MC621_TO_MC746B(ZQ_I) := ZS_DPVAL_INVALID;*/
            /*AM:CR 682571 Merge miss for FR20/212243 */        
            /* ELSIF B_MC621_TO_MC746B(ZQ_I) = ZS_DPVAL_INVALID
                 THEN
                     B_MC621_TO_MC746B(ZQ_I) := 0;
          FI;  */     
            /*AM:CR 682571 Merge miss for FR20/212243 */ 
       /*END CRI#1592824*/
         
      (E_MT_110_CTR_MC370A:E_MT_110_CTR_MC400):
         B_MC_370A_TO_MC400(ZQ_I) := Q_S0850_CHECK_3_INT_CNTR
                                    (B_MC_370A_TO_MC400(ZQ_I));
       
   /* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
      (E_MT_110_CTR_MC990:E_MT_110_CTR_MC996):
      /*BEGIN CRI#1592824:INVALID CC COUNTERS CONCERNING BLOCK 1130*/

         /*AM:CR 682571 */
        /* IF B_MC990_TO_MC996(ZQ_I).B_HIGH = H'FFFF AND
            B_MC990_TO_MC996(ZQ_I).B_LOW = H'FFFF
            THEN
              B_MC990_TO_MC996(ZQ_I).B_HIGH := 0;
              B_MC990_TO_MC996(ZQ_I).B_LOW := 0;
         FI;*/
        /*AM:CR 682571 */
        B_MC990_TO_MC996(ZQ_I) :=  Q_S0840_CHECK_DPVAL_INVALID
                                   (B_MC990_TO_MC996(ZQ_I));
      /*END CRI#1592824*/                
   /* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
      /* CR20/225233 */
      /*CR2517*/
      /*Commented for TRX TEMPERATURE LOGGING*/ 
      /*(E_MT_110_CTR_MC1200:E_MT_110_CTR_MC1203):
         B_MC990_TO_MC996(ZQ_I).B_HIGH := 0;
         B_MC990_TO_MC996(ZQ_I).B_LOW := 0;*/
      
       /*TRX TEMPERATURE LOGGING*/  
        (E_MT_110_CTR_MC1200):  /*SI COUNTER*/
         IF B_MC1200 = ZS_DPVAL_OVERFLOW  
             THEN
         	B_MC1200 := ZS_DPVAL_INVALID;
         FI;

         /*BEGIN : CR20_291301- Better DPS Counters*/
	
	(E_MT_110_CTR_MC1201):
        /*START: CR20/312407*/
	/*B_MC1201_TO_MC1227(ZQ_I) := 
	Q_S0840_CHECK_DPVAL(B_MC1201_TO_MC1227(ZQ_I));*/
	/*BEGIN CRI#1592824:INVALID CC COUNTERS CONCERNING BLOCK 1130*/
	B_MC1201_TO_MC320J(ZQ_I) := 
	Q_S0840_CHECK_DPVAL_INVALID(B_MC1201_TO_MC320J(ZQ_I));
	/*END CRI#1592824*/   
        /*END: CR20/312407*/
		
	/*END : CR20_291301*/

        /*START: MC Counters*/                  
        /*(E_MT_110_CTR_MC1201:E_MT_110_CTR_MC1203):                         
         B_MC1201_TO_MC1203(ZQ_I).B_HIGH := 0;
         B_MC1201_TO_MC1203(ZQ_I).B_LOW := 0;*/
       	
	/* START : CR20/279889  */ 
	
         /*BEGIN : CR20_291301- Better DPS Counters*/
	/*(E_MT_110_CTR_MC1201:E_MT_110_CTR_MC1203):*/ 
	(E_MT_110_CTR_MC1202:E_MT_110_CTR_MC1203):
	/*END : CR20_291301*/
         /*START: CR20/312407*/
         /*B_MC1201_TO_MC1227(ZQ_I).B_HIGH := 0;
         B_MC1201_TO_MC1227(ZQ_I).B_LOW := 0;*/
         B_MC1201_TO_MC320J(ZQ_I).B_HIGH := 0;
         B_MC1201_TO_MC320J(ZQ_I).B_LOW := 0;
         /*END: CR20/312407*/


        (E_MT_110_CTR_MC1208:E_MT_110_CTR_MC1222):
         /*START: CR20/312407*/
         /*B_MC1201_TO_MC1227(ZQ_I) :=  Q_S0840_CHECK_DPVAL
                                   (B_MC1201_TO_MC1227(ZQ_I));*/
         /*BEGIN CRI#1592824:INVALID CC COUNTERS CONCERNING BLOCK 1130*/
         B_MC1201_TO_MC320J(ZQ_I) :=  Q_S0840_CHECK_DPVAL_INVALID
                                   (B_MC1201_TO_MC320J(ZQ_I));
         /*END CRI#1592824*/                           
         /*END: CR20/312407*/

	/*START :CR312407*/
	/*(E_MT_110_CTR_MC1223:E_MT_110_CTR_MC1227):
         B_MC1201_TO_MC1227(ZQ_I).B_HIGH := 0;
         B_MC1201_TO_MC1227(ZQ_I).B_LOW := 0;*/


	(E_MT_110_CTR_MC320F:E_MT_110_CTR_MC320J):
	 /*BEGIN CRI#1592824:INVALID CC COUNTERS CONCERNING BLOCK 1130*/
	 /*SI COUNTERS*/
         /*IF B_MC1201_TO_MC320J(ZQ_I) = LONG_INT((ZS_DPVAL_OVERFLOW))
            THEN
            B_MC1201_TO_MC320J(ZQ_I) := ZS_DPVAL_INVALID;
         FI;*/
         /*AM: DCTPD00749235 */
        /* IF B_MC1201_TO_MC320J(ZQ_I).B_HIGH = H'FFFF AND
            B_MC1201_TO_MC320J(ZQ_I).B_LOW = H'FFFF
            THEN
              B_MC1201_TO_MC320J(ZQ_I).B_HIGH := 0;
              B_MC1201_TO_MC320J(ZQ_I).B_LOW := 0;
         FI;*/
        /*AM: DCTPD00749235 */
   
	 B_MC1201_TO_MC320J(ZQ_I):=Q_S0840_CHECK_DPVAL_INVALID
				  (B_MC1201_TO_MC320J(ZQ_I));
	 /*END CRI#1592824*/
        /*B_MC1201_TO_MC320J(ZQ_I).B_HIGH:=0;
	 B_MC1201_TO_MC320J(ZQ_I).B_LOW :=0;*/
	/*STOP :CR312407*/


  	/* END : CR20/279889  */ 

	/*END: MC Counters*/
      /*TRX TEMPERATURE LOGGING*/  
      /*CR2517*/   
      /* CR20/225233 */                                    
      ESAC;
   OD;
OD;
END Q_S0795_CHECK_TYPE_110_4_OVERFLO;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0800_MAKE_RES_FILE_110_5                         */
/*                                                                    */
/*     PROGRAMMER: A.H.SWANN                                          */
/*                                                                    */
/*                LAST MODIFIED BY:NAIKA               DATE:02/08/03  */
/*                                                                    */
/*     CREATION DATE: 96/11/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       CREATE THE FIFTH TYPE 110 RESULT FILE BLOCK                  */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59ZX_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0110_GET_USER_BUF                          */
/*                      Q_S0120_GET_WRITE_BUF                         */
/*                      Q_S0270_BEQ_SEQ_FROM_CELL_IDX                 */
/*                      Q_S0860_INCREM_PTR                            */
/*                      Q_S0260_GET_TRXS_OF_A_CELL                    */
/*                      Q_S0160_READ_HIST_FILE                        */
/*                      Q_S0850_CHECK_3_INT_CNTR                      */
/*                      Q_S0820_RECORD_FULL                           */
/*                      Q_S0830_CHECK_LAST_WRITE                      */
/*     CALLED FROM:                                                   */
/*                      Q_S0370_STATE_MACHINE                         */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

/*EXISTING PROCEDURE Q_S0800_MAKE_RES_FILE_110_4 WAS MOVED TO MAKE THE
  5TH RESULT FILE FOR TYPE 110*/
Q_S0800_MAKE_RES_FILE_110_5 : PROC ( );

DCL ZQ_IND_OBJ          INT;
DCL ZQ_RES_RRN          INT;
DCL ZQ_IND_REC          INT;
DCL ZQ_REC              M_BYTE;
DCL ZQ_FILL_PTR         PTR;
DCL ZQ_HIS_REC_IN_BUFF  INT;

Z_TRACE := H'0800;

/* NOTE THAT THE GENERIC HEADER IS ALWAYS IN THE FIRST RECORD */
/* HENCE THE FIRST ITEM STARTS AT THE SECOND RECORD.          */
ZQ_IND_REC         := 1;
ZQ_IND_OBJ         := 1;
ZQ_RES_RRN         := Z_RES_RRN;
ZQ_HIS_REC_IN_BUFF := 16;

DO WITH Z_HISTORY_FILE;
  ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_110_5_BUF);
  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                       ZB_TABLE_SIZE);
OD; /* WITH Z_HISTORY_TABLE */

DO WITH Z_RESULT_FILE;
  ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
  Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

Q_S0160_READ_HIST_FILE (->Z_HISTORY_FILE,
                          ZQ_HIS_REC_IN_BUFF,
                          0,
                          SIZE(CM_FY32_HIS_TYPE_110_5));

ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
               -> ZM_RES_TYPE_110_5_ARR(ZQ_IND_REC).ZB_DATA;

IF Z_CPL_CODES=E_NULL_CODE
   THEN
   DO FOR ZQ_REC := 1 TO (ZQ_HIS_REC_IN_BUFF) WHILE
                             Z_CPL_CODES = E_NULL_CODE;
     DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR ->
                      CM_FY32_HIS_TYPE_110_5_BUF(ZQ_REC);

       IF B_LINK_ID /= ZS_NULL_CIC
         THEN
         DO WITH ZQ_FILL_PTR -> ZM_TYPE_110_5_DATA;
           ZB_TAG        := ZS_TYPE_110_5_CIC_TAG;
           ZB_LEN        := ZS_TYPE_110_5_CIC_LEN;
           ZB_CIC        := B_LINK_ID;
/*BEGIN CR#1597271:INVALID CC COUNTERS CONCERNING BLOCK 1135*/
           ZB_110_5_CTRS.B_MN1_1 := Q_S0840_CHECK_DPVAL_INVALID
                                     (B_CTRS_PT5_MT_110.B_MN1_1);
/*
           IF B_CTRS_PT5_MT_110.B_MN2_1 = ZS_DPVAL_OVERFLOW
             THEN
             ZB_110_5_CTRS.B_MN2_1 := ZS_DPVAL_INVALID;
           ELSE
             ZB_110_5_CTRS.B_MN2_1 := B_CTRS_PT5_MT_110.B_MN2_1;
           FI;
*/
           ZB_110_5_CTRS.B_MC350_TO_MC351(E_MT_110_CTR_MC350):=
               Q_S0840_CHECK_DPVAL_INVALID(B_CTRS_PT5_MT_110.
               B_MC350_TO_MC351(E_MT_110_CTR_MC350));

           ZB_110_5_CTRS.B_MC350_TO_MC351(E_MT_110_CTR_MC351):=
               Q_S0840_CHECK_DPVAL_INVALID(B_CTRS_PT5_MT_110.
               B_MC350_TO_MC351(E_MT_110_CTR_MC351));
/*END CR#1597271*/

         OD; /* WITH CELL DATA */

         ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                              SIZE(ZM_TYPE_110_5_DATA));

         IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                ZQ_IND_REC,
                                ZQ_RES_RRN,
                                E_HIST_110_5)
           THEN
           ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                          -> ZM_RES_TYPE_110_5_ARR 
                             (ZQ_IND_REC).ZB_DATA;
         FI;
       FI;
     OD;
   OD; /* DO FOR ZQ_REC */
FI;

Q_S0830_CHECK_LAST_WRITE(ZQ_IND_OBJ,
                         ZQ_IND_REC,
                         ZQ_RES_RRN);

IF ZQ_IND_OBJ = 1
  THEN
  ZQ_RES_RRN := ZQ_RES_RRN - 1;
FI;

Z_RES_RRN     := ZQ_RES_RRN + ZQ_IND_REC ;

END Q_S0800_MAKE_RES_FILE_110_5;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0805_MAKE_RES_FILE_110_6                         */
/*                                                                    */
/*     PROGRAMMER: A.H.SWANN                                          */
/*                                                                    */
/*                LAST MODIFIED BY:NAIKA               DATE:02/08/03  */
/*                                                                    */
/*     CREATION DATE: 01/10/09                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       CREATE THE SIXTH             TYPE 110 RESULT FILE BLOCK      */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0110_GET_USER_BUF                          */
/*                      Q_S0120_GET_WRITE_BUF                         */
/*                      Q_S0270_BEQ_SEQ_FROM_CELL_IDX                 */
/*                      Q_S0860_INCREM_PTR                            */
/*                      Q_S0260_GET_TRXS_OF_A_CELL                    */
/*                      Q_S0160_READ_HIST_FILE                        */
/*                      Q_S0850_CHECK_3_INT_CNTR                      */
/*                      Q_S0820_RECORD_FULL                           */
/*                      Q_S0830_CHECK_LAST_WRITE                      */
/*     CALLED FROM:                                                   */
/*                      Q_S0370_STATE_MACHINE                         */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

/*THIS PROCEDURE IS MOVED FROM Q_S0805_MAKE_RES_FILE_110_5 FOR CREATING
  THE 6TH RESULT FILE FOR TYPE 110 */
Q_S0805_MAKE_RES_FILE_110_6 : PROC ( );

DCL ZQ_RES_RRN          INT;
DCL ZQ_IND_REC          INT;
DCL ZQ_FILL_PTR         PTR;
DCL ZS_AUPOIP_MODE      BOOL;
Z_TRACE := H'0805;

ZQ_IND_REC         := 1;
ZQ_RES_RRN         := Z_RES_RRN;

DO WITH Z_RESULT_FILE;
  ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
  Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

DO WITH Z_HISTORY_FILE;
  ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_110_6_BUF);
  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                       ZB_TABLE_SIZE);
OD; /* WITH Z_HISTORY_TABLE */

Q_S0160_READ_HIST_FILE (->Z_HISTORY_FILE,
                          1,
                          0,
                          SIZE(CM_FY32_HIS_TYPE_110_6));

ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
               -> ZM_RES_TYPE_110_6_REC.ZB_DATA;

IF Z_CPL_CODES=E_NULL_CODE
  THEN
  DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR -> CM_FY32_HIS_TYPE_110_6_BUF;
    DO WITH ZQ_FILL_PTR -> ZM_TYPE_110_6_DATA;
      ZB_TAG                := ZS_TYPE_110_6_BSC_TAG;
      ZB_LEN                := ZS_TYPE_110_6_BSC_LEN;
      /*BEGIN : FR36/307401*/
      ZS_AUPOIP_MODE := BOOL(Q_S4290_GET_AUOIP_MODE());
      IF (ZS_AUPOIP_MODE)
      THEN
      /*BEGIN CR#1593931:INVALID CC COUNTERS CONCERNING BLOCK 1140*/
          ZB_110_6_CTRS.B_MC19  := Q_S0840_CHECK_DPVAL_INVALID 
                                (B_CTRS_PT6_MT_110.B_MC19);
         /*SI COUNTER*/
	  ZB_110_6_CTRS.B_MC35  := Q_S0840_CHECK_DPVAL                     /*felix MC35 averaged by CP numbers*/
                                (Q_S0480_AVRG_FOR_REP_PERIOD
                                (B_CTRS_PT6_MT_110.B_MC35));
         /*SI COUNTER*/                                
	  ZB_110_6_CTRS.B_MC36  := Q_S0840_CHECK_DPVAL 
                                (Q_S0480_AVRG_FOR_REP_PERIOD
                                (B_CTRS_PT6_MT_110.B_MC36));

      ELSE
         ZB_110_6_CTRS.B_MC19.B_HIGH := 0; 
         ZB_110_6_CTRS.B_MC19.B_LOW  := 0;

	 ZB_110_6_CTRS.B_MC35.B_HIGH := 0; 
	 ZB_110_6_CTRS.B_MC35.B_LOW  := 0; 

	 ZB_110_6_CTRS.B_MC36.B_HIGH := 0;
	 ZB_110_6_CTRS.B_MC36.B_LOW  := 0;

      FI; 
            /*END : FR36/307401*/
      /* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
      ZB_110_6_CTRS.B_MC926  := Q_S0840_CHECK_DPVAL_INVALID
                                (B_CTRS_PT6_MT_110.B_MC926);
/* END: ADD-WIPRO-B10-MR1-CHANGE */
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
      ZB_110_6_CTRS.B_MC182  := Q_S0840_CHECK_DPVAL_INVALID 
                                (B_CTRS_PT6_MT_110.B_MC182);
      ZB_110_6_CTRS.B_MC940  := Q_S0840_CHECK_DPVAL_INVALID 
                                (B_CTRS_PT6_MT_110.B_MC940);
      /*BEGIN : CR20_299359- Lb Interface*/
      ZB_110_6_CTRS.B_MC942  := Q_S0840_CHECK_DPVAL_INVALID
				(B_CTRS_PT6_MT_110.B_MC942);
      ZB_110_6_CTRS.B_MC943  := Q_S0840_CHECK_DPVAL_INVALID
				(B_CTRS_PT6_MT_110.B_MC943);
      /*END : CR20_299359*/
    /* START : ER 2679 */
   /* Counter MC941 commented for A-flex */ 
    /*  ZB_110_6_CTRS.B_MC941.B_HIGH := 0; */ 
    /*  ZB_110_6_CTRS.B_MC941.B_LOW  := 0; */ 
      
     /*BEGIN : CR20_299359- Lb Interface*/	
      /*ZB_110_6_CTRS.B_MC942.B_HIGH := 0;
      ZB_110_6_CTRS.B_MC942.B_LOW  := 0;
      ZB_110_6_CTRS.B_MC943.B_HIGH := 0;
      ZB_110_6_CTRS.B_MC943.B_LOW  := 0;*/ 
     /*END : CR20_299359*/
      ZB_110_6_CTRS.B_MC944.B_HIGH := 0;
      ZB_110_6_CTRS.B_MC944.B_LOW  := 0;
      ZB_110_6_CTRS.B_MC945.B_HIGH := 0;
      ZB_110_6_CTRS.B_MC945.B_LOW  := 0;
     
     /* START : Addition for A-flex */ 
      ZB_110_6_CTRS.B_MC941  := Q_S0840_CHECK_DPVAL_INVALID 
                                (B_CTRS_PT6_MT_110.B_MC941);
     /*  END : Addition for A-flex */
     /*END CR#1593931*/
 
   /* ZB_110_6_CTRS.B_MC941  := Q_S0840_CHECK_DPVAL 
                                (B_CTRS_PT6_MT_110.B_MC941);
      ZB_110_6_CTRS.B_MC942  := Q_S0840_CHECK_DPVAL 
                                (B_CTRS_PT6_MT_110.B_MC942);
      ZB_110_6_CTRS.B_MC943  := Q_S0840_CHECK_DPVAL 
                                (B_CTRS_PT6_MT_110.B_MC943);
      ZB_110_6_CTRS.B_MC944  := Q_S0840_CHECK_DPVAL 
                                (B_CTRS_PT6_MT_110.B_MC944);
      ZB_110_6_CTRS.B_MC945  := Q_S0840_CHECK_DPVAL 
                                (B_CTRS_PT6_MT_110.B_MC945);*/
    /* END : ER 2679 */
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
/* CR 20/199132 */
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
      /*ZB_110_6_CTRS.B_MC940.B_HIGH := 0;
      ZB_110_6_CTRS.B_MC940.B_LOW  := 0;
      ZB_110_6_CTRS.B_MC941.B_HIGH := 0;
      ZB_110_6_CTRS.B_MC941.B_LOW  := 0;
      ZB_110_6_CTRS.B_MC942.B_HIGH := 0;
      ZB_110_6_CTRS.B_MC942.B_LOW  := 0;
      ZB_110_6_CTRS.B_MC943.B_HIGH := 0;
      ZB_110_6_CTRS.B_MC943.B_LOW  := 0;
      ZB_110_6_CTRS.B_MC944.B_HIGH := 0;
      ZB_110_6_CTRS.B_MC944.B_LOW  := 0;
      ZB_110_6_CTRS.B_MC945.B_HIGH := 0;
      ZB_110_6_CTRS.B_MC945.B_LOW  := 0;*/
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
/* CR 20/199132 */
/* CR20/225233 */  
      /*ZB_110_6_CTRS.B_MC182.B_HIGH := 0;
      ZB_110_6_CTRS.B_MC182.B_LOW  := 0;*/
 /*CR2517*/
      /*ZB_110_6_CTRS.B_MC981.B_HIGH := 0;
      ZB_110_6_CTRS.B_MC981.B_LOW  := 0;
      ZB_110_6_CTRS.B_MC982.B_HIGH := 0;
      ZB_110_6_CTRS.B_MC982.B_LOW  := 0;
      ZB_110_6_CTRS.B_MC983.B_HIGH := 0;
      ZB_110_6_CTRS.B_MC983.B_LOW  := 0;
      ZB_110_6_CTRS.B_MC984.B_HIGH := 0;
      ZB_110_6_CTRS.B_MC984.B_LOW  := 0;*/
 /*CR2517*/     
 /* CR20/225233 */  
    OD;
  OD;

  Q_S0500_FILL_REC_HEAD(->Z_RESULT_FILE.ZB_TABLE_PTR
                        ->ZM_RES_TYPE_110_6_REC.ZB_HEADER,
                          ZQ_RES_RRN+ZQ_IND_REC,
                          E_GPMR);

  				/*START: CRI00611721*/
  Q_S0200_WRITE_RES_FILE(ZQ_IND_REC, LONG_INT(ZQ_RES_RRN+1));
				/*END: CRI00611721 */
  /* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
  Z_RES_RRN     := ZQ_RES_RRN + ZQ_IND_REC ;
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */  
FI;

END Q_S0805_MAKE_RES_FILE_110_6;
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0805_MAKE_RES_FILE_110_8                         */
/*                                                                    */
/*     PROGRAMMER:                                                    */
/*                                                                    */
/*                LAST MODIFIED BY:                                   */
/*                                                                    */
/*     CREATION DATE:                                                 */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       CREATE THE EIGHT (AND FINAL) TYPE 110 RESULT FILE BLOCK      */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                                                                    */
/*                                                                    */
/*     CALLED FROM:                                                   */
/*                      Q_S0370_STATE_MACHINE                         */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0805_MAKE_RES_FILE_110_8 : PROC ( );
DCL ZQ_START_REC_NO     INT;
DCL ZQ_IND_OBJ          INT;
DCL ZQ_RES_RRN          INT;
DCL ZQ_IND_REC          INT;
DCL ZQ_REC              M_BYTE;
DCL ZQ_FILL_PTR         PTR;
DCL ZQ_HIS_REC_IN_BUFF  INT;
DCL ZQ_BUF              INT;
DCL ZQ_I                CM_TYPE_110_CTRS_9;
DCL ZQ_J                RANGE(E_MT_110_CTR_MC1701:E_MT_110_CTR_MC1716);
DCL ZQ_RECORD_FULL      BOOL;

/*3BKA36FBR239825*/

DCL ZQ_MSC_IDX         M_INT_INTEL;
/*3BKA36FBR239825*/
Z_TRACE := H'0805;

ZQ_IND_REC         := 1;
ZQ_IND_OBJ         := 1;
ZQ_RES_RRN         := Z_RES_RRN;
ZQ_HIS_REC_IN_BUFF := 7;
ZQ_RECORD_FULL := FALSE;

/* START : Addition for A-flex */
DO WITH Z_HISTORY_FILE;
  ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_110_8) 
      * ZQ_HIS_REC_IN_BUFF;
  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                       ZB_TABLE_SIZE);
OD; /* WITH Z_HISTORY_TABLE */
/*Begin DCTPD01288924 */
IF Z_SEVENTEENTH_HIST_FILE.ZB_IS_OPEN
THEN
  DO WITH Z_SEVENTEENTH_HIST_FILE;
    ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_110_17) 
      * ZQ_HIS_REC_IN_BUFF;
    Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                       ZB_TABLE_SIZE);
  OD;
FI;  
/*End DCTPD01288924 */

DO WITH Z_RESULT_FILE;
 ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
 Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
          -> ZM_RES_TYPE_110_8_ARR(ZQ_IND_REC).ZB_DATA;

DO FOR ZQ_BUF := 0 TO (CM_FY32_MAX_MSC_PER_BSC /
                        ZQ_HIS_REC_IN_BUFF )

   WHILE Z_CPL_CODES = E_NULL_CODE;

   ZQ_START_REC_NO:= ZQ_HIS_REC_IN_BUFF * ZQ_BUF;

   IF ZQ_START_REC_NO + ( ZQ_HIS_REC_IN_BUFF - 1 ) >
                          CM_FY32_MAX_MSC_PER_BSC THEN

      /* LAST HISTORY BUFFER TO BE READ FOR THIS MEAS TYPE */
      ZQ_HIS_REC_IN_BUFF := CM_FY32_MAX_MSC_PER_BSC REM
                           ZQ_HIS_REC_IN_BUFF;
      Z_HISTORY_FILE.ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_110_8)
                                       * ZQ_HIS_REC_IN_BUFF;
      /*Begin DCTPD01288924 */
      IF Z_SEVENTEENTH_HIST_FILE.ZB_IS_OPEN
      THEN
        Z_SEVENTEENTH_HIST_FILE.ZB_TABLE_SIZE := 
              SIZE(CM_FY32_HIS_TYPE_110_17)* ZQ_HIS_REC_IN_BUFF;
      FI;                                     
   FI;
   Q_S0160_READ_HIST_FILE (->Z_HISTORY_FILE,
                           ZQ_HIS_REC_IN_BUFF,
                           ZQ_START_REC_NO,
                           SIZE(CM_FY32_HIS_TYPE_110_8));
/*Begin DCTPD01288924 */
   IF Z_SEVENTEENTH_HIST_FILE.ZB_IS_OPEN
   THEN
     Q_S0160_READ_HIST_FILE (->Z_SEVENTEENTH_HIST_FILE,
                           ZQ_HIS_REC_IN_BUFF,
                           ZQ_START_REC_NO,
                           SIZE(CM_FY32_HIS_TYPE_110_17));
   FI;                        
/*End DCTPD01288924 */                           

   DO FOR ZQ_REC := 1 TO ZQ_HIS_REC_IN_BUFF WHILE
                                 Z_CPL_CODES = E_NULL_CODE;
      DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR
                        -> CM_FY32_HIS_TYPE_110_8_BUF(ZQ_REC);
         IF (B_MSC_IDX /= H'FFFF) AND (B_MSC_IDX > 0)
         THEN
            ZQ_MSC_IDX.B_INT := B_MSC_IDX;
            DO WITH ZQ_FILL_PTR -> ZM_TYPE_110_8_DATA;
               ZB_TAG       := ZS_TYPE_110_8_MSC_TAG;
               ZB_LEN       := ZS_TYPE_110_8_MSC_LEN;
               ZB_MSC_ID     := ZQ_MSC_IDX.B_LSB;
               Q_S0785_CHECK_TYPE_110_8_OVERFLO(-> B_CTRS_PT8_MT_110);
               ZB_110_8_CTRS := B_CTRS_PT8_MT_110;
            OD; /* DO WITH ZQ_FILL_PTR */
            ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                               SIZE(ZM_TYPE_110_8_DATA));
            IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                   ZQ_IND_REC,
                                   ZQ_RES_RRN,
                                   E_HIST_NORM)
               THEN
               ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                    -> ZM_RES_TYPE_110_8_ARR(ZQ_IND_REC).ZB_DATA;
               ZQ_RECORD_FULL := TRUE;
            ELSE
               ZQ_RECORD_FULL := FALSE;
            FI;
         FI;
      OD; /* DO WITH Z_HIST */
      IF Z_SEVENTEENTH_HIST_FILE.ZB_IS_OPEN
      THEN
        DO WITH Z_SEVENTEENTH_HIST_FILE.ZB_TABLE_PTR
                        -> CM_FY32_HIS_TYPE_110_17_BUF(ZQ_REC);
         IF (B_MSC_IDX /= H'FFFF) AND (B_MSC_IDX > 0)
         THEN
            ZQ_MSC_IDX.B_INT := B_MSC_IDX;
            DO WITH ZQ_FILL_PTR -> ZM_TYPE_110_17_DATA;
               ZB_TAG       := ZS_TYPE_110_17_MSC_TAG;
               ZB_LEN       := ZS_TYPE_110_17_MSC_LEN;
               ZB_MSC_IDX   := ZQ_MSC_IDX.B_LSB;
               DO FOR ZQ_J := E_MT_110_CTR_MC1701
                       TO E_MT_110_CTR_MC1716; 
				         DO WITH B_CTRS_P17_MT_110;
				           CASE ZQ_J OF
				            (E_MT_110_CTR_MC1701:E_MT_110_CTR_MC1706) :
                      /*BEGIN CR#01610353: INVALID 
                        CC COUNTERS OF BLOCK 1148*/
                      /*B_MC1701_TO_MC1716(ZQ_J) :=
                      Q_S0840_CHECK_DPVAL( B_MC1701_TO_MC1716(ZQ_J));*/
                      B_MC1701_TO_MC1716(ZQ_J) := 
                          Q_S0840_CHECK_DPVAL_INVALID
                              (B_MC1701_TO_MC1716(ZQ_J));
                      /*END CR#01610353*/
                    (ELSE):
                       B_MC1701_TO_MC1716(ZQ_J).B_LOW := 0;
                       B_MC1701_TO_MC1716(ZQ_J).B_HIGH := 0;
                     ESAC;             
                 OD;  
		           OD;
                      /*BEGIN CR#01610353: INVALID
                        CC COUNTERS OF BLOCK 1148*/
                      /*B_CTRS_P17_MT_110.B_MC1700 :=
                            Q_S0840_CHECK_DPVAL
                                (B_CTRS_P17_MT_110.B_MC1700);*/
                        B_CTRS_P17_MT_110.B_MC1700 := 
		            Q_S0840_CHECK_DPVAL_INVALID
                                (B_CTRS_P17_MT_110.B_MC1700);
                      /*END CR#01610353*/
		           ZB_110_17_CTRS := B_CTRS_P17_MT_110;
            
            OD; /* DO WITH ZQ_FILL_PTR */
            ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                               SIZE(ZM_TYPE_110_17_DATA));
            IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                   ZQ_IND_REC,
                                   ZQ_RES_RRN,
                                   E_HIST_NORM)
               THEN
               ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                    -> ZM_RES_TYPE_110_17_ARR(ZQ_IND_REC).ZB_DATA;
               ZQ_RECORD_FULL := TRUE;
            ELSE
               ZQ_RECORD_FULL := FALSE;
            FI;
         FI;
        OD;/* DO WITH Z_SEVENTEENTH_HIST */
      FI;  
   OD; /* DO FOR ZQ_REC */
OD; /* DO FOR ZQ_BUF */

Q_S0830_CHECK_LAST_WRITE(ZQ_IND_OBJ,
                         ZQ_IND_REC,
                         ZQ_RES_RRN);

IF ZQ_RECORD_FULL
/* BEGIN: ADD-WIPRO-FR36229339-CHANGE */   
 OR (ZQ_IND_OBJ = 1 AND ZQ_IND_REC = 1)
/* END: ADD-WIPRO-FR36229339-CHANGE */   
 THEN
    Z_RES_RRN := ZQ_RES_RRN + ZQ_IND_REC - 1;
 ELSE
    Z_RES_RRN := ZQ_RES_RRN + ZQ_IND_REC;
 FI;
/* END : Addition for A-flex */

END Q_S0805_MAKE_RES_FILE_110_8;

/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
/*ADDED FOR GSL COUNTERS MEMO*/
Q_S0785_CHECK_TYPE_110_8_OVERFLO : PROC (ZF_HIS_CC REF
                                  CM_FY32_HIS_TYPE_110_CTRS_8);

DCL ZQ_I    RANGE(E_MT_110_CTR_MC1101:E_MT_110_CTR_MC1207); 


Z_TRACE := H'0780;

DO WITH ZF_HIS_CC -> ;

   DO FOR ZQ_I := E_MT_110_CTR_MC1101 TO E_MT_110_CTR_MC1207;

      CASE ZQ_I OF

      (E_MT_110_CTR_MC1101:E_MT_110_CTR_MC1108):
      
      /*BEGIN CR#01610353: INVALID CC COUNTERS OF BLOCK 1142*/
      /*IF B_MC1101_TO_MC1108(ZQ_I) = ZS_DPVAL_OVERFLOW THEN
           B_MC1101_TO_MC1108(ZQ_I) := ZS_DPVAL_INVALID ;
       FI;*/
           B_MC1101_TO_MC1108(ZQ_I) :=
               Q_S0841_CHECK_VAL_INVALID
                   (B_MC1101_TO_MC1108(ZQ_I));
       
      /* (E_MT_110_CTR_MC1109:E_MT_110_CTR_MC1121): */ 
      /* START : Changes for A-flex */ 

/* START : Changes for CR20/279046 */

	 (E_MT_110_CTR_MC1109:E_MT_110_CTR_MC1207):
      /* END : Changes for A-flex */ 
       /*B_MC1109_TO_MC1207(ZQ_I) := Q_S0840_CHECK_DPVAL
                                 (B_MC1109_TO_MC1207(ZQ_I));*/
         B_MC1109_TO_MC1207(ZQ_I) := Q_S0840_CHECK_DPVAL_INVALID
                                 (B_MC1109_TO_MC1207(ZQ_I));   
      /*END CR#01610353*/
	/* START : Changes for A-flex */
	
     /*  (E_MT_110_CTR_MC1207):   */
   
	/* B_MC1109_TO_MC1207(ZQ_I).B_HIGH := 0;  */
	/* B_MC1109_TO_MC1207(ZQ_I).B_LOW := 0;   */
	


	/* END : Changes for A-flex */  
 /*	(E_MT_110_CTR_MC1204:E_MT_110_CTR_MC1207): */
/* END : Changes for CR20/279046  */      
      /*   B_MC1109_TO_MC1207(ZQ_I).B_HIGH := 0; */  
      /*   B_MC1109_TO_MC1207(ZQ_I).B_LOW := 0;  */

      ESAC;
   OD;
OD;
END Q_S0785_CHECK_TYPE_110_8_OVERFLO;
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0805_MAKE_RES_FILE_110_9                         */
/*                                                                    */
/*     PROGRAMMER: SHAILESH                                           */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 06/06/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*     CALLED FROM:                                                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0805_MAKE_RES_FILE_110_9 : PROC ( );
DCL ZQ_START_REC_NO     INT;
DCL ZQ_IND_OBJ          INT;
DCL ZQ_RES_RRN          INT;
DCL ZQ_IND_REC          INT;
DCL ZQ_REC              M_BYTE;
DCL ZQ_FILL_PTR         PTR;
DCL ZQ_HIS_REC_IN_BUFF  INT;
DCL ZQ_BUF              INT;
DCL ZQ_I                CM_TYPE_110_CTRS_9;
DCL ZQ_GSL_ID           INT;
DCL ZQ_RECORD_FULL      BOOL;


Z_TRACE := H'0751;

ZQ_IND_REC         := 1;
ZQ_IND_OBJ         := 1;
ZQ_RES_RRN         := Z_RES_RRN;
ZQ_HIS_REC_IN_BUFF := 7;
ZQ_RECORD_FULL := FALSE;

DO WITH Z_HISTORY_FILE;
  ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_110_9) 
      * ZQ_HIS_REC_IN_BUFF;
  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                       ZB_TABLE_SIZE);
OD; /* WITH Z_HISTORY_TABLE */

DO WITH Z_RESULT_FILE;
 ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
 Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
          -> ZM_RES_TYPE_110_9_ARR(ZQ_IND_REC).ZB_DATA;

DO FOR ZQ_BUF := 0 TO (CM_FY32_MAX_GSL_PER_BSC /
                        ZQ_HIS_REC_IN_BUFF )

   WHILE Z_CPL_CODES = E_NULL_CODE;

   ZQ_START_REC_NO:= ZQ_HIS_REC_IN_BUFF * ZQ_BUF;

   IF ZQ_START_REC_NO + ( ZQ_HIS_REC_IN_BUFF - 1 ) >
                          CM_FY32_MAX_GSL_PER_BSC THEN

      /* LAST HISTORY BUFFER TO BE READ FOR THIS MEAS TYPE */
      ZQ_HIS_REC_IN_BUFF := CM_FY32_MAX_GSL_PER_BSC REM
                           ZQ_HIS_REC_IN_BUFF;
      Z_HISTORY_FILE.ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_110_9)
                                       * ZQ_HIS_REC_IN_BUFF;
   FI;
   Q_S0160_READ_HIST_FILE (->Z_HISTORY_FILE,
                           ZQ_HIS_REC_IN_BUFF,
                           ZQ_START_REC_NO,
                           SIZE(CM_FY32_HIS_TYPE_110_9));

   DO FOR ZQ_REC := 1 TO ZQ_HIS_REC_IN_BUFF WHILE
                                 Z_CPL_CODES = E_NULL_CODE;
      DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR
                        -> CM_FY32_HIS_TYPE_110_9_BUF(ZQ_REC);
         IF B_GSL_NBR /= H'FFFF
         THEN
            DO WITH ZQ_FILL_PTR -> ZM_TYPE_110_9_DATA;
               ZB_TAG       := ZS_TYPE_110_9_GSL_TAG;
               ZB_LEN       := ZS_TYPE_110_9_GSL_LEN;
               ZB_GSL_NBR    := B_GSL_NBR;
               DO FOR ZQ_I := E_MT_110_CTR_MC1060 
                                     TO E_MT_110_CTR_MC1067;
                DO WITH B_CTRS_PT9_MT_110;
                /*BEGIN CR#01624163:INVALID CC COUNTERS
		   CONCERNING BLOCK 1145*/                
                 /*B_MC1060_TO_MC1067(ZQ_I) := 
                   Q_S0840_CHECK_DPVAL(B_MC1060_TO_MC1067(ZQ_I));*/
                 B_MC1060_TO_MC1067(ZQ_I) := 
                     Q_S0840_CHECK_DPVAL_INVALID
                         (B_MC1060_TO_MC1067(ZQ_I));
                /*END CR#01624163*/                   					
                OD;
               OD;
               ZB_110_9_CTRS :=  B_CTRS_PT9_MT_110;
            OD; /* DO WITH ZQ_FILL_PTR */
            ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                               SIZE(ZM_TYPE_110_9_DATA));
            IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                   ZQ_IND_REC,
                                   ZQ_RES_RRN,
                                   E_HIST_110_9)
               THEN
               ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                    -> ZM_RES_TYPE_110_9_ARR(ZQ_IND_REC).ZB_DATA;
               ZQ_RECORD_FULL := TRUE;
            ELSE
               ZQ_RECORD_FULL := FALSE;
            FI;
         FI;
      OD; /* DO WITH Z_HIST */
   OD; /* DO FOR ZQ_REC */
OD; /* DO FOR ZQ_BUF */

Q_S0830_CHECK_LAST_WRITE(ZQ_IND_OBJ,
                         ZQ_IND_REC,
                         ZQ_RES_RRN);

IF ZQ_RECORD_FULL
/* BEGIN: ADD-WIPRO-FR36229339-CHANGE */   
 OR (ZQ_IND_OBJ = 1 AND ZQ_IND_REC = 1)
/* END: ADD-WIPRO-FR36229339-CHANGE */   
 THEN
    Z_RES_RRN := ZQ_RES_RRN + ZQ_IND_REC - 1;
 ELSE
    Z_RES_RRN := ZQ_RES_RRN + ZQ_IND_REC;
 FI;
END Q_S0805_MAKE_RES_FILE_110_9;

/* START : Addition for A-flex */

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0805_MAKE_RES_FILE_110_10                        */
/*                                                                    */
/*     PROGRAMMER: SHAILESH                                           */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 06/06/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*     CALLED FROM:                                                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0805_MAKE_RES_FILE_110_10 : PROC ( );
DCL ZQ_MSC             M_INDEX;
DCL ZQ_FILL_PTR         PTR;
DCL ZQ_GLOB             BOOL;
DCL ZQ_IND_OBJ          INT;
DCL ZQ_IND_REC          INT;
DCL ZQ_RES_RRN          INT;
DCL ZQ_RECORD_FULL      BOOL;
DCL ZQ_NRI_LOOP         INT;
DCL ZQ_I                CM_TYPE_110_CTRS_10;
DCL ZQ_MSC_SBL          ZM_INT_INTEL;

Z_TRACE := H'0805;

/* NOTE THAT THE GENERIC HEADER IS ALWAYS IN THE FIRST RECORD */
/* HENCE THE FIRST ITEM STARTS AT THE SECOND RECORD.          */
ZQ_IND_REC         := 1;
ZQ_IND_OBJ         := 1;
ZQ_RES_RRN         := Z_RES_RRN;
ZQ_RECORD_FULL     := FALSE;

DO WITH Z_HISTORY_FILE;
  ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_110_10);
  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                       ZB_TABLE_SIZE);
OD; /* WITH Z_HISTORY_TABLE */

DO WITH Z_RESULT_FILE;
  ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
  Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
               -> ZM_RES_TYPE_110_10_ARR(ZQ_IND_REC).ZB_DATA;

DO FOR ZQ_MSC := 1 TO 16;
   ZQ_GLOB      := FALSE;
   IF Q_S806_CHECK_ACTIVE_MSC(ZQ_MSC,ZQ_MSC_SBL)
      THEN
       DO FOR ZQ_NRI_LOOP := 1 TO CM_FY32_MAX_SUPPORTED_NRI;
	/*START : FR 311873*/
         /*IF ZQ_RECORD_FULL THEN
               ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                              -> ZM_RES_TYPE_110_10_ARR 
                                 (ZQ_IND_REC).ZB_DATA;

               ZQ_RECORD_FULL := FALSE;
         FI;*/
	/*END : FR 311873*/
         Q_S0160_READ_HIST_FILE (->Z_HISTORY_FILE,
                                    1,
                                    ZQ_NRI_LOOP-1,
                                    SIZE(CM_FY32_HIS_TYPE_110_10));

         DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR
                          -> CM_FY32_HIS_TYPE_110_10;
               /* FIRST GLOBAL RECORD ? */
             IF(B_MSC_SBL = ZQ_MSC_SBL.B_INT) AND 
                                           (B_NRI_NBR /= H'FFFF)
                 THEN 
                IF NOT ZQ_GLOB THEN 
                  ZQ_GLOB := TRUE;
                  DO WITH ZQ_FILL_PTR -> ZM_TYPE_110_10_DATA_GLOB;
                     ZB_TAG      := ZS_TYPE_110_10_GLOB_TAG;
                     ZB_LEN      := ZS_TYPE_110_10_GLOB_LEN;
                     ZB_MSC_NBR  :=    ZQ_MSC_SBL.B_LSB;
                  OD;
                  ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                                 SIZE(ZM_TYPE_110_10_DATA_GLOB));
               FI;
               DO WITH ZQ_FILL_PTR -> ZM_TYPE_110_10_DATA;
                  ZB_TAG       := ZS_TYPE_110_10_NRI_TAG;
                  ZB_LEN       := ZS_TYPE_110_10_NRI_LEN;
                  ZB_NRI_NBR   := B_NRI_NBR;
                  DO FOR ZQ_I := E_MT_110_CTR_MC980 
                                     TO E_MT_110_CTR_MC985E;
                   DO WITH B_CTRS_PT10_MT_110;
                       /*BEGIN CR#01619328:INVALID CC COUNTERS 
                       CONCERNING BLOCK 1144*/
                       /*B_MC980_TO_MC985E(ZQ_I) := 
                       Q_S0840_CHECK_DPVAL(B_MC980_TO_MC985E(ZQ_I));*/
                       B_MC980_TO_MC985E(ZQ_I) := 
                           Q_S0840_CHECK_DPVAL_INVALID
                               (B_MC980_TO_MC985E(ZQ_I));
                       /*END CR#01619328*/ 
                       /*BEGIN CR#01644696:REMOVE UNNECESSARY CODE*/
                       /*Q_S0840_CHECK_DPVAL(B_MC980_TO_MC985E(ZQ_I));*/
                       /*END CR#01644696*/
                   OD;
                  OD;                  
                  ZB_110_10_CTRS := B_CTRS_PT10_MT_110;
               OD;
               ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                             SIZE(ZM_TYPE_110_10_DATA));
               IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                   ZQ_IND_REC,
                                   ZQ_RES_RRN,
                                   E_HIST_110_10)
               THEN
		/*START : FR 311873*/
		ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                              -> ZM_RES_TYPE_110_10_ARR 
                                 (ZQ_IND_REC).ZB_DATA;
		/*END : FR 311873*/
                ZQ_RECORD_FULL := TRUE;
		/*START : FR 311873*/
              ELSE
		ZQ_RECORD_FULL := FALSE;
		/*END : FR 311873*/
               FI;
              FI; 
            OD; /* DO WITH ZQ_FILL_PTR */

            /*ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                             SIZE(ZM_TYPE_110_10_DATA));
            IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                   ZQ_IND_REC,
                                   ZQ_RES_RRN,
                                   E_HIST_110_10)
               THEN
               ZQ_RECORD_FULL := TRUE;
            FI;*/
        OD;
   FI;
OD;

Q_S0830_CHECK_LAST_WRITE(ZQ_IND_OBJ,
                         ZQ_IND_REC,
                         ZQ_RES_RRN);

IF ZQ_RECORD_FULL
 OR (ZQ_IND_OBJ = 1 AND ZQ_IND_REC = 1)
  THEN
    Z_RES_RRN := ZQ_RES_RRN + ZQ_IND_REC - 1;
  ELSE
    Z_RES_RRN := ZQ_RES_RRN + ZQ_IND_REC;
FI;

END Q_S0805_MAKE_RES_FILE_110_10;

/*BEGIN: CR36/302024 - RFI4448*/

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0805_MAKE_RES_FILE_110_11                        */
/*                                                                    */
/*     PROGRAMMER: RAJASHRI                                           */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 10/10/28                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*     CALLED FROM:                                                   */
/*			Q_S0370_STATE_MACHINE                         */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
/*COMPLETE PROCEDURE COMMENTED FOR CR20/301337-RFI4448 FILE FORMAT*/
/*Q_S0805_MAKE_RES_FILE_110_11 : PROC ( );

DCL ZQ_START_REC_NO     INT;
DCL ZQ_IND_OBJ          INT;
DCL ZQ_RES_RRN          INT;
DCL ZQ_IND_REC          INT;
DCL ZQ_HIS_BUFFER_RECS  INT;
DCL ZQ_BUF              M_BYTE;
DCL ZQ_REC              M_BYTE;
DCL ZQ_FILL_PTR         PTR;
DCL ZQ_CELL_ID          ZM_PM_BEQ_AND_SECTOR;
DCL ZQ_I                INT;
DCL ZQ_J                CM_TYPE_110_CTRS_11;
DCL ZQ_CELL_IDX         M_CELL_IDX;

Z_TRACE := H'0760; */

/* NOTE THAT THE GENERIC HEADER IS ALWAYS IN THE FIRST RECORD */
/* HENCE THE FIRST ITEM STARTS AT THE SECOND RECORD.          */

/*ZQ_IND_REC         := 1;
ZQ_IND_OBJ         := 1;
ZQ_RES_RRN         := -1;
ZQ_HIS_BUFFER_RECS := 8;

DO FOR ZQ_I := 1 TO ZS_MAX_CELLS;
   Z_ACTIVE_CELLS(ZQ_I) := FALSE;
OD;

DO WITH Z_HISTORY_FILE;
  ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_110_11)
                        * ZQ_HIS_BUFFER_RECS;



  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                       ZB_TABLE_SIZE);
OD;*/ /* WITH Z_HISTORY_TABLE */
/*
DO WITH Z_RESULT_FILE;
  ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
  Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;
*/
/* ZQ_FILL_PTR:= -> Z_RESULT_FILE.ZB_TABLE_PTR
           -> ZM_RES_TYPE_110_11_ARR(ZQ_IND_REC).ZB_DATA; */
/*
DO FOR ZQ_BUF := 0 TO (CM_FY32_MAX_CELLS_PER_BSC /
                      ZQ_HIS_BUFFER_RECS)
   WHILE Z_CPL_CODES = E_NULL_CODE;
   
   ZQ_START_REC_NO := ZQ_HIS_BUFFER_RECS * ZQ_BUF;

   IF ZQ_START_REC_NO + ( ZQ_HIS_BUFFER_RECS - 1 ) >
                          CM_FY32_MAX_CELLS_PER_BSC THEN
*/
      /* LAST HISTORY BUFFER TO BE READ FOR THIS MEAS TYPE */
  /* ZQ_HIS_BUFFER_RECS := CM_FY32_MAX_CELLS_PER_BSC REM
                           ZQ_HIS_BUFFER_RECS;
   Z_HISTORY_FILE.ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_110_11)
                                       * ZQ_HIS_BUFFER_RECS;
   FI;


   Q_S0160_READ_HIST_FILE (->Z_HISTORY_FILE,
                             ZQ_HIS_BUFFER_RECS,
                             ZQ_START_REC_NO,
                             SIZE(CM_FY32_HIS_TYPE_110_11));

   DO FOR ZQ_REC := 1 TO ZQ_HIS_BUFFER_RECS WHILE
                                 Z_CPL_CODES = E_NULL_CODE;
      DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR
                  -> CM_FY32_HIS_TYPE_110_11_BUF(ZQ_REC);
         ZQ_CELL_IDX := B_CELL_ID;
         IF Q_S0270_BEQ_SEQ_FROM_CELL_IDX(B_CELL_ID,ZQ_CELL_ID)
            THEN
            Z_ACTIVE_CELLS(ZQ_CELL_IDX) := TRUE;
 
 ZQ_FILL_PTR:= -> Z_RESULT_FILE.ZB_TABLE_PTR
               -> ZM_RES_TYPE_110_11_ARR(ZQ_IND_REC).ZB_DATA;

            DO WITH ZQ_FILL_PTR -> ZM_TYPE_110_11_DATA;
               ZB_TAG       := ZS_TYPE_110_11_CELL_TAG;
               ZB_LEN       := ZS_TYPE_110_11_CELL_LEN;
               ZB_BEQS_ID    := ZQ_CELL_ID; 
               DO FOR ZQ_J := E_MT_110_CTR_MC718A 
                                     TO E_MT_110_CTR_MC719L;
                 DO WITH  B_CTRS_PT11_MT_110;
                    B_MC718A_TO_B_MC719L (ZQ_J) := 
                      Q_S0840_CHECK_DPVAL(B_MC718A_TO_B_MC719L(ZQ_J));
                 OD;
               OD;
               ZB_110_11_CTRS := B_CTRS_PT11_MT_110;
            OD;*/ /* DO WITH ZQ_FILL_PTR */

  /*          ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                               SIZE(ZM_TYPE_110_11_DATA)); */

    /*        IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                   ZQ_IND_REC,
                                   ZQ_RES_RRN,
                                   E_HIST_NORM)
               THEN
               ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                              -> ZM_RES_TYPE_110_11_ARR(ZQ_IND_REC).
                                 ZB_DATA;
            FI;
         ELSE
         ZQ_CELL_IDX := -1;
         FI;
      OD;*/
/*OD; *//* DO FOR ZQ_REC */
/*OD;*/ /* DO FOR ZQ_BUF */

/*Q_S0830_CHECK_LAST_WRITE(ZQ_IND_OBJ,
                         ZQ_IND_REC,
                         ZQ_RES_RRN);
Z_RES_RRN     := ZQ_RES_RRN + ZQ_IND_REC - 1;

END Q_S0805_MAKE_RES_FILE_110_11; */
/*END: CR36/302024 RFI 4448*/
/******************************************************/
/*BEGIN:AUPOIP*/
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0805_MAKE_RES_FILE_110_12                        */
/*                                                                    */
/*     PROGRAMMER: PURNA					      */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 10/12/17                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*     CALLED FROM:                                                   */
/*			Q_S0370_STATE_MACHINE                         */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0805_MAKE_RES_FILE_110_12 : PROC ( );

DCL ZQ_START_REC_NO     INT;
DCL ZQ_IND_OBJ          INT;
DCL ZQ_RES_RRN          INT;
DCL ZQ_IND_REC          INT;
DCL ZQ_HIS_BUFFER_RECS  INT;
DCL ZQ_BUF              M_BYTE;
DCL ZQ_REC              M_BYTE;
DCL ZQ_FILL_PTR         PTR;
DCL ZQ_CELL_ID          LONG_INT;
DCL ZQ_I                INT;
/* BEGIN CR 725623 Change */
/*DCL ZQ_J                RANGE(E_MT_110_CTR_AIP10A:
				         E_MT_110_CTR_AIP54);*/
/* BEGIN CR:DCTPD00979074 */
/* BEGIN CR:1053653 */
DCL ZQ_J                RANGE(E_MT_110_CTR_AIP10A:
				         E_MT_110_CTR_AIP20E);
/*DCL ZQ_J                RANGE(E_MT_110_CTR_AIP10A:
				         E_MT_110_CTR_AIP20D);*/
/* END CR:1053653 */
/* END CR:DCTPD00979074 */

/* END CR 725623 Change */
DCL ZQ_CELL_IDX         M_CELL_IDX;
DCL ZQ_MGW_IP		LONG_INT;
DCL ZQ_RECORD_FULL      BOOL;
DCL ZQ_MGW              INT;
/*DCL ZQ_MGW_IP		INT;*/
DCL ZS_AUPOIP_MODE      BOOL;
Z_TRACE := H'0760;

/* NOTE THAT THE GENERIC HEADER IS ALWAYS IN THE FIRST RECORD */
/* HENCE THE FIRST ITEM STARTS AT THE SECOND RECORD.          */
ZQ_IND_REC         := 1;
ZQ_IND_OBJ         := 1;
/*START: FR36/307078*/
ZQ_RES_RRN         := Z_RES_RRN;
/*END: FR36/307078*/
ZQ_HIS_BUFFER_RECS := 3;
ZQ_RECORD_FULL     := FALSE;

DO WITH Z_HISTORY_FILE;
  ZB_TABLE_SIZE := SIZE(CM_FY32_HIS_TYPE_110_12);

  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                       ZB_TABLE_SIZE);
OD; /* WITH Z_HISTORY_TABLE */

DO WITH Z_RESULT_FILE;
  ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
  Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

ZQ_FILL_PTR:= -> Z_RESULT_FILE.ZB_TABLE_PTR
           -> ZM_RES_TYPE_110_12_ARR(ZQ_IND_REC).ZB_DATA; 

/*START: FR36/307078*/
/* START : 256 MGW IP Addresses ./
DO FOR ZQ_MGW := 1 TO 8;
/. CHG : 256 MGW IP Addresses */
DO FOR ZQ_MGW := 1 TO M_MAX_MGW;
/* END : 256 MGW IP Addresses */

   Q_S0160_READ_HIST_FILE (->Z_HISTORY_FILE,
                             1,
                             ZQ_MGW-1,
                             SIZE(CM_FY32_HIS_TYPE_110_12));

      DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR
                  -> CM_FY32_HIS_TYPE_110_12;
        
        ZQ_MGW_IP := B_MGW_IP; 

        /* START: FR36/309170 */
        IF (ZQ_MGW_IP /= -1L) AND (ZQ_MGW_IP /= 0L)
        /* END: FR36/309170 */
           THEN

        	DO WITH ZQ_FILL_PTR -> ZM_TYPE_110_12_DATA;
              	 ZB_TAG       := ZS_TYPE_110_12_CELL_TAG;
               	 ZB_LEN       := ZS_TYPE_110_12_CELL_LEN;
                 ZB_MGW_IP    := ZQ_MGW_IP; 
				
                 /* BEGIN CR 725623 Change */ 
	         /*DO FOR ZQ_J := E_MT_110_CTR_AIP10A 
                               TO E_MT_110_CTR_AIP54;*/
       /* BEGIN CR:DCTPD00979074 */
       /* BEGIN CR:1053653 */
	         DO FOR ZQ_J := E_MT_110_CTR_AIP10A 
                               TO E_MT_110_CTR_AIP20E; 

                 /* DO FOR ZQ_J := E_MT_110_CTR_AIP10A 
                               TO E_MT_110_CTR_AIP20D;*/
	/* END CR:1053653 */
        /* END CR:DCTPD00979074 */
                   /* END CR 725623 Change */ 
				
                  DO WITH B_CTRS_PT12_MT_110;
                /*BEGIN:FR36/312344*/ 
		 /* ZS_AUPOIP_MODE := BOOL (Q_S4290_GET_AUOIP_MODE());
		  IF (NOT ZS_AUPOIP_MODE)
		  */
 		  DO WITH Z_FA_BSS_PAR2.ZB_TUPLE_PTR->
                  ZM_R_BSS_PAR2;  
		  IF D_EN_AUOIP = TRUE
                 /*END:FR36/312344*/
		  THEN
        
                   /* BEGIN CR 725623 Change */ 
	            /*B_AIP10A_TO_AIP54(ZQ_J) := 
                      Q_S0840_CHECK_DPVAL(B_AIP10A_TO_AIP54(ZQ_J));*/
               /* BEGIN CR:DCTPD00979074 */
	       /* BEGIN CR:1053653 */
/*DEBUG AIP10E */
TRACEINFO :='AIP COUNTER (%d)                ';
      TRC_BSC_PM1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_PM_CCRH),
              TRACEID(ERIR),
              TRACEINFO,
              LONG_INT((B_AIP10A_TO_AIP20E(ZQ_J))),
              LONG_INT(0),
              LONG_INT(0));

/*DEBUG AIP10E*/
	            B_AIP10A_TO_AIP20E(ZQ_J) := 
                      Q_S0840_CHECK_DPVAL(B_AIP10A_TO_AIP20E(ZQ_J)); 

	           /* B_AIP10A_TO_AIP20D(ZQ_J) := 
                      Q_S0840_CHECK_DPVAL(B_AIP10A_TO_AIP20D(ZQ_J)); */
	      /* BEGIN CR:1053653 */
              /* END CR:DCTPD00979074 */

                   /* END CR 725623 Change */ 
					  
                   /* BEGIN CR 725623 Change */ 
		  /* CASE (ZQ_J) OF 
		    /.* (E_MT_110_CTR_AIP51:E_MT_110_CTR_AIP54):
                     B_AIP10A_TO_AIP54(ZQ_J).B_HIGH:=0;
			B_AIP10A_TO_AIP54(ZQ_J).B_LOW:=0;*/
                    /*(E_MT_110_CTR_AIP51):
                       B_AIP10A_TO_AIP20E(ZQ_J).B_HIGH:=0;
                       B_AIP10A_TO_AIP20E(ZQ_J).B_LOW:=0;
                    (E_MT_110_CTR_AIP53): 
                       B_AIP10A_TO_AIP20E(ZQ_J).B_HIGH:=0;
                       B_AIP10A_TO_AIP20E(ZQ_J).B_LOW:=0;
                   /.* END CR 725623 Change */ 
		  /* ELSE

		   ESAC; */
		   ELSE
                   /* BEGIN CR 725623 Change */ 
			/*B_AIP10A_TO_AIP54(ZQ_J).B_HIGH := 0;
			B_AIP10A_TO_AIP54(ZQ_J).B_LOW := 0;*/
                  /* BEGIN CR:DCTPD00979074 */
		  /* BEGIN CR:1053653 */
			B_AIP10A_TO_AIP20E(ZQ_J).B_HIGH := 0;
			B_AIP10A_TO_AIP20E(ZQ_J).B_LOW := 0; 

	              /*B_AIP10A_TO_AIP20D(ZQ_J).B_HIGH := 0;
			B_AIP10A_TO_AIP20D(ZQ_J).B_LOW := 0;*/
		 /* END CR:1053653 */

                 /* END CR:DCTPD00979074 */
                   /* END CR 725623 Change */ 
		   FI;
	         OD;  
		OD;
               OD;
               ZB_110_12_CTRS := B_CTRS_PT12_MT_110;
          OD; /* DO WITH ZQ_FILL_PTR */

       ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                             SIZE(ZM_TYPE_110_12_DATA)); 

       IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                              ZQ_IND_REC,
                              ZQ_RES_RRN,
		              E_HIST_110_12)
          THEN
           ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                          -> ZM_RES_TYPE_110_12_ARR(ZQ_IND_REC).
                            ZB_DATA;
	   ZQ_RECORD_FULL := TRUE;
       ELSE
           ZQ_RECORD_FULL := FALSE;
       FI;
      FI;
    OD; /* DO FOR ZQ_REC */
OD; /* DO FOR ZQ_BUF */
/*END: FR36/307078*/

Q_S0830_CHECK_LAST_WRITE(ZQ_IND_OBJ,
                         ZQ_IND_REC,
                         ZQ_RES_RRN);

IF ZQ_RECORD_FULL
/* BEGIN: ADD-WIPRO-FR36229339-CHANGE */   
 OR (ZQ_IND_OBJ = 1 AND ZQ_IND_REC = 1)
/* END: ADD-WIPRO-FR36229339-CHANGE */   
 THEN
    Z_RES_RRN := ZQ_RES_RRN + ZQ_IND_REC - 1;
 ELSE
    Z_RES_RRN := ZQ_RES_RRN + ZQ_IND_REC;
 FI;
END Q_S0805_MAKE_RES_FILE_110_12;

/*END:AUPOIP*/

/**************************************************************/

Q_S806_CHECK_ACTIVE_MSC: PROC(ZF_MSC_IDX M_INDEX,
                                    ZF_MSC_SBL
                                     ZM_INT_INTEL LOC)
                                    RETURNS (BOOL);

DCL ZQ_FOUND      BOOL;
DCL ZQ_T          INT;

Z_TRACE := H'0270;

ZQ_FOUND               := FALSE;

IF ZF_MSC_IDX /=H'FFFF
   THEN
   GET R_MSC_MGT WHERE (D_IDX=ZF_MSC_IDX);

   DO FOR ZQ_T := 1 TO ZS_MAX_RETRY
      WHILE DB_PARMS.B_DB_STATUS = M_DB_TUPHELD;

      Q_S0070_WAIT_TIME(ZS_WAIT_TIME_DB);
      GET R_MSC_MGT WHERE (D_IDX=ZF_MSC_IDX);
   OD;

   IF DB_PARMS.B_DB_STATUS=M_DB_SUCCESS
      THEN
     /*FR250253*/ 
    /*IF (R_MSC_MGT.D_MSC_MST = E_MS_IT) 
           OR (R_MSC_MGT.D_MSC_MST = E_MS_FIT)*/ 
      IF (R_MSC_MGT.D_MSC_MST /= E_MS_NEQ) 
     /*FR250253*/ 
        THEN
        ZF_MSC_SBL.B_INT := R_MSC_MGT.D_MSC_SBL;
        ZQ_FOUND := TRUE;
      FI;
   FI;
FI;

RETURN (ZQ_FOUND);

END Q_S806_CHECK_ACTIVE_MSC;

/*END : Addition for A-flex */ 
/* BEGIN CR:745699*/
/********************************************************************/
/*                                                                  */
/*   PROCEDURE: Q_S0809_MAKE_RES_FILE_110_15                        */
/*                                                                  */
/*   PROGRAMMER:                                                    */
/*                                                                  */
/*              LAST MODIFIED BY:                                   */
/*                                                                  */
/*   CREATION DATE: 10/10/12                                        */
/*                                                                  */
/*   FUNCTIONAL DESCRIPTION:                                        */
/*    CREATES THE TYPE 110 RESULT FILE.                             */
/*    GLOBAL DATA:                                                  */
/*                                                                  */
/*     PARAMETERS:                                                  */
/*                      NONE                                        */
/*     RETURNED VALUE:                                              */
/*                      NONE                                        */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                           */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER               */
/*     CONTAINING PROCEDURES:                                       */
/*                      NONE                                        */
/*     RECEIVED MESSAGES:                                           */
/*                      NONE                                        */
/*     SENT MESSAGES:                                               */
/*                      NONE                                        */
/*     PROCEDURES CALLED:                                           */
/*                      Q_S0110_GET_USER_BUF                        */
/*                      Q_S0120_GET_WRITE_BUF                       */
/*                      Q_S0160_READ_HIST_FILE                      */
/*                      Q_S0260_GET_TRXS_OF_A_CELL                  */
/*                      Q_S0270_BEQ_SEQ_FROM_CELL_IDX               */
/*                      Q_S0840_CHECK_DPVAL                         */
/*                      Q_S0500_FILL_REC_HEAD                       */
/*                      Q_S0200_WRITE_RES_FILE                      */
/*     CALLED FROM:                                                 */
/*                      Q_S0370_STATE_MACHINE                       */
/*     PRIMITIVES CALLED:                                           */
/*                      NONE                                        */
/*     DATABASE ACCESS:                                             */
/*                      NONE                                        */
/*                                                                  */
/******************* END OF PROCEDURE HEADER ************************/
/********************************************************************/
Q_S0809_MAKE_RES_FILE_110_15 : PROC ( );

DCL ZQ_CELL_ID         ZM_PM_BEQ_SECT_SITE_TRX ;
DCL ZQ_CELLS, ZQ_RRH, ZQ_CELL_TRXS INT;
DCL ZQ_TRX_IDX   M_TRX_IDX;
DCL ZQ_I RANGE(E_MT_110_CTR_MC1605:E_MT_110_CTR_MC1609);
DCL ZQ_J RANGE(E_MT_110_CTR_MC1610:E_MT_110_CTR_MC1612);
DCL ZQ_START_REC_NO     INT;
DCL ZQ_IND_OBJ          INT;
DCL ZQ_RES_RRN          INT;
DCL ZQ_IND_REC          INT;
DCL ZQ_REC              M_BYTE;
DCL ZQ_FILL_PTR         PTR;
DCL  ZQ_HIS_BUFFER_RECS INT;
DCL ZQ_HIS_REC_IN_BUFF  INT;
DCL ZQ_BUF              INT;
DCL ZQ_RECORD_FULL      BOOL;
DCL ZQ_TRX INT;
DCL ZQ_TRX_ID          M_TRX_ID;
/* DCTPD01273907 */
/*DCL ZQ_TRX_IDX_HIST    M_TRX_IDX;*/
/* DCTPD01273907 */
DCL ZQ_OBJ             M_BYTE;
DCL ZQ_K RANGE(E_MT_110_CTR_MC1615:E_MT_110_CTR_MC1634);

ZQ_IND_REC         := 1;
ZQ_IND_OBJ         := 1;
ZQ_RES_RRN         := Z_RES_RRN;
ZQ_HIS_REC_IN_BUFF := 34;
ZQ_RECORD_FULL     := FALSE;


DO WITH Z_HISTORY_FILE;
  ZB_TABLE_SIZE := SIZE(CM_HIS_TYPE_110_15)
                   * ZQ_HIS_REC_IN_BUFF;  
  Q_S0110_GET_USER_BUF(ZB_TABLE_PTR,
                       ZB_TABLE_SIZE);
OD; /* WITH Z_HISTORY_TABLE */

DO WITH Z_RESULT_FILE;
  ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
  Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
               -> ZM_RES_TYPE_110_15_ARR(ZQ_IND_REC).ZB_DATA;

DO FOR ZQ_BUF := 0 TO ((700 * 6*6) /
                        ZQ_HIS_REC_IN_BUFF )
    WHILE Z_CPL_CODES = E_NULL_CODE;
   ZQ_START_REC_NO:= ZQ_HIS_REC_IN_BUFF * ZQ_BUF;
  
 IF ZQ_START_REC_NO + ( ZQ_HIS_REC_IN_BUFF - 1 ) >
                          (CM_FY32_MAX_CELLS_PER_BSC*6*6)
 THEN
 /*CRI#01584774.01 GLOBAL STOP READ HISTORY FILE 110_15*/
   ZQ_HIS_REC_IN_BUFF := (CM_FY32_MAX_CELLS_PER_BSC *6*6) REM
                           ZQ_HIS_REC_IN_BUFF; /*CRI#01584774.01 END*/
      Z_HISTORY_FILE.ZB_TABLE_SIZE := SIZE(CM_HIS_TYPE_110_15)
                                       * ZQ_HIS_REC_IN_BUFF;
 FI;
 
 Q_S0160_READ_HIST_FILE (->Z_HISTORY_FILE,
                           ZQ_HIS_REC_IN_BUFF,
                           ZQ_START_REC_NO,
                           SIZE(CM_HIS_TYPE_110_15));
 DO FOR ZQ_REC := 1 TO ZQ_HIS_REC_IN_BUFF WHILE
                                 Z_CPL_CODES = E_NULL_CODE;
  
  /*DO FOR ZQ_RRH := 1 TO 6;*/
  /*DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR ->
                      CM_HIS_TYPE_110_15;*/
  DO WITH Z_HISTORY_FILE.ZB_TABLE_PTR->
                   CM_FY32_OLC_LOCAL_MODE(LONG_INT((ZQ_REC)));
                   /*CM_HIS_TYPE_110_15;*/
   IF B_CELL_ID > 0 AND B_CELL_ID <= 700
   THEN 
    IF B_RRH_IDX > 0 AND B_RRH_IDX <= 99
    THEN
     Q_S0260_GET_TRXS_OF_A_CELL( B_CELL_ID , E_SDCH);  
     /* DCTPD01273907 */     
     ZQ_TRX_ID := B_TRX_ID;
     /*order SITE_TRX_ID in result file*/  
     IF ZQ_TRX_ID /= H'FF 
     THEN 
     /*Q_S0290_GET_TRX_ID(ZQ_TRX_IDX_HIST, ZQ_TRX_ID);*/
     /* DCTPD01273907 */
     DO WITH ZQ_FILL_PTR -> ZM_TYPE_110_15_DATA;			   
      ZB_TAG       := ZS_TYPE_110_15_BSC_TAG;
      ZB_LEN       := ZS_TYPE_110_15_BSC_LEN;	
      IF Q_S0270_BEQ_SEQ_FROM_OLC_CELL_IDX
                  (B_CELL_ID,ZQ_CELL_ID)
      THEN
       ZQ_CELL_ID.B_RRH_ID := B_RRH_IDX;
                               
       ZB_BEQS_ID.B_BEQ := ZQ_CELL_ID.B_BEQ;
     /*  ZB_BEQS_ID.B_BEQ_H := ZQ_CELL_ID.B_BEQ_H;*/
       ZB_BEQS_ID.B_SECTOR := ZQ_CELL_ID.B_SECTOR;
    /*   ZB_BEQS_ID.B_SPARE := ZQ_CELL_ID.B_SPARE;  */
         
       ZB_BEQS_ID.B_RRH_ID := ZQ_CELL_ID.B_RRH_ID;
       ZB_BEQS_ID.B_TRX_ID := ZQ_TRX_ID;
/*ST BEGIN : 745699*/
        DO WITH B_CTRS_PT15_MT_110;
/* BEGIN CRI#01492167.01 DEFAULT VALUE OF OLC CC COUNTERS */
  B_MC1600_TO_MC1601(E_MT_110_CTR_MC1600) := Q_S0840_CHECK_DPVAL_INVALID
                            (B_MC1600_TO_MC1601(E_MT_110_CTR_MC1600));

  B_MC1600_TO_MC1601(E_MT_110_CTR_MC1601) := Q_S0840_CHECK_DPVAL_INVALID
                            (B_MC1600_TO_MC1601(E_MT_110_CTR_MC1601));
/*
         IF B_MC1602 = ZS_DPVAL_OVERFLOW
         THEN
           B_MC1602 := ZS_DPVAL_INVALID;
         FI;
*/
     B_MC1602 := Q_S0841_CHECK_VAL_INVALID(B_MC1602);
     B_MC1603 := Q_S0840_CHECK_DPVAL_INVALID(B_MC1603);
     B_MC1604 := Q_S0841_CHECK_VAL_INVALID(B_MC1604);
/*
         IF B_MC1604 = ZS_DPVAL_OVERFLOW
         THEN
          B_MC1604 := ZS_DPVAL_INVALID;
         FI;
*/
/* END CRI#01492167.01 DEFAULT VALUE OF OLC CC COUNTERS */ 
  B_MC1605_TO_MC1609(E_MT_110_CTR_MC1605) := Q_S0840_CHECK_DPVAL
                            (B_MC1605_TO_MC1609(E_MT_110_CTR_MC1605));
  B_MC1605_TO_MC1609(E_MT_110_CTR_MC1606) := Q_S0840_CHECK_DPVAL
                            (B_MC1605_TO_MC1609(E_MT_110_CTR_MC1606));
  B_MC1605_TO_MC1609(E_MT_110_CTR_MC1607) := Q_S0840_CHECK_DPVAL
                            (B_MC1605_TO_MC1609(E_MT_110_CTR_MC1607));
  B_MC1605_TO_MC1609(E_MT_110_CTR_MC1608) := Q_S0840_CHECK_DPVAL
                            (B_MC1605_TO_MC1609(E_MT_110_CTR_MC1608));
  B_MC1605_TO_MC1609(E_MT_110_CTR_MC1609) := Q_S0840_CHECK_DPVAL
                            (B_MC1605_TO_MC1609(E_MT_110_CTR_MC1609));
/* BEGIN CRI#01492167.01 DEFAULT VALUE OF OLC CC COUNTERS */ 
/*
         IF B_MC1610_TO_MC1612(E_MT_110_CTR_MC1610) = ZS_DPVAL_OVERFLOW
         THEN
          B_MC1610_TO_MC1612(E_MT_110_CTR_MC1610) := ZS_DPVAL_INVALID;
         FI;

         IF B_MC1610_TO_MC1612(E_MT_110_CTR_MC1611) = ZS_DPVAL_OVERFLOW
         THEN
          B_MC1610_TO_MC1612(E_MT_110_CTR_MC1611) := ZS_DPVAL_INVALID;
         FI;

         IF B_MC1610_TO_MC1612(E_MT_110_CTR_MC1612) = ZS_DPVAL_OVERFLOW
         THEN
          B_MC1610_TO_MC1612(E_MT_110_CTR_MC1612) := ZS_DPVAL_INVALID;
         FI;
*/
  B_MC1610_TO_MC1612(E_MT_110_CTR_MC1610) := Q_S0841_CHECK_VAL_INVALID
                       (B_MC1610_TO_MC1612(E_MT_110_CTR_MC1610));
  B_MC1610_TO_MC1612(E_MT_110_CTR_MC1611) := Q_S0841_CHECK_VAL_INVALID
		        (B_MC1610_TO_MC1612(E_MT_110_CTR_MC1611));
  B_MC1610_TO_MC1612(E_MT_110_CTR_MC1612) := Q_S0841_CHECK_VAL_INVALID
                       (B_MC1610_TO_MC1612(E_MT_110_CTR_MC1612));
  B_MC1613 := Q_S0840_CHECK_DPVAL_INVALID(B_MC1613);
         /* BEGIN CR:934803 YX*/
  B_MC1614_TO_MC1634(E_MT_110_CTR_MC1614) := Q_S0840_CHECK_DPVAL_INVALID
                            (B_MC1614_TO_MC1634(E_MT_110_CTR_MC1614));
/* END CRI#01492167.01 DEFAULT VALUE OF OLC CC COUNTERS */     
         DO FOR ZQ_K := E_MT_110_CTR_MC1615 TO E_MT_110_CTR_MC1634;
                /*CASE ZQ_K OF  remove warning           
                  (E_MT_110_CTR_MC1615:E_MT_110_CTR_MC1634): */ 
                      B_MC1614_TO_MC1634(ZQ_K).B_HIGH := 0;
                      B_MC1614_TO_MC1634(ZQ_K).B_LOW  := 0;                
                /*ESAC;*/
         OD;
         /* END CR:934803 YX*/
          
       OD;
/*ST END:745699*/
       ZB_110_15_CTRS := B_CTRS_PT15_MT_110;
       ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                      SIZE(ZM_TYPE_110_15_DATA));
       IF Q_S0820_RECORD_FULL(ZQ_IND_OBJ,
                                   ZQ_IND_REC,
                                   ZQ_RES_RRN,
                                   E_HIST_110_15)
       THEN
        ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                -> ZM_RES_TYPE_110_15_ARR(ZQ_IND_REC).ZB_DATA;
        ZQ_RECORD_FULL := TRUE;
       ELSE
        ZQ_RECORD_FULL := FALSE;
       FI;
          /*ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                          SIZE(ZM_TYPE_110_15_DATA));*/
      FI;
     OD;
     FI;
    FI;
   FI;  
  OD;
 OD;
OD;
Z_CPL_CODES:=E_NULL_CODE;

 Q_S0830_CHECK_LAST_WRITE(ZQ_IND_OBJ,
                         ZQ_IND_REC,
                         ZQ_RES_RRN);

IF ZQ_RECORD_FULL
/* BEGIN: ADD-WIPRO-FR36229339-CHANGE */   
 OR (ZQ_IND_OBJ = 1 AND ZQ_IND_REC = 1)
/* END: ADD-WIPRO-FR36229339-CHANGE */   
 THEN
    Z_RES_RRN := ZQ_RES_RRN + ZQ_IND_REC - 1;
 ELSE
    Z_RES_RRN := ZQ_RES_RRN + ZQ_IND_REC;
 FI;
/* END : Addition for A-flex */	
END Q_S0809_MAKE_RES_FILE_110_15;
/* END CR:745699 */	

/*ADDED FOR GSL COUNTERS MEMO*/
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0810_180_MAKE_RES_FILE_180                       */
/*                                                                    */
/*     PROGRAMMER: A.H.SWANN                                          */
/*                                                                    */
/*                LAST MODIFIED BY:DUHITA D        DATE:04/05/21      */
/*                                                                    */
/*     CREATION DATE: 98/06/16                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*      CREATES THE TYPE 180 RESULT FILE.                             */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0110_GET_USER_BUF                          */
/*                      Q_S0120_GET_WRITE_BUF                         */
/*                      Q_S0160_READ_HIST_FILE                        */
/*                      Q_S0270_BEQ_SEQ_FROM_CELL_IDX                 */
/*                      Q_S0700_CHECK_TYPE_28_OVERFLOW                */
/*                      Q_S0820_RECORD_FULL                           */
/*                      Q_S0830_CHECK_LAST_WRITE                      */
/*     CALLED FROM:                                                   */
/*                      Q_S0510_MAKE_RESULT_FILE                      */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0810_180_MAKE_RES_FILE_180 : PROC ( );

DCL ZQ_BEQS_ID          ZM_PM_BEQ_AND_SECTOR;
DCL ZQ_CELLS            INT;
DCL ZQ_FILL_PTR         PTR;
DCL ZQ_FIRST_BUFF_PTR   PTR;
DCL ZQ_IND_OBJ          INT;
DCL ZQ_IND_REC          INT;
DCL ZQ_NEXT             INT;
DCL ZQ_REC_SIZE         INT;
DCL ZQ_RES_RRN          INT;
DCL ZQ_SECND_BUFF_PTR   PTR;
DCL ZQ_TEMP_CTRS        M_TYPE_180_CTRS;
DCL ZQ_180_LOOP         M_HIS_TYPE_180_CTRS;

Z_TRACE := H'0810;

/* NOTE THAT THE GENERIC HEADER IS ALWAYS IN THE FIRST RECORD  */
/* HENCE THE FIRST ITEM STARTS AT THE SECOND RECORD.           */
ZQ_IND_REC         := 2;
ZQ_IND_OBJ         := 1;
ZQ_RES_RRN         := -1;

DO WITH Z_RESULT_FILE;
   ZB_TABLE_SIZE := ZS_RES_REC_SIZE * ZS_RES_REC_IN_BUFF;
   Q_S0120_GET_WRITE_BUF(ZB_TABLE_PTR, ZB_TABLE_SIZE);
OD;

ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
               -> ZM_RES_TYPE_180_ARR(ZQ_IND_REC).ZB_DATA;
ZQ_REC_SIZE := 0;

DO FOR ZQ_CELLS := 1 TO CM_FY32_MAX_CELLS_PER_BSC
              WHILE Z_CPL_CODES = E_NULL_CODE;

   ZQ_FIRST_BUFF_PTR := Z_CCI_1_PTR ;
   DO WITH ZQ_FIRST_BUFF_PTR -> ZM_TRAFF_FLOW_CELL_INFO;
      IF B_ACTIV_CELLS(ZQ_CELLS) /= ZS_FFFF  AND
       /* BEGIN FR20/186523 B9 */
      B_NEXT(1L).B_SERV_CELL.B_CELL_ID_CGI /= ZS_DUMMY_CGI
      AND
       /* END FR20/186523 B9*/
         Q_S0270_BEQ_SEQ_FROM_CELL_IDX(ZQ_CELLS,ZQ_BEQS_ID)
         THEN

         DO WITH ZQ_FILL_PTR -> ZM_RES_TRAFF_FLO_HEAD;
            ZB_TAG      := ZS_TYPE_180_GLOB_TAG;
            ZB_LEN      := ZS_TYPE_180_GLOB_LEN;
            ZB_BEQS_ID  := ZQ_BEQS_ID;
            ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                               SIZE(ZM_RES_TRAFF_FLO_HEAD));
            ZQ_REC_SIZE  := ZQ_REC_SIZE + SIZE(ZM_RES_TRAFF_FLO_HEAD);
            IF Q_S0825_REC_FULL_SIZE(ZQ_IND_OBJ,
                                     ZQ_IND_REC,
                                     ZQ_RES_RRN,
                                     ZQ_REC_SIZE,
                                     ZS_180_REC_SIZE)
               THEN
               /* GET ANOTHER RECORD OF THE RESULT FILE  */
               ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                              -> ZM_RES_TYPE_180_ARR
                                 (ZQ_IND_REC).ZB_DATA;
               ZQ_REC_SIZE := 0;
            FI;
         OD;
         ZQ_NEXT := ZQ_CELLS;
         DO WHILE ZQ_NEXT /= ZS_FFFF;
            DO WITH ZQ_FILL_PTR -> ZM_RES_TRAFF_FLO_CTRS;
               ZB_TAG      := ZS_TYPE_180_CELL_TAG;
               ZB_LEN      := ZS_TYPE_180_CELL_LEN;

               /* BEGIN  DELETE-WIPRO-B9-P1-CHANGE */
            /* ZB_CGI.ZB_LAC := B_NEXT(ZQ_NEXT).B_SERV_CELL.B_LAC;
               ZB_CGI.ZB_CI  := B_NEXT(ZQ_NEXT).B_SERV_CELL.B_CI;*/
               /* END  DELETE-WIPRO-B9-P1-CHANGE */

               /* BEGIN: ADD-WIPRO-B9-P1-CHANGE */
               DO WITH ZQ_FIRST_BUFF_PTR -> ZM_TRAFF_FLOW_CELL_INFO
                              .B_NEXT(ZM_TRAFF_FLOW_LEN(ZQ_NEXT));
               ZB_CGI.B_MCC :=
                              B_SERV_CELL.B_MCC;
               ZB_CGI.B_MNC :=
                              B_SERV_CELL.B_MNC;
               ZB_CGI.B_LAC := 
                              B_SERV_CELL.B_LAC;
               ZB_CGI.B_CI  :=
                              B_SERV_CELL.B_CI;
               OD;
               /* END: ADD-WIPRO-B9-P1-CHANGE */

               ZQ_SECND_BUFF_PTR := Z_CCI_2_PTR;
               DO WITH ZQ_SECND_BUFF_PTR-> ZM_TRAFF_FLOW_DATA;
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
                  ZQ_TEMP_CTRS := 
                     B_TF_CTRS(ZM_TRAFF_FLOW_LEN(ZQ_NEXT));
/* END: ADD-WIPRO-B10-MR1-CHANGE */
                  DO FOR ZQ_180_LOOP := E_MT_180_CTR_C400 TO
                                 E_MT_180_CTR_C402;
                     ZQ_TEMP_CTRS(ZQ_180_LOOP):= Q_S0840_CHECK_DPVAL
                                         (ZQ_TEMP_CTRS(ZQ_180_LOOP));
                  OD;
                  ZB_180_CTRS := ZQ_TEMP_CTRS;
               OD;
               ZQ_FILL_PTR := Q_S0860_INCREM_PTR(ZQ_FILL_PTR,
                                  SIZE(ZM_RES_TRAFF_FLO_CTRS));
               ZQ_REC_SIZE := ZQ_REC_SIZE + SIZE(ZM_RES_TRAFF_FLO_CTRS);
               IF Q_S0825_REC_FULL_SIZE(ZQ_IND_OBJ,
                                        ZQ_IND_REC,
                                        ZQ_RES_RRN,
                                        ZQ_REC_SIZE,
                                        ZS_180_REC_SIZE)
                  THEN
                  /* GET ANOTHER RECORD OF THE RESULT FILE  */
                  ZQ_FILL_PTR := -> Z_RESULT_FILE.ZB_TABLE_PTR
                                 -> ZM_RES_TYPE_180_ARR
                                    (ZQ_IND_REC).ZB_DATA;
                  ZQ_REC_SIZE := 0;
               FI;
               ZQ_NEXT := 
                B_NEXT(ZM_TRAFF_FLOW_LEN(ZQ_NEXT)).B_NEXT_PAIR;
            OD;
         OD;
      FI;
   OD;
OD;

Q_S0830_CHECK_LAST_WRITE(ZQ_IND_OBJ,
                         ZQ_IND_REC,
                         ZQ_RES_RRN);

END Q_S0810_180_MAKE_RES_FILE_180;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0820_RECORD_FULL                                 */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 96/11/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       THIS CHECKS IF A RECORD IS FULL AND IF SO WRITES THE RECORD. */
/*       THE COUNTER VARIABLES ARE INCREMENTED OR RE-INITIALISED AND  */
/*       RETURNED AS PARAMETERS. THE STRUCTURE OF THIS ROUTINE IS FAR */
/*       FROM IDEAL BUT TO AVOID TOO MUCH CHANGE FROM R3 MAD ....     */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_RES_BUFF_OK_OBJ INT LOC,                   */
/*                      ZF_RES_BUFF_OK_REC INT LOC,                   */
/*                      ZF_RES_RRN INT LOC,                           */
/*                      ZF_TYPE_110_3 BOOL                            */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0500_FILL_REC_HEAD                         */
/*                      Q_S0200_WRITE_RES_FILE                        */
/*     CALLED FROM:                                                   */
/*                      Q_S0520_01_MAKE_RES_FILE_01                   */
/*                      Q_S0530_02_MAKE_RES_FILE_02                   */
/*                      Q_S0540_03_MAKE_RES_FILE_03                   */
/*                      Q_S0550_04_MAKE_RES_FILE_04                   */
/*                      Q_S0560_05_MAKE_RES_FILE_05                   */
/*                      Q_S0570_06_MAKE_RES_FILE_06                   */
/*                      Q_S0590_07_MAKE_RES_FILE_07                   */
/*                      Q_S0610_09_MAKE_RES_FILE_09                   */
/*                      Q_S0640_19_MAKE_RES_FILE_19                   */
/*                      Q_S0650_25_MAKE_RES_FILE_25                   */
/*                      Q_S0660_26_MAKE_RES_FILE_26                   */
/*                      Q_S0670_27_MAKE_RES_FILE_27                   */
/*                      Q_S0690_28_MAKE_RES_FILE_28                   */
/*                      Q_S0710_29_MAKE_RES_FILE_29                   */
/*                      Q_S0760_110_MAKE_RES_FILE_110                 */
/*                      Q_S0790_MAKE_RES_FILE_110_3                   */
/*                      Q_S0800_MAKE_RES_FILE_110_4                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0820_RECORD_FULL  : PROC (ZF_RES_BUFF_OK_OBJ INT LOC,
                             ZF_RES_BUFF_OK_REC INT LOC,
                             ZF_RES_RRN         INT LOC,
                             ZF_HIS_TYPE        ZM_HIS_TYPE)
                       RETURNS(BOOL);

DCL ZQ_FULL        BOOL;
DCL ZQ_REC_SEQ     INT;
DCL ZQ_OBJ_PER_REC INT;

Z_TRACE := H'0820;

CASE ZF_HIS_TYPE OF
   (E_HIST_NORM):
   ZQ_OBJ_PER_REC := ZS_OBJ_IN_RES_REC(Z_RESULT_FILE.ZB_MEAS_TYPE);

   (E_HIST_110_4):
  /* CR20/225233 */
   /*ZQ_OBJ_PER_REC := ZS_OBJ_IN_RES_REC
                      (SUCC(Z_RESULT_FILE.ZB_MEAS_TYPE));*/
    ZQ_OBJ_PER_REC := ZS_OBJ_IN_RES_REC
                      (Z_RESULT_FILE.ZB_MEAS_TYPE);                      
  /* CR20/225233 */                      

   (E_HIST_110_5):
   ZQ_OBJ_PER_REC := ZS_OBJ_IN_RES_REC
                      (SUCC(SUCC(Z_RESULT_FILE.ZB_MEAS_TYPE)));

   (E_HIST_1_2):
   ZQ_OBJ_PER_REC := ZS_TYP_1_2_OBJ_IN_RES_REC;

   (E_HIST_18_2):
   ZQ_OBJ_PER_REC := ZS_TYP_18_2_OBJ_IN_RES_REC;

/* BEGIN: ADD-WIPRO-B9-P2-CHANGE */
   (E_HIST_34_2):
   ZQ_OBJ_PER_REC := ZS_TYP_34_2_OBJ_IN_RES_REC;
   /* END: ADD-WIPRO-B9-P2-CHANGE */
/* BEGIN: ADD-WIPRO-B9-P2-CHANGE */
/* CR20/225233 */
   (E_HIST_35_3):
   ZQ_OBJ_PER_REC := ZS_TYP_35_3_OBJ_IN_RES_REC;
/* CR20/225233 */
   (E_HIST_35_4):
   ZQ_OBJ_PER_REC := ZS_TYP_35_4_OBJ_IN_RES_REC;
   (E_HIST_35_5):
   ZQ_OBJ_PER_REC := ZS_TYP_35_5_OBJ_IN_RES_REC;
   (E_HIST_35_6):
/* START :CR20/284751 BTS FRQ SYNCH */
   ZQ_OBJ_PER_REC := ZS_TYP_35_6_OBJ_IN_RES_REC;
/*END: CR20/284751 BTS FRQ SYNCH */
/* BEGIN: ADD-WIPRO-B11-MR0-PKG1-CHANGE */   
   (E_HIST_35_7):
   ZQ_OBJ_PER_REC := ZS_TYP_35_7_OBJ_IN_RES_REC;
   (E_HIST_35_8):
   ZQ_OBJ_PER_REC := ZS_TYP_35_8_OBJ_IN_RES_REC;
/* END: ADD-WIPRO-B11-MR0-PKG1-CHANGE */   
   /* END: ADD-WIPRO-B9-P2-CHANGE */
/*ADDED FOR GSL COUNTERS MEMO*/   
   (E_HIST_110_9):
   ZQ_OBJ_PER_REC := ZS_TYP_110_9_OBJ_IN_RES_REC;
/*ADDED FOR GSL COUNTERS MEMO*/   

/*START : Addition for A-flex */ 

   (E_HIST_110_10):
   ZQ_OBJ_PER_REC := ZS_TYP_110_10_OBJ_IN_RES_REC;
/*END : Addition for A-flex */   

/*BEGIN : CR20/301337-RFI4448 FILE FORMAT*/
/*BEGIN: CR36/302024 -RFI4448*/
/*   (E_HIST_110_11):
   ZQ_OBJ_PER_REC := ZS_TYP_110_11_OBJ_IN_RES_REC;*/
/*END: CR36/302024*/
/*END : CR20/301337*/
/*CR36/236932*/
/*BEIGN : AUPoIP*/
   (E_HIST_110_12):
   ZQ_OBJ_PER_REC := ZS_TYP_110_12_OBJ_IN_RES_REC;   
/*END : AUPoIP*/
/*BEGIN CR:745699*/
   (E_HIST_110_15):
   ZQ_OBJ_PER_REC := ZS_TYP_110_15_OBJ_IN_RES_REC;
/*END CR:745699*/
/*BEGIN: CR20/313054 */
   (E_HIST_110_13):
     ZQ_OBJ_PER_REC := ZS_TYP_110_13_OBJ_IN_RES_REC;
/*END: CR20/313054 */
   (E_HIST_7_2):
   ZQ_OBJ_PER_REC := ZS_TYP_7_2_OBJ_IN_RES_REC;
/*CR36/236932*/
/*begin CR1238146 A-GPS*/
   (E_HIST_110_18):
   ZQ_OBJ_PER_REC := ZS_TYP_110_18_OBJ_IN_RES_REC;
/*end CR1238146 A-GPS*/

   ELSE
ESAC;

/* CHECK IF THE RECORD IS FULL OR IT IS THE LAST */
IF ZF_RES_BUFF_OK_OBJ = ZQ_OBJ_PER_REC
THEN
  ZQ_FULL:=TRUE;

  ZQ_REC_SEQ := ZF_RES_BUFF_OK_REC + ZF_RES_RRN;

  /* UPDATE THE HEADER OF THE CURRENT RECORD */
  Q_S0500_FILL_REC_HEAD(->Z_RESULT_FILE.ZB_TABLE_PTR
                   ->ZM_GEN_RES_REC_ARR(ZF_RES_BUFF_OK_REC).ZB_HEADER,
                   ZQ_REC_SEQ,
                   E_GPMR);

  ZF_RES_BUFF_OK_OBJ := 1;

  /* CHECK IF THE BUFFER IS FULL AND WRITE TO FILE */
  IF ZF_RES_BUFF_OK_REC = ZS_RES_REC_IN_BUFF
  THEN
    /* BUFFER IS FULL */
    			 /*START: CRI00611721 */
    Q_S0200_WRITE_RES_FILE(ZF_RES_BUFF_OK_REC,
                           LONG_INT(ZF_RES_RRN+1));
			 /*END: CRI00611721 */

    ZF_RES_RRN := ZF_RES_RRN + ZF_RES_BUFF_OK_REC;
    ZF_RES_BUFF_OK_REC := 1;
  ELSE
    ZF_RES_BUFF_OK_REC := ZF_RES_BUFF_OK_REC + 1;
  FI; /* BUFFER FULL */
ELSE
  ZQ_FULL:=FALSE;
  ZF_RES_BUFF_OK_OBJ := ZF_RES_BUFF_OK_OBJ + 1;
FI;

RETURN (ZQ_FULL);

END Q_S0820_RECORD_FULL;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0825_REC_FULL_SIZE                               */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 96/11/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       THIS CHECKS IF A RECORD IS FULL AND IF SO WRITES THE RECORD. */
/*       THE COUNTER VARIABLES ARE INCREMENTED OR RE-INITIALISED AND  */
/*       RETURNED AS PARAMETERS. THE STRUCTURE OF THIS ROUTINE IS FAR */
/*       FROM IDEAL BUT TO AVOID TOO MUCH CHANGE FROM R3 MAD ....     */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_RES_BUFF_OK_OBJ INT LOC,                   */
/*                      ZF_RES_BUFF_OK_REC INT LOC,                   */
/*                      ZF_RES_RRN INT LOC,                           */
/*                      ZF_TYPE_110_3 BOOL                            */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0500_FILL_REC_HEAD                         */
/*                      Q_S0200_WRITE_RES_FILE                        */
/*     CALLED FROM:                                                   */
/*                      Q_S0810_180_MAKE_RES_FILE_180                 */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0825_REC_FULL_SIZE :PROC (ZF_RES_BUFF_OK_OBJ INT LOC,
                             ZF_RES_BUFF_OK_REC INT LOC,
                             ZF_RES_RRN         INT LOC,
                             ZF_REC_SIZE        INT,
                             ZF_MAX_SIZE        INT)
                       RETURNS(BOOL);

DCL ZQ_FULL        BOOL;
DCL ZQ_REC_SEQ     INT;
/*DCL ZQ_OBJ_PER_REC INT;*//*UNUSED*/

Z_TRACE := H'0820;

/* CHECK IF THE RECORD IS FULL OR IT IS THE LAST */
IF ZF_REC_SIZE > ZF_MAX_SIZE
   THEN
   ZQ_FULL:=TRUE;
   ZQ_REC_SEQ := ZF_RES_BUFF_OK_REC + ZF_RES_RRN;
   /* UPDATE THE HEADER OF THE CURRENT RECORD */
   Q_S0500_FILL_REC_HEAD(->Z_RESULT_FILE.ZB_TABLE_PTR
                   ->ZM_GEN_RES_REC_ARR(ZF_RES_BUFF_OK_REC).ZB_HEADER,
                   ZQ_REC_SEQ,
                   E_GPMR);

   ZF_RES_BUFF_OK_OBJ := 1;

   /* CHECK IF THE BUFFER IS FULL AND WRITE TO FILE */
   IF ZF_RES_BUFF_OK_REC = ZS_RES_REC_IN_BUFF
     THEN
     /* BUFFER IS FULL */
     			 /*START: CRI00611721 */
     Q_S0200_WRITE_RES_FILE(ZF_RES_BUFF_OK_REC,
                            LONG_INT(ZF_RES_RRN+1));
			 /*END: CRI00611721 */

     ZF_RES_RRN := ZF_RES_RRN + ZF_RES_BUFF_OK_REC;
     ZF_RES_BUFF_OK_REC := 1;
   ELSE
     ZF_RES_BUFF_OK_REC := ZF_RES_BUFF_OK_REC + 1;
   FI; /* BUFFER FULL */
ELSE
   ZQ_FULL:=FALSE;
   ZF_RES_BUFF_OK_OBJ := ZF_RES_BUFF_OK_OBJ + 1;
FI;

RETURN (ZQ_FULL);

END Q_S0825_REC_FULL_SIZE;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0830_CHECK_LAST_WRITE                            */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (KDC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 96/11/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*      THIS ROUTINE CHECKS FOR PARTIALLY FULL BUFFER AFTER ALL       */
/*      IETMS HAVE BEEN WRITTEN.                                      */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_RES_BUFF_NEXT_OBJ INT,                     */
/*                      ZF_RES_BUFF_NEXT_REC INT,                     */
/*                      ZF_RES_RRN INT                                */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0500_FILL_REC_HEAD                         */
/*                      Q_S0200_WRITE_RES_FILE                        */
/*     CALLED FROM:                                                   */
/*                      Q_S0520_01_MAKE_RES_FILE_01                   */
/*                      Q_S0530_02_MAKE_RES_FILE_02                   */
/*                      Q_S0540_03_MAKE_RES_FILE_03                   */
/*                      Q_S0550_04_MAKE_RES_FILE_04                   */
/*                      Q_S0560_05_MAKE_RES_FILE_05                   */
/*                      Q_S0570_06_MAKE_RES_FILE_06                   */
/*                      Q_S0590_07_MAKE_RES_FILE_07                   */
/*                      Q_S0640_19_MAKE_RES_FILE_19                   */
/*                      Q_S0650_25_MAKE_RES_FILE_25                   */
/*                      Q_S0660_26_MAKE_RES_FILE_26                   */
/*                      Q_S0670_27_MAKE_RES_FILE_27                   */
/*                      Q_S0690_28_MAKE_RES_FILE_28                   */
/*                      Q_S0710_29_MAKE_RES_FILE_29                   */
/*                      Q_S0760_110_MAKE_RES_FILE_110                 */
/*                      Q_S0810_180_MAKE_RES_FILE_180                 */
/*                      Q_S0790_MAKE_RES_FILE_110_3                   */
/*                      Q_S0800_MAKE_RES_FILE_110_4                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0830_CHECK_LAST_WRITE : PROC(ZF_RES_BUFF_NEXT_OBJ INT,
                                ZF_RES_BUFF_NEXT_REC INT,
                                ZF_RES_RRN    INT);
DCL  ZQ_REC_HDL  INT;
DCL  ZQ_REC_SEQ  INT;

Z_TRACE := H'0830;

IF Z_CPL_CODES=E_NULL_CODE AND
   ( ZF_RES_BUFF_NEXT_REC /= 1 OR ZF_RES_BUFF_NEXT_OBJ /= 1)
THEN
  IF ZF_RES_BUFF_NEXT_OBJ = 1
  THEN
    /* THE LAST OK REC IN RESULT FILE WRITE BUFFER HAS JUST BEEN */
    /* COMPLETED...SO THE RECORD HEADER MUST HAVE BEEN DONE ALREADY */

    IF ZF_RES_BUFF_NEXT_REC /= 1
    THEN
      ZQ_REC_HDL := ZF_RES_BUFF_NEXT_REC - 1;
      			/*START: CRI00611721 */
      Q_S0200_WRITE_RES_FILE(ZQ_REC_HDL,
                         LONG_INT(ZF_RES_RRN+1));
			/*END: CRI00611721 */
    FI;  ELSE

    /* ACTUALLY  THE ZF_RES_BUFF_NEXT_REC CONTAINS NOT THE NEXT BUT */
    /* THE ACTUAL NUMBER OF RECS IN THE RES FILE WRITE BUFFER       */

    ZQ_REC_HDL := ZF_RES_BUFF_NEXT_REC;

    ZQ_REC_SEQ := ZF_RES_BUFF_NEXT_REC + ZF_RES_RRN;

    Q_S0500_FILL_REC_HEAD(->Z_RESULT_FILE.ZB_TABLE_PTR
                -> ZM_GEN_RES_REC_ARR(ZF_RES_BUFF_NEXT_REC).ZB_HEADER,
                          ZQ_REC_SEQ,
                          E_GPMR);
    		/*START: CRI00611721 */
    Q_S0200_WRITE_RES_FILE(ZQ_REC_HDL,
                         LONG_INT(ZF_RES_RRN+1));
		/*END: CRI00611721 */
  FI;
/*  Q_S0200_WRITE_RES_FILE(ZQ_REC_HDL,
                         ZF_RES_RRN+1);  */
FI;

END Q_S0830_CHECK_LAST_WRITE;


/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0840_CHECK_DPVAL                                 */
/*                                                                    */
/*     PROGRAMMER: A.H.SWANN                                          */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/10/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*      THIS ROUTINE CHECKS THAT A PARTICULAR 4 BYTE COUNTER IS NOT   */
/*      IN THE OVERFLOW STATE.                                        */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_REQUIRED_CHECK M_STA_DPVAL                 */
/*     RETURNED VALUE:                                                */
/*                      M_STA_DPVAL                                   */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0520_01_MAKE_RES_FILE_01                   */
/*                      Q_S0540_03_MAKE_RES_FILE_03                   */
/*                      Q_S0550_04_MAKE_RES_FILE_04                   */
/*                      Q_S0560_05_MAKE_RES_FILE_05                   */
/*                      Q_S0580_CHECK_TYPE_06_OVERFLOW                */
/*                      Q_S0590_07_MAKE_RES_FILE_07                   */
/*                      Q_S0610_09_MAKE_RES_FILE_09                   */
/*                      Q_S0620_CHECK_TYPE_09_OVERFLOW                */
/*                      Q_S0630_18_MAKE_RES_FILE_18                   */
/*                      Q_S0640_19_MAKE_RES_FILE_19                   */
/*                      Q_S0650_25_MAKE_RES_FILE_25                   */
/*                      Q_S0665_CHECK_TYPE_26_OVERFLOW                */
/*                      Q_S0700_CHECK_TYPE_28_OVERFLOW                */
/*                      Q_S0730_CHECK_TYPE_30_OVERFLOW                */
/*                      Q_S0750_CHECK_TYPE_100_OVERFLOW               */
/*                      Q_S0770_CHECK_TYPE_110_1_OVERFLO              */
/*                      Q_S0780_CHECK_TYPE_110_2_OVERFLO              */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0840_CHECK_DPVAL : PROC(ZF_REQUIRED_CHECK M_STA_DPVAL)
                      RETURNS (M_STA_DPVAL);

Z_TRACE := H'0840;

IF ZF_REQUIRED_CHECK.B_LOW  = ZS_DPVAL_OVERFLOW AND
   ZF_REQUIRED_CHECK.B_HIGH = ZS_DPVAL_INVALID
   THEN
   ZF_REQUIRED_CHECK.B_LOW := ZS_DPVAL_INVALID;
FI;

RETURN (ZF_REQUIRED_CHECK);

END Q_S0840_CHECK_DPVAL;
/*CR20/233490*/
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0840_CHECK_DPVAL_INVALID                         */
/*                                                                    */
/*     PROGRAMMER: A.H.SWANN                                          */
/*                                                                    */
/*                                                                    */
/*     CREATION DATE: 97/10/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*      THIS ROUTINE CHECKS THAT A PARTICULAR 4 BYTE COUNTER IS NOT   */
/*      IN THE OVERFLOW STATE.                                        */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_REQUIRED_CHECK M_STA_DPVAL                 */
/*     RETURNED VALUE:                                                */
/*                      M_STA_DPVAL                                   */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0840_CHECK_DPVAL_INVALID : PROC(ZF_REQUIRED_CHECK M_STA_DPVAL)
                      RETURNS (M_STA_DPVAL);

Z_TRACE := H'0840;

IF ZF_REQUIRED_CHECK.B_LOW  = ZS_DPVAL_OVERFLOW AND
   ZF_REQUIRED_CHECK.B_HIGH = ZS_DPVAL_INVALID
   THEN
   ZF_REQUIRED_CHECK.B_LOW := ZS_DPVAL_INVALID;
ELSIF ZF_REQUIRED_CHECK.B_LOW  = ZS_DPVAL_INVALID AND
   ZF_REQUIRED_CHECK.B_HIGH = ZS_DPVAL_INVALID 
   THEN
   ZF_REQUIRED_CHECK.B_LOW := 0;
   ZF_REQUIRED_CHECK.B_HIGH := 0;
   
FI;

RETURN (ZF_REQUIRED_CHECK);

END Q_S0840_CHECK_DPVAL_INVALID;

/* BEGIN CRI#01492167.01 DEFAULT VALUE OF OLC COUNTERS */
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0841_CHECK_VAL_INVALID                         */
/*                                                                    */
/*     PROGRAMMER: ALECZ                                         */
/*                                                                    */
/*                                                                    */
/*     CREATION DATE: 15/06/15                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*      THIS ROUTINE CHECKS THAT A PARTICULAR 2 BYTE COUNTER IS NOT   */
/*      IN THE OVERFLOW STATE.                                        */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_REQUIRED_CHECK INT                 */
/*     RETURNED VALUE:                                                */
/*                      INT                                   */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0841_CHECK_VAL_INVALID: PROC (ZF_REQUIRED_CHECK INT)
		RETURNS(INT);
IF ZF_REQUIRED_CHECK = ZS_DPVAL_OVERFLOW
     THEN
          ZF_REQUIRED_CHECK := ZS_DPVAL_INVALID;
ELSIF ZF_REQUIRED_CHECK = ZS_DPVAL_INVALID
      THEN 
          ZF_REQUIRED_CHECK := 0; 
FI;

RETURN(ZF_REQUIRED_CHECK);

END Q_S0841_CHECK_VAL_INVALID; 
/* END CRI#01492167.01 DEFAULT VALUE OF OLC COUNTERS */

/*CR20/233490*/
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0850_CHECK_3_INT_CNTR                            */
/*                                                                    */
/*     PROGRAMMER: A.H.SWANN                                          */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*      THIS ROUTINE CHECKS THAT A PARTICULAR 6 BYTE COUNTER IS NOT   */
/*      IN THE OVERFLOW STATE.                                        */
/*     GLOBAL DATA:                                                   */
/*                      NONE                                          */
/*     PARAMETERS:                                                    */
/*                      ZF_REQ_CTR M_3_INT_CNTR                       */
/*     RETURNED VALUE:                                                */
/*                      M_3_INT_CNTR                                  */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0750_CHECK_TYPE_100_OVERFLOW               */
/*                      Q_S0790_MAKE_RES_FILE_110_3                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0850_CHECK_3_INT_CNTR : PROC(ZF_REQ_CTR M_3_INT_CNTR)
                           RETURNS (M_3_INT_CNTR);

Z_TRACE := H'0850;

IF ZF_REQ_CTR(1)  = ZS_DPVAL_INVALID AND
   ZF_REQ_CTR(2)  = ZS_DPVAL_INVALID AND
   ZF_REQ_CTR(3)  = ZS_DPVAL_OVERFLOW
   THEN
   ZF_REQ_CTR(3) := ZS_DPVAL_INVALID;
   /*AM: CR682571 Merge miss for FR20/212243 */        
      ELSIF ZF_REQ_CTR(1)  = ZS_DPVAL_INVALID AND
   	    ZF_REQ_CTR(2)  = ZS_DPVAL_INVALID AND
            ZF_REQ_CTR(3)  = ZS_DPVAL_INVALID
        THEN
            ZF_REQ_CTR(1) := 0; 
            ZF_REQ_CTR(2) := 0;
            ZF_REQ_CTR(3) := 0;
FI;
  /*AM: CR682571 Merge Miss for FR20/212243 */

RETURN (ZF_REQ_CTR);

END Q_S0850_CHECK_3_INT_CNTR;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0860_INCREM_PTR                                  */
/*                                                                    */
/*     PROGRAMMER: A.H.SWANN                                          */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*      THIS ROUTINE CHECKS THAT A PARTICULAR 6 BYTE COUNTER IS NOT   */
/*      IN THE OVERFLOW STATE.                                        */
/*     GLOBAL DATA:                                                   */
/*                      NONE                                          */
/*     PARAMETERS:                                                    */
/*                      ZF_OLD_PTR PTR,                               */
/*                      ZF_SIZE_TO_ADD INT                            */
/*     RETURNED VALUE:                                                */
/*                      PTR                                           */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0520_01_MAKE_RES_FILE_01                   */
/*                      Q_S0530_02_MAKE_RES_FILE_02                   */
/*                      Q_S0540_03_MAKE_RES_FILE_03                   */
/*                      Q_S0550_04_MAKE_RES_FILE_04                   */
/*                      Q_S0560_05_MAKE_RES_FILE_05                   */
/*                      Q_S0590_07_MAKE_RES_FILE_07                   */
/*                      Q_S0600_08_MAKE_RES_FILE_08                   */
/*                      Q_S0610_09_MAKE_RES_FILE_09                   */
/*                      Q_S0640_19_MAKE_RES_FILE_19                   */
/*                      Q_S0650_25_MAKE_RES_FILE_25                   */
/*                      Q_S0660_26_MAKE_RES_FILE_26                   */
/*                      Q_S0670_27_MAKE_RES_FILE_27                   */
/*                      Q_S0790_MAKE_RES_FILE_110_3                   */
/*                      Q_S0800_MAKE_RES_FILE_110_4                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0860_INCREM_PTR : PROC(ZF_OLD_PTR PTR,
                          ZF_SIZE_TO_ADD INT)
                          RETURNS (PTR);

NEWMODE ZM_RES_ARR = ARRAY(0:ZS_RES_REC_SIZE) M_BYTE;
DCL ZQ_NEW_PTR   PTR;

Z_TRACE := H'0860;

ZQ_NEW_PTR := ->ZF_OLD_PTR -> ZM_RES_ARR(ZF_SIZE_TO_ADD);

RETURN (ZQ_NEW_PTR);

END Q_S0860_INCREM_PTR;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0870_HIS_FILE_NUM                                */
/*                                                                    */
/*     PROGRAMMER: A.H.SWANN                                          */
/*                                                                    */
/*                LAST MODIFIED BY: NAIKA              DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*      THIS ROUTINE CHECKS THAT A PARTICULAR 6 BYTE COUNTER IS NOT   */
/*      IN THE OVERFLOW STATE.                                        */
/*     GLOBAL DATA:                                                   */
/*                      NONE                                          */
/*     PARAMETERS:                                                    */
/*                      ZF_MEAS_TYPE M_MEAS_TYPE                      */
/*     RETURNED VALUE:                                                */
/*                      INT                                           */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0140_OPEN_HIST_FILE                        */
/*                      Q_S0150_OPEN_2ND_HIS                          */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0870_HIS_FILE_NUM : PROC(ZF_MEAS_TYPE M_MEAS_TYPE)
                          RETURNS (INT);

DCL ZQ_HIS_FILE_NUM   INT;

Z_TRACE := H'0870;

CASE ZF_MEAS_TYPE OF

   (E_MT_TRAFFIC):
      ZQ_HIS_FILE_NUM := 50;
   (E_MT_RESOURCE_AVAILABILITY):
      ZQ_HIS_FILE_NUM := 51;
   (E_MT_RESOURCE_USAGE_CCCH):
      ZQ_HIS_FILE_NUM := 52;
   (E_MT_RESOURCE_USAGE_SDCCH):
      ZQ_HIS_FILE_NUM := 53;
   (E_MT_RESOURCE_USAGE_RTCH):
      ZQ_HIS_FILE_NUM := 54;
   (E_MT_HANDOVER):
      ZQ_HIS_FILE_NUM := 55;
   (E_MT_LAPD):
      ZQ_HIS_FILE_NUM := 56;
   (E_MT_X25):
      ZQ_HIS_FILE_NUM := 57;
   (E_MT_NUMBER7):
      ZQ_HIS_FILE_NUM := 58;
   (E_MT_A_AND_ABIS_ITF_ANALYSIS):
      ZQ_HIS_FILE_NUM := 59;
   (E_MT_SMS):
      ZQ_HIS_FILE_NUM := 60;
   (E_MT_SCCP):
      ZQ_HIS_FILE_NUM := 61;
   (E_MT_HANDOVER_PER_SERVINGCELL):
      ZQ_HIS_FILE_NUM := 62;
   (E_MT_HANDOVER_PER_TARGETCELL):
      ZQ_HIS_FILE_NUM := 63;
   (E_MT_HANDOVER_SDCCH):
      ZQ_HIS_FILE_NUM := 64;
   (E_MT_DIRECTED_RETRY):
      ZQ_HIS_FILE_NUM := 65;
   (E_MT_SMSCB):
      ZQ_HIS_FILE_NUM := 66;
   (E_MT_CELL_TRX_OVERVIEW_COUNTERS):
      ZQ_HIS_FILE_NUM := 68;
   (E_MT_TRAFFIC_FLOW):
      ZQ_HIS_FILE_NUM := 72;
   (E_MT_MULTIBAND_HANDOVERS):
      ZQ_HIS_FILE_NUM := 79;
   /* BEGIN: ADD-WIPRO-B9-P1-CHANGE */
   (E_MT_EME):
      ZQ_HIS_FILE_NUM := 81;
   /* END: ADD-WIPRO-B9-P1-CHANGE */

/* BEGIN: ADD-WIPRO-B9-P2-CHANGE */
   (E_MT_VGCS):
      ZQ_HIS_FILE_NUM := 82;
/* END: ADD-WIPRO-B9-P2-CHANGE */
/* BEGIN: ADD-WIPRO-B10-MR2-CHANGE */
   (E_MT_IP):
      ZQ_HIS_FILE_NUM := 87;
/* END: ADD-WIPRO-B10-MR2-CHANGE */
   /*IURG*/
   (E_MT_IURG):
      ZQ_HIS_FILE_NUM := 96;
   /*IURG*/
   /*BEGIN:VAMOS*/
   (E_MT_VAMOS):
      ZQ_HIS_FILE_NUM :=99; /* CHANGE FOR 110_12 */
   /*END:VAMOS*/
   ELSE
   ESAC;

RETURN(ZQ_HIS_FILE_NUM);

END Q_S0870_HIS_FILE_NUM;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0880_STARTING_STATE                              */
/*                                                                    */
/*     PROGRAMMER: A.H.SWANN                                          */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/12                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*      THIS ROUTINE CHECKS THAT A PARTICULAR 6 BYTE COUNTER IS NOT   */
/*      IN THE OVERFLOW STATE.                                        */
/*     GLOBAL DATA:                                                   */
/*                      NONE                                          */
/*     PARAMETERS:                                                    */
/*                      ZF_MEAS_TYPE M_MEAS_TYPE                      */
/*     RETURNED VALUE:                                                */
/*                      INT                                           */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0140_OPEN_HIST_FILE                        */
/*                      Q_S0150_OPEN_2ND_HIS                          */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0880_STARTING_STATE : PROC(ZF_EVENT  ZM_SCENARIO_EVENT LOC)
                         RETURNS (ZM_SCENARIO_STATE);

DCL ZQ_START_STATE   ZM_SCENARIO_STATE;

Z_TRACE := H'0880;

IF R_PM_ACT.D_MEAS_TYP = E_MT_TRAFFIC_FLOW
   /*WITTS 76*/
   OR R_PM_ACT.D_MEAS_TYP = E_MT_HANDOVER_PER_SERVINGCELL
   /*END WITTS 76*/
THEN
   ZQ_START_STATE := ZE_W_HIS_FILE_OPEN;
   ZF_EVENT := ZE_EV_FILE_OPENED;
   Q_S0020_INIT_FILE(Z_RESULT_FILE);
ELSE
   ZQ_START_STATE := ZE_IDLE;
FI;

RETURN(ZQ_START_STATE);

END Q_S0880_STARTING_STATE;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0890_SYN_FILE                                    */
/*                                                                    */
/*     PROGRAMMER: CHEN ZHANGYI                                       */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 05/04/08                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*      SYNCHRONIZE RESULT FILE ON DISK C AND D                       */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                      NONE                                          */
/*     PARAMETERS:                                                    */
/*                      ZF_FILE_NAME M_FILE_NAME                      */
/*                      ZF_FILE_PCS  M_FILE_PCS                       */
/*                      ZF_DRIVE_NO  M_DRIVE_NO                       */
/*     RETURNED VALUE:                                                */
/*                      BOOL                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S                                           */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0890_SYN_FILE : PROC(ZF_FILE_NAME M_FILE_NAME,
                        ZF_FILE_PCS  M_FILE_PCS,
                        ZF_DRIVE_NO  M_DRIVE_NO)
                   RETURNS (M_RESULT);

DCL ZQ_FULL_FILE_NAME ZM_FULL_FILE_NAME;
DCL ZQ_RESULT M_RESULT;

Z_TRACE := H'0890;

/*START: CRI00611721 */
/*ZF_FILE_PCS := ZF_FILE_PCS - ZS_BASE_PCS;*/
IF Z_NBR_RES_FILE >= 1
THEN
/* ASCII value for 'A' is 65, BASE_PCS= 16640 
 * FOR 'B', BASE_PCS = 16896 and so on 
 * B_PCS := 16641; (16641=('A'*256+('1'-'0')+('0'-'0')*10)==>01A) 
 * B_PCS := 16897; (16897=('B'*256+('1'-'0')+('0'-'0')*10)==>01B)
 */
  ZF_FILE_PCS := ZF_FILE_PCS - 
                 ((Z_NBR_RES_FILE + 65) * 256);
ELSE
  ZF_FILE_PCS := ZF_FILE_PCS - ZS_BASE_PCS;
FI;
/*END: CRI00611721 */

IF ZF_FILE_PCS > 0 AND ZF_FILE_PCS < 100
THEN
  DO WITH ZQ_FULL_FILE_NAME;
    ZB_FILE_NAME := ZF_FILE_NAME;
    ZB_EXT_FILE_NAME := ZS_NULL_EXT_FILE_NAME;
    IF ZF_FILE_PCS < 10
    THEN 
      ZB_EXT_FILE_NAME(3) := CHAR(ZF_FILE_PCS + 48);
    ELSE
      ZB_EXT_FILE_NAME(2) := CHAR(ZF_FILE_PCS / 10 + 48);
      ZB_EXT_FILE_NAME(3) := CHAR(ZF_FILE_PCS MOD 10 + 48);
    FI;
    /*START: CRI00611721 */
    IF Z_NBR_RES_FILE >= 1
    THEN
      ZB_EXT_FILE_NAME(4) := CHAR(Z_NBR_RES_FILE + 65);
    FI;
    /*END: CRI00611721 */
    #ifdef MXELITE
    ZQ_RESULT := E_SUCC;
    #else
     /* BEGIN-MERGE-FOR-FR36_298770_new_sync_API */
   /* P_MXFSXV_S1007_FILE_SYN(ZQ_FULL_FILE_NAME.ZB_FULL_FILE_NAME,
                            ZF_DRIVE_NO,
                            TRUE,
                            ZQ_RESULT);*/
    P_MXFSXV_S1010_FILE_COPY(ZQ_FULL_FILE_NAME.ZB_FULL_FILE_NAME,
                            ZF_DRIVE_NO,
                            TRUE,
                            ZQ_RESULT);
   /* END-MERGE-FOR-FR36_298770_new_sync_API */;
    #endif
  OD;
ELSE
  ZQ_RESULT := E_UNSUCC;
FI;

RETURN(ZQ_RESULT);

END Q_S0890_SYN_FILE;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0000_MAIN_CCRH                                   */
/*                                                                    */
/*     PROGRAMMER: JP QUINN                                           */
/*                                                                    */
/*                 LAST MODIFIED BY:                    DATE:         */
/*                                                                    */
/*     CREATION DATE: 96/10/24                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                THIS IS THE MAIN PROCEDURE OF THE MEASUREMENTS      */
/*                COLLECTOR HANDLER. ITS FUNCTION IS TO SERVICE       */
/*                INCOMMING MESSAGES BY CALLING THE APPROPRIATE       */
/*                PROCEDURE.                                          */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0100_WAIT_FOR_MSG                          */
/*                      Q_S0090_MSG_DEFER                             */
/*                      Q_S0010_INIT                                  */
/*                      Q_S0030_HANDLE_SM_ACT_REQ                     */
/*                      Q_S0380_HANDLE_TIME_OUT                       */
/*                      Q_S0310_PM_CC_RES_REQ                         */
/*                      Q_S0220_FILE_OPENED                           */
/*                      Q_S0230_FILE_CLOSED                           */
/*                      Q_S0370_STATE_MACHINE                         */
/*                      Q_S0040_GEN_ERR                               */
/*     CALLED FROM:                                                   */
/*                      G_S_FT59AL_CC_RESULTS_HANDLER                 */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0000_MAIN_CCRH : PROC();

DCL ZQ_EVENT            ZM_SCENARIO_EVENT;
DCL ZQ_HDL_PROC_ID      M_PROCESS_ID;
DCL ZQ_M_MSG_STATE      ZM_MSG_STATE;
DCL ZQ_MSG_NBR          M_MSG_NBR;
DCL ZQ_SCENARIO_STATE   ZM_SCENARIO_STATE;

/*START: IURG*/
DCL ZQ_PTR STRUCT (
   CASE OF
   : ZB_OFFS, ZB_SEGM INT,
   : ZB_PTR PTR
   ESAC);
/*END: IURG*/

Z_TRACE := H'0000;

L_INIT : DO FOR EVER;
   ZQ_MSG_NBR := Q_S0100_WAIT_FOR_MSG(Z_MSG_BUF_PTR);
   IF ZQ_MSG_NBR = ZS_0019_INIT_REQ THEN
      EXIT L_INIT;
   ELSE
      Q_S0090_MSG_DEFER(Z_MSG_BUF_PTR);
   FI;
OD L_INIT;

Q_S0010_INIT();

/*START: IURG*/
GET R_F_ACCESS WHERE (D_FAST_IDX = M_SBLTYPE(M_RID_R_BSS_PAR2));

LONG_INT(ZQ_PTR.ZB_PTR) := LONG_INT(R_F_ACCESS.D_ABS_BASE);
Z_FA_BSS_PAR2.ZB_TUPLE_PTR := ZQ_PTR.ZB_PTR;
Z_FA_BSS_PAR2.ZB_TUPLE_SIZE := R_F_ACCESS.D_SZTUP;
Z_FA_BSS_PAR2.ZB_TUPLE_NBR  := R_F_ACCESS.D_PRALLOC;
/*END: IURG*/

/* STRAT : DTC513 overload alarm */

GET R_F_ACCESS WHERE (D_FAST_IDX = INT(M_RID_R_CELL_MGT));
LONG_INT(ZQ_PTR.ZB_PTR) := LONG_INT(R_F_ACCESS.D_ABS_BASE);
Z_FA_CELL_MGT.ZB_TUPLE_PTR := ZQ_PTR.ZB_PTR;
Z_FA_CELL_MGT.ZB_TUPLE_SIZE := R_F_ACCESS.D_SZTUP;
Z_FA_CELL_MGT.ZB_TUPLE_NBR  := R_F_ACCESS.D_PRALLOC;

GET R_F_ACCESS WHERE (D_FAST_IDX = INT(M_RID_R_TRX_MGT));
LONG_INT(ZQ_PTR.ZB_PTR) := LONG_INT(R_F_ACCESS.D_ABS_BASE);
Z_FA_TRX_MGT.ZB_TUPLE_PTR := ZQ_PTR.ZB_PTR;
Z_FA_TRX_MGT.ZB_TUPLE_SIZE := R_F_ACCESS.D_SZTUP;
Z_FA_TRX_MGT.ZB_TUPLE_NBR  := R_F_ACCESS.D_PRALLOC;

/* END: DTC513 overload alarm */

L_MAIN_LOOP : DO FOR EVER ;

   ZQ_MSG_NBR      := Q_S0100_WAIT_FOR_MSG(Z_MSG_BUF_PTR);
   ZQ_M_MSG_STATE := ZE_TO_BE_PROCESSED ;

   IF Z_FMM_STATE/=ZE_ACTIVE AND
      ZQ_MSG_NBR /= ZS_0017_SM_ACT_REQ THEN
      ZQ_M_MSG_STATE :=ZE_CORRUPTED;
   FI;

   DO WHILE ZQ_M_MSG_STATE =ZE_TO_BE_PROCESSED;
      CASE ZQ_MSG_NBR OF
         (ZS_0017_SM_ACT_REQ):
            ZQ_M_MSG_STATE :=ZE_PROCESSED;
            Q_S0030_HANDLE_SM_ACT_REQ();
         (ZS_6836_TIME_OUT):
            ZQ_M_MSG_STATE := Q_S0380_HANDLE_TIME_OUT(ZQ_EVENT,
                                                      ZQ_HDL_PROC_ID);
         (ZS_1083_PM_CC_RES_REQ):
            ZQ_M_MSG_STATE := Q_S0310_PM_CC_RES_REQ();
            ZQ_SCENARIO_STATE := Q_S0880_STARTING_STATE(ZQ_EVENT);
         (ZS_0122_FILE_OPENED):
            ZQ_M_MSG_STATE:= Q_S0220_FILE_OPENED(ZQ_EVENT,
                                                 ZQ_HDL_PROC_ID);
         (ZS_0124_READ_REC_CNF):
            /* THESE MESSAGES ARE HANDLED IN LOCAL WAIT CASES */
            ZQ_M_MSG_STATE:=ZE_CORRUPTED;
         (ZS_0126_WRITE_REC_CNF):
            /* THESE MESSAGES ARE HANDLED IN LOCAL WAIT CASES */
            ZQ_M_MSG_STATE:=ZE_CORRUPTED;
         (ZS_0128_FILE_CLOSED):
            ZQ_M_MSG_STATE:= Q_S0230_FILE_CLOSED(ZQ_EVENT);
         ELSE
            ZQ_M_MSG_STATE:=ZE_CORRUPTED;
      ESAC;

      IF ZQ_M_MSG_STATE  = ZE_TO_BE_PROCESSED
      THEN
        Q_S0370_STATE_MACHINE(ZQ_EVENT,
                              ZQ_SCENARIO_STATE,
                              ZQ_HDL_PROC_ID);
        ZQ_M_MSG_STATE  :=ZE_PROCESSED;
      FI;/*ZQ_M_MSG_STAT "TO_BE _PROCESSED" WILL BE PROCESSED AGAIN*/

      IF ZQ_M_MSG_STATE  =ZE_CORRUPTED
      THEN
        Q_S0040_GEN_ERR(M_ERT0050_0808_MSG_UNEXPEC,
                        M_ERC6_USER_REC,
                        ZS_VOID,
                        ZQ_MSG_NBR ,
                        0);

         RET_MSG_BUF_WITH_UBUF(Z_MSG_BUF_PTR);
         Z_MSG_BUF_PTR := NULL;
      FI;
   OD;
OD L_MAIN_LOOP;

END Q_S0000_MAIN_CCRH;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0001_GET_OWN_LCE_ID                              */
/*                                                                    */
/*     PROGRAMMER: ZHU JUN                                            */
/*                                                                    */
/*     CREATION DATE: 05/08/15                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*  PERFORMS OWN_LCE_ID  RETRIEVAL                                    */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                                                                    */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                                                                    */
/*     CALLED FROM:                                                   */
/*                                                                    */
/*     PRIMITIVES CALLED:                                             */
/*                      OWN_PROCESS_ID                                */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0001_GET_OWN_LCE_ID: PROC();

DCL ZQ_OWN_IAD  M_OWN_IAD;
DCL ZQ_OWN_DISK M_DRIVE_NO;

 OWN_PROCESS_ID(Z_OWN_PID);

 P_YS8RAA_S010_GET_OWN_IAD(ZQ_OWN_IAD);

 DO WITH ZQ_OWN_IAD;

   GET R_CONF_CE WHERE (D_LCE_ID = B_LCE_ID);

   IF B_LCE_ID < R_CONF_CE.D_MATE_LCE
   THEN
     ZQ_OWN_DISK:=E_SSD_C;
   ELSE
     ZQ_OWN_DISK:=E_SSD_D;
   FI;

 OD;
 
 DO WITH Z_RESULT_FILE;
 
   ZB_FCB_INFO.B_DRIVE_NO := ZQ_OWN_DISK;
   
 OD;
 
END Q_S0001_GET_OWN_LCE_ID;

/**********************************************************************/
/*                                                                    */
/*          4.8  PROCESS BODY -- SUPERVISOR                           */
/*                                                                    */
/**********************************************************************/
/**********************************************************************/
/*                                                                    */
/*     SUPERVISOR_ENTRY: G_S_FT59AL_CC_RESULTS_HANDLER                */
/*                                                                    */
/*     PROGRAMMER: JP QUINN (ADC)                                     */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                 JP QUINN                            95/01/23       */
/*                                                                    */
/*     CREATION DATE: 96/10/24                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*     CONTAINING PROCEDURES:                                         */
/*                      Q_S0010_INIT                                  */
/*                      Q_S0020_INIT_FILE                             */
/*                      Q_S0030_HANDLE_SM_ACT_REQ                     */
/*                      Q_S0040_GEN_ERR                               */
/*                      Q_S0050_START_TIMER                           */
/*                      Q_S0060_DB_ERROR                              */
/*                      Q_S0070_WAIT_TIME                             */
/*                      Q_S0080_SET_HDL_PROC_ID                       */
/*                      Q_S0090_MSG_DEFER                             */
/*                      Q_S0100_WAIT_FOR_MSG                          */
/*                      Q_S0110_GET_USER_BUF                          */
/*                      Q_S0120_GET_WRITE_BUF                         */
/*                      Q_S0130_RET_ALL_BUF                           */
/*                      Q_S0140_OPEN_HIST_FILE                        */
/*                      Q_S0150_OPEN_2ND_HIS                          */
/*                      Q_S0160_READ_HIST_FILE                        */
/*                      Q_S0170_CLOSE_HIST_FILE                       */
/*                      Q_S0180_DEL_RES_FILE                          */
/*                      Q_S0190_OPEN_RES_FILE                         */
/*                      Q_S0200_WRITE_RES_FILE                        */
/*                      Q_S0210_CLOSE_RES_FILE                        */
/*                      Q_S0220_FILE_OPENED                           */
/*                      Q_S0230_FILE_CLOSED                           */
/*                      Q_S0240_CCRH_IS_ACTIVE                        */
/*                      Q_S0250_SET_R_PM_TASK                         */
/*                      Q_S0260_GET_TRXS_OF_A_CELL                    */
/*                      Q_S0270_BEQ_SEQ_FROM_CELL_IDX                 */
/*                      Q_S0280_GET_PM_SCOPE                          */
/*                      Q_S0290_GET_TRX_ID                            */
/*                      Q_S0300_SEND_PM_CC_RES_CNF                    */
/*                      Q_S0310_PM_CC_RES_REQ                         */
/*                      Q_S0320_START_RESULTS                         */
/*                      Q_S0330_GET_R_PM_ACT                          */
/*                      Q_S0340_CALC_END_COLL_TI                      */
/*                      Q_S0350_ADD_COLL_PERIOD                       */
/*                      Q_S0360_ADD_DAY                               */
/*                      Q_S0370_STATE_MACHINE                         */
/*                      Q_S0380_HANDLE_TIME_OUT                       */
/*                      Q_S0400_GET_ADJ_CELL_IDXS_SERVIN              */
/*                      Q_S0410_MARK_ADJ_LAC_CI                       */
/*                      Q_S0420_GET_ADJ_CELLIDX_UNMARKED              */
/*                      Q_S0430_ONE_ASCII                             */
/*                      Q_S0440_TWO_ASCII                             */
/*                      Q_S0450_FOUR_ASCII                            */
/*                      Q_S0460_CONVERT_TIME_ASCII                    */
/*                      Q_S0470_PM_TIME_TO_GT_TIME                    */
/*                      Q_S0480_AVRG_FOR_REP_PERIOD                   */
/*                      Q_S0490_CALCULATE_ACTUAL_REP_PER              */
/*                      Q_S0500_FILL_REC_HEAD                         */
/*                      Q_S0510_MAKE_RESULT_FILE                      */
/*                      Q_S0520_01_MAKE_RES_FILE_01                   */
/*                      Q_S0530_02_MAKE_RES_FILE_02                   */
/*                      Q_S0540_03_MAKE_RES_FILE_03                   */
/*                      Q_S0550_04_MAKE_RES_FILE_04                   */
/*                      Q_S0560_05_MAKE_RES_FILE_05                   */
/*                      Q_S0570_06_MAKE_RES_FILE_06                   */
/*                      Q_S0580_CHECK_TYPE_06_OVERFLOW                */
/*                      Q_S0590_07_MAKE_RES_FILE_07                   */
/*                      Q_S0600_08_MAKE_RES_FILE_08                   */
/*                      Q_S0610_09_MAKE_RES_FILE_09                   */
/*                      Q_S0620_CHECK_TYPE_09_OVERFLOW                */
/*                      Q_S0630_18_MAKE_RES_FILE_18                   */
/*                      Q_S0640_19_MAKE_RES_FILE_19                   */
/*                      Q_S0650_25_MAKE_RES_FILE_25                   */
/*                      Q_S0660_26_MAKE_RES_FILE_26                   */
/*                      Q_S0670_27_MAKE_RES_FILE_27                   */
/*                      Q_S0680_CHECK_TYPE_27_OVERFLOW                */
/*                      Q_S0690_28_MAKE_RES_FILE_28                   */
/*                      Q_S0700_CHECK_TYPE_28_OVERFLOW                */
/*                      Q_S0710_29_MAKE_RES_FILE_29                   */
/*                      Q_S0720_30_MAKE_RES_FILE_30                   */
/*                      Q_S0730_CHECK_TYPE_30_OVERFLOW                */
/*                      Q_S0740_100_MAKE_RES_FILE_100                 */
/*                      Q_S0750_CHECK_TYPE_100_OVERFLOW               */
/*                      Q_S0760_110_MAKE_RES_FILE_110                 */
/*                      Q_S0770_CHECK_TYPE_110_1_OVERFLO              */
/*                      Q_S0780_CHECK_TYPE_110_2_OVERFLO              */
/*                      Q_S0790_MAKE_RES_FILE_110_3                   */
/*                      Q_S0800_MAKE_RES_FILE_110_4                   */
/*                      Q_S0810_180_MAKE_RES_FILE_180                 */
/*                      Q_S0820_RECORD_FULL                           */
/*                      Q_S0830_CHECK_LAST_WRITE                      */
/*                      Q_S0840_CHECK_DPVAL                           */
/*                      Q_S0850_CHECK_3_INT_CNTR                      */
/*                      Q_S0860_INCREM_PTR                            */
/*                      Q_S0870_HIS_FILE_NUM                          */
/*                      Q_S0000_MAIN_CCRH                             */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0000_MAIN_CCRH                             */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/**************** END OF SUPERVISOR_ENTRY HEADER **********************/

DUMMY_PROC:PROC();

    /*Keep multipol happy*/

    IF (FALSE) THEN
    GET R_BEQ_MGT;
    GET R_ABIS_INF;
    GET R_F_ACCESS;
    FI;

END DUMMY_PROC;
INIT DB_AREAS;

Z_FMM_STATE               := ZE_INIT;
Z_MSG_BUF_PTR             := NULL;

DO WITH Z_TRXS_OF_A_CELL;
  ZB_NUMBER_OF_TRXS := 0;
  ZB_CELL_IDX       := M_NULL_CELL_IDX;

OD;

Q_S0000_MAIN_CCRH();

/**********************************************************************/
/*                                                                    */
/*          4.9  END OF SUPERVISOR PROCESS                            */
/*                                                                    */
/**********************************************************************/

END G_S_FT59AL_CC_RESULTS_HANDLER;

/**********************************************************************/
/*                                                                    */
/*          4.10 END OF SUPERVISOR MODULE                             */
/*                                                                    */
/**********************************************************************/

END H_S_FT59ZZ_CC_RESULTS_HANDLER;

/**********************************************************************/
/*                                                                    */
/*          5.   END FMM                                              */
/*                                                                    */
/**********************************************************************/

END_FMM;



