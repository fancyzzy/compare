/************************* MADSIX INFORMATION *************************/        
/* MADSIX STYLE VERSION: 3.7                                          */        
/* UPDATED BY MADSIX VERSION: 3.7.2                                   */        
/* USED LOADMODULE: PB04AD10                                          */        
/* PSEUDO CODE: INLINE                                                */        
/********************* END OF MADSIX INFORMATION **********************/        
/*********************** COPYRIGHT INFORMATION ************************/        
/*                                                                    */        
/*                                                                    */        
/*       INFORMATION INCLUDED IN THIS DOCUMENT IS THE EXCLUSIVE       */        
/*       PROPERTY OF ALCATEL NV OR OF A COMPANY OF THE ALCATEL        */        
/*       NV GROUP. COPYING, USE OR DISCLOSURE OF ITS CONTENTS,        */        
/*       EVEN IN PART, ARE NOT PERMITTED WITHOUT THE PRIOR            */        
/*       WRITTEN AGREEMENT OF THE PROPRIETOR.                         */        
/*                                                                    */        
/*                                                                    */        
/******************** END OF COPYRIGHT INFORMATION ********************/        
/*********************** SHORT IDENTIFICATION *************************/        
/*                                                                    */        
/*        CCCC   CCCC  DDDD    CCCC         SSSS    SSSS   M     M    */        
/*       C      C      D   D  C            S       S       MM   MM    */        
/*       C      C      D   D  C            S       S       M M M M    */        
/*       C      C      D   D  C             SSSS    SSSS   M  M  M    */        
/*       C      C      D   D  C                 S       S  M     M    */        
/*       C      C      D   D  C                 S       S  M     M    */        
/*        CCCC   CCCC  DDDD    CCCC         SSSS    SSSS   M     M    */        
/*                                                                    */        
/******************* END OF SHORT IDENTIFICATION **********************/        
/**********************************************************************/        
/*                                                                    */        
/*    SSM_PROCEDURE_HEADER: CC DATA COLLECTOR                         */        
/*                                                                    */        
/*    DESCRIPTIVE NAME    : MSS-CCDC_SSM                              */        
/*                                                                    */        
/*    REG NUMBER          : 215 71977                                 */        
/*                                                                    */        
/*    PDS MEMBER          : GDXBYWXX                                  */        
/*                                                                    */        
/*    PROGRAMMERS         : CHEN ZHANGYI                              */        
/*                                                                    */        
/*    CREATED             : 29/03/05                                  */        
/*                                                                    */        
/*    LAST UPDATED        : 13/01/06                                  */        
/*                                                                    */        
/*--------------------------------------------------------------------*/        
/*                                                                    */        
/*    FILE DOCUMENT:         CATEG.: REG NO.:       ED.   PDS MEMBER: */        
/*                                                  NO.:  (CIPHER,    */        
/*                                                         VARIANT,   */        
/*                                                         PCS)       */        
/*                                                                    */        
/*    PK DOCUMENT   (STAND ALONE)    XXX XXXXX XXXX XX    XXXX        */        
/*    PW DOCUMENT   (STAND ALONE)    XXX XXXXX XXXX XX    XXXX        */        
/*    DESCRIPTOR (SSM)     SSMD-     215 72020            GDY4 YX 04  */        
/*    SOURCE (CHILL)        MSS-     215 71977            GDXB AZ 2A  */        
/*    OBJECT (UNLINKED)      MO-     XXX XXXXX            XXXX XX XX  */        
/*    SPS, OBJECT (LINKED)  MLO-     215 71980      MX    GDXE AZ 2A  */        
/*    LOADM                                               FKB6 ZX 01  */        
/*    CMD STR                                             FM1W ZX 01  */        
/*    MAPEDIT/PKGEDIT                                     FGS7 ZX 01  */        
/*    ERRI                 ERRI-     215 72021            GDY5 ZX 01  */        
/*                                                                    */        
/*--------------------------------------------------------------------*/        
/*                                                                    */        
/*    SSM IDENTIFICATION       -    0185                              */        
/*                                                                    */        
/*--------------------------------------------------------------------*/        
/*                                                                    */        
/*                                                                    */        
/*--------------------------------------------------------------------*/        
/*                                                                    */        
/*    SSM PROCEDURE IDENTIFICATION                                    */        
/*                                                                    */        
/*    P_GDXBYX_INIT_SSM                                -  23680       */        
/*    P_GDXBYX_CELL_LIST                               -  23681       */        
/*    P_GDXBYX_UPD_CCI_STD_CTRS                        -  23682       */        
/*    P_GDXBYX_UPD_CCI_DETAIL_CTRS                     -  23683       */        
/*    P_GDXBYX_UPD_CCI_T26_CTRS                        -  XXXXX       */        
/*    P_GDXBYX_UPD_CCI_EME_CTRS                        -  XXXXX       */        
/*    P_GDXBYX_UPD_CCI_TP_CTRS                         -  XXXXX       */        
/*    P_GDXBYX_UPD_CCI_TC_MTP2_CTRS                    -  XXXXX       */        
/*                                                                    */        
/************************ END OF SSM HEADER ***************************/        
/**********************************************************************/        
/*                START OF TOP LEVEL DOCUMENTATION                    */        
/**********************************************************************/        
/*                                                                              
1. DESCRIPTIVE NAME - SSM                                                       
   ----------------------                                                       
                                                                                
MSS-CC_DATA_COLLECTOR                                                           
                                                                                
2. INTRODUCTION                                                                 
   ------------                                                                 
                                                                                
THIS SSM IS ONLY USED BY FMM CC_DATA_COLLECTOR. IT PROCESSES  THE               
POLLING RESPONS CONTENT.                                                        
                                                                                
                                                                                
3. FUNCTIONAL DESCRIPTION                                                       
   ----------------------                                                       
                                                                                
                                                                                
*/                                                                              
/*                                                                              
\* THIS IS THE MADSIX GENERATED XPA AREA                              *\        
                                                                                
                                                                                
                                                                                
MESSAGES USED IN INTERFACE_PROC: P_GDXBYX_INIT_SSM                              
          NONE                                                                  
                                                                                
                                                                                
DATA BASE ACCESSES USED IN INTERFACE_PROC: P_GDXBYX_INIT_SSM                    
                                                                                
R_F_ACCESS                                                                      
     P_GDXBYX_INIT_SSM                      GET                                 
                                                                                
                                                                                
SSMS CALLED FROM INTERFACE_PROC: P_GDXBYX_INIT_SSM                              
                                                                                
          YTBNAA                                                                
          YTBGAA                                                                
          YTBKAA                                                                
          YTBRAD                                                                
                                                                                
                                                                                
MESSAGES USED IN INTERFACE_PROC: P_GDXBYX_CELL_LIST                             
          NONE                                                                  
                                                                                
                                                                                
DATA BASE ACCESSES USED IN INTERFACE_PROC: P_GDXBYX_CELL_LIST                   
          NONE                                                                  
                                                                                
                                                                                
SSMS CALLED FROM INTERFACE_PROC: P_GDXBYX_CELL_LIST                             
                                                                                
          YTBNAA                                                                
          YTBRAD                                                                
                                                                                
                                                                                
MESSAGES USED IN INTERFACE_PROC: P_GDXBYX_UPD_CCI_STD_CTRS                      
          NONE                                                                  
                                                                                
                                                                                
DATA BASE ACCESSES USED IN INTERFACE_PROC: P_GDXBYX_UPD_CCI_STD_CTRS            
                                                                                
R_CE_DYST                                                                       
     P_GDXBYX_UPD_CCI_STD_CTRS              GET                                 
                                                                                
                                                                                
SSMS CALLED FROM INTERFACE_PROC: P_GDXBYX_UPD_CCI_STD_CTRS                      
                                                                                
          YTBNAA                                                                
          YTBGAA                                                                
          YTBRAD                                                                
                                                                                
                                                                                
MESSAGES USED IN INTERFACE_PROC: P_GDXBYX_UPD_CCI_DETAIL_CTRS                   
          NONE                                                                  
                                                                                
                                                                                
DATA BASE ACCESSES USED IN INTERFACE_PROC: P_GDXBYX_UPD_CCI_DETAIL_CTRS         
          NONE                                                                  
                                                                                
                                                                                
SSMS CALLED FROM INTERFACE_PROC: P_GDXBYX_UPD_CCI_DETAIL_CTRS                   
                                                                                
          YTBNAA                                                                
          YTBGAA                                                                
          YTBRAD                                                                
          
          
MESSAGES USED IN INTERFACE_PROC: P_GDXBYX_UPD_CCI_T26_CTRS                   
          NONE                                                                  
                                                                                
                                                                                
DATA BASE ACCESSES USED IN INTERFACE_PROC: P_GDXBYX_UPD_CCI_T26_CTRS         
          NONE                                                                  
                                                                                
                                                                                
SSMS CALLED FROM INTERFACE_PROC: P_GDXBYX_UPD_CCI_T26_CTRS                   
                                                                                
          YTBNAA                                                                
          YTBGAA                                                                
          YTBRAD                                                                
          
\* END OF THE MADSIX GENERATED XPA AREA                               *\        
*/                                                                              
/**********************************************************************/        
/*                END OF TOP LEVEL DOCUMENTATION                      */        
/**********************************************************************/        
/********************** CHANGE REPORT HISTORY *************************/        
/*                                                                    */        
/*                                                                    */        
/*                                                                    */        
/**********************************************************************/        
/*--------------------------------------------------------------------*/        
/* UPDATED BY   | DATE      | FAULT REP  | CHANGE REQ  | GSM-VERSION  */        
/*--------------------------------------------------------------------*/        
/*              |           |            |             |              */        
/*--------------------------------------------------------------------*/        
/*              |           |            |             |              */        
/****************** END OF CHANGE REPORT HISTORY **********************/        
/************** MODULE UPDATE REPORT FOR FAST REBUILD *****************/        
/*                                                                   **/        
/**********************************************************************/        
/* PCS CHG  |  DATE    | UPDATED BY                                  **/        
/*===================================================================**/        
/* GDXBZQ1A | 15.09.99 | L DIERICK                                   **/        
/*===================================================================**/        
/*          | FIRST DELIVERY CCDC SPLIT /DMD YTL3AQ33  STEP 1        **/        
/*          |                                                        **/        
/*===================================================================**/        
/* GDXBZQ02 | 01.10.99 | L DIERICK                                   **/        
/*===================================================================**/        
/*          | FIRST DELIVERY CRQ FILE FORMAT YTL3AQ34  STEP 1        **/        
/*          | ADD/DELETE CELL/TRX -> FOR ADDED, DELETED CELLS/TRXS,  **/        
/*          | CTRS MUST BE SET TO INVALID                            **/        
/*===================================================================**/        
/* GDXBZQ2A | 08.10.99 | L DIERICK                                   **/        
/*===================================================================**/        
/*          | ADD/DELETE TRX FOR DETAILED TYPES TOO (T3,T4,T5)       **/        
/*===================================================================**/        
/* GDXEZQ2B | 08.10.99 | L DIERICK                                   **/        
/*===================================================================**/        
/*          | CONTEXT CHANGES ONLY SOURCE GDXBZQ2A (NO IMPACT)       **/        
/*===================================================================**/        
/* GDXBZQ2C | 26.11.99 | L DIERICK                                   **/        
/*===================================================================**/        
/*          | S0113 RETURNS THE BAD TUPLE NUMBER IF TWO TUPLES WITH  **/
/*          | THE SAME MEASUREMENT TYPE IN R_PM_ACT                  **/
/*          | STATEMENT 'ZF_ACT_IDX := ...' DISPLACED IN S0113       **/        
/*===================================================================**/        
/* GDXBZQ2D | 07.01.00 | S DONIZETTI                                 **/        
/*===================================================================**/        
/*          | FR67739 - MC24, MC250,MC26,MC27 ALWAYS SET TO INVALID  **/
/*          | WHEN THERE ARE MORE THAN 60 CELLS IN FIRST POLLING     **/
/*          | MSG COMING FROM TCHRM_LDC ON SYS_CPR                   **/
/*          | Q_S0550 MODIFIED                                       **/
/*===================================================================**/        
/* GDXBZQ2E | 25.01.00 | S DONIZETTI                                 **/        
/*===================================================================**/        
/*          | FR67739 - C24, C250,C26,C27 ALWAYS SET TO INVALID      **/
/*          | WHEN THERE ARE MORE THAN 60 CELLS IN FIRST POLLING     **/
/*          | MSG COMING FROM TCHRM_LDC ON SYS_CPR                   **/
/*          | Q_S0514 MODIFIED                                       **/
/*===================================================================**/        
/* GDXBAT3F | 19.02.01 | P BLOMMAERT                                 **/        
/*===================================================================**/        
/*          | CORRECT FOR ERR REP. 805, 809, 845, 846, 828, 824, 869 **/
/*===================================================================**/        
/* GDXBAV1A | 06.09.02 | CHEN ZHANGYI                                **/        
/*===================================================================**/        
/*          | FIRST DELIVERY OF B8                                   **/
/*===================================================================**/        
/* GDXBAV02 | 17.09.02 | CHEN ZHANGYI                                **/        
/*===================================================================**/        
/*          | CHANGE H_M_GDXBZT_CCDC_SSM TO H_M_GDXBAV_CCDC_SSM      **/
/*===================================================================**/        
/* GDXBAV2A | 05.11.02 | CHEN ZHANGYI                                **/        
/*===================================================================**/        
/*          | CORRECT FOR WITTS ERR REP. 0032                        **/
/*          | Q_S0525_UPD_T4_DET_TCU MODIFIED                        **/
/*===================================================================**/        
/* GDXBAV03 | 11.11.02 | CHEN ZHANGYI                                **/        
/*===================================================================**/        
/*          | ADD LCS COUNTERS                                       **/
/*          | CHANGE BASE ON CR - 3BKA20CBR117323                    **/
/*          | CHANGE MC780C/D/E/F TO MC380C/D/E/F                    **/
/*===================================================================**/        
/* GDXBAV3A | 04.12.02 | CHEN ZHANGYI                                **/        
/*===================================================================**/        
/*          | CORRECT WITTS ER 47                                    **/
/*          | Q_S0485_UPD_T26_TCU MODIFIED                           **/
/*===================================================================**/        
/* GDXBAV3A | 09.12.02 | CHEN ZHANGYI                                **/        
/*===================================================================**/        
/*          | CORRECT WITTS ER 76                                    **/
/*          | Q_S0485_UPD_T26_TCU MODIFIED                           **/
/*===================================================================**/        
/* GDXBYV01 | 11.02.03 | CHEN ZHANGYI                                **/        
/*===================================================================**/        
/*          | FIRST DELIVERY OF B8 PKG6                              **/
/*===================================================================**/        
/* GDXBYV02 | 11.02.03 | CHEN ZHANGYI                                **/        
/*===================================================================**/        
/*          | CORRECT WITTS ER 434                                   **/
/*          | Q_S0581_UPD_CCI_TCH_TYPE110_2 MODIFIED                 **/
/*===================================================================**/        
/* GDXBYV2A | 30.09.03 | CHEN ZHANGYI                                **/        
/*===================================================================**/        
/*          | CR 20/131170: REMOVAL OF COUNTER (M)N2.1 FROM THE      **/
/*          | BLOCK LAYOUT;                                          **/
/*===================================================================**/        
/* GDXBAW01 | 01.04.04 | CHEN ZHANGYI                                **/        
/*===================================================================**/        
/*          | UPDATED FOR B9 PKG1                                    **/
/*===================================================================**/ 
/* GDXBAW1A | 08.09.04 | CHEN ZHANGYI                                **/        
/*===================================================================**/        
/*          | CORRECT WITTS ER 0289                                  **/
/*          | Q_S0615_UPD_T33_TCU_INVALID MODIFIED                   **/
/*          | Q_S0620_UPD_T33_TCU MODIFIED                           **/
/*          | CORRECT WITTS ER 0295                                  **/
/*          | Q_S0020_ADD_DP_VALUES MODIFIED                         **/
/*          | Q_S0040_ADD_INT_TO_INT MODIFIED                        **/
/*          | Q_S0060_ADD_LONG_INT MODIFIED                          **/
/*          | Q_S0080_ADD_INT_TO_DPVAL MODIFIED                      **/
/*===================================================================**/ 
/* GDXBZW01 | 15.09.04 | CHEN ZHANGYI                                **/        
/*===================================================================**/        
/*          | UPDATED FOR B9 PKG2                                    **/
/*===================================================================**/ 
/* GDXBZW1A | 10.12.04 | ZHU JUN                                     **/        
/*===================================================================**/        
/*          | CR 20/151977: MC924a is introduced in type 110.        **/
/*===================================================================**/
/* GDXBZW1A | 10.12.04 | ZHU JUN                                     **/        
/*===================================================================**/        
/*          | CR 20/158995: Add provision for 2G to 3G HO counters   **/
/*===================================================================**/
/* GDXBZW1C | 07.07.05 | SHILPA                                      **/        
/*===================================================================**/        
/*          | FR 36/165326: Wrong values for the counter V22, which  **/
/*              became higher than MAX_VGCS_TS in the cell.          **/
/*          | FR 36/164931: V21 AV_PARALLEL_TCH_VGC  counter is      **/
/*              higher then V22 MAX_PARALLEL_TCH_VGCS                **/
/*          | WITTS 1092:   Wrong PM counter V022                    **/
/*===================================================================**/
/* GDXBXV1C | 21.02.05 | CHEN ZHANGYI                                **/        
/*===================================================================**/        
/*          | CHANGE FOR MXBSC CPF E2RL                              **/
/*===================================================================**/        
/* GDXBXV10 | 21.02.05 | CHEN ZHANGYI                                **/        
/*===================================================================**/        
/*          | FIRST DELIVERY FOR MX B8FULL                           **/
/*===================================================================**/        
/* GDXBXVAA | 28.03.05 | CHEN ZHANGYI                                **/        
/*===================================================================**/        
/*          | REMOVE C153A/B IN TPGSM INTERFACE                      **/
/*===================================================================**/        
/* GDXBYW01 | 06.06.05 | ZHU JUN                                     **/        
/*===================================================================**/        
/*          | FIRST DELIVERY FOR MX B9                               **/
/*===================================================================**/
/*GDXBZW02 | 08.09.05 | MI NAN                                       **/
/*          |CR 20/164795 FOR 2G 3G HANDOVER                         **/
/*===================================================================**/
/*GDXBAX1A | 09.08.06 | SRINIVAS                                     **/
/*         | ER595 CR188510                                          **/
/*===================================================================**/        
/* GDXBYWDA | 06.06.05 | ZHU JUN                                     **/        
/*===================================================================**/        
/*          | WITTS 6722, WITTS 6724, WITTS 6602                     **/
/*===================================================================**/
/*GDXBZW02 | 08.09.05 | MI NAN                                       **/
/*          |CR 20/164795 FOR 2G 3G HANDOVER                         **/
/*===================================================================**/
/*===================================================================**/        
/* GDXBYWDA | 06.06.05 | ZHU JUN                                     **/        
/*===================================================================**/        
/*          | WITTS 6722, WITTS 6724, WITTS 6602                     **/
/*===================================================================**/
/* GDXBZX01 | 15/05/06 | MALA                                        **/
/* REASON   | FIRST DELIVERY FOR MX B10                              **/
/*===================================================================**/
/* GDXBZX1B | 05/06/06 | MALA                                        **/
/* REASON   | ER263 CHANGE IN MODE "CM_FY32_PM_MAX_CIC               **/
/*===================================================================**/
/* GDXBYX01 | 15/06/06 | MALA                                        **/
/* REASON   | FIRST DELIVERY FOR B10MXMR2                            **/
/*===================================================================**/
/* GDXBYX02 | 27/07/06 | MALA                                        **/
/* REASON   | ER510 IMPLEMENTED IN MR2 MT AND                        **/
/*            DMD IMPACT FOR YTL3YX07                                **/
/*===================================================================**/
/* GDXBYX02 | 07/09/06 | MALA                                        **/
/* REASON   | ER519 IMPLEMENTED                                      **/
/*            DMD IMPACT FOR YTL3YX10                                **/
/*===================================================================**/
/* GDXBYX1B | 07/09/06 | MALA                                        **/
/* REASON   | ER519 IMPLEMENTED                                      **/
/*            DMD IMPACT FOR YTL3YX10                                **/
/*===================================================================**/
/* GDXBYX1C | 04/12/06 | MALA                                        **/
/* REASON   | ER1210:TO MAKE IT INLINE WITH PM.CHH                   **/
/*===================================================================**/
/* GDXBYX1D | 13/02/07 | AKSHAY                                      **/
/* REASON   | CR1480:DMD IMPACT FOR YTL3YX11                         **/
/*===================================================================**/        
/* GDXBZX1C | 06.06.19 | MALA                                        **/        
/*===================================================================**/        
/*          | TO MAKE IT INLINE WITH PM.CHH(FR185495)                **/
/*===================================================================**/        
/* GDXBZX1D | 06.08.25 | AKSHAY                                      **/        
/*          | MERGE FROM BSCSAX01D FOR CR20/188510 & ER545           **/
/*===================================================================**/
/* GDXBZX1E | 06.09.25 | MALA                                        **/
/*          | RT TRACE CR0620                                        **/
/*===================================================================**/
/* GDXBZX1F | 23.10.06 | SRINIVAS                                    **/
/*          | DMD IMPACT ZX13                                        **/
/*===================================================================**/
/* GDXBZX1G | 01.12.06 | SRINIVAS                                    **/
/*          | IMPACTED BY PM.CHH FOR DMD ZX14                        **/
/*===================================================================**/
/* GDXBZX1H | 03.01.07 | SRINIVAS                                    **/
/*          | CR20/195110 NEW MULTIPLE PAGING COMMAND                **/
/*          | DMD IMPACT FOR ZX15                                    **/
/*===================================================================**/
/* GDXBZX1I | 09.02.07 | SRINIVAS                                    **/
/*          | ER1549 TO MAKE IT INLINE WITH LATEST PM.CHH            **/
/*===================================================================**/
/* GDXBZX1J | 08.03.07 | MALA                                        **/
/*          | CR20/200567 same as G2 CR20/203395                     **/
/*===================================================================**/
/* GDXBZX1K | 26.03.07 | SRINIVAS                                    **/
/*          | CR20/207886 X25 ALWAYS 1                               **/
/*===================================================================**/
/* GDXBAZ01 | 27/07/07 | SRINIVAS                                    **/
/*          | FIRST DELIVERY FOR B11 MX MR1                          **/
/*===================================================================**/
/* GDXBAZ2A | 23/11/07 | SRINIVAS                                    **/
/*          | B11 IP FEATURE                                         **/
/*===================================================================**/
/* GDXBZZ1E | 27/04/08 | SHAILESH                                    **/
/*          | MERGE FR20/235962 and FR20/235960 FIX                  **/
/*===================================================================**/
/*===================================================================**/
/*GDXBZZ1F | 10.05.08 | SHAILESH                                     **/
/*         | FOR CR20/233490 MERGE FROM G2                           **/
/*===================================================================**/
/*GDXBZZ   | 06.11.08 | AKSHAY                                       **/
/*         | FOR FR36/258183                                         **/
/*         | A SYN CM_FY32_PM_MAX_CELLS_PER_TCHRM_LDC_UB(56) IS USED **/
/*         | FOR USER BUFFER AND AT CCDC_SSM PM USE A CONDITION      **/
/*         | CHECK WITH SYN M_MAX_CELLS_PER_USR_BUF(50).SO THERE     **/
/*         | WAS A MISMATCH IN THE VALUES.                           **/
/*===================================================================**/
/* GDXBAX6E | 14/12/08 | AMRITPAL                                    **/
/*          | CR260349 | Implementation of counter to monitor        **/
/* 	    | "SDCCH Assignment Request" with cause Location Area    **/
/*          | update, in order to calculate number of LAU failures.  **/
/*          | MC964                                                  **/
/*===================================================================**/
/*GDXBZZ   | 06.07.09 | RAVI                                         **/
/*         | FOR CR36/278410 |  Trace Improvement                    **/
/*===================================================================**/
/*GDXBZZ   | 06.07.09 | SRINIVAS                                     **/
/*         | FOR FR36/283265                                         **/
/*===================================================================**/
/*GDXBZZ   | 08.01.10 | AMITABH                                      **/
/*         | MERGE FOR CR20/279889, CR20/279046                      **/
/*===================================================================**/
/* GDXBZZ  | 01/03/10 | SRINIVAS                                     **/
/*         | CR20/286418 - More Incoming liks per cell               **/
/*         | FR20/292314                                             **/
/*===================================================================**/
/*GDXBAZXX | WI_ZZ3E | 29.01.10 | AMITABH                            **/
/*         | FOR CR36/288765                                         **/
/*===================================================================**/
/*GDXBAZXX | WI_ZZ5H | 22.03.10 | AMRITPAL                           **/
/*         | FOR FR36/294844                                         **/
/*===================================================================**/
/*GDXBAZXX | WI_ZZ5J | 10.05.10 | SRINIVAS                           **/
/*         | FOR CR20/293868                                         **/
/*===================================================================**/
/*GDXBAZXX  | WI_ZZAB | 05.08.10 | RAJASHRI                          **/
/*REASON    | FOR CR20/299359 | Lb INTERFACE                         **/
/*          | FOR FR 3BKA20FAG300270                                 **/
/*PACKAGE   | AZ20A_003                                              **/
/*===================================================================**/
/*GDXBAZXX  | WI_ZZAB | 06.08.10 | RAJASHRI                          **/
/*REASON    | FOR CR - 298730 | IURG                                 **/
/*PACKAGE   | AZ20A_003                                              **/
/*===================================================================**/
/**********************************************************************/
/*GDXBAZXX  | WI_AL1B | 20.10.10 | VINEELA                           **/
/*REASON    | MERGE FOR CR20/289215 CR20/289215 FROM B11_MX_MR2_ED2  **/
/*          | MERGE FOR 3BKA20FAG300338 FROM B11_MX_MR2_ED2          **/
/*PACKAGE   | AL01A/001						     **/
/*===================================================================**/
/*GDXBAZXX | WI_ZZAE | 23.11.10 | PURNA                              **/
/*         | MERGE FOR FR36/303262                                   **/
/*===================================================================**/
/*GDXBAZXX  | WI_ZZAG | 17.12.10 | VINEELA                           **/
/*REASON    | FR36/304499 AND MERGE FOR FR36/304340                  **/
/*PACKAGE   | AZ20E/001                                              **/
/*===================================================================**/
/*===================================================================**/
/*GDXBAZXX  | WI_AL02 | 06.01.11 | VINEELA                           **/
/*REASON    | MERGE FOR CR36/302024, CR36/303052, FR36/303261,       **/
/*          | FR36/303262, FR36/304499, FR36/304340 AND FR36/304874  **/
/*          | FROM B11_MX_MR2_ED2 AZ20E/001                          **/
/*PACKAGE   | AZ02A/001                                              **/
/*===================================================================**/
/**********************************************************************/
/*GDXBAZXX  | 23/12/2010 | AMITABH                                   **/
/*REASON    | AUPOIP FEATURE                                         **/
/*GDXBAZXX | WI_ZZAE | 23.11.10 | PURNA                              **/
/*         | MERGE FOR FR36/303262                                   **/
/*===================================================================**/
/*GDXBAZXX  | WI_ZZAG | 17.12.10 | VINEELA                           **/
/*REASON    | FR36/304499 AND MERGE FOR FR36/304340                  **/
/*PACKAGE   | AZ20E/001                                              **/
/*===================================================================**/
/*GDXBAZXX  | WI_AL2D | 08.04.11 |    ATMARAM                        **/
/*REASON    | FR36/307843,FR36/30305796,CR36/307898,FR36307401       **/
/*          | FR36307402                                             **/
/*PACKAGE   | AL02C/001                                              **/
/*===================================================================**/
/*GDXBAZXX  | WI_AL2E | 06.05.11 | ATMARAM                           **/
/*REASON    | 3BKA36FBR308293                                        **/
/*PACKAGE   | AL02D/001                                              **/
/*===================================================================**/
/*GDXBAZXX  | WI_AL2F | 06.06.11 | ASHWINI                           **/
/*REASON    | 3BKA36FBR309170                                        **/
/*PACKAGE   | AL02F/001                                              **/
/*===================================================================**/
/*GDXBAZXX  | WI_AL2I | 24.06.11 | ATMARAM                           **/
/*REASON    | Impacted by DMD 14                                     **/
/*PACKAGE   | AL02G/001                                              **/
/*===================================================================**/
/*GDXBAZXX  | WI_ALFB | 21/09/11 | ATMARAM                           **/
/*REASON    | 3BKA36CBR312499 & PM.CHH IMPACT                        **/
/*PACKAGE   | AL15D/001                                              **/
/*GDXBAZXX  | WI_AL2I |22.07.11 | ATMARAM                            **/
/*REASON    | Impacted by DMD AL14                                   **/
/*PACKAGE   | AL02H/001                                              **/
/*===================================================================**/
/*GDXBAZXX  | WI_AL2M |14.10.11 | SUMIT                              **/
/*REASON    | 3BKA36FBR313766                                        **/
/*PACKAGE   | AL02M/001                                              **/
/*===================================================================**/
/*GDXBAZXX  | WI_AL04 |08.11.11 | SWARNA                             **/
/*REASON    | Impacted by DMD AL40 & pm.chh                          **/
/*PACKAGE   | AL04A/001                                              **/
/*GDXBAZXX  | WI_AL02 |11.11.11 | KIRAN                              **/
/*REASON    | IMPACTED BY DMD AL31                                   **/
/*PACKAGE   | AL02O/001                                              **/
/*===================================================================**/
/*GDXBAZXX  | WI_AL04 |23.12.11 | BALA                               **/
/*REASON    | Impacted by DMD AL42 & pm.chh for CR20/313054          **/
/*PACKAGE   | AL04B/001                                              **/
/*===================================================================**/
/*GDXBAZXX  | WI_AL4F |17.02.2012 | KAVYA                            **/
/*REASON    | Impacted by DMD AL43, DCT00633131.01  & PM.chh impact  **/
/*PACKAGE   | AL04E/001                                              **/
/*===================================================================**/
/*GDXBAZXX  | WI_AL04 |07.03.12 | BALA                               **/
/*REASON    | Impacted by DCTPD000646615                             **/
/*PACKAGE   | AL04D/002                                              **/
/*===================================================================**/
/* GDXBAZXX | WI_AL4G | 12/03/2012 |                                 **/
/* REASON   | IMPACTED FOR DCT6451031,CR649460, DCT646615            **/
/*              & DCT609262                                          **/
/* PACKAGE  | AL04F/001                                              **/
/*===================================================================**/
/*GDXBAZXX  | WI_AL4H | 21.03.2012 | KAVYA                           **/
/*REASON    | Impacted by DMD AL44,  CR 650353                       **/
/*PACKAGE   | AL04G/001                                              **/
/*===================================================================**/
/* FT58AZXX | WI_ALEA | 18/05/2012 | KAVYA                           **/
/* REASON   | IMPACTED FOR DMD AL95, CR599628 & PM.CHH               **/
/* PACKAGE  | AL16F/001                                              **/
/*===================================================================**/
/* FT58AZXX | WI_AL6D | 28/06/2012 | KAVYA                           **/
/* REASON   | IMPACTED FOR DMD AL63, DCTPD00740338, DCTPD00725623,   **/
/*				DCTPD00751566, AL04J Merge & PM.CHH  **/
/* PACKAGE  | AL06C/001                                              **/
/*===================================================================**/
/* FT58AZAL | WI_AL6E | 20/07/2012 | NUPUR                           **/
/* REASON   | AL04K merge  & PM.CHH                                  **/
/* PACKAGE  | AL06D/001                                              **/
/*===================================================================**/
/*===================================================================**/
/* FT58AZAL | WI_AL6F | 09/08/2012 | NUPUR                           **/
/* REASON   | DMD AL64,761944.01,740338.01,769711.01,771882.01,      **/ 
/*                   769780.01 & PM.CHH                              **/ 
/* PACKAGE  | AL06E/001                                              **/
/*===================================================================**/
/* FT58AZXX | WI_ZN01 | 24/09/2012 | KAVYA                           **/
/* REASON   | IMPACTED FOR DMD ZN02, DCTPD00599628 & PM.CHH          **/
/* PACKAGE  | AN10B/001                                              **/
/*===================================================================**/

/**********************************************************************/
/**********************************************************************/
/*                                                                    */        
/*  ERROR POINTS FOR FMM - MSF-CC_DATA_COLLECTOR                      */        
/*                                                                    */        
/**********************************************************************/        
/*ERROR *  INPUT MSG * ERROR REASON   * ERROR TYPE                    */        
/*POINT *   OR CALL  *                *                               */        
/**********************************************************************/        
/* 01   * Q_S0024    * NO RSMB        * NREC, M_ERT1068               */ 
/* 07   * Q_S0304    * 0125_WRITE_REC * REC,  M_ERT0039               */        
/* 08   * Q_S0308    * 0123_READ_REC  * REC,  M_ERT0039               */        
/* 09   * Q_S0397    * INVALID SEQ NBR* REC,  M_ERT0039               */        
/* 10   * Q_S0400    * INVALID LDC TYP* REC,  M_ERT0019               */        
                                                                                
/* 11   * Q_S0404    * INVALID SEQ NBR* REC,  M_ERT0019               */        
/* 12   * Q_S0405    * INVALID LDC    * REC,  M_ERT0019               */        
/* 14   * Q_S0451    * INVAL NBR CELLS* REC,  M_ERT0019               */        
/* 15   * Q_S0452    * INVAL NBR CELLS* REC,  M_ERT0019               */        
/* 16   * Q_S0453    * INVAL NBR CELLS* REC,  M_ERT0019               */        
/* 17   * Q_S0454    * INVAL NBR CELLS* REC,  M_ERT0019               */        
/* 18   * Q_S0460    * INVAL NBR CELLS* REC,  M_ERT0019               */        
/* 19   * Q_S0465    * INVAL NBR CELLS* REC,  M_ERT0019               */        
                                                                                
/* 21   * Q_S0473    * INVAL NBR CELLS* REC,  M_ERT0019               */        
/* 22   * Q_S0474    * INVAL NBR CELLS* REC,  M_ERT0019               */        
/* 23   * Q_S0485    * INVAL NBR CELLS* REC,  M_ERT0019               */        
/* 25   * Q_S0490    * INVAL NBR CELLS* REC,  M_ERT0019               */        
                                                                                
/* 30   * Q_S0506    * INVAL NBR CELLS* REC,  M_ERT0019               */        
/* 31   * Q_S0509    * INVAL NBR CELLS* REC,  M_ERT0019               */        
/* 32   * Q_S0509    * INVAL NBR CELLS* REC,  M_ERT0019               */        
/* 33   * Q_S0512    * INVAL NBR CELLS* REC,  M_ERT0019               */        
/* 34   * Q_S0513    * INVAL NBR CELLS* REC,  M_ERT0019               */        
/* 35   * Q_S0514    * INVAL NBR CELLS* REC,  M_ERT0019               */        
/* 36   * Q_S0516    * INVAL NBR CELLS* REC,  M_ERT0019               */        
/* 37   * Q_S0522    * INVAL NBR CELLS* REC,  M_ERT0019               */        
/* 38   * Q_S0525    * INVAL NBR TRXS * REC,  M_ERT0019               */        
/* 39   * Q_S0530    * INVAL NBR TRXS * REC,  M_ERT0019               */        
                                                                                
/* 40   * Q_S0550    * INVAL NBR CELLS* REC,  M_ERT0019               */        
/* 41   * Q_S0550    * INVAL NBR CELLS* REC,  M_ERT0019               */        
/* 42   * Q_S0550    * INVAL NBR CELLS* REC,  M_ERT0019               */        
/* 43   * Q_S0550    * INVAL NBR CELLS* REC,  M_ERT0019               */        
/* 44   * Q_S0550    * INVAL NBR CELLS* REC,  M_ERT0019               */        
/* 44   * Q_S0580    * INVAL NBR CELLS* REC,  M_ERT0019               */        
/* 45   * Q_S0581    * INVAL NBR CELLS* REC,  M_ERT0019               */        
/* 46   * Q_S0585    * INVAL NBR CELLS* REC,  M_ERT0019               */        
/* 47   * Q_S0586    * INVAL NBR CELLS* REC,  M_ERT0019               */        
/* 48   * Q_S0587    * INVAL NBR CELLS* REC,  M_ERT0019               */        
/* 49   * Q_S0590    * INVAL NBR TRXS * REC,  M_ERT0019               */        
                                                                                
/*      *            *                *                               */        
/**********************************************************************/        
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*          1.   HEADER SECTION                                       */        
/*                                                                    */        
/**********************************************************************/        
/**********************************************************************/        
/*                                                                    */        
/*          2.   DESCRIPTOR REFERENCE SECTION                         */        
/*                                                                    */        
/**********************************************************************/        
                                                                                
DEFINE_SSM USING DESCRIPTOR GDY4ALXX;                                           
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*          4.   SSM MODULE DEFINITION                                */        
/*                                                                    */        
/**********************************************************************/        
                                                                                
H_M_GDXBYX_CCDC_SSM: SSM_MODULE                                                 
/*Commented for FR36/313766
SATRT : FR36/292347 
<>RANGECHECK ON;
END : FR36/292347
 */                                                                               
/**********************************************************************/        
/*                                                                    */        
/*          4.1  CONNECTION TO OTHER SW-ITEMS                         */        
/*                                                                    */        
/**********************************************************************/        

INCLUDE MPINC (FY32ZZXX);

INVOKE MODE    (M_DTC_DET_MEAS_CTRS_CELLS,
                M_DTC_STD_BSS_CTRS,
                M_DTC_STD_CELL_CTRS,
                M_DTC_TYPE110_DPVAL_CODAC_ARRAY, 
                M_TCU_TYPE110_DPVAL_CODAC_ARRAY, 
                M_DTC_T_110_DPVAL_CELL_CODAC, 
                M_TCU_T_110_DPVAL_CELL_CODAC,
                M_DTC_STD_TRX_CTRS,
                M_DTC_TRF_CNTRS_TYPE1_TRX,                                      
                /*START: VAMOS MODE NTO OK*/
                /*Commented in AL11*/
                M_TCU_TYPE_37_CELL,
                M_TCU_TYPE32_ARRAY,
                M_TCU_TYPE34_ARRAY,
                /* M_TCU_TYPE_110_PER_CELL, */
                M_ALERTER_CNTRS,
               /*END: VAMOS MODE NTO OK*/

                M_DTC_TRF_CNTRS_TYPE19,                                         
                M_DTC_TRF_CNTRS_TYPE28,                                         
                M_DTC_TRF_CNTRS_TYPE110, 
                M_DTC_TRF_TARGET_CELL_CNTRS,                                          
                M_EBT0009_DBASE_ACC_FAIL,                                       
                M_EBT0019_INC_MESS_DATA,                                        
                M_EBT0038_OPEN_FILE_FLT,                                        
                M_EBT0039_READ_REC_FLT,                                         
                M_EBT0040_CLOSE_FILE_FLT,  
                M_LAC_CI,                                                    
                M_LONG_INT,                                                     
                M_N7_CPR,                                                       
                M_PM_CNTR, 
                M_PM_DATA_VALIDITY, 
                M_PM_DET_CELL_LIST,  
                M_PM_N7_DTC_REPORT,                                             
                M_PM_CELL_ID_CGI_ARRAY,
                M_PM_RFM_T180_SERV_CTRS,
                M_PM_SMS_BUFFER,                                                
                M_PM_TCH_TYPE_1,
                M_R_BTS_TEL,  
                M_R_CELL_MGT,                                                   
                M_R_CIC_CODE,                                                   
                M_R_CONF_CE,                                                    
                M_R_N7_CONF,                                                    
                M_R_PM_ACT,                                                     
                M_R_PM_SC_G2,                                                   
                M_R_RSL_LNK,                                                    
                M_R_OML_LNK,
                M_R_TRX_MGT,                                                    
   /* ADDED FOR BTS-TEMP-LOGGING */
                M_TCU_TYPE110_BTS_CNTRS,
  /* ADDED FOR BTS-TEMP-LOGGING */ 
                M_R_BSC_INFO,/*CR20/223453*/
                /*CR2596*/
                M_R_CNF_ABTP,
                /*CR2596*/
                M_SYS_REC_HEAD,                                                 
                M_TCU_CNTRS_TYPE_19,                                            
                M_USDA,                                                         
                M_X25_BUFFER,
                M_PM_LIST_OF_CELLS,
                M_TP_PM_N7_CNTRS,
              /*M_TP_PM_HDLC_CNTRS,  FOR 1024 HDLC CHANNEL */
                M_RTTRACE_SCLASS_PM,/*FOR RT TRACE*/
                M_TRC_ID,       /*FOR RT TRACE*/
                M_TRC_INFO,     /*FOR RT TRACE*/
                M_HDLC_CNTRS,   /*FOR 1024 HDLC CHANNEL  */
                M_TRC_FILENAME, /*FOR RT TRACE*/
                M_R_BEQ_MGT,
                M_R_ABIS_INF,
                M_R_TRAU_CP,
                M_R_ATER_INF,
                M_R_CONF_TRK,
                M_ABIS_TRANS_MODE,
                M_R_TC_MGT,
                /*CR2517*/
                /*M_TYPE_35_CTRS_0,*/
               /* M_TYPE_35_CTRS_4,*/
               /* M_TYPE_35_CTRS_5,*/
                /*CR2517*/
        /* START : WIPRO B11 IP MR0 PKG1 */
                M_SLHIP_PM_N7_CNTRS,
        /* START: 3BKA36CBR236941*/        
                /*M_PM_TC_CTRS_NAME,*/
        /* END: 3BKA36CBR236941*/                        
                M_PM_IP_GSL_LNK_CTRS,
                M_PM_N7_LINK_CNTRS,
                M_TCSL_PM_CNTRS,
        /* START: 3BKA36CBR236941*/        
                /*M_PM_TC_CTRS_NAME,*/
        /* END: 3BKA36CBR236941*/                        
                M_PM_TCSL_CTRS,
        /*FR245359*/
               /* M_IPOE1_PM_CNTRS,*/
                M_IPOE1_CNTRS_ARRAY,
        /*FR245359*/
                M_R_IP_GSL,
                /*FR20/235962*/
                M_R_BSC_INFO,
                /*FR20/235962*/
                /*CR2596*/
                M_R_CNF_ABTP,
                /*CR2596*/
                /*ADDED FOR GSL COUNTERS MEMO*/
                M_R_GSL_LNK,
                M_R_BSS_PAR2,
                M_R_MSC_MGT,
                /*ADDED FOR GSL COUNTERS MEMO*/
	/* ADDED FOR B12 VAMOS */
		M_R_CELL_IN,
	/* ADDED FOR B12 VAMOS */
                /*ADDED FOR IURG FEATURE */
                M_R_RNC_MGT,
                /*ADDED FOR IURG FEATURE */ 
                /*ADDED FOR AFLEX COUNTERS*/
                M_R_NRI_MAP,
               /*ADDED FOR AFLEX COUNTERS*/
                M_TC_PM_DATA,
                M_LAPD_OMLRSL_PM_CNTRS,
        /* END : WIPRO B11 IP MR0 PKG1 */
                M_AMUXRM_PM_CNTRS,
               /*ADDED FOR A-FLEX COUNTERS*/
              /* Commented for CR20/279046*/
              /*M_PM_TCU_AFLEX_CNTRS,*/
              /*M_TCU_TYPE_110_PER_MSC,*/
              /* Commented for CR20/279046*/
                M_TCU_TYPE_110_NRI_ARR,
             /* Commented for CR20/279046*/
              /*M_TCU_TYPE_110_MSC,*/
              /* Commented for CR20/279046*/
                M_TCU_TYPE_110_NRI,
                M_TYPE_110_CTRS_9,
               /*ADDED FOR A-FLEX COUNTERS*/
               /*ADDED FOR IURG FEATURE */
                M_IURG_CNTR_NAME,
                M_M3UALM_IURG_PM_BUFFER,
               /*ADDED FOR IURG CELLS*/
               /*START: B12 VAMOS*/
               /*AM START: CR650353*/
               M_R_SCCP_CNF,
               /*AM END: CR650353*/
               M_TCU_TYPE_37_PER_CELL,
               /* BEGIN: CR 605005 */
               M_TYPE_110_CTRS_10,
                M_INVOKE_ID,
                M_MXPF_FMMID,
                M_PROC_CODE,
                M_MXPF_SRVCODE,
                M_MXPF_TIMEVALUE,
                M_MXPF_TIMEVALUE_CONTENT,
                M_MXPF_PMSBDTYPE,
                M_MXPF_GEOADDR,
                M_MXPF_BDCPUOVLINDIC,
                M_MXPF_CPIMSGPAYLOADHEADER,
               /* END: CR 605005 */
                /* BEGIN CR:745699 */
                M_TCU_TYPE_110_OLC_LONG,
                M_TCU_TYPE_110_OLC_INT, 
                M_TCH_TYPE_110_OLC,

		/* BEGIN CR 889255 */
	        M_PM_TCH_TYPE_110_CTRS_1
		
		/*END CR 889255 */
                );
                                                                                
INVOKE SYNONYM (M_CHAN_TYPE_MAIN_COMB_BCCH,                                     
                M_CHAN_TYPE_MCBCCH_W_CBCH,                                      
                M_CHAN_TYPE_SDCCH,                                              
                M_CHAN_TYPE_SDCCH_W_CBCH,
                M_CHAN_TYPE_DYN_SDCCH,                                       
                M_DB_SUCCESS,                                                   
                M_ERC6_USER_REC,                                                
                M_ERT0009_DBASE_ACC_FAIL,                                       
                M_ERT0019_INC_MESS_DATA,    
                M_FI_CC_DATA_COLLECTOR,  
                M_FS_CPR_N_7_LDC,                                               
              /*M_FS_DTC_N_7_LDC, DEL IN MXB8 */
                M_FS_DTC_TRF_LDC,
                M_FS_LME_X25,                                                   
                M_FS_SMS_CB_MASTER,                                             
                M_FS_TCHRM_LDC,                                                 
                M_FS_TCU_TRF_LDC,                                               
                M_LCE_ID_NULL,  
                M_MAX_BTS_PER_BSC,
                M_MAX_CELLS_PER_USR_BUF,                                        
                M_NULL_CELL_ID,
                M_NULL_CELL_IDX,                                                
                M_NULL_RSL_IDX,                                                 
                M_NULL_TRX_IDX,
                M_RID_R_BTS_TEL,
                M_RID_R_CELL_MGT,                                               
                M_RID_R_CIC_CODE,                                               
                M_RID_R_CONF_CE,                                                
                M_RID_R_CONF_TRK,                                                
                M_RID_R_TRAU_CP,                                                
                M_RID_R_TC_MGT,                                                
                M_RID_R_N7_CONF,                                                
                M_RID_R_PM_ACT,                                                 
                M_RID_R_PM_SC_G2,                                               
                M_RID_R_RSL_LNK,                                                
                M_RID_R_OML_LNK,
                M_RID_R_TRX_MGT,                                                
                M_RID_R_BSC_INFO,/*CR20/223453*/
                /*CR2596*/
                M_RID_R_CNF_ABTP,
                /*CR2596*/
                M_RID_R_ABIS_INF,                                                
                M_RID_R_BEQ_MGT,                                                
                M_RID_R_ATER_INF,                                                
        /* START : WIPRO B11 IP MR0 PKG1 */
                M_RID_R_IP_GSL,
        /* END : WIPRO B11 IP MR0 PKG1 */
        /*ADDED FOR GSL COUNTERS MEMO*/
                M_RID_R_GSL_LNK,
                M_RID_R_BSS_PAR2,
                M_RID_R_MSC_MGT,
        /*ADDED FOR GSL COUNTERS MEMO*/
        /*ADDED FOR AFLEX NRI COUNTERS*/
                M_RID_R_NRI_MAP,
        /*ADDED FOR AFLEX NRI COUNTERS*/
        /*ADDED FOR IURG INTERFACE FEATURE*/
                M_RID_R_RNC_MGT,
        /*ADDED FOR IURG INTERFACE FEATURE*/
	/* ADDED FOR B12 VAMOS */
		M_RID_R_CELL_IN,
	/* ADDED FOR B12 VAMOS*/
                /*AM START: CR650353*/   
                M_RID_R_SCCP_CNF,
                /*AM END: CR650353*/
                M_SBLT_NULL,
                M_SBLT_RSL,
                M_SBLT_OML,
                M_MAX_TCID,
                /*FR20/235962*/
                M_RID_R_BSC_INFO,
                /*FR20/235962*/
                M_ABIS_TRANS_MODE_IPETH,
                M_ABIS_TRANS_MODE_IPFR,
                M_ABIS_TRANS_MODE_IPUN,
                /* BEGIN: CR 625837 */
                M_ABIS_TRANS_MODE_IP_E1WCP,
                /* END: CR 625837 */
                /* BEGIN CR:745699 */
                M_MAX_RRH_PER_OLC,
                M_MAX_TRX_PER_OLC
                );
/*RT Trace*/               
/*SEIZE TRC_BSC_PM1 <> C ( 
                           M_TRC_FILENAME LOC, 
                           LONG_INT, 
                           LONG_INT,
                           M_TRC_ID LOC,
                           M_TRC_INFO LOC,
                           LONG_INT,
                           LONG_INT,
                           LONG_INT);
SEIZE TRC_BSC_PM2 <> C ( 
                           M_TRC_FILENAME LOC, 
                           LONG_INT, 
                           LONG_INT,
                           M_TRC_ID LOC,
                           M_TRC_INFO LOC,
                           LONG_INT,
                           LONG_INT,
                           LONG_INT);                           
SEIZE TRC_BSC_PM3 <> C ( 
                           M_TRC_FILENAME LOC, 
                           LONG_INT, 
                           LONG_INT,
                           M_TRC_ID LOC,
                           M_TRC_INFO LOC,
                           LONG_INT,
                           LONG_INT,
                           LONG_INT);
SEIZE TRC_BSC_API1 <> C ( 
                           M_TRC_FILENAME LOC, 
                           LONG_INT, 
                           LONG_INT,
                           M_TRC_ID LOC,
                           M_TRC_INFO LOC,
                           LONG_INT,
                           LONG_INT,
                           LONG_INT);  
SEIZE TRC_BSC_API2 <> C ( 
                           M_TRC_FILENAME LOC, 
                           LONG_INT, 
                           LONG_INT,
                           M_TRC_ID LOC,
                           M_TRC_INFO LOC,
                           LONG_INT,
                           LONG_INT,
                           LONG_INT); */

/*RT Trace*/               
SEIZE TRC_BSC_PM1 <> C ( 
                           M_TRC_FILENAME LOC, 
                           LONG_INT, 
                           LONG_INT,
                           M_TRC_ID LOC,
                           M_TRC_INFO LOC,
                           LONG_INT,
                           LONG_INT,
                           LONG_INT);
SEIZE TRC_BSC_PM2 <> C ( 
                           M_TRC_FILENAME LOC, 
                           LONG_INT, 
                           LONG_INT,
                           M_TRC_ID LOC,
                           M_TRC_INFO LOC,
                           LONG_INT,
                           LONG_INT,
                           LONG_INT);                           
SEIZE TRC_BSC_PM3 <> C ( 
                           M_TRC_FILENAME LOC, 
                           LONG_INT, 
                           LONG_INT,
                           M_TRC_ID LOC,
                           M_TRC_INFO LOC,
                           LONG_INT,
                           LONG_INT,
                           LONG_INT);
SEIZE TRC_BSC_API1 <> C ( 
                           M_TRC_FILENAME LOC, 
                           LONG_INT, 
                           LONG_INT,
                           M_TRC_ID LOC,
                           M_TRC_INFO LOC,
                           LONG_INT,
                           LONG_INT,
                           LONG_INT);  
SEIZE TRC_BSC_API2 <> C ( 
                           M_TRC_FILENAME LOC, 
                           LONG_INT, 
                           LONG_INT,
                           M_TRC_ID LOC,
                           M_TRC_INFO LOC,
                           LONG_INT,
                           LONG_INT,
                           LONG_INT); 

/**********************************************************************/        
/*                                                                    */        
/*          4.2  LOCAL MODE DEFINITIONS AND SYNONYMS                  */        
/*                                                                    */        
/**********************************************************************/        
/**********************************************************************/
/*                      REAL TIME TRACE                               */
/**********************************************************************/
/*ADD BY ZHUJ BEGIN*/
SYN FILENAME M_TRC_FILENAME = 'CCDC_SSM       ';

NEWMODE ZM_TRACEID = ARRAY(SET(
                             IMSD,/*INTERNAL SENDING MESSAGE*/
                             IMCS,/*INTERNAL CONSUME MESSGE*/
                             EMSN,/*INTER-PROCESS SENDING MESSAGE*/
                             EMRV,/*INTER-PROCESS RECEIVED MESSAGE*/
                             ERIR,/*DATA RECIVED FROM INTERFACE WRONG*/
                             ERRC,/*ERROR WHICH LEADS TO SYSTEM CRASH*/
                             NORM,/*NORMAL TRACE*/
                             DUMP,/*NORMAL MEMORY DUMP*/
                             WARN)/*WARNING MESSAGE*/
                             ) M_TRC_ID;
SYN TRACEID ZM_TRACEID = (:
                          (IMSD): 'IMSD ',
                          (IMCS): 'IMCS ',
                          (EMSN): 'EMSN ',
                          (EMRV): 'EMRV ',
                          (ERIR): 'ERIR ',
                          (ERRC): 'ERRC ',
                          (NORM): 'NORM ',
                          (DUMP): 'DUMP ',
                          (WARN): 'WARN '
                         :);  
NEWMODE ZM_INT_TO_LN_INT = STRUCT (CASE OF
                      : ZB_LONG_INT LONG_INT,/* MODE CONVERSION */ 
                      : ZB_LOW_INT  INT,
                        ZB_HIGH_INT INT      /* LONG INTEGER.    */   
                      ESAC); 
/*END ADD BY ZHUJ*/

#ifdef MXELITE   
  SYN NULL = PTR(H'0000_0000);
#endif                                                                           
/* MODES FOR FAST ACCESS   */                 
NEWMODE ZM_R_BTS_TEL  = ARRAY(1:CM_FY32_MAX_CELLS_PER_BSC) M_R_BTS_TEL;        
NEWMODE ZM_R_CELL_MGT = ARRAY(1:CM_FY32_MAX_CELLS_PER_BSC) M_R_CELL_MGT;        
NEWMODE ZM_R_CIC_CODE = ARRAY(1:CM_FY32_PM_MAX_CIC) M_R_CIC_CODE;               

 /* BEGIN: ADD-WIPRO-B10-MXMR1 */
NEWMODE ZM_R_CONF_CE  = ARRAY(1:738) M_R_CONF_CE;                               
/* BEGIN: ADD-WIPRO-B0-MXMR1 */
NEWMODE ZM_R_N7_CONF  = ARRAY(1:CM_FY32_PM_MAX_NBR_DTC_N7) M_R_N7_CONF;         
NEWMODE ZM_R_PM_ACT   = ARRAY(1:64) M_R_PM_ACT;                                 
NEWMODE ZM_R_PM_SC_G2 = ARRAY(1:64) M_R_PM_SC_G2;                               
NEWMODE ZM_R_RSL_LNK  = ARRAY(1:CM_FY32_MAX_TRX_PER_BSC) M_R_RSL_LNK;           
NEWMODE ZM_R_OML_LNK  = ARRAY(1:M_MAX_BTS_PER_BSC) M_R_OML_LNK;           
NEWMODE ZM_R_TRX_MGT  = ARRAY(1:CM_FY32_MAX_TRX_PER_BSC) M_R_TRX_MGT;           
/*CR20/223453*/
NEWMODE ZM_R_BSC_INFO = M_R_BSC_INFO;           
/*CR20/223453*/
/*CR2596*/
NEWMODE ZM_R_CNF_ABTP = ARRAY(1:252/*176 CR312498*/) M_R_CNF_ABTP;
/*CR2596*/
/*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE */
NEWMODE ZM_R_BEQ_MGT  = ARRAY(1:M_MAX_BTS_PER_BSC) M_R_BEQ_MGT;
NEWMODE ZM_R_TC_MGT  = ARRAY(1:M_MAX_TCID) M_R_TC_MGT;
NEWMODE ZM_R_ABIS_INF = ARRAY(1:/*431 CR 312498*/507) M_R_ABIS_INF;
NEWMODE ZM_R_TRAU_CP  = ARRAY(1:48) M_R_TRAU_CP;
NEWMODE ZM_R_ATER_INF = ARRAY(1:76) M_R_ATER_INF;
NEWMODE ZM_R_CONF_TRK = ARRAY(1:304) M_R_CONF_TRK;
/* START : WIPRO B11 IP MR0 PKG1 */
NEWMODE ZM_R_IP_GSL  = ARRAY(1:CM_FY32_MAX_IP_GSL_PER_BSC) 
                                               M_R_IP_GSL;
/* SRINIVAS : ADDED TO CONVERT M_STA_DPVAL TO LONG FOR IP31A */
/*ADDED FOR GSL COUNTERS MEMO*/
NEWMODE ZM_R_GSL_LNK  = ARRAY(1:CM_FY32_MAX_GSL_PER_BSC) M_R_GSL_LNK;
NEWMODE ZM_R_BSS_PAR2 = M_R_BSS_PAR2;
NEWMODE ZM_R_MSC_MGT  = ARRAY(1:CM_FY32_MAX_MSC_PER_BSC) M_R_MSC_MGT;
/*ADDED FOR GSL COUNTERS MEMO*/

/*BEGIN: FR36/308293*/
NEWMODE ZM_AUPOIP_MODE = SET (
			ZE_AUPOIP_FULL,
			ZE_AUPOIP_MIXED);
/*END: FR36/308293*/

/* BEGIN : B12 VAMOS */
NEWMODE ZM_R_CELL_IN = M_R_CELL_IN;
/* END : B12 VAMOS */
/*AM START:CR650353*/
NEWMODE ZM_R_SCCP_CNF = ARRAY(1:280) M_R_SCCP_CNF;
/*AM START:CR650353*/
/*ADDED FOR AFLEX NRI COUNTERS*/
NEWMODE ZM_R_NRI_MAP =  ARRAY(1:CM_FY32_MAX_SUPPORTED_NRI) M_R_NRI_MAP;
/*ADDED FOR AFLEX NRI COUNTERS*/
/*ADDED FOR IURG INTERFACE FEATURE */
NEWMODE ZM_R_RNC_MGT  = ARRAY(1:CM_FY32_MAX_RNC_PER_BSC) M_R_RNC_MGT;
/*ADDED FOR IURG INTERFACE FEATURE */

NEWMODE ZM_LONG_DPVAL = STRUCT( CASE OF : ZB_LONG LONG_INT,
                                        : ZB_LOW INT,
                                          ZB_HIGH INT
                                          ESAC);

/* END : WIPRO B11 IP MR0 PKG1 */
/* END: ADD-WIPRO-B10-MX-MR2-CHANGE */
                                                                                
SYNMODE ZM_FAST_ACC_PTR = STRUCT(CASE OF                                        
                                   :ZB_OFF INT,                                 
                                    ZB_SEG INT,                                 
                                   :ZB_PTR PTR                                  
                                 ESAC);                                         
                                                                                
NEWMODE ZM_REL_TYPE = SET(                                                      
                          ZE_R_CELL_MGT,                        /* 00 */        
                          ZE_R_CIC_CODE,                        /* 01 */        
                          ZE_R_CONF_CE ,                        /* 02 */        
                          ZE_R_N7_CONF ,                        /* 03 */        
                          ZE_R_PM_ACT  ,                        /* 04 */        
                          ZE_R_PM_SC_G2,                        /* 05 */        
                          ZE_R_RSL_LNK ,                        /* 06 */        
                          ZE_R_TRX_MGT ,                        /* 07 */ 
                          ZE_R_BTS_TEL ,                        /* 08 */       
                          ZE_R_OML_LNK ,                        /* 09 */
                          /*CR20/223453*/
                          ZE_R_BSC_INFO,                        /* 10 */
                          /*CR20/223453*/
                 /*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE */
                          ZE_R_ABIS_INF ,                       /* 11 */
                          ZE_R_BEQ_MGT,                         /* 12 */ 
                          ZE_R_TRAU_CP,				/* 13 */         
                          ZE_R_ATER_INF,          		/* 14 */         
                          ZE_R_CONF_TRK,	    	        /* 15 */ 
               /* START : WIPRO B11 IP MR0 PKG1 */
                          ZE_R_TC_MGT,
                          ZE_R_IP_GSL,
                 /*ADDED FOR GSL COUNTERS MEMO*/                          
                          ZE_R_GSL_LNK,
                          ZE_R_BSS_PAR2,
                          ZE_R_MSC_MGT,
                 /*ADDED FOR GSL COUNTERS MEMO*/   
                 /*ADDED FOR AFLEX COUNTERS*/
                          ZE_R_NRI_MAP, 
                  /*ADDED FOR AFLEX COUNTERS*/
                          /*CR2596*/
                          ZE_R_CNF_ABTP,
                          /*CR2596*/
               /* END: ADD-WIPRO-B10-MX-MR2-CHANGE */

                 /* END: ADD-WIPRO-B10-MX-MR2-CHANGE */
                 /* ADDED FOR IURG INTERFACE FEATURE*/
                          ZE_R_RNC_MGT,
                 /* ADDED FOR IURG INTERFACE FEATURE*/
		 /* BEGIN : B12 VAMOS */
			  ZE_R_CELL_IN,
		  /* END : B12 VAMOS */
                  /*AM START:CR650353*/
                      ZE_R_SCCP_CNF
                  /*AM END:CR650353*/
                         );                                                     

/* START : WIPRO B11 IP MR0 PKG1 */
/* SRINIVAS: THIS ARRAY HAS TO BE INITIALIZED TO ZERO */
/*commented */
/*NEWMODE ZM_BTS_IP25C = ARRAY (1: CM_FY32_MAX_BTS_PER_BSC) 
                                           ZM_PER_BTS_ARRAY;
NEWMODE ZM_PER_BTS_ARRAY = STRUCT (
                    ZB_IP25C ARRAY (1:15) M_STA_DPVAL);

DCL Z_BTS_IP25C ZM_BTS_IP25C;*/
/*commented */
/*added */

NEWMODE ZM_BTS_IP_LAPD_CTRS = ARRAY 
                           (1: CM_FY32_MAX_BTS_PER_BSC)
                                 ZM_PER_BTS_ARRAY;
NEWMODE ZM_PER_BTS_ARRAY = STRUCT (
                    ZB_ACTIVE BOOL,
                    ZB_BTS_IDX M_BEQ_NBR,
                    ZB_REAL_PER INT,
                    ZB_IP25A    M_STA_DPVAL,
                    ZB_IP25B    M_STA_DPVAL,
                    ZB_IP25C ARRAY (1:15) M_STA_DPVAL ); 
DCL Z_BTS_IP_LAPD_CTRS ZM_BTS_IP_LAPD_CTRS;
DCL Z_VAR_TCH_CTRS_1531 ZM_PM_TCH_CELL_CTRS_1531;
/*added */

/* SRINIVAS: CHANGED DUE TO MODE INCOMPATIBLILITY */
/* IN CALL TO INTERFACE PROC */
/* NEWMODE ZM_TC_SET = SET ( E_TC_MTP2,
                          E_TC_IP,
                          E_INVALID_TC_MTP2,
                          E_INVALID_TC_IP,
                          E_TC_MTP2_TIMEOUT,
                          E_TC_IP_TIMEOUT); */

SYN E_TC_MTP2 = 0;
SYN E_TC_IP   = 1;
/* START: 3BKA36CBR236941*/
/*SYN E_INVALID_TC_MTP2 = 2;
SYN E_INVALID_TC_IP   = 3;
SYN E_TC_MTP2_TIMEOUT = 4;
SYN E_TC_IP_TIMEOUT = 5;*/
/* END: 3BKA36CBR236941*/

/* END : WIPRO B11 IP MR0 PKG1 */

/* CUMULATIVE COUNTER IMAGES - THESE POINTERS REFERENCE RSMB, THE DATA          
 * =========================   STRUCTURES ARE THOSE OF THE HISTORY              
 *                             FILE.                                            
 */                                                                             
NEWMODE M_T1_PTR     = REF CM_FY32_HIS_TYPE_01_CELL_BUF; 
NEWMODE M_T1_2_PTR   = REF CM_FY32_HIS_TYPE_01_TRX_BUF;                  
NEWMODE M_T2_PTR     = REF CM_FY32_HIS_TYPE_02_BUF;                             
NEWMODE M_T3_PTR     = REF CM_FY32_HIS_TYPE_03_BUF;                             
NEWMODE M_T4_PTR     = REF CM_FY32_HIS_TYPE_04_BUF;                             
NEWMODE M_T5_PTR     = REF CM_FY32_HIS_TYPE_05A_BUF;                            
NEWMODE M_T5_2_PTR   = REF CM_FY32_HIS_TYPE_05B_BUF;                            
NEWMODE M_T6_PTR     = REF CM_FY32_HIS_TYPE_06_BUF;                             
NEWMODE M_T7_PTR     = REF CM_FY32_HIS_TYPE_07_BUF;
/*CR36/236932*/
NEWMODE M_T72_PTR     = REF CM_FY32_HIS_TYPE_072_BUF;
/*CR36/236932*/                            
NEWMODE M_T8_PTR     = REF CM_FY32_HIS_TYPE_08_BUF;                             
NEWMODE M_T9_PTR     = REF CM_FY32_HIS_TYPE_09_BUF;                             
NEWMODE M_T18_PTR    = REF CM_FY32_HIS_TYPE_18_BSC_BUF;   
NEWMODE M_T18_2_PTR  = REF CM_FY32_HIS_TYPE_18_CIC_BUF;                         
NEWMODE M_T19_PTR    = REF CM_FY32_HIS_TYPE_19_BUF;                             
NEWMODE M_T25_PTR    = REF CM_FY32_HIS_TYPE_25_BUF;                             
NEWMODE M_T26_PTR    = REF CM_FY32_HIS_TYPE_26A_BUF;
NEWMODE M_T26_2_PTR  = REF CM_FY32_HIS_TYPE_26B_BUF;                          
NEWMODE M_T27_PTR    = REF CM_FY32_HIS_TYPE_27_BUF;                             
NEWMODE M_T28_PTR    = REF CM_FY32_HIS_TYPE_28_BUF;                             
NEWMODE M_T29_PTR    = REF CM_FY32_HIS_TYPE_29_BUF;                             
NEWMODE M_T30_PTR    = REF M_HIS_TYPE_30;                                       
NEWMODE M_T32_PTR    = REF CM_FY32_HIS_TYPE_32_BUF;
NEWMODE M_T33_PTR    = REF CM_FY32_HIS_TYPE_33_BUF;

NEWMODE M_T34_PTR    = REF CM_FY32_HIS_TYPE_34_1_BUF;
NEWMODE M_T34_2_PTR  = REF CM_FY32_HIS_TYPE_34_2_BUF;
/* BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE */  
NEWMODE M_T35_0_PTR    = REF CM_FY32_HIS_TYPE_35_0_BUF;
NEWMODE M_T35_4_PTR    = REF CM_FY32_HIS_TYPE_35_4_BUF;
/* CR20/225233 */
NEWMODE M_T35_3_PTR    = REF CM_FY32_HIS_TYPE_35_3_BUF;
/* CR20/225233 */
NEWMODE M_T35_5_PTR    = REF CM_FY32_HIS_TYPE_35_5_BUF;
/*START : CR20/284751 BTS FRQ SYNCH */
NEWMODE M_T35_6_PTR    = REF CM_FY32_HIS_TYPE_35_6_BUF;
/*END : CR20/284751 BTS FRQ SYNCH */
/* START : WIPRO B11 IP MR0 PKG1 */
NEWMODE M_T35_7_PTR    = REF CM_FY32_HIS_TYPE_35_7_BUF;
NEWMODE M_T35_8_PTR    = REF CM_FY32_HIS_TYPE_35_8_BUF;
/* END : WIPRO B11 IP MR0 PKG1 */
/* END: ADD-WIPRO-B10-MX-MR2-CHANGE */ 

/* BEGIN: IURG INTERFACE FEATURE */
NEWMODE M_T36_PTR    = REF CM_FY32_HIS_TYPE_36_BUF;
/* END: IURG INTERFACE FEATURE */

/* BEGIN : B12 VAMOS */
NEWMODE M_T37_0_PTR    = REF CM_FY32_HIS_TYPE_37_0_BUF;
NEWMODE M_T37_1_PTR    = REF CM_FY32_HIS_TYPE_37_1_BUF;
/*CRI 00823248.01*/
NEWMODE M_T37_0_TEMP_PTR    = REF CM_FY32_TEMP_37_0_BUF;

/* END : B12 VAMOS */

NEWMODE M_T110_1_PTR = REF CM_FY32_HIS_TYPE_110_1A_BUF;
NEWMODE M_T110_1_2_PTR = REF CM_FY32_HIS_TYPE_110_1B_BUF; 

NEWMODE M_T110_2_PTR = REF CM_FY32_HIS_TYPE_110_2_BUF; 
NEWMODE M_T110_3_PTR = REF CM_FY32_HIS_TYPE_110_3_BUF;                      
NEWMODE M_T110_4_PTR = REF CM_FY32_HIS_TYPE_110_4_BUF;
/*START: MC Counters*/
NEWMODE M_T110_4_2_PTR = REF CM_FY32_HIS_TYPE_110_4_2_BUF;
/*END: MC Counters*/
NEWMODE M_T110_5_PTR = REF CM_FY32_HIS_TYPE_110_5_BUF;   
NEWMODE M_T110_6_PTR = REF CM_FY32_HIS_TYPE_110_6_BUF;
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
/* CR20/209493 START */
/* NEWMODE M_T110_7_PTR = REF CM_FY32_HIS_TYPE_110_7_BUF; */
NEWMODE M_T110_7_PTR = REF CM_FY32_HIS_TYPE_110_7_1A_BUF;
NEWMODE M_T110_7_2_PTR = REF CM_FY32_HIS_TYPE_110_7_1B_BUF;
NEWMODE M_T110_8_PTR = REF CM_FY32_HIS_TYPE_110_8_BUF;
/*ADDED FOR GSL COUNTERS MEMO*/
NEWMODE M_T110_9_PTR = REF CM_FY32_HIS_TYPE_110_9_BUF;
/*ADDED FOR GSL COUNTERS MEMO*/
/* CR20/209493 END */
/*ADDED FOR A-FLEX NRI COUNTERS*/
NEWMODE M_T110_10_PTR = REF CM_FY32_HIS_TYPE_110_10_BUF;
/*ADDED FOR A-FLEX NRI COUNTERS*/
/* END  : ADD-WIPRO-B10-MR1-CHANGE */
/*START : AUPOIP FEATURE */
NEWMODE M_T110_11_PTR = REF CM_FY32_HIS_TYPE_110_11_BUF;
NEWMODE M_T110_12_PTR = REF CM_FY32_HIS_TYPE_110_12_BUF;
/*END : AUPOIP FEATURE */
/*START : CR20/313054 */
NEWMODE M_T110_13_PTR = REF CM_FY32_HIS_TYPE_110_13_BUF;
/*END : CR20/313054 */
/* START: CR 605005 */
NEWMODE M_T110_14_PTR = REF CM_FY32_HIS_TYPE_110_14_BUF;

/*START CR MOCN */
NEWMODE M_T110_17_PTR = REF CM_FY32_HIS_TYPE_110_17_BUF;
/*END CR MOCN */

/*begin CR1238146 A-GPS*/
NEWMODE M_T110_18_PTR    = REF CM_FY32_HIS_TYPE_110_18_BUF;
/*end CR1238146 A-GPS*/

/*begin improv for 00981139 DTC 513 overload*/
NEWMODE ZM_DTC_STD_INVALID_UPDATED = STRUCT (
         ZB_T110_DTC_DEP  BOOL,
         ZB_T110_DTC_IND  BOOL,
         ZB_T110_DTC_BSSAP  BOOL,
         ZB_T110_M3UA_DTC  BOOL,         
         ZB_T25_DTC  BOOL,
         ZB_T110_15_OLC_DTC  BOOL,
         ZB_0300_T1_DTC  BOOL,
         ZB_0300_T19_DTC  BOOL,
         ZB_0300_T28_DTC  BOOL,
         ZB_0300_T29_DTC  BOOL,
         ZB_0300_T34_DTC  BOOL,
         ZB_T6_DTC  BOOL,
         ZB_DTC_TRX  BOOL         
);

NEWMODE ZM_DTC_OL_PTR = REF ZM_DTC_STD_INVALID_UPDATED;
/*end improv for 00981139 DTC 513 overload*/

/*begin CR1098364 MC1408/MC1409 improv*/
NEWMODE ZM_PM_VMC_NB_CTRS = STRUCT (
          B_VMC001A     LONG_INT,
          B_VMC001B     LONG_INT,
          B_VMC001C     LONG_INT,
          B_VMC001D     LONG_INT
          );
NEWMODE ZM_PM_VMS_NB_CTRS_ARRAY = ARRAY (1 : M_MAX_CELLS_PER_BSC)
                     ZM_PM_VMC_NB_CTRS;
                     
NEWMODE ZM_PM_VMC_NB_POLL_CTRS = STRUCT (
          ZB_VMC001A     LONG_INT,
          ZB_VMC001B     LONG_INT,
          ZB_VMC001C     LONG_INT,
          ZB_VMC001D     LONG_INT
          );
                     
NEWMODE ZM_PM_VMS_NB_CTRS_POLLING_ZONE = STRUCT (
         B_FMM_ID      M_FMM_ID,
         B_PM_VMC_NB_POLL_CTRS ARRAY (1 : M_MAX_CELLS_PER_BSC/2)
                     ZM_PM_VMC_NB_POLL_CTRS );
                     
NEWMODE ZM_PM_VMS_NB_CTRS_POLLING_ZONE_2 =  STRUCT (
         B_FMM_ID      M_FMM_ID,
         B_PM_VMC_NB_POLL_CTRS      
         ARRAY ((M_MAX_CELLS_PER_BSC/2)+1 : M_MAX_CELLS_PER_BSC)
                              ZM_PM_VMC_NB_POLL_CTRS );
                              
NEWMODE ZM_TMP_MC1408X_MC1409X_CNTRS = STRUCT (
          B_CNTR_C1408A     M_STA_DPVAL,
          B_CNTR_C1408B     M_STA_DPVAL,
          B_CNTR_C1408C     M_STA_DPVAL,
          B_CNTR_C1408D     M_STA_DPVAL,
          B_CNTR_C1409A     M_STA_DPVAL,
          B_CNTR_C1409B     M_STA_DPVAL,
          B_CNTR_C1409C     M_STA_DPVAL,
          B_CNTR_C1409D     M_STA_DPVAL
          );
          
NEWMODE ZM_TMP_MC1408X_MC1409X_CTRS_ARRAY = 
                        ARRAY(1 : M_MAX_CELLS_PER_BSC)
                         ZM_TMP_MC1408X_MC1409X_CNTRS;
/*end CR1098364 MC1408/MC1409 improv*/

/*begin CR1098364 MC1408/MC1409 improv*/
NEWMODE M_T37_VMC_001_PTR    = REF ZM_PM_VMS_NB_CTRS_ARRAY;
NEWMODE M_TMP_MC1408_9_PTR   = REF ZM_TMP_MC1408X_MC1409X_CTRS_ARRAY;
/*end CR1098364 MC1408/MC1409 improv*/


SYNMODE M_MXPF_MPPMSPMCPUOVLDRDATA        =  STRUCT (
    B_MXPF_TIMESTAMP M_MXPF_TIMEVALUE,
    B_MXPF_BDTYPE M_MXPF_PMSBDTYPE,
    B_MXPF_BDGEOADDR M_MXPF_GEOADDR,
    B_MXPF_OVLINDICAVG M_MXPF_BDCPUOVLINDIC,
    B_MXPF_OVLINDICMAX M_MXPF_BDCPUOVLINDIC
) ;

SYNMODE M_MXPF_CPI_MPPMSPMCPUOVLDRDATA        =  STRUCT (
    B_MXPF_FMMID M_MXPF_FMMID,
    B_MXPF_CPIMSGPAYLOADHEADER M_MXPF_CPIMSGPAYLOADHEADER,
    B_MXPF_MPPMSPMCPUOVLDRDATA M_MXPF_MPPMSPMCPUOVLDRDATA
) ;

/* CR 889255*/
/*START Rework_CRI # 01037014.01 */
NEWMODE M_T110_MC1531_PTR = REF ZM_PM_TCH_CELL_CTRS_1531;
/*END Rework_CRI # 01037014.01*/
/*CR 889255*/
/* END: CR 605005 */
NEWMODE M_T180_1_PTR = REF ZM_TRAFF_FLOW_CELL_INFO;                             
NEWMODE M_T180_2_PTR = REF ZM_TRAFF_FLOW_DATA;

/* BEGIN : CR: 745699 */
NEWMODE M_T110_15_1_PTR = REF CM_FY32_HIS_TYPE_110_15_1_BUF;
NEWMODE M_T110_15_2_PTR = REF CM_FY32_HIS_TYPE_110_15_2_BUF;
/*END : CR:745699 */
 
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
/* CR20/209493 START */
/* NEWMODE ZM_RSMB_PTR_ARR  = ARRAY (1:38) PTR; */
/* NEWMODE ZM_DS_PTR_ARR  = ARRAY (1:38) PTR; */
/* START : WIPRO B11 IP MR0 PKG1 */
/* NEWMODE ZM_DS_PTR_ARR  = ARRAY (1:39) PTR; */
/* CR20/225233 */
/*NEWMODE ZM_DS_PTR_ARR  = ARRAY (1:41) PTR;*/
/*ADDED FOR A-FLEX NRI COUNTERS*/
/*CR36/236932*/
/*NEWMODE ZM_DS_PTR_ARR  = ARRAY (1:45) PTR;*/
/*CR36/236932*/
/* CR20/225233 */
/*START: MC Counters*/
/*NEWMODE ZM_DS_PTR_ARR  = ARRAY (1:46) PTR;*/

/* START:CR20/284751 BTS FRQ SYNCHRO*/
/*NEWMODE ZM_DS_PTR_ARR  = ARRAY (1:47) PTR;*/
/*NEWMODE ZM_DS_PTR_ARR  = ARRAY (1:48) PTR;*/
/* END:CR20/284751 BTS FRQ SYNCHRO*/
/* BEGIN: IURG INTERFACE FEATURE */
/*NEWMODE ZM_DS_PTR_ARR  = ARRAY (1:47) PTR;*/
/* BEGIN : B12 VAMOS */
/*NEWMODE ZM_DS_PTR_ARR  = ARRAY (1:49) PTR;*/
/*BEGIN CHANGE : CR20/313054..............
NEWMODE ZM_DS_PTR_ARR  = ARRAY (1:53) PTR;
..CHANGE TO.............................*/
/* BEGIN CHANGE : CR 605005...............
NEWMODE ZM_DS_PTR_ARR  = ARRAY (1:54) PTR; 
..CHANGE TO.............................*/
/* BEGIN CR:745699 */
/*NEWMODE ZM_DS_PTR_ARR  = ARRAY (1:55) PTR;*/
/*NEWMODE ZM_DS_PTR_ARR  = ARRAY (1:59) PTR;*/
/*START CR MOCN */
/*NEWMODE ZM_DS_PTR_ARR  = ARRAY (1:63) PTR;*/
/*END CR MOCN */
NEWMODE ZM_DS_PTR_ARR  = ARRAY (1:64) PTR;
/* END CR:745699 */
/*END CHANGE : CR 605005 */
/*END CHANGE : CR20/313054 */
/* END : B12 VAMOS */
/* END: IURG INTERFACE FEATURE */
/*END: MC Counters*/
/*ADDED FOR A-FLEX NRI COUNTERS*/
/* END : WIPRO B11 IP MR0 PKG1 */
/* CR20/209493 END */
/* END  : ADD-WIPRO-B10-MR1-CHANGE */

SYN ZS_INIT_VAL_MATE ZM_VAL_MATE = (:.ZB_LDC_TYPE: M_FMM_SELECTOR(0),           
                                     .ZB_LCE_ID:   M_LCE_ID_NULL,               
                                     .ZB_VAL:      M_BYTE(H'FF)                 
                                     :);                                        
                                                                                
SYNMODE ZM_CIS_PER_TCU  = ARRAY(1:CM_FY32_MAX_CELLS_PER_TCU) M_CELL_IDX;        
                                                                                
SYNMODE ZM_TRXS_PER_TCU = ARRAY(1:CM_FY32_PM_MAX_TRX_PER_TCU) M_TRX_IDX;        
                                                                                
SYNMODE ZM_STD_CELL_LIST = ARRAY(1:CM_FY32_MAX_CELLS_PER_BSC) BOOL; 
SYNMODE ZM_STD_TRX_LIST  = ARRAY(1:CM_FY32_MAX_TRX_PER_BSC) BOOL;               
                                                                                
SYNMODE ZM_ERR_BUF_MODE = STRUCT(                                               
           CASE OF                                                              
                : B_ER_BUF0009    M_EBT0009_DBASE_ACC_FAIL,                     
                : B_ER_BUF0019    M_EBT0019_INC_MESS_DATA,                      
                : B_ER_BUF0038    M_EBT0038_OPEN_FILE_FLT,                      
                : B_ER_BUF0039    M_EBT0039_READ_REC_FLT,                       
                : B_ER_BUF0040    M_EBT0040_CLOSE_FILE_FLT,                     
                : B_ER_NO_DATA    M_USDA                                        
           ESAC);   
                                                                       
SYNMODE ZM_BYTE_MASK   = ARRAY(1:2048) BIN(8);                                  
SYNMODE ZM_INT_MASK    = ARRAY(1:119) INT;                                      
                                                                                
NEWMODE ZM_CIC_REV = STRUCT(                                                    
                       CASE OF                                                  
                         :ZB_CIC    M_CIC,                                      
                         :ZB_CIC1   M_BYTE,                                     
                          ZB_CIC2   M_BYTE                                      
                       ESAC);                                                   
                                                                                
NEWMODE ZM_VAL_MATE = STRUCT(                                                   
                            ZB_LDC_TYPE M_FMM_SELECTOR,                         
                            ZB_LCE_ID   M_LCE_ID,                               
                            ZB_VAL      M_BYTE                                  
                                 );                  
                                                            
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE ER263 */

/*BEGIN: CR20/286418 - More incoming links per cell */
/*SYN ZS_MAX_180_CELLS   = 10300L;*/
SYN ZS_MAX_180_CELLS   = 16000L/*10918CR312499*/;
/*END: CR20/286418 - More incoming links per cell */

SYNMODE ZM_MAX_CIC_VALUE = RANGE(1L:
                      CM_FY32_PM_MAX_BSC_CIC_LONG);
/* END: ADD-WIPRO-B10-MR1-CHANGE ER263*/

/*START: AR1-2771996*/
/* BEGIN: ADD-WIPRO-B10-MR2Ed04-CHANGE CR2599 */
/*AM START: CR650353*/
/*SYN ZS_NBR_OF_BSSAP = 208;commneted due to increase in BSSAP DTC*/
SYN ZS_NBR_OF_BSSAP_CS_DTC = 280;
/*AM END: CR650353*/
/* END  : ADD-WIPRO-B10-MR2Ed04-CHANGE CR2599 */
/*END: AR1-2771996*/

SYN ZS_DUMMY           = 0;                                                     
                                                                                
NEWMODE ZM_180_COUNTERS = SET(E_C400_INC_HO_REQ,                                
                              E_C401_INC_HO_ATPT,                               
                              E_C402_INC_HO_SUCC);                              

/***** TEMPORARY UNTIL MODE INSERTED IN DATAMODEL*/ 
/*START: FR36/294844*/
/*NEWMODE ZM_DTC_STD_BSS_CTRS_2 = STRUCT (
      B_FMM_ID                M_FMM_ID,
      B_BUF_HEADER            M_PM_BUFFER_HEADER,
      B_TARGET_CELLS_PRESENT  BOOL,
      B_TARGET_CELL_CNTRS     M_DTC_TRF_TARGET_CELL_CNTRS);*//*STATIC*/

/*START: CRI 649460 */
SYN ZM_PM_MAX_SERVING_CELLS = 500;
/*END: CRI 649460 */

NEWMODE ZM_DTC_STD_BSS_CTRS_2_A = STRUCT (
      B_FMM_ID               M_FMM_ID,
      B_BUF_HEADER           M_PM_BUFFER_HEADER,
      B_TARGET_CELLS_PRESENT BOOL,
      B_TARGET_CELL_CNTRS    ZM_DTC_TRF_TARGET_CELL_CNTRS_1);

NEWMODE ZM_DTC_STD_BSS_CTRS_2_B = STRUCT (
      B_FMM_ID               M_FMM_ID,
      B_BUF_HEADER           M_PM_BUFFER_HEADER,
      B_TARGET_CELLS_PRESENT BOOL,
      B_TARGET_CELL_CNTRS    ZM_DTC_TRF_TARGET_CELL_CNTRS_2);

NEWMODE ZM_DTC_TRF_TARGET_CELL_CNTRS_1 = STRUCT (
      B_CELL_IDX            M_CELL_IDX,
      /*START: CRI 649460 */
      /*B_NBR_SERVING_CELLS   RANGE(0:(M_PM_MAX_SERVING_CELLS/2)),*/
      B_NBR_SERVING_CELLS   RANGE(0:(ZM_PM_MAX_SERVING_CELLS/2)),
      /*END: CRI 649460 */
      B_DUMMY_2             M_BYTE,
      B_SERVING_CELL_CNTRS  ZM_DTC_SERVING_CELL_CNTRS_1);

NEWMODE ZM_DTC_TRF_TARGET_CELL_CNTRS_2 = STRUCT (
      B_CELL_IDX            M_CELL_IDX,
      /*START: CRI 649460 */
      /*B_NBR_SERVING_CELLS   RANGE(((M_PM_MAX_SERVING_CELLS/2)+1):
                                    M_PM_MAX_SERVING_CELLS),*/
      B_NBR_SERVING_CELLS   RANGE(((ZM_PM_MAX_SERVING_CELLS/2)+1):
                                    ZM_PM_MAX_SERVING_CELLS),
      /*END: CRI 649460 */
/* SSV : BEGIN - FR20/310052 */				
      /*B_DUMMY_2             M_BYTE, */
/* SSV : END - FR20/310052 */
      B_SERVING_CELL_CNTRS  ZM_DTC_SERVING_CELL_CNTRS_2);

NEWMODE ZM_DTC_SERVING_CELL_CNTRS_1 =
              /*START: CRI 649460 */
              /*ARRAY (1:(M_PM_MAX_SERVING_CELLS/2)) */
              ARRAY (1:(ZM_PM_MAX_SERVING_CELLS/2)) 
              /*END: CRI 649460 */
                     M_DTC_TRF_SERVING_CELL;

NEWMODE ZM_DTC_SERVING_CELL_CNTRS_2 =
        /*START: CRI 649460 */
       /*ARRAY (((M_PM_MAX_SERVING_CELLS/2)+1):M_PM_MAX_SERVING_CELLS)*/
        ARRAY (((ZM_PM_MAX_SERVING_CELLS/2)+1):ZM_PM_MAX_SERVING_CELLS) 
        /*END: CRI 649460 */
        M_DTC_TRF_SERVING_CELL;

/*END: FR36/294844*/
                                                                                
/**********************************************************************/        
/* HISTORY FILE MODES T180   ; THIS ORDERING SEQUENCE IS ONLY                   
   USED BY CC_DATA_COLLECTOR FMM IN ORDER TO SURVIVE BOOT             */        
/**********************************************************************/        

   /* BEGIN: ADD-WIPRO-B10-MR1-CHANGE ER263 */ 
NEWMODE ZM_180_CTRS_ARR = ARRAY(ZM_180_COUNTERS) M_STA_DPVAL;                   
NEWMODE ZM_TRAFF_FLOW_DATA = ARRAY(1L:ZS_MAX_180_CELLS) ZM_180_CTRS_ARR;         
NEWMODE ZM_ACTIV_CELLS = ARRAY(1 : 500) INT;                                    
/* END: ADD-WIPRO-B10-MR1-CHANGE ER263*/
NEWMODE ZM_CELL_AND_NEXT = STRUCT ( B_NEXT_PAIR INT,                            
                                    B_SERV_CELL M_CELL_IDENTIF);                

/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE ER263 */ 
NEWMODE ZM_TRAFF_FLOW_CELLS = ARRAY (1L:ZS_MAX_180_CELLS)
                                       ZM_CELL_AND_NEXT;                 
NEWMODE ZM_TRAFF_FLOW_CELL_INFO = STRUCT(                                       
                                   B_ACTIV_CELLS ZM_ACTIV_CELLS,                
                                   B_NEXT        ZM_TRAFF_FLOW_CELLS);          
NEWMODE ZM_TCH_BSS_MSG_CTRS = STRUCT (
		                ZB_FIXED 	M_PM_TCH_UB_BSS_FIXED,
                        ZB_BSS_CTRS M_PM_TCH_BSS_CTRS);

/* END: ADD-WIPRO-B10-MR1-CHANGE ER263*/
/**********************************************************************/        
/********* TYPE 180 MODES         *************************************/        
                                                                                
SYN M_MAX_SERVING_CELLS = 64;                                                   
                                                                                
/* CHENZY B9 REMOVE
NEWMODE M_PM_RFM_T180_SERV_CTRS = STRUCT(                                       
                      B_SERVING_CELL_ID   M_LAC_CI,                             
                      B_C400_HO_REQ       M_PM_CNTR,                            
                      B_C401_HO_ATPT      M_PM_CNTR,                            
                      B_C402_HO_SUCC      M_PM_CNTR);*/
                                                                                
/* ADD IN MXB8 BEGIN */
NEWMODE ZM_PM_TP_N7_DATA = STRUCT(
  B_HEADER         INT,
  B_TP_PM_N7_CNTRS M_TP_PM_N7_CNTRS
  );

/* NEWMODE ZM_PM_TP_HDLC_DATA = STRUCT(
     B_HEADER           INT,
     B_TP_PM_HDLC_CNTRS M_TP_PM_HDLC_CNTRS);*/
    
/* 1024 HDLC CHANNEL BEGIN */  

NEWMODE ZM_PM_TP_HDLC_DATA = STRUCT(
  B_HEADER           INT,
  B_TP_PM_HDLC_CNTRS ZM_TP_PM_HDLC_CNTRS
  );
/* 1024 HDLC CHANNEL END  */
/* ADD IN MXB8 END */
/* ADD IN B11 MR0PKG1 */

/*FR245359*/
NEWMODE ZM_PM_TP_IPOE1_DATA = STRUCT(
  B_HEADER           INT,
  B_IPOE1_PM_CNTRS ZM_IPOE1_PM_CNTRS
  );

NEWMODE ZM_IPOE1_PM_CNTRS = STRUCT (
 B_NBR_IPOE1      INT,
 B_IPOE1_CNTRS    M_IPOE1_CNTRS_ARRAY
);
/*FR245359*/
/* ADD IN B11 MR0PKG1 */

/* START : WIPRO B11 IP MR0 PKG1 */
NEWMODE ZM_PM_SLH_IP_N7_DATA = STRUCT(
  B_HEADER         INT,
  B_SLH_IP_PM_N7_CNTRS M_SLHIP_PM_N7_CNTRS
  );

NEWMODE ZM_TC_IP_PM_DATA = STRUCT (
B_FMM_ID       M_FMM_ID,    /*FMM ID OF SENDER*/
B_TC_ID        M_TC_ID, /* TC ID OF TC RACK WHICH IS ASKED PM DATA.*/
B_PM_TYPE      M_MEAS_TYPE, /* REQUIRED PM TYPE */
B_PM_DATA_LEN  INT,         /*INVALID PM DATA LENGTH */
B_IP_PM_DATA   ZM_IP_PM_DATA   /* PM IP DATA REPORTED BY TC */
);

NEWMODE ZM_IP_PM_DATA = STRUCT (
B_TC_PM_IP_CNTRS ZM_PM_IP_LINK_CNTRS_ARRAY,
B_PERIOD       INT              /* REAL PERIOD */ 
);
/*Commented by TCINVALIDISSUES*/
/*NEWMODE ZM_PM_IP_LINK_CNTRS_ARRAY = ARRAY
                           (E_IP28A_NB_TC_SENT_TCSL_IP_BYT:
                          E_IP33F_TCTC_IPTCH_BYT_HI_MIN) M_LONG_INT;*/
/*Commented by TCINVALIDISSUES*/
/*ADDED by TCINVALIDISSUES*/                          
/* START: 3BKA36CBR236941*/
NEWMODE ZM_PM_TC_CTRS_NAME = SET(
 E_IP28B_NB_TC_SENT_SS7_IP_BYT,
 E_IP28D_NB_TC_SENT_SS7_IP_PKT, 
 E_IP28F_TC_RESND_SS7_SCTP_SEG,  
 E_IP28G_TC_SND_SS7_BYT_HI_MIN,  
 E_IP28A_NB_TC_SENT_TCSL_IP_BYT, 
 E_IP28C_NB_TC_SENT_TCSL_IP_PKT, 
 E_IP28H_TC_SND_TCSL_BYT_HI_MIN, 
 E_IP33A_TC_TO_TC_SND_IPTCH_PKT, 
 E_IP33C_TC_TO_TC_SND_IPTCH_BYT, 
 E_IP33F_TCTC_IPTCH_BYT_HI_MIN   
);
/*NEWMODE ZM_PM_IP_LINK_CNTRS_ARRAY = ARRAY
                           (E_IP28A_NB_TC_SENT_TCSL_IP_BYT:
                          E_IP33F_TCTC_IPTCH_BYT_HI_MIN) M_STA_DPVAL;*/
NEWMODE ZM_PM_IP_LINK_CNTRS_ARRAY = ARRAY
                           (E_IP28B_NB_TC_SENT_SS7_IP_BYT:
                          E_IP33F_TCTC_IPTCH_BYT_HI_MIN) M_STA_DPVAL;                       

NEWMODE ZM_INT = STRUCT(
               CASE OF
                 :ZB_INT        INT,
                 :ZB_BYTE1,ZB_BYTE2 M_BYTE
               ESAC);

NEWMODE ZM_LONG = STRUCT(
                ZB_BYTE1        M_BYTE,
                ZB_BYTE2        M_BYTE,
                ZB_BYTE3        M_BYTE,
                ZB_BYTE4        M_BYTE);
/*ADDED by TCINVALIDISSUES*/
SYN ZS_PER_MAX = 16;
SYN ZS_PER_MIN = 5;
SYN ZS_PER_MAX_INSEC = 9600;
SYN ZS_PER_MIN_INSEC = 3000;

NEWMODE ZM_GSL_COUNTER_ARRAY  = STRUCT (
                            ZB_FMM_ID INT,
                            ZB_GSL_IDX    INT,
                            ZB_GSL_CTRS   
                             ZM_PM_GSL_LNK_CTRS_ARRAY,
                            /*CR36/236932*/
                            ZB_TYPE7_GSL_CTRS 
                              ZM_PM_TYPE7_LNK_CTRS_ARRAY);
                            /*CR36/236932*/

NEWMODE ZM_PM_GSL_LNK_CTRS_ARRAY = STRUCT(
        ZB_COUNT_ARRAY   ARRAY(ZM_PM_IP_GSL_LNK_CTRS)M_STA_DPVAL);
NEWMODE ZM_PM_IP_GSL_LNK_CTRS = SET (
 E_MC1060_NB_GSL_MSG_SENT,
 E_MC1061_NB_GSL_MSG_DISCARDED,
 E_MC1062_NB_GSL_MSG_RESENT,
 E_MC1063_NB_GSL_MSG_RECEIVED,
 E_MC1064_NB_GSL_BYTES_SENT,
 E_MC1065_MAX_NB_GSL_BYTES_SENT,
 E_MC1066_MAX_NB_GSL_MSG_SENT,
 E_MC1067_AVG_NB_MSG_GSL_QUEUE
);        
/*CR36/236932*/
NEWMODE ZM_PM_TYPE7_LNK_CTRS_ARRAY = STRUCT(
        ZB_TYPE7_COUNT_ARRAY   
           ARRAY(ZM_PM_TYPE7_GSL_LNK_CTRS)M_STA_DPVAL);
/*ADDED FOR GSL COUNTERS MEMO*/        
NEWMODE ZM_PM_TYPE7_GSL_LNK_CTRS = SET (
 E_L2_1_NB_GSL_LAPD_ESTB,
 E_L2_2_NB_GSL_LAPD_CRC_ERR,
 E_L2_3_NB_GSL_LAPD_INFO_RESENT,
 E_L2_4_NB_GSL_LAPD_RNR_SENT,
 E_L2_5_NB_GSL_LAPD_RNR_REC,
 E_L2_6_TIME_GSL_LAPD_UNAVAIL,
 E_L2_7_TIME_GSL_LAPD_CONG

);
/*CR36/236932*/


/* END : WIPRO B11 IP MR0 PKG1 */

  /*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE */
NEWMODE ZM_TC_PM_DATA = STRUCT (
B_FMM_ID       M_FMM_ID,    /*FMM ID OF SENDER*/
B_TC_ID        M_TC_ID, /* TC ID OF TC RACK WHICH IS ASKED PM DATA.*/
/*  BEGIN CR230176 */
B_VALID_INDIC  M_PM_DATA_VALIDITY,/*DATA INDICATION FOR B_PM_DATA */
/*  END CR230176 */
B_PM_TYPE      M_MEAS_TYPE, /* REQUIRED PM TYPE */
B_PM_DATA_LEN  INT,         /*INVALID PM DATA LENGTH */
B_PM_DATA      ZM_PM_DATA   /* PM DATA REPORTED BY TC */
);
 /*END: ADD-WIPRO-B10-MX-MR2-CHANGE */

NEWMODE ZM_PM_DATA = STRUCT (
B_NBR_N7_LINKS     INT,
B_TC_PM_N7_CNTRS ZM_PM_N7_LINK_CNTRS_ARRAY,
/* START : WIPRO B11 IP MR0 PKG1 */
B_PERIOD       INT              /* REAL PERIOD ADDED IN B11*/
/* END : WIPRO B11 IP MR0 PKG1 */
);

NEWMODE ZM_PM_N7_LINK_CNTRS_ARRAY = ARRAY (0:15) ZM_PM_N7_LINK_CNTRS;

NEWMODE ZM_PM_N7_LINK_CNTRS  = STRUCT (
          B_SLC        M_SLC_N7,
          B_SLH_CNTRS  M_SLH_COUNTERS_LONG);

/* 1024 HDLC CHANNEL BEGIN */

NEWMODE ZM_PM_HDLC_CNTRS_ARRAY = ARRAY (0:1023) ZM_PM_HDLC_CNTRS;

NEWMODE ZM_PM_HDLC_CNTRS = STRUCT(
  B_HDLC_IDX          RANGE (0:1023),
  B_HDLC_CNTRS        M_HDLC_CNTRS
  );

NEWMODE ZM_TP_PM_HDLC_CNTRS = STRUCT(
  ZB_NBR_HDLC          INT,
  ZB_TP_HDLC_CNTRS     ZM_PM_HDLC_CNTRS_ARRAY
  );

/* 1024 HDLC CHANNELS  END */

/* BEGIN OLC CR:745699 */
NEWMODE ZM_UB_DTC_STD_OLC_CELL_CTRS = STRUCT (
        B_FMM_ID               M_FMM_ID,
        B_BUF_HEADER           M_PM_BUFFER_HEADER,
        B_NBR_OLC_CELLS     RANGE(0:ZM_PM_MAX_STD_OLC_CELLS_DTC_BUF),
        B_OLC_CELL_CNTRS    ZM_DTC_CELL_CNTRS_BLOCK
		);

NEWMODE ZM_DTC_CELL_CNTRS_BLOCK = 
                          ARRAY(1:ZM_PM_MAX_STD_OLC_CELLS_DTC_BUF)
                                        ZM_DTC_STD_OLC_CELL_CTRS;	

	
SYN ZM_PM_MAX_STD_OLC_CELLS_DTC_BUF = 
		(8000/SIZEOF(ZM_DTC_STD_OLC_CELL_CTRS));		
	
NEWMODE ZM_DTC_STD_OLC_CELL_CTRS = STRUCT (
			B_CELL_IDX    M_CELL_IDX,
			B_RRH_ID      M_RRH_ID,
			B_NBR_TRX     M_BYTE,			
			B_DTC_TYPE110_OLC_TRX ARRAY(1:6)
			               ZM_DTC_TYPE110_OLC_PER_TRX
			);
			

	
NEWMODE ZM_DTC_TYPE110_OLC_PER_TRX = STRUCT(
B_TRX_IDX  M_TRX_IDX,
B_DTC_TYPE_110_OLC CM_DTC_OLC_CNTRS_ARRAY 
);	
			
/* END OLC CR:745699 */

SYN ZS_RELATION_NBR  ARRAY(ZM_REL_TYPE) M_RID =(:                              
    (ZE_R_CELL_MGT )    : M_RID_R_CELL_MGT ,                                  
    (ZE_R_CIC_CODE )    : M_RID_R_CIC_CODE ,                                  
    (ZE_R_CONF_CE  )    : M_RID_R_CONF_CE  ,                                  
    (ZE_R_N7_CONF  )    : M_RID_R_N7_CONF  ,                                  
    (ZE_R_PM_ACT   )    : M_RID_R_PM_ACT   ,                                  
    (ZE_R_PM_SC_G2 )    : M_RID_R_PM_SC_G2 ,                                  
    (ZE_R_RSL_LNK  )    : M_RID_R_RSL_LNK  ,                                  
    (ZE_R_TRX_MGT  )    : M_RID_R_TRX_MGT  ,
    (ZE_R_BTS_TEL  )    : M_RID_R_BTS_TEL  ,
    (ZE_R_OML_LNK  )    : M_RID_R_OML_LNK  ,
    /*CR20/223453*/
    (ZE_R_BSC_INFO)     : M_RID_R_BSC_INFO ,                               
    /*CR20/223453*/
  /*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE */
    (ZE_R_ABIS_INF )    : M_RID_R_ABIS_INF ,
    (ZE_R_BEQ_MGT  )    : M_RID_R_BEQ_MGT  ,
    (ZE_R_ATER_INF )    : M_RID_R_ATER_INF ,
    (ZE_R_CONF_TRK )    : M_RID_R_CONF_TRK ,
    (ZE_R_TRAU_CP  )    : M_RID_R_TRAU_CP ,
 /* START : WIPRO B11 IP MR0 PKG1 */
    (ZE_R_TC_MGT   )     : M_RID_R_TC_MGT,
    (ZE_R_IP_GSL   )     : M_RID_R_IP_GSL,
    /*ADDED FOR GSL COUNTERS MEMO*/
    (ZE_R_GSL_LNK  )     : M_RID_R_GSL_LNK,
    (ZE_R_BSS_PAR2 )     : M_RID_R_BSS_PAR2,
    (ZE_R_MSC_MGT  )     : M_RID_R_MSC_MGT,
    (ZE_R_CNF_ABTP )     : M_RID_R_CNF_ABTP,
     
    /*ADDED FOR GSL COUNTERS MEMO*/
  /* END: ADD-WIPRO-B10-MX-MR2-CHANGE */
 /* END : WIPRO B11 IP MR0 PKG1 */
    /*ADDED FOR AFLEX COUNTERS*/
    (ZE_R_NRI_MAP )      : M_RID_R_NRI_MAP,
    /*ADDED FOR AFLEX COUNTERS*/
    /*ADDED FOR IURG INTERFACE FEATURE*/ 
    (ZE_R_RNC_MGT )      :  M_RID_R_RNC_MGT,
    /*ADDED FOR IURG INTERFACE FEATURE*/
	/* BEGIN : B12 VAMOS */
    (ZE_R_CELL_IN )      :  M_RID_R_CELL_IN,
	/* END : B12 VAMOS */
     /*AM START:CR650353*/
    (ZE_R_SCCP_CNF)      : M_RID_R_SCCP_CNF
    /*AM END:CR650353*/
 :);                               
                                                                                
SYN ZS_MAX_SLC_N7       = 16;                                                   
SYN ZS_CELL_DEP         = TRUE;                                                 
SYN ZS_CELL_INDEP       = FALSE;                                                
                                                                                
/* INVALID VALUE FOR COUNTERS   */                                              
SYN ZS_FFFE = H'FFFE;                                                           
SYN ZS_FFFF = H'FFFF;                                                           
SYN ZS_FF   = H'FF;
/* BEGIN : B12 VAMOS */
SYN ZS_FE   = H'FE;
/* END : B12 VAMOS */
                                                                                
SYN ZS_16384  = 16384;   /* 32767/2 + 1  */                                     
SYN ZS_AVG    = TRUE;                                                           
SYN ZS_REPL   = FALSE;                                                          
SYN ZS_FIXED  = TRUE;                                                           
SYN ZS_VAR    = FALSE;                                                          
SYN ZS_NULL_CIC         M_CIC= (:.B_LNK_ID: B'11111111111,                      
                                 .B_CH_NBR: B'11111 :);                         

/* CHENZY B9 BEGIN */                                                                                
SYN ZS_NULL_CGI M_PM_CELL_ID_CGI_ARRAY = (:(*):H'FF:);
SYN ZS_DUMMY_CGI M_PM_CELL_ID_CGI_ARRAY = (:(*):0:);
/* ADDED for B10*/
SYNMODE ZM_CELL_INDEX_VALUE = RANGE(1L:700L);/*500CR312499*/

/* BEGIN CR36/302024 RFI4448 */
SYNMODE ZM_CELL_INDEX_VALUE_INT = RANGE(1:700);/*500CR312499*/
/* END CR36/302024 RFI4448 */

SYNMODE ZM_TRX_INDEX_VALUE = RANGE(1L:1000L);
/* ADDED for B10*/
/*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE*/
SYNMODE ZM_BTS_INDEX_VALUE = RANGE(1:255);
/* START : WIPRO B11 IP MR0 PKG1 */
SYNMODE ZM_IPOE1_ABIS_TPPORT_VAL = RANGE(0:255);
/* END : WIPRO B11 IP MR0 PKG1 */
SYNMODE ZM_TC_INDEX_VALUE = RANGE(1:8);
/*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE*/
/* CHENZY B9 END */

/* BEGIN :ADD-WIPRO-B10-MR1-CHANGE CR20/207886 */ 
SYN ZM_LCE_ID_OMCP_X25 = M_LCE_ID(1);
/* END :ADD-WIPRO-B10-MR1-CHANGE CR20/207886 */
/* START : AUPOIP FEATURE */
SYN ZS_DPVAL_ALL_ZERO = M_STA_DPVAL (: .B_HIGH:0,
				       .B_LOW :0 :);
NEWMODE ZM_M_TP_PM_REPORT = STRUCT (
ZB_M_TP_PM_REPORT ARRAY (1:8192) M_BYTE
);

/* END : AUPOIP FEATURE */

/**********************************************************************/        
/*                                                                    */        
/*          4.3  LOCAL DATA DEFINITIONS AND DECLARATIONS              */        
/*                                                                    */        
/**********************************************************************/        
DCL TRACEINFO              M_TRC_INFO; /*RT TRACE*/
                                                                                
DCL Z_DB_PARMS      M_DB_PARMS_ED2;                                             
DCL Z_VAL_MATE      ARRAY (1:5) ZM_VAL_MATE;                                    
                                                                                
DCL Z_T1_PTR        M_T1_PTR;
DCL Z_T1_2_PTR      M_T1_2_PTR;                                                   
DCL Z_T2_PTR        M_T2_PTR;                                                   
DCL Z_T3_PTR        M_T3_PTR;                                                   
DCL Z_T4_PTR        M_T4_PTR;                                                   
DCL Z_T5_PTR        M_T5_PTR;                                                   
DCL Z_T5_2_PTR      M_T5_2_PTR;                                                 
DCL Z_T6_PTR        M_T6_PTR;                                                   
DCL Z_T7_PTR        M_T7_PTR;
/*CR36/236932*/
DCL Z_T72_PTR       M_T72_PTR;
/*CR36/236932*/
DCL Z_T8_PTR        M_T8_PTR;                                                   
DCL Z_T9_PTR        M_T9_PTR;                                                   
DCL Z_T18_PTR       M_T18_PTR;
DCL Z_T18_2_PTR     M_T18_2_PTR;                                                  
DCL Z_T19_PTR       M_T19_PTR;                                                  
DCL Z_T25_PTR       M_T25_PTR;                                                  
DCL Z_T26_PTR       M_T26_PTR;
DCL Z_T26_2_PTR     M_T26_2_PTR;
DCL Z_T27_PTR       M_T27_PTR;                                                  
DCL Z_T28_PTR       M_T28_PTR;                                                  
DCL Z_T29_PTR       M_T29_PTR;                                                  
DCL Z_T30_PTR       M_T30_PTR;                        
DCL Z_T32_PTR       M_T32_PTR;                          
DCL Z_T33_PTR       M_T33_PTR;

DCL Z_T34_PTR       M_T34_PTR;
DCL Z_T34_2_PTR     M_T34_2_PTR;

/* BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE */
DCL Z_T35_0_PTR       M_T35_0_PTR;
DCL Z_T35_4_PTR       M_T35_4_PTR;
/* CR20/225233 */
DCL Z_T35_3_PTR       M_T35_3_PTR;
/* CR20/225233 */
DCL Z_T35_5_PTR       M_T35_5_PTR;
/*SATRT: CR20/284751 BTS FRQ SYNCH*/
DCL Z_T35_6_PTR       M_T35_6_PTR;
/*END: CR20/284751 BTS FRQ SYNCH  */
/* START : WIPRO B11 IP MR0 PKG1 */
DCL Z_T35_7_PTR       M_T35_7_PTR;
DCL Z_T35_8_PTR       M_T35_8_PTR;
/* END : WIPRO B11 IP MR0 PKG1 */
 /*END : ADD-WIPRO-B10-MX-MR2-CHANGE */

/* BEGIN: IURG INTERFACE FEATURE */
DCL Z_T36_PTR       M_T36_PTR;
/* END: IURG INTERFACE FEATURE */

/* BEGIN : B12 VAMOS */
DCL Z_T37_0_PTR       M_T37_0_PTR;
/*CRI 00823248.01*/
DCL Z_T37_0_TEMP_PTR    M_T37_0_TEMP_PTR;
DCL Z_T37_1_PTR       M_T37_1_PTR;
/*begin CR1098364 MC1408/MC1409 improv*/
DCL Z_T37_VMC_001_PTR M_T37_VMC_001_PTR;
DCL Z_TMP_MC1408_9_PTR M_TMP_MC1408_9_PTR;
/*end CR1098364 MC1408/MC1409 improv*/
/* END : B12 VAMOS */

DCL Z_T110_1_PTR    M_T110_1_PTR;
/* SPECIAL POINTER TO CATER FOR THE INABILITY TO GET A                          
 * BIG ENOUGH SPACE IN MEMORY.                                                  
 */                                                                             
DCL Z_T110_1_2_PTR  M_T110_1_2_PTR;                                             
DCL Z_T110_2_PTR    M_T110_2_PTR;                                               
DCL Z_T110_3_PTR    M_T110_3_PTR;                                               
DCL Z_T110_4_PTR    M_T110_4_PTR;
/*START: MC Counters*/
DCL Z_T110_4_2_PTR    M_T110_4_2_PTR;
/*END: MC Counters*/
DCL Z_T110_5_PTR    M_T110_5_PTR;                                            
DCL Z_T110_6_PTR    M_T110_6_PTR;
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
/* CR20/209493 START */
DCL Z_T110_7_PTR    M_T110_7_PTR;
DCL Z_T110_7_2_PTR  M_T110_7_2_PTR;
/* CR20/209493 END */
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
DCL Z_T110_8_PTR    M_T110_8_PTR;
/*ADDED FOR GSL COUNTERS MEMO*/
DCL Z_T110_9_PTR    M_T110_9_PTR;
/*ADDED FOR GSL COUNTERS MEMO*/
/*ADDED FOR A-FLEX NRI COUNTERS*/
DCL Z_T110_10_PTR    M_T110_10_PTR;
/*ADDED FOR A-FLEX NRI COUNTERS*/
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
/* END  : ADD-WIPRO-B10-MR1-CHANGE */
/* START : AUPOIP FEATURE */
DCL Z_T110_11_PTR    M_T110_11_PTR;
DCL Z_T110_12_PTR    M_T110_12_PTR;
/* END : AUPOIP FEATURE */
/* START : CR20/313054 */
DCL Z_T110_13_PTR    M_T110_13_PTR;
/* END : CR20/313054 */
/* START : CR 605005 */
DCL Z_T110_14_PTR    M_T110_14_PTR;
/* END : CR 605005 */
/* BEGIN CR:745699 */
DCL Z_T110_15_1_PTR   M_T110_15_1_PTR;
DCL Z_T110_15_2_PTR   M_T110_15_2_PTR;
/* END CR:745699 */
/*CR 889255*/
DCL Z_T110_MC1531_PTR  M_T110_MC1531_PTR;
/*CR 88255*/

/*START CR MOCN */
DCL Z_T110_17_PTR    M_T110_17_PTR;
/*END CR MOCN */

/*begin CR1238146 A-GPS*/
DCL Z_T110_18_PTR    M_T110_18_PTR;
/*end CR1238146 A-GPS*/

DCL Z_T180_1_PTR    M_T180_1_PTR;                                               
DCL Z_T180_2_PTR    M_T180_2_PTR;

/*begin improv for 00981139 DTC 513 overload*/
DCL Z_DTC_OL_PTR    ZM_DTC_OL_PTR;
/*end improv for 00981139 DTC 513 overload*/
                                                                                
DCL Z_STD_CELL_LIST       ZM_STD_CELL_LIST,                                     
    Z_STD_CELL_LIST_NEW   ZM_STD_CELL_LIST;                                     
DCL Z_STD_TRX_LIST        ZM_STD_TRX_LIST,                                      
    Z_STD_TRX_LIST_NEW    ZM_STD_TRX_LIST;                                      
DCL Z_TRXS_PER_TCU        ZM_TRXS_PER_TCU,                                      
    Z_CIS_PER_TCU         ZM_CIS_PER_TCU;       
                                

DCL Z_T26_CELL_LIST       M_PM_LIST_OF_CELLS;
                                                                                
DCL Z_R_CELL_MGT_PTR      PTR;                                                  
DCL Z_R_CONF_CE_PTR       PTR;                                                  
DCL Z_R_CIC_CODE_PTR      PTR;                                                  
DCL Z_R_N7_CONF_PTR       PTR;                                                  
DCL Z_R_PM_ACT_PTR        PTR;                                                  
DCL Z_R_PM_SC_G2_PTR      PTR;                                                  
DCL Z_R_RSL_LNK_PTR       PTR;                                                  
DCL Z_R_TRX_MGT_PTR       PTR;  
DCL Z_R_BTS_TEL_PTR       PTR;                                                
DCL Z_R_OML_LNK_PTR       PTR;
/*CR20/223453*/
DCL Z_R_BSC_INFO_PTR      PTR;
/*CR20/223453*/
/*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE*/
DCL Z_R_BEQ_MGT_PTR       PTR;
DCL Z_R_ABIS_INF_PTR      PTR;    
DCL Z_R_TRAU_CP_PTR       PTR;   
DCL Z_R_ATER_INF_PTR      PTR;    
DCL Z_R_CONF_TRK_PTR      PTR;    
DCL Z_R_TC_MGT_PTR        PTR;  
/* START : WIPRO B11 IP MR0 PKG1 */
DCL Z_R_IP_GSL_PTR        PTR;
/*CR2596*/
DCL Z_R_CNF_ABTP_PTR        PTR;
/*CR2596*/
/*ADDED FOR GSL COUNTERS MEMO*/
DCL Z_R_GSL_LNK_PTR       PTR;
DCL Z_R_BSS_PAR2_PTR      PTR;
DCL Z_R_MSC_MGT_PTR       PTR;
/*ADDED FOR GSL COUNTERS MEMO*/
/*ADDED FOR AFLEX COUNTERS*/
DCL Z_R_NRI_MAP_PTR       PTR;
/*ADDED FOR AFLEX COUNTERS*/ 
/* END : WIPRO B11 IP MR0 PKG1 */
/*END: ADD-WIPRO-B10-MX-MR2-CHANGE*/

/*ADDED FOR IURG INTERFACE FEATURE */
DCL Z_R_RNC_MGT_PTR       PTR;
/*ADDED FOR IURG INTERFACE FEATURE */
/* BEGIN : B12 VAMOS */
DCL Z_R_CELL_IN_PTR 	  PTR;
/* END : B12 VAMOS */
/*AM START:650353*/
DCL Z_R_SCCP_CNF_PTR   PTR;
/*AM END:650353*/
/* DCTPD01273907 */
DCL Z_OLC_CELL_SEQ_NBR INT;
/* DCTPD01273907 */

/**********************************************************************/        
/*                                                                    */        
/*          4.4  LOCAL PROCEDURE DEFINITIONS                          */        
/*                                                                    */        
/**********************************************************************/    

                                                   
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0010_CCDC_ERROR                                  */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN   (KDC)                                 */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/28                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*  THE FUNCTION OF THIS PROCEDURE IS TO HANDLE THE ERROS WHICH ARE   */        
/*  DETECTED DURING THE EXECUTION OF THIS FMM                         */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_ER_CLASS M_ER_CLASSES,                     */        
/*                      ZF_ER_TYPE M_ER_TYPES,                        */        
/*                      ZF_ER_NBR M_SEQUENCE_NUM,                     */        
/*                      ZF_ER_US_DATA INT                             */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*                      Q_S0270_UPD_DET_TCU_CNTRS                     */        
/*                      Q_S0451_UPD_T6_DET_TCU                        */        
/*                      Q_S0452_UPD_T6_STD_DTC                        */        
/*                      Q_S0453_UPD_T6_DET_DTC                        */        
/*                      Q_S0454_UPD_T7_STD_TCU                        */        
/*                      Q_S0460_UPD_T19_STD_DTC                       */        
/*                      Q_S0465_UPD_T19_STD_TCU                       */        
/*                      Q_S0473_UPD_N7_SCPR_T110_5                    */        
/*                      Q_S0474_UPD_T9_CPR_N7                         */        
/*                      Q_S0490_UPD_T27_STD_DTC                       */        
/*                      Q_S0506_UPD_T1_STD_TCU                        */        
/*                      Q_S0507_UPD_T1_STD_DTC                        */        
/*                      Q_S0509_UPD_T1_STD_TCHRM                      */        
/*                      Q_S0512_UPD_T2_DET_TCU                        */        
/*                      Q_S0513_UPD_T2_STD_TCU                        */        
/*                      Q_S0514_UPD_T2_STD_TCHRM_DLS                  */        
/*                      Q_S0516_UPD_T2_STD_TCHRM                      */        
/*                      Q_S0522_UPD_T3_STD_TCU                        */        
/*                      Q_S0525_UPD_T4_DET_TCU                        */        
/*                      Q_S0530_UPD_T5_DET_TCU                        */        
/*                      Q_S0550_UPDATE_CCI_TYPE110_1                  */        
/*                      Q_S0580_UPDATE_CCI_TYPE110_2                  */        
/*                      Q_S0581_UPD_CCI_TCH_TYPE110_2                 */        
/*                      Q_S0582_UPD_CCI_TCU_TYPE110_2                 */        
/*                      Q_S0585_UPD_T28_STD_DTC                       */        
/*                      Q_S0586_UPD_T29_STD_DTC                       */        
/*                      Q_S0587_UPD_T29_STD_TCHRM                     */        
/*                      Q_S0590_UPDATE_CCI_TYPE110_4                  */        
/*                      P_GDXBYX_INIT_SSM                             */        
/*                      P_GDXBYX_UPD_CCI_STD_CTRS                     */        
/*                      P_GDXBYX_UPD_CCI_DETAIL_CTRS                  */        
/*     PRIMITIVES CALLED:                                             */        
/*                      ERROR_REPORT                                  */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0010_CCDC_ERROR: PROC(ZF_ER_CLASS    M_ER_CLASSES,                           
                         ZF_ER_TYPE     M_ER_TYPES,                             
                         ZF_ER_NBR      M_SEQUENCE_NUM,                         
                         ZF_ER_US_DATA  INT);                                   
DCL ZQ_ERROR_BUFFER  ZM_ERR_BUF_MODE;                                           
DCL ZQ_ERROR_NBR     M_SEQUENCE_NUM;                                            
DCL ZQ_ER_BUFF_PTR   M_USER_DATA_PTR;                                           
                                                                                
 ZQ_ERROR_NBR   := ZF_ER_NBR;                                                   
 ZQ_ER_BUFF_PTR := ->ZQ_ERROR_BUFFER;                                           
                                                                                
 CASE ZF_ER_TYPE OF                                                             
                                                                                
   (M_ERT0019_INC_MESS_DATA):                                                   
     DO WITH ZQ_ER_BUFF_PTR -> ZM_ERR_BUF_MODE.B_ER_BUF0019;                    
       B_MSG_NBR := ZF_ER_US_DATA;                                              
       B_FMM_ID  := M_FI_CC_DATA_COLLECTOR;                                     
     OD;                                                                        
                                                                                
   (M_ERT0009_DBASE_ACC_FAIL):                                                  
     DO WITH ZQ_ER_BUFF_PTR -> ZM_ERR_BUF_MODE.B_ER_BUF0009;                    
       B_DB_STATUS       := M_DB_STATUS(Z_DB_PARMS.B_DB_STATUS);                
       B_DB_RELATION_ID  := Z_DB_PARMS.B_REL_PTR->                              
                                         M_DB_REL_TAB_ELEM.B_REL_ID;            
       B_LOG_PROC_ID     := Z_DB_PARMS.B_REL_CE_ID;                             
       B_DB_ACCESS_TYPE  := Z_DB_PARMS.B_COM_ID;                                
     OD;                                                                        
   ELSE;                                                                        
 ESAC;                                                                          
 
 /*WIPRO:B10_MX_MR1 RT TRACE*/
 TRACEINFO    :='ERRORS IN EXECUTION (%d %d %d)  ';
      TRC_BSC_PM1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_CCDC_SSM),
              TRACEID(ERIR),
              TRACEINFO,
              LONG_INT((ZF_ER_CLASS)),
              LONG_INT((ZF_ER_NBR)),
              LONG_INT((ZF_ER_TYPE)));
/*END WIPRO:B10_MX_MR1 RT TRACE*/
                                                                               
 ERROR_REPORT (ZF_ER_CLASS, ZF_ER_TYPE,                                         
               ZF_ER_NBR,   ZQ_ER_BUFF_PTR);                                    
                                                                                
END Q_S0010_CCDC_ERROR;                                                         
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0020_ADD_DP_VALUES                               */        
/*                                                                    */        
/*     PROGRAMMER: A.  BENAGLIO (FACE-MI)                             */        
/*                                                                    */        
/*     CREATION DATE: 92/12/21                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*               THIS PROCEDURE ADDS TWO DOUBLE PRECISION VARIABLES.  */        
/*  DOUBLE PRECISION CONSISTS OF A HIGH AND A LOW PART.               */        
/*                                                                    */        
/*  THE RANGE OF THOSE TWO PARTS IS FROM 0 TO 65535 REPRESENTED BY    */        
/*    POSITIVE NUMBERS FOR 0 TO 32767                                 */        
/*    NEGATIVE NUMBERS FOR 32768 TO 65535                             */        
/*                                                                    */        
/*  THE LOW PART OF THE VARIABLE HAS FOLLOWING MEANING:               */        
/*      Y >= 0   LOW := Y ----->    Y                                 */        
/*      Y < 0    LOW := Y ----->    65536 + Y                         */        
/*                                                                    */        
/*  THE HIGH PART OF THE VARIABLE HAS FOLLOWING MEANING:              */        
/*      X >= 0   HIGH := X ----->   X * 65536                         */        
/*      X < 0    HIGH := X ----->  (65536 + X) * 65536                */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_X M_STA_DPVAL ,                            */        
/*                      ZF_SUM M_STA_DPVAL LOC                        */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0474_UPD_T9_CPR_N7                         */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0020_ADD_DP_VALUES: PROC(ZF_X   M_STA_DPVAL ,                                
                            ZF_SUM M_STA_DPVAL LOC );                           
DCL ZQ_CARRY INT;                                                               
                                                                                
                                                                                
IF (ZF_SUM.B_LOW = ZS_FFFE AND ZF_SUM.B_HIGH = ZS_FFFF)  OR                     
   (ZF_X.B_LOW = ZS_FFFF AND ZF_X.B_HIGH = ZS_FFFF)                             
THEN                                                                            
  /* IT HAS OVERFLOWED AS INDICATED BY H'FFFF FFFE OR                           
   * THE SOURCE VALUE IS INVALID.                                               
   */                                                                           
  /* ADD BY CHENZY FOR B9P1 WITTS 295*/
  IF (ZF_X.B_LOW = ZS_FFFF AND ZF_X.B_HIGH = ZS_FFFF)
  THEN
    ZF_SUM.B_LOW := ZS_FFFE;
    ZF_SUM.B_HIGH := ZS_FFFF;
  FI;
ELSE                                                                            
  IF ZF_SUM.B_LOW = ZS_FFFF AND ZF_SUM.B_HIGH = ZS_FFFF                         
  THEN                                                                          
    /* IT IS INVALID SO OVERWRITE - NEW FOR R5 */                               
      ZF_SUM.B_LOW  := ZF_X.B_LOW;                                              
      ZF_SUM.B_HIGH := ZF_X.B_HIGH;                                             
  ELSE                                                                          
    /* VALUE IN RANGE */                                                        
    IF ZF_X.B_LOW < 0 AND ZF_SUM.B_LOW < 0                                      
    THEN                                                                        
      ZQ_CARRY := 1;                                                            
    ELSIF ((ZF_X.B_LOW < 0) OR ( ZF_SUM.B_LOW < 0 )) AND                        
           (ZF_X.B_LOW + ZF_SUM.B_LOW >= 0) THEN                                
      ZQ_CARRY := 1;                                                            
    ELSE                                                                        
      ZQ_CARRY := 0;                                                            
    FI;                                                                         
                                                                                
    /* IS ADDITION RESULTS IN OVERFLOW */                                       
    IF (ZF_X.B_HIGH < 0 AND ZF_SUM.B_HIGH < 0) OR                               
       (((ZF_X.B_HIGH < 0) OR (ZF_SUM.B_HIGH < 0)) AND                          
      (ZF_X.B_HIGH + ZF_SUM.B_HIGH >= 0))                                       
    THEN                                                                        
      /* OVERFLOW SO SET TO OVERFLOW VALUE */                                   
      DO WITH ZF_SUM;                                                           
        B_LOW  := ZS_FFFE;                                                      
        B_HIGH := ZS_FFFF;                                                      
      OD;                                                                       
    ELSE                                                                        
      /* THE NORMAL CASE ! */                                                   
      DO WITH ZF_SUM;                                                           
        B_LOW  := ZF_X.B_LOW + B_LOW;                                           
        B_HIGH := ZF_X.B_HIGH + B_HIGH + ZQ_CARRY;                              
      OD;                                                                       
    FI; /* CHECK IF OVERFLOW WHEN ADDING */                                     
  FI; /* DESTINATION IS INVALID */                                              
FI; /* OVERFLOW */                                                              
                                                                                
END Q_S0020_ADD_DP_VALUES;                                                      
/* START:CR20/284751 BTS FRQ SYNCHRO*/
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0021_CHK_RPL_DP                                  */        
/*                                                                    */        
/*     PROGRAMMER: AMITABH                                            */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/13                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       AVERAGES THE SI CTR                                          */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_BYTE M_BYTE,                               */        
/*                      ZF_INT INT LOC                                */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0570_ADD_TYPE_110_1_TCHRM_DLS              */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0021_CHK_RPL_DP: PROC(ZF_X   M_STA_DPVAL ,                                
                            ZF_OLD M_STA_DPVAL LOC );                           

  IF ((ZF_X.B_LOW = ZS_FFFF) AND (ZF_X.B_HIGH = ZS_FFFF))
  THEN
/*IGNORE TO RETAIN LAST VALID VALUE*/
   ELSE 
       ZF_OLD.B_LOW  := ZF_X.B_LOW;                                              
      ZF_OLD.B_HIGH := ZF_X.B_HIGH;   
   FI;
END Q_S0021_CHK_RPL_DP;                                                                           
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0021_CHK_RPL_INT                                 */        
/*                                                                    */        
/*     PROGRAMMER: AMITABH                                            */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/13                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       AVERAGES THE SI CTR                                          */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_BYTE M_BYTE,                               */        
/*                      ZF_INT INT LOC                                */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0570_ADD_TYPE_110_1_TCHRM_DLS              */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0021_CHK_RPL_INT: PROC(ZQ_X INT,                                
                            ZQ_OLD INT LOC );                           

  IF (ZQ_X = ZS_FFFF)
  THEN
/*IGNORE TO RETAIN LAST VALID VALUE*/
   ELSE 
       ZQ_OLD  := ZQ_X;                                              
   FI;
END Q_S0021_CHK_RPL_INT; 
/* END:CR20/284751 BTS FRQ SYNCHRO*/

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0030_ADD_BYTE_TO_INT                             */        
/*                                                                    */        
/*     PROGRAMMER: JP QUINN (KDC)                                     */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/13                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       AVERAGES THE SI CTR                                          */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_BYTE M_BYTE,                               */        
/*                      ZF_INT INT LOC                                */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0570_ADD_TYPE_110_1_TCHRM_DLS              */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0030_ADD_BYTE_TO_INT: PROC(ZF_BYTE  M_BYTE,                                  
                              ZF_INT   INT LOC);                                
                                                                                
                                                                                
NEWMODE M_INT_INTEL = STRUCT(                                                   
         CASE OF                                                                
         :B_INT   INT,                                                          
         :B_LSB   RANGE(0:255),                                                 
          B_MSB   RANGE(0:255)                                                  
         ESAC );                                                                
                                                                                
DCL ZQ_BYTE_INT M_INT_INTEL;                                                    
                                                                                
IF ZF_INT = ZS_FFFE                                                             
THEN                                                                            
  /* IT HAS OVERFLOWED AS INDICATED BY H'FFFF FFFE */                           
ELSE                                                                            
  ZQ_BYTE_INT.B_LSB := ZF_BYTE;                                                 
  ZQ_BYTE_INT.B_MSB := 0;                                                       
                                                                                
  IF ZF_INT = ZS_FFFF                                                           
  THEN                                                                          
    ZF_INT := ZQ_BYTE_INT.B_INT;                                                
  ELSE                                                                          
    ZF_INT := (ZF_INT + ZQ_BYTE_INT.B_INT)/2;                                   
  FI;                                                                           
FI; /* DEST OVERFLOW */                                                         
END Q_S0030_ADD_BYTE_TO_INT;                                                    
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0040_ADD_INT_TO_INT                              */        
/*                                                                    */        
/*     PROGRAMMER: JP QUINN (KDC)                                     */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/13                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       CHECK THE CURRENT VALUE FOR INVALIDITY OR OVERFLOW AND THEN  */        
/*       ADD AN INTEGER VALUE. IF OVERFLOW THEN MARK AS SUCH.         */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZQ_INT INT,                                   */        
/*                      ZQ_OUT_INT INT LOC                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0452_UPD_T6_STD_DTC                        */        
/*                      Q_S0453_UPD_T6_DET_DTC                        */        
/*                      Q_S0471_UPD_TYPE8_COUNTERS                    */        
/*                      Q_S0473_UPD_N7_SCPR_T110_5                    */        
/*                      Q_S0474_UPD_T9_CPR_N7                         */        
/*                      Q_S0490_UPD_T27_STD_DTC                       */        
/*                      Q_S0498_UPD_T30_SMS_CB                        */        
/*                      Q_S0513_UPD_T2_STD_TCU                        */        
/*                      Q_S0516_UPD_T2_STD_TCHRM                      */        
/*                      Q_S0555_ADD_TYPE_110_1_DTC                    */        
/*                      Q_S0560_ADD_TYPE_110_1_TCU                    */        
/*                      Q_S0565_ADD_TYPE_110_1_TCHRM                  */        
/*                      Q_S0580_UPDATE_CCI_TYPE110_2                  */        
/*                      Q_S0585_UPD_T28_STD_DTC                       */        
/*                      Q_S0586_UPD_T29_STD_DTC                       */        
/*                      Q_S0587_UPD_T29_STD_TCHRM                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0040_ADD_INT_TO_INT: PROC(ZQ_INT     INT,                                    
                             ZQ_OUT_INT INT LOC);                               
                                                                                
IF ZQ_OUT_INT = ZS_FFFE OR                                                      
   ZQ_INT = ZS_FFFF                                                             
THEN                                                                            
  /* IT HAS OVERFLOWED AS INDICATED BY H'FFFE OR                                
   * THE SOURCE VALUE IS INVALID.                                               
   */                                                                           
  /* ADD BY CHENZY FOR B9P1 WITTS 295*/
  IF ZQ_INT = ZS_FFFF
  THEN
    ZQ_OUT_INT := ZS_FFFE;
  FI;
ELSE                                                                            
  IF ZQ_OUT_INT = ZS_FFFF                                                       
  THEN                                                                          
    /* IT IS UNINITIALISED SO OVERWRITE */                                      
    ZQ_OUT_INT := ZQ_INT;                                                       
  ELSE                                                                          
    /* VALUE IN RANGE */                                                        
    IF ZQ_OUT_INT < 0 AND ZQ_INT < 0                                            
    THEN                                                                        
      /* OVERFLOW */                                                            
      ZQ_OUT_INT := ZS_FFFE;                                                    
    ELSIF ((ZQ_OUT_INT < 0) OR ( ZQ_INT < 0 )) AND                              
           (ZQ_OUT_INT + ZQ_INT >= 0)                                           
    THEN                                                                        
      /* OVERFLOW */                                                            
      ZQ_OUT_INT := ZS_FFFE;                                                    
    ELSE                                                                        
      /* THIS IS OK ! */                                                        
                                                                                
      ZQ_OUT_INT := ZQ_OUT_INT + ZQ_INT;                                        
                                                                                
    FI;                                                                         
  FI; /* DESTIN OUT OF RANGE */                                                 
FI; /* DEST OVERFLOW */                                                         
                                                                                
END Q_S0040_ADD_INT_TO_INT;   
/* BEGIN : B12 VAMOS */
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0080_ADD_BYTE_TO_BYTE                            */        
/*                                                                    */        
/*     PROGRAMMER: AABHUSHAN JYOTI KANSAKAR                           */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 2011/02/09                                      */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       CHECK THE CURRENT VALUE FOR INVALIDITY OR OVERFLOW AND THEN  */        
/*       ADD A BYTE VALUE. IF OVERFLOW THEN MARK AS SUCH.             */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZQ_BYTE M_BYTE,                               */        
/*                      ZQ_OUT_BYTE M_BYTE LOC                        */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                             					      */
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0080_ADD_BYTE_TO_BYTE: PROC(ZQ_BYTE     M_BYTE,                                    
                             ZQ_OUT_BYTE M_BYTE LOC);                               
                                                                                
IF ZQ_OUT_BYTE = ZS_FE OR                                                      
   ZQ_BYTE = ZS_FF                                                             
THEN                                                                            
  /* IT HAS OVERFLOWED AS INDICATED BY H'FFFE OR                                
   * THE SOURCE VALUE IS INVALID.                                               
   */                                                                           
  /* ADD BY CHENZY FOR B9P1 WITTS 295*/
  IF ZQ_BYTE = ZS_FF
  THEN
    ZQ_OUT_BYTE := ZS_FE;
  FI;
ELSE                                                                            
  IF ZQ_OUT_BYTE = ZS_FF                                                       
  THEN                                                                          
    /* IT IS UNINITIALISED SO OVERWRITE */                                      
    ZQ_OUT_BYTE := ZQ_BYTE;                                                       
  ELSE                                                                          
    /* VALUE IN RANGE */                                                        
    IF ZQ_OUT_BYTE < 0 AND ZQ_BYTE < 0                                            
    THEN                                                                        
      /* OVERFLOW */                                                            
      ZQ_OUT_BYTE := ZS_FE;                                                    
    ELSIF ((ZQ_OUT_BYTE < 0) OR ( ZQ_BYTE < 0 )) AND                              
           (ZQ_OUT_BYTE + ZQ_BYTE >= 0)                                           
    THEN                                                                        
      /* OVERFLOW */                                                            
      ZQ_OUT_BYTE := ZS_FE;                                                    
    ELSE                                                                        
      /* THIS IS OK ! */                                                        
                                                                                
      ZQ_OUT_BYTE := ZQ_OUT_BYTE + ZQ_BYTE;                                        
                                                                                
    FI;                                                                         
  FI; /* DESTIN OUT OF RANGE */                                                 
FI; /* DEST OVERFLOW */                                                         
                                                                                
END Q_S0080_ADD_BYTE_TO_BYTE;
/* END : B12 VAMOS */                                                  
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0050_AVG_OR_REPL_INT                             */        
/*                                                                    */        
/*     PROGRAMMER: L DIERICK (KDC)                                    */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/13                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       AVERAGES THE SI COUNTER OUT OR REPLACES A MAXIMUM CTR VALUE  */        
/*       BY A HIGHER MAXIMUM VALUE.                                   */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZQ_INT INT,                                   */        
/*                      ZQ_OUT_INT INT LOC,                           */        
/*                      ZQ_AVG BOOL                                   */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0512_UPD_T2_DET_TCU                        */        
/*                      Q_S0513_UPD_T2_STD_TCU                        */        
/*                      Q_S0514_UPD_T2_STD_TCHRM_DLS                  */        
/*                      Q_S0516_UPD_T2_STD_TCHRM                      */        
/*                      Q_S0560_ADD_TYPE_110_1_TCU                    */        
/*                      Q_S0565_ADD_TYPE_110_1_TCHRM                  */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0050_AVG_OR_REPL_INT: PROC(ZQ_INT     INT,                                   
                              ZQ_OUT_INT INT LOC,                               
                              ZQ_AVG BOOL);                                     
                                                                                
DCL ZQ_ADDITIONAL    INT;                                                       
DCL ZQ_ONE           INT;                                                       
                                                                                
IF ZQ_OUT_INT = ZS_FFFE OR                                                      
   ZQ_INT = ZS_FFFF                                                             
THEN                                                                            
  /* IT HAS OVERFLOWED AS INDICATED BY H'FFFE OR                                
   * THE SOURCE VALUE IS INVALID.                                               
   */                                                                           
ELSE                                                                            
  IF ZQ_OUT_INT = ZS_FFFF                                                       
  THEN                                                                          
    /* IT IS UNINITIALISED SO OVERWRITE */                                      
    ZQ_OUT_INT := ZQ_INT;                                                       
  ELSE                                                                          
    IF ZQ_AVG                                                                   
    THEN                                                                        
      ZQ_ONE := 1;                                                              
      IF (ZQ_OUT_INT REM 2 = 0) OR (ZQ_INT REM 2 = 0)                           
      THEN                                                                      
        ZQ_ONE := 0;                                                            
      FI;                                                                       
      IF ZQ_OUT_INT < 0                                                         
      THEN                                                                      
        ZQ_ADDITIONAL := ZQ_OUT_INT + 32767 + 1;                                
        ZQ_OUT_INT := ZS_16384 + ZQ_ADDITIONAL/2;                               
      ELSE                                                                      
        ZQ_OUT_INT := ZQ_OUT_INT/2;                                             
      FI;                                                                       
      IF ZQ_INT < 0                                                             
      THEN                                                                      
        ZQ_ADDITIONAL := ZQ_INT + 32767 + 1;                                    
        ZQ_INT := ZS_16384 + ZQ_ADDITIONAL/2;                                   
      ELSE                                                                      
        ZQ_INT := ZQ_INT/2;                                                     
      FI;                                                                       
      ZQ_OUT_INT := ZQ_OUT_INT + ZQ_INT + ZQ_ONE;                               
    ELSE                                                                        
      IF ZQ_INT /= 0                                                            
      THEN                                                                      
        IF ZQ_OUT_INT = 0                                                       
        THEN                                                                    
          ZQ_OUT_INT := ZQ_INT;                                                 
        ELSIF ZQ_OUT_INT/ZQ_INT > 0 OR ZQ_INT/ZQ_OUT_INT > 0                    
        THEN                                                                    
                                 /* SAME SIGN FOR BOTH NUMBERS */               
          IF ZQ_OUT_INT < ZQ_INT                                                
          THEN                                                                  
            ZQ_OUT_INT := ZQ_INT;                                               
          FI;                                                                   
        ELSIF ZQ_INT < 0         /* DIFFERENT SIGN: NEG AND POS */              
        THEN                                                                    
          ZQ_OUT_INT := ZQ_INT;                                                 
        FI;                                                                     
      FI;                                                                       
    FI;                                                                         
  FI; /* DESTIN OUT OF RANGE */                                                 
FI; /* DEST OVERFLOW */                                                         
                                                                                
END Q_S0050_AVG_OR_REPL_INT;                                                    

/*START CR20/312407 SS*/
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S5432_AVG_OR_REPL_LONG_INT                        */        
/*                                                                    */        
/*     PROGRAMMER: SUMIT                                              */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 06/12/2011                                      */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       AVERAGES THE SI COUNTER OUT OR REPLACES A MAXIMUM CTR VALUE  */        
/*       BY A HIGHER MAXIMUM VALUE.                                   */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZQ_INT INT,                                   */        
/*                      ZQ_LINT M_STA_DPVAL LOC,                      */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0512_UPD_T2_DET_TCU                        */        
/*                      Q_S0513_UPD_T2_STD_TCU                        */        
/*                      Q_S0514_UPD_T2_STD_TCHRM_DLS                  */        
/*                      Q_S0516_UPD_T2_STD_TCHRM                      */        
/*                      Q_S0560_ADD_TYPE_110_1_TCU                    */        
/*                      Q_S0565_ADD_TYPE_110_1_TCHRM                  */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/   

Q_S5432_AVG_OR_REPL_LONG_INT: PROC(ZQ_INT  INT,                                   
                   ZQ_LINT M_STA_DPVAL LOC);                      
                                                                                
DCL ZQ_CARRY INT;                                                               
DCL ZQ_ONE INT;                                                                                
DCL ZQ_LONG ZM_LONG_DPVAL;                                                      

/* CR 01036993.01 
   previous code won't properly average some numbers..
   Ex : 49153 and 16383 
*/

Q_S0080_ADD_INT_TO_DPVAL(ZQ_INT,ZQ_LINT);                        
                                                        
IF ZQ_LINT.B_LOW = ZS_FFFE AND ZQ_LINT.B_HIGH = ZS_FFFF                         
THEN                                                                            
  /* IT HAS OVERFLOWED AS INDICATED BY H'FFFF FFFE */                           
ELSE                                                                            
  ZQ_LONG.ZB_LOW := ZQ_LINT.B_LOW;
  ZQ_LONG.ZB_HIGH := ZQ_LINT.B_HIGH;
  ZQ_LONG.ZB_LONG := (ZQ_LONG.ZB_LONG/2L);
  ZQ_LINT.B_LOW := ZQ_LONG.ZB_LOW;
  ZQ_LINT.B_HIGH := ZQ_LONG.ZB_HIGH;
FI; /* DEST OVERFLOW */  
                                                                                 
 END Q_S5432_AVG_OR_REPL_LONG_INT;

/*END CR20/312407 SS*/

                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0060_ADD_LONG_INT                                */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN   (KDC)                                 */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/28                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*  ADDS A LONG INT TO A M_STA_DPVAL (NOTE INTS SWAPPED!)             */        
/*  THIS IS THE SAME AS S0012 TO ADD DP VALUES.                       */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_X M_LONG_INT,                              */        
/*                      ZF_SUM M_STA_DPVAL LOC                        */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0475_UPD_T9_DTC_N7                         */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
                                                                                
Q_S0060_ADD_LONG_INT: PROC(ZF_X     M_LONG_INT,                                 
                           ZF_SUM   M_STA_DPVAL LOC);                           
DCL ZQ_CARRY INT;                                                               
                                                                                
                                                                                
IF (ZF_SUM.B_LOW = ZS_FFFE AND ZF_SUM.B_HIGH = ZS_FFFF) OR                      
   (ZF_X.B_LOW  = ZS_FFFF AND ZF_X.B_HIGH = ZS_FFFF)                            
THEN                                                                            
  /* IT HAS OVERFLOWED AS INDICATED BY H'FFFF FFFE OR                           
   * THE SOURCE VALUE IS INVALID.                                               
   */                                                                           
  /* ADD BY CHENZY FOR B9P1 WITTS 295*/
  IF (ZF_X.B_LOW  = ZS_FFFF AND ZF_X.B_HIGH = ZS_FFFF)
  THEN                                                                           
    ZF_SUM.B_LOW := ZS_FFFE;
    ZF_SUM.B_HIGH := ZS_FFFF;
  FI;
ELSE                                                                            
  IF ZF_SUM.B_LOW = ZS_FFFF AND ZF_SUM.B_HIGH = ZS_FFFF                         
  THEN                                                                          
    /* IT IS INVALID SO OVERWRITE - NEW FOR R5 */                               
      ZF_SUM.B_LOW  := ZF_X.B_LOW;                                              
      ZF_SUM.B_HIGH := ZF_X.B_HIGH;                                             
  ELSE                                                                          
    /* VALUE IN RANGE */                                                        
    IF ZF_X.B_LOW < 0 AND ZF_SUM.B_LOW < 0                                      
    THEN                                                                        
      ZQ_CARRY := 1;                                                            
    ELSIF ((ZF_X.B_LOW < 0) OR ( ZF_SUM.B_LOW < 0 )) AND                        
           (ZF_X.B_LOW + ZF_SUM.B_LOW >= 0) THEN                                
      ZQ_CARRY := 1;                                                            
    ELSE                                                                        
      ZQ_CARRY := 0;                                                            
    FI;                                                                         
                                                                                
    /* IS ADDITION RESULTS IN OVERFLOW */                                       
    IF (ZF_X.B_HIGH < 0 AND ZF_SUM.B_HIGH < 0) OR                               
       (((ZF_X.B_HIGH < 0) OR (ZF_SUM.B_HIGH < 0)) AND                          
      (ZF_X.B_HIGH + ZF_SUM.B_HIGH >= 0))                                       
    THEN                                                                        
      /* OVERFLOW SO SET TO OVERFLOW VALUE */                                   
      DO WITH ZF_SUM;                                                           
        B_LOW  := ZS_FFFE;                                                      
        B_HIGH := ZS_FFFF;                                                      
      OD;                                                                       
    ELSE                                                                        
      /* THE NORMAL CASE ! */                                                   
      DO WITH ZF_SUM;                                                           
        B_LOW  := ZF_X.B_LOW + B_LOW;                                           
        B_HIGH := ZF_X.B_HIGH + B_HIGH + ZQ_CARRY;                              
      OD;                                                                       
    FI; /* CHECK IF OVERFLOW WHEN ADDING */                                     
  FI; /* DESTINATION IS INVALID */                                              
FI; /* OVERFLOW */                                                              
END Q_S0060_ADD_LONG_INT;                                                       

/* BEGIN CR 860176 */

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0060_ADD_LONG_INT_LONG_INT                       */        
/*                                                                    */        
/*     PROGRAMMER: NAVNEETH                                           */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE:                                                 */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/**********************************************************************/        

Q_S0060_ADD_LONG_INT_LONG_INT: PROC(ZF_X    M_LONG,                                 
                           ZF_SUM   M_LONG LOC);                           
DCL ZQ_CARRY INT;                                                               
                                                                                
                                                                                
IF (ZF_SUM.B_LI = ZS_FFFE AND ZF_SUM.B_HI = ZS_FFFF) OR                      
   (ZF_X.B_LI  = ZS_FFFF AND ZF_X.B_HI = ZS_FFFF)                            
THEN                                                                            
  /* IT HAS OVERFLOWED AS INDICATED BY H'FFFF FFFE OR                           
   * THE SOURCE VALUE IS INVALID.                                               
   */                                                                           
  /* ADD BY CHENZY FOR B9P1 WITTS 295*/
  IF (ZF_X.B_LI  = ZS_FFFF AND ZF_X.B_HI = ZS_FFFF)
  THEN                                                                           
    ZF_SUM.B_LI := ZS_FFFE;
    ZF_SUM.B_HI := ZS_FFFF;
  FI;
ELSE                                                                            
  IF ZF_SUM.B_LI = ZS_FFFF AND ZF_SUM.B_HI = ZS_FFFF                         
  THEN                                                                          
    /* IT IS INVALID SO OVERWRITE - NEW FOR R5 */                               
      ZF_SUM.B_LI  := ZF_X.B_LI;                                              
      ZF_SUM.B_HI := ZF_X.B_HI;                                             
  ELSE                                                                          
    /* VALUE IN RANGE */                                                        
    IF ZF_X.B_LI < 0 AND ZF_SUM.B_LI < 0                                      
    THEN                                                                        
      ZQ_CARRY := 1;                                                            
    ELSIF ((ZF_X.B_LI < 0) OR ( ZF_SUM.B_LI < 0 )) AND                        
           (ZF_X.B_LI + ZF_SUM.B_LI >= 0) THEN                                
      ZQ_CARRY := 1;                                                            
    ELSE                                                                        
      ZQ_CARRY := 0;                                                            
    FI;                                                                         
                                                                                
    /* IS ADDITION RESULTS IN OVERFLOW */                                       
    IF (ZF_X.B_HI < 0 AND ZF_SUM.B_HI < 0) OR                               
       (((ZF_X.B_HI < 0) OR (ZF_SUM.B_HI < 0)) AND                          
      (ZF_X.B_HI + ZF_SUM.B_HI >= 0))                                       
    THEN                                                                        
      /* OVERFLOW SO SET TO OVERFLOW VALUE */                                   
      DO WITH ZF_SUM;                                                           
        B_LI  := ZS_FFFE;                                                      
        B_HI := ZS_FFFF;                                                      
      OD;                                                                       
    ELSE                                                                        
      /* THE NORMAL CASE ! */                                                   
      DO WITH ZF_SUM;                                                           
        B_LI  := ZF_X.B_LI + B_LI;                                           
        B_HI := ZF_X.B_HI + B_HI + ZQ_CARRY;                              
      OD;                                                                       
    FI; /* CHECK IF OVERFLOW WHEN ADDING */                                     
  FI; /* DESTINATION IS INVALID */                                              
FI; /* OVERFLOW */                                                              
END Q_S0060_ADD_LONG_INT_LONG_INT;   

/* END CR 660176 */

                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0070_ADD_INT_TO_3_INT                            */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN   (KDC)                                 */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/28                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*  ADDS AN INTEGER TO A 3 INTEGER LONG COUNTER (USED FOR TYPE 100)   */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_INTEGER INT,                               */        
/*                      ZF_OUT_CNT M_3_INT_CNTR LOC                   */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0590_UPDATE_CCI_TYPE110_4                  */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0070_ADD_INT_TO_3_INT: PROC(ZF_INTEGER   INT,                                
                               ZF_OUT_CNT   M_3_INT_CNTR LOC);                  
                                                                                
DCL ZQ_2ND_OVERFLOW INT,                                                        
    ZQ_3RD_OVERFLOW INT;                                                        
                                                                                
 ZQ_2ND_OVERFLOW := 0;                                                          
 ZQ_3RD_OVERFLOW := 0;                                                          
                                                                                
/* INITIALISED TO FFFF WHEN NOT USED YET. */                                    
IF ZF_OUT_CNT(1) = ZS_FFFF AND                                                  
   ZF_OUT_CNT(2) = ZS_FFFF                                                      
THEN                                                                            
  IF ZF_OUT_CNT(3) = ZS_FFFE                                                    
  THEN                                                                          
    /* OVERFLOWED - DO NOTHING */                                               
    RETURN;                                                                     
  ELSE                                                                          
    IF ZF_OUT_CNT(3) = ZS_FFFF                                                  
    THEN                                                                        
      /* INVALID - RESET */                                                     
      ZF_OUT_CNT(3) := 0;                                                       
      ZF_OUT_CNT(2) := 0;                                                       
      ZF_OUT_CNT(1) := 0;                                                       
    FI;                                                                         
  FI;                                                                           
FI;                                                                             
                                                                                
IF (ZF_INTEGER < 0 AND ZF_OUT_CNT(3) < 0)                                       
THEN                                                                            
  ZQ_2ND_OVERFLOW := 1;                                                         
                                                                                
ELSIF ((ZF_INTEGER < 0) OR (ZF_OUT_CNT(3) < 0)) AND                             
       (ZF_INTEGER + ZF_OUT_CNT(3) >= 0 )                                       
THEN                                                                            
  ZQ_2ND_OVERFLOW := 1;                                                         
FI;                                                                             
                                                                                
ZF_OUT_CNT(3) := ZF_OUT_CNT(3) + ZF_INTEGER;                                    
                                                                                
IF (ZF_OUT_CNT(2) = ZS_FFFF) AND (ZQ_2ND_OVERFLOW = 1)                          
THEN                                                                            
  ZQ_3RD_OVERFLOW := 1;                                                         
FI;                                                                             
ZF_OUT_CNT(2) := ZF_OUT_CNT(2) + ZQ_2ND_OVERFLOW;                               
                                                                                
/* NEW TO CHECK FOR OVERFLOW - NOT CARRY AS BEFORE   */                         
IF (ZF_OUT_CNT(1) = ZS_FFFF) AND (ZQ_3RD_OVERFLOW = 1)                          
THEN                                                                            
  /* INVALID - RESET */                                                         
  ZF_OUT_CNT(3) := ZS_FFFE; /* CHANGE IN B8, OLD: ZS_FFFF */
  ZF_OUT_CNT(2) := ZS_FFFF;
  ZF_OUT_CNT(1) := ZS_FFFF; /* CHANGE IN B8, OLD: ZS_FFFE */
ELSE                                                                            
  ZF_OUT_CNT(1) := ZF_OUT_CNT(1) + ZQ_3RD_OVERFLOW;                             
FI;                                                                             
END Q_S0070_ADD_INT_TO_3_INT;                                                   

/* START : WIPRO B11 IP MR0 PKG1 */                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0081_ADD_LONG_INT_TO_3_INT                       */        
/*                                                                    */        
/*     PROGRAMMER: SRINIVAS                                           */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 07/10/22                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*     ADDS A LONG INT TO A 3 INTEGER LONG COUNTER                    */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_X M_LONG_INT,                              */        
/*                      ZF_OUT_CNT M_3_INT_CNTR LOC                   */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0562_UPD_T7_TP_IPOE1                       */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/**********************************************************************/

Q_S0081_ADD_LONG_INT_TO_3_INT: PROC(ZF_X  M_LONG_INT,
                               ZF_OUT_CNT   M_3_INT_CNTR LOC);

DCL ZQ_2ND_OVERFLOW INT,
    ZQ_3RD_OVERFLOW INT;

 ZQ_2ND_OVERFLOW := 0;
 ZQ_3RD_OVERFLOW := 0;

/* INITIALISED TO FFFF WHEN NOT USED YET. */
IF ZF_OUT_CNT(1) = ZS_FFFF AND
   ZF_OUT_CNT(2) = ZS_FFFF
THEN
  IF ZF_OUT_CNT(3) = ZS_FFFE
  THEN
    /* OVERFLOWED - DO NOTHING */
    RETURN;
  ELSE
    IF ZF_OUT_CNT(3) = ZS_FFFF
    THEN
      /* INVALID - RESET */
      ZF_OUT_CNT(3) := 0;
      ZF_OUT_CNT(2) := 0;
      ZF_OUT_CNT(1) := 0;
    FI;
  FI;
FI;

IF ZF_X.B_LOW /= ZS_FFFF OR ZF_X.B_HIGH /= ZS_FFFF
THEN
   IF ZF_X.B_LOW < 0 AND ZF_OUT_CNT(3) < 0
    THEN
      ZQ_2ND_OVERFLOW := 1;
    ELSIF ((ZF_X.B_LOW < 0) OR ( ZF_OUT_CNT(3) < 0 ))     AND
           (ZF_X.B_LOW + ZF_OUT_CNT(3) >= 0) THEN
      ZQ_2ND_OVERFLOW := 1;
    FI;

ZF_OUT_CNT(3) := ZF_OUT_CNT(3) + ZF_X.B_LOW;

  /* IS ADDITION RESULTS IN OVERFLOW */
    IF (ZF_X.B_HIGH < 0 AND ZF_OUT_CNT(2) < 0) OR
       (((ZF_X.B_HIGH < 0) OR (ZF_OUT_CNT(2) < 0)) AND
      (ZF_X.B_HIGH + ZF_OUT_CNT(2) >= 0))
    THEN
        ZQ_3RD_OVERFLOW := 1; 
    FI;

ZF_OUT_CNT(2) := ZF_OUT_CNT(2) + ZF_X.B_HIGH + ZQ_2ND_OVERFLOW;

/* NEW TO CHECK FOR OVERFLOW - NOT CARRY AS BEFORE   */
IF (ZF_OUT_CNT(1) = ZS_FFFF) AND (ZQ_3RD_OVERFLOW = 1)
THEN
  /* OVERFLOW SO SET TO OVERFLOW VALUE */
  ZF_OUT_CNT(3) := ZS_FFFE; 
  ZF_OUT_CNT(2) := ZS_FFFF;
  ZF_OUT_CNT(1) := ZS_FFFF; 
ELSE
      /* THE NORMAL CASE ! */
    ZF_OUT_CNT(1) := ZF_OUT_CNT(1) + ZQ_3RD_OVERFLOW;
FI; /* OVERFLOW */
ELSE
  ZF_OUT_CNT(3) := ZS_FFFE; 
  ZF_OUT_CNT(2) := ZS_FFFF;
  ZF_OUT_CNT(1) := ZS_FFFF; 
FI;
END Q_S0081_ADD_LONG_INT_TO_3_INT;
/* END : WIPRO B11 IP MR0 PKG1 */

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0080_ADD_INT_TO_DPVAL                            */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN   (KDC)                                 */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                 JP QUINN                            97/12/05       */        
/*                                                                    */        
/*     CREATION DATE: 97/11/28                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*  ADDS AN INTEGER TO A 2 INTEGER LONG COUNTER. NOTE THAT NOW THAT   */        
/*  IF AN OVERFLOW IS DETECTED THE OF VALUE IS WRITTEN TO THE LOC.    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZQ_INT INT,                                   */        
/*                      ZQ_LINT M_STA_DPVAL LOC                       */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0451_UPD_T6_DET_TCU                        */        
/*                      Q_S0452_UPD_T6_STD_DTC                        */        
/*                      Q_S0453_UPD_T6_DET_DTC                        */        
/*                      Q_S0454_UPD_T7_STD_TCU                        */        
/*                      Q_S0455_UPD_T18_STD_DTC                       */        
/*                      Q_S0456_UPD_T110_DTC_BSS                      */        
/*                      Q_S0460_UPD_T19_STD_DTC                       */        
/*                      Q_S0465_UPD_T19_STD_TCU                       */        
/*                      Q_S0473_UPD_N7_SCPR_T110_5                    */        
/*                      Q_S0474_UPD_T9_CPR_N7                         */        
/*                      Q_S0480_UPD_T25_DTC                           */        
/*                      Q_S0481_UPD_N7_DTC_T110_5                     */        
/*                      Q_S0498_UPD_T30_SMS_CB                        */        
/*                      Q_S0506_UPD_T1_STD_TCU                        */        
/*                      Q_S0507_UPD_T1_STD_DTC                        */        
/*                      Q_S0509_UPD_T1_STD_TCHRM                      */        
/*                      Q_S0522_UPD_T3_STD_TCU                        */        
/*                      Q_S0525_UPD_T4_DET_TCU                        */        
/*                      Q_S0529_UPD_T5_DET_TCU                        */        
/*                      Q_S0555_ADD_TYPE_110_1_DTC                    */        
/*                      Q_S0560_ADD_TYPE_110_1_TCU                    */        
/*                      Q_S0565_ADD_TYPE_110_1_TCHRM                  */        
/*                      Q_S0580_UPDATE_CCI_TYPE110_2                  */        
/*                      Q_S0581_UPD_CCI_TCH_TYPE110_2                 */        
/*                      Q_S0582_UPD_CCI_TCU_TYPE110_2                 */        
/*                      Q_S0585_UPD_T28_STD_DTC                       */        
/*                      Q_S0586_UPD_T29_STD_DTC                       */        
/*                      Q_S0587_UPD_T29_STD_TCHRM                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0080_ADD_INT_TO_DPVAL: PROC(ZQ_INT   INT,                                    
                               ZQ_LINT  M_STA_DPVAL LOC);                       
                                                                                
DCL ZQ_CARRY INT;                                                               
                                                                                
                        
/*DCL XYZ   M_LONG_INT;

XYZ.B_LOW  := ZS_FFFF;
XYZ.B_HIGH := ZS_FFFF;*/
                                                        
IF ZQ_LINT.B_LOW = ZS_FFFE AND ZQ_LINT.B_HIGH = ZS_FFFF                         
THEN                                                                            
  /* IT HAS OVERFLOWED AS INDICATED BY H'FFFF FFFE */                           
ELSE                                                                            
  IF ZQ_LINT.B_LOW = ZS_FFFF AND ZQ_LINT.B_HIGH = ZS_FFFF                       
  THEN                                                                          
    /* IT IS INVALID SO OVERWRITE */                                            
    IF ZQ_INT /= ZS_FFFF                   
    THEN                                                                        
      ZQ_LINT.B_LOW  := ZQ_INT;                                                 
      ZQ_LINT.B_HIGH := 0;                                                      
    /* ADD BY CHENZY FOR B9P1 WITTS 295*/
    ELSE
      ZQ_LINT.B_LOW := ZS_FFFE;
      ZQ_LINT.B_HIGH := ZS_FFFF;
    FI;                                                                         
  ELSE                                                                          
    /* VALUE IN RANGE */                                                        
    IF ZQ_INT /= ZS_FFFF                                                       
    THEN                                                                        
      IF ZQ_LINT.B_LOW < 0 AND ZQ_INT < 0                                       
      THEN                                                                      
        /* LOW INT CAPACITY EXCEEDED */                                         
        ZQ_CARRY := 1;                                                          
      ELSIF ((ZQ_LINT.B_LOW < 0) OR ( ZQ_INT < 0 )) AND                         
             (ZQ_LINT.B_LOW + ZQ_INT >= 0)                                      
      THEN                                                                      
        /* LOW INT CAPACITY EXCEEDED */                                         
        ZQ_CARRY := 1;                                                          
      ELSE                                                                      
        ZQ_CARRY := 0;                                                          
      FI;                                                                       
                                                                                
     /* NOTE THAT INTEGER ARITHMETIC USES A TRICK - THE                         
      * BSC CANN MANIPULATE THE NUMBERS BUT NOT TEST THEM AS                    
      * FIGURES GREATER THAN 32K ARE NEGATIVE (BUT POSITIVE TO                  
      * THE OMC-R.                                                              
      */                                                                        
                                                                                
                                                                                
      DO WITH ZQ_LINT;                                                          
        B_LOW := B_LOW + ZQ_INT;                                                
        IF B_HIGH < 0 AND (B_HIGH + ZQ_CARRY) >= 0                              
        THEN                                                                    
          /* OVERFLOW */                                                        
          B_HIGH := ZS_FFFF;                                                    
          B_LOW  := ZS_FFFE;                                                    
        ELSE                                                                    
          B_HIGH := B_HIGH + ZQ_CARRY;                                          
        FI;                                                                     
      OD;                                                                       
    /* ADD BY CHENZY FOR B9P1 WITTS 295*/
    ELSE
      ZQ_LINT.B_LOW := ZS_FFFE;
      ZQ_LINT.B_HIGH := ZS_FFFF;
    FI; /* IS SOURCE VALUE OUT OF RANGE */                                      
  FI; /* DESTIN OUT OF RANGE */                                                 
FI; /* DEST OVERFLOW */                                                         
                                                                                
END Q_S0080_ADD_INT_TO_DPVAL;                                                   
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0090_MEAS_TYPE_RUNNING                           */        
/*                                                                    */        
/*     PROGRAMMER: JP QUINN (KDC)                                     */        
/*                                                                    */        
/*                J.P. QUINN                           97/12/16       */        
/*                                                                    */        
/*     CREATION DATE: 97/11/13                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       CHECKS WHTHER A PARTICULAR MEASUREMENT TYPE IS ACTIVE AND    */        
/*       RUNNING AND IT RETURNS AN INDEX INTO R_PM_ACT.               */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_MEAS_TYPE M_MEAS_TYPE,                     */        
/*                      ZF_ACT_IDX INT LOC                            */        
/*     RETURNED VALUE:                                                */        
/*                      BOOL                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*                      Q_S0250_UPD_DTC_STD_CNTRS                     */        
/*                      Q_S0260_UPD_TCH_STD_CNTRS                     */        
/*                      Q_S0270_UPD_DET_TCU_CNTRS                     */        
/*                      Q_S0280_UPD_DET_DTC_CNTRS                     */        
/*                      Q_S0290_UPD_TCH_INVALID                       */        
/*                      P_GDXBYX_UPD_CCI_STD_CTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0090_MEAS_TYPE_RUNNING: PROC(ZF_MEAS_TYPE   M_MEAS_TYPE,                     
                                ZF_ACT_IDX     INT LOC)                         
                          RETURNS(BOOL);                                        
                                                                                
DCL ZQ_ACT_IDX   INT;                                                           
                                                                                
 ZF_ACT_IDX := 0;                                                               
                                                                                
 DO FOR ZQ_ACT_IDX := 1 TO 64 WHILE ZF_ACT_IDX = 0;                             
   DO WITH Z_R_PM_ACT_PTR -> ZM_R_PM_ACT(ZQ_ACT_IDX);                           
     IF D_MEAS_TYP  = ZF_MEAS_TYPE                                              
     THEN                                                                       
       IF D_TYPE_ACT = TRUE AND D_PM_TASK /= E_NOT_RUNNING                      
       THEN                                                                     
         ZF_ACT_IDX := ZQ_ACT_IDX;
     /*ADDED FR20/235962*/
        DO WITH Z_R_BSC_INFO_PTR -> M_R_BSC_INFO;
          IF D_MEAS_TYP= E_MT_IP AND 
                    D_BSS_MODE /= M_BSS_TRANSPORT_MODE_IP
          THEN
            ZF_ACT_IDX := 0;
          FI;
        OD;
     /*ADDED FR20/235962*/
       FI;                                                                      
     FI;                                                                        
   OD;                                                                          
 OD;                                                                            
                                                                                
 RETURN(ZF_ACT_IDX /= 0);                                                          
                                                                                
END Q_S0090_MEAS_TYPE_RUNNING;                                                  
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0100_IS_SDCCH_ON_TCU_FOR_CELL                    */        
/*                                                                    */        
/*     PROGRAMMER: S DONIZETTI  (KDC)                                 */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 99/01/29                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*      IS THERE AN SDCCH CHANNEL ON THIS TCU FOR THE SPECIFIED CELL  */        
/*      RETURN TRUE OR FALSE.                                         */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_CELL_IDX M_CELL_IDX,                       */        
/*                      ZF_LDC_LCE_ID M_LCE_ID                        */        
/*     RETURNED VALUE:                                                */        
/*                      BOOL                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0160_GET_TRXS_FOR_TCU                      */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0512_UPD_T2_DET_TCU                        */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0100_IS_SDCCH_ON_TCU_FOR_CELL: PROC(ZF_CELL_IDX   M_CELL_IDX,                
                                       ZF_LDC_LCE_ID M_LCE_ID)                  
                                        RETURNS (BOOL);                         
                                                                                
DCL ZQ_IS_SDCCH    BOOL;                                                        
DCL ZQ_TS_IDX      M_TS_NUMBER;                                                 
DCL ZQ_I           INT;                                                         
DCL ZQ_TRX_ARR     ZM_TRXS_PER_TCU;                                             
                                                                                
ZQ_IS_SDCCH := FALSE;                                                           
                                                                                
ZQ_TRX_ARR := Q_S0160_GET_TRXS_FOR_TCU(ZF_LDC_LCE_ID);                          
                                                                                
DO FOR ZQ_I := 1 TO CM_FY32_PM_MAX_TRX_PER_TCU WHILE                            
                            ZQ_IS_SDCCH = FALSE;                                
  IF ZQ_TRX_ARR(ZQ_I) /= ZS_FFFF                                                     
  THEN                                                                          
    DO WITH Z_R_TRX_MGT_PTR -> ZM_R_TRX_MGT(ZQ_TRX_ARR(ZQ_I));                  
      IF D_CELL_IDX = ZF_CELL_IDX                                               
      THEN                                                                      
                                                                                
        DO FOR ZQ_TS_IDX := 0 TO 7 WHILE ZQ_IS_SDCCH = FALSE;                   
          IF D_TRX_TSCF(ZQ_TS_IDX)=M_CHAN_TYPE_SDCCH   OR                       
             D_TRX_TSCF(ZQ_TS_IDX)=M_CHAN_TYPE_SDCCH_W_CBCH  OR                 
             D_TRX_TSCF(ZQ_TS_IDX)=M_CHAN_TYPE_MAIN_COMB_BCCH OR                
             D_TRX_TSCF(ZQ_TS_IDX)=M_CHAN_TYPE_MCBCCH_W_CBCH OR
             D_TRX_TSCF(ZQ_TS_IDX)=M_CHAN_TYPE_DYN_SDCCH                   
          THEN                                                                  
            ZQ_IS_SDCCH := TRUE;                                                
          FI;                                                                   
        OD;                                                                     
      FI;                                                                       
    OD;                                                                         
  FI;                                                                           
OD;                                                                             
                                                                                
RETURN (ZQ_IS_SDCCH);                                                           
                                                                                
END Q_S0100_IS_SDCCH_ON_TCU_FOR_CELL;                                           
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0110_IS_BCCH_TRX                                 */        
/*                                                                    */        
/*     PROGRAMMER: JP QUINN (ADC)                                     */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/12                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*      IS THIS A BCCH TRX - USE MULTIPOL BUT AVOID TOO MUCH SEARCHES */        
/*      RETURN CELL IDX AND TRX IDX.                                  */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_TRX_IDX M_TRX_IDX,                         */        
/*                      ZF_CELL_IDX M_CELL_IDX LOC,                   */        
/*                      ZF_TRX_ID M_TRX_ID LOC                        */        
/*     RETURNED VALUE:                                                */        
/*                      BOOL                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0432_UPD_T3_INVALID                        */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0110_IS_BCCH_TRX: PROC(ZF_TRX_IDX  M_TRX_IDX,                                
                          ZF_CELL_IDX M_CELL_IDX LOC,                           
                          ZF_TRX_ID   M_TRX_ID LOC)                             
                      RETURNS (BOOL);                                           
DCL ZQ_IS_BCCH_TRX BOOL;                                                        
DCL ZQ_CELL_IDX    M_CELL_IDX;                                                  
                                                                                
ZQ_IS_BCCH_TRX:=FALSE;                                                          
ZF_TRX_ID:=0;                                                                   
ZF_CELL_IDX:=M_NULL_CELL_IDX;                                                   
                                                                                
/* NOTE THAT IT IS POSSIBLE TO SEARCH R_CELL_MGT FOR D_BCCH_TRX                 
 * BUT TWO DIRECT ACCESSES MUST BE QUICKER?                                     
 */                                                                             
DO WITH Z_R_TRX_MGT_PTR -> ZM_R_TRX_MGT(ZF_TRX_IDX);                            
  ZQ_CELL_IDX := D_CELL_IDX;                                                    
  ZF_TRX_ID   := D_TRX_ID;                                                      
OD;                                                                             
                                                                                
DO WITH Z_R_CELL_MGT_PTR -> ZM_R_CELL_MGT(ZQ_CELL_IDX);                         
  ZQ_IS_BCCH_TRX := (D_BCCH_TRX = ZF_TRX_IDX);                                  
  ZF_CELL_IDX    := ZQ_CELL_IDX;                                                
OD;                                                                             
                                                                                
RETURN (ZQ_IS_BCCH_TRX);                                                        
                                                                                
END Q_S0110_IS_BCCH_TRX;                                                        
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0120_GET_CIS_FOR_TCU                             */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN   (KDC)                                 */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/04/04                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*                      A TCU HANDLES A SET OF CELL_IDXS WHEN THIS    */        
/*      TCU FAILS TO RESPOND TO POLLING IT IS THESE CELL-IDX BASED    */        
/*      COUNTERS THAT ARE LOST WHICH MUST BE REFLECTED IN THE NUMBER  */        
/*      OF LOST SAMPLES.                                              */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_LCE_ID M_LCE_ID                        */        
/*     RETURNED VALUE:                                                */        
/*                      ZM_CIS_PER_TCU                                */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0430_UPD_TCU_INVALID                       */        
/*                      Q_S0441_UPD_T19_TCU_INVALID                   */        
/*                      Q_S0448_UPD_T110_TCU_INVALID                  */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0120_GET_CIS_FOR_TCU: PROC   (ZF_LDC_LCE_ID M_LCE_ID)                        
                         RETURNS(ZM_CIS_PER_TCU);                               
                                                                                
DCL ZQ_CI_ARRAY  ZM_CIS_PER_TCU,                                                
    ZQ_CCNT      RANGE(1:CM_FY32_MAX_CELLS_PER_TCU),                            
    ZQ_I         RANGE(1:CM_FY32_MAX_CELLS_PER_TCU),                            
    ZQ_CI        M_CELL_IDX,                                                    
    ZQ_RSL_IDX   M_RSL_IDX,                                                     
    ZQ_TRX_IDX   M_TRX_IDX,                                                     
    ZQ_CI_EXISTS BOOL;                                                          
                                                                                
/* THIS WORKS FOR R4 SO I AM NOT CHANGING IT TO ANYTHING ELSE. JPQ */           
                                                                                
 DO FOR ZQ_CCNT := 1 TO CM_FY32_MAX_CELLS_PER_TCU;                              
   ZQ_CI_ARRAY(ZQ_CCNT) := M_NULL_CELL_IDX;                                     
 OD;                                                                            
                                                                                
 ZQ_CCNT := 1;                                                                  
                                                                                
 DO FOR ZQ_RSL_IDX := 1 TO CM_FY32_MAX_TRX_PER_BSC;                             
   DO WITH Z_R_RSL_LNK_PTR -> ZM_R_RSL_LNK(ZQ_RSL_IDX);                         
     IF D_TCU_ID = ZF_LDC_LCE_ID                                                
     THEN                                                                       
       DO FOR ZQ_TRX_IDX := 1 TO CM_FY32_MAX_TRX_PER_BSC;                       
         DO WITH Z_R_TRX_MGT_PTR -> ZM_R_TRX_MGT(ZQ_TRX_IDX);                   
           IF D_RSL_IDX = ZQ_RSL_IDX                                            
           THEN                                                                 
             ZQ_CI := D_CELL_IDX;                                               
                                                                                
             ZQ_CI_EXISTS := FALSE;                                             
                                                                                
             DO FOR ZQ_I := 1 TO ZQ_CCNT;                                       
               /* SO NO DUPLICATE CI IN ARR */                                  
               IF ZQ_CI_ARRAY(ZQ_I) = ZQ_CI THEN                                
                 ZQ_CI_EXISTS := TRUE;                                          
               FI;                                                              
             OD;                                                                
                                                                                
             IF ZQ_CI_EXISTS = FALSE                                            
             THEN                                                               
               ZQ_CI_ARRAY(ZQ_CCNT) := ZQ_CI;                                   
                                                                                
               /* IT SHOULD BE IMPOSSIBLE TO EVER GET MORE THAN THE MAX         
                * NUMBER OF CELLS FROM A TCU POPULATED IN THE DATABASE.         
                */                                                              
               ZQ_CCNT := ZQ_CCNT MOD CM_FY32_MAX_CELLS_PER_TCU + 1;            
             FI;                                                                
                                                                                
           FI;                                                                  
         OD;                                                                    
       OD;                                                                      
     FI;                                                                        
   OD;                                                                          
 OD;                                                                            
                                                                                
 Z_CIS_PER_TCU := ZQ_CI_ARRAY;                      /* DEBUG PURPOSES */        
                                                                                
 RETURN(ZQ_CI_ARRAY);                                                           
                                                                                
END Q_S0120_GET_CIS_FOR_TCU;                                                    
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0130_DTC_CE_FUNC                                 */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN (KDC)                                   */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/04/09                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION: R_CONF_CE IS ACCESSED TO CHECK THE     */        
/*      CE FUNCTIONALITY OF THE SUPPLIED LCE_ID, IF IT IS SET TO THE  */        
/*      INPUT TYPE THEN TRUE IS RETURNED.                             */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LCE_ID M_LCE_ID,                           */        
/*                      ZF_CE_FUNC M_CE_FUNCTIONALITY                 */        
/*     RETURNED VALUE:                                                */        
/*                      BOOL                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0250_UPD_DTC_STD_CNTRS                     */        
/*                      Q_S0260_UPD_TCH_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0130_DTC_CE_FUNC: PROC(ZF_LCE_ID  M_LCE_ID,                                  
                          ZF_CE_FUNC M_CE_FUNCTIONALITY)                        
                       RETURNS(BOOL);                                           
                                                                                
 DO WITH Z_R_CONF_CE_PTR -> ZM_R_CONF_CE(INT(ZF_LCE_ID));                       
   IF D_CE_FUNCT = ZF_CE_FUNC THEN                                              
     RETURN TRUE;                                                               
   ELSE                                                                         
     RETURN FALSE;                                                              
   FI;                                                                          
 OD;                                                                            
                                                                                
END Q_S0130_DTC_CE_FUNC;
/*AM START: CR650353*/ 
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0131_DTC_SCCP_LCEID                              */        
/*                                                                    */        
/*     PROGRAMMER: ATMARAM MORE (WI)                                  */        
/*                                                                    */        
/*     LAST MODIFIED BY:                    DATE:                     */        
/*                                                                    */        
/*     CREATION DATE: 3/19/2012                                       */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION: R_SCCP_CNF IS ACCESSED TO CHECK THE    */        
/*      DTCWHICH HAVE ACTIVE SCCP SUPPLIED BSSAP LCE_ID, IF IT IS     */        
/*      CS DTC TRUE IS RETURNED.                                      */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_LCE_ID M_LCE_ID                        */        
/*     RETURNED VALUE:                                                */        
/*                      BOOL                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0250_UPD_DTC_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0131_DTC_SCCP_LCEID: PROC(ZF_LDC_LCE_ID  M_LCE_ID)                                  
                             RETURNS(BOOL);                                           
  DCL ZQ_IDX INT; 

    DO FOR ZQ_IDX:=1 TO ZS_NBR_OF_BSSAP_CS_DTC;
       DO WITH Z_R_SCCP_CNF_PTR -> ZM_R_SCCP_CNF(ZQ_IDX);
          IF ( D_LCE_ID = ZF_LDC_LCE_ID )
            THEN
              RETURN TRUE;                                                               
          FI;                                                                          
        OD;
    OD;                                                                            
    RETURN FALSE;                                                               
END Q_S0131_DTC_SCCP_LCEID;                                                       
/*AM END: CR650353*/
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0140_GET_CIC_FROM_LCEID                          */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN (KDC)                                   */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/17                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       USES THE RELATION R_CIC_CODE - NO FAST ACCESS                */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LCE_ID M_LCE_ID                            */        
/*     RETURNED VALUE:                                                */        
/*                      M_CIC                                         */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0150_GET_CH_NBR                            */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0439_UPD_N7_SCPR_INVALID                   */        
/*                      Q_S0442_UPD_DTC_N7_INVALID                    */        
/*                      Q_S0445_UPD_T25_DTC_INVALID                   */        
/*                      Q_S0473_UPD_N7_SCPR_T110_5                    */        
/*                      Q_S0474_UPD_T9_CPR_N7                         */        
/*                      Q_S0475_UPD_T9_DTC_N7                         */        
/*                      Q_S0480_UPD_T25_DTC                           */        
/*                      Q_S0481_UPD_N7_DTC_T110_5                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0140_GET_CIC_FROM_LCEID: PROC(ZF_LCE_ID  M_LCE_ID,
                                 /*CR20/223453*/
                                 ZF_SLC M_SLC_N7) 
                                 /*CR20/223453*/
                            RETURNS(M_CIC);                                     
                                                                                
SYNMODE ZM_CHAN_FRIG =   BIN(5);                                                
                                                                                
DCL ZQ_CIC_CODE     M_CIC,                                                      
    ZQ_CH_NBR       M_DTN_ID;                                                   
DCL ZQ_CIC_REV      ZM_CIC_REV;                                                 
DCL ZQ_BYT          M_BYTE;                                                     
DCL ZQ_SLC          M_SLC_N7; 
DCL ZQ_IDX          INT;                                                        
                                                                                
 ZQ_CIC_CODE := ZS_NULL_CIC;                                                    
 
 /*DEL begin for ER6724 by ZHUJ*/
 /*                                                                               
 DO FOR ZQ_IDX := 1 TO 72 WHILE ZQ_CIC_CODE = ZS_NULL_CIC;  
 */
 /*DEL end*/
/*START CR20/223453*/
DO WITH Z_R_BSC_INFO_PTR -> ZM_R_BSC_INFO; 
IF D_N7_MODE = E_N7_LSL
THEN
/*END CR20/223453*/
/*ADD begin for ER6724 by ZHUJ*/
 DO FOR ZQ_IDX := 1 TO CM_FY32_PM_MAX_CIC 
                WHILE ZQ_CIC_CODE = ZS_NULL_CIC;  
 /*ADD end*/                  
   DO WITH Z_R_CIC_CODE_PTR -> ZM_R_CIC_CODE(ZQ_IDX);                           
     IF D_LCE_ID = ZF_LCE_ID                                                    
     THEN                                                                       
       ZQ_CIC_CODE := D_CIC_CODE;                                               
       ZQ_CH_NBR:=Q_S0150_GET_CH_NBR(ZF_LCE_ID);                                
                                                                                
       ZQ_CIC_CODE.B_CH_NBR:= ZM_CHAN_FRIG(ZQ_CH_NBR MOD 32);                   
                                                                                
       /*** REVERSE BYTES ****/                                                 
       ZQ_CIC_REV.ZB_CIC := ZQ_CIC_CODE;                                        
       ZQ_BYT := ZQ_CIC_REV.ZB_CIC1;                                            
       ZQ_CIC_REV.ZB_CIC1 := ZQ_CIC_REV.ZB_CIC2;                                
       ZQ_CIC_REV.ZB_CIC2 := ZQ_BYT;                                            
       ZQ_CIC_CODE := ZQ_CIC_REV.ZB_CIC;                                        
     FI;                                                                        
   OD;                                                                          
 OD;                                                                            
/*START CR20/223453*/
 ELSE
       ZQ_SLC := ZF_SLC;
       ZQ_CIC_CODE.B_CH_NBR:= ZM_CHAN_FRIG(ZQ_SLC MOD 32);                   
       ZQ_CIC_CODE.B_LNK_ID:= B'00000000000;                   
       
       /*** REVERSE BYTES ****/                                                 
       ZQ_CIC_REV.ZB_CIC := ZQ_CIC_CODE;                                        
       ZQ_BYT := ZQ_CIC_REV.ZB_CIC1;                                            
       ZQ_CIC_REV.ZB_CIC1 := ZQ_CIC_REV.ZB_CIC2;                                
       ZQ_CIC_REV.ZB_CIC2 := ZQ_BYT;                                            
       ZQ_CIC_CODE := ZQ_CIC_REV.ZB_CIC;                                        
/*END CR20/223453*/
FI;
OD;
                                                                                
RETURN(ZQ_CIC_CODE);                                                           
                                                                                
END Q_S0140_GET_CIC_FROM_LCEID;                                                 
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0141_GET_SLC_FROM_LCEID                          */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN (KDC)                                   */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LCE_ID M_LCE_ID                            */        
/*     RETURNED VALUE:                                                */        
/*                      M_SLC                                         */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*     CALLED FROM:                                                   */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0141_GET_SLC_FROM_LCEID: PROC(ZF_LCE_ID  M_LCE_ID)
                            RETURNS(M_SLC_N7);
DCL ZQ_SLC          M_SLC_N7;
DCL ZQ_IDX          INT;
ZQ_SLC := 0;
DO FOR ZQ_IDX := 1 TO 16;
   DO WITH Z_R_N7_CONF_PTR -> ZM_R_N7_CONF(ZQ_IDX);
    IF D_LCE_ID = ZF_LCE_ID
    THEN
        ZQ_SLC :=  D_SLC; 
        RETURN(ZQ_SLC);
    FI;
   OD;
OD;
RETURN(ZQ_SLC);

END Q_S0141_GET_SLC_FROM_LCEID;
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0150_GET_CH_NBR                                  */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN (SDT)                                   */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/17                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       USES THE RELATION R_N7_CONF, MAY NOT BE 16 - NO FAST ACCESS  */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LCE_ID M_LCE_ID                            */        
/*     RETURNED VALUE:                                                */        
/*                      M_DTN_ID                                      */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0140_GET_CIC_FROM_LCEID                    */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0150_GET_CH_NBR: PROC(ZF_LCE_ID  M_LCE_ID)                                   
                    RETURNS(M_DTN_ID);                                          
                                                                                
DCL ZQ_IDX       INT;                                                           
DCL ZQ_ACH_NBR   M_DTN_ID;                                                      
                                                                                
 ZQ_ACH_NBR := M_DTN_ID(16);                                                    
 DO FOR ZQ_IDX := 1 TO CM_FY32_PM_MAX_NBR_DTC_N7;                               
   DO WITH Z_R_N7_CONF_PTR -> ZM_R_N7_CONF(ZQ_IDX);                             
     IF D_LCE_ID = ZF_LCE_ID                                                    
     THEN                                                                       
       ZQ_ACH_NBR := D_ACH_NBR;                                                 
     FI;                                                                        
   OD;                                                                          
 OD;                                                                            
                                                                                
 RETURN (ZQ_ACH_NBR);                                                           
                                                                                
END Q_S0150_GET_CH_NBR;                                                         
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0160_GET_TRXS_FOR_TCU                            */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN   (KDC)                                 */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 16/11/97                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*                      A TCU HANDLES A SET OF CELL_IDXS WHEN THIS    */        
/*      TCU FAILS TO RESPOND TO POLLING IT IS THESE CELL-IDX BASED    */        
/*      COUNTERS THAT ARE LOST WHICH MUST BE REFLECTED IN THE NUMBER  */        
/*      OF LOST SAMPLES.                                              */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_LCE_ID M_LCE_ID                        */        
/*     RETURNED VALUE:                                                */        
/*                      ZM_TRXS_PER_TCU                               */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0100_IS_SDCCH_ON_TCU_FOR_CELL              */        
/*                      Q_S0270_UPD_DET_TCU_CNTRS                     */        
/*                      Q_S0432_UPD_T3_INVALID                        */        
/*                      Q_S0433_UPD_T4_TCU_INVALID                    */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0160_GET_TRXS_FOR_TCU: PROC   (ZF_LDC_LCE_ID M_LCE_ID)                       
                          RETURNS(ZM_TRXS_PER_TCU);                             
                                                                                
DCL ZQ_TRX_ARRAY  ZM_TRXS_PER_TCU,                                              
    ZQ_CCNT       RANGE(1:CM_FY32_PM_MAX_TRX_PER_TCU),                          
    ZQ_I          RANGE(1:CM_FY32_PM_MAX_TRX_PER_TCU),                          
    ZQ_TRX        M_TRX_IDX,                                                    
    ZQ_TRX_IDX    M_TRX_IDX,                                                    
    ZQ_RSL_IDX    M_RSL_IDX,                                                    
    ZQ_TRX_FND    BOOL;                                                         
                                                                                
 DO FOR ZQ_CCNT := 1 TO CM_FY32_PM_MAX_TRX_PER_TCU;                             
   ZQ_TRX_ARRAY(ZQ_CCNT) := M_NULL_TRX_IDX;                                     
 OD;                                                                            
                                                                                
 ZQ_CCNT := 1;                                                                  
                                                                                
 DO FOR ZQ_RSL_IDX := 1 TO CM_FY32_MAX_TRX_PER_BSC;                             
   DO WITH Z_R_RSL_LNK_PTR -> ZM_R_RSL_LNK(ZQ_RSL_IDX);                         
     IF D_TCU_ID = ZF_LDC_LCE_ID                                                
     THEN                                                                       
       ZQ_TRX_IDX := 0;                                                         
       DO FOR ZQ_TRX := 1 TO CM_FY32_MAX_TRX_PER_BSC                            
                                             WHILE ZQ_TRX_IDX = 0;              
         DO WITH Z_R_TRX_MGT_PTR -> ZM_R_TRX_MGT(ZQ_TRX);                       
           IF ZQ_RSL_IDX = D_RSL_IDX                                            
           THEN                                                                 
             ZQ_TRX_IDX := ZQ_TRX;                                              
                                                                                
             ZQ_TRX_FND := FALSE;                                               
             /* SO NO DUPLICATE TRX IN ARR */                                   
             DO FOR ZQ_I := 1 TO ZQ_CCNT;                                       
               IF ZQ_TRX_ARRAY(ZQ_I) = ZQ_TRX THEN                              
                 ZQ_TRX_FND := TRUE;                                            
               FI;                                                              
             OD;                                                                
                                                                                
             IF ZQ_TRX_FND = FALSE                                              
             THEN                                                               
               ZQ_TRX_ARRAY(ZQ_CCNT) := ZQ_TRX;                                 
               /* NOTE THAT THAT THE NUMBER OF TRXS PER TCU IS ALREADY          
                * OVER-DIMENSIONED FROM WHAT SHOULD BE POPULATED IN THE         
                * DATABASE BUT PLACE SOME DEFENSIVE CODE.                       
               */                                                               
               ZQ_CCNT := (ZQ_CCNT + 1) MOD CM_FY32_PM_MAX_TRX_PER_TCU;         
             FI;                                                                
                                                                                
           FI;                                                                  
         OD;                                                                    
       OD;                                                                      
     FI;                                                                        
   OD;                                                                          
 OD;                                                                            
                                                                                
 Z_TRXS_PER_TCU := ZQ_TRX_ARRAY;                    /* DEBUG PURPOSES */        
                                                                                
 RETURN(ZQ_TRX_ARRAY);                                                          
                                                                                
END Q_S0160_GET_TRXS_FOR_TCU;                                                   
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0170_GET_CELL_SCOPE                              */        
/*                                                                    */        
/*     PROGRAMMER: JP QUINN (KDC)                                     */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/13                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       GET CELL SCOPE OF THE JOB FOR THIS MEASUREMENT TYPE.         */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_ACT_IDX INT,                               */        
/*                      ZF_CELL_LIST M_PM_DET_CELL_LIST LOC           */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*                      Q_S0250_UPD_DTC_STD_CNTRS                     */        
/*                      Q_S0260_UPD_TCH_STD_CNTRS                     */        
/*                      Q_S0290_UPD_TCH_INVALID                       */        
/*                      Q_S0443_UPD_T26_INVALID                       */        
/*                      Q_S0444_UPD_T27_INVALID                       */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0170_GET_CELL_SCOPE: PROC(ZF_ACT_IDX    INT,                                 
                             ZF_CELL_LIST  M_PM_DET_CELL_LIST LOC);             
                                                                                
DCL ZQ_I           INT,                                                         
    ZQ_NBR_CELLS   M_BYTE;                                                      
                                                                                
/* IMPORTANT NOTE - THER ORDER OF THE CELLS IN THE CELL LIST                    
 * IS THE SAME ORDER AS THEY WILL APPEAR IN THE HISTORY FILE.                   
 * HENCE THIS ROUTINE SHOULD BE CHANGED WITH CARE!                              
 * THIS ASSUMPTION IS MADE SINCE IT ALLOWS US TO INDEX INTO                     
 * THE HISTORY FILE IN A NEAT WAY.                                              
 */                                                                             
                                                                                
  DO FOR ZQ_I := 1 TO M_PM_MAX_CELLS_FOR_A_MEAS_JOB;                            
    ZF_CELL_LIST(ZQ_I) := M_NULL_CELL_IDX;                                      
  OD;                                                                           
  ZQ_NBR_CELLS:=1;                                                              
                                                                                
  DO WITH Z_R_PM_SC_G2_PTR -> ZM_R_PM_SC_G2(ZF_ACT_IDX);                        
    DO FOR ZQ_I := 1 TO CM_FY32_MAX_CELLS_PER_BSC;                              
      IF D_SCOP_G2(ZQ_I)                                                        
      THEN                                                                      
        ZF_CELL_LIST(ZQ_NBR_CELLS) := ZQ_I;                                     
        ZQ_NBR_CELLS := ZQ_NBR_CELLS+1;                                         
      FI;                                                                       
    OD;                                                                         
  OD;                                                                           
                                                                                
END Q_S0170_GET_CELL_SCOPE;                                                     

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0176_MAKE_T26_CELL_LIST                          */
/*                                                                    */
/*     PROGRAMMER: CHEN ZHANGYI                                       */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 02/07/24                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       MAKES A COMMON CELL LIST FOR TYPE 26 JOBS.                   */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58AV_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0090_MEAS_TYPE_RUNNING                     */
/*                      Q_S0010_WAIT_BEFORE_RETRYING                  */
/*     CALLED FROM:                                                   */
/*                      Q_S0600_START_OF_POLLING                      */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0176_MAKE_T26_CELL_LIST: PROC(ZF_ACT_IDX INT);

DCL ZQ_I  INT;

Z_T26_CELL_LIST.B_NBR_CELLS:=0;

DO WITH Z_R_PM_SC_G2_PTR -> ZM_R_PM_SC_G2(ZF_ACT_IDX);
  DO WITH Z_T26_CELL_LIST;
    DO FOR ZQ_I := 1 TO CM_FY32_MAX_CELLS_PER_BSC;
      IF D_SCOP_G2(ZQ_I) AND B_NBR_CELLS < 40
      THEN
        B_NBR_CELLS := B_NBR_CELLS +1;
        B_CELL_LIST(B_NBR_CELLS) := ZQ_I;
      FI;
    OD;
  OD;                                                                     
OD;

END Q_S0176_MAKE_T26_CELL_LIST;
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0180_CELL_IN_SCOPE                               */        
/*                                                                    */        
/*     PROGRAMMER: JP QUINN (KDC)                                     */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/13                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       IS THE CELL IN THE SCOPE OF THE JOB FOR THIS MEASUREMENT TYPE*/        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_ACT_IDX INT,                               */        
/*                      ZF_CELL_IDX M_CELL_IDX                        */        
/*     RETURNED VALUE:                                                */        
/*                      BOOL                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0290_UPD_TCH_INVALID                       */        
/*                      Q_S0300_UPD_DTC_INVALID                       */        
/*                      Q_S0430_UPD_TCU_INVALID                       */        
/*                      Q_S0432_UPD_T3_INVALID                        */        
/*                      Q_S0436_UPD_T6_DTC_INVALID                    */        
/*                      Q_S0441_UPD_T19_TCU_INVALID                   */        
/*                      Q_S0451_UPD_T6_DET_TCU                        */        
/*                      Q_S0452_UPD_T6_STD_DTC                        */        
/*                      Q_S0453_UPD_T6_DET_DTC                        */        
/*                      Q_S0460_UPD_T19_STD_DTC                       */        
/*                      Q_S0465_UPD_T19_STD_TCU                       */        
/*                      Q_S0506_UPD_T1_STD_TCU                        */        
/*                      Q_S0507_UPD_T1_STD_DTC                        */        
/*                      Q_S0509_UPD_T1_STD_TCHRM                      */        
/*                      Q_S0512_UPD_T2_DET_TCU                        */        
/*                      Q_S0513_UPD_T2_STD_TCU                        */        
/*                      Q_S0514_UPD_T2_STD_TCHRM_DLS                  */        
/*                      Q_S0516_UPD_T2_STD_TCHRM                      */        
/*                      Q_S0522_UPD_T3_STD_TCU                        */        
/*                      Q_S0525_UPD_T4_DET_TCU                        */        
/*                      Q_S0530_UPD_T5_DET_TCU                        */        
/*                      Q_S0585_UPD_T28_STD_DTC                       */        
/*                      Q_S0586_UPD_T29_STD_DTC                       */        
/*                      Q_S0587_UPD_T29_STD_TCHRM                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0180_CELL_IN_SCOPE: PROC(ZF_ACT_IDX    INT,                                  
                            ZF_CELL_IDX   M_CELL_IDX)                           
                          RETURNS(BOOL);                                        
                                                                                
  DO WITH Z_R_PM_SC_G2_PTR -> ZM_R_PM_SC_G2(ZF_ACT_IDX);                        
    IF D_SCOP_G2(ZF_CELL_IDX)                                                   
    THEN                                                                        
      RETURN TRUE;                                                              
    FI;                                                                         
  OD;                                                                           
                                                                                
RETURN FALSE;                                                                   
                                                                                
END Q_S0180_CELL_IN_SCOPE;                                                      
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0200_INIT_MEM_PTRS                               */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                                   */        
/*                                                                    */        
/*     CREATION DATE: 97/11/13                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION: INITIALISES RSMB POINTERS TO NULL.     */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_DS_PTR PTR                               */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      P_GDXBYX_INIT_SSM                             */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0200_INIT_MEM_PTRS: PROC(ZF_DS_PTR   PTR);                                 

PTR(Z_T1_PTR)     := NULL; 
PTR(Z_T1_2_PTR)   := NULL;                                                          
PTR(Z_T2_PTR)     := NULL;                                                           
PTR(Z_T3_PTR)     := NULL;                                                           
PTR(Z_T4_PTR)     := NULL;                                                           
PTR(Z_T5_PTR)     := NULL;                                                           
PTR(Z_T5_2_PTR)   := NULL;                                                           
PTR(Z_T6_PTR)     := NULL;                                                           
PTR(Z_T7_PTR)     := NULL;
/*CR36/236932*/
PTR(Z_T72_PTR)    := NULL;
/*CR36/236932*/                                                           
PTR(Z_T8_PTR)     := NULL;                                                           
PTR(Z_T9_PTR)     := NULL;                                                           
PTR(Z_T18_PTR)    := NULL; 
PTR(Z_T18_2_PTR)  := NULL;                                                          
PTR(Z_T19_PTR)    := NULL;                                                           
PTR(Z_T25_PTR)    := NULL;                                                           
PTR(Z_T26_PTR)    := NULL;                                                           
PTR(Z_T26_2_PTR)  := NULL;
PTR(Z_T27_PTR)    := NULL;                                                           
PTR(Z_T28_PTR)    := NULL;                                                           
PTR(Z_T29_PTR)    := NULL;                                                           
PTR(Z_T30_PTR)    := NULL;                                                           
PTR(Z_T32_PTR)    := NULL;

PTR(Z_T33_PTR)    := NULL;

PTR(Z_T34_PTR)    := NULL;
PTR(Z_T34_2_PTR)  := NULL;

/* BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE */                                                                           
PTR(Z_T35_0_PTR)  := NULL;
PTR(Z_T35_4_PTR)  := NULL;
/* CR20/225233 */
PTR(Z_T35_3_PTR)  := NULL;
/* CR20/225233 */
PTR(Z_T35_5_PTR)  := NULL;
/* START : WIPRO B11 IP MR0 PKG1 */
PTR(Z_T35_7_PTR)  := NULL;
PTR(Z_T35_8_PTR)  := NULL;
/*START : CR20/284751 BTS FRQ SYNCHRO*/
PTR(Z_T35_6_PTR)  := NULL;
/*END : CR20/284751 BTS FRQ SYNCHRO*/
/* END : WIPRO B11 IP MR0 PKG1 */
/*END : ADD-WIPRO-B10-MX-MR2-CHANGE */ 
/* BEGIN: IURG INTERFACE FEATURE */
PTR(Z_T36_PTR)    := NULL;
/* END: IURG INTERFACE FEATURE */
/* BEGIN : B12 VAMOS */
PTR(Z_T37_0_PTR)    := NULL;
/*CRI 00823248.01*/
PTR(Z_T37_0_TEMP_PTR)    := NULL;
PTR(Z_T37_1_PTR)    := NULL;
PTR(Z_T37_VMC_001_PTR)    := NULL;
PTR(Z_TMP_MC1408_9_PTR)    := NULL;
/* END : B12 VAMOS */

PTR(Z_T110_1_PTR) := NULL;                                                           
PTR(Z_T110_1_2_PTR) := NULL;                                                         
                                                                                
PTR(Z_T110_2_PTR) := NULL;
PTR(Z_T110_3_PTR) := NULL;                                                           
PTR(Z_T110_4_PTR) := NULL;
/*START: MC Counters*/
PTR(Z_T110_4_2_PTR) := NULL;
/*END: MC Counters*/
PTR(Z_T110_5_PTR) := NULL;                                                           
PTR(Z_T110_6_PTR) := NULL;
                                                                                
PTR(Z_T180_1_PTR) := NULL;                                                           
PTR(Z_T180_2_PTR) := NULL; 

/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
PTR(Z_T110_7_PTR) := NULL;
/* END  : ADD-WIPRO-B10-MR1-CHANGE */
/* CR20/209493 START */
PTR(Z_T110_7_2_PTR) := NULL;
/* CR20/209493 END */
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
PTR(Z_T110_8_PTR) := NULL;
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
/*ADDED FOR GSL COUNTERS MEMO*/
PTR(Z_T110_9_PTR) := NULL;
/*ADDED FOR GSL COUNTERS MEMO*/
/*ADDED FOR A-FLEX NRI COUNTERS*/
PTR(Z_T110_10_PTR) := NULL;
/*ADDED FOR A-FLEX NRI COUNTERS*/
/* START : AUPOIP FEATURE  */
PTR(Z_T110_11_PTR) := NULL;
PTR(Z_T110_12_PTR) := NULL;
/* END : AUPOIP FEATURE    */
/* START : CR20/313054 */
PTR(Z_T110_13_PTR) := NULL;
/* END : CR20/313054 */
/* START : CR 605005 */
PTR(Z_T110_14_PTR) := NULL;
/* END : CR 605005 */
/* BEGIN CR:745699 */
PTR(Z_T110_15_1_PTR) := NULL;
PTR(Z_T110_15_2_PTR) := NULL;
/* END CR:745699 */

/*START CR MOCN */
PTR(Z_T110_17_PTR) := NULL;
/*END CR MOCN */

/*begin CR1238146 A-GPS*/
PTR(Z_T110_18_PTR) := NULL;
/*end CR1238146 A-GPS*/

Z_T1_PTR   := M_T1_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(1));
Z_T1_2_PTR := M_T1_2_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(2));
Z_T2_PTR   := M_T2_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(3));
Z_T3_PTR   := M_T3_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(4));
Z_T4_PTR   := M_T4_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(5));
Z_T5_PTR   := M_T5_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(6));
Z_T5_2_PTR := M_T5_2_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(7));
Z_T6_PTR   := M_T6_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(8));                        
Z_T7_PTR   := M_T7_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(9));
/*CR36/236932*/
Z_T72_PTR   := M_T72_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(10));
/*CR36/236932*/
Z_T8_PTR   := M_T8_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(11));                        
Z_T9_PTR   := M_T9_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(12));                       
Z_T18_PTR  := M_T18_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(13)); 
Z_T18_2_PTR:= M_T18_2_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(14));                      
Z_T19_PTR  := M_T19_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(15));                      
Z_T25_PTR  := M_T25_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(16));
Z_T26_PTR  := M_T26_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(17));
Z_T26_2_PTR:= M_T26_2_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(18));
Z_T27_PTR  := M_T27_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(19));                      
Z_T28_PTR  := M_T28_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(20));                      
Z_T29_PTR  := M_T29_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(21));                      
Z_T30_PTR  := M_T30_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(22));                      
Z_T32_PTR  := M_T32_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(23));
Z_T33_PTR  := M_T33_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(24));

Z_T34_PTR  := M_T34_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(25));
Z_T34_2_PTR:= M_T34_2_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(26));
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */ 
Z_T35_0_PTR:= M_T35_0_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(27));
/* CR20/225233 */
Z_T35_3_PTR:= M_T35_3_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(28));
/* CR20/225233 */
Z_T35_4_PTR:= M_T35_4_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(29));
Z_T35_5_PTR:= M_T35_5_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(30));
/*START: CR20/284751 BTS FRQ SYNCHRO*/
Z_T35_6_PTR:= M_T35_6_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(31));
/* START : WIPRO B11 IP MR0 PKG1 */
Z_T35_7_PTR:= M_T35_7_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(32));
Z_T35_8_PTR:= M_T35_8_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(33));
/* END : WIPRO B11 IP MR0 PKG1 */
/* END: ADD-WIPRO-B10-MR1-CHANGE */
/* BEGIN: IURG INTERFACE FEATURE */
Z_T36_PTR:= M_T36_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(34));
/* END: IURG INTERFACE FEATURE */
/* BEGIN : B12 VAMOS */
Z_T37_0_PTR:= M_T37_0_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(35));
/*CRI 00823248.01*/
Z_T37_0_TEMP_PTR:= M_T37_0_TEMP_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(36));
Z_T37_1_PTR:= M_T37_1_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(37));
/* END : B12 VAMOS */
Z_T110_1_PTR   := M_T110_1_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(38));               
Z_T110_1_2_PTR := M_T110_1_2_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(39));             
Z_T110_2_PTR   := M_T110_2_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(40));               
Z_T110_3_PTR   := M_T110_3_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(41));               
Z_T110_4_PTR   := M_T110_4_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(42));
/*START: MC Counters*/
Z_T110_4_2_PTR   := M_T110_4_2_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(43));
/*END: MC Counters*/
Z_T110_5_PTR   := M_T110_5_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(44));  
Z_T110_6_PTR   := M_T110_6_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(45));
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
Z_T110_7_PTR   := M_T110_7_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(46)); 
/* END  : ADD-WIPRO-B10-MR1-CHANGE */
/* CR20/209493 START */
Z_T110_7_2_PTR   := M_T110_7_2_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(47));
Z_T110_8_PTR   := M_T110_8_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(48));
/*ADDED FOR GSL COUNTERS MEMO*/
Z_T110_9_PTR   := M_T110_9_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(49));
/*ADDED FOR GSL COUNTERS MEMO*/
/*ADDED FOR A-FLEX NRI COUNTERS*/
Z_T110_10_PTR   := M_T110_10_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(50));
/*ADDED FOR A-FLEX NRI COUNTERS*/
/* START CR36/302024 RFI4448 */
Z_T110_11_PTR   := M_T110_11_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(51));
/* END CR36/302024 RFI4448 */
/* START : B12 AUPOIP */
Z_T110_12_PTR   := M_T110_12_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(52));
/* END : B12 AUPOIP */
/*START : CR20/313054 */
Z_T110_13_PTR   := M_T110_13_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(53));
/*END : CR20/313054 */
/*START : CR 605005 */
Z_T110_14_PTR   := M_T110_14_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(54));
/*END : CR 605005 */
/*BEGIN : CR 745699 */
Z_T110_15_1_PTR   := M_T110_15_1_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(55));
Z_T110_15_2_PTR   := M_T110_15_2_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(56));
/*START CHANGE : CR20/313054 TO ACCOMODATE Z_T110_13_PTR INIT..
Z_T180_1_PTR := M_T180_1_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(52));                 
Z_T180_2_PTR := M_T180_2_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(53)); 
..CHANGE TO.................................................*/
/*START CHANGE : CR 605005 TO ACCOMODATE Z_T110_14_PTR INIT..
Z_T180_1_PTR := M_T180_1_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(53));                 
Z_T180_2_PTR := M_T180_2_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(54));
..CHANGE TO.................................................*/

/*CR 889255 */
Z_T110_MC1531_PTR := M_T110_MC1531_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(57));
/*CR 889255*/

Z_T180_1_PTR := M_T180_1_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(58));                 
Z_T180_2_PTR := M_T180_2_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(59));           
/*END : CR 745699 */
/* END CHANGE: CR 605005....................................*/
/*END CHANGE : CR20/313054..................................*/ 
    
/* CR20/209493 END */
/*END:CR20/284751 BTS FRQ SYNCHRO */

/*begin CR1098364 MC1408/MC1409 improv*/
Z_T37_VMC_001_PTR := M_T37_VMC_001_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(61));
Z_TMP_MC1408_9_PTR := M_TMP_MC1408_9_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(62));
/*end CR1098364 MC1408/MC1409 improv*/

/*begin improv for 00981139 DTC 513 overload*/
Z_DTC_OL_PTR := ZM_DTC_OL_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(60));
/*end improv for 00981139 DTC 513 overload*/
/*START CR MOCN */
Z_T110_17_PTR := M_T110_17_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(63));
/*END CR MOCN */

/*begin CR1238146 A-GPS*/
Z_T110_18_PTR := M_T110_18_PTR(ZF_DS_PTR->ZM_DS_PTR_ARR(64));
/*end CR1238146 A-GPS*/

END Q_S0200_INIT_MEM_PTRS;                                                      
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0220_VALIDITY_MATE                               */        
/*                                                                    */        
/*     PROGRAMMER: L. DIERICK  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 98/10/09                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*           THIS PROCEDURE SEARCHES THE MATE LCE (FOR A GIVEN LCE)   */        
/*           IN ORDER TO KNOW THE VALIDITY. IF THE MATE IS NOT LISTED,*/        
/*           THE GIVEN LCE (ZF_LCE_ID) IS STORED IN THE LIST TOGETHER */        
/*           WITH THE VALIDITY AND THE LCE_LDC_TYPE.                  */        
/*           IF THE MATE IS LISTED - THIS MEANS BOTH CPRS RESPONDED - */        
/*           THE LIST ELEMENT IS CLEARED.                             */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LCE_ID M_LCE_ID,                           */        
/*                      ZF_LDC_TYPE M_FMM_SELECTOR,                   */        
/*                      ZF_VALIDITY M_PM_DATA_VALIDITY                */        
/*     RETURNED VALUE:                                                */        
/*                      M_BYTE                                        */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0230_SET_INVALID                           */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0220_VALIDITY_MATE : PROC (ZF_LCE_ID    M_LCE_ID,                            
                              ZF_LDC_TYPE  M_FMM_SELECTOR,                      
                              ZF_VALIDITY  M_PM_DATA_VALIDITY)                  
                        RETURNS (M_BYTE);                                       
                                                                                
DCL ZQ_FOUND         INT;                                                       
DCL ZQ_I             INT;                                                       
DCL ZQ_VAL_MATE      M_BYTE;                                                    
                                                                                
ZQ_VAL_MATE := H'FF;                                                            
ZQ_FOUND := 0;                                                                  
                                                                                
DO WITH Z_R_CONF_CE_PTR -> ZM_R_CONF_CE(INT(ZF_LCE_ID));                        
  DO FOR ZQ_I := 1 TO 5 WHILE ZQ_FOUND = 0;                                     
    DO WITH Z_VAL_MATE(ZQ_I);                                                   
      IF ZB_LDC_TYPE = ZF_LDC_TYPE  AND                                         
         ZB_LCE_ID = D_MATE_LCE                                                 
      THEN                                                                      
        ZQ_FOUND := ZQ_I;                                                       
        ZQ_VAL_MATE := ZB_VAL;                                                  
      FI;                                                                       
    OD;                                                                         
  OD;                                                                           
OD;                                                                             
                                                                                
IF ZQ_FOUND = 0                                                                 
THEN                                                                            
  DO FOR ZQ_I := 1 TO 5 WHILE ZQ_FOUND = 0;                                     
    DO WITH Z_VAL_MATE(ZQ_I);                                                   
      IF ZB_LCE_ID = M_LCE_ID_NULL                                              
      THEN                                                                      
        ZQ_FOUND := ZQ_I;                                                       
        ZB_LCE_ID := ZF_LCE_ID;                                                 
        ZB_LDC_TYPE := ZF_LDC_TYPE;                                             
        ZB_VAL := M_BYTE(ZF_VALIDITY);                                          
      FI;                                                                       
    OD;                                                                         
  OD;                                                                           
ELSE                                                                            
  Z_VAL_MATE(ZQ_FOUND) := ZS_INIT_VAL_MATE;                                     
FI;                                                                             
                                                                                
RETURN (ZQ_VAL_MATE);                                                           
                                                                                
END Q_S0220_VALIDITY_MATE;                                                      
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0230_SET_INVALID                                 */        
/*                                                                    */        
/*     PROGRAMMER: L. DIERICK  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 98/10/09                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*                 THIS PROCEDURE IS ENTERED WHEN THE VALIDITY FOR    */        
/*                 THE MATE (ACTIVE/STANDBY PAIR) IS NEEDED IN ORDER  */        
/*                 DECIDE TO INVALIDITY IN CASE OF E_DATA_INVALID     */        
/*                 FROM STANDBY AND E_DATA_VALID_INCOMPLETE FROM ACT. */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LCE_ID M_LCE_ID,                           */        
/*                      ZF_LDC_TYPE M_FMM_SELECTOR,                   */        
/*                      ZF_VALIDITY M_PM_DATA_VALIDITY                */        
/*     RETURNED VALUE:                                                */        
/*                      BOOL                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0220_VALIDITY_MATE                         */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0260_UPD_TCH_STD_CNTRS                     */        
/*                      P_GDXBYX_UPD_CCI_STD_CTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0230_SET_INVALID: PROC(ZF_LCE_ID        M_LCE_ID,                            
                          ZF_LDC_TYPE      M_FMM_SELECTOR,                      
                          ZF_VALIDITY      M_PM_DATA_VALIDITY)                  
                     RETURNS (BOOL);                                            
                                                                                
DCL ZQ_VAL_MATE      M_BYTE;                                                    
                                                                                
ZQ_VAL_MATE := Q_S0220_VALIDITY_MATE(ZF_LCE_ID, ZF_LDC_TYPE,                    
                                     ZF_VALIDITY);                              
                                                                                
IF (ZQ_VAL_MATE = M_BYTE(E_DATA_INVALID) AND                                    
    ZF_VALIDITY = E_DATA_VALID_INCOMPLETE) OR                                   
   (ZQ_VAL_MATE = M_BYTE(E_DATA_VALID_INCOMPLETE) AND                           
    ZF_VALIDITY = E_DATA_INVALID)                                               
THEN                                                                            
  RETURN (TRUE);                                                                
FI;                                                                             
                                                                                
RETURN (FALSE);                                                                 
                                                                                
END Q_S0230_SET_INVALID;                                                        
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0240_UPD_TCU_STD_CNTRS                           */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/27                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*                 THIS PROCEDURE IS ENTERED WHEN A DATA TRANSFER     */        
/*                 MESSAGE ARRIVES FROM AN LDC, CONTAINING THE        */        
/*                 LATEST STANDARD COUNTER VALUES FOR THE TCU.        */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LCE_ID M_LCE_ID,                           */        
/*                      ZF_LDC_SEQ_NBR M_BYTE,                        */        
/*                      ZF_VALIDITY M_PM_DATA_VALIDITY,               */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0090_MEAS_TYPE_RUNNING                     */        
/*                      Q_S0430_UPD_TCU_INVALID                       */        
/*                      Q_S0506_UPD_T1_STD_TCU                        */        
/*                      Q_S0513_UPD_T2_STD_TCU                        */        
/*                      Q_S0432_UPD_T3_INVALID                        */        
/*                      Q_S0522_UPD_T3_STD_TCU                        */        
/*                      Q_S0454_UPD_T7_STD_TCU                        */        
/*                      Q_S0170_GET_CELL_SCOPE                        */        
/*                      Q_S0441_UPD_T19_TCU_INVALID                   */        
/*                      Q_S0465_UPD_T19_STD_TCU                       */        
/*                      Q_S0448_UPD_T110_TCU_INVALID                  */        
/*                      Q_S0550_UPDATE_CCI_TYPE110_1                  */        
/*                      Q_S0590_UPDATE_CCI_TYPE110_4                  */        
/*                      Q_S0582_UPD_CCI_TCU_TYPE110_2                 */ 
/*                      Q_S0487_UPD_CCI_TCU_TYPE110_7                 */ 
/*                      Q_S0010_CCDC_ERROR                            */        
/*     CALLED FROM:                                                   */        
/*                      P_GDXBAX_UPD_CCI_STD_CTRS                     */        
/*                      Q_S0582_UPD_CCI_TCU_TYPE110_2                 */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*     CALLED FROM:                                                   */        
/*                      P_GDXBYX_UPD_CCI_STD_CTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0240_UPD_TCU_STD_CNTRS: PROC(ZF_LCE_ID        M_LCE_ID,                      
                                ZF_LDC_SEQ_NBR   M_BYTE,                        
                                ZF_VALIDITY      M_PM_DATA_VALIDITY,            
                                ZF_LDC_BUF_PTR   PTR);                          
                                                                                
DCL ZQ_ACT_IDX       INT;                                                       
DCL ZQ_IRRELEVANT    BOOL;                                                      
DCL ZQ_ALL_CELLS     BOOL;                                                      
DCL ZQ_CELL_LIST     M_PM_DET_CELL_LIST;                                        
/* START : WIPRO B11 IP MR0 PKG1 */
DCL ZQ_TIMEOUT       BOOL;
ZQ_TIMEOUT := FALSE;
/* END : WIPRO B11 IP MR0 PKG1 */
                                                                                
/* THE FOLLOWING MEASUREMENT TYPES ARE EXPECTED :                               
 *  1, 2, 7, 19, 32, 34, 110 (PARTS 1, 2, 3, 4).                                         
*/                                                                              
/* NOTE THAT FOR THE DETAILED TYPES THAT THE VALIDITY IS UPDATED                
 * IN THE DETAILED POLLING PART AND HENCE SHOULD NOT BE                         
 * PERFORMED HERE TO AVOID DOUBLE COUNTING.                                     
 */

/*BEGIN: TRACE_IMPROVEMENT CR36/278410*/
IF(ZF_VALIDITY = E_DATA_INVALID)
THEN
   TRACEINFO := 'TCU - INVALID CTRS (%d %d )     ';

   TRC_BSC_PM1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_CCDC_SSM),
              TRACEID(NORM),
              TRACEINFO,
              LONG_INT((ZF_LCE_ID)),
              LONG_INT((ZF_LDC_SEQ_NBR)),
              LONG_INT((0)));

FI;
/*END: TRACE_IMPROVEMENT CR36/278410*/                                                                             
IF (ZF_LDC_SEQ_NBR = 1)                                                         
THEN                                                                            
  /* ALL CNTR INFO IN ONE USER BUFFER */                                        
  IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_TRAFFIC, ZQ_ACT_IDX)                        
  THEN                                                                          
    IF ZF_VALIDITY = E_DATA_INVALID                                             
    THEN                                                                        
      Q_S0430_UPD_TCU_INVALID(ZF_LCE_ID, ZQ_ACT_IDX, E_MT_TRAFFIC);             
    ELSE                                                                        
      Q_S0506_UPD_T1_STD_TCU(ZF_LDC_BUF_PTR, ZQ_ACT_IDX);                       
    FI;                                                                         
  FI;                                                                           
                                                                                
  IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_RESOURCE_AVAILABILITY,                      
                               ZQ_ACT_IDX)                                      
  THEN                                                                          
    IF ZF_VALIDITY = E_DATA_INVALID                                             
    THEN                                                                        
      Q_S0430_UPD_TCU_INVALID(ZF_LCE_ID, ZQ_ACT_IDX,                            
                              E_MT_RESOURCE_AVAILABILITY);                      
    ELSE                                                                        
      Q_S0513_UPD_T2_STD_TCU(ZF_LDC_BUF_PTR, ZQ_ACT_IDX);                       
    FI;                                                                         
  FI;                                                                           
                                                                                
  IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_RESOURCE_USAGE_CCCH,                        
                               ZQ_ACT_IDX)                                      
  THEN                                                                          
    IF ZF_VALIDITY=E_DATA_INVALID                                               
    THEN                                                                        
      Q_S0432_UPD_T3_INVALID(ZF_LCE_ID, ZQ_ACT_IDX);                            
    ELSE                                                                        
      Q_S0522_UPD_T3_STD_TCU(ZF_LDC_BUF_PTR, ZQ_ACT_IDX);                       
    FI;                                                                         
  FI;                                                                           
                                                                                
  IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_LAPD, ZQ_ACT_IDX)                           
  THEN                                                                          
    IF ZF_VALIDITY /= E_DATA_INVALID                                            
    THEN                                                                        
      Q_S0454_UPD_T7_STD_TCU(ZF_LDC_BUF_PTR);                                   
    FI;                                                                         
  FI;                                                                           
                                                                                
  IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_SMS, ZQ_ACT_IDX)                            
  THEN                                                                          
    ZQ_ALL_CELLS := FALSE;                                                      
    Q_S0170_GET_CELL_SCOPE(ZQ_ACT_IDX, ZQ_CELL_LIST);                           
    IF ZQ_CELL_LIST(1) = M_NULL_CELL_IDX                                        
    THEN                                                                        
      ZQ_ALL_CELLS := TRUE;                                                     
    FI;                                                                         
    IF ZF_VALIDITY = E_DATA_INVALID                                             
    THEN                                                                        
      Q_S0441_UPD_T19_TCU_INVALID(ZF_LCE_ID,                                    
                                  ZQ_ACT_IDX,                                   
                                  ZQ_ALL_CELLS);                                
    ELSE                                                                        
      Q_S0465_UPD_T19_STD_TCU(ZF_LDC_BUF_PTR,                                   
                              ZQ_ACT_IDX,                                       
                              ZQ_ALL_CELLS);                                    
    FI;                                                                         
  FI;                                                                           
                                                                                
  IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_MULTIBAND_HANDOVERS, ZQ_ACT_IDX)
  THEN
    IF ZF_VALIDITY = E_DATA_INVALID
    THEN
      Q_S0595_UPD_T32_TCU_INVALID(ZF_LCE_ID);
    ELSE
      Q_S0596_UPD_T32_STD_TCU(ZF_LDC_BUF_PTR);
    FI;
  FI;
  
  /* ADD IN B9 PKG2 CHENZY BEGIN */
  IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_VGCS, ZQ_ACT_IDX)                            
  THEN                                                                          
    ZQ_ALL_CELLS := FALSE;                                                      
    Q_S0170_GET_CELL_SCOPE(ZQ_ACT_IDX, ZQ_CELL_LIST);                           
    IF ZQ_CELL_LIST(1) = M_NULL_CELL_IDX                                        
    THEN                                                                        
      ZQ_ALL_CELLS := TRUE;                                                     
    FI;                                                                         
    IF ZF_VALIDITY = E_DATA_INVALID                                             
    THEN                                                                        
      Q_S0631_UPD_T34_TCU_INVALID(ZF_LCE_ID,                                    
                                  ZQ_ACT_IDX,                                   
                                  ZQ_ALL_CELLS);                                
    ELSE                                                                        
      Q_S0630_UPD_T34_STD_TCU(ZF_LDC_BUF_PTR,                                   
                              ZQ_ACT_IDX,                                       
                              ZQ_ALL_CELLS);                                    
    FI;                                                                         
  FI;                                                                           
  /* ADD IN B9 PKG2 CHENZY END */

  IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_CELL_TRX_OVERVIEW_COUNTERS,                 
                               ZQ_ACT_IDX)                                      
  THEN                                                                          
    IF ZF_VALIDITY = E_DATA_INVALID                                             
    THEN  
      Q_S0448_UPD_T110_TCU_INVALID(ZF_LCE_ID);    
      /*ADDED FOR AFLEX COUNTERS*/
      Q_S0449_UPD_T110_TCU_BSS_INVALID();
      /*ADDED FOR AFLEX COUNTERS*/                             
    ELSE                                                                        
      Q_S0550_UPDATE_CCI_TYPE110_1(ZF_LDC_BUF_PTR,                              
                                   M_FS_TCU_TRF_LDC,                            
                                   ZF_LDC_SEQ_NBR,                              
                                   ZQ_IRRELEVANT);                              
                                                                                
      Q_S0590_UPDATE_CCI_TYPE110_4(ZF_LDC_BUF_PTR);                             
      Q_S0582_UPD_CCI_TCU_TYPE110_2(ZF_LDC_BUF_PTR);
      
      Q_S0602_UPD_CCI_TCU_TYPE110_3(ZF_LDC_BUF_PTR);
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
      Q_S0487_UPD_CCI_TCU_TYPE110_7(ZF_LDC_BUF_PTR);
/* END  : ADD-WIPRO-B10-MR1-CHANGE */
/* START : AUPOIP[ FEATURE */
      Q_S0901_UPD_CCI_TCU_TYPE110_11(ZF_LDC_BUF_PTR);
/* END : AUPOIP FEATURE */
/* START : CR20/313054 */
      Q_S0903_UPD_CCI_TCU_TYPE110_13(ZF_LDC_BUF_PTR);
/* END : CR20/313054 */
    /*ADDED FOR A-FLEX NRI COUNTERS*/
      Q_S0490_UPD_T110_TCU_BSS(ZF_LDC_BUF_PTR);
   /*ADDED FOR A-FLEX NRI COUNTERS*/
    /* BEGIN CR:745699 */
    Q_S0704_UPD_TCU_OLC_T110_15(ZF_LDC_BUF_PTR);
    /* END CR:745699 */
    FI;                                                                         
  FI;                                                                           
/* BEGIN : B12 VAMOS */
	IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_VAMOS,                 
                               ZQ_ACT_IDX)                                      
	 THEN                                                                          
	   IF ZF_VALIDITY = E_DATA_INVALID                                  
      	    THEN   
	      DO WITH Z_R_CELL_IN_PTR -> ZM_R_CELL_IN;
		/*IF D_EN_VAMOS = FALSE 
		  THEN*/
		Q_S0448_UPD_T37_TCU_INVALID(ZF_LCE_ID);
	      OD;  
	   ELSE  
	      DO WITH Z_R_CELL_IN_PTR -> ZM_R_CELL_IN;	 
		Q_S0650_UPDATE_CCI_TYPE37_0(ZF_LDC_BUF_PTR,                
					    M_FS_TCU_TRF_LDC, 
					    ZF_LDC_SEQ_NBR,               
					    ZQ_IRRELEVANT); 
		Q_S0670_UPDATE_CCI_TYPE37_1(ZF_LDC_BUF_PTR,            
					   M_FS_TCU_TRF_LDC,               
					   ZF_LDC_SEQ_NBR,          
					   ZQ_IRRELEVANT);
		/*FI;*/
	      OD;
          FI;                                                                         
    FI;

/* END : B12 VAMOS */  

/* START : WIPRO B11 IP MR0 PKG1 */
IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_IP,
                               ZQ_ACT_IDX)
  THEN
    IF ZF_VALIDITY = E_DATA_INVALID
    THEN
      /*commented */
      /*IF ZF_LDC_BUF_PTR = NULL
      THEN
       ZQ_TIMEOUT := TRUE;
      FI;*/
       /*commented */
      Q_FILL_GLOB_BTS_BUFFER_INVALID(ZF_LCE_ID); 
       /*commented */
      /*Q_S0558_UPD_T35_IP_TCU_INVALID(ZF_LCE_ID);
      IF NOT ZQ_TIMEOUT 
      THEN
       Q_S0557_UPD_T35_IP_TCU_BTS_OML_ONLY
       (ZF_LDC_BUF_PTR, ZQ_TIMEOUT);
      FI;*/
    ELSE
       /*commented */
      /*Q_S0559_UPDATE_CCI_IP_TYPE35(ZF_LDC_BUF_PTR);*/
      Q_FILL_GLOB_BTS_BUFFER(ZF_LDC_BUF_PTR);
       /*commented */
    FI;
  FI;
/* END : WIPRO B11 IP MR0 PKG1 */
/*ADDED FOR A-FLEX NRI COUNTERS*/
ELSE
 IF (ZF_LDC_SEQ_NBR = 2)
THEN
   IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_CELL_TRX_OVERVIEW_COUNTERS,
                                       ZQ_ACT_IDX)                 
  THEN                                                                          
    IF ZF_VALIDITY = E_DATA_INVALID                                             
    THEN 
      Q_S0492_UPD_T110_TCU_MSC_INVALID();
      Q_S0449_UPD_T110_TCU_NRI_INVALID();   
    ELSE   
      Q_S0491_UPD_CCI_TCU_TYPE110_9(ZF_LDC_BUF_PTR);
      Q_S0488_UPD_CCI_TCU_TYPE110_10(ZF_LDC_BUF_PTR);

     FI;
    FI;
ELSE
     IF (ZF_LDC_SEQ_NBR = 3)
THEN
    IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_CELL_TRX_OVERVIEW_COUNTERS,
                                       ZQ_ACT_IDX)  
  THEN
    IF ZF_VALIDITY = E_DATA_INVALID                                             
    THEN 
      Q_S0492_UPD_T110_TCU_MSC_INVALID();
      Q_S0449_UPD_T110_TCU_NRI_INVALID();                                  
    ELSE
      Q_S0491_UPD_CCI_TCU_TYPE110_9(ZF_LDC_BUF_PTR);    
      Q_S0488_UPD_CCI_TCU_TYPE110_10(ZF_LDC_BUF_PTR);
    FI;
   FI;               
         
ELSE                              /* SEQ NBR > 1 IS NOT EXPECTED */             
  Q_S0010_CCDC_ERROR(M_ERC6_USER_REC, M_ERT0019_INC_MESS_DATA,                  
                      09, 0194);
  FI;  /*SEQ NBR 3*/
 FI;  /*SEQ NBR 2*/
/*ADDED FOR A-FLEX NRI COUNTERS*/
FI; /* SEQ NBR 1*/                                                               
/*FR252210*/
DO WITH Z_R_BSS_PAR2_PTR -> ZM_R_BSS_PAR2;
IF D_EN_AFLEX = FALSE THEN
        
   DO WITH Z_T110_8_PTR -> (1);
           
     DO WITH B_CTRS_PT8_MT_110;	
   	
	     B_MC1109_TO_MC1207(E_MT_110_CTR_MC1204).B_LOW := 0;
	     B_MC1109_TO_MC1207(E_MT_110_CTR_MC1204).B_HIGH := 0;
	     B_MC1109_TO_MC1207(E_MT_110_CTR_MC1205).B_LOW := 0;
	     B_MC1109_TO_MC1207(E_MT_110_CTR_MC1205).B_HIGH := 0;
	     B_MC1109_TO_MC1207(E_MT_110_CTR_MC1206).B_LOW := 0;
	     B_MC1109_TO_MC1207(E_MT_110_CTR_MC1206).B_HIGH := 0;
/*Start : CR20/279046 */
 	     B_MC1109_TO_MC1207(E_MT_110_CTR_MC1207).B_LOW := 0;
	     B_MC1109_TO_MC1207(E_MT_110_CTR_MC1207).B_HIGH := 0;
/* End  : CR20/279046 */
           OD;
     OD;  
  FI;
OD;
/*FR252210*/  
                                                                                
END Q_S0240_UPD_TCU_STD_CNTRS;                                                  

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0251_UPD_VMC001X_CNTRS                           */
/*                                                                    */
/*     PROGRAMMER: xuny                                               */
/*                                                                    */
/*     CREATION DATE: 14/01/22                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*      UPD THE  VMC001x COUNTER  CR1098364 MC1408/MC1409 improv      */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                                                                    */
/*                                                                    */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                                                                    */
/*     CALLED FROM:                                                   */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
 
Q_S0251_UPD_VMC001X_CNTRS : PROC(ZF_LDC_BUF_PTR PTR,                          
                                   ZF_LDC_TYPE    M_FMM_SELECTOR,              
                                   ZF_SEQ_NBR     INT);
  

DCL ZQ_CELL_IDX INT;

IF ZF_LDC_TYPE = M_FS_DTC_TRF_LDC                                               
THEN
  IF  ZF_SEQ_NBR =7 
  THEN     
    DO FOR ZQ_CELL_IDX := 1 TO M_MAX_CELLS_PER_BSC/2;
     DO WITH ZF_LDC_BUF_PTR -> 
                 ZM_PM_VMS_NB_CTRS_POLLING_ZONE;
     DO WITH B_PM_VMC_NB_POLL_CTRS(ZQ_CELL_IDX);
     DO WITH Z_T37_VMC_001_PTR -> (ZQ_CELL_IDX);
        B_VMC001A := B_VMC001A + ZB_VMC001A;
        B_VMC001B := B_VMC001B + ZB_VMC001B;
        B_VMC001C := B_VMC001C + ZB_VMC001C;
        B_VMC001D := B_VMC001D + ZB_VMC001D;
     OD;   	
     OD;
     OD;   	
    OD;  
  ELSIF ZF_SEQ_NBR =8 
  THEN
    DO FOR ZQ_CELL_IDX := M_MAX_CELLS_PER_BSC/2 + 1 
    	                        TO M_MAX_CELLS_PER_BSC;
     DO WITH ZF_LDC_BUF_PTR -> 
                ZM_PM_VMS_NB_CTRS_POLLING_ZONE_2;
     DO WITH B_PM_VMC_NB_POLL_CTRS(ZQ_CELL_IDX);
     DO WITH Z_T37_VMC_001_PTR -> (ZQ_CELL_IDX);
        B_VMC001A := B_VMC001A + ZB_VMC001A;
        B_VMC001B := B_VMC001B + ZB_VMC001B;
        B_VMC001C := B_VMC001C + ZB_VMC001C;
        B_VMC001D := B_VMC001D + ZB_VMC001D;
     OD;   	
     OD;
     OD;   	
    OD;
  ELSE
  
  FI;

FI;

END Q_S0251_UPD_VMC001X_CNTRS;
                                                 
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0250_UPD_DTC_STD_CNTRS                           */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/27                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*                 THIS PROCEDURE IS ENTERED WHEN A DATA TRANSFER     */        
/*                 MESSAGE ARRIVES FROM AN LDC, CONTAINING THE        */        
/*                 LATEST STANDARD COUNTER VALUES FOR THAT DTC.       */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_LCE_ID M_LCE_ID,                       */        
/*                      ZF_LDC_SEQ_NBR M_BYTE,                        */        
/*                      ZF_VALIDITY M_PM_DATA_VALIDITY,               */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0130_DTC_CE_FUNC                           */        
/*                      Q_S0090_MEAS_TYPE_RUNNING                     */        
/*                      Q_S0447_UPD_T110_DTC_INVALID                  */        
/*                      Q_S0456_UPD_T110_DTC_BSS                      */        
/*                      Q_S0445_UPD_T25_DTC_INVALID                   */        
/*                      Q_S0480_UPD_T25_DTC                           */        
/*                      Q_S0440_UPD_T18_INVALID                       */        
/*                      Q_S0455_UPD_T18_STD_DTC                       */        
/*                      Q_S0444_UPD_T27_INVALID                       */        
/*                      Q_S0490_UPD_T27_STD_DTC                       */        
/*                      Q_S0300_UPD_DTC_INVALID                       */        
/*                      Q_S0507_UPD_T1_STD_DTC                        */        
/*                      Q_S0170_GET_CELL_SCOPE                        */        
/*                      Q_S0460_UPD_T19_STD_DTC                       */        
/*                      Q_S0550_UPDATE_CCI_TYPE110_1                  */        
/*                      Q_S0580_UPDATE_CCI_TYPE110_2                  */        
/*                      Q_S0436_UPD_T6_DTC_INVALID                    */        
/*                      Q_S0452_UPD_T6_STD_DTC                        */        
/*                      Q_S0585_UPD_T28_STD_DTC                       */        
/*                      Q_S0586_UPD_T29_STD_DTC                       */ 
/*                      Q_S0387_UPDATE_CCI_DTC_TYPE110_7              */ 
/*     CALLED FROM:                                                   */        
/*                      P_GDXBAX_UPD_CCI_STD_CTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0250_UPD_DTC_STD_CNTRS: PROC(ZF_LDC_LCE_ID    M_LCE_ID,                      
                                ZF_LDC_SEQ_NBR   M_BYTE,                        
                                ZF_VALIDITY      M_PM_DATA_VALIDITY,
                                ZF_STD_TRX       BOOL,            
                                ZF_LDC_BUF_PTR   PTR);                          
                                                                                
DCL ZQ_ACT_IDX       INT,                                                       
    ZQ_BSSAP         BOOL;                                                      
DCL ZQ_IRRELEVANT    BOOL;                                                      
DCL ZQ_ALL_CELLS     BOOL;                                                      
DCL ZQ_CELL_LIST     M_PM_DET_CELL_LIST;                                        
DCL ZQ_DTC_IND       BOOL;                                                      
/* START : WIPRO B11 IP MR0 PKG1 */
DCL ZQ_GSL_DTC       BOOL;
DCL ZQ_BSS_MODE      BOOL;
/* END : WIPRO B11 IP MR0 PKG1 */
ZQ_DTC_IND := FALSE;                                                            
/* START : WIPRO B11 IP MR0 PKG1 */
ZQ_GSL_DTC := FALSE;
/* END : WIPRO B11 IP MR0 PKG1 */
/* START : ER2679 */
ZQ_BSS_MODE := FALSE;
/* END : ER2679 */
ZQ_BSSAP := Q_S0130_DTC_CE_FUNC(ZF_LDC_LCE_ID,                                  
                                E_CE_FUNCT_SCCP_DTC); 

/*ADD for ER6602 BY ZHUJ begin*/
/*Since from MXB9 on, R_CONF_CE.D_CE_FUNCT will be equal to SCCP 
  when it is used for CS and PS, so we should exclude PS case*/
/*START: AR1-2771996*/
/*ADD CR 2599*/
/* The comparioson has changed for B10-MR2Ed04 as for this feature DTC
   can be b/w 9 to 208 previous comparison was ZF_LDC_LCE_ID >
                                           CM_FY32_PM_MAX_LCE_NBR_DTC */
/*IF ZF_LDC_LCE_ID > CM_FY32_PM_MAX_LCE_NBR_DTC
THEN
   ZQ_BSSAP := FALSE;
FI;*/
/*AM START:CR650353*/
ZQ_BSSAP := Q_S0131_DTC_SCCP_LCEID(ZF_LDC_LCE_ID); 
/*AM START:CR650353*/

/*AM START COMMENT: CR650353*/
/*IF ZF_LDC_LCE_ID > ZS_NBR_OF_BSSAP*/  
/*END CR 2599*/
/*THEN
   ZQ_BSSAP := FALSE;
FI;*/
/*AM END COMMENT: CR650353*/
/*ADD end*/  
/*END: AR1-2771996*/

/* BEGIN:TRACE_IMPROVEMENT CR36/278410 */
IF(ZF_VALIDITY = E_DATA_INVALID)
THEN
   TRACEINFO := 'DTC - INVALID CTRS ( %d %d %d ) ';

   TRC_BSC_PM1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_CCDC_SSM),
              TRACEID(NORM),
              TRACEINFO,
              LONG_INT((ZF_LDC_LCE_ID)),
              LONG_INT((ZF_LDC_SEQ_NBR)),
              LONG_INT((ZQ_BSSAP)));
FI;
/*END:  TRACE_IMPROVEMENT CR36/278410 */


/* BEGIN:TRACE_IMPROVEMENT CR36/278410 */
IF(ZF_VALIDITY = E_DATA_INVALID)
THEN
   TRACEINFO := 'DTC - INVALID CTRS ( %d %d %d ) ';

   TRC_BSC_PM1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_CCDC_SSM),
              TRACEID(NORM),
              TRACEINFO,
              LONG_INT((ZF_LDC_LCE_ID)),
              LONG_INT((ZF_LDC_SEQ_NBR)),
              LONG_INT((ZQ_BSSAP)));
FI;
/*END:  TRACE_IMPROVEMENT CR36/278410 */
/* THE FOLLOWING MEASUREMENT TYPES ARE EXPECTED :                               
 *  1, 2, 6, 18, 19, 25, 27, 28, 29, 34, 110(PARTS 1, 2, 3, 4, 6) */ 
IF NOT ZF_STD_TRX
  THEN
  IF ZF_LDC_SEQ_NBR = 1                                                           
    THEN                                                                            
    IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_CELL_TRX_OVERVIEW_COUNTERS,                 
                                 ZQ_ACT_IDX)                                      
      THEN                                                                          
      IF ZF_VALIDITY = E_DATA_INVALID                                             
        THEN
        /*3BKA36FBR242748*/
        /*Q_S0447_UPD_T110_DTC_INVALID(ZS_CELL_INDEP);*/
        IF (Z_DTC_OL_PTR->ZM_DTC_STD_INVALID_UPDATED.ZB_T110_DTC_IND)
        THEN
          Q_S0447_UPD_T110_DTC_INVALID(ZS_CELL_INDEP,ZQ_BSSAP);
          Z_DTC_OL_PTR->ZM_DTC_STD_INVALID_UPDATED.ZB_T110_DTC_IND
          := FALSE;
          IF (ZQ_BSSAP)
          THEN
          Z_DTC_OL_PTR->ZM_DTC_STD_INVALID_UPDATED.ZB_T110_DTC_BSSAP
          := FALSE;
          FI;
        ELSIF (Z_DTC_OL_PTR->ZM_DTC_STD_INVALID_UPDATED
          .ZB_T110_DTC_BSSAP) AND (ZQ_BSSAP)
        THEN
          Q_S0447_UPD_T110_DTC_INVALID(ZS_CELL_INDEP,ZQ_BSSAP);
          Z_DTC_OL_PTR->ZM_DTC_STD_INVALID_UPDATED.ZB_T110_DTC_BSSAP
          := FALSE;
        FI;
        /*3BKA36FBR242748*/
        /*ADDED FOR GSL COUNTERS MEMO*/
        DO WITH Z_R_BSS_PAR2_PTR -> ZM_R_BSS_PAR2; 
           /*3BKA36FBR242748*/
         /*IF D_EN_AOIP = TRUE THEN*/
         IF D_EN_AOIP = TRUE AND ZQ_BSSAP THEN
           /*3BKA36FBR242748*/
           IF (Z_DTC_OL_PTR->ZM_DTC_STD_INVALID_UPDATED
            .ZB_T110_M3UA_DTC)
           THEN
	          Q_S0448_UPD_T110_M3UA_DTC_INVALID();
	          Z_DTC_OL_PTR->ZM_DTC_STD_INVALID_UPDATED.ZB_T110_M3UA_DTC 
	          := FALSE;
	         FI;
	 FI;
        OD;
        /*ADDED FOR GSL COUNTERS MEMO*/
      ELSE 
        /*3BKA36FBR242748*/                                                                       
        /*Q_S0456_UPD_T110_DTC_BSS(ZF_LDC_BUF_PTR);*/
        Q_S0456_UPD_T110_DTC_BSS(ZF_LDC_BUF_PTR,ZQ_BSSAP);
        /*3BKA36FBR242748*/
        /*ADDED FOR GSL COUNTERS MEMO*/
        DO WITH Z_R_BSS_PAR2_PTR -> ZM_R_BSS_PAR2; 
         /*3BKA36FBR242748*/
         /*IF D_EN_AOIP = TRUE THEN*/
         IF D_EN_AOIP = TRUE AND ZQ_BSSAP THEN
         /*3BKA36FBR242748*/
	   Q_S0449_UPD_T110_M3UA_DTC(ZF_LDC_BUF_PTR);
         FI;
        OD;
        /*ADDED FOR GSL COUNTERS MEMO*/
      FI;                                                                         
    FI;  
    IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_A_AND_ABIS_ITF_ANALYSIS,                  
                                   ZQ_ACT_IDX)                                    
      THEN                                                                        
      IF ZF_VALIDITY = E_DATA_INVALID                                           
        THEN                                                                      
        Q_S0440_UPD_T18_INVALID(ZF_LDC_LCE_ID, ZQ_BSSAP);                                              
      ELSE                                                                      
        Q_S0455_UPD_T18_STD_DTC(ZF_LDC_BUF_PTR, 
                                ZF_LDC_LCE_ID,
                                ZQ_BSSAP);                                
      FI;                                                                       
    FI;                                                                         
                                                                                
    IF ZQ_BSSAP                                                                   
      THEN                                                                          
      IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_SCCP,                                     
                                   ZQ_ACT_IDX)                                    
        THEN                                                                        
        ZQ_DTC_IND := TRUE;                                                       
        IF ZF_VALIDITY = E_DATA_INVALID                                           
          THEN
          IF (Z_DTC_OL_PTR->ZM_DTC_STD_INVALID_UPDATED.ZB_T25_DTC)
          THEN
          Q_S0445_UPD_T25_DTC_INVALID();
          Z_DTC_OL_PTR->ZM_DTC_STD_INVALID_UPDATED.ZB_T25_DTC := FALSE;
          FI;
        ELSE                                                                      
          Q_S0480_UPD_T25_DTC(ZF_LDC_BUF_PTR, ZF_LDC_LCE_ID,                      
                              ZQ_DTC_IND);                                        
        FI;                                                                       
      FI;                                                                         
      
      /* DEL FOR B8: TYPE 26 IS MOVED TO TCU
      IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_HANDOVER_PER_SERVINGCELL,                 
                                   ZQ_ACT_IDX)                                    
        THEN                                                                        
        IF ZF_VALIDITY = E_DATA_INVALID                                           
          THEN                                                                      
          Q_S0443_UPD_T26_INVALID(ZF_VALIDITY, ZQ_ACT_IDX);                       
        ELSE                                                                      
          Q_S0485_UPD_T26_STD_DTC(ZF_LDC_BUF_PTR, ZQ_ACT_IDX);                    
        FI;                                                                       
      FI;                                                                         
      */
      
      /* ADD IN B9 PKG2 CHENZY BEGIN */
      IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_VGCS,                 
                                   ZQ_ACT_IDX)                                      
        THEN                                                                          
        IF ZF_VALIDITY = E_DATA_INVALID                                             
          THEN                                                                        
          Q_S0636_UPD_T34_DTC_BSS_INVALID();                              
        ELSE                                                                        
          Q_S0635_UPD_T34_DTC_BSS(ZF_LDC_BUF_PTR);                                 
        FI;                                                                         
      FI;  
      /* ADD IN B9 PKG2 CHENZY END */
      
    FI; /* BSSAP */                                                               
  /* START : WIPRO B11 IP MR0 PKG1 */
  /*START: FR36/294844*/ 
  /*ELSIF ZF_LDC_SEQ_NBR = 3*/                                                           
  ELSIF (ZF_LDC_SEQ_NBR = 3) OR (ZF_LDC_SEQ_NBR = 4)                                                          
  /*END: FR36/294844*/ 
  /* START : WIPRO B11 IP MR0 PKG1 */
    THEN                 
    IF ZQ_BSSAP                                                                   
      THEN  
      IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_HANDOVER_PER_TARGETCELL,                  
                                   ZQ_ACT_IDX)                                    
        THEN                                                                        
        IF ZF_VALIDITY = E_DATA_INVALID                                           
          THEN 
          Q_S0444_UPD_T27_INVALID(ZF_VALIDITY, ZQ_ACT_IDX);
        ELSE 
  /*START: FR36/294844*/ 
  /*    Q_S0490_UPD_T27_STD_DTC(ZF_LDC_BUF_PTR, ZQ_ACT_IDX);*/ 
        Q_S0490_UPD_T27_STD_DTC(ZF_LDC_BUF_PTR, 
                                ZQ_ACT_IDX, 
                                ZF_LDC_SEQ_NBR);
  /*END: FR36/294844*/ 
        FI;
      FI;   
    FI;                                                                      
  /* START : WIPRO B11 IP MR0 PKG1 */
  /* SRINIVAS : GSL MR COUNTERS */
  ELSIF ZF_LDC_SEQ_NBR = 2
    THEN
    ZQ_GSL_DTC := Q_S0130_DTC_CE_FUNC(ZF_LDC_LCE_ID,
                                E_CE_FUNCT_GSL_DTC);
    /*CR2517*/
    /*ZQ_GSL_DTC := FALSE;*/
    /*CR2517*/
    IF ZQ_GSL_DTC
      THEN
      IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_CELL_TRX_OVERVIEW_COUNTERS,
                                   ZQ_ACT_IDX)
        THEN
        IF ZF_VALIDITY = E_DATA_INVALID
          THEN
          Q_S0577_UPD_GSL_INVALID(ZF_LDC_LCE_ID);
        ELSE
          Q_S0566_UPD_T110_9_GSL_STD_DTC(ZF_LDC_BUF_PTR);
        FI;
      FI;
      /*CR36/236932*/
      DO WITH Z_R_BSC_INFO_PTR -> M_R_BSC_INFO;
          IF D_BSS_MODE = M_BSS_TRANSPORT_MODE_IP
          THEN
            ZQ_BSS_MODE := TRUE;
          FI;
      OD;
      IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_LAPD,
                                   ZQ_ACT_IDX)
        AND NOT ZQ_BSS_MODE
        THEN
        IF ZF_VALIDITY = E_DATA_INVALID
          THEN
          Q_S0578_UPD_TYPE7_GSL_INVALID(ZF_LDC_LCE_ID);
        ELSE
          Q_S0567_UPD_T7_2_GSL_STD_DTC(ZF_LDC_BUF_PTR);
        FI;
      FI;
      /*CR36/236932*/
    FI;/*ZQ_GSL_DTC*/
  /* END : WIPRO B11 IP MR0 PKG1 */
  /* BEGIN CR:745699 */
  ELSIF ZF_LDC_SEQ_NBR = 5 
    THEN
      IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_CELL_TRX_OVERVIEW_COUNTERS,                 
                                 ZQ_ACT_IDX)                                      
      THEN                                                                          
        IF ZF_VALIDITY = E_DATA_INVALID                                             
        THEN
          Q_S0692_UPD_T110_15_OLC_DTC_INVALID(ZF_LDC_BUF_PTR);
        ELSE
          Q_S0693_UPD_T110_15_OLC_STD_DTC(ZF_LDC_BUF_PTR);
        FI;
      FI;
 /* END CR:745699 */
 /*START CR MOCN */
 ELSIF ZF_LDC_SEQ_NBR =  6
 THEN
   IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_CELL_TRX_OVERVIEW_COUNTERS,                 
                                 ZQ_ACT_IDX)                                      
      THEN                                                                          
        IF ZF_VALIDITY = E_DATA_INVALID                                             
        THEN
          Q_S0695_UPD_T110_17_MOCN_DTC_INVALID(ZF_LDC_BUF_PTR);
        ELSE
          Q_S0694_UPD_T110_17_MOCN_STD_DTC(ZF_LDC_BUF_PTR);
        FI;
      FI;
/*END CR MOCN */

   /*begin CR1098364 MC1408/MC1409 improv*/
  ELSIF ZF_LDC_SEQ_NBR = 7
  THEN
    IF ZQ_BSSAP
    THEN
      IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_VAMOS, ZQ_ACT_IDX)                                      
	    THEN                                                                          
	     IF ZF_VALIDITY /= E_DATA_INVALID                                             
	     THEN
		      Q_S0251_UPD_VMC001X_CNTRS(ZF_LDC_BUF_PTR,            
					                         M_FS_DTC_TRF_LDC,           
					                          ZF_LDC_SEQ_NBR );
	     FI;                                                                         
      FI;    
    FI;
  
  ELSIF ZF_LDC_SEQ_NBR = 8
  THEN
    IF ZQ_BSSAP
    THEN
      IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_VAMOS, ZQ_ACT_IDX)                                      
	    THEN                                                                          
	     IF ZF_VALIDITY /= E_DATA_INVALID                                             
	     THEN
		      Q_S0251_UPD_VMC001X_CNTRS(ZF_LDC_BUF_PTR,            
					                         M_FS_DTC_TRF_LDC,           
					                          ZF_LDC_SEQ_NBR );
	     FI;                                                                         
      FI;    
    FI;
  /*end CR1098364 MC1408/MC1409 improv*/
  ELSE                                                                            
    /* SUBSEQUENT CELL BUFFERS MUST BE FROM BSSAP DTCS */                         
    IF ZQ_BSSAP                                                                   
      THEN                                                                          
      IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_TRAFFIC, ZQ_ACT_IDX)                      
        THEN                                                                        
        IF ZF_VALIDITY = E_DATA_INVALID                                           
          THEN
          IF (Z_DTC_OL_PTR->ZM_DTC_STD_INVALID_UPDATED.ZB_0300_T1_DTC)
          THEN
          Q_S0300_UPD_DTC_INVALID(ZQ_ACT_IDX, FALSE, E_MT_TRAFFIC);
          Z_DTC_OL_PTR->ZM_DTC_STD_INVALID_UPDATED.ZB_0300_T1_DTC 
          := FALSE;
          FI;
        ELSE                                                                      
          Q_S0507_UPD_T1_STD_DTC(ZF_LDC_BUF_PTR, ZQ_ACT_IDX);                     
        FI;                                                                       
      FI;                                                                         
                                                                                
      IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_SMS, ZQ_ACT_IDX)                          
        THEN                                                                        
        ZQ_ALL_CELLS := FALSE;                                                    
        Q_S0170_GET_CELL_SCOPE(ZQ_ACT_IDX, ZQ_CELL_LIST);                         
        IF ZQ_CELL_LIST(1) = M_NULL_CELL_IDX                                      
          THEN                                                                      
          ZQ_ALL_CELLS := TRUE;                                                   
        FI;                                                                       
        IF ZF_VALIDITY = E_DATA_INVALID                                           
          THEN
          IF (Z_DTC_OL_PTR->ZM_DTC_STD_INVALID_UPDATED.ZB_0300_T19_DTC)
          THEN
          Q_S0300_UPD_DTC_INVALID(ZQ_ACT_IDX, ZQ_ALL_CELLS, E_MT_SMS);
          Z_DTC_OL_PTR->ZM_DTC_STD_INVALID_UPDATED.ZB_0300_T19_DTC 
          := FALSE;
          FI;
        ELSE                                                                      
          Q_S0460_UPD_T19_STD_DTC(ZF_LDC_BUF_PTR,                                 
                                  ZQ_ACT_IDX,                                     
                                  ZQ_ALL_CELLS);                                  
        FI;                                                                       
      FI;                                                                         
      
      IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_CELL_TRX_OVERVIEW_COUNTERS,               
                                   ZQ_ACT_IDX)                                    
        THEN                                                                        
        IF ZF_VALIDITY = E_DATA_INVALID                                           
          THEN
          IF (Z_DTC_OL_PTR->ZM_DTC_STD_INVALID_UPDATED.ZB_T110_DTC_DEP)
          THEN
         /*3BKA36FBR242748*/
        /*Q_S0447_UPD_T110_DTC_INVALID(ZS_CELL_DEP);*/
          Q_S0447_UPD_T110_DTC_INVALID(ZS_CELL_DEP,ZQ_BSSAP);
        /*3BKA36FBR242748*/                                                                   
         Z_DTC_OL_PTR->ZM_DTC_STD_INVALID_UPDATED.ZB_T110_DTC_DEP 
         := FALSE;
         FI;                 
        ELSE                                                                      
          Q_S0550_UPDATE_CCI_TYPE110_1(ZF_LDC_BUF_PTR,                            
                                       M_FS_DTC_TRF_LDC,                          
                                       ZF_LDC_SEQ_NBR,                            
                                       ZQ_IRRELEVANT);                            
                                                                                
          Q_S0580_UPDATE_CCI_TYPE110_2(ZF_LDC_BUF_PTR);                           
          Q_S0600_UPDATE_CCI_TYPE110_3(ZF_LDC_BUF_PTR);
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
          Q_S0387_UPDATE_CCI_DTC_TYPE110_7(ZF_LDC_BUF_PTR);
/* END  : ADD-WIPRO-B10-MR1-CHANGE */

/*BEGIN : CR36/302024 - RFI4448*/
           Q_S0902_UPDATE_CCI_DTC_TYPE110_11(ZF_LDC_BUF_PTR);
/*END : CR36/302024 -RFI4448*/
/*begin CR1238146 A-GPS*/
           Q_S0905_UPDATE_CCI_DTC_TYPE110_18(ZF_LDC_BUF_PTR);
/*end CR1238146 A-GPS*/
        FI;                                                                       
      FI; 
/*START : IURG CELL LEVEL COUNTERS*/
 CASE ZF_LDC_LCE_ID OF
    (CM_FY32_M3UALM_LCEID_MAIN): 

     IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_IURG,
                                   ZQ_ACT_IDX)
        THEN 
        IF ZF_VALIDITY = E_DATA_INVALID
          THEN   
          Q_S0589_UPD_IURG_T110_7_INVALID ();  	                               
        ELSE 
	   Q_S0387_UPDATE_CCI_DTC_TYPE110_7(ZF_LDC_BUF_PTR);
        FI;
        /*START CR1405087 DTC OVERLOAD*/
      /*FI; 
  ELSE
    Q_S0010_CCDC_ERROR(M_ERC6_USER_REC, M_ERT0019_INC_MESS_DATA,
                      13, 194);
                      */
     ELSE
       Q_S0010_CCDC_ERROR(M_ERC6_USER_REC, M_ERT0019_INC_MESS_DATA,
                      13, 194);
     FI;
  ELSE
  
     /*END CR1405087 DTC OVERLOAD*/
 ESAC;
/*END : IURG CELL LEVEL COUNTERS*/
      /* BEGIN : B12 VAMOS */
	IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_VAMOS,                 
                               ZQ_ACT_IDX)                                      
	  THEN                                                                          
	     IF ZF_VALIDITY = E_DATA_INVALID                                             
	   THEN
		DO WITH Z_R_CELL_IN_PTR -> ZM_R_CELL_IN;
		 /*IF D_EN_VAMOS = FALSE 
		  THEN*/
		  Q_S0448_UPD_T37_DTC_INVALID(ZS_CELL_DEP);
		OD; 
	     ELSE  
		DO WITH Z_R_CELL_IN_PTR -> ZM_R_CELL_IN;  
	          Q_S0650_UPDATE_CCI_TYPE37_0(ZF_LDC_BUF_PTR,            
					      M_FS_DTC_TRF_LDC,           
					      ZF_LDC_SEQ_NBR,            
					      ZQ_IRRELEVANT);
		/* FI;*/
		OD;
	    FI;                                                                         
       FI;

/* END : B12 VAMOS */ 

      IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_HANDOVER, ZQ_ACT_IDX)                     
        THEN                                                                        
        IF ZF_VALIDITY = E_DATA_INVALID                                           
          THEN
          IF (Z_DTC_OL_PTR->ZM_DTC_STD_INVALID_UPDATED.ZB_T6_DTC)
          THEN
          Q_S0436_UPD_T6_DTC_INVALID(ZQ_ACT_IDX, ZS_FIXED);
          Z_DTC_OL_PTR->ZM_DTC_STD_INVALID_UPDATED.ZB_T6_DTC := FALSE;
          FI;
        ELSE                                                                      
          Q_S0452_UPD_T6_STD_DTC(ZF_LDC_BUF_PTR, ZQ_ACT_IDX);                     
        FI;                                                                       
      FI;                                                                         
                                                                                
      IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_HANDOVER_SDCCH, ZQ_ACT_IDX)               
        THEN                                                                        
        ZQ_ALL_CELLS := FALSE;                                                    
        Q_S0170_GET_CELL_SCOPE(ZQ_ACT_IDX, ZQ_CELL_LIST);                         
        IF ZQ_CELL_LIST(1) = M_NULL_CELL_IDX                                      
          THEN                                                                      
          ZQ_ALL_CELLS := TRUE;                                                   
        FI;                                                                       
        IF ZF_VALIDITY = E_DATA_INVALID                                           
          THEN
          IF (Z_DTC_OL_PTR->ZM_DTC_STD_INVALID_UPDATED.ZB_0300_T28_DTC)
          THEN
          Q_S0300_UPD_DTC_INVALID(ZQ_ACT_IDX, ZQ_ALL_CELLS,                       
                                  E_MT_HANDOVER_SDCCH);
          Z_DTC_OL_PTR->ZM_DTC_STD_INVALID_UPDATED.ZB_0300_T28_DTC 
          := FALSE;
          FI;
        ELSE                                                                      
          Q_S0585_UPD_T28_STD_DTC(ZF_LDC_BUF_PTR,                                 
                                  ZQ_ACT_IDX,                                     
                                  ZQ_ALL_CELLS);                                  
        FI;                                                                       
      FI;                                                                         
                                                                                
      IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_DIRECTED_RETRY, ZQ_ACT_IDX)               
        THEN                                                                        
        ZQ_ALL_CELLS := FALSE;                                                    
        Q_S0170_GET_CELL_SCOPE(ZQ_ACT_IDX, ZQ_CELL_LIST);                         
        IF ZQ_CELL_LIST(1) = M_NULL_CELL_IDX                                      
          THEN                                                                      
          ZQ_ALL_CELLS := TRUE;                                                   
        FI;                                                                       
        IF ZF_VALIDITY = E_DATA_INVALID                                           
          THEN
          IF (Z_DTC_OL_PTR->ZM_DTC_STD_INVALID_UPDATED.ZB_0300_T29_DTC)
          THEN
          Q_S0300_UPD_DTC_INVALID(ZQ_ACT_IDX, ZQ_ALL_CELLS,                       
                                  E_MT_DIRECTED_RETRY);
          Z_DTC_OL_PTR->ZM_DTC_STD_INVALID_UPDATED.ZB_0300_T29_DTC 
          := FALSE;
          FI;
        ELSE                                                                      
          Q_S0586_UPD_T29_STD_DTC(ZF_LDC_BUF_PTR, ZQ_ACT_IDX,                     
                                  ZQ_ALL_CELLS);                                  
        FI;                                                                       
      FI;                                                                         

      /* ADD IN B9 PKG2 CHENZY BEGIN */                                                                          
      IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_VGCS,               
                                   ZQ_ACT_IDX)                                    
        THEN                                                                        
        ZQ_ALL_CELLS := FALSE;                                                    
        Q_S0170_GET_CELL_SCOPE(ZQ_ACT_IDX, ZQ_CELL_LIST);                         
        IF ZQ_CELL_LIST(1) = M_NULL_CELL_IDX                                      
          THEN                                                                      
          ZQ_ALL_CELLS := TRUE;                                                   
        FI;                                                                       
        IF ZF_VALIDITY = E_DATA_INVALID                                           
          THEN
          IF (Z_DTC_OL_PTR->ZM_DTC_STD_INVALID_UPDATED.ZB_0300_T34_DTC)
          THEN
          Q_S0300_UPD_DTC_INVALID(ZQ_ACT_IDX, ZQ_ALL_CELLS,                       
                                  E_MT_VGCS);
          Z_DTC_OL_PTR->ZM_DTC_STD_INVALID_UPDATED.ZB_0300_T34_DTC 
          := FALSE;
          FI;
        ELSE                                                                      
          Q_S0637_UPD_T34_STD_DTC(ZF_LDC_BUF_PTR, ZQ_ACT_IDX,                     
                                  ZQ_ALL_CELLS);                                  
        FI;                                                                       
      FI;                                                                         
      /* ADD IN B9 PKG2 CHENZY END */

    FI;                                                                           
  FI;/*BSSAP*/
ELSE
  /* TYPE 1 TRX DATA */
  IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_TRAFFIC, ZQ_ACT_IDX)                      
    THEN                                                                        
    IF ZF_VALIDITY = E_DATA_INVALID                                           
       THEN
       IF (Z_DTC_OL_PTR->ZM_DTC_STD_INVALID_UPDATED.ZB_DTC_TRX)
       THEN
       Q_S0411_UPD_DTC_TRX_INVALID(ZQ_ACT_IDX,
                                   E_MT_TRAFFIC);
       Z_DTC_OL_PTR->ZM_DTC_STD_INVALID_UPDATED.ZB_DTC_TRX := FALSE;
       FI;
    ELSE                                                                      
       Q_S0511_UPD_DTC_TRX_STD(ZQ_ACT_IDX,
                               E_MT_TRAFFIC,
                               ZF_LDC_BUF_PTR);                     
    FI;                                                                       
  FI;
  
  /* TYPE 110_4 TRX DATA */
  IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_CELL_TRX_OVERVIEW_COUNTERS,
                               ZQ_ACT_IDX)                      
    THEN                                                                        
    IF ZF_VALIDITY = E_DATA_INVALID                                           
       THEN
       IF (Z_DTC_OL_PTR->ZM_DTC_STD_INVALID_UPDATED.ZB_DTC_TRX)
       THEN
       Q_S0411_UPD_DTC_TRX_INVALID(ZQ_ACT_IDX, 
                                   E_MT_CELL_TRX_OVERVIEW_COUNTERS);
       Z_DTC_OL_PTR->ZM_DTC_STD_INVALID_UPDATED.ZB_DTC_TRX := FALSE;
       FI;
    ELSE                                                                      
       Q_S0511_UPD_DTC_TRX_STD(ZQ_ACT_IDX,
                               E_MT_CELL_TRX_OVERVIEW_COUNTERS,
                               ZF_LDC_BUF_PTR);                     
    FI;                                                                       
  FI;
  
FI; /* SEQ NUMBER */ 
/*FI;.*ZF_STD_TRX*/
END Q_S0250_UPD_DTC_STD_CNTRS;                                                  
  /* END CR36/302024 RFI4448 */
                                                                               
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0260_UPD_TCH_STD_CNTRS                           */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/11                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*                 THIS PROCEDURE IS ENTERED WHEN A DATA TRANSFER     */        
/*                 MESSAGE ARRIVES FROM AN LDC, CONTAINING THE        */        
/*                 LATEST STANDARD COUNTER VALUES FOR TCHRM LDC.      */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_LCE_ID M_LCE_ID,                       */        
/*                      ZF_LDC_SEQ_NBR M_BYTE,                        */        
/*                      ZF_VALIDITY M_PM_DATA_VALIDITY,               */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*                      ZF_ACT_CE BOOL                                */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0130_DTC_CE_FUNC                           */        
/*                      Q_S0090_MEAS_TYPE_RUNNING                     */        
/*                      Q_S0550_UPDATE_CCI_TYPE110_1                  */        
/*                      Q_S0581_UPD_CCI_TCH_TYPE110_2                 */        
/*                      Q_S0514_UPD_T2_STD_TCHRM_DLS                  */        
/*                      Q_S0509_UPD_T1_STD_TCHRM                      */        
/*                      Q_S0516_UPD_T2_STD_TCHRM                      */        
/*                      Q_S0170_GET_CELL_SCOPE                        */        
/*                      Q_S0587_UPD_T29_STD_TCHRM                     */        
/*                      Q_S0230_SET_INVALID                           */        
/*                      Q_S0290_UPD_TCH_INVALID                       */        
/*     CALLED FROM:                                                   */        
/*                      P_GDXBYX_UPD_CCI_STD_CTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0260_UPD_TCH_STD_CNTRS: PROC(ZF_LDC_LCE_ID    M_LCE_ID,                      
                                ZF_LDC_SEQ_NBR   M_BYTE,                        
                                ZF_VALIDITY      M_PM_DATA_VALIDITY,            
                                ZF_LDC_BUF_PTR   PTR,                           
                                ZF_ACT_CE        BOOL);                         
                                                                                
DCL ZQ_ACT_IDX       INT;                                                       
DCL ZQ_IS_TEL_DTC    BOOL;                                                      
DCL ZQ_ALL_CELLS     BOOL;                                                      
DCL ZQ_SET_INVALID   BOOL;                                                      
DCL ZQ_CELL_LIST     M_PM_DET_CELL_LIST;
/*START CR20/312407 SS*/ 
DCL ZQ_IS_B_TRX      BOOL;
/* AM START CR:745699 */
DCL ZQ_IS_B_OLC     BOOL;
ZQ_IS_B_OLC := FALSE;
/* AM END CR:745699 */
/*START CR20/312407 SS*/                                                                                
/* START DCTP00645103 */
ZQ_IS_B_TRX := FALSE ;
/* END DCTP00645103 */
/* THE FOLLOWING MEASUREMENT TYPES ARE EXPECTED : */                              
/*  1, 2, 6, 110(TAKEN FROM OTHER TYPES)          */                                         
                                                                                
ZQ_IS_TEL_DTC := Q_S0130_DTC_CE_FUNC(ZF_LDC_LCE_ID,E_CE_FUNCT_TEL_DTC);   

IF ZF_ACT_CE OR ZF_VALIDITY = E_DATA_VALID_INCOMPLETE                           
THEN
  IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_CELL_TRX_OVERVIEW_COUNTERS,                 
                               ZQ_ACT_IDX)                                      
  THEN                                                                          
    IF ZF_VALIDITY /= E_DATA_INVALID                                            
    THEN                                                                        
     /* BEGIN: ADD-WIPRO-B10-MR2-CHANGE */
      IF ZF_LDC_SEQ_NBR = 5
      THEN
        Q_S0605_UPD_T110_TCHRM_BSS(ZF_LDC_BUF_PTR,ZF_LDC_SEQ_NBR);
      ELSIF (ZF_LDC_SEQ_NBR /= 3 AND ZF_LDC_SEQ_NBR /= 4)
      THEN
     /* END: ADD-WIPRO-B10-MR2-CHANGE */

          /*START CR20/312407 SS*/
          /* AM 645103 */
        IF(ZF_LDC_SEQ_NBR /= 1 AND ZF_LDC_SEQ_NBR /= 2 ) 
        THEN
          ZQ_IS_B_TRX := ZF_LDC_BUF_PTR->
	     CM_FY32_PM_TCH_UB_TRX.B_IS_TRX;
            /*AM  START CR:745699*/
          ZQ_IS_B_OLC := ZF_LDC_BUF_PTR->
             CM_FY32_PM_TCH_UB_OLC_CELL.B_IS_OLC; 
            /*AM END CR:745699*/
        FI;
          /* AM 645103 */
 
        IF(ZQ_IS_B_TRX/=TRUE) AND (ZQ_IS_B_OLC/=TRUE)
        THEN
          Q_S0550_UPDATE_CCI_TYPE110_1(ZF_LDC_BUF_PTR,                              
                                       M_FS_TCHRM_LDC,                              
                                       ZF_LDC_SEQ_NBR,                              
                                       ZQ_IS_TEL_DTC);
          Q_S0581_UPD_CCI_TCH_TYPE110_2(ZF_LDC_BUF_PTR,
                                        ZF_LDC_SEQ_NBR);
          Q_S0601_UPD_CCI_TCH_TYPE110_3(ZF_LDC_BUF_PTR,
 	                                ZF_LDC_SEQ_NBR);
          /*AM START : CR745699*/
         /* ELSE
	   Q_S0601_UPD_CCI_TCH_TYPE110_4(ZF_LDC_BUF_PTR,
                                        ZF_LDC_SEQ_NBR);*/
    /* CR 889255 */

        Q_S0801_UPD_CCI_TCH_TYPE110_13(ZF_LDC_BUF_PTR,
					ZF_LDC_SEQ_NBR);

    /*END CR 889255*/        


        ELSIF((ZQ_IS_B_OLC /= FALSE) AND (ZQ_IS_B_TRX /= TRUE))
        THEN
          Q_S0701_UPD_CCI_TCH_TYPE110_5(ZF_LDC_BUF_PTR,
                                        ZF_LDC_SEQ_NBR);
 
        ELSIF((ZQ_IS_B_TRX /= FALSE) AND (ZQ_IS_B_OLC /= TRUE))
	THEN
          Q_S0601_UPD_CCI_TCH_TYPE110_4(ZF_LDC_BUF_PTR,
                                        ZF_LDC_SEQ_NBR);

	ELSE  
		/* Code flow should not reach here */

        FI;
          /*AM END :CR745699*/
	  /*END CR20/312407 SS*/ 
	 
      FI;
    FI;                                                                         
  FI;                                                                           
    
  /* BEGIN : B12 VAMOS */
  /*IF (ZF_LDC_SEQ_NBR /= 1 OR ZF_LDC_SEQ_NBR /= 2)*/
  /*START: FR 314871 KIRAN*/
  /*IF ZF_LDC_SEQ_NBR = 6*/
  IF ZF_LDC_SEQ_NBR >= 6
/*END: FR 314871 KIRAN*/
  THEN
      /*AM START : CR745699*/
      /* IF(ZQ_IS_B_TRX/=TRUE)*//*ADDED for CR20/312407 SS*/ 
      IF(ZQ_IS_B_TRX/=TRUE) AND (ZQ_IS_B_OLC/=TRUE)
      /*AM END : CR745699*/ 
      THEN                             
	IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_VAMOS,                 
						ZQ_ACT_IDX)                                      
	THEN                                                                          
	  IF ZF_VALIDITY = E_DATA_INVALID                                             
	  THEN 
	    DO WITH Z_R_CELL_IN_PTR -> ZM_R_CELL_IN;
			/*IF D_EN_VAMOS = FALSE 
			THEN*/
	      Q_S0448_UPD_T37_TCH_INVALID(ZS_CELL_DEP);
	    OD;
	  ELSE 
	    DO WITH Z_R_CELL_IN_PTR -> ZM_R_CELL_IN; 
	      Q_S0650_UPDATE_CCI_TYPE37_0(ZF_LDC_BUF_PTR,            
						M_FS_TCHRM_LDC, 
						ZF_LDC_SEQ_NBR,        
						ZQ_IS_TEL_DTC); 
		/*FI;*/
	    OD;
	  FI;                                                                         
	FI;
      FI;/*ZQ_IS_B_TRX/=TRUE*/
  FI;
/* END : B12 VAMOS */ 
	
  IF ZF_LDC_SEQ_NBR = 1 OR ZF_LDC_SEQ_NBR = 2
  THEN                                                                          
    /* THIS USER BUFFER IS ONLY RELEVANT ON THE SYSTEM CPR. */                  
    IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_RESOURCE_AVAILABILITY,                    
                                 ZQ_ACT_IDX)                                    
    THEN                                                                        
      IF NOT ZQ_IS_TEL_DTC                                                      
      THEN                                                                      
        IF ZF_VALIDITY /= E_DATA_INVALID                                        
        THEN                                                                    
          Q_S0514_UPD_T2_STD_TCHRM_DLS(ZF_LDC_BUF_PTR,
                                       ZQ_ACT_IDX);                             
        FI;                                                                     
      FI;                                                                       
    FI;                                                                         
                                                                                
  ELSIF (ZF_LDC_SEQ_NBR /= 3 AND ZF_LDC_SEQ_NBR 
           /= 4 AND ZF_LDC_SEQ_NBR /= 5)
  THEN
/*AM START : CR745699*/
   /*IF(ZQ_IS_B_TRX/=TRUE)*//*ADDED for CR20/312407 SS*/
    IF(ZQ_IS_B_TRX/=TRUE) AND (ZQ_IS_B_OLC/=TRUE)
/*AM END : CR745699*/
    THEN
      IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_TRAFFIC, ZQ_ACT_IDX)                      
      THEN                                                                        
        IF ZF_VALIDITY /= E_DATA_INVALID                                          
        THEN                                                                      
          Q_S0509_UPD_T1_STD_TCHRM(ZF_LDC_BUF_PTR, 
                                 ZQ_ACT_IDX);                   
        FI;                                                                       
      FI;                                                                         
                                                                                
      IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_RESOURCE_AVAILABILITY,                    
                                 ZQ_ACT_IDX)                                    
      THEN                                                                        
        IF ZF_VALIDITY /= E_DATA_INVALID                                          
        THEN 
         Q_S0516_UPD_T2_STD_TCHRM(ZF_LDC_BUF_PTR, 
                                 ZQ_ACT_IDX); 
        FI;                                                                       
      FI;   
                                                                          
      IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_HANDOVER, ZQ_ACT_IDX)                      
      THEN                                                                        
        IF ZF_VALIDITY /= E_DATA_INVALID                                          
        THEN                                                                      
          Q_S0508_UPD_T6_STD_TCHRM(ZF_LDC_BUF_PTR, 
                                 ZQ_ACT_IDX);                   
        FI;                                                                       
      FI;                                                                         
                                                                                
      IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_DIRECTED_RETRY,                           
                                 ZQ_ACT_IDX)                                    
      THEN                                                                        
        ZQ_ALL_CELLS := FALSE;                                                    
        Q_S0170_GET_CELL_SCOPE(ZQ_ACT_IDX, ZQ_CELL_LIST);                         
        IF ZQ_CELL_LIST(1) = M_NULL_CELL_IDX                                      
        THEN                                                                      
          ZQ_ALL_CELLS := TRUE;                                                   
        FI;                                                                       
        IF ZF_VALIDITY /= E_DATA_INVALID                                          
        THEN                                                                      
          Q_S0587_UPD_T29_STD_TCHRM(ZF_LDC_BUF_PTR, ZQ_ACT_IDX,                   
                                  ZQ_ALL_CELLS);                                
        FI;                                                                       
      FI;                                                                         

    /* ADD B9 PKG2 CHENZY BEGIN */
      IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_VGCS,                           
                                 ZQ_ACT_IDX)                                    
      THEN                                                                        
        ZQ_ALL_CELLS := FALSE;                                                    
        Q_S0170_GET_CELL_SCOPE(ZQ_ACT_IDX, ZQ_CELL_LIST);                         
        IF ZQ_CELL_LIST(1) = M_NULL_CELL_IDX                                      
        THEN                                                                      
          ZQ_ALL_CELLS := TRUE;                                                   
        FI;                                                                       
        IF ZF_VALIDITY /= E_DATA_INVALID                                          
        THEN                                                                      
          Q_S0638_UPD_T34_STD_TCHRM(ZF_LDC_BUF_PTR, ZQ_ACT_IDX,                   
                                  ZQ_ALL_CELLS);                                
        FI;                                                                       
      FI;
    /*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE */
    IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_IP,
                                 ZQ_ACT_IDX)                                    
    THEN                                                  
       IF ZF_VALIDITY /= E_DATA_INVALID
       THEN                                                                
         Q_S6638_UPD_T35_STD_TCHRM(ZF_LDC_BUF_PTR,ZF_LDC_SEQ_NBR
                                   ,ZQ_IS_TEL_DTC);
       FI;                                         
    FI; 
  FI;/*ZQ_IS_B_TRX/=TRUE*/ 
                               
  ELSIF (ZF_LDC_SEQ_NBR = 3 OR ZF_LDC_SEQ_NBR = 4)
  THEN
    	IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_IP,
                                 ZQ_ACT_IDX)                                    
    	THEN 
    	 IF ZF_VALIDITY /= E_DATA_INVALID                                          
         THEN                                                                      
          Q_S6638_UPD_T35_STD_TCHRM(ZF_LDC_BUF_PTR,ZF_LDC_SEQ_NBR
                                   ,ZQ_IS_TEL_DTC);             
         FI;                                                                                                                                              
       FI;                                                                       
 /*END: ADD-WIPRO-B10-MX-MR2-CHANGE */
  FI;                                                                           
FI;                                                                             
  IF ZF_LDC_SEQ_NBR = 1
  THEN
    ZQ_SET_INVALID := Q_S0230_SET_INVALID(ZF_LDC_LCE_ID,                          
                                      M_FS_TCHRM_LDC,                         
                                      ZF_VALIDITY);                           
    IF ZQ_SET_INVALID OR                                                          
        (ZF_VALIDITY = E_DATA_INVALID AND ZF_ACT_CE)                                
    THEN                                                                          
      Q_S0290_UPD_TCH_INVALID(ZF_LDC_LCE_ID, ZQ_IS_TEL_DTC);                      
      /* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
      Q_S0604_UPD_T110_6_INVALID(ZQ_IS_TEL_DTC);
      /* END: ADD-WIPRO-B10-MR1-CHANGE */
    FI;                                                                           
  FI;   
                                                                                
                                                                                
END Q_S0260_UPD_TCH_STD_CNTRS;                                                  

/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0605_UPD_T110_TCHRM_BSS                          */
/*                                                                    */
/*     PROGRAMMER: L.DIERICK  (KDC)                                   */
/*                                                                    */
/*                LAST MODIFIED BY:MALA                DATE:          */
/*                                                                    */
/*     CREATION DATE:                                                 */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*      UPDATE THE TYPE 110 BLOCK 6 BSS COUNTERS COMING FROM          */
/*        THE TCHRM                                                   */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LDC_BUF_PTR PTR                            */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                                                                    */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0010_CCDC_ERROR                            */
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */
/*     CALLED FROM:                                                   */
/*                      Q_S0260_UPD_TCH_STD_CNTRS                     */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0605_UPD_T110_TCHRM_BSS: PROC(ZF_LDC_BUF_PTR PTR,
                                    ZF_LDC_SEQ_NBR INT);
DO WITH ZF_LDC_BUF_PTR -> ZM_TCH_BSS_MSG_CTRS ;                 
  DO WITH Z_T110_6_PTR->;                                        
    DO WITH B_CTRS_PT6_MT_110;                                    
                                                                 
      Q_S0080_ADD_INT_TO_DPVAL(
                ZB_BSS_CTRS(E_MC926_TCH_BLOCK_OCC_BSC),
                B_MC926);
    OD;
  OD;
OD;
END Q_S0605_UPD_T110_TCHRM_BSS;
/* END: ADD-WIPRO-B10-MR1-CHANGE */ 
/**********************************************************************/
/*                                                                    */        
/*     PROCEDURE: Q_S0270_UPD_DET_TCU_CNTRS                           */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/12/27                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*            THIS PROCEDURE IS ENTERED WHEN A 1142 MSG ARRIVES       */        
/*            IN RESPONSE TO A TCU DETAIL POLL REQUEST.               */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_LCE_ID M_LCE_ID,                       */        
/*                      ZF_LDC_SEQ_NBR M_BYTE,                        */        
/*                      ZF_VALIDITY M_PM_DATA_VALIDITY,               */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0160_GET_TRXS_FOR_TCU                      */        
/*                      Q_S0090_MEAS_TYPE_RUNNING                     */        
/*                      Q_S0430_UPD_TCU_INVALID                       */        
/*                      Q_S0512_UPD_T2_DET_TCU                        */        
/*                      Q_S0525_UPD_T4_DET_TCU                        */        
/*                      Q_S0530_UPD_T5_DET_TCU                        */        
/*                      Q_S0451_UPD_T6_DET_TCU                        */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*     CALLED FROM:                                                   */        
/*                      P_GDXBYX_UPD_CCI_DETAIL_CTRS                  */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0270_UPD_DET_TCU_CNTRS: PROC(ZF_LDC_LCE_ID  M_LCE_ID,                        
                                ZF_LDC_SEQ_NBR M_BYTE,                          
                                ZF_VALIDITY    M_PM_DATA_VALIDITY,              
                                ZF_LDC_BUF_PTR PTR);                            
                                                                                
DCL ZQ_TRX_ARR       ZM_TRXS_PER_TCU,                                           
    ZQ_ACT_IDX       INT;                                                       
                                                                                
                                                                                
IF (ZF_LDC_SEQ_NBR = 1)                                                         
THEN                                                                            
  ZQ_TRX_ARR := Q_S0160_GET_TRXS_FOR_TCU(ZF_LDC_LCE_ID);                        
                                                                                
  IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_TRAFFIC,                      
                               ZQ_ACT_IDX)                                      
  THEN                                                                          
    IF ZF_VALIDITY = E_DATA_INVALID                                             
    THEN                                                                        
      Q_S0430_UPD_TCU_INVALID(ZF_LDC_LCE_ID, ZQ_ACT_IDX,                        
                              E_MT_RESOURCE_AVAILABILITY);                      
    ELSE                                                                        
      Q_S0515_UPD_T1_DET_TCU(ZF_LDC_BUF_PTR,                                    
                             ZQ_ACT_IDX);                                       
    FI;                                                                         
  FI;                                                                           
                                                                                
  IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_RESOURCE_AVAILABILITY,                      
                               ZQ_ACT_IDX)                                      
  THEN                                                                          
    IF ZF_VALIDITY = E_DATA_INVALID                                             
    THEN                                                                        
      Q_S0430_UPD_TCU_INVALID(ZF_LDC_LCE_ID, ZQ_ACT_IDX,                        
                              E_MT_RESOURCE_AVAILABILITY);                      
    ELSE                                                                        
      Q_S0512_UPD_T2_DET_TCU(ZF_LDC_BUF_PTR,                                    
                             ZF_LDC_LCE_ID,                                     
                             ZQ_ACT_IDX);                                       
    FI;                                                                         
  FI;                                                                           
                                                                                
  IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_RESOURCE_USAGE_SDCCH, ZQ_ACT_IDX)           
  THEN                                                                          
    IF ZF_VALIDITY = E_DATA_INVALID                                             
    THEN                                                                        
      Q_S0430_UPD_TCU_INVALID(ZF_LDC_LCE_ID, ZQ_ACT_IDX,                        
                              E_MT_RESOURCE_USAGE_SDCCH);                       
    ELSE                                                                        
      Q_S0525_UPD_T4_DET_TCU(ZF_LDC_BUF_PTR, ZQ_ACT_IDX);                       
    FI;                                                                         
  FI;                                                                           
                                                                                
  IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_RESOURCE_USAGE_RTCH, ZQ_ACT_IDX)            
  THEN                                                                          
    IF ZF_VALIDITY = E_DATA_INVALID                                             
    THEN                                                                        
      Q_S0430_UPD_TCU_INVALID(ZF_LDC_LCE_ID, ZQ_ACT_IDX,                        
                              E_MT_RESOURCE_USAGE_RTCH);                        
    ELSE                                                                        
      Q_S0530_UPD_T5_DET_TCU(ZF_LDC_BUF_PTR, ZQ_ACT_IDX);                       
    FI;                                                                         
  FI;                                                                           
                                                                                
  IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_HANDOVER, ZQ_ACT_IDX)                       
  THEN                                                                          
    IF ZF_VALIDITY = E_DATA_INVALID                                             
    THEN                                                                        
      Q_S0430_UPD_TCU_INVALID(ZF_LDC_LCE_ID, ZQ_ACT_IDX,                        
                              E_MT_HANDOVER);                                   
    ELSE                                                                        
      Q_S0451_UPD_T6_DET_TCU(ZF_LDC_BUF_PTR, ZQ_ACT_IDX);                       
    FI;                                                                         
  FI;                                                                           
ELSE                          /* SEQ NBR > 1 IS NOT EXPECTED */                 
  Q_S0010_CCDC_ERROR(M_ERC6_USER_REC, M_ERT0019_INC_MESS_DATA,                  
                     11, 1142);                                                 
FI;                                                                             
END Q_S0270_UPD_DET_TCU_CNTRS;                                                  
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0280_UPD_DET_DTC_CNTRS                           */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/12/19                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*         THIS PROCEDURE IS ENTERED WHEN A 1142 MSG ARRIVES          */        
/*         IN RESPONSE TO A DTC DETAIL POLL REQUEST.                  */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_VALIDITY M_PM_DATA_VALIDITY,               */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0090_MEAS_TYPE_RUNNING                     */        
/*                      Q_S0436_UPD_T6_DTC_INVALID                    */        
/*                      Q_S0453_UPD_T6_DET_DTC                        */        
/*     CALLED FROM:                                                   */        
/*                      P_GDXBAX_UPD_CCI_DETAIL_CTRS                  */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0280_UPD_DET_DTC_CNTRS: PROC(ZF_VALIDITY    M_PM_DATA_VALIDITY,              
                                ZF_LDC_BUF_PTR PTR);                            
                                                                                
DCL ZQ_ACT_IDX   INT;                                                           
                                                                                
/* THIS MUST BE A BSSAP DTC OR IT WOULD NOT HAVE BEEN */                          
/* POLLED SO THE CONTENTS MAY BE ASSUMED.             */            

/* B8 
IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_TRAFFIC, ZQ_ACT_IDX)                                      
  THEN                                                                          
  IF ZF_VALIDITY = E_DATA_INVALID                                             
    THEN                                                                        
    Q_S0300_UPD_DTC_INVALID(ZQ_ACT_IDX, FALSE, E_MT_TRAFFIC);               
  ELSE                                                                        
    Q_S0457_UPD_T1_DET_DTC(ZF_LDC_BUF_PTR, ZQ_ACT_IDX);                         
  FI;                                                                         
FI;                                                                           
*/
                                                                                
IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_HANDOVER, ZQ_ACT_IDX)                         
THEN                                                                            
  IF ZF_VALIDITY=E_DATA_INVALID                                                 
  THEN                                                                          
    Q_S0436_UPD_T6_DTC_INVALID(ZQ_ACT_IDX, ZS_VAR);                             
  ELSE                                                                          
    Q_S0453_UPD_T6_DET_DTC(ZF_LDC_BUF_PTR, ZQ_ACT_IDX);                         
  FI;                                                                           
FI;                                                                             
                                                                                
END Q_S0280_UPD_DET_DTC_CNTRS;                                                  

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0285_UPD_T26_CNTRS                               */        
/*                                                                    */        
/*     PROGRAMMER: CHEN ZHANGYI                                       */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 02/07/24                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*         THIS PROCEDURE IS ENTERED WHEN A 1408 MSG ARRIVES          */        
/*         IN RESPONSE TO T26 POLL REQUEST.                           */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_LCE_ID M_LCE_ID,                       */        
/*                      ZF_LDC_SEQ_NBR M_BYTE,                        */        
/*                      ZF_VALIDITY M_PM_DATA_VALIDITY,               */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0090_MEAS_TYPE_RUNNING                     */        
/*                      Q_S0443_UPD_T26_INVALID                       */        
/*                      Q_S0485_UPD_T26_DTC                           */        
/*     CALLED FROM:                                                   */        
/*                      P_GDXBYX_UPD_CCI_T26_CTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0285_UPD_T26_CNTRS: PROC(ZF_LDC_LCE_ID  M_LCE_ID,                        
                            ZF_LDC_SEQ_NBR M_BYTE,                          
                            ZF_VALIDITY    M_PM_DATA_VALIDITY,              
                            ZF_LDC_BUF_PTR PTR);

DCL ZQ_ACT_IDX INT;  

IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_HANDOVER_PER_SERVINGCELL,
                             ZQ_ACT_IDX)
THEN
  Q_S0176_MAKE_T26_CELL_LIST(ZQ_ACT_IDX);
  IF ZF_VALIDITY = E_DATA_INVALID
  THEN
    Q_S0443_UPD_T26_INVALID(ZF_LDC_LCE_ID, ZQ_ACT_IDX);
  ELSE                                                                        
    Q_S0485_UPD_T26_TCU(ZF_LDC_BUF_PTR,                                    
                           ZQ_ACT_IDX);                                       
  FI;                                                                         
FI;                                                                         

END Q_S0285_UPD_T26_CNTRS;
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0290_UPD_TCH_INVALID                             */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/12/22                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*      UPDATE THE VALIDITY FOR TYPE 1, TYPE2 AND TYPE 29             */        
/*      SET CORRESPONDING COUNTERS TO INVALID                         */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_LCE_ID M_LCE_ID,                       */        
/*                      ZF_IS_TEL BOOL                                */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0090_MEAS_TYPE_RUNNING                     */        
/*                      Q_S0575_UPD_T110_1_INVALID                    */        
/*                      Q_S0449_UPD_T110_2_INVALID                    */        
/*                      Q_S0170_GET_CELL_SCOPE                        */        
/*                      Q_S0180_CELL_IN_SCOPE                         */        
/*                      Q_S0410_UPD_T29_INVALID                       */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0260_UPD_TCH_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0290_UPD_TCH_INVALID: PROC(ZF_LDC_LCE_ID   M_LCE_ID,                         
                              ZF_IS_TEL       BOOL);                            
                                                                                
DCL ZQ_IDX            RANGE(1:M_PM_MAX_CELLS_FOR_A_MEAS_JOB),                   
    ZQ_I              M_TYPE_01_CTRS_CELL,                                           
    ZQ_J              M_TYPE_02_CTRS,                                           
    ZQ_ACT_IDX        INT,                                                      
    ZQ_LCE_ID         M_LCE_ID,                                                 
    ZQ_CELL_IDX       INT,                                                      
    ZQ_NOT_FOUND      BOOL;                                                     
DCL ZQ_ALL_CELLS      BOOL,                                                     
    ZQ_CELL_LIST      M_PM_DET_CELL_LIST;                                       
DCL ZQ_BTS_TEL        M_MAINT_STATE;
/* BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE */ 
DCL ZQ_BTS_IDX        INT;
DCL ZQ_TC_IDX         M_TC_ID;
/* END: ADD-WIPRO-B10-MX-MR2-CHANGE */                                                                              
DO WITH Z_R_CONF_CE_PTR -> ZM_R_CONF_CE(INT(ZF_LDC_LCE_ID));                    
  IF ZF_LDC_LCE_ID > D_MATE_LCE                                                 
  THEN                                                                          
    ZQ_LCE_ID := D_MATE_LCE;                                                    
  ELSE                                                                          
    ZQ_LCE_ID := ZF_LDC_LCE_ID;                                                 
  FI;                                                                           
OD;
/* BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE */ 
IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_IP,ZQ_ACT_IDX)                                    
THEN 
  IF ZF_IS_TEL                                          
  THEN  
   DO FOR ZQ_BTS_IDX := 1 TO M_MAX_BTS_PER_BSC;
     IF(Q_S0455_CHK_IF_IP_BTS(ZQ_BTS_IDX)) THEN
       Q_S6444_UPD_IP_CONG_BTS_INVALID(ZQ_BTS_IDX);	  
     FI;
   OD;  
  ELSIF (NOT ZF_IS_TEL)
  THEN
    DO FOR ZQ_TC_IDX := 1 TO M_MAX_TCID;
     IF(Q_S0455_CHK_IF_TC_MAPPED(ZQ_TC_IDX)) THEN
       Q_S7444_UPD_ATERMUX_INVALID(ZQ_TC_IDX);	  
     FI;
    OD;
  FI;
FI;                                                                             
/* END: ADD-WIPRO-B10-MX-MR2-CHANGE */                                                                              
DO FOR ZQ_CELL_IDX := 1 TO CM_FY32_MAX_CELLS_PER_BSC;   
  DO WITH Z_R_BTS_TEL_PTR -> ZM_R_BTS_TEL(ZQ_CELL_IDX);
    ZQ_BTS_TEL := D_BTS_TEL;
  OD;
  DO WITH Z_R_CELL_MGT_PTR -> ZM_R_CELL_MGT(ZQ_CELL_IDX);                       
    IF ZQ_BTS_TEL /= E_MS_NEQ AND                                                
       (D_TEL_CE = ZQ_LCE_ID OR NOT ZF_IS_TEL)                                  
    THEN                                                                        
                                                                                
      IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_CELL_TRX_OVERVIEW_COUNTERS,             
                                   ZQ_ACT_IDX)                                  
      THEN                                                                      
        Q_S0575_UPD_T110_1_INVALID(ZQ_CELL_IDX,                                 
                                   M_FS_TCHRM_LDC,                              
                                   ZF_IS_TEL);                                  
                                                                                
        Q_S0449_UPD_T110_2_INVALID(ZQ_CELL_IDX, 
                                   M_FS_TCHRM_LDC, 
                                   ZF_IS_TEL);              
                                   
        Q_S0603_UPD_T110_3_INVALID(ZQ_CELL_IDX,
                                   M_FS_TCHRM_LDC,
                                   ZF_IS_TEL);
      FI;                                                                       
                                                                                
      IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_DIRECTED_RETRY, ZQ_ACT_IDX)             
      THEN                                                                      
        ZQ_ALL_CELLS := FALSE;                                                  
        Q_S0170_GET_CELL_SCOPE(ZQ_ACT_IDX, ZQ_CELL_LIST);                       
        IF ZQ_CELL_LIST(1) = M_NULL_CELL_IDX                                    
        THEN                                                                    
          ZQ_ALL_CELLS := TRUE;                                                 
        FI;                                                                     
                                                                                
        IF ZQ_ALL_CELLS OR                                                      
           Q_S0180_CELL_IN_SCOPE(ZQ_ACT_IDX, ZQ_CELL_IDX)                       
        THEN                                          
          IF ZF_IS_TEL                                          
            THEN                                                                    
            Q_S0410_UPD_T29_INVALID(ZQ_CELL_IDX, M_FS_TCHRM_LDC);  
          FI;               
        FI;                                                                     
      FI;                                                                       
      
      /* ADD B9 PKG2 CHENZY BEGIN */
      IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_VGCS, ZQ_ACT_IDX)             
      THEN                                                                      
        ZQ_ALL_CELLS := FALSE;                                                  
        Q_S0170_GET_CELL_SCOPE(ZQ_ACT_IDX, ZQ_CELL_LIST);                       
        IF ZQ_CELL_LIST(1) = M_NULL_CELL_IDX                                    
        THEN                                                                    
          ZQ_ALL_CELLS := TRUE;                                                 
        FI;                                                                     
                                                                                
        IF ZQ_ALL_CELLS OR                                                      
           Q_S0180_CELL_IN_SCOPE(ZQ_ACT_IDX, ZQ_CELL_IDX)                       
        THEN                                          
          IF ZF_IS_TEL                                          
            THEN                                                                    
            Q_S0640_UPD_T34_INVALID(ZQ_CELL_IDX, M_FS_TCHRM_LDC);  
          FI;               
        FI;                                                                     
      FI;                                                                       
      /* ADD B9 PKG2 CHENZY END */
      /* BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE */  
      IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_IP,
                                 ZQ_ACT_IDX)                                    
      THEN 
      	IF ZF_IS_TEL                                          
        THEN  
	 Q_S5444_UPD_IP_CONG_CELL_INVALID(ZQ_CELL_IDX);      
	    FI;
      FI;
      /* END: ADD-WIPRO-B10-MX-MR2-CHANGE */                                                                            
      IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_TRAFFIC, ZQ_ACT_IDX)                    
      THEN                                                                      
        IF ZF_IS_TEL                                                            
        THEN                                                                    
          IF Q_S0180_CELL_IN_SCOPE(ZQ_ACT_IDX, ZQ_CELL_IDX)                     
          THEN                                                                  
            ZQ_NOT_FOUND := TRUE;                                               
            DO FOR ZQ_IDX := 1 TO M_PM_MAX_CELLS_FOR_A_MEAS_JOB                 
                                                     WHILE ZQ_NOT_FOUND;        
              DO WITH Z_T1_PTR -> (ZQ_IDX);                                     
                IF B_CELL = ZQ_CELL_IDX OR                                      
                   B_CELL = M_NULL_CELL_IDX                                     
                THEN                                                            
                  ZQ_NOT_FOUND := FALSE;                                        
                  B_CELL := ZQ_CELL_IDX;                                        
                  DO FOR ZQ_I := E_MT_01_CTR_C442 TO E_MT_01_CTR_C612D;         
                    CASE ZQ_I OF                                                
/* PBLO: ERR 828      (E_MT_01_CTR_C612A:E_MT_01_CTR_C612D,*/
                      (E_MT_01_CTR_C812:E_MT_01_CTR_C612D,                      
                       E_MT_01_CTR_C13A:E_MT_01_CTR_C13B,                       
                       E_MT_01_CTR_C442,                                        
                       E_MT_01_CTR_C443):                                       
                                                                                
                         B_CTRS_CELLPT.B_C01_TO_C02I(ZQ_I)
                             .B_LOW:=ZS_FFFE; 
                         B_CTRS_CELLPT.B_C01_TO_C02I(ZQ_I)
                             .B_HIGH := ZS_FFFF;           
                      ELSE                                                      
                    ESAC;                                                       
                  OD;                                                           
                FI;                                                             
              OD;                                                               
            OD;                                                                 
          FI;                                                                   
        FI;                                                                     
      FI;                                                                       
                                                                                
      IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_RESOURCE_AVAILABILITY,                  
                                   ZQ_ACT_IDX)                                  
      THEN                                                                      
        IF Q_S0180_CELL_IN_SCOPE(ZQ_ACT_IDX, ZQ_CELL_IDX)                       
        THEN                                                                    
          ZQ_NOT_FOUND := TRUE;                                                 
          DO FOR ZQ_IDX := 1 TO M_PM_MAX_CELLS_FOR_A_MEAS_JOB                   
                                                   WHILE ZQ_NOT_FOUND;          
            DO WITH Z_T2_PTR -> (ZQ_IDX);                                       
              IF B_CELL_ID = ZQ_CELL_IDX OR                                     
                 B_CELL_ID = M_NULL_CELL_IDX                                    
              THEN                                                              
                ZQ_NOT_FOUND := FALSE;                                          
                B_CELL_ID := ZQ_CELL_IDX;                                       
                DO FOR ZQ_J := E_MT_02_CTR_C24 TO E_MT_02_CTR_C141;             
                  CASE ZQ_J OF                                                  
                    (E_MT_02_CTR_C24:E_MT_02_CTR_C26,                           
                     E_MT_02_CTR_C27):                                          
                               IF NOT ZF_IS_TEL                                 
                               THEN                                             
                                 B_HIS_CC_MT_02(ZQ_J) := ZS_FFFE;               
                               FI;                                              
                    (E_MT_02_CTR_C320A:E_MT_02_CTR_C320E,                       
                     E_MT_02_CTR_C28A:E_MT_02_CTR_C29A,                           
                     E_MT_02_CTR_C34,                                           
                     E_MT_02_CTR_C141):                                         
                               IF ZF_IS_TEL                                     
                               THEN                                             
                                 B_HIS_CC_MT_02(ZQ_J) := ZS_FFFE;               
                               FI;                                              
                    ELSE                                                        
                  ESAC;                                                         
                OD;                                                             
              FI;                                                               
            OD;                                                                 
          OD;                                                                   
        FI;                                                                     
      FI;                                                                       
                                                                                
    FI;                                                                         
  OD;                                                                           
OD;                                                                             
                                                                                
END Q_S0290_UPD_TCH_INVALID;                                                    
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0300_UPD_DTC_INVALID                             */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/12/22                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*      UPDATE THE VALIDITY FOR TYPE 1, TYPE 29                       */        
/*      SET CORRESPONDING COUNTERS TO INVALID                         */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_ACT_IDX INT,                               */        
/*                      ZF_ALL_CELLS BOOL,                            */        
/*                      ZF_MEAS_TYPE M_MEAS_TYPE                      */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0180_CELL_IN_SCOPE                         */        
/*                      Q_S0310_UPD_T28_INVALID                       */        
/*                      Q_S0410_UPD_T29_INVALID                       */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0250_UPD_DTC_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0300_UPD_DTC_INVALID: PROC(ZF_ACT_IDX      INT,                              
                              ZF_ALL_CELLS    BOOL,                             
                              ZF_MEAS_TYPE    M_MEAS_TYPE);                     
                                                                                
DCL ZQ_IDX            RANGE(1:M_PM_MAX_CELLS_FOR_A_MEAS_JOB),                   
    ZQ_CELL_IDX       INT,                                                      
    ZQ_J              M_HIS_TYPE_19_CTRS,                                       
    ZQ_Z              M_TYPE_01_CTRS_CELL,                                           
    ZQ_NOT_FOUND      BOOL;                                                     
                                                                                
DO FOR ZQ_CELL_IDX := 1 TO CM_FY32_MAX_CELLS_PER_BSC;                           
  DO WITH Z_R_BTS_TEL_PTR -> ZM_R_BTS_TEL(ZQ_CELL_IDX);                       
    IF D_BTS_TEL /= E_MS_NEQ                                                    
    THEN                                                                        
                                                                                
      IF ZF_ALL_CELLS OR                                                        
         Q_S0180_CELL_IN_SCOPE(ZF_ACT_IDX, ZQ_CELL_IDX)                         
      THEN                                                                      
        CASE ZF_MEAS_TYPE OF  

          (E_MT_TRAFFIC):                                                       
               ZQ_NOT_FOUND := TRUE;                                            
               DO FOR ZQ_IDX := 1 TO M_PM_MAX_CELLS_FOR_A_MEAS_JOB              
                                                WHILE ZQ_NOT_FOUND;             
                 DO WITH Z_T1_PTR -> (ZQ_IDX);                                  
                   IF B_CELL = ZQ_CELL_IDX OR                                   
                      B_CELL = M_NULL_CELL_IDX                                  
                   THEN                                                         
                     ZQ_NOT_FOUND := FALSE;                                     
                     B_CELL     := ZQ_CELL_IDX;                                 
                     DO FOR ZQ_Z := E_MT_01_CTR_C07 TO E_MT_01_CTR_C02I;         
                       CASE ZQ_Z OF                                             
                         (E_MT_01_CTR_C07,                                      
                       /* E_MT_01_CTR_C14, DEL FOR B8 */                                     
                          E_MT_01_CTR_C14A,                                     
                       /* E_MT_01_CTR_C14B, DEL FOR B8 */                                    
                          E_MT_01_CTR_C03,                                      
                          E_MT_01_CTR_C701A:E_MT_01_CTR_C701E,
                          E_MT_01_CTR_C901:E_MT_01_CTR_C903,
                          E_MT_01_CTR_C02I):
                                                            
                            B_CTRS_CELLPT.B_C01_TO_C02I(ZQ_Z)
                                  .B_LOW  := ZS_FFFE;         
                            B_CTRS_CELLPT.B_C01_TO_C02I(ZQ_Z)
                                  .B_HIGH := ZS_FFFF;         
                         ELSE                                                   
                       ESAC;                                                    
                     OD;                                                        
                   FI;                                                          
                 OD;                                                            
               OD; 
                                                                            
          (E_MT_SMS):                                                           
               DO WITH Z_T19_PTR -> (ZQ_CELL_IDX);                              
                 /* IT MAY BE THAT NO SAMPLES HAVE BEEN RECEIVED BUT            
                  * STILL THE CELLS SHOULD BE IDENTIFIED.                       
                  */                                                            
                 B_CELL_ID  := ZQ_CELL_IDX;                                     
                 DO FOR ZQ_J := E_MT_19_CTR_C194A TO E_MT_19_CTR_C194C;         
                   B_HIS_CC_MT_19(ZQ_J).B_LOW := ZS_FFFE;                       
                   B_HIS_CC_MT_19(ZQ_J).B_HIGH := ZS_FFFF;                      
                 OD;                                                            
               OD;                                                              
                                                                                
          (E_MT_HANDOVER_SDCCH):                                                
               Q_S0310_UPD_T28_INVALID(ZQ_CELL_IDX);                            
                                                                                
          (E_MT_DIRECTED_RETRY):                                                
               Q_S0410_UPD_T29_INVALID(ZQ_CELL_IDX, M_FS_DTC_TRF_LDC);          
          
          /* ADD IN B9 PKG2 CHENZY BEGIN */
          (E_MT_VGCS):
               Q_S0640_UPD_T34_INVALID(ZQ_CELL_IDX, M_FS_DTC_TRF_LDC);
          /* ADD IN B9 PKG2 CHENZY END */
          
          ELSE                                                                  
        ESAC;                                                                   
      FI;                                                                       
                                                                                
    FI;                                                                         
  OD;                                                                           
OD;                                                                             
                                                                                
END Q_S0300_UPD_DTC_INVALID;                                                    
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0310_UPD_T28_INVALID                             */        
/*                                                                    */        
/*     PROGRAMMER: L. DIERICK  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 99/07/27                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       SETS EVERY COUNTER  FOR TYPE 28 TO INVALID                   */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_CELL_IDX M_CELL_IDX                        */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0300_UPD_DTC_INVALID                       */        
/*                      Q_S0585_UPD_T28_STD_DTC                       */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0310_UPD_T28_INVALID: PROC(ZF_CELL_IDX M_CELL_IDX);                          
                                                                                
DCL ZQ_PTR      PTR;                                                            
DCL ZQ_I        INT;                                                            
                                                                                
DO WITH Z_T28_PTR -> (ZM_CELL_INDEX_VALUE(ZF_CELL_IDX));                                             
  B_CELL_ID  := ZF_CELL_IDX;                                                    
  /* C82, C83, C81, C86, C85, C88, C87, C96,                                    
     C97, C95, C91 -> C93, C101 -> C103, C107,                                  
     C510 -> C514, C115, C516 -> C518, C605A, C605D ->                          
     C605F, C607, C519, C90, C100, C445, C446, C454   */                        
  ZQ_PTR := ->B_HIS_CC_MT_28;                                                   
  DO FOR ZQ_I := 1 TO 77;                                                       
    CASE ZQ_I OF                                                                
      (1, 5, 7, 11, 15, 18, 22):                                                
                               ZQ_PTR->ZM_INT_MASK(ZQ_I) := ZS_FFFF;            
      (2:4, 6, 8:10, 12:14, 16:17,                                              
       19:21, 23:25) :                                                          
                               ZQ_PTR->ZM_INT_MASK(ZQ_I) := ZS_FFFE;            
      (26:77):  IF ZQ_I REM 2 = 0                                               
                               THEN                                             
                                 ZQ_PTR->ZM_INT_MASK(ZQ_I) := ZS_FFFF;          
                               ELSE                                             
                                 ZQ_PTR->ZM_INT_MASK(ZQ_I) := ZS_FFFE;          
                               FI;                                              
      ELSE                                                                      
    ESAC;                                                                       
  OD;                                                                           
OD;                                                                             
                                                                                
END Q_S0310_UPD_T28_INVALID;                                                    
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0410_UPD_T29_INVALID                             */        
/*                                                                    */        
/*     PROGRAMMER: L. DIERICK  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 99/07/27                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       SETS EVERY COUNTER  FOR TYPE 29 TO INVALID                   */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_CELL_IDX M_CELL_IDX,                       */        
/*                      ZF_LDC_TYPE M_FMM_SELECTOR                    */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0290_UPD_TCH_INVALID                       */        
/*                      Q_S0300_UPD_DTC_INVALID                       */        
/*                      Q_S0586_UPD_T29_STD_DTC                       */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0410_UPD_T29_INVALID: PROC(ZF_CELL_IDX   M_CELL_IDX,                         
                              ZF_LDC_TYPE   M_FMM_SELECTOR);                    
                                                                                
DCL ZQ_PTR      PTR;                                                            
DCL ZQ_I        INT;                                                            
                                                                                
DO WITH Z_T29_PTR -> (ZF_CELL_IDX);                                             
  B_CELL_ID  := ZF_CELL_IDX;                                                    
  CASE ZF_LDC_TYPE OF                                                           
    (M_FS_DTC_TRF_LDC) :                                                        
        ZQ_PTR := ->B_DIR_RETRY_CTRS;                                           
        /* C142A -> C142D, C143A -> C143F, C144A -> C144D,                      
           C145A -> C145D, C151, C152, C154 */                                  
        DO FOR ZQ_I := 1 TO 39;                                                 
          CASE ZQ_I OF                                                          
            (1, 3, 5, 7, 17, 19, 21,                                            
             23, 25, 27, 29, 31, 33, 38):                                       
                              ZQ_PTR->ZM_INT_MASK(ZQ_I) := ZS_FFFF;             
            (2, 4, 6, 8:16, 18, 20, 22,                                         
             24, 26, 28, 30, 32, 34, 35, 39):                                   
                              ZQ_PTR->ZM_INT_MASK(ZQ_I) := ZS_FFFE;             
            ELSE                                                                
          ESAC;                                                                 
        OD;                                                                     
    (M_FS_TCHRM_LDC) :                                                          
            DO WITH B_DIR_RETRY_CTRS;                                           
                B_FROM_C153_TO_C154(23).B_LOW := ZS_FFFE;                       
                B_FROM_C153_TO_C154(23).B_HIGH := ZS_FFFF;                      
                B_C555 := ZS_FFFE;                                              
            OD;                                                                 
    ELSE                                                                        
  ESAC;                                                                         
OD;                                                                             
                                                                                
END Q_S0410_UPD_T29_INVALID;                                                    

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0411_UPD_DTC_TRX_INVALID                         */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 22/11/97                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATE THE COUNTERS OF TYPE 110 BLOCK 3 BASED ON THE BUFFER  */        
/*       FROM THE TCU.                                                */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0070_ADD_INT_TO_3_INT                      */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
                                                                                
Q_S0411_UPD_DTC_TRX_INVALID: PROC(ZF_ACT_IDX INT, 
                                  ZF_MEAS_TYPE M_MEAS_TYPE);                         
                                                                                
DCL ZQ_TRX_IDX     M_TRX_IDX;                                                   
DCL ZQ_I           M_TYPE_01_CTRS_TRX; 
DCL ZQ_CELL_IDX    M_CELL_IDX;

DO FOR ZQ_TRX_IDX := 1 TO CM_FY32_MAX_TRX_PER_BSC;
  CASE ZF_MEAS_TYPE OF
    (E_MT_TRAFFIC):
     DO WITH Z_R_TRX_MGT_PTR -> ZM_R_TRX_MGT(ZQ_TRX_IDX); 
       ZQ_CELL_IDX := D_CELL_IDX;
       IF ZQ_CELL_IDX /= M_NULL_CELL_IDX
         THEN
         IF Q_S0180_CELL_IN_SCOPE(ZF_ACT_IDX, ZQ_CELL_IDX)
           THEN
           DO WITH Z_T1_2_PTR->(ZQ_TRX_IDX);                                        
             B_TRX_IDX := ZQ_TRX_IDX;                                                    
             DO FOR ZQ_I := E_MT_01_CTR_C621 TO                                
                            E_MT_01_CTR_C746B; 
               CASE ZQ_I OF
                 (E_MT_01_CTR_C621,
                  E_MT_01_CTR_C710:E_MT_01_CTR_C714,
                  E_MT_01_CTR_C746B):
                  B_CTRS_TRXPT.B_C621_TO_C746B(ZQ_I):= ZS_FFFE; 
               
                 ELSE
               ESAC;
             OD;    
           OD;
         FI;
       FI;                                                                     
     OD; /* DO WITH HIS FILE FORMAT */    
        
    (E_MT_CELL_TRX_OVERVIEW_COUNTERS):
    /*START: MC Counters*/
    IF (ZQ_TRX_IDX <= CM_FY32_MAX_TRX_PER_BSC/2)
    THEN
    /*END: MC Counters*/
     DO WITH Z_T110_4_PTR->(ZM_TRX_INDEX_VALUE(ZQ_TRX_IDX));                                        
       B_TRX_IDX := ZQ_TRX_IDX; 
       B_CTRS_PT4_MT_110.B_MC621_TO_MC746B
        (E_MT_110_CTR_MC621):=ZS_FFFE;
              
       B_CTRS_PT4_MT_110.B_MC621_TO_MC746B
        (E_MT_110_CTR_MC710):=ZS_FFFE;
              
       B_CTRS_PT4_MT_110.B_MC621_TO_MC746B
        (E_MT_110_CTR_MC711):=ZS_FFFE;
              
       B_CTRS_PT4_MT_110.B_MC621_TO_MC746B
        (E_MT_110_CTR_MC712):=ZS_FFFE;
              
       B_CTRS_PT4_MT_110.B_MC621_TO_MC746B
        (E_MT_110_CTR_MC713):=ZS_FFFE;
              
       B_CTRS_PT4_MT_110.B_MC621_TO_MC746B
        (E_MT_110_CTR_MC714):=ZS_FFFE;
              
       B_CTRS_PT4_MT_110.B_MC621_TO_MC746B
        (E_MT_110_CTR_MC746B):=ZS_FFFE;
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
B_CTRS_PT4_MT_110.B_MC990_TO_MC996
        (E_MT_110_CTR_MC995).B_LOW:=ZS_FFFE;

B_CTRS_PT4_MT_110.B_MC990_TO_MC996
        (E_MT_110_CTR_MC995).B_HIGH:=ZS_FFFF;
       
B_CTRS_PT4_MT_110.B_MC990_TO_MC996
        (E_MT_110_CTR_MC996).B_LOW:=ZS_FFFE;

B_CTRS_PT4_MT_110.B_MC990_TO_MC996
        (E_MT_110_CTR_MC996).B_HIGH:=ZS_FFFF;
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */        
     OD;
     /*START: MC Counters*/
    ELSE
     DO WITH Z_T110_4_2_PTR->(ZM_TRX_INDEX_VALUE(ZQ_TRX_IDX));                                        
       B_TRX_IDX := ZQ_TRX_IDX; 
       B_CTRS_PT4_MT_110.B_MC621_TO_MC746B
        (E_MT_110_CTR_MC621):=ZS_FFFE;
              
       B_CTRS_PT4_MT_110.B_MC621_TO_MC746B
        (E_MT_110_CTR_MC710):=ZS_FFFE;
              
       B_CTRS_PT4_MT_110.B_MC621_TO_MC746B
        (E_MT_110_CTR_MC711):=ZS_FFFE;
              
       B_CTRS_PT4_MT_110.B_MC621_TO_MC746B
        (E_MT_110_CTR_MC712):=ZS_FFFE;
              
       B_CTRS_PT4_MT_110.B_MC621_TO_MC746B
        (E_MT_110_CTR_MC713):=ZS_FFFE;
              
       B_CTRS_PT4_MT_110.B_MC621_TO_MC746B
        (E_MT_110_CTR_MC714):=ZS_FFFE;
              
       B_CTRS_PT4_MT_110.B_MC621_TO_MC746B
        (E_MT_110_CTR_MC746B):=ZS_FFFE;
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
B_CTRS_PT4_MT_110.B_MC990_TO_MC996
        (E_MT_110_CTR_MC995).B_LOW:=ZS_FFFE;

B_CTRS_PT4_MT_110.B_MC990_TO_MC996
        (E_MT_110_CTR_MC995).B_HIGH:=ZS_FFFF;
       
B_CTRS_PT4_MT_110.B_MC990_TO_MC996
        (E_MT_110_CTR_MC996).B_LOW:=ZS_FFFE;

B_CTRS_PT4_MT_110.B_MC990_TO_MC996
        (E_MT_110_CTR_MC996).B_HIGH:=ZS_FFFF;
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */        
       OD;
    FI;
     /*END: Counters*/
    ELSE
  ESAC;
OD;                                                                             
END Q_S0411_UPD_DTC_TRX_INVALID; 
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0429_UPD_SMS_INVALID                             */        
/*                                                                    */        
/*     PROGRAMMER: L. DIERICK  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/11                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 1, 2, 110  COUNTERS VALIDITY FIELDS.        */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      NONE                                          */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      P_GDXBYX_UPD_CCI_STD_CTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0429_UPD_SMS_INVALID: PROC();                                                
                                                                                
DCL ZQ_PTR  PTR;                                                                
DCL ZQ_I    INT;                                                                
                                                                                
  DO WITH Z_T30_PTR->;                                                          
    ZQ_PTR := ->B_HIS_SMSCB;                                                    
    DO FOR ZQ_I := 1 TO 6;                                                      
      IF ZQ_I = 1 OR ZQ_I = 3                                                   
      THEN                                                                      
        ZQ_PTR->ZM_INT_MASK(ZQ_I) := ZS_FFFF;                                   
      ELSE                                                                      
        ZQ_PTR->ZM_INT_MASK(ZQ_I) := ZS_FFFE;                                   
      FI;                                                                       
    OD;                                                                         
  OD;                                                                           
                                                                                
END Q_S0429_UPD_SMS_INVALID;                                                    
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0430_UPD_TCU_INVALID                             */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/11                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       SETS THE TYPE 1 COUNTERS TO INVALID (= H'FE)                 */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_LCE_ID M_LCE_ID,                       */        
/*                      ZF_ACT_IDX INT,                               */        
/*                      ZF_MEAS_TYPE M_MEAS_TYPE                      */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0120_GET_CIS_FOR_TCU                       */        
/*                      Q_S0180_CELL_IN_SCOPE                         */        
/*                      Q_S0433_UPD_T4_TCU_INVALID                    */        
/*                      Q_S0435_UPD_T5_TCU_INVALID                    */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*                      Q_S0270_UPD_DET_TCU_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0430_UPD_TCU_INVALID: PROC(ZF_LDC_LCE_ID   M_LCE_ID,                         
                              ZF_ACT_IDX      INT,                              
                              ZF_MEAS_TYPE    M_MEAS_TYPE);                     
                                                                                
DCL ZQ_IDX            RANGE(1:M_PM_MAX_CELLS_FOR_A_MEAS_JOB),                   
    ZQ_CELL_IDX       RANGE(1:M_PM_MAX_CELLS_FOR_A_MEAS_JOB),                   
    ZQ_I              M_TYPE_01_CTRS_CELL,                                           
    ZQ_TCU_CELL_LIST  ZM_CIS_PER_TCU,                                           
    ZQ_NOT_FOUND      BOOL;                                                     
                                                                                
ZQ_TCU_CELL_LIST := Q_S0120_GET_CIS_FOR_TCU(ZF_LDC_LCE_ID);                     
DO FOR ZQ_IDX := 1 TO CM_FY32_MAX_CELLS_PER_TCU WHILE                           
                          ZQ_TCU_CELL_LIST(ZQ_IDX) /= M_NULL_CELL_IDX;          
  IF Q_S0180_CELL_IN_SCOPE(ZF_ACT_IDX, ZQ_TCU_CELL_LIST(ZQ_IDX))                
  THEN                                                                          
    CASE ZF_MEAS_TYPE OF                                                        
      (E_MT_TRAFFIC):                                                           
            ZQ_NOT_FOUND := TRUE;                                               
            DO FOR ZQ_CELL_IDX := 1 TO M_PM_MAX_CELLS_FOR_A_MEAS_JOB            
                                                   WHILE ZQ_NOT_FOUND;          
              DO WITH Z_T1_PTR -> (ZQ_CELL_IDX);                                
                IF B_CELL = ZQ_TCU_CELL_LIST(ZQ_IDX) OR                         
                   B_CELL = M_NULL_CELL_IDX                                     
                THEN                                                            
                  ZQ_NOT_FOUND := FALSE;                                        
                  B_CELL := ZQ_TCU_CELL_LIST(ZQ_IDX);                           
                  DO FOR ZQ_I := E_MT_01_CTR_C01 TO E_MT_01_CTR_C903;          
                    CASE ZQ_I OF                                                
                      (E_MT_01_CTR_C01:E_MT_01_CTR_C04,                         
                       E_MT_01_CTR_C10:E_MT_01_CTR_C138,                       
                       E_MT_01_CTR_C14C:E_MT_01_CTR_C02H, 
                       E_MT_01_CTR_C15A:E_MT_01_CTR_C15B,                       
/* PBLO: ERR.846       E_MT_01_CTR_C13A:E_MT_01_CTR_C15B, */
                       E_MT_01_CTR_C161A:E_MT_01_CTR_C171,
                       E_MT_01_CTR_C702A:E_MT_01_CTR_C706):                    
                                                                                
                         B_CTRS_CELLPT.B_C01_TO_C02I(ZQ_I)
                            .B_LOW  := ZS_FFFE;                
                         B_CTRS_CELLPT.B_C01_TO_C02I(ZQ_I)
                            .B_HIGH := ZS_FFFF;                
                                                                                
                      ELSE                                                      
                    ESAC;                                                       
                                                                                
                  OD;                                                           
                FI;                                                             
              OD;                                                               
            OD;     
            Q_S0437_UPD_T1_TCU_TRX_INVAL(ZF_LDC_LCE_ID,                           
                                         ZQ_TCU_CELL_LIST(ZQ_IDX)); 
                                                     
      (E_MT_RESOURCE_AVAILABILITY):                                             
            ZQ_NOT_FOUND := TRUE;                                               
            DO FOR ZQ_CELL_IDX := 1 TO M_PM_MAX_CELLS_FOR_A_MEAS_JOB            
                                                   WHILE ZQ_NOT_FOUND;          
              DO WITH Z_T2_PTR -> (ZQ_CELL_IDX);                                
                IF B_CELL_ID = ZQ_TCU_CELL_LIST(ZQ_IDX) OR                      
                   B_CELL_ID = M_NULL_CELL_IDX                                  
                THEN                                                            
                  ZQ_NOT_FOUND := FALSE;                                        
                  B_CELL_ID := ZQ_TCU_CELL_LIST(ZQ_IDX);                        
                  B_HIS_CC_MT_02(E_MT_02_CTR_C30) := ZS_FFFE;                   
                  B_HIS_CC_MT_02(E_MT_02_CTR_C31) := ZS_FFFE;                   
                  B_HIS_CC_MT_02(E_MT_02_CTR_C803) := ZS_FFFE;                   
                FI;                                                             
              OD;                                                               
            OD;                                                                 
      (E_MT_RESOURCE_USAGE_SDCCH):                                              
            Q_S0433_UPD_T4_TCU_INVALID(ZF_LDC_LCE_ID,                           
                                       ZQ_TCU_CELL_LIST(ZQ_IDX));               
      (E_MT_RESOURCE_USAGE_RTCH):                                               
            Q_S0435_UPD_T5_TCU_INVALID(ZF_LDC_LCE_ID,                           
                                       ZQ_TCU_CELL_LIST(ZQ_IDX));               
      (E_MT_HANDOVER):                                                          
            ZQ_NOT_FOUND := TRUE;                                               
            DO FOR ZQ_CELL_IDX := 1 TO M_PM_MAX_CELLS_FOR_A_MEAS_JOB            
                                                   WHILE ZQ_NOT_FOUND;          
              DO WITH Z_T6_PTR -> (ZQ_CELL_IDX);                                
                IF B_CELL_ID = ZQ_TCU_CELL_LIST(ZQ_IDX) OR                      
                   B_CELL_ID = M_NULL_CELL_IDX                                  
                THEN                                                            
                  ZQ_NOT_FOUND := FALSE;                                        
                  B_CELL_ID := ZQ_TCU_CELL_LIST(ZQ_IDX);                        
                  DO WITH B_HIS_CC_MT_06.B_ALL_CTRS;                            
                    B_MT_06_CTR_C413.B_LOW  := ZS_FFFE;                         
                    B_MT_06_CTR_C413.B_HIGH := ZS_FFFF;                         
                  OD;                                                           
                FI;                                                             
              OD;                                                               
            OD;                                                                 
      ELSE                                                                      
                                                                                
    ESAC;                                                                       
  FI;                                                                           
OD;                                                                             
                                                                                
END Q_S0430_UPD_TCU_INVALID;                                                    
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0432_UPD_T3_INVALID                              */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/11                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       SETS THE TYPE 3 CCCH COUNTERS TO INVALID (= H'FE)            */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_LCE_ID M_LCE_ID,                       */        
/*                      ZF_ACT_IDX INT                                */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0160_GET_TRXS_FOR_TCU                      */        
/*                      Q_S0110_IS_BCCH_TRX                           */        
/*                      Q_S0180_CELL_IN_SCOPE                         */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0432_UPD_T3_INVALID: PROC(ZF_LDC_LCE_ID  M_LCE_ID,                           
                             ZF_ACT_IDX     INT);                               
                                                                                
DCL ZQ_IDX             RANGE(1:CM_FY32_PM_MAX_TRX_PER_TCU),                     
    ZQ_BCCH_IDX        RANGE(1:M_PM_MAX_CELLS_FOR_A_MEAS_JOB),                  
    ZQ_TRX_NOT_FOUND   BOOL,                                                    
    ZQ_TRX_ID          M_TRX_ID,                                                
    ZQ_CELL_IDX        M_CELL_IDX;                                              
DCL ZQ_TRX_ARR         ZM_TRXS_PER_TCU;                                         
DCL ZQ_I               M_TYPE_03_CTRS;              
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
DCL ZQ_TS_2            INT;                          
DCL ZQ_K               INT;
DCL ZQ_TS              INT;
/* END : ADD-WIPRO-B10-MR1-CHANGE */
 
ZQ_TRX_ARR := Q_S0160_GET_TRXS_FOR_TCU(ZF_LDC_LCE_ID);                          
DO FOR ZQ_IDX := 1 TO CM_FY32_PM_MAX_TRX_PER_TCU                                
                        WHILE ZQ_TRX_ARR(ZQ_IDX) /=M_NULL_TRX_IDX;              
                                                                                
  /* CHECK IF BCCH TRX AND GET THE TRX_ID */                                    
  IF Q_S0110_IS_BCCH_TRX(ZQ_TRX_ARR(ZQ_IDX),                                    
                         ZQ_CELL_IDX,                                           
                         ZQ_TRX_ID)                                             
  THEN                                                                          
    IF Q_S0180_CELL_IN_SCOPE(ZF_ACT_IDX, ZQ_CELL_IDX)                           
    THEN                                                                        
      ZQ_TRX_NOT_FOUND := TRUE;                                                 
      DO FOR ZQ_BCCH_IDX := 1 TO M_PM_MAX_CELLS_FOR_A_MEAS_JOB                  
                                              WHILE ZQ_TRX_NOT_FOUND;           
        DO WITH Z_T3_PTR->(ZQ_BCCH_IDX);                                        
          /* JUST CHECK ON THE CELL IDX AS WE OVERWRITE IF                      
           * TWO RECEIVED.                                                      
           */                                                                   
          IF ZQ_CELL_IDX = B_CELL_IDX OR                                        
             B_CELL_IDX = M_NULL_CELL_IDX                                       
          THEN                                                                  
            ZQ_TRX_NOT_FOUND := FALSE;                                          
            B_CELL_IDX  := ZQ_CELL_IDX;                                         
            B_INDEX_TRX := ZQ_TRX_ID;                                           
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
            ZQ_TS_2 := 2; 
            DO WITH Z_R_TRX_MGT_PTR -> ZM_R_TRX_MGT(ZQ_TRX_ARR(ZQ_IDX));
               IF D_TRX_TSCF(ZQ_TS_2) = M_CHAN_TYPE_CCH
               THEN 
               B_INDEX_TS  := 2;
               ELSE 
               B_INDEX_TS :=1;      
               FI;	
               ZQ_TS := 0;
               DO FOR ZQ_K := 1 TO B_INDEX_TS; 
                 DO WITH B_TYPE_03_CTRS_ARR(ZQ_K);                                            
                   B_CCCH_TS_NBR := ZQ_TS;
                
                  /* BEGIN : AFLEX-FEATURE-B11-PKG2-C8E-CHANGE */
                  /*DO FOR ZQ_I := E_MT_03_C8C TO E_MT_03_C8D;*/  
                  /*CR36/251325 START*/ 
                  /*DO FOR ZQ_I := E_MT_03_C8C TO E_MT_03_C8E;*/ 
                    DO FOR ZQ_I := E_MT_03_C8C TO E_MT_03_C8D;    
                  /*CR36/251325 END*/ 
              	  /* END : AFLEX-FEATURE-B11-PKG2-C8E-CHANGE */

                       B_HIS_CC_MT_03(ZQ_I).B_HIGH := ZS_FFFF;                           
              	      B_HIS_CC_MT_03(ZQ_I).B_LOW  := ZS_FFFE;                           
                    OD;
                 OD; 
               ZQ_TS := ZQ_TS + 2;
               OD;                                                                 
            OD;
/* END : ADD-WIPRO-B10-MR1-CHANGE */
          FI; /* TRX FOUND OR FIRST NULL ENTRY */                               
        OD; /* DO WITH Z_T3 .. */                                               
      OD; /* DO FOR MAX NUMBER ALLOWED HERE */                                  
    FI; /* IF CELL IN SCOPE OF JOB */                                           
  FI; /* IF THIS TRX IS A BCCH ONE */                                           
OD; /* DO FOR TRXS ON THE TCU */                                                
END Q_S0432_UPD_T3_INVALID;
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0433_UPD_T4_TCU_INVALID                          */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/11                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 4 SDCCH COUNTERS VALIDITY FIELDS.           */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_LCE_ID M_LCE_ID,                       */        
/*                      ZF_CELL_IDX M_CELL_IDX                        */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0160_GET_TRXS_FOR_TCU                      */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0430_UPD_TCU_INVALID                       */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0433_UPD_T4_TCU_INVALID: PROC(ZF_LDC_LCE_ID    M_LCE_ID,                     
                                 ZF_CELL_IDX      M_CELL_IDX);                  
                                                                                
DCL ZQ_TS_IDX          M_TS_NUMBER;                                             
DCL ZQ_TRX_IN_CELL     BOOL;                                                    
DCL ZQ_I               INT;                                                     
DCL ZQ_TRX_ARR         ZM_TRXS_PER_TCU;                                         
DCL ZQ_J               M_TCU_TYPE_4;                                            
DCL ZQ_FOUND           BOOL;                                                    
DCL ZQ_TRX_IDX         M_TRX_IDX;                                               
DCL ZQ_NBR_TRX         M_TRX_IDX;                                               
                                                                                
ZQ_TRX_ARR := Q_S0160_GET_TRXS_FOR_TCU(ZF_LDC_LCE_ID);                          
DO FOR ZQ_NBR_TRX := 1 TO CM_FY32_MAX_TRX_PER_BSC;                              
  DO WITH Z_R_TRX_MGT_PTR -> ZM_R_TRX_MGT(ZQ_NBR_TRX);                          
    IF D_CELL_IDX = ZF_CELL_IDX                                                 
    THEN                                                                        
                                                                                
      ZQ_TRX_IN_CELL := FALSE;                                                  
      DO FOR ZQ_I := 1 TO CM_FY32_PM_MAX_TRX_PER_TCU WHILE                      
                                          ZQ_TRX_IN_CELL = FALSE;               
        IF ZQ_TRX_ARR(ZQ_I) = ZQ_NBR_TRX                                        
        THEN                                                                    
          ZQ_TRX_IN_CELL := TRUE;                                               
          DO FOR ZQ_TS_IDX := 0 TO 7;                                           
            IF D_TRX_TSCF(ZQ_TS_IDX)=M_CHAN_TYPE_SDCCH   OR                     
               D_TRX_TSCF(ZQ_TS_IDX)=M_CHAN_TYPE_SDCCH_W_CBCH  OR               
               D_TRX_TSCF(ZQ_TS_IDX)=M_CHAN_TYPE_MAIN_COMB_BCCH OR              
               D_TRX_TSCF(ZQ_TS_IDX)=M_CHAN_TYPE_MCBCCH_W_CBCH OR
               D_TRX_TSCF(ZQ_TS_IDX)=M_CHAN_TYPE_DYN_SDCCH                 
            THEN                                                                
              ZQ_FOUND := FALSE;                                                
              ZQ_TRX_IDX := ZQ_NBR_TRX;                                         
              DO WHILE ZQ_FOUND = FALSE;                                        
                DO WITH Z_T4_PTR -> (LONG_INT((ZQ_TRX_IDX)));                               
                  IF B_INDEX_TRX = ZS_FFFF OR                                   
                     (B_INDEX_TRX = ZQ_NBR_TRX AND                              
                      B_TS_NUMBER = ZQ_TS_IDX)                                  
                  THEN                                                          
                    B_INDEX_TRX := ZQ_TRX_IDX;                                  
                    B_TS_NUMBER := ZQ_TS_IDX;                                   
                    DO FOR ZQ_J := E_C39_NBR_TOT_DCCH_ACC TO                    
                                   E_C40_TOT_USAGE_TIME_DCCH;                   
                      B_HIS_CC_MT_04(ZQ_J).B_LOW := ZS_FFFE;                    
                      B_HIS_CC_MT_04(ZQ_J).B_HIGH := ZS_FFFF;                   
                    OD;                                                         
                    ZQ_FOUND := TRUE;                                           
                  ELSE                                                          
                    ZQ_TRX_IDX := CM_FY32_MAX_TRX_PER_BSC + ZQ_TRX_IDX;         
                  FI;                                                           
                OD;                                                             
              OD;                                                               
            FI;                                                                 
          OD;                                                                   
        FI;                                                                     
      OD;                                                                       
    FI;                                                                         
  OD;                                                                           
OD;                                                                             
                                                                                
END Q_S0433_UPD_T4_TCU_INVALID;                                                 
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0434_UPD_T5_TCU_INVALID                          */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/11                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 5 TCH  COUNTERS VALIDITY FIELDS.            */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_PTR_TRX_IDX PTR,                           */        
/*                      ZF_TRX_IDX M_TRX_IDX                          */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0435_UPD_T5_TCU_INVALID                    */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0434_UPD_T5_TCU_INVALID: PROC(ZF_PTR_TRX_IDX   PTR,                          
                                 ZF_TRX_IDX       M_TRX_IDX);                   
                                                                                
DCL ZQ_I      M_TCU_TYPE_5;                                                     
DCL ZQ_J      M_TS_NUMBER;                                                      
                                                                                
DO WITH ZF_PTR_TRX_IDX -> M_HIS_TYPE_05;                                        
  B_INDEX_TRX := ZF_TRX_IDX;                                                    
  DO FOR ZQ_J := 0 TO 7;                                                        
    DO FOR ZQ_I := E_C370A_NBR_RTCH_SEIZ_FULL TO                                
                   E_C381B_TOT_RTCH_OCCY_HALF_MULTI;                            
      B_TS_DATA(ZQ_J)(ZQ_I).B_LOW  := ZS_FFFE;                                  
      B_TS_DATA(ZQ_J)(ZQ_I).B_HIGH := ZS_FFFF;                                  
    OD;                                                                         
                                                                                
  OD;                                                                           
OD;                                                                             
                                                                                
END Q_S0434_UPD_T5_TCU_INVALID;                                                 
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0435_UPD_T5_TCU_INVALID                          */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/11                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 5 TCH  COUNTERS VALIDITY FIELDS.            */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LCE_ID M_LCE_ID,                           */        
/*                      ZF_CELL_IDX M_CELL_IDX                        */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0434_UPD_T5_TCU_INVALID                    */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0430_UPD_TCU_INVALID                       */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0435_UPD_T5_TCU_INVALID: PROC(ZF_LCE_ID   M_LCE_ID,                          
                                 ZF_CELL_IDX M_CELL_IDX);                       
                                                                                
DCL ZQ_TRX_IDX    M_TRX_IDX;                                                    
                                                                                
DO FOR ZQ_TRX_IDX := 1 TO CM_FY32_MAX_TRX_PER_BSC;                              
  DO WITH Z_R_TRX_MGT_PTR -> ZM_R_TRX_MGT(ZQ_TRX_IDX);                          
    IF D_CELL_IDX = ZF_CELL_IDX AND
      D_RSL_IDX /= M_NULL_RSL_IDX
      THEN                                                                        
      DO WITH Z_R_RSL_LNK_PTR -> ZM_R_RSL_LNK(D_RSL_IDX);                      
        IF D_TCU_ID = ZF_LCE_ID                                                 
        THEN                                                                    
          IF ZQ_TRX_IDX > CM_FY32_MAX_TRX_PER_BSC/2                             
          THEN                                                                  
            Q_S0434_UPD_T5_TCU_INVALID(->Z_T5_2_PTR->
                                (ZM_TRX_INDEX_VALUE(ZQ_TRX_IDX)),              
                                       ZQ_TRX_IDX);                             
          ELSE                                                                  
            Q_S0434_UPD_T5_TCU_INVALID(->Z_T5_PTR->
                                (ZM_TRX_INDEX_VALUE(ZQ_TRX_IDX)),                
                                       ZQ_TRX_IDX);                             
          FI;                                                                   
        FI;                                                                     
      OD;                                                                       
    FI;                                                                         
  OD;                                                                           
OD;                                                                             
                                                                                
END Q_S0435_UPD_T5_TCU_INVALID;                                                 
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0436_UPD_T6_DTC_INVALID                          */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/11                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 6  COUNTERS VALIDITY FIELDS.                */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_ACT_IDX INT,                               */        
/*                      ZF_FIXED BOOL                                 */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0180_CELL_IN_SCOPE                         */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0250_UPD_DTC_STD_CNTRS                     */        
/*                      Q_S0280_UPD_DET_DTC_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0436_UPD_T6_DTC_INVALID: PROC(ZF_ACT_IDX  INT,                               
                                 ZF_FIXED    BOOL);                             
                                                                                
DCL ZQ_IDX       RANGE(1:M_PM_MAX_CELLS_FOR_A_MEAS_JOB),                        
    ZQ_NOT_FOUND BOOL,                                                          
    ZQ_CELL_IDX  M_CELL_IDX,                                                    
    ZQ_I         INT;                                                           
DCL ZQ_PTR       PTR;                                                           
                                                                                
DO FOR ZQ_CELL_IDX:=1 TO CM_FY32_MAX_CELLS_PER_BSC;                             
  DO WITH Z_R_BTS_TEL_PTR -> ZM_R_BTS_TEL(ZQ_CELL_IDX);                       
                                                                                
    IF D_BTS_TEL /=E_MS_NEQ AND                                                 
       Q_S0180_CELL_IN_SCOPE(ZF_ACT_IDX, ZQ_CELL_IDX)                           
    THEN                                                                        
      ZQ_NOT_FOUND:=TRUE;                                                       
      /* FIND A SPOT IN THE LIST */                                             
      DO FOR ZQ_IDX:=1 TO M_PM_MAX_CELLS_FOR_A_MEAS_JOB                         
                                     WHILE ZQ_NOT_FOUND;                        
                                                                                
        DO WITH Z_T6_PTR -> (ZQ_IDX);                                           
          IF B_CELL_ID=ZQ_CELL_IDX OR                                           
             B_CELL_ID=M_NULL_CELL_IDX                                          
          THEN                                                                  
            ZQ_NOT_FOUND:=FALSE;                                                
            B_CELL_ID:=ZQ_CELL_IDX;                                             
            IF ZF_FIXED                                                         
            THEN                                                                
            /* C42,  C43,  C541, C46,  C45A, C48,  C47,  C56,  C57,  
               C58,  C55A, C551, C52,  C53,  C561, C62,  C63,  C67,
               C470, C471, C472, C473, C474, C75,  C476, C477, C478,
               C585A,C585D,C585E,C585F,C541A,C41B, C586A,C586B,C586C,
               C479, C50,  C60,  C440, C444, C450, C220, C221, C230,
               C231, C270, C271, C447, C448, C449, C461 */
              ZQ_PTR := ->B_HIS_CC_MT_06;                                       
              DO FOR ZQ_I := 1 TO 98; /* PBLO: ERR.805: was 87 */
                CASE ZQ_I OF
                  (1, 5, 7, 11, 15, 18, 22):
                            ZQ_PTR->ZM_INT_MASK(ZQ_I) := ZS_FFFF;
                  (2:4, 6, 8:10, 12:14, 16:17,
                   19:21, 23:25, 52:53, 68):
                            ZQ_PTR->ZM_INT_MASK(ZQ_I) := ZS_FFFE;
/*                  (26:51, 54:65, 71:88): PBLO: ERR.805 */
                  (26:51, 54:65, 71:94, 97:98):
                            IF (ZQ_I REM 2 = 1 AND ZQ_I < 71) OR                
                               (ZQ_I REM 2 = 0 AND ZQ_I > 70)                   
                            THEN                                                
                              ZQ_PTR->ZM_INT_MASK(ZQ_I) := ZS_FFFE;             
                            ELSE                                                
                              ZQ_PTR->ZM_INT_MASK(ZQ_I) := ZS_FFFF;             
                            FI;                                                 
                  ELSE                                                          
                ESAC;                                                           
              OD;                                                               
            ELSE                                                                
              DO WITH B_HIS_CC_MT_06.B_ALL_CTRS;                                
                B_MT_06_CTR_C411.B_LOW  := ZS_FFFE;                             
                B_MT_06_CTR_C411.B_HIGH := ZS_FFFF;                             
                B_MT_06_CTR_C412 := ZS_FFFE;                                    
              OD;                                                               
            FI;                                                                 
          FI;                                                                   
        OD;                                                                     
      OD;                                                                       
    FI;                                                                         
  OD;                                                                           
OD;                                                                             
                                                                                
END Q_S0436_UPD_T6_DTC_INVALID;                                                 
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0437_UPD_T1_TCU_TRX_INVAL                        */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/11                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 5 TCH  COUNTERS VALIDITY FIELDS.            */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LCE_ID M_LCE_ID,                           */        
/*                      ZF_CELL_IDX M_CELL_IDX                        */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0434_UPD_T5_TCU_INVALID                    */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0430_UPD_TCU_INVALID                       */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0437_UPD_T1_TCU_TRX_INVAL: PROC(ZF_LCE_ID   M_LCE_ID,                          
                                   ZF_CELL_IDX M_CELL_IDX);                       
                                                                                
DCL ZQ_TRX_IDX    M_TRX_IDX;                                                    
DCL ZQ_I          M_TYPE_01_CTRS_TRX;                                              
                                                                                
DO FOR ZQ_TRX_IDX := 1 TO CM_FY32_MAX_TRX_PER_BSC;                              
  DO WITH Z_R_TRX_MGT_PTR -> ZM_R_TRX_MGT(ZQ_TRX_IDX);                          
    IF D_CELL_IDX = ZF_CELL_IDX AND
      D_RSL_IDX /= M_NULL_RSL_IDX
      THEN                                                                        
      DO WITH Z_R_RSL_LNK_PTR -> ZM_R_RSL_LNK(D_RSL_IDX);                      
        IF D_TCU_ID = ZF_LCE_ID                                                 
          THEN 
          DO WITH Z_T1_2_PTR->(ZQ_TRX_IDX);                                        
            B_TRX_IDX := ZQ_TRX_IDX;                                                    
            DO FOR ZQ_I := E_MT_01_CTR_C703 TO                                
                           E_MT_01_CTR_C739; 
              CASE ZQ_I OF
                (E_MT_01_CTR_C703,
                 E_MT_01_CTR_C717A:E_MT_01_CTR_C739):
                 B_CTRS_TRXPT.B_C621_TO_C746B(ZQ_I)  := ZS_FFFE; 
               
                ELSE
              ESAC;
            OD;  
          OD;
        FI;
      OD;
    FI;                                                                        
  OD;                                                                           
OD;                                                                             
                                                                                
END Q_S0437_UPD_T1_TCU_TRX_INVAL;                                                 
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0438_UPD_T8_INVALID                              */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/11                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 8 X.25 COUNTERS VALIDITY FIELDS.            */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LCE_ID M_LCE_ID                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      P_GDXBYX_UPD_CCI_STD_CTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0438_UPD_T8_INVALID: PROC(ZF_LCE_ID    M_LCE_ID);                            
                                                                                
DCL ZQ_LCE_CNT   INT,                                                           
    ZQ_LCE_FND   INT;                                                           
DCL ZQ_I         M_TYPE_08_CTRS;                                                
                                                                                
ZQ_LCE_FND := 0;                                                                
DO FOR ZQ_LCE_CNT := 1 TO CM_FY32_TYPE_08_REC WHILE ZQ_LCE_FND = 0;             
  DO WITH Z_T8_PTR -> (ZQ_LCE_CNT);                                             
    DO WITH B_HIS_DATA_08;                                                      
/* BEGIN :ADD-WIPRO-B10-MR1-CHANGE CR20/207886 */
      IF B_LINK_ID = ZM_LCE_ID_OMCP_X25 OR                                               
         B_LINK_ID = M_LCE_ID_NULL                                              
/* END :ADD-WIPRO-B10-MR1-CHANGE CR20/207886 */
      THEN                                                                      
        ZQ_LCE_FND := ZQ_LCE_CNT;                                               
/* BEGIN :ADD-WIPRO-B10-MR1-CHANGE CR20/207886 */
       /* B_LINK_ID := ZF_LCE_ID; */   
          B_LINK_ID := ZM_LCE_ID_OMCP_X25;
/* END :ADD-WIPRO-B10-MR1-CHANGE CR20/207886 */                                              
        DO FOR ZQ_I := E_08_SUCC_INC_CALLS TO E_08_UNSUCC_OTG_CALLS;            
          B_HIS_CC_MT_08(ZQ_I) := ZS_FFFE;                                      
        OD;                                                                     
      FI;                                                                       
    OD;                                                                         
  OD; /* DO WITH Z_T8_PTR */                                                    
OD;                                                                             
                                                                                
                                                                                
END Q_S0438_UPD_T8_INVALID;                                                     
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0439_UPD_N7_SCPR_INVALID                         */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/11                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 9 N7 COUNTERS VALIDITY FIELDS.              */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_MEAS_TYPE M_MEAS_TYPE                      */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0140_GET_CIC_FROM_LCEID                    */        
/*     CALLED FROM:                                                   */        
/*                      P_GDXBYX_UPD_CCI_STD_CTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0439_UPD_N7_SCPR_INVALID: PROC (ZF_MEAS_TYPE  M_MEAS_TYPE);                  
                                                                                
SYNMODE ZM_CHAN_FRIG =   BIN(5);                                                
                                                                                
DCL ZQ_REL_IDX   INT;                                                           
DCL ZQ_SL_IDX    INT;                                                           
DCL ZQ_SL_FND    INT;                                                           
DCL ZQ_CIC       M_CIC;                                                         
DCL ZQ_I         RANGE(E_MT_09_CTR_N1_2:E_MT_09_CTR_N3_7);                      
                                                                                
DO FOR ZQ_REL_IDX := 1 TO CM_FY32_PM_MAX_NBR_DTC_N7;                            
  DO WITH Z_R_N7_CONF_PTR -> ZM_R_N7_CONF(ZQ_REL_IDX);                          
    IF D_LCE_ID /= M_LCE_ID_NULL                                                
    THEN                                                                        
                                                                                
      /*CR20/223453*/
      ZQ_CIC := Q_S0140_GET_CIC_FROM_LCEID(D_LCE_ID,D_SLC);
      /*CR20/223453*/
      ZQ_SL_FND := 0;                                                           
                                                                                
      CASE ZF_MEAS_TYPE OF                                                      
        (E_MT_NUMBER7):                                                         
            DO FOR ZQ_SL_IDX := 1 TO ZS_MAX_SLC_N7 WHILE ZQ_SL_FND = 0;         
              DO WITH Z_T9_PTR->(ZQ_SL_IDX);                                    
                DO WITH B_HIS_LINK_MEAS;                                        
                  IF B_LINKID = ZQ_CIC OR                                       
                     B_LINKID = ZS_NULL_CIC                                     
                  THEN                                                          
                    ZQ_SL_FND := ZQ_SL_IDX;                                     
                    B_LINKID := ZQ_CIC;                                         
                    B_N11.B_LOW := ZS_FFFE;                                     
                    B_N11.B_HIGH := ZS_FFFF;                                    
                    DO FOR ZQ_I := E_MT_09_CTR_N1_2 TO E_MT_09_CTR_N3_7;        
                        B_FROM_N12_TO_N37(ZQ_I) := ZS_FFFE;                     
                    OD;                                                         
                    B_N310.B_LOW := ZS_FFFE;                                    
                    B_N310.B_HIGH := ZS_FFFF;                                   
                    B_N311 := ZS_FFFE;                                          
                  FI;                                                           
                OD;                                                             
                DO WITH B_HIS_LINK_SET;                                         
                  B_LINKSET_ID := 1;                                            
                  B_N42.B_LOW := ZS_FFFE;                                       
                  B_N42.B_HIGH := ZS_FFFF;                                      
                OD;                                                             
                /** ROUT_SET CTRS DELETED   */                                  
              OD;                                                               
            OD;                                                                 
                                                                                
        (E_MT_CELL_TRX_OVERVIEW_COUNTERS):                                      
            DO FOR ZQ_SL_IDX := 1 TO ZS_MAX_SLC_N7 WHILE ZQ_SL_FND = 0;         
              DO WITH Z_T110_5_PTR->(ZQ_SL_IDX);                                
                IF B_LINK_ID = ZQ_CIC OR                                        
                   B_LINK_ID = ZS_NULL_CIC                                      
                THEN                                                            
                  ZQ_SL_FND := ZQ_SL_IDX;                                       
                  B_LINK_ID  := ZQ_CIC;                                         
                  DO WITH B_CTRS_PT5_MT_110;                                    
                    B_MN1_1.B_LOW := ZS_FFFE;                                   
                    B_MN1_1.B_HIGH := ZS_FFFF;                                  
                 /* B_MN2_1 := ZS_FFFE;  CR 20/131170 */
                  OD;                                                           
                FI;                                                             
              OD;                                                               
            OD;                                                                 
                                                                                
        ELSE                                                                    
      ESAC;                                                                     
                                                                                
    FI;                                                                         
  OD;                                                                           
OD;                                                                             
                                                                                
END Q_S0439_UPD_N7_SCPR_INVALID;                                                
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0440_UPD_T18_INVALID                             */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/11                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       SETS THE TYPE 18 ASS COUNTERS TO INVALID (= H'FE)            */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      NONE                                          */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0250_UPD_DTC_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0440_UPD_T18_INVALID: PROC(ZF_LDC_LCE_ID M_LCE_ID,
                              ZF_BSSAP      BOOL);                                                
                                                                                
DCL ZQ_I     M_DTC_TRF_CNTRS_TYPE18;   
DCL ZQ_J     M_HIS_TYPE_18_CIC_CTRS;
DCL ZQ_K,
    ZQ_INDEX INT;                                         
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE ER263 */
DCL
    ZQ_INDEX_LONG LONG_INT;                                         
/* END: ADD-WIPRO-B10-MR1-CHANGE ER263 */

IF ZF_BSSAP
  THEN
  DO WITH Z_T18_PTR -> ;                                                          
/* START : AUPOIP FEATURE */
/*    DO FOR ZQ_I := E_C180A_NBR_CLR_REQ_RADIO_MESS_F TO                            
                   E_C182_NBR_N7_CLEAR_REQ_EST_PHAS;  */                            
      DO FOR ZQ_I := E_C180A_NBR_CLR_REQ_RADIO_MESS_F TO                            
                     E_C181P_NB_ASFAIL_CAL_ID_ALOC;  
      B_HIS_CC(ZQ_I).B_LOW  := ZS_FFFE;                                           
      B_HIS_CC(ZQ_I).B_HIGH := ZS_FFFF;                                           
    OD;                                                                           
      B_HIS_CC(E_C181O_NB_ASFAIL_REDLEVNTSUP).B_LOW  := 0;                                           
      B_HIS_CC(E_C181O_NB_ASFAIL_REDLEVNTSUP).B_HIGH := 0;  
/* END  : AUPOIP FEATURE */
  OD;
FI;   

/* CHENZY: UPDATE FOR MX BEGIN */
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */ 
/*IF ZF_BSSAP OR Q_S0130_DTC_CE_FUNC
               (ZF_LDC_LCE_ID, E_CE_FUNCT_N7_DTC)*/
IF ZF_BSSAP 
/* END: ADD-WIPRO-B10-MR1-CHANGE */ 
THEN
  DO FOR ZQ_K := 1 TO 31;
    ZQ_INDEX := ((INT(ZF_LDC_LCE_ID)-9)*31)+ZQ_K;
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE ER263 */
    ZQ_INDEX_LONG :=
              ZM_MAX_CIC_VALUE(ZQ_INDEX);
    /*DO WITH Z_T18_2_PTR -> (ZQ_INDEX);*/ 
    DO WITH Z_T18_2_PTR -> (ZQ_INDEX_LONG);  
 /* END: ADD-WIPRO-B10-MR1-CHANGE ER263 */
      DO FOR ZQ_J := E_MT_18_CTR_C750 TO E_MT_18_CTR_C751;
        B_CIC_CTRS.B_C750_TO_C751(ZQ_J).B_LOW  := ZS_FFFE;              
        B_CIC_CTRS.B_C750_TO_C751(ZQ_J).B_HIGH := ZS_FFFF;  
      OD;            
    OD;                                                                           
  OD;                                                                             
FI;
/* CHENZY: UPDATE FOR MX BEGIN END*/
                                                                                
END Q_S0440_UPD_T18_INVALID;                                                    
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0441_UPD_T19_TCU_INVALID                         */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/11                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 19 CELL COUNTERS VALIDITY FIELDS.           */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LCE_ID M_LCE_ID,                           */        
/*                      ZF_ACT_IDX INT,                               */        
/*                      ZF_ALL_CELLS BOOL                             */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0120_GET_CIS_FOR_TCU                       */        
/*                      Q_S0180_CELL_IN_SCOPE                         */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0441_UPD_T19_TCU_INVALID: PROC(ZF_LCE_ID     M_LCE_ID,                       
                                  ZF_ACT_IDX    INT,                            
                                  ZF_ALL_CELLS  BOOL);                          
                                                                                
DCL ZQ_CELL_LIST    ZM_CIS_PER_TCU,                                             
    ZQ_IDX          RANGE(1:CM_FY32_MAX_CELLS_PER_TCU),                         
    ZQ_I            M_HIS_TYPE_19_CTRS;                                         
                                                                                
ZQ_CELL_LIST := Q_S0120_GET_CIS_FOR_TCU(ZF_LCE_ID);                             
                                                                                
DO FOR ZQ_IDX := 1 TO CM_FY32_MAX_CELLS_PER_TCU WHILE                           
                               ZQ_CELL_LIST(ZQ_IDX) /= M_NULL_CELL_IDX;         
  IF ZF_ALL_CELLS OR                                                            
     Q_S0180_CELL_IN_SCOPE(ZF_ACT_IDX, ZQ_CELL_LIST(ZQ_IDX))                    
  THEN                                                                          
    DO WITH Z_T19_PTR -> (ZQ_CELL_LIST(ZQ_IDX));                                
      /* IT MAY BE THAT NO SAMPLES HAVE BEEN RECEIVED BUT STILL                 
       * THE CELLS SHOULD BE IDENTIFIED.                                        
       */                                                                       
      B_CELL_ID:=ZQ_CELL_LIST(ZQ_IDX);                                          
      DO FOR ZQ_I := E_MT_19_CTR_C190 TO E_MT_19_CTR_C193;                      
        B_HIS_CC_MT_19(ZQ_I).B_LOW  := ZS_FFFE;                                 
        B_HIS_CC_MT_19(ZQ_I).B_HIGH := ZS_FFFF;                                 
      OD;                                                                       
      B_HIS_CC_MT_19(E_MT_19_CTR_C195).B_LOW  := ZS_FFFE;                       
      B_HIS_CC_MT_19(E_MT_19_CTR_C195).B_HIGH := ZS_FFFF;                       
    OD;                                                                         
  FI;                                                                           
OD;                                                                             
                                                                                
END Q_S0441_UPD_T19_TCU_INVALID;                                                
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0442_UPD_TP_N7_INVALID                           */        
/*                                                                    */        
/*     PROGRAMMER: CHEN ZHANGYI  (ASB)                                */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 04/10/29                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 25 N7 COUNTERS VALIDITY FIELDS.             */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_MEAS_TYPE M_MEAS_TYPE                      */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0140_GET_CIC_FROM_LCEID                    */        
/*     CALLED FROM:                                                   */        
/*                      P_GDXBYX_UPD_CCI_STD_CTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0442_UPD_TP_N7_INVALID: PROC(ZF_MEAS_TYPE  M_MEAS_TYPE);
                                                                                
DCL ZQ_SL_IDX    INT;                                                           
DCL ZQ_SL_FND    INT;                                                           
DCL ZQ_CIC       M_CIC;                                                         
DCL ZQ_I         M_SCCP_CNTR_NAME;                                              
DCL ZQ_J         RANGE(E_MT_09_CTR_N1_8:E_MT_09_CTR_N3_5);                      
DCL ZQ_Z         RANGE(E_MT_110_CTR_MC350:E_MT_110_CTR_MC351);                  
DCL ZQ_LCE_ID    M_LCE_ID;
DCL ZQ_IDX       INT;

DO FOR ZQ_IDX := 1 TO CM_FY32_PM_MAX_NBR_DTC_N7;
  DO WITH Z_R_N7_CONF_PTR -> ZM_R_N7_CONF(ZQ_IDX);
    IF D_LCE_ID /= ZS_FFFF
    THEN
      /*CR20/223453*/
      ZQ_CIC := Q_S0140_GET_CIC_FROM_LCEID(D_LCE_ID,D_SLC);
      /*CR20/223453*/
      ZQ_SL_FND := 0;
      
      CASE ZF_MEAS_TYPE OF                                                            
        (E_MT_NUMBER7):                                                               
          DO FOR ZQ_SL_IDX := 1 TO ZS_MAX_SLC_N7 WHILE ZQ_SL_FND = 0;           
            DO WITH Z_T9_PTR->(ZQ_SL_IDX);                                      
              DO WITH B_HIS_LINK_MEAS;                                          
                IF B_LINKID = ZQ_CIC OR                                         
                   B_LINKID = ZS_NULL_CIC                                       
                THEN                                                            
                  ZQ_SL_FND := ZQ_SL_IDX;                                       
                  B_LINKID  := ZQ_CIC;                                          
                  DO FOR ZQ_J := E_MT_09_CTR_N1_8 TO                            
                                 E_MT_09_CTR_N3_5;                              
                    B_FROM_N18_TO_N35(ZQ_J).B_LOW  := ZS_FFFE;                  
                    B_FROM_N18_TO_N35(ZQ_J).B_HIGH := ZS_FFFF;                  
                  OD;                                                           
                FI;                                                             
              OD;                                                               
            OD;                                                                 
          OD;                                                                   
        (E_MT_SCCP):                                                                  
          DO FOR ZQ_SL_IDX := 1 TO ZS_MAX_SLC_N7 WHILE ZQ_SL_FND = 0;           
            DO WITH Z_T25_PTR->(ZQ_SL_IDX);                                     
              DO WITH B_DATA_MT_25;                                             
                IF B_LINK_ID = ZS_NULL_CIC                                      
                  /* THIS IS THE FIRST FREE ENTRY */ OR                         
                   B_LINK_ID = ZQ_CIC                                           
                THEN                                                            
                  ZQ_SL_FND := ZQ_SL_IDX;                                       
                  B_LINK_ID := ZQ_CIC;                                          
                  /*** C153A, C153B   ***/                                                        
                  DO FOR ZQ_I := E_C251_SCCPC_UDT_TX TO                         
                                 E_C258_SCCPC_CREF_RX;                          
                    B_HIS_CC(ZQ_I).B_LOW  := ZS_FFFE;                           
                    B_HIS_CC(ZQ_I).B_HIGH := ZS_FFFF;                           
                  OD;                                                           
                FI;                                                             
              OD;                                                               
            OD;                                                                 
          OD;                                                                   
                                                                                
        (E_MT_CELL_TRX_OVERVIEW_COUNTERS):                                            
          DO FOR ZQ_SL_IDX := 1 TO ZS_MAX_SLC_N7 WHILE ZQ_SL_FND = 0;           
            DO WITH Z_T110_5_PTR->(ZQ_SL_IDX);                                  
              IF B_LINK_ID = ZS_NULL_CIC                                        
                 /* THIS IS THE FIRST FREE ENTRY */ OR                          
                 B_LINK_ID = ZQ_CIC                                             
              THEN                                                              
                ZQ_SL_FND := ZQ_SL_IDX;                                         
                B_LINK_ID := ZQ_CIC;                                            
                DO WITH B_CTRS_PT5_MT_110;                                      
                  DO FOR ZQ_Z := E_MT_110_CTR_MC350 TO                          
                                 E_MT_110_CTR_MC351;                            
                    B_MC350_TO_MC351(ZQ_Z).B_LOW  := ZS_FFFE;                   
                    B_MC350_TO_MC351(ZQ_Z).B_HIGH := ZS_FFFF;                   
                  OD;                                                           
                OD;                                                             
              FI;                                                               
            OD;                                                                 
          OD;
          /*START: CR36/275131*/
          DO WITH Z_T110_6_PTR->;
             DO WITH B_CTRS_PT6_MT_110;
                B_MC940.B_LOW  := ZS_FFFE;
                B_MC940.B_HIGH := ZS_FFFF;
             OD;
          OD;                                                                   
          /*START: CR36/275131*/
        ELSE                                                                          
      ESAC;                                                                           
    FI;                                                                        
  OD;                                                                          
OD;                                                                            
END Q_S0442_UPD_TP_N7_INVALID;                                                 
/*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE */
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S4444_UPD_TC_MTP2_INVALID                         */        
/*                                                                    */        
/*     PROGRAMMER: MALA        WIPRO                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 04/10/29                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 7 MTP2 COUNTERS VALIDITY FIELDS.            */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_MEAS_TYPE M_MEAS_TYPE                      */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0140_GET_CIC_FROM_LCEID                    */        
/*     CALLED FROM:                                                   */        
/*                      P_GDXBYX_UPD_CCI_STD_CTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
/*START: CR36/274715*/
/*Code uncommented for CR36/274715*/
Q_S4444_UPD_TC_MTP2_INVALID: PROC(ZF_TC_ID M_TC_ID);
                                                                                
DCL ZQ_SL_IDX    INT;                                                           
DCL ZQ_CIC       M_CIC;                                                         
DCL ZQ_J         RANGE(E_MT_09_CTR_N1_8:E_MT_09_CTR_N3_5);                      
DCL ZQ_LCE_ID,ZQ_LCE_IDX   M_LCE_ID;
DCL ZQ_IDX       INT;
DCL ZQ_TC_IDX    M_TC_ID; 
DCL ZQ_TC_ID     M_TC_ID;
DCL ZQ_ATTP_NBR  M_SBLN;
DCL ZQ_CONN,ZQ_NO_FOUND,
    ZQ_MUX_FND,
    ZQ_LCE_FND  BOOL;
DCL ZQ_TRK_NBR M_SBLN;
DCL ZQ_MUX_IDX M_SBLN;
DCL ZQ_ATER_NBR  INT;
DCL ZQ_SL_FND    INT; 
DCL ZQ_SLC_N7    M_SLC_N7;

/*START: CR20_293868*/
DO WITH Z_R_BSS_PAR2_PTR -> ZM_R_BSS_PAR2;
  IF D_EN_AOIP = FALSE THEN
/*END: CR20_293868*/

ZQ_CONN := FALSE;
DO FOR ZQ_IDX := 1 TO M_MAX_TCID WHILE ZQ_CONN = FALSE;
 DO WITH Z_R_TC_MGT_PTR -> ZM_R_TC_MGT(ZQ_IDX);
    IF D_TC_ID = ZF_TC_ID
    THEN
      IF (D_TCOM_ST /= E_MS_NEQ)
      THEN
        ZQ_CONN := TRUE;
      FI;  
    FI;
  OD;
OD; 
IF ZQ_CONN 
THEN
  ZQ_NO_FOUND := TRUE; 
  DO FOR ZQ_SL_IDX := 1 TO ZS_MAX_SLC_N7 WHILE ZQ_NO_FOUND = TRUE;
    DO WITH Z_R_N7_CONF_PTR -> ZM_R_N7_CONF(ZQ_SL_IDX);
     IF D_N7_STATE /= E_MS_NEQ AND D_LCE_ID /= ZS_FFFF 
     THEN
     ZQ_NO_FOUND := FALSE;
     ZQ_LCE_ID:= D_LCE_ID;
     FI;
    OD;
  OD;
     ZQ_LCE_FND :=TRUE;
      DO FOR ZQ_TRK_NBR := 1 TO 304 WHILE ZQ_LCE_FND = TRUE;
        DO WITH Z_R_CONF_TRK_PTR -> ZM_R_CONF_TRK(ZQ_TRK_NBR); 
         IF D_LCE_ID = ZQ_LCE_ID
         THEN
           ZQ_LCE_FND := FALSE;
           ZQ_LCE_IDX := D_LCE_ID;
           ZQ_ATTP_NBR := D_ATTP_NBR;
         FI;
        OD;
      OD;
 ZQ_MUX_FND := TRUE;
 DO FOR ZQ_MUX_IDX := 1 TO 76 WHILE ZQ_MUX_FND = TRUE;
   DO WITH Z_R_ATER_INF_PTR-> ZM_R_ATER_INF(ZQ_MUX_IDX);
     IF D_ATTP_NBR = ZQ_ATTP_NBR
     THEN
       ZQ_MUX_FND := FALSE;
       ZQ_ATER_NBR := ZQ_MUX_IDX;
     FI;
   OD; 
 OD;
 ZQ_MUX_FND := TRUE;
 DO FOR ZQ_MUX_IDX := 1 TO 48 WHILE ZQ_MUX_FND;
   DO WITH Z_R_TRAU_CP_PTR -> ZM_R_TRAU_CP(ZQ_MUX_IDX);
     IF D_AMUX_ID = ZQ_ATER_NBR AND D_TC_ID = ZF_TC_ID
     THEN
       ZQ_MUX_FND := FALSE;
       ZQ_SLC_N7 := Q_S0141_GET_SLC_FROM_LCEID(ZQ_LCE_IDX);
       ZQ_CIC := Q_S0140_GET_CIC_FROM_LCEID(ZQ_LCE_IDX,ZQ_SLC_N7);
     FI;
   OD; 
 OD;
 ZQ_SL_FND := 0;
   DO FOR ZQ_SL_IDX := 1 TO ZS_MAX_SLC_N7 WHILE ZQ_SL_FND = 0;           
     DO WITH Z_T9_PTR->(ZQ_SL_IDX);                                      
       DO WITH B_HIS_LINK_MEAS;                                          
         IF B_LINKID = ZQ_CIC OR                                         
          B_LINKID = ZS_NULL_CIC                                       
         THEN                                                            
          ZQ_SL_FND := ZQ_SL_IDX;                                       
          B_LINKID  := ZQ_CIC;                                          
          DO FOR ZQ_J := E_MT_09_CTR_N1_8 TO                            
                         E_MT_09_CTR_N3_5;                              
           B_FROM_N18_TO_N35(ZQ_J).B_LOW  := ZS_FFFE;                  
           B_FROM_N18_TO_N35(ZQ_J).B_HIGH := ZS_FFFF;                  
          OD;                                                           
         FI;                                                             
       OD;                                                               
     OD;                                                                 
   OD; 
FI;

/*START: CR20_293868*/
 ELSE
    Q_S4444_UPD_TC_MTP2_ZEROS();
 FI;
OD;
/*END: CR20_293868*/


END Q_S4444_UPD_TC_MTP2_INVALID;
/*END: CR36/274715*/
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0443_UPD_T26_INVALID                             */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/11                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       SETS THE TYPE 26 SERVING CELL COUNTERS TO INVALID (=H'FE)    */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_LCE_ID M_LCE_ID,                       */        
/*                      ZF_ACT_IDX INT                                */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0120_GET_CIS_FOR_TCU                       */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0285_UPD_T26_CNTRS                         */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0443_UPD_T26_INVALID: PROC(ZF_LDC_LCE_ID M_LCE_ID,
                              ZF_ACT_IDX INT);

DCL ZQ_IDX            RANGE(1:M_PM_MAX_CELLS_FOR_A_MEAS_JOB),
    ZQ_TCU_CELL_LIST  ZM_CIS_PER_TCU,
    ZQ_NOT_FOUND      BOOL;
    
DCL ZQ_T26_CCI_PTR    PTR;
DCL ZQ_BUF            INT;
DCL ZQ_I              INT;
DCL ZQ_J              INT;

ZQ_TCU_CELL_LIST := Q_S0120_GET_CIS_FOR_TCU(ZF_LDC_LCE_ID);
DO FOR ZQ_IDX := 1 TO CM_FY32_MAX_CELLS_PER_TCU WHILE                           
                          ZQ_TCU_CELL_LIST(ZQ_IDX) /= M_NULL_CELL_IDX;          
  ZQ_NOT_FOUND := TRUE;
  ZQ_T26_CCI_PTR := PTR(Z_T26_PTR);
  DO FOR ZQ_BUF := 0 TO 1 WHILE ZQ_NOT_FOUND;
    DO FOR ZQ_I := 1 TO 20 WHILE ZQ_NOT_FOUND;
      DO WITH ZQ_T26_CCI_PTR -> M_HIS_TYPE_26;
        IF B_SERV_CELL = ZQ_TCU_CELL_LIST(ZQ_IDX)
           OR B_SERV_CELL = M_NULL_CELL_IDX
        THEN
          ZQ_NOT_FOUND := FALSE;
          Q_S0605_UPD_T26_INVALID_CNTRS(ZQ_T26_CCI_PTR,
                                        ZQ_TCU_CELL_LIST(ZQ_IDX));
        FI;
      OD;
      DO FOR ZQ_J := 0 TO 64;
        ZQ_T26_CCI_PTR := -> ZQ_T26_CCI_PTR 
                           -> ZM_BYTE_MASK(SIZE(M_HIS_TYPE_26)+1);
      OD;
    OD;
    ZQ_T26_CCI_PTR := PTR(Z_T26_2_PTR);
  OD;/* ZQ_BUF */
OD;

END Q_S0443_UPD_T26_INVALID;
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0444_UPD_T27_INVALID                             */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/11                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       SETS THE TYPE 27 TARGET CELL COUNTERS TO INVALID (= H'FE)    */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_VALIDITY M_PM_DATA_VALIDITY,               */        
/*                      ZF_ACT_IDX INT                                */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0170_GET_CELL_SCOPE                        */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0250_UPD_DTC_STD_CNTRS                     */        
/*                      Q_S0490_UPD_T27_STD_DTC                       */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0444_UPD_T27_INVALID: PROC(ZF_VALIDITY M_PM_DATA_VALIDITY,                   
                              ZF_ACT_IDX  INT);                                 
                                                                                
DCL ZQ_CELL_LIST  M_PM_DET_CELL_LIST;                                           
DCL ZQ_CELL_IDX   M_CELL_IDX;                                                   
DCL ZQ_CELL_FOUND BOOL;                                                         
/*START: CRI 649460 */
/*DCL ZQ_CELL_INX   RANGE(1:M_PM_MAX_SERVING_CELLS);  */
DCL ZQ_CELL_INX   RANGE(1:ZM_PM_MAX_SERVING_CELLS);  
/*END: CRI 649460 */
                                                                                
ZQ_CELL_IDX := ZS_FFFF;                                                         
Q_S0170_GET_CELL_SCOPE(ZF_ACT_IDX, ZQ_CELL_LIST);                               
ZQ_CELL_IDX := ZQ_CELL_LIST(1);                                                 
                                                                                
    /* THE FIRST BUFFER HAS THE TARGET CELL INFORMATION */                      
    /* THE VALIDITY IS GLOBAL SO UPDATE */                                      
                                                                                
  Z_T27_PTR->(0).B_TARG_CELL := ZQ_CELL_IDX;                                    
  IF ZF_VALIDITY = E_DATA_INVALID                                               
  THEN                                                                          
    /* TYPE 27 HAS TO BE HANDLED AS TYPE 180 */                                 
    Z_T27_PTR->(0).B_INVALID   := TRUE;
    ZQ_CELL_FOUND := TRUE;                                                      
    DO FOR ZQ_CELL_INX := 1 TO M_PM_MAX_TARGET_CELLS WHILE                      
                                       ZQ_CELL_FOUND;                           
      DO WITH Z_T27_PTR->(ZQ_CELL_INX);                                         
        /* CHENZY B9 BEGIN */
        /*
        IF B_ADJ_CELL.ZB_LAC /= ZS_FFFF AND B_ADJ_CELL.ZB_CI /= ZS_FFFF                   
        */
        IF B_ADJ_CELL.B_CELL_ID_CGI /= ZS_NULL_CGI
        /* CHENZY B9 END */
        THEN                                                                    
          DO WITH B_CTRS;                                                       
            B_C730_INC_HO_ATPT         := ZS_FFFE;                              
            B_C731_INC_HO_SUCC         := ZS_FFFE;                              
            B_C733_UNSUCC_HO_SEIZ_FAIL := ZS_FFFE;   
            B_C734_INC_EMERGENCY_ATPT.B_LOW   := ZS_FFFE;   
            B_C734_INC_EMERGENCY_ATPT.B_HIGH  := ZS_FFFF;
            B_C735_INC_BETTERCELL_ATPT.B_LOW  := ZS_FFFE;   
            B_C735_INC_BETTERCELL_ATPT.B_HIGH := ZS_FFFF;
            B_C737_INC_TRAFFIC_ATPT.B_LOW     := ZS_FFFE;   
            B_C737_INC_TRAFFIC_ATPT.B_HIGH    := ZS_FFFF;
            B_C738_INC_FORCED_DR_ATPT.B_LOW   := ZS_FFFE;   
            B_C738_INC_FORCED_DR_ATPT.B_HIGH  := ZS_FFFF;
            B_C753_INC_HO_OTHER_ATPT.B_LOW    := ZS_FFFE;   
            B_C753_INC_HO_OTHER_ATPT.B_HIGH   := ZS_FFFF;
          OD;                                                                   
        ELSE                                                                    
          ZQ_CELL_FOUND := FALSE;                                               
          IF ZQ_CELL_INX = 1                                                    
          THEN                                                                  
            /* CHENZY B9 BEGIN */
            /*
            B_ADJ_CELL.ZB_LAC := ZS_DUMMY;                                      
            B_ADJ_CELL.ZB_CI := ZS_DUMMY;                                       
            */
            B_ADJ_CELL.B_CELL_ID_CGI := ZS_DUMMY_CGI;
            /* CHENZY B9 END */
          FI;                                                                   
        FI;                                                                     
      OD;                                                                       
                                                                                
    OD;                                                                         
                                                                                
  FI;                                                                           
                                                                                
END Q_S0444_UPD_T27_INVALID;                                                    
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0445_UPD_T25_DTC_INVALID                         */        
/*                                                                    */        
/*     PROGRAMMER: S.DONIZETTI (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 99/03/23                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 25  DTC COUNTERS VALIDITY FIELDS.           */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      NONE                                          */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0140_GET_CIC_FROM_LCEID                    */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0250_UPD_DTC_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0445_UPD_T25_DTC_INVALID: PROC();                                            
                                                                                
DCL ZQ_I         M_SCCP_CNTR_NAME;                                              
DCL ZQ_SL_FND    INT;                                                           
DCL ZQ_SL_IDX    RANGE (1:16);                                                  
DCL ZQ_CIC       M_CIC;                                                         
DCL ZQ_IDX       INT;
DO FOR ZQ_IDX := 1 TO CM_FY32_PM_MAX_NBR_DTC_N7;                                
  DO WITH Z_R_N7_CONF_PTR -> ZM_R_N7_CONF(ZQ_IDX);                              
   IF D_LCE_ID /= M_LCE_ID_NULL    
     THEN                                                                        
      /*CR20/223453*/
      ZQ_CIC := Q_S0140_GET_CIC_FROM_LCEID(D_LCE_ID,D_SLC);
      /*CR20/223453*/
      ZQ_SL_FND := 0;                                                           
      DO FOR ZQ_SL_IDX := 1 TO ZS_MAX_SLC_N7 WHILE ZQ_SL_FND = 0;               
        DO WITH Z_T25_PTR->(ZQ_SL_IDX);                                         
          DO WITH B_DATA_MT_25;                                                 
            IF B_LINK_ID = ZS_NULL_CIC                                          
               /* THIS IS THE FIRST FREE ENTRY */ OR                            
               B_LINK_ID = ZQ_CIC                                               
            THEN                                                                
              ZQ_SL_FND := ZQ_SL_IDX;                                           
              B_LINK_ID := ZQ_CIC;                                              
                                                                                
              DO FOR ZQ_I := E_C153A_N7_CON_EST_FAIL_NSS TO                     
                             E_C153B_N7_CON_EST_FAIL_BSS;                       
                B_HIS_CC(ZQ_I).B_LOW  := ZS_FFFE;                               
                B_HIS_CC(ZQ_I).B_HIGH := ZS_FFFF;                               
              OD; /* DO FOR ZQ_I */                                             
                                                                                
            FI;                                                                 
          OD; /* DO WITH B_DATA_MT_25 */                                        
        OD; /* DO WITH Z_T25_PTR */                                             
      OD; /* DO FOR */                                                          
                                                                                
    FI;                                                                         
  OD;                                                                           
OD;                                                                             
END Q_S0445_UPD_T25_DTC_INVALID;
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0447_UPD_T110_DTC_INVALID                        */
/*                                                                    */
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 97/11/11                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       UPDATES THE TYPE 110 DTC COUNTERS VALIDITY FIELDS.           */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_CELL_DEP BOOL                              */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                                                                    */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0575_UPD_T110_1_INVALID                    */
/*                      Q_S0449_UPD_T110_2_INVALID                    */
/*     CALLED FROM:                                                   */
/*                      Q_S0250_UPD_DTC_STD_CNTRS                     */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
/*3BKA36FBR242748*/
/*Q_S0447_UPD_T110_DTC_INVALID: PROC(ZF_CELL_DEP    BOOL);*/
Q_S0447_UPD_T110_DTC_INVALID: PROC(ZF_CELL_DEP    BOOL,
                                   ZF_BSSAP       BOOL);
/*3BKA36FBR242748*/
/*DCL ZQ_DUMMY       BOOL; DEL B9 PKG2 CHENZY*/
DCL ZQ_CELL_IDX    INT;                                                         
                                                                    
IF ZF_CELL_DEP                                                                  
THEN                                                                            
  DO FOR ZQ_CELL_IDX := 1 TO CM_FY32_MAX_CELLS_PER_BSC;                         
    DO WITH Z_R_BTS_TEL_PTR -> ZM_R_BTS_TEL(ZQ_CELL_IDX);                     
      IF D_BTS_TEL /= E_MS_NEQ                                                  
      THEN                                                                      
                                                                 
        Q_S0575_UPD_T110_1_INVALID(ZQ_CELL_IDX, M_FS_DTC_TRF_LDC,               
                                   FALSE/*ZQ_DUMMY*/);                                   
                                                               
        Q_S0449_UPD_T110_2_INVALID(ZQ_CELL_IDX, 
                                   M_FS_DTC_TRF_LDC,FALSE);              

        Q_S0603_UPD_T110_3_INVALID(ZQ_CELL_IDX,
                                   M_FS_DTC_TRF_LDC,FALSE);
    
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */ 
        Q_S0287_UPD_T110_7_INVALID(ZQ_CELL_IDX,M_FS_DTC_TRF_LDC,FALSE); 
 /* END : ADD-WIPRO-B10-MR1-CHANGE */

 /* BEGIN CR36/302024 RFI4448 */        
        Q_S0900_UPD_T110_11_INVALID(ZQ_CELL_IDX,
                                   M_FS_DTC_TRF_LDC,
                                   FALSE); 
 /* END CR36/302024 RFI4448 */
 
    /*begin CR1238146 A-GPS*/
        Q_S0906_UPD_T110_18_INVALID(ZQ_CELL_IDX,
                                   M_FS_DTC_TRF_LDC,FALSE);
   /*end CR1238146 A-GPS*/


      FI;                                                                       
    OD;                                                                         
  OD;                                                                           
ELSE                                                                            
  DO WITH Z_T110_6_PTR->;                                                    
    DO WITH B_CTRS_PT6_MT_110;                                                  
      B_MC19.B_LOW  := ZS_FFFE;                                                 
      B_MC19.B_HIGH := ZS_FFFF;                                                 
      B_MC35.B_LOW  := ZS_FFFE;                                                 
      B_MC35.B_HIGH := ZS_FFFF;                                                 
      B_MC36.B_LOW  := ZS_FFFE;                                                 
      B_MC36.B_HIGH := ZS_FFFF;
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
      /*3BKA36FBR242748*/
      IF ZF_BSSAP = TRUE THEN
    /*START: CR36/275131*/ 
     /*B_MC940.B_LOW  := ZS_FFFE;
       B_MC940.B_HIGH := ZS_FFFF;*/
     /*END: CR36/275131*/ 
      /*B_MC941.B_LOW  := ZS_FFFE;
      B_MC941.B_HIGH := ZS_FFFF;
      B_MC942.B_LOW  := ZS_FFFE;
      B_MC942.B_HIGH := ZS_FFFF;
      B_MC943.B_LOW  := ZS_FFFE;
      B_MC943.B_HIGH := ZS_FFFF;
      B_MC944.B_LOW  := ZS_FFFE;
      B_MC944.B_HIGH := ZS_FFFF;
      B_MC945.B_LOW  := ZS_FFFE;
      B_MC945.B_HIGH := ZS_FFFF;*/

       B_MC182.B_LOW  := ZS_FFFE;
       B_MC182.B_HIGH := ZS_FFFF;
      /*BEGIN: CR20_299359- Lb Interface*/
      /*Counters are set to invalid only if Lb is ENABLED.*/
      DO WITH Z_R_BSS_PAR2_PTR -> ZM_R_BSS_PAR2 ;
	IF D_EN_LB = TRUE OR D_EN_LBNMR = TRUE
	THEN
		B_MC942.B_LOW 	:= ZS_FFFE;
		B_MC942.B_HIGH 	:= ZS_FFFF;
		B_MC943.B_LOW 	:= ZS_FFFE;
		B_MC943.B_HIGH 	:= ZS_FFFF;
	ELSE
		B_MC942.B_LOW 	:= 0;
		B_MC942.B_HIGH 	:= 0;
		B_MC943.B_LOW 	:= 0;
		B_MC943.B_HIGH 	:= 0;
	FI;
     OD;
     /*END : CR20_299359*/

      FI;
      /*3BKA36FBR242748*/
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
    OD;
  OD;                                                                           
  
FI;                                                                             
END Q_S0447_UPD_T110_DTC_INVALID;   
/*ADDED FOR GSL COUNTERS MEMO*/
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0448_UPD_T110_M3UA_DTC_INVALID                   */
/*                                                                    */
/*     PROGRAMMER:                                                    */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE:                                                 */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                                                                    */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                                                                    */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                                                                    */
/*                                                                    */
/*     CALLED FROM:                                                   */
/*                                                                    */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0448_UPD_T110_M3UA_DTC_INVALID: PROC();
DCL ZQ_NBR_MSC INT;
DCL ZQ_I INT;
DCL ZQ_MSC_IDX INT;
DCL ZQ_TMP_CTR INT;
ZQ_TMP_CTR := ZS_FFFF;

DO FOR ZQ_I := 1 TO M_MAX_MSC;
   DO WITH Z_R_MSC_MGT_PTR -> ZM_R_MSC_MGT(ZQ_I);
   /*ZQ_MSC_IDX := ZQ_I;*/
   ZQ_MSC_IDX := D_MSC_SBL;
/*FR250253*/
/* IF D_MSC_MST = E_MS_IT OR D_MSC_MST = E_MS_FIT THEN*/ 
   IF (D_MSC_MST /= E_MS_NEQ) THEN
/*FR250253*/
      DO WITH Z_T110_8_PTR ->(ZQ_I);
        B_MSC_IDX := ZQ_MSC_IDX;
        DO WITH B_CTRS_PT8_MT_110;
           Q_S0080_ADD_INT_TO_DPVAL(
           ZQ_TMP_CTR,
           B_MC1109_TO_MC1207(E_MT_110_CTR_MC1113A));
           
           Q_S0080_ADD_INT_TO_DPVAL(
           ZQ_TMP_CTR,
           B_MC1109_TO_MC1207(E_MT_110_CTR_MC1113B));
        OD;
     OD;
   FI;  
  OD;
OD;                                  
END Q_S0448_UPD_T110_M3UA_DTC_INVALID;
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0449_UPD_T110_M3UA_DTC                           */
/*                                                                    */
/*     PROGRAMMER:                                                    */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE:                                                 */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                                                                    */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                                                                    */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                                                                    */
/*                                                                    */
/*     CALLED FROM:                                                   */
/*                                                                    */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0449_UPD_T110_M3UA_DTC: PROC(ZF_LDC_BUF_PTR PTR);
DCL ZQ_NBR_MSC INT;
DCL ZQ_I INT;
DCL ZQ_MSC_IDX INT;
/*ADDED*/
DCL ZQ_J INT;
/*ADDED*/
ZQ_NBR_MSC := ZF_LDC_BUF_PTR -> 
                         M_DTC_STD_BSS_CTRS.B_DTC_ASIG_SCCP_CNTRS
                         .B_NBR_MSC;
IF ZQ_NBR_MSC > CM_FY32_MAX_MSC_PER_BSC OR
     ZQ_NBR_MSC < 0
THEN 
    /* OUT OF RANGE */
  ZQ_NBR_MSC := 0; 
  Q_S0010_CCDC_ERROR(M_ERC6_USER_REC,
                     M_ERT0019_INC_MESS_DATA, 49, 0194);
FI;

DO WITH ZF_LDC_BUF_PTR -> M_DTC_STD_BSS_CTRS.B_DTC_ASIG_SCCP_CNTRS;
 DO FOR ZQ_I := 1 TO ZQ_NBR_MSC;
   ZQ_MSC_IDX := B_DTC_ASIG_SCCP_BLOCK(ZQ_I).B_MSC_IDX;
   IF ZQ_MSC_IDX > CM_FY32_MAX_MSC_PER_BSC OR
     ZQ_MSC_IDX < 0 
   THEN
    /*DO NOTHING*/
   ELSE  
   /*ADDED*/
   DO WITH B_DTC_ASIG_SCCP_BLOCK(ZQ_I);
   MSC_SCCP_LOOP:
    DO FOR ZQ_J := 1 TO M_MAX_MSC;
   /*ADDED*/
    DO WITH Z_R_MSC_MGT_PTR -> ZM_R_MSC_MGT(ZQ_J);
/*FR250253*/
/*   IF (D_MSC_MST = E_MS_IT OR D_MSC_MST = E_MS_FIT)*/ 
     IF (D_MSC_MST /= E_MS_NEQ)
/*FR250253*/
     /*ADDED*/
      AND (D_MSC_SBL = ZQ_MSC_IDX)
     /*ADDED*/
     THEN
      /*ADDED*/
      /*DO WITH Z_T110_8_PTR ->(ZQ_MSC_IDX);*/
      DO WITH Z_T110_8_PTR ->(ZQ_J);
      /*ADDED*/
        B_MSC_IDX := ZQ_MSC_IDX;
        DO WITH B_CTRS_PT8_MT_110;
           Q_S0080_ADD_INT_TO_DPVAL(
           B_DTC_ASIG_SCCP_BLOCK(ZQ_I).B_DTC_ASIG_TYPE110_ARRAY
          (E_MC1113A_N7_CON_EST_FAIL_DUE_NS),
           B_MC1109_TO_MC1207(E_MT_110_CTR_MC1113A));
           
           Q_S0080_ADD_INT_TO_DPVAL(
           B_DTC_ASIG_SCCP_BLOCK(ZQ_I).B_DTC_ASIG_TYPE110_ARRAY
          (E_MC1113B_N7_CON_EST_FAIL_DUE_BS),
           B_MC1109_TO_MC1207(E_MT_110_CTR_MC1113B));
        OD;
      OD;
     /*ADDED*/ 
     EXIT MSC_SCCP_LOOP; 
     /*ADDED*/ 
      FI;
    OD; 
   /*ADDED*/  
    OD;
   OD;
   /*ADDED*/ 
   FI; 
 OD;  
OD;                                
END Q_S0449_UPD_T110_M3UA_DTC;
/*ADDED FOR GSL COUNTERS MEMO*/
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0448_UPD_T110_TCU_INVALID                        */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/11                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 110 TCU COUNTERS VALIDITY FIELDS.           */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LCE_ID M_LCE_ID                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0120_GET_CIS_FOR_TCU                       */        
/*                      Q_S0575_UPD_T110_1_INVALID                    */        
/*                      Q_S0449_UPD_T110_2_INVALID                    */        
/*                      Q_S0287_UPD_T110_7_INVALID                    */    
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0448_UPD_T110_TCU_INVALID: PROC(ZF_LCE_ID M_LCE_ID);                         
                                                                                
DCL ZQ_TCU_CELL_LIST ZM_CIS_PER_TCU,                                            
    ZQ_IDX           RANGE(1:CM_FY32_MAX_CELLS_PER_TCU),                        
    ZQ_I             INT;                                                       
DCL ZQ_PTR           PTR;                                                       
/*DCL ZQ_DUMMY         BOOL; DEL B9 PKG2 CHENZY*/
DCL ZQ_TRX_IDX       M_TRX_IDX;                                                 
                                                                                
ZQ_TCU_CELL_LIST  := Q_S0120_GET_CIS_FOR_TCU(ZF_LCE_ID);                        
DO FOR ZQ_IDX := 1 TO CM_FY32_MAX_CELLS_PER_TCU WHILE                           
                         ZQ_TCU_CELL_LIST(ZQ_IDX) /= M_NULL_CELL_IDX;           
                                                                                
  /* IT IS KNOW THAT EVERY CELL IS IN THE SCOPE OF THE TYPE 110 JOB */          
  Q_S0575_UPD_T110_1_INVALID(ZQ_TCU_CELL_LIST(ZQ_IDX),                          
                             M_FS_TCU_TRF_LDC,                                  
                             FALSE/*ZQ_DUMMY*/);                                         
                                                                                
  Q_S0449_UPD_T110_2_INVALID(ZQ_TCU_CELL_LIST(ZQ_IDX),                          
                             M_FS_TCU_TRF_LDC,
                             FALSE);                                 
                             
  Q_S0603_UPD_T110_3_INVALID(ZQ_TCU_CELL_LIST(ZQ_IDX),
                             M_FS_TCU_TRF_LDC,
                             FALSE);
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
  Q_S0287_UPD_T110_7_INVALID(ZQ_TCU_CELL_LIST(ZQ_IDX),
                             M_FS_TCU_TRF_LDC,
                             FALSE);
/* END : ADD-WIPRO-B10-MR1-CHANGE */

/*BEGIN: CR20/313054 */
  Q_S0904_UPD_T110_13_INVALID(ZQ_TCU_CELL_LIST(ZQ_IDX),
                              M_FS_TCU_TRF_LDC,
                              FALSE);
/*END: CR20/313054 */

/* START CR36/302024 RFI4448 */
  Q_S0900_UPD_T110_11_INVALID(ZQ_TCU_CELL_LIST(ZQ_IDX),
                             M_FS_TCU_TRF_LDC,
                             FALSE);
/* END CR36/302024 RFI4448 */

  /* FIND THE TRX THAT BELONG TO THIS CELL - FOR EACH TRX                       
   * INCREMENT BY ONE AS THIS MEANS THERE IS ONE INCREMENT PER                  
   * TRX PER LDCP (AND NOT ONE PER TRX).                                        
   */                                                                           
  DO FOR ZQ_TRX_IDX := 1 TO CM_FY32_MAX_TRX_PER_BSC;                            
    DO WITH Z_R_TRX_MGT_PTR -> ZM_R_TRX_MGT(ZQ_TRX_IDX);                        
      IF D_CELL_IDX = ZQ_TCU_CELL_LIST(ZQ_IDX) AND
        D_RSL_IDX /= M_NULL_RSL_IDX
        THEN                                                                      
        DO WITH Z_R_RSL_LNK_PTR -> ZM_R_RSL_LNK(D_RSL_IDX);                     
          IF D_TCU_ID = ZF_LCE_ID                                               
            THEN
            /* START: MC Counters*/ 
            IF (ZQ_TRX_IDX <= CM_FY32_MAX_TRX_PER_BSC/2)
            THEN
            /* END: MC Counters*/                                                                
            DO WITH Z_T110_4_PTR ->
                      (ZM_TRX_INDEX_VALUE(ZQ_TRX_IDX));                               
              B_TRX_IDX  := ZQ_TRX_IDX; 
              ZQ_PTR := ->B_CTRS_PT4_MT_110;    
              DO FOR ZQ_I := 1 TO 13;
                CASE ZQ_I OF 
                  (2, 8:12):
                   ZQ_PTR->ZM_INT_MASK(ZQ_I) := ZS_FFFE; 
              
                  ELSE
                ESAC;
              OD;
            OD;
          
            DO FOR ZQ_I := 14 TO 46;                                               
              IF ZQ_I REM 3 = 1 /* PBLO: ERR.845: WAS 0 */
                THEN                                                                
                ZQ_PTR->ZM_INT_MASK(ZQ_I) := ZS_FFFE;                             
              ELSE                                                                
                ZQ_PTR->ZM_INT_MASK(ZQ_I) := ZS_FFFF;                             
              FI;                                                                 
            OD;   
   /* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */          
           DO FOR ZQ_I := 47 TO 60;
            IF ZQ_I REM 2 = 0
            THEN             
              ZQ_PTR->ZM_INT_MASK(ZQ_I) := ZS_FFFE;
            ELSE                                   
              ZQ_PTR->ZM_INT_MASK(ZQ_I) := ZS_FFFF;
            FI;
          OD;  
   /* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
   /*START: MC Counters*/
           ELSE
           DO WITH Z_T110_4_2_PTR ->
                      (ZM_TRX_INDEX_VALUE(ZQ_TRX_IDX));                               
              B_TRX_IDX  := ZQ_TRX_IDX; 
              ZQ_PTR := ->B_CTRS_PT4_MT_110;    
              DO FOR ZQ_I := 1 TO 13;
                CASE ZQ_I OF 
                  (2, 8:12):
                   ZQ_PTR->ZM_INT_MASK(ZQ_I) := ZS_FFFE; 
              
                  ELSE
                ESAC;
              OD;
            OD;
          
            DO FOR ZQ_I := 14 TO 46;                                               
              IF ZQ_I REM 3 = 1 /* PBLO: ERR.845: WAS 0 */
                THEN                                                                
                ZQ_PTR->ZM_INT_MASK(ZQ_I) := ZS_FFFE;                             
              ELSE                                                                
                ZQ_PTR->ZM_INT_MASK(ZQ_I) := ZS_FFFF;                             
              FI;                                                                 
            OD;   
   /* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */          
           DO FOR ZQ_I := 47 TO 60;
            IF ZQ_I REM 2 = 0
            THEN             
              ZQ_PTR->ZM_INT_MASK(ZQ_I) := ZS_FFFE;
            ELSE                                   
              ZQ_PTR->ZM_INT_MASK(ZQ_I) := ZS_FFFF;
            FI;
          OD;  
   /* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
           FI;
   /*END: MC Counters*/
         
          FI;                                                                   
        OD;                                                                     
      FI;                                                                       
    OD;                                                                         
  OD;                                                                           
                                                                                
OD;                                                                             
                                                                                
END Q_S0448_UPD_T110_TCU_INVALID;   

/* BEGIN : B12 VAMOS */
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0448_UPD_T37_TCU_INVALID                         */        
/*                                                                    */        
/*     PROGRAMMER: AABHUSHAN JYOTI KANSAKAR                           */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 2011/01/03                                      */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 37 TCU COUNTERS VALIDITY FIELDS.            */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LCE_ID M_LCE_ID                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0120_GET_CIS_FOR_TCU                       */        
/*                      Q_S0575_UPD_T37_1_INVALID                     */        
/*                      Q_S0449_UPD_T37_2_INVALID                     */            
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0448_UPD_T37_TCU_INVALID: PROC(ZF_LCE_ID M_LCE_ID);                         
                                                                                
DCL ZQ_TCU_CELL_LIST ZM_CIS_PER_TCU,                                            
    ZQ_IDX           RANGE(1:CM_FY32_MAX_CELLS_PER_TCU),                        
    ZQ_I             INT;                                                       
DCL ZQ_PTR           PTR;                                                       
DCL ZQ_TRX_IDX       M_TRX_IDX;                                                 
                                                                                
ZQ_TCU_CELL_LIST  := Q_S0120_GET_CIS_FOR_TCU(ZF_LCE_ID);                        
DO FOR ZQ_IDX := 1 TO CM_FY32_MAX_CELLS_PER_TCU WHILE                           
                         ZQ_TCU_CELL_LIST(ZQ_IDX) /= M_NULL_CELL_IDX;           
                                                                                
  /* IT IS KNOWN THAT EVERY CELL IS IN THE SCOPE OF THE TYPE 37 JOB
       tHIS NEEDS TO CHANGE*/          
  Q_S0610_UPD_T37_0_INVALID(ZQ_TCU_CELL_LIST(ZQ_IDX),                          
                             M_FS_TCU_TRF_LDC);                                         
                                                                                
  Q_S0620_UPD_T37_1_INVALID(ZQ_TCU_CELL_LIST(ZQ_IDX),                          
                             M_FS_TCU_TRF_LDC);                        
                                                                                
OD;                                                                             
                                                                                
END Q_S0448_UPD_T37_TCU_INVALID; 

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0448_UPD_T37_DTC_INVALID                         */        
/*                                                                    */        
/*     PROGRAMMER: AABHUSHAN JYOTI KANSAKAR                           */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 2011/01/03                                      */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 37 TCU COUNTERS VALIDITY FIELDS.            */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LCE_ID M_LCE_ID                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0120_GET_CIS_FOR_TCU                       */        
/*                      Q_S0575_UPD_T37_1_INVALID                     */        
/*                      Q_S0449_UPD_T37_2_INVALID                     */            
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
/*Q_S0448_UPD_T37_DTC_INVALID: PROC(ZF_LCE_ID M_LCE_ID);*/ 
Q_S0448_UPD_T37_DTC_INVALID : PROC(ZF_CELL_DEP    BOOL
                                  /* ZF_BSSAP       BOOL*/);
/*3BKA36FBR242748*/
/*DCL ZQ_DUMMY       BOOL; DEL B9 PKG2 CHENZY*/
DCL ZQ_CELL_IDX    INT;                                                         
                                                                    
IF ZF_CELL_DEP                                                                  
THEN                                                                            
  DO FOR ZQ_CELL_IDX := 1 TO CM_FY32_MAX_CELLS_PER_BSC;                         
    DO WITH Z_R_BTS_TEL_PTR -> ZM_R_BTS_TEL(ZQ_CELL_IDX);                     
      IF D_BTS_TEL /= E_MS_NEQ                                                  
      THEN          
		Q_S0610_UPD_T37_0_INVALID(ZQ_CELL_IDX,                          
                             M_FS_DTC_TRF_LDC); 
	  FI;							 
	OD;                                                                               
  OD;                                                                             
FI;                                                                              
END Q_S0448_UPD_T37_DTC_INVALID;  

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0448_UPD_T37_TCH_INVALID                         */        
/*                                                                    */        
/*     PROGRAMMER: AABHUSHAN JYOTI KANSAKAR                           */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 2011/01/03                                      */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 37 TCH COUNTERS VALIDITY FIELDS.            */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LCE_ID M_LCE_ID                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0120_GET_CIS_FOR_TCU                       */        
/*                      Q_S0575_UPD_T37_1_INVALID                     */        
/*                      Q_S0449_UPD_T37_2_INVALID                     */            
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
/*Q_S0448_UPD_T37_DTC_INVALID: PROC(ZF_LCE_ID M_LCE_ID);*/ 
Q_S0448_UPD_T37_TCH_INVALID : PROC(ZF_CELL_DEP    BOOL
                                   /*ZF_BSSAP       BOOL*/);
/*3BKA36FBR242748*/
/*DCL ZQ_DUMMY       BOOL; DEL B9 PKG2 CHENZY*/
DCL ZQ_CELL_IDX    INT;                                                         
                                                                    
IF ZF_CELL_DEP                                                                  
THEN                                                                            
  DO FOR ZQ_CELL_IDX := 1 TO CM_FY32_MAX_CELLS_PER_BSC;                         
    DO WITH Z_R_BTS_TEL_PTR -> ZM_R_BTS_TEL(ZQ_CELL_IDX);                     
      IF D_BTS_TEL /= E_MS_NEQ                                                  
      THEN          
		Q_S0610_UPD_T37_0_INVALID(ZQ_CELL_IDX,                          
                             M_FS_TCHRM_LDC); 
	  FI;							 
	OD;                                                                               
  OD;                                                                             
FI;                                                                              
END Q_S0448_UPD_T37_TCH_INVALID; 

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0610_UPD_T37_0_INVALID                           */        
/*                                                                    */        
/*     PROGRAMMER: AABHUSHAN JYOTI KANSAKAR                           */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 2011/01/03                                      */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 37 TCU COUNTERS VALIDITY FIELDS.            */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_CELL_IDX M_CELL_IDX,                       */        
/*                      ZF_LDC_TYPE M_FMM_SELECTOR                    */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0290_UPD_TCH_INVALID                       */        
/*                      Q_S0447_UPD_T37_DTC_INVALID                   */         
/*                      Q_S0448_UPD_T37_TCU_INVALID                   */        
/*                      Q_S0580_UPDATE_CCI_TYPE110_2                  */        
/*                      Q_S0581_UPD_CCI_TCH_TYPE110_2                 */        
/*                      Q_S0582_UPD_CCI_TCU_TYPE110_2                 */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0610_UPD_T37_0_INVALID : PROC(ZF_CELL_IDX   M_CELL_IDX,                      
                                 ZF_LDC_TYPE   M_FMM_SELECTOR);                 
                                                                                
/*BEGIN : CR20_310381*/
/*DCL ZQ_I    RANGE (E_MT_37_CTR_MC1401A:E_MT_37_CTR_MC1423D);*/                       
DCL ZQ_I    RANGE (E_MT_37_CTR_MC1401A:E_MT_37_CTR_MC1427);                       
/*END : CR20_310381*/
                                                                                
DO WITH Z_T37_0_PTR -> (ZM_CELL_INDEX_VALUE(ZF_CELL_IDX));                                          
                                                                                
  B_CELL_ID  := ZF_CELL_IDX;                                                    
                                                                                
  DO WITH B_CTRS_PT0_MT_37;                                                    
                                                                                
    CASE ZF_LDC_TYPE OF                                                         
                                                                                
     (M_FS_DTC_TRF_LDC) :                                                      
/*BEGIN : CR20_310381*/
	     /*DO FOR ZQ_I := E_MT_37_CTR_MC1401A TO E_MT_37_CTR_MC1423D; */
	     DO FOR ZQ_I := E_MT_37_CTR_MC1401A TO 
			E_MT_37_CTR_MC1427; 
/*END : CR20_310381*/
		DO WITH Z_R_CELL_IN_PTR -> ZM_R_CELL_IN;
		/* IF D_EN_VAMOS = TRUE 
		  THEN*/
			CASE (ZQ_I) OF
				(E_MT_37_CTR_MC1401A:E_MT_37_CTR_MC1401D):
				B_MC1401A_TO_MC1409D(ZQ_I).B_LOW  := ZS_FFFE;
				B_MC1401A_TO_MC1409D(ZQ_I).B_HIGH := ZS_FFFF;
    
				(E_MT_37_CTR_MC1405A:E_MT_37_CTR_MC1407D):
				B_MC1401A_TO_MC1409D(ZQ_I).B_LOW  := ZS_FFFE;
				B_MC1401A_TO_MC1409D(ZQ_I).B_HIGH := ZS_FFFF;
			
				(E_MT_37_CTR_MC1420A:E_MT_37_CTR_MC1421D):
				B_MC1420A_TO_MC1421D(ZQ_I).B_LOW  := ZS_FFFE;
				B_MC1420A_TO_MC1421D(ZQ_I).B_HIGH := ZS_FFFF;
	
			/*BEGIN : CR20_310381*/
			/*BEGIN: CRI #01165185.02 add MC1424d*/			
				(E_MT_37_CTR_MC1424A,E_MT_37_CTR_MC1424D,
				E_MT_37_CTR_MC1427):/* CR 1035111 */
			/*END: CRI #01165185.02*/
				B_MC1424A_TO_MC1427(ZQ_I).B_LOW := ZS_FFFE;
				B_MC1424A_TO_MC1427(ZQ_I).B_HIGH := ZS_FFFF;
			/*END : 310381*/
			 ELSE
			ESAC; 
		  /*ELSE
			CASE (ZQ_I) OF
				(E_MT_37_CTR_MC1401A:E_MT_37_CTR_MC1401D):
				B_MC1401A_TO_MC1409D(ZQ_I).B_LOW  := 0;
				B_MC1401A_TO_MC1409D(ZQ_I).B_HIGH := 0;
    
				(E_MT_37_CTR_MC1405A:E_MT_37_CTR_MC1407D):
				B_MC1401A_TO_MC1409D(ZQ_I).B_LOW  := 0;
				B_MC1401A_TO_MC1409D(ZQ_I).B_HIGH := 0;
			
				(E_MT_37_CTR_MC1420A:E_MT_37_CTR_MC1421D):
				B_MC1420A_TO_MC1421D(ZQ_I).B_LOW  := 0;
				B_MC1420A_TO_MC1421D(ZQ_I).B_HIGH := 0;
			 ELSE
			ESAC; 
		  FI;*/
		OD;
	   OD;                                                                    
                                                                                
     (M_FS_TCU_TRF_LDC):
      /*START CR DCTPD1099054 */                                                       
	     DO FOR ZQ_I := E_MT_37_CTR_MC1401A TO E_MT_37_CTR_MC1424C; 
		DO WITH Z_R_CELL_IN_PTR -> ZM_R_CELL_IN;
		 /*IF D_EN_VAMOS = TRUE 
		  THEN*/
			CASE (ZQ_I) OF
				(E_MT_37_CTR_MC1402A:E_MT_37_CTR_MC1404D):
				B_MC1401A_TO_MC1409D(ZQ_I).B_LOW  := ZS_FFFE;
				B_MC1401A_TO_MC1409D(ZQ_I).B_HIGH := ZS_FFFF;
    
				(E_MT_37_CTR_MC1408B:E_MT_37_CTR_MC1409D):
				B_MC1401A_TO_MC1409D(ZQ_I).B_LOW  := ZS_FFFE;
				B_MC1401A_TO_MC1409D(ZQ_I).B_HIGH := ZS_FFFF;
			
				(E_MT_37_CTR_MC1422A:E_MT_37_CTR_MC1423D):
				B_MC1422A_TO_MC1423D(ZQ_I):= ZS_FE;
				/*START CR DCTPD1099054 */
				(E_MT_37_CTR_MC1424B, E_MT_37_CTR_MC1424C):
				  B_MC1424A_TO_MC1427(ZQ_I).B_LOW := ZS_FFFE;
				  B_MC1424A_TO_MC1427(ZQ_I).B_HIGH := ZS_FFFF;
			 ELSE
			ESAC; 
		   /*ELSE
		    CASE (ZQ_I) OF
				(E_MT_37_CTR_MC1402A:E_MT_37_CTR_MC1404D):
				B_MC1401A_TO_MC1409D(ZQ_I).B_LOW  := 0;
				B_MC1401A_TO_MC1409D(ZQ_I).B_HIGH := 0;
    
				(E_MT_37_CTR_MC1408B:E_MT_37_CTR_MC1409D):
				B_MC1401A_TO_MC1409D(ZQ_I).B_LOW  := 0;
				B_MC1401A_TO_MC1409D(ZQ_I).B_HIGH := 0;
			
				(E_MT_37_CTR_MC1422A:E_MT_37_CTR_MC1423D):
				B_MC1422A_TO_MC1423D(ZQ_I) := 0;
			 ELSE
			ESAC; 
		  FI;*/
		OD;
	   OD;
	   	 /*begin CR1098364 MC1408/MC1409 improv*/
	     DO WITH Z_TMP_MC1408_9_PTR->(ZF_CELL_IDX);
	       B_CNTR_C1408A.B_LOW := ZS_FFFE;
	       B_CNTR_C1408A.B_HIGH := ZS_FFFF;
         B_CNTR_C1408B.B_LOW := ZS_FFFE;
	       B_CNTR_C1408B.B_HIGH := ZS_FFFF;
	       B_CNTR_C1408C.B_LOW := ZS_FFFE;
	       B_CNTR_C1408C.B_HIGH := ZS_FFFF;
	       B_CNTR_C1408D.B_LOW := ZS_FFFE;
	       B_CNTR_C1408D.B_HIGH := ZS_FFFF;
	       B_CNTR_C1409A.B_LOW := ZS_FFFE;
	       B_CNTR_C1409A.B_HIGH := ZS_FFFF;
	       B_CNTR_C1409B.B_LOW := ZS_FFFE;
	       B_CNTR_C1409B.B_HIGH := ZS_FFFF;
	       B_CNTR_C1409C.B_LOW := ZS_FFFE;
	       B_CNTR_C1409C.B_HIGH := ZS_FFFF;
	       B_CNTR_C1409D.B_LOW := ZS_FFFE;
	       B_CNTR_C1409D.B_HIGH := ZS_FFFF;	      
	     OD;
	     /*end CR1098364 MC1408/MC1409 improv*/
                                                                                
     (M_FS_TCHRM_LDC):    
            DO FOR ZQ_I := E_MT_37_CTR_MC1410A TO E_MT_37_CTR_MC1410E; 
		DO WITH Z_R_CELL_IN_PTR -> ZM_R_CELL_IN;
		 /*IF D_EN_VAMOS = TRUE 
		  THEN*/
			CASE (ZQ_I) OF
				(E_MT_37_CTR_MC1410A:E_MT_37_CTR_MC1410E):
				B_MC1410A_TO_MC1410E(ZQ_I)  := ZS_FFFE;
               ELSE
             ESAC; 
		 /*ELSE
			CASE (ZQ_I) OF
				(E_MT_37_CTR_MC1410A:E_MT_37_CTR_MC1410E):
				B_MC1410A_TO_MC1410E(ZQ_I) := 0;
               ELSE
             ESAC; 
		 FI;*/
		OD;
      OD;                                                                    
      ELSE   
	ESAC;                                                                                                                                                 
  OD;                                                                           
OD;                                                                             
END Q_S0610_UPD_T37_0_INVALID;

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0620_UPD_T37_1_INVALID                           */        
/*                                                                    */        
/*     PROGRAMMER: AABHUSHAN JYOTI KANSAKAR                           */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 2011/01/03                                      */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 37 TCU COUNTERS VALIDITY FIELDS.            */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_CELL_IDX M_CELL_IDX,                       */        
/*                      ZF_LDC_TYPE M_FMM_SELECTOR                    */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0290_UPD_TCH_INVALID                       */        
/*                      Q_S0447_UPD_T37_DTC_INVALID                   */         
/*                      Q_S0448_UPD_T37_TCU_INVALID                   */        
/*                      Q_S0580_UPDATE_CCI_TYPE110_2                  */        
/*                      Q_S0581_UPD_CCI_TCH_TYPE110_2                 */        
/*                      Q_S0582_UPD_CCI_TCU_TYPE110_2                 */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0620_UPD_T37_1_INVALID : PROC(ZF_CELL_IDX   M_CELL_IDX,                      
                                 ZF_LDC_TYPE   M_FMM_SELECTOR);                 

/*THE COUNTERS MC1419 ALSO NEEDS TO BE IMPLEMENTED*/                                                                                
/*DCL ZQ_I    RANGE (E_MT_37_CTR_MC1411A:E_MT_37_CTR_MC1418D);*/
/*BEGIN : CR20_310381*/
/*DCL ZQ_I    RANGE (E_MT_37_CTR_MC1411A:E_MT_37_CTR_MC1419D);*/                       
DCL ZQ_I    RANGE (E_MT_37_CTR_MC1411A:E_MT_37_CTR_MC1426D);                       
/*THE COUNTERS MC1419 ALSO NEEDS TO BE IMPLEMENTED*/                                                                                
/*END : CR20_310381*/                                                                                
DO WITH Z_T37_1_PTR -> (ZM_CELL_INDEX_VALUE(ZF_CELL_IDX));                                          
                                                                                
  B_CELL_ID  := ZF_CELL_IDX;                                                    
                                                                                
  DO WITH B_CTRS_PT1_MT_37;                                                    
                                                                                
    CASE ZF_LDC_TYPE OF   
	
     (M_FS_TCU_TRF_LDC):                                                       
/*THE COUNTERS MC1419 ALSO NEEDS TO BE IMPLEMENTED*/                                                                                
	     /*DO FOR ZQ_I := E_MT_37_CTR_MC1411A TO E_MT_37_CTR_MC1418D;*/
	     /*DO FOR ZQ_I := E_MT_37_CTR_MC1411A TO E_MT_37_CTR_MC1419D;*/
	     DO FOR ZQ_I := E_MT_37_CTR_MC1411A TO E_MT_37_CTR_MC1426D;
/*THE COUNTERS MC1419 ALSO NEEDS TO BE IMPLEMENTED*/                                                                                
		DO WITH Z_R_CELL_IN_PTR -> ZM_R_CELL_IN;
			CASE (ZQ_I) OF
/*THE COUNTERS MC1419 ALSO NEEDS TO BE IMPLEMENTED*/                                                                                
			/*(E_MT_37_CTR_MC1411A:E_MT_37_CTR_MC1418D):*/
				(E_MT_37_CTR_MC1411A:E_MT_37_CTR_MC1419D):
/*THE COUNTERS MC1419 ALSO NEEDS TO BE IMPLEMENTED*/                                                                                
				B_MC1411A_TO_MC1419D(ZQ_I).B_LOW  := ZS_FFFE;
				B_MC1411A_TO_MC1419D(ZQ_I).B_HIGH := ZS_FFFF;

/*CR20_310381*/
			(E_MT_37_CTR_MC1425A:E_MT_37_CTR_MC1426D):
			    B_MC1425A_TO_MC1426D(ZQ_I).B_LOW := ZS_FFFE;
			    B_MC1425A_TO_MC1426D(ZQ_I).B_HIGH := ZS_FFFF;

/*CR20_310381*/
			ESAC;
		OD;		/*Z_R_CELL_IN_PTR */
	   OD;     /* ZQ_I*/
	ELSE;
	ESAC;
  OD;     /* B_CTRS_PT1_MT_37 */                                                                     
OD;     /* Z_T37_1_PTR */                                                                      
END Q_S0620_UPD_T37_1_INVALID;
/* END : B12 VAMOS */       
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0449_UPD_T110_2_INVALID                          */        
/*                                                                    */        
/*     PROGRAMMER: L. DIERICK  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 99/07/26                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 110 TCU COUNTERS VALIDITY FIELDS.           */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_CELL_IDX M_CELL_IDX,                       */        
/*                      ZF_LDC_TYPE M_FMM_SELECTOR                    */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0290_UPD_TCH_INVALID                       */        
/*                      Q_S0447_UPD_T110_DTC_INVALID                  */        
/*                      Q_S0448_UPD_T110_TCU_INVALID                  */        
/*                      Q_S0580_UPDATE_CCI_TYPE110_2                  */        
/*                      Q_S0581_UPD_CCI_TCH_TYPE110_2                 */        
/*                      Q_S0582_UPD_CCI_TCU_TYPE110_2                 */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0449_UPD_T110_2_INVALID: PROC(ZF_CELL_IDX   M_CELL_IDX,                      
                                 ZF_LDC_TYPE   M_FMM_SELECTOR,
                                 ZF_TEL        BOOL);                 
                                                                                
DCL ZQ_I    RANGE (E_MT_110_CTR_MC607:E_MT_110_CTR_MC162);                       
                                                                                
DO WITH Z_T110_2_PTR -> (ZM_CELL_INDEX_VALUE(ZF_CELL_IDX));                                          
                                                                                
  B_CELL_ID  := ZF_CELL_IDX;                                                    
                                                                                
  DO WITH B_CTRS_PT2_MT_110;                                                    
                                                                                
    CASE ZF_LDC_TYPE OF                                                         
                                                                                
      (M_FS_DTC_TRF_LDC) :                                                      
         DO FOR ZQ_I := E_MT_110_CTR_MC607 TO E_MT_110_CTR_MC1050; 
           CASE (ZQ_I) OF
             (E_MT_110_CTR_MC607):
              B_MC607_TO_MC612D(ZQ_I).B_LOW  := ZS_FFFE;
              B_MC607_TO_MC612D(ZQ_I).B_HIGH := ZS_FFFF;
                                                                             
             (E_MT_110_CTR_MC541:E_MT_110_CTR_MC81):               
              B_MC541_TO_MC81(ZQ_I) := ZS_FFFE;                                   
         
             (E_MT_110_CTR_MC642):
              B_MC642.B_LOW  := ZS_FFFE;                                             
              B_MC642.B_HIGH := ZS_FFFF;
              
             (E_MT_110_CTR_MC643):
              B_MC643 := ZS_FFFE;    
              
             (E_MT_110_CTR_MC645A:E_MT_110_CTR_MC646):               
              B_MC645A_TO_MC646(ZQ_I).B_LOW  := ZS_FFFE;                            
              B_MC645A_TO_MC646(ZQ_I).B_HIGH := ZS_FFFF;                            
                                                                             
             (E_MT_110_CTR_MC647:E_MT_110_CTR_MC648):               
              B_MC647_TO_MC648(ZQ_I) := ZS_FFFE;                                   
              
             (E_MT_110_CTR_MC650):
              B_MC650.B_LOW  := ZS_FFFE;                                             
              B_MC650.B_HIGH := ZS_FFFF;       
                                                    
             (E_MT_110_CTR_MC551:E_MT_110_CTR_MC91):               
              B_MC551_TO_MC91(ZQ_I) := ZS_FFFE;                                   
              
             (E_MT_110_CTR_MC652):
              B_MC652.B_LOW  := ZS_FFFE;                                             
              B_MC652.B_HIGH := ZS_FFFF;
              
             (E_MT_110_CTR_MC653):
              B_MC653 := ZS_FFFE; 
                                                                 
             (E_MT_110_CTR_MC655A:E_MT_110_CTR_MC656):               
              B_MC655A_TO_MC656(ZQ_I).B_LOW  := ZS_FFFE;                            
              B_MC655A_TO_MC656(ZQ_I).B_HIGH := ZS_FFFF;                            
                                                                            
             (E_MT_110_CTR_MC657:E_MT_110_CTR_MC658):               
              B_MC657_TO_MC658(ZQ_I) := ZS_FFFE;                                   
              
             (E_MT_110_CTR_MC660):
              B_MC660.B_LOW  := ZS_FFFE;                                             
              B_MC660.B_HIGH := ZS_FFFF;      
                                                     
             (E_MT_110_CTR_MC561:E_MT_110_CTR_MC101):               
              B_MC561_TO_MC101(ZQ_I) := ZS_FFFE;                                   
              
             (E_MT_110_CTR_MC662):
              B_MC662.B_LOW  := ZS_FFFE;                                             
              B_MC662.B_HIGH := ZS_FFFF;   
                                                        
             (E_MT_110_CTR_MC663:E_MT_110_CTR_MC667):               
              B_MC663_TO_MC667(ZQ_I) := ZS_FFFE;                                   
                                                                             
             (E_MT_110_CTR_MC670:E_MT_110_CTR_MC679,
              E_MT_110_CTR_MC785A:E_MT_110_CTR_MC820):              
              B_MC670_TO_MC820(ZQ_I).B_LOW  := ZS_FFFE;                            
              B_MC670_TO_MC820(ZQ_I).B_HIGH := ZS_FFFF;   
              
             (E_MT_110_CTR_MC821):
              B_MC821.B_LOW  := ZS_FFFE;                                             
              B_MC821.B_HIGH := ZS_FFFF;   
                                                                 
             (E_MT_110_CTR_MC830:E_MT_110_CTR_MC831):               
              B_MC830_TO_MC831(ZQ_I).B_LOW  := ZS_FFFE;                            
              B_MC830_TO_MC831(ZQ_I).B_HIGH := ZS_FFFF;                            
                                                                 
             (E_MT_110_CTR_MC870:E_MT_110_CTR_MC871):               
              B_MC870_TO_MC871(ZQ_I).B_LOW  := ZS_FFFE;                            
              B_MC870_TO_MC871(ZQ_I).B_HIGH := ZS_FFFF;                            
                                                                 
             (E_MT_110_CTR_MC1040:E_MT_110_CTR_MC1050):               
              B_MC1040_TO_MC162(ZQ_I).B_LOW  := ZS_FFFE;                            
              B_MC1040_TO_MC162(ZQ_I).B_HIGH := ZS_FFFF;                            
              
              ELSE
           ESAC;   
         OD;                                                                    
                                                                                
      (M_FS_TCU_TRF_LDC):                                                       
         DO FOR ZQ_I := E_MT_110_CTR_MC706 TO E_MT_110_CTR_MC162; 
           CASE (ZQ_I) OF
             (E_MT_110_CTR_MC706):
              B_MC670_TO_MC820(ZQ_I).B_LOW  := ZS_FFFE;
              B_MC670_TO_MC820(ZQ_I).B_HIGH := ZS_FFFF;
              
             (E_MT_110_CTR_MC31):
              B_MC34_TO_MC31(ZQ_I)  := ZS_FFFE;

             /* DEL FOR B8
             (E_MT_110_CTR_MC851):
              B_MC851_TO_MC871(ZQ_I).B_LOW  := ZS_FFFE;
              B_MC851_TO_MC871(ZQ_I).B_HIGH := ZS_FFFF;
             */
              
             (E_MT_110_CTR_MC803):
              B_MC803  := ZS_FFFE;
              
             (E_MT_110_CTR_MC161:E_MT_110_CTR_MC162):
              B_MC1040_TO_MC162(ZQ_I).B_LOW  := ZS_FFFE;
              B_MC1040_TO_MC162(ZQ_I).B_HIGH := ZS_FFFF;
              
              ELSE
           ESAC;   
         OD;                                                                    
                                                                                
      (M_FS_TCHRM_LDC):    
         IF ZF_TEL 
           THEN
           DO FOR ZQ_I := E_MT_110_CTR_MC812 TO E_MT_110_CTR_MC34;              
             CASE (ZQ_I) OF
               (E_MT_110_CTR_MC812:E_MT_110_CTR_MC612D):
                B_MC607_TO_MC612D(ZQ_I).B_LOW  := ZS_FFFE;
                B_MC607_TO_MC612D(ZQ_I).B_HIGH := ZS_FFFF;
              
               (E_MT_110_CTR_MC320A:E_MT_110_CTR_MC320E):
                B_MC320A_TO_MC320E(ZQ_I)  := ZS_FFFE;
               (E_MT_110_CTR_MC34):
                B_MC34_TO_MC31(ZQ_I)  := ZS_FFFE;
              
               ELSE
             ESAC;   
           OD;                                                                    
         ELSE
           DO FOR ZQ_I := E_MT_110_CTR_MC250 TO E_MT_110_CTR_MC26;
             B_MC250_TO_MC29A(ZQ_I)  := ZS_FFFE;
           OD;
         FI;   
      ELSE                                                                      
                                                                                
    ESAC;                                                                       
  OD;                                                                           
OD;                                                                             
                                                                                
                                                                                
END Q_S0449_UPD_T110_2_INVALID;                                                 
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0451_UPD_T6_DET_TCU                              */        
/*                                                                    */        
/*     PROGRAMMER:  L. DIERICK                                        */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/10/31                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*                      ZF_ACT_IDX INT                                */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0180_CELL_IN_SCOPE                         */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0270_UPD_DET_TCU_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
                                                                                
Q_S0451_UPD_T6_DET_TCU: PROC(ZF_LDC_BUF_PTR PTR,                                
                             ZF_ACT_IDX     INT);                               
                                                                                
DCL ZQ_NBR_OF_CELLS   INT;                                                      
DCL ZQ_FOUND          INT;                                                      
DCL ZQ_I              INT;                                                      
                                                                                
DO WITH ZF_LDC_BUF_PTR->CM_FY32_TCU_DET_CTRS_AREA;                            
  ZQ_NBR_OF_CELLS := B_NBR_CELLS;
OD;                    
DO WHILE ZQ_NBR_OF_CELLS /= 0;                                                  
  DO WITH ZF_LDC_BUF_PTR->CM_FY32_TCU_DET_CTRS_AREA;                            
    DO WITH B_CELL_CNTRS(ZQ_NBR_OF_CELLS);                                      
      IF (B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC) AND                          
         (B_CELL_IDX > 0) AND                                                   
         (Q_S0180_CELL_IN_SCOPE(ZF_ACT_IDX,B_CELL_IDX))                         
      THEN                                                                      
        ZQ_FOUND := 0;                                                          
        DO FOR ZQ_I := 1 TO M_PM_MAX_CELLS_FOR_A_MEAS_JOB                       
                                         WHILE ZQ_FOUND = 0;                    
          DO WITH Z_T6_PTR->(ZQ_I);                                             
            IF B_CELL_ID = B_CELL_IDX OR                                        
               B_CELL_ID = M_NULL_CELL_IDX                                      
            THEN                                                                
              ZQ_FOUND := ZQ_I;                                                 
              B_CELL_ID := B_CELL_IDX;                                          
              Q_S0080_ADD_INT_TO_DPVAL(                                         
                 B_CNTRS_TYPE_6(E_C413_NB_TCH_NOR_ASS_INN_ZONE),                
                 B_HIS_CC_MT_06.B_ALL_CTRS.B_MT_06_CTR_C413);                   
            FI;                                                                 
          OD;                                                                   
        OD;                                                                     
      FI;                                                                       
    OD;                                                                         
    ZQ_NBR_OF_CELLS := ZQ_NBR_OF_CELLS - 1;                                     
  OD;                                                                           
OD;                                                                             
                                                                                
END Q_S0451_UPD_T6_DET_TCU;                                                     
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0452_UPD_T6_STD_DTC                              */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 11/11/97                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATE THE TYPE 6 COUNTERS THAT ARE CONTAIINED WITHIN TYPE   */        
/*       110 PART 1.                                                  */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*                      ZF_ACT_IDX INT                                */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0180_CELL_IN_SCOPE                         */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*                      Q_S0040_ADD_INT_TO_INT                        */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0250_UPD_DTC_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0452_UPD_T6_STD_DTC: PROC (ZF_LDC_BUF_PTR PTR,                               
                              ZF_ACT_IDX     INT);                              
                                                                                
DCL ZQ_DTC_NBR_CELLS INT,                                                       
    ZQ_NOT_FOUND     BOOL,                                                      
    ZQ_CI            M_CELL_IDX;  
DCL ZQ_I        M_DTC_TRF_CNTRS_TYPE110,
    ZQ_J        INT;                                                            
                                                                                
DO WITH ZF_LDC_BUF_PTR -> M_DTC_STD_CELL_CTRS;    
  ZQ_DTC_NBR_CELLS := B_NBR_CELLS;
OD;
                                                                                
DO WITH ZF_LDC_BUF_PTR -> M_DTC_STD_CELL_CTRS;                                  
  DO FOR ZQ_DTC_NBR_CELLS := 1 TO B_NBR_CELLS;                                  
    DO WITH B_CELL_CNTRS(ZQ_DTC_NBR_CELLS);                                     
      /* FILTER OUT THE DUFF CELLS */                                           
      IF (B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC) AND                          
         (B_CELL_IDX >  0) AND                                                  
         Q_S0180_CELL_IN_SCOPE(ZF_ACT_IDX, B_CELL_IDX)                          
      THEN                                                                      
        ZQ_NOT_FOUND:=TRUE;                                                     
        DO FOR ZQ_CI:=1 TO M_PM_MAX_CELLS_FOR_A_MEAS_JOB                        
           WHILE ZQ_NOT_FOUND;                                                  
          DO WITH Z_T6_PTR->(ZQ_CI);                                            
            IF B_CELL_ID=B_CELL_IDX OR                                          
               B_CELL_ID=M_NULL_CELL_IDX                                        
            THEN                                                                
              ZQ_NOT_FOUND:=FALSE;                                              
              B_CELL_ID := B_CELL_IDX;                                          
                                                                                
              DO WITH B_HIS_CC_MT_06;                                           
                DO WITH B_ALL_CTRS;                                             
                  Q_S0080_ADD_INT_TO_DPVAL(                                     
                      B_DTC_TYPE110(E_MC42_MSC_INC_H_SUCC),                     
                      B_MT_06_CTR_C42);
                         
                  Q_S0040_ADD_INT_TO_INT(B_DTC_TYPE110
                    (E_MC43_MSC_INC_H_UNSUCC_SEIZ_F),
                    B_MT_06_CTR_C43);                                         
                                                                                
                  Q_S0040_ADD_INT_TO_INT(B_DTC_TYPE110
                    (E_MC541_NB_INC_EXT_TCH_HO_PREP_F),
                    B_MT_06_CTR_C541);                                         
                                                                                
                  Q_S0080_ADD_INT_TO_DPVAL(                                     
                      B_DTC_TYPE110(E_MC56_BSC_OUT_H_SUCC),                     
                      B_MT_06_CTR_C56);                                         
                                                                                
                  Q_S0080_ADD_INT_TO_DPVAL(                                     
                      B_DTC_TYPE110(E_MC55A_BSC_OUT_H_REQD_NBR),                 
                      B_MT_06_CTR_C55A);                                         
                                                                                
                  Q_S0040_ADD_INT_TO_INT(                                       
                      B_DTC_TYPE110
                      (E_MC551_BSC_INC_H_UNSUCC_RES_LA),            
                      B_MT_06_CTR_C551);                                         
                                                                                
                  Q_S0080_ADD_INT_TO_DPVAL(                                     
                      B_DTC_TYPE110(E_MC52_BSC_INC_H_SUCC),                     
                      B_MT_06_CTR_C52);                                         
                                                                                
                  Q_S0080_ADD_INT_TO_DPVAL(                                     
                      B_DTC_TYPE110(E_MC62_M_INTRA_H_SUCC),                     
                      B_MT_06_CTR_C62);                                         
                                                                                
                  Q_S0080_ADD_INT_TO_DPVAL(                                     
                      B_DTC_TYPE110(E_MC479_HO_ATPT_HLEV_NG_PRF_BND),           
                      B_MT_06_CTR_C479);                                        
                                                                                
                  Q_S0080_ADD_INT_TO_DPVAL(                                     
                      B_DTC_TYPE110(E_MC50_MSC_OUT_H_ATPT_NBR),                 
                      B_MT_06_CTR_C50);                                         
                                                                                
                  Q_S0080_ADD_INT_TO_DPVAL(                                     
                      B_DTC_TYPE110(E_MC60_BSC_OUT_H_ATPT_NBR),                 
                      B_MT_06_CTR_C60);                                         
                  
                  Q_S0080_ADD_INT_TO_DPVAL(
                      B_DTC_TYPE110(E_MC449_NB_TCH_HO_ATPT_28),
                      B_MT_06_CTR_C449);
                                                                                
                  Q_S0040_ADD_INT_TO_INT(                                       
                      B_DTC_TYPE110(E_MC47_MSC_OUT_H_UNS_OLD_RE),               
                      B_MT_06_CTR_C47);                                         
                                                                                
                  Q_S0040_ADD_INT_TO_INT(                                       
                      B_DTC_TYPE110(E_MC48_MSC_OUT_H_OLD_RADIO_FAI),            
                      B_MT_06_CTR_C48);                                         
                                                                                
                  Q_S0040_ADD_INT_TO_INT(                                       
                      B_DTC_TYPE110(E_MC53_BSC_INC_H_UNSUCC_SEIZ_F),            
                      B_MT_06_CTR_C53);                                         
                                                                                
                  Q_S0040_ADD_INT_TO_INT(                                       
                      B_DTC_TYPE110(E_MC561_M_INTRA_H_UNSUCC_RES_LA),            
                      B_MT_06_CTR_C561);                                         
                                                                                
                OD;     
                
                ZQ_J := 4;                                                        
                DO FOR ZQ_I := E_MC45A_MSC_OUT_H_REQD_NBR TO                     
                               E_MC46_MSC_OUT_H_SUCC;                           
                                                                                
                  Q_S0080_ADD_INT_TO_DPVAL(                                     
                      B_DTC_TYPE110(ZQ_I),                                      
                      B_FROM_C46_TO_C45A(ZQ_J));   
                  ZQ_J:= ZQ_J - 1;                              
                OD;    
                                                                         
                ZQ_J := 8;                                                        
                DO FOR ZQ_I := E_MC57_BSC_OUT_H_UNSUCC_OLD_RE TO                
                               E_MC58_BSC_OUT_H_OLD_RADIO_FAI;                  
                                                                                
                  Q_S0040_ADD_INT_TO_INT(                                       
                      B_DTC_TYPE110(ZQ_I),                                      
                      B_FROM_C57_TO_C58(ZQ_J));                                 
                  ZQ_J := ZQ_J + 1;                                                              
                OD;    
                ZQ_J := 16;                                                         
                DO FOR ZQ_I := E_MC63_M_INTRA_H_UNSUCC_SEIZ_F TO                
                               E_MC67_M_INTRA_H_UNSUCC_OLD_RE;                  
                                                                                
                  Q_S0040_ADD_INT_TO_INT(                                       
                      B_DTC_TYPE110(ZQ_I),                                      
                      B_FROM_C63_TO_C67(ZQ_J)); 
                  ZQ_J := ZQ_J + 1;                               
                OD;    
                ZQ_J := 18;                                                         
                DO FOR ZQ_I := E_MC470_HO_ATPT_LOW_QUAL_UP TO                   
                               E_MC585F_HO_ATPT_HLEV_NEIG_SLWMS;                
                                                                                
                  IF ZQ_I /= E_MC479_HO_ATPT_HLEV_NG_PRF_BND                    
                  THEN                                                          
                    Q_S0080_ADD_INT_TO_DPVAL(                                   
                        B_DTC_TYPE110(ZQ_I),                                    
                        B_FROM_C470_TO_C585F(ZQ_J));  
                    ZQ_J := ZQ_J + 1;                          
                  FI;                                                           
                OD; 
                ZQ_J := 31;                                                  
                DO FOR ZQ_I := E_MC541A_NB_INC_EXT_TCH_HO_PREP_ 
                   TO E_MC41B_MSC_INC_HO_UNSUCC_NO_TTC;                
                                                                                
                  Q_S0040_ADD_INT_TO_INT(                                       
                      B_DTC_TYPE110(ZQ_I),                                      
                      B_FROM_C541A_TO_C41B(ZQ_J));                               
                  ZQ_J := ZQ_J + 1;                                                             
                OD;
               ZQ_J := 33;                                                       
                DO FOR ZQ_I := E_MC586A_HO_ATPT_LOW_LEV_UP_IZ TO                
                               E_MC586C_HO_ATPT_HIGH_LEV_UP_OZ;                 
                                                                                
                  Q_S0080_ADD_INT_TO_DPVAL(                                     
                    B_DTC_TYPE110(ZQ_I),                                        
                    B_FROM_C586A_TO_C411(ZQ_J));   
                  ZQ_J := ZQ_J + 1;                             
                OD;    
                ZQ_J := 42;                                                         
                DO FOR ZQ_I := E_MC440_HO_ATPT_TRAFFIC TO                       
                               E_MC450_HO_ATPT_SHORT_DISTANCE;                  
                                                                                
                  Q_S0080_ADD_INT_TO_DPVAL(                                     
                      B_DTC_TYPE110(ZQ_I),                                      
                      B_FROM_C413_TO_C461(ZQ_J));                               
                  ZQ_J := ZQ_J + 1;                                                              
                OD; 
                ZQ_J := 45;                                                         
                DO FOR ZQ_I := E_MC220_NB_INC_EXT_TCH_HO_REQ TO                       
                               E_MC271_NB_INTRA_TCH_HO_ATPT;                  
                                                                                
                  Q_S0080_ADD_INT_TO_DPVAL(                                     
                      B_DTC_TYPE110(ZQ_I),                                      
                      B_FROM_C413_TO_C461(ZQ_J));                               
                  ZQ_J := ZQ_J + 1;                                                              
                OD;     
                ZQ_J := 51;                                                         
                DO FOR ZQ_I := E_MC448A_NB_TCH_HO_ATPT_26_HR2FR TO
                               E_MC448B_NB_TCH_HO_ATPT_27_FR2HR;
                                                                                
                  Q_S0080_ADD_INT_TO_DPVAL(                                     
                      B_DTC_TYPE110(ZQ_I),                                      
                      B_FROM_C413_TO_C461(ZQ_J));                               
                  ZQ_J := ZQ_J + 1;
                OD;     
                                                                                
                Q_S0080_ADD_INT_TO_DPVAL(                                     
                    B_DTC_TYPE110(E_MC461_NB_TCH_HO_ATPT_29_TFO),             
                      B_FROM_C413_TO_C461(55));                               
                                                                                
              OD; /* DO WITH B_ALL_CTRS */                                      
            FI; /* IF CELL FOUND */                                             
          OD; /* DO WITH HISTORY POINTER */                                     
        OD; /* SEARCH THROUGH ENTRIES */                                        
      FI; /* CELL IN RANGE */                                                   
    OD;                                                                         
  OD;                                                                           
OD;                                                                             
END Q_S0452_UPD_T6_STD_DTC;                                                     
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0453_UPD_T6_DET_DTC                              */        
/*                                                                    */        
/*     PROGRAMMER: L. DIERICK  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 03/06/98                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATE THE TYPE 6 COUNTERS THAT ARE CONTAIINED WITHIN        */        
/*       POLLING RESPONS FROM DTC.                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*                      ZF_ACT_IDX INT                                */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0180_CELL_IN_SCOPE                         */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*                      Q_S0040_ADD_INT_TO_INT                        */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0280_UPD_DET_DTC_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0453_UPD_T6_DET_DTC: PROC(ZF_LDC_BUF_PTR PTR,                                
                             ZF_ACT_IDX     INT);                               
                                                                                
DCL ZQ_DTC_NBR_CELLS INT,                                                       
    ZQ_NOT_FOUND     BOOL,                                                      
    ZQ_CI            M_CELL_IDX;                                                
 
                                                                                
DO WITH ZF_LDC_BUF_PTR -> M_DTC_DET_MEAS_CTRS_CELLS;                            
  ZQ_DTC_NBR_CELLS :=  B_NBR_CELLS;
OD;               
                                                                                
DO WITH ZF_LDC_BUF_PTR -> M_DTC_DET_MEAS_CTRS_CELLS;                            
  DO FOR ZQ_DTC_NBR_CELLS := 1 TO B_NBR_CELLS;                                  
    DO WITH B_CELL_CNTRS(ZQ_DTC_NBR_CELLS);                                     
      IF (B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC) AND                          
         (B_CELL_IDX >  0) AND                                                  
         Q_S0180_CELL_IN_SCOPE(ZF_ACT_IDX, B_CELL_IDX)                          
      THEN                                                                      
        ZQ_NOT_FOUND:=TRUE;                                                     
        DO FOR ZQ_CI:=1 TO M_PM_MAX_CELLS_FOR_A_MEAS_JOB                        
                                               WHILE ZQ_NOT_FOUND;              
          DO WITH Z_T6_PTR->(ZQ_CI);                                            
            IF B_CELL_ID=B_CELL_IDX OR                                          
               B_CELL_ID=M_NULL_CELL_IDX                                        
            THEN                                                                
              ZQ_NOT_FOUND:=FALSE;                                              
              B_CELL_ID := B_CELL_IDX;                                          
                                                                                
              DO WITH B_HIS_CC_MT_06.B_ALL_CTRS;                                
                Q_S0080_ADD_INT_TO_DPVAL(                                       
                  B_TYPE6(E_C411_NBR_BSC_TCH_OUT_HO_REQ_IZ),                    
                  B_MT_06_CTR_C411);                                            
                                                                                
                Q_S0040_ADD_INT_TO_INT(                                         
                  B_TYPE6(E_C412_NBR_BSC_TCH_OUT_HO_FL_IZ),                     
                  B_MT_06_CTR_C412); 

                /* REMOVE FOR B8
                Q_S0080_ADD_INT_TO_DPVAL(                                       
                  B_TYPE6(E_C449_NB_TCH_HO_ATPT_28),                    
                  B_MT_06_CTR_C449);                                            
                */                                                                
              OD;                                                               
            FI;                                                                 
          OD;                                                                   
        OD;                                                                     
      FI;                                                                       
    OD;                                                                         
  OD;                                                                           
OD;                                                                             
                                                                                
END Q_S0453_UPD_T6_DET_DTC;                                                     
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0454_UPD_T7_STD_TCU                              */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/11                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 7 LAPD COUNTERS IN MEMORY USING THE USER    */        
/*       BUFFER RECEIVED.                                             */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0454_UPD_T7_STD_TCU: PROC(ZF_LDC_BUF_PTR PTR);                               
                                                                                
 DCL ZQ_NBR_LAPD    INT;                                                        
 DCL ZQ_NOT_FOUND   BOOL;                                                       
 DCL ZQ_LAPD_IDX    LONG_INT;                                                        
 DCL ZQ_J           M_TCU_TYPE_7;                                               
/*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE*/
 DCL ZQ_IP_BTS      BOOL;                                                       
/*END: ADD-WIPRO-B10-MX-MR2-CHANGE */

                                                                                
DO WITH ZF_LDC_BUF_PTR->CM_FY32_TCU_STD_CTRS_AREA; 
  ZQ_NBR_LAPD := B_NBR_LAPD;
OD;                         

IF ZQ_NBR_LAPD > 0                                                              
THEN                                                                            
  DO WITH ZF_LDC_BUF_PTR->CM_FY32_TCU_STD_CTRS_AREA;                            
    DO FOR ZQ_NBR_LAPD := 1 TO B_NBR_LAPD;                                      
      ZQ_NOT_FOUND:=TRUE;                                                       
      DO WITH B_LAPD_CNTRS(ZQ_NBR_LAPD);                                        
        DO FOR ZQ_LAPD_IDX:=1L TO CM_FY32_MAX_LAPD_PER_BSC WHILE                 
                                                        ZQ_NOT_FOUND;           
                                                                                
          /* SEARCH FOR THIS LAPD INSTANCE - NOT DONE R4! */                    
          DO WITH Z_T7_PTR->(ZQ_LAPD_IDX);                                      
            DO WITH B_LAPD_ID;                                                  
              /* ENTRY MATCHES OR FIRST FREE ONE */                             
              IF (B_BTS_EQ  = B_SBL_ID.B_SBLUNITNBR AND                         
                  B_TEI_NBR = B_SBL_ID.B_SBLNBR  AND                            
                  B_SBL_TYP = B_SBL_ID.B_SBLTYPE) OR                            
                 /* THIS IS A FREE ENTRY */                                     
                 /* DEFAULT HAPPENS TO BE FF! */                                
                                                                                
                 (M_BYTE(B_SBL_TYP*1) = M_SBLT_NULL)                            
                                                                                
              THEN                    
                ZQ_NOT_FOUND:=FALSE;
                /*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE*/
 		ZQ_IP_BTS := FALSE;                                                       
		/*END: ADD-WIPRO-B10-MX-MR2-CHANGE */                                            
                DO WITH B_SBL_ID;                                               
                  B_BTS_EQ := B_SBLUNITNBR;                                     
                  B_TEI_NBR := B_SBLNBR;                                        
                  B_SBL_TYP := B_SBLTYPE;                                       
                OD;
                /*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE*/                                                             
                ZQ_IP_BTS := Q_S0455_CHK_IF_IP_BTS(B_BTS_EQ); 
                /*END: ADD-WIPRO-B10-MX-MR2-CHANGE*/
                DO FOR ZQ_J:= E_L1_1_NBR_INFO_FRM_XMT TO                        
                              E_L1_18_TIME_LAPD_CONG;                   
                  IF ZQ_J /= E_L1_12_NBR_CRC_ERR
                  THEN
                    Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_7(ZQ_J),               
                                            B_HIS_CC_MT_07(ZQ_J)); 
		  /*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE*/ 
                  ELSIF (ZQ_J = E_L1_12_NBR_CRC_ERR AND ZQ_IP_BTS)
                  THEN
                  	B_HIS_CC_MT_07(ZQ_J).B_LOW := 0;      
              		B_HIS_CC_MT_07(ZQ_J).B_HIGH := 0; 
                  FI;                                                              
                  /*END: ADD-WIPRO-B10-MX-MR2-CHANGE*/                                                             
                OD;                                                             
              FI;                                                               
            OD; /* DO WITH B_LAPD_ID */                                         
          OD; /* DO WITH Z_T7_PTR */                                            
        OD; /* DO FOR LAPDS IN BSC */                                           
      OD; /* WITH B_LAPD_CNTRS */                                               
    OD;                                                                         
  OD;                                                                           
FI;                                                                             
END Q_S0454_UPD_T7_STD_TCU;                                                     

/*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE*/

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0455_CHK_IF_IP_BTS                              */        
/*                                                                    */        
/*     PROGRAMMER:                                                    */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/11                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                                                                    */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*     CALLED FROM:                                                   */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0455_CHK_IF_IP_BTS: PROC(ZF_BTS_EQ M_UNIT_NBR)RETURNS (BOOL);                               

DCL ZQ_ABIS_NBR M_ABIS_LINK_NBR;
DCL ZQ_IP_BTS BOOL;

ZQ_IP_BTS := FALSE;
DO WITH Z_R_BEQ_MGT_PTR -> ZM_R_BEQ_MGT(ZF_BTS_EQ);
          ZQ_ABIS_NBR := D_ABIS_NBR;
OD;
IF (ZQ_ABIS_NBR /= ZS_FFFF)
THEN
  DO WITH Z_R_ABIS_INF_PTR -> ZM_R_ABIS_INF(ZQ_ABIS_NBR);    
    IF (D_CUR_MODE =  M_ABIS_TRANS_MODE_IPETH)
        OR (D_CUR_MODE = M_ABIS_TRANS_MODE_IPFR)
        OR (D_CUR_MODE = M_ABIS_TRANS_MODE_IPUN)
        /* BEGIN: CR 625837 */
        OR (D_CUR_MODE = M_ABIS_TRANS_MODE_IP_E1WCP)
        /* END: CR 625837 */
    THEN
    	ZQ_IP_BTS := TRUE;
    FI;
  OD; 
FI; 
RETURN (ZQ_IP_BTS);
END Q_S0455_CHK_IF_IP_BTS;                                                     
/* START: 3BKA36CBR236941*/
Q_S0456_CHK_CELL_MAP_IP_BTS: PROC(ZF_CELL_IDX M_CELL_IDX)
                             RETURNS (BOOL);
DCL ZQ_IP_BTS      BOOL;
DCL ZQ_BEQ_NBR     M_UNIT_NBR; 
                     
ZQ_IP_BTS := FALSE;
DO WITH Z_R_CELL_MGT_PTR -> ZM_R_CELL_MGT(ZF_CELL_IDX);
  ZQ_BEQ_NBR := D_BEQ_NBR;
OD;
IF (ZQ_BEQ_NBR /= ZS_FF)THEN
 ZQ_IP_BTS := Q_S0455_CHK_IF_IP_BTS(ZQ_BEQ_NBR); 
FI; 

RETURN (ZQ_IP_BTS);

END Q_S0456_CHK_CELL_MAP_IP_BTS;                                                     
/* END: 3BKA36CBR236941*/
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE:   Q_S0455_CHK_IF_TC_MAPPED                          */        
/*                                                                    */        
/*     PROGRAMMER:                                                    */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/11                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                                                                    */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*     CALLED FROM:                                                   */        
/*     PRIMITIVES CALLED:                                             */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0455_CHK_IF_TC_MAPPED: PROC(ZF_TC_EQ M_TC_ID)RETURNS (BOOL);                               
DCL ZQ_TC_MAP BOOL;
DCL ZM_TC_ID BOOL;
ZQ_TC_MAP := FALSE;
DO WITH Z_R_TC_MGT_PTR -> ZM_R_TC_MGT(ZM_TC_INDEX_VALUE
         (ZF_TC_EQ));
  IF (D_TCOM_ST = E_MS_IT OR D_TCOM_ST = E_MS_FIT)
  THEN
    ZQ_TC_MAP := TRUE;
  FI;
OD;

RETURN (ZQ_TC_MAP);
END Q_S0455_CHK_IF_TC_MAPPED; 
/*END: ADD-WIPRO-B10-MX-MR2-CHANGE*/
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0455_UPD_T18_STD_DTC                             */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/11                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 18 BSS COUNTERS IN MEMORY USING THE USER    */        
/*       BUFFER RECEIVED.                                             */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0250_UPD_DTC_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0455_UPD_T18_STD_DTC: PROC(ZF_LDC_BUF_PTR PTR, 
                              ZF_LDC_LCE_ID  M_LCE_ID,
                              ZF_BSSAP       BOOL);                              
                                                                                
DCL ZQ_J            M_DTC_TRF_CNTRS_TYPE18;     
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE ER263 */
/*DCL ZQ_I,       
    ZQ_K            INT;  */
DCL ZQ_I            INT;       
/* END: ADD-WIPRO-B10-MR1-CHANGE ER263 */
DCL ZQ_BYT          M_BYTE;                                                     
DCL ZQ_CIC          M_CIC; 
DCL ZQ_CIC_REV      ZM_CIC_REV;                                                 
DCL ZQ_FOUND        BOOL;                                 
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE ER263 */
DCL ZQ_INDEX,ZQ_K   INT;
DCL ZQ_INDEX_LONG   LONG_INT;
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE ER263 */
IF ZF_BSSAP
  THEN
  DO WITH ZF_LDC_BUF_PTR -> M_DTC_STD_BSS_CTRS.B_BSS_CNTRS;                       
    DO WITH Z_T18_PTR->;                                                          
/* START : AUPOIP FEATURE */
/*      DO FOR ZQ_J := E_C180A_NBR_CLR_REQ_RADIO_MESS_F TO                          
                     E_C182_NBR_N7_CLEAR_REQ_EST_PHAS; */
        DO FOR ZQ_J := E_C180A_NBR_CLR_REQ_RADIO_MESS_F TO                          
                       E_C181P_NB_ASFAIL_CAL_ID_ALOC;                          
/* END  : AUPOIP FEATURE */

        Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE18(ZQ_J),                            
                                 B_HIS_CC(ZQ_J));                                 
      OD; /* ZQ_J */                                                              
    OD;  /* Z_T18_PTR */                                                          
  OD; /* ZF_LDC_BUF_PTR */
FI;                                                        
                                                                                
DO WITH ZF_LDC_BUF_PTR -> M_DTC_STD_BSS_CTRS;
  DO FOR ZQ_I := 1 TO 31;
    ZQ_CIC := B_TYPE18_ACHAN_CNTRS(ZQ_I).B_CIC;
    /*** REVERSE BYTES ****/                                                 
    ZQ_CIC_REV.ZB_CIC := ZQ_CIC;                                        
    ZQ_BYT := ZQ_CIC_REV.ZB_CIC1;                                            
    ZQ_CIC_REV.ZB_CIC1 := ZQ_CIC_REV.ZB_CIC2;                                
    ZQ_CIC_REV.ZB_CIC2 := ZQ_BYT;                                            
    ZQ_CIC := ZQ_CIC_REV.ZB_CIC;                                        
    IF ZQ_CIC /= ZS_NULL_CIC
      THEN
      ZQ_FOUND := FALSE; 
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE ER263 */
      DO FOR ZQ_K := 1 TO 31 WHILE ZQ_FOUND = FALSE;
        ZQ_INDEX := ((INT(ZF_LDC_LCE_ID)-9)*31)+ZQ_K;
        ZQ_INDEX_LONG := 
              ZM_MAX_CIC_VALUE(ZQ_INDEX);
        /*DO WITH Z_T18_2_PTR->(ZQ_INDEX);*/ 
        DO WITH Z_T18_2_PTR->(ZQ_INDEX_LONG);    
/* END: ADD-WIPRO-B10-MR1-CHANGE ER263 */
          IF B_CIC = ZQ_CIC OR
            B_CIC = ZS_NULL_CIC
            THEN
            ZQ_FOUND := TRUE;
            B_CIC := ZQ_CIC;
            Q_S0080_ADD_INT_TO_DPVAL(B_TYPE18_ACHAN_CNTRS(ZQ_I)
                                     .B_C750,               
                                     B_CIC_CTRS.B_C750_TO_C751
                                     (E_MT_18_CTR_C750));              
            Q_S0080_ADD_INT_TO_DPVAL(B_TYPE18_ACHAN_CNTRS(ZQ_I)
                                     .B_C751,               
                                     B_CIC_CTRS.B_C750_TO_C751
                                     (E_MT_18_CTR_C751));              
          FI;
        OD;
      OD; /* ZQ_J */
    FI;                                                              
  OD;  /* Z_T18_PTR */                                                          
OD; /* ZF_LDC_BUF_PTR */                                                        
                                                                                
END Q_S0455_UPD_T18_STD_DTC;                                                    
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0456_UPD_T110_DTC_BSS                            */        
/*                                                                    */        
/*     PROGRAMMER: L. DIERICK  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 98/01/07                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 110 BSS COUNTERS IN MEMORY USING THE USER   */        
/*       BUFFER RECEIVED.                                             */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0250_UPD_DTC_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
/*3BKA36FBR242748*/
/*Q_S0456_UPD_T110_DTC_BSS: PROC(ZF_LDC_BUF_PTR PTR);*/
Q_S0456_UPD_T110_DTC_BSS: PROC(ZF_LDC_BUF_PTR PTR,
                               ZF_BSSAP BOOL);
/*3BKA36FBR242748*/                                                                                
DO WITH ZF_LDC_BUF_PTR -> M_DTC_STD_BSS_CTRS.B_BSS_CNTRS;                       
  DO WITH Z_T110_6_PTR->;                                                    
    DO WITH B_CTRS_PT6_MT_110;                                                  
                                                                                
      Q_S0080_ADD_INT_TO_DPVAL(                                                 
                B_CNTRS_TYPE110_BSS(E_MC19_BSS_NBR_TERR_CHAN_INC),              
                B_MC19);                                                        
                                                                                
      Q_S0080_ADD_INT_TO_DPVAL(                                                 
                B_CNTRS_TYPE110_BSS(E_MC35_BSS_NBR_NOT_AVLB_TTCH),              
                B_MC35);                                                        
                                                                                
      Q_S0080_ADD_INT_TO_DPVAL(                                                 
                B_CNTRS_TYPE110_BSS(E_MC36_BSS_NBR_AVLB_TTCH),                  
                B_MC36);  
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
     /*Q_S0020_ADD_DP_VALUES(B_CNTRS_LONG_TYPE110_BSS
                 (E_MC940_BSS_MSG_SENT_GSL),
                  B_MC940);
     Q_S0020_ADD_DP_VALUES(B_CNTRS_LONG_TYPE110_BSS
                 (E_MC941_BSS_MSG_DISC_GSL),
                  B_MC941);
     Q_S0020_ADD_DP_VALUES(B_CNTRS_LONG_TYPE110_BSS
                 (E_MC942_AVG_BSS_MSG_GSL_QUE),
                  B_MC942);
     Q_S0020_ADD_DP_VALUES(B_CNTRS_LONG_TYPE110_BSS
                 (E_MC943_BSS_MSG_RESENT_GSL),
                  B_MC943);
     Q_S0020_ADD_DP_VALUES(B_CNTRS_LONG_TYPE110_BSS
                 (E_MC944_BSS_MSG_RCV_GSL),
                  B_MC944);*/
/*3BKA36FBR242748*/
     IF ZF_BSSAP = TRUE THEN  
     /*BEGIN : CR20_299359-LB INTERFACE*/
     DO WITH Z_R_BSS_PAR2_PTR -> ZM_R_BSS_PAR2;
     	IF (D_EN_LB = TRUE OR D_EN_LBNMR = TRUE)
     	THEN
		Q_S0080_ADD_INT_TO_DPVAL(
		   B_CNTRS_TYPE110_BSS(E_MC942_NB_LCS_RESET_TX),
		   B_MC942);

     		Q_S0080_ADD_INT_TO_DPVAL(
		   B_CNTRS_TYPE110_BSS(E_MC943_NB_LCS_RESET_RX),
		   B_MC943);
        ELSE
    	        B_MC942.B_LOW := 0;
		B_MC942.B_HIGH := 0;	
      		B_MC943.B_LOW := 0;
		B_MC943.B_HIGH := 0; 
	FI;
     OD;
     /*END : CR20_299359*/
                 
     /*START: CR36/275131*/ 
     /*Q_S0020_ADD_DP_VALUES(B_CNTRS_LONG_TYPE110_BSS
                 (E_MC940_BSS_NB_A_PAGING_MSG),
                  B_MC940);*/
     /*END: CR36/275131*/
       Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE18
                 (E_C182_NBR_N7_CLEAR_REQ_EST_PHAS),
                  B_MC182); 
     FI;            
/*3BKA36FBR242748*/       
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */                                                                      
                                                                                
    OD;                                                                         
  OD;  /* Z_T110_6_PTR */                                                       
OD; /* ZF_LDC_BUF_PTR */                                                        
                                                                                
END Q_S0456_UPD_T110_DTC_BSS;                                                   
                                                                      
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0460_UPD_T19_STD_DTC                             */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/11                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 19 CELL COUNTERS IN MEMORY USING THE USER   */        
/*       BUFFER RECEIVED. SCOPE IS ALL CELLS.                         */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*                      ZF_ACT_IDX INT,                               */        
/*                      ZF_ALL_CELLS BOOL                             */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0180_CELL_IN_SCOPE                         */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0250_UPD_DTC_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
                                                                                
Q_S0460_UPD_T19_STD_DTC: PROC(ZF_LDC_BUF_PTR PTR,                               
                              ZF_ACT_IDX     INT,                               
                              ZF_ALL_CELLS   BOOL);                             
                                                                                
DCL ZQ_NBR_OF_CELLS   INT;                                                      
DCL ZQ_J              M_HIS_TYPE_19_CTRS;                                       
                                                                                
                                                                                
DO WITH ZF_LDC_BUF_PTR -> M_DTC_STD_CELL_CTRS;

  DO FOR ZQ_NBR_OF_CELLS := 1 TO B_NBR_CELLS;                                   
    /* COPY THE COUNTERS FOR THE CELLS IN THE LIST INTO THE                     
     * DATA STRUCTURE IN MEMORY.                                                
     */                                                                         
    DO WITH B_CELL_CNTRS(ZQ_NBR_OF_CELLS);                                      
      IF (B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC) AND                          
         (B_CELL_IDX > 0) AND                                                   
         (ZF_ALL_CELLS OR                                                       
          Q_S0180_CELL_IN_SCOPE(ZF_ACT_IDX,B_CELL_IDX))                         
      THEN                                                                      
        DO WITH Z_T19_PTR->(B_CELL_IDX);                                        
          /* NOTE THAT THERE IS DIRECT ACCESS TO MEMORY - NO                    
           * SEARCHING FOR A MATCHING CELL AS THEY ARE ASSUMED                  
           * TO BE CONTIGUOUS.                                                  
          */                                                                    
          B_CELL_ID:=B_CELL_IDX;                                                
                                                                                
          IF Z_STD_CELL_LIST(B_CELL_IDX)                                        
          THEN                                                                  
            Q_S0080_ADD_INT_TO_DPVAL(                                           
               B_DTC_TYPE19(E_C194A_NBR_SMS_FAIL_RADIO),                        
               B_HIS_CC_MT_19(E_MT_19_CTR_C194A));                              
                                                                                
            Q_S0080_ADD_INT_TO_DPVAL(                                           
               B_DTC_TYPE19(E_C194B_NBR_SMS_FAIL_BSS_NO_EQPT),                  
               B_HIS_CC_MT_19(E_MT_19_CTR_C194B));                              
                                                                                
            Q_S0080_ADD_INT_TO_DPVAL(                                           
               B_DTC_TYPE19(E_C194C_NBR_SMS_FAIL_PROTOCOL_ER),                  
               B_HIS_CC_MT_19(E_MT_19_CTR_C194C));                              
          ELSE                                                                  
            DO FOR ZQ_J := E_MT_19_CTR_C194A TO E_MT_19_CTR_C194C;              
              B_HIS_CC_MT_19(ZQ_J).B_LOW  := ZS_FFFE;                           
              B_HIS_CC_MT_19(ZQ_J).B_HIGH := ZS_FFFF;                           
            OD;                                                                 
                                                                                
          FI;                                                                   
        OD; /* WITH Z_T19_PTR */                                                
      FI;                                                                       
    OD; /* WITH B_CELL_CNTRS */                                                 
  OD; /* WITH ZQ_NBR_OF_CELLS */                                                
OD; /* WITH THE MAIN BUFFER */                                                  
                                                                                
END Q_S0460_UPD_T19_STD_DTC;                                                    
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0465_UPD_T19_STD_TCU                             */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/11                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 19 CELL COUNTERS IN MEMORY USING THE USER   */        
/*       BUFFER RECEIVED. SCOPE IS ALL CELLS.                         */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*                      ZF_ACT_IDX INT,                               */        
/*                      ZF_ALL_CELLS BOOL                             */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0180_CELL_IN_SCOPE                         */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0465_UPD_T19_STD_TCU: PROC(ZF_LDC_BUF_PTR PTR,                               
                              ZF_ACT_IDX     INT,                               
                              ZF_ALL_CELLS   BOOL);                             
                                                                                
DCL ZQ_NBR_CELLS  INT;                                                          
DCL ZQ_J          M_HIS_TYPE_19_CTRS;                                           
DCL ZQ_I          M_TCU_TYPE_19;                                                
                                                                                
DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_STD_CTRS_AREA; 
  ZQ_NBR_CELLS := B_NBR_CELLS;  
OD;                     
                                                                                
DO WHILE ZQ_NBR_CELLS /= 0;                                                     
  DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_STD_CTRS_AREA;                          
    DO WITH B_CELL_CNTRS(ZQ_NBR_CELLS);                                         
    /* COPY THE COUNTERS FOR THE CELLS IN THE LIST INTO THE                     
     * DATA STRUCTURE IN MEMORY.                                                
     */                                                                         
      IF (B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC) AND                          
         (B_CELL_IDX > 0) AND                                                   
         (ZF_ALL_CELLS OR                                                       
          Q_S0180_CELL_IN_SCOPE(ZF_ACT_IDX,B_CELL_IDX))                         
      THEN                                                                      
        DO WITH Z_T19_PTR->(B_CELL_IDX);                                        
          /* NOTE THAT THERE IS DIRECT ACCESS TO MEMORY - NO                    
           * SEARCHING FOR A MATCHING CELL AS THEY ARE ASSUMED                  
           * TO BE CONTIGUOUS.                                                  
           */                                                                   
          B_CELL_ID:=B_CELL_IDX;                                                
                                                                                
          IF Z_STD_CELL_LIST(B_CELL_IDX)                                        
          THEN                                                                  
            /* ADD C190, C191, C192, C193 */                                    
            DO FOR ZQ_I := E_C190_NBR_SDCCH_SMS_ORIG_TRANS TO                   
                           E_C193_NBR_SACCH_SMS_TERM_TRANS;                     
                                                                                
              ZQ_J := M_HIS_TYPE_19_CTRS(INT(E_MT_19_CTR_C190) +                
                               INT(ZQ_I) -                                      
                               INT(E_C190_NBR_SDCCH_SMS_ORIG_TRANS));           
                                                                                
              Q_S0080_ADD_INT_TO_DPVAL(                                         
                                  B_CNTRS_TYPE_19(ZQ_I),                        
                                  B_HIS_CC_MT_19(ZQ_J));                        
            OD;                                                                 
                                                                                
            Q_S0080_ADD_INT_TO_DPVAL(                                           
               B_CNTRS_TYPE_19(E_C195_NBR_SMS_SAPI3_ERR_IND),                   
               B_HIS_CC_MT_19(E_MT_19_CTR_C195));                               
          ELSE                                                                  
            DO FOR ZQ_J := E_MT_19_CTR_C190 TO E_MT_19_CTR_C193;                
              B_HIS_CC_MT_19(ZQ_J).B_LOW  := ZS_FFFE;                           
              B_HIS_CC_MT_19(ZQ_J).B_HIGH := ZS_FFFF;                           
            OD;                                                                 
            B_HIS_CC_MT_19(E_MT_19_CTR_C195).B_LOW  := ZS_FFFE;                 
            B_HIS_CC_MT_19(E_MT_19_CTR_C195).B_HIGH := ZS_FFFF;                 
          FI;                                                                   
                                                                                
        OD; /* WITH Z_T19_PTR */                                                
      FI;                                                                       
    OD; /* WITH B_CELL_CNTRS */                                                 
  OD; /* WITH MAIN BUFFER */                                                    
  ZQ_NBR_CELLS := ZQ_NBR_CELLS - 1;                                             
OD; /* WITH ZQ_NBR_CELLS */                                                     
                                                                                
END Q_S0465_UPD_T19_STD_TCU;                                                    
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0470_UPDATE_CCI_TYPE8                            */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/09/17                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 8 X25 COUNTERS IN MEMORY USING THE USER     */        
/*       BUFFER RECEIVED. NOTE THAT THERE IS ONE X25 PER LDCP.        */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*                      ZF_LCE_ID M_LCE_ID                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0471_UPD_TYPE8_COUNTERS                    */        
/*     CALLED FROM:                                                   */        
/*                      P_GDXBYX_UPD_CCI_STD_CTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
                                                                                
Q_S0470_UPDATE_CCI_TYPE8: PROC(ZF_LDC_BUF_PTR PTR,                              
                               ZF_LCE_ID      M_LCE_ID);                        
                                                                                
DCL ZQ_LCE_CNT   INT;                                                           
DCL ZQ_LCE_FND   INT;                                                           
                                                                                
ZQ_LCE_FND := 0;                                                                
DO FOR ZQ_LCE_CNT := 1 TO CM_FY32_TYPE_08_REC WHILE ZQ_LCE_FND = 0;             
  DO WITH Z_T8_PTR -> (ZQ_LCE_CNT);                                             
    DO WITH B_HIS_DATA_08;                                                      
/* BEGIN :ADD-WIPRO-B10-MR1-CHANGE CR20/207886 */
      IF B_LINK_ID = ZM_LCE_ID_OMCP_X25 OR                                               
         B_LINK_ID = M_LCE_ID_NULL                                              
/* END :ADD-WIPRO-B10-MR1-CHANGE CR20/207886 */
      THEN                                                                      
        ZQ_LCE_FND := ZQ_LCE_CNT;                                               
/* BEGIN :ADD-WIPRO-B10-MR1-CHANGE CR20/207886 */
       /* B_LINK_ID := ZF_LCE_ID; */
          B_LINK_ID := ZM_LCE_ID_OMCP_X25;
/* END :ADD-WIPRO-B10-MR1-CHANGE CR20/207886 */

        Q_S0471_UPD_TYPE8_COUNTERS(ZF_LDC_BUF_PTR,                              
                                   ->B_HIS_DATA_08);                            
                                                                                
      FI; /* LCE_ID FOUND */                                                    
    OD;                                                                         
  OD; /* DO WITH Z_T8_PTR */                                                    
OD;                                                                             
                                                                                
END Q_S0470_UPDATE_CCI_TYPE8;                                                   
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0471_UPD_TYPE8_COUNTERS                          */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/09/17                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 8 X25 COUNTERS IN MEMORY USING THE USER     */        
/*       BUFFER RECEIVED. NOTE THAT THERE IS ONE X25 PER LDCP.        */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*                      ZF_T8_CNTS_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0040_ADD_INT_TO_INT                        */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0470_UPDATE_CCI_TYPE8                      */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0471_UPD_TYPE8_COUNTERS: PROC(ZF_LDC_BUF_PTR  PTR,                           
                                 ZF_T8_CNTS_PTR  PTR);                          
                                                                                
DCL ZQ_DEST_IDX  M_TYPE_08_CTRS,                                                
    ZQ_SRC_IDX   M_X25_L3_CALL_STATS;                                           
                                                                                
DO WITH ZF_T8_CNTS_PTR->M_X25_CC_DATA;                                          
  ZQ_SRC_IDX:=E_SUCC_INC_CALLS;                                                 
                                                                                
  /* NOTE THAT MUCH OF THE X25 COUNTERS ARE IN RESTRICTION                      
   * FOR R5.                                                                    
   */                                                                           
  DO FOR ZQ_DEST_IDX:=E_08_SUCC_INC_CALLS TO E_08_UNSUCC_OTG_CALLS;             
    DO WITH ZF_LDC_BUF_PTR -> M_X25_BUFFER;                                     
      Q_S0040_ADD_INT_TO_INT(                                                   
            B_X25_STATS.B_L3_CALL_STATS(ZQ_SRC_IDX),                            
            B_HIS_CC_MT_08(ZQ_DEST_IDX));                                       
                                                                                
      ZQ_SRC_IDX:=SUCC(ZQ_SRC_IDX);                                             
    OD; /* DO WITH USER BUFFER FORMAT */                                        
  OD; /* DO FOR ALL ELEMENTS */                                                 
OD; /* DO WITH HISTORY FILE FORMAT */                                           
                                                                                
END Q_S0471_UPD_TYPE8_COUNTERS;                                                 
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0473_UPD_N7_SCPR_T110_5                          */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                J.P. QUINN                           98/01/05       */        
/*                                                                    */        
/*     CREATION DATE: 10/11/97                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATE TYPE 110 N7 COUNTERS FROM SYS-CPR                     */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0140_GET_CIC_FROM_LCEID                    */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*                      Q_S0040_ADD_INT_TO_INT                        */        
/*     CALLED FROM:                                                   */        
/*                      P_GDXBYX_UPD_CCI_STD_CTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0473_UPD_N7_SCPR_T110_5: PROC(ZF_LDC_BUF_PTR PTR);                           
                                                                                
DCL ZQ_SLC_LOC       INT,                                                       
    ZQ_SLC_FND       INT,                                                       
    ZQ_NSL           INT;                                                       
DCL ZQ_CIC           M_CIC;                                                     
DCL ZQ_SLC_N7        M_SLC_N7;                                                     
                                                                                
DO WITH ZF_LDC_BUF_PTR -> M_N7_CPR.B_LINK_CNTRS; 
  ZQ_NSL := B_NBR_SL;
OD;
IF ZQ_NSL > ZS_MAX_SLC_N7 OR                                                    
   ZQ_NSL < 0                                                                   
THEN                                                                            
  /* OUT OF RANGE */                                                            
  Q_S0010_CCDC_ERROR(M_ERC6_USER_REC,                                           
                     M_ERT0019_INC_MESS_DATA, 21, 0194);                        
  RETURN;                                                                       
FI;                                                                             
DO WITH ZF_LDC_BUF_PTR -> M_N7_CPR.B_LINK_CNTRS;                                
  ZQ_NSL := B_NBR_SL;                                                           
                                                                                
  DO FOR ZQ_NSL:=1 TO B_NBR_SL; 
    /*CR20/223453*/
    ZQ_SLC_N7 := Q_S0141_GET_SLC_FROM_LCEID
                          (B_CTRS_AR(ZQ_NSL).B_LCE_ID_C);
    ZQ_CIC := Q_S0140_GET_CIC_FROM_LCEID(B_CTRS_AR(ZQ_NSL).B_LCE_ID_C
                                         ,ZQ_SLC_N7);         
    /*CR20/223453*/
                                                                                
    ZQ_SLC_FND := 0;                                                            
    DO FOR ZQ_SLC_LOC := 1 TO ZS_MAX_SLC_N7 WHILE ZQ_SLC_FND = 0;               
      DO WITH B_CTRS_AR(ZQ_NSL);                                                
        DO WITH Z_T110_5_PTR->(ZQ_SLC_LOC);                                     
          IF B_LINK_ID = ZQ_CIC OR                                              
             B_LINK_ID = ZS_NULL_CIC                                            
          THEN                                                                  
            ZQ_SLC_FND := ZQ_SLC_LOC;                                           
            B_LINK_ID := ZQ_CIC;                                                
            DO WITH B_CTRS_PT5_MT_110;                                          
              Q_S0080_ADD_INT_TO_DPVAL(                                         
                      B_LINK_CTRS(E_TAB1_1_CTR_C),                              
                      B_MN1_1);                                                 
                                                                                
          /*  Q_S0040_ADD_INT_TO_INT(                                           
                      B_LINK_CTRS(E_TAB2_1_CTR_C),                              
                      B_MN2_1);  CR 20/131170 */
                                                                                
            OD;                                                                 
          FI;                                                                   
        OD;                                                                     
      OD;                                                                       
    OD;                                                                         
  OD;                                                                           
OD;                                                                             
                                                                                
END Q_S0473_UPD_N7_SCPR_T110_5;                                                 
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0474_UPD_T9_CPR_N7                               */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                J.P. QUINN                           98/01/05       */        
/*                                                                    */        
/*     CREATION DATE: 10/11/97                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATE TYPE 9 N7 STANDARD COUNTERS FROM DTC N7.              */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0140_GET_CIC_FROM_LCEID                    */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*                      Q_S0040_ADD_INT_TO_INT                        */        
/*                      Q_S0020_ADD_DP_VALUES                         */        
/*     CALLED FROM:                                                   */        
/*                      P_GDXBYX_UPD_CCI_STD_CTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0474_UPD_T9_CPR_N7: PROC(ZF_LDC_BUF_PTR PTR);                                
                                                                                
DCL ZQ_SLC_LOC       INT,                                                       
    ZQ_SLC_FND       INT,                                                       
    ZQ_TEMP_DPVAL    M_STA_DPVAL,                                               
    ZQ_NSL           INT;                                                       
DCL ZQ_CIC           M_CIC;                                                     
DCL ZQ_SLC_N7        M_SLC_N7;
DCL ZQ_SRC_IDX       M_LINK_CTRS_TYPES,                                         
    ZQ_DEST_IDX      RANGE(E_MT_09_CTR_N1_2 :                                   
                           E_MT_09_CTR_N3_10);                                  
                                                                                
DO WITH ZF_LDC_BUF_PTR -> M_N7_CPR.B_LINK_CNTRS; 
  ZQ_NSL := B_NBR_SL;
OD;
IF ZQ_NSL > ZS_MAX_SLC_N7 OR                                                    
   ZQ_NSL < 0                                                                   
THEN                                                                            
  /* OUT OF RANGE */                                                            
  Q_S0010_CCDC_ERROR(M_ERC6_USER_REC,                                           
                     M_ERT0019_INC_MESS_DATA, 22, 0194);                        
  RETURN;                                                                       
FI;                                                                             
DO WITH ZF_LDC_BUF_PTR -> M_N7_CPR.B_LINK_CNTRS;                                
  ZQ_NSL := B_NBR_SL;                                                           
                                                                                
  DO FOR ZQ_NSL:=1 TO B_NBR_SL;                                                 
    /*CR20/223453*/
    ZQ_SLC_N7 := Q_S0141_GET_SLC_FROM_LCEID
                          (B_CTRS_AR(ZQ_NSL).B_LCE_ID_C);
    ZQ_CIC := Q_S0140_GET_CIC_FROM_LCEID(B_CTRS_AR(ZQ_NSL).B_LCE_ID_C
                                         ,ZQ_SLC_N7);         
    /*CR20/223453*/
                                                                                
    ZQ_SLC_FND := 0;                                                            
    DO FOR ZQ_SLC_LOC := 1 TO ZS_MAX_SLC_N7 WHILE ZQ_SLC_FND = 0;               
      DO WITH Z_T9_PTR->(ZQ_SLC_LOC);                                           
        DO WITH B_HIS_LINK_MEAS;                                                
          IF B_LINKID = ZQ_CIC OR                                               
             B_LINKID = ZS_NULL_CIC                                             
          THEN                                                                  
            ZQ_SLC_FND := ZQ_SLC_LOC;                                           
            B_LINKID := ZQ_CIC;                                                 
            DO WITH B_CTRS_AR(ZQ_NSL);                                          
              Q_S0080_ADD_INT_TO_DPVAL(                                         
                      B_LINK_CTRS(E_TAB1_1_CTR_C),                              
                      B_N11);                                                   
                                                                                
              ZQ_DEST_IDX:=E_MT_09_CTR_N1_2;                                    
                                                                                
              DO FOR ZQ_SRC_IDX:=E_TAB1_2_CTR_C TO                              
                                 E_TAB3_7_CTR_C;                                
             /* REMOVE BY CHENZY
                IF ZQ_SRC_IDX /= E_TAB2_5_CTR_C AND                             
                   ZQ_SRC_IDX /= E_TAB2_6_CTR_C                                 
                THEN  */
                Q_S0040_ADD_INT_TO_INT(                                       
                    B_LINK_CTRS(ZQ_SRC_IDX),                                  
                    B_FROM_N12_TO_N37(ZQ_DEST_IDX));                          
                ZQ_DEST_IDX:=SUCC(ZQ_DEST_IDX);                               
             /* REMOVE BY CHENZY
                FI;*/                                                             
              OD;  
                                                                                
              ZQ_TEMP_DPVAL.B_LOW:=B_LINK_CTRS(E_TAB3_10_CTR_LO_C);             
              ZQ_TEMP_DPVAL.B_HIGH:=B_LINK_CTRS(E_TAB3_10_CTR_HI_C);            
                                                                                
              Q_S0020_ADD_DP_VALUES(ZQ_TEMP_DPVAL,                              
                                    B_N310);                                    
                                                                                
              Q_S0040_ADD_INT_TO_INT(                                           
                        B_LINK_CTRS(E_TAB3_11_CTR_C),                           
                        B_N311);                                                
            OD; /* DO WITH B_CTRS_AR */                                         
          FI;                                                                   
        OD; /* DO WITH B_HIS_LINK_MEAS */                                       
      OD; /* DO WITH Z_T9_PTR */                                                
    OD;                                                                         
  OD; /* DO FOR NSL */                                                          
OD; /* DO FOR ZF_LDC_ */                                                        
                                                                                
DO WITH ZF_LDC_BUF_PTR -> M_N7_CPR;                                             
  DO WITH Z_T9_PTR->(1);                                                        
    DO WITH B_HIS_LINK_SET;                                                     
      B_LINKSET_ID := 1;                                                        
      Q_S0080_ADD_INT_TO_DPVAL(B_LNKSET_CNTRS(E_TAB4_2_CTR_C),                  
                               B_N42);                                          
    OD;                                                                         
  OD;                                                                           
OD;                                                                             
                                                                                
END Q_S0474_UPD_T9_CPR_N7;                                                      
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0475_UPD_T9_TP_N7                                */        
/*                                                                    */        
/*     PROGRAMMER: CHEN ZHANGYI  (ASB)                                */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 04/10/29                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATE TYPE 9 N7 STANDARD COUNTERS FROM TP.                  */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0140_GET_CIC_FROM_LCEID                    */        
/*                      Q_S0060_ADD_LONG_INT                          */        
/*     CALLED FROM:                                                   */        
/*                      P_GDXBYX_UPD_CCI_STD_CTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0475_UPD_T9_TP_N7: PROC(ZF_LDC_BUF_PTR PTR);                           
                                                                                
DCL ZQ_SLC_IDX       INT;                                                       
DCL ZQ_SL_FND        INT;                                                       
DCL ZQ_CIC           M_CIC;                                                     
DCL ZQ_SRC_IDX       M_SLH_CNTR_NAME,                                           
    ZQ_DEST_IDX      RANGE(E_MT_09_CTR_N1_8:                                    
                           E_MT_09_CTR_N3_5);                                   
DCL ZQ_N7_LINKS      INT;
DCL ZQ_LCE_ID        M_LCE_ID;
DCL ZQ_IDX           INT;

DO WITH ZF_LDC_BUF_PTR -> ZM_PM_TP_N7_DATA;
  DO WITH B_TP_PM_N7_CNTRS;
    IF B_NBR_N7_LINKS > 0
    THEN
      DO FOR ZQ_N7_LINKS :=1 TO B_NBR_N7_LINKS;
        DO WITH B_TP_N7_CNTRS(ZQ_N7_LINKS - 1);
          DO FOR ZQ_IDX := 1 TO CM_FY32_PM_MAX_NBR_DTC_N7;
            DO WITH Z_R_N7_CONF_PTR -> ZM_R_N7_CONF(ZQ_IDX);
              IF (D_SLC = B_SLC) AND (D_LCE_ID /= ZS_FFFF)
              THEN
                /*CR20/223453*/
                ZQ_CIC := Q_S0140_GET_CIC_FROM_LCEID(D_LCE_ID,
                                                    D_SLC);
                /*CR20/223453*/
                ZQ_SL_FND := 0;
                DO FOR ZQ_SLC_IDX := 1 TO ZS_MAX_SLC_N7 
                                    WHILE ZQ_SL_FND = 0;                  
                  DO WITH Z_T9_PTR -> (ZQ_SLC_IDX);                                           
                    DO WITH B_HIS_LINK_MEAS;                                                  
                      IF B_LINKID = ZQ_CIC OR                                                 
                         B_LINKID = ZS_NULL_CIC                                               
                      THEN                                                                    
                        ZQ_SL_FND := ZQ_SLC_IDX;                                              
                        B_LINKID  := ZQ_CIC;                                                  
                                                                                
                        ZQ_DEST_IDX:=E_MT_09_CTR_N1_8;
                        DO FOR ZQ_SRC_IDX :=
                               E_N1_8_SLHC_SIG_UNIT_IN_ERROR TO                 
                               E_N3_5_SLHC_MSUS_RECEIVED;                       
                                                                                
                          Q_S0060_ADD_LONG_INT(                                               
                                 B_SLH_CNTRS(ZQ_SRC_IDX),                           
                                 B_FROM_N18_TO_N35(ZQ_DEST_IDX));                   
                                                                                
                          IF ZQ_SRC_IDX/=E_N3_5_SLHC_MSUS_RECEIVED                            
                          THEN                                                                
                            ZQ_DEST_IDX:=SUCC(ZQ_DEST_IDX);                                   
                          FI;                                                                 
                        OD;                                                                   
                      FI;                                                                     
                    OD;                                                                       
                  OD;  /* DO WITH Z_T9_PTR */                                                 
                OD;
              FI;
            OD;
          OD;
        OD;
      OD;
    FI;
  OD;
OD;

END Q_S0475_UPD_T9_TP_N7;                                                      

/*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE */

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S4475_UPD_T9_TC_MTP2                              */        
/*                                                                    */        
/*     PROGRAMMER: CHEN ZHANGYI  (ASB)                                */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 04/10/29                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATE TYPE 9 N7 STANDARD COUNTERS FROM TP.                  */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0140_GET_CIC_FROM_LCEID                    */        
/*                      Q_S0060_ADD_LONG_INT                          */        
/*     CALLED FROM:                                                   */        
/*                      P_GDXBYX_UPD_CCI_STD_CTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S4475_UPD_T9_TC_MTP2: PROC(ZF_LDC_BUF_PTR PTR);                           

DCL ZQ_SLC_IDX       INT;                                                       
DCL ZQ_SL_FND        INT;                                                       
DCL ZQ_CIC           M_CIC;                                                     
DCL ZQ_SRC_IDX       M_SLH_CNTR_NAME,                                           
    ZQ_DEST_IDX      RANGE(E_MT_09_CTR_N1_8:                                    
                           E_MT_09_CTR_N3_5);                                   
DCL ZQ_N7_LINKS      INT;
DCL ZQ_LCE_ID        M_LCE_ID;
DCL ZQ_IDX           INT;

/*BEGIN:Added for  FR36_283265 */
DCL ZQ_PM_DATA       ZM_PM_DATA;
DCL ZQ_TIME          INT;
DCL ZQ_NBR_N7_LINKS  INT;
DCL ZQ_PTR           PTR;
DCL ZQ_SLC_N7        M_SLC_N7;
DCL ZQ_CTR           M_SLH_CNTR_NAME;
/*SATRT : FR36/292347 */
DCL ZQ_LEN_AND_N7_VALID BOOL ;
/*END : FR36/292347 */

/*END: Added for  FR36_283265 */

/* START : WIPRO B11 IP MR0 PKG1 */
/* SRINIVAS : ADDED TO CHECK REAL PERIOD */
/* NOTE THAT OPTIMIZATION SCOPE IS THERE AT ELSE */
DCL ZQ_TMP_CTR M_LONG_INT;
ZQ_TMP_CTR.B_HIGH := ZS_FFFF;
ZQ_TMP_CTR.B_LOW := ZS_FFFF;
/*SATRT : FR36/292347 */
ZQ_LEN_AND_N7_VALID:=FALSE; 
/*END : FR36/292347 */

/* END : WIPRO B11 IP MR0 PKG1 */

/*BEGIN: Added for  FR36_283265 */
DO WITH ZF_LDC_BUF_PTR -> M_TC_PM_DATA; 
 DO WITH ZQ_PM_DATA;
/*SATRT : FR36/292347 */
  B_PERIOD:=0;
IF B_PM_DATA_LEN>0 AND B_PM_DATA_LEN<= SIZEOF(B_PM_DATA)
 THEN 
 
   ZQ_PTR := ->ZQ_TIME;
   ZQ_PTR -> ZM_INT.ZB_BYTE1 := B_PM_DATA(B_PM_DATA_LEN);
   ZQ_PTR -> ZM_INT.ZB_BYTE2 := B_PM_DATA(B_PM_DATA_LEN - 1);
   B_PERIOD := ZQ_TIME;
 ELSE
 TRACEINFO := 'INVALID PM_DATA_LEN=%d          ';
   TRC_BSC_PM1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_CCDC_SSM),
              TRACEID(ERIR),
              TRACEINFO,
              LONG_INT((B_PM_DATA_LEN)),
              LONG_INT((0)),
              LONG_INT((0)));
FI;

/*END : FR36/292347 */
ZQ_IDX := 2; /* To read No of N7 links */

   ZQ_PTR := ->ZQ_NBR_N7_LINKS;
   ZQ_PTR -> ZM_INT.ZB_BYTE1 := B_PM_DATA(ZQ_IDX);
   ZQ_PTR -> ZM_INT.ZB_BYTE2 := B_PM_DATA(ZQ_IDX - 1);
   B_NBR_N7_LINKS := ZQ_NBR_N7_LINKS;
 
/* START : FR36/292347 */
IF (B_PM_DATA_LEN>0 AND B_PM_DATA_LEN<= SIZEOF(B_PM_DATA))
     AND ( B_NBR_N7_LINKS>0 AND 
     B_NBR_N7_LINKS<=CM_FY32_PM_MAX_NBR_DTC_N7)
THEN 
  ZQ_LEN_AND_N7_VALID:=TRUE; 
FI;   
  
IF B_NBR_N7_LINKS>CM_FY32_PM_MAX_NBR_DTC_N7
   OR B_NBR_N7_LINKS<0 
  THEN
  TRACEINFO := 'INVALID NUMBER OF N7 = %d LINK  ';

  TRC_BSC_PM1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_CCDC_SSM),
              TRACEID(ERIR),
              TRACEINFO,
              LONG_INT((B_NBR_N7_LINKS)),
              LONG_INT((0)),
              LONG_INT((0)));

     B_NBR_N7_LINKS:=CM_FY32_PM_MAX_NBR_DTC_N7;
FI;   
/*END : FR36/292347 */

     DO FOR ZQ_N7_LINKS := 1 TO B_NBR_N7_LINKS;

        DO WITH B_TC_PM_N7_CNTRS(ZQ_N7_LINKS - 1);

         ZQ_IDX := ZQ_IDX + 2; /* To read SLC ID of each link */ 

          ZQ_PTR := ->ZQ_SLC_N7;
          ZQ_PTR -> ZM_INT.ZB_BYTE1 := B_PM_DATA(ZQ_IDX);
           /* As SLC_ID is of one byte, taken only higher byte*/
          B_SLC := ZQ_SLC_N7;

      
          DO FOR  ZQ_CTR :=  E_N1_8_SLHC_SIG_UNIT_IN_ERROR TO
                         E_N3_5_SLHC_MSUS_RECEIVED;
            
            ZQ_IDX := ZQ_IDX + 4; /* start retrive the counters */

            ZQ_PTR := ->B_SLH_CNTRS(ZQ_CTR);
            ZQ_PTR ->ZM_LONG.ZB_BYTE4 := B_PM_DATA(ZQ_IDX - 3) ;
            ZQ_PTR ->ZM_LONG.ZB_BYTE3 := B_PM_DATA(ZQ_IDX - 2);
            ZQ_PTR ->ZM_LONG.ZB_BYTE2 := B_PM_DATA(ZQ_IDX - 1 );
            ZQ_PTR ->ZM_LONG.ZB_BYTE1 := B_PM_DATA(ZQ_IDX);
         
          OD; 
        OD; 
    OD;
  OD;
OD;
  
/*DO WITH ZF_LDC_BUF_PTR -> ZM_TC_PM_DATA;
  DO WITH B_PM_DATA;*/

DO WITH ZQ_PM_DATA;
/*END: Added for FR36_283265 */

/* START : WIPRO B11 IP MR0 PKG1 */
/*START : FR36/292347 */
    IF (B_PERIOD <= ZS_PER_MAX_INSEC AND B_PERIOD >= ZS_PER_MIN_INSEC)
       AND (ZQ_LEN_AND_N7_VALID=TRUE)
/*END : FR36/292347 */

    THEN
/* END : WIPRO B11 IP MR0 PKG1 */
      IF B_NBR_N7_LINKS > 0
      THEN
        DO FOR ZQ_N7_LINKS :=1 TO B_NBR_N7_LINKS;
          DO WITH B_TC_PM_N7_CNTRS(ZQ_N7_LINKS - 1);
            DO FOR ZQ_IDX := 1 TO CM_FY32_PM_MAX_NBR_DTC_N7;
              DO WITH Z_R_N7_CONF_PTR -> ZM_R_N7_CONF(ZQ_IDX);
                IF (D_SLC = B_SLC) AND (D_LCE_ID /= ZS_FFFF)
                THEN
                  ZQ_CIC := Q_S0140_GET_CIC_FROM_LCEID(D_LCE_ID,D_SLC);
                  ZQ_SL_FND := 0;
                  DO FOR ZQ_SLC_IDX := 1 TO ZS_MAX_SLC_N7 
                                    WHILE ZQ_SL_FND = 0;                  
                    DO WITH Z_T9_PTR -> (ZQ_SLC_IDX);                                           
                    DO WITH B_HIS_LINK_MEAS;                                                  
                      IF B_LINKID = ZQ_CIC OR                                                 
                         B_LINKID = ZS_NULL_CIC                                               
                      THEN                                                                    
                        ZQ_SL_FND := ZQ_SLC_IDX;                                              
                        B_LINKID  := ZQ_CIC;                                                  
                                                                                
                        ZQ_DEST_IDX:=E_MT_09_CTR_N1_8;                                        
                        DO FOR ZQ_SRC_IDX := 
                               E_N1_8_SLHC_SIG_UNIT_IN_ERROR TO                 
                               E_N3_5_SLHC_MSUS_RECEIVED;                       
                                                                                
                          Q_S0060_ADD_LONG_INT(                                               
                                 B_SLH_CNTRS(ZQ_SRC_IDX),                           
                                 B_FROM_N18_TO_N35(ZQ_DEST_IDX));                   
                                                                                
                          IF ZQ_SRC_IDX/=E_N3_5_SLHC_MSUS_RECEIVED                            
                          THEN                                                                
                            ZQ_DEST_IDX:=SUCC(ZQ_DEST_IDX);                                   
                          FI;                                                                 
                        OD;                                                                   
                      FI;                                                                     
                    OD;                                                                       
                    OD;  /* DO WITH Z_T9_PTR */                                                 
                  OD;
                FI;
              OD;
            OD;
          OD;
        OD;
      FI;
/* START : WIPRO B11 IP MR0 PKG1 */
    ELSE
/*START:  CR36/288765  */ 
        TRACEINFO := 'TC- T9 MTP2 REAL PERIOD=%d N_I_R';
           TRC_BSC_PM1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_CCDC_SSM),
              TRACEID(ERIR),
              TRACEINFO,
              LONG_INT((B_PERIOD)),
              LONG_INT((0)),
              LONG_INT((0))); 
/*END:  CR36/288765  */ 
      IF B_NBR_N7_LINKS > 0
      THEN
        DO FOR ZQ_N7_LINKS :=1 TO B_NBR_N7_LINKS;
          DO WITH B_TC_PM_N7_CNTRS(ZQ_N7_LINKS - 1);
           DO FOR ZQ_IDX := 1 TO CM_FY32_PM_MAX_NBR_DTC_N7;
            DO WITH Z_R_N7_CONF_PTR -> ZM_R_N7_CONF(ZQ_IDX);
             IF (D_SLC = B_SLC) AND (D_LCE_ID /= ZS_FFFF)
             THEN
             ZQ_CIC := Q_S0140_GET_CIC_FROM_LCEID(D_LCE_ID,D_SLC);
             ZQ_SL_FND := 0;
             DO FOR ZQ_SLC_IDX := 1 TO ZS_MAX_SLC_N7
                                  WHILE ZQ_SL_FND = 0;
              DO WITH Z_T9_PTR -> (ZQ_SLC_IDX);
                DO WITH B_HIS_LINK_MEAS;
                  IF B_LINKID = ZQ_CIC OR
                     B_LINKID = ZS_NULL_CIC
                  THEN
                    ZQ_SL_FND := ZQ_SLC_IDX;
                    B_LINKID  := ZQ_CIC;

                    ZQ_DEST_IDX:=E_MT_09_CTR_N1_8;
                    DO FOR ZQ_SRC_IDX :=
                      E_N1_8_SLHC_SIG_UNIT_IN_ERROR TO
                      E_N3_5_SLHC_MSUS_RECEIVED;

                      Q_S0060_ADD_LONG_INT(
                             ZQ_TMP_CTR,
                             B_FROM_N18_TO_N35(ZQ_DEST_IDX));

                      IF ZQ_SRC_IDX/=E_N3_5_SLHC_MSUS_RECEIVED
                      THEN
                        ZQ_DEST_IDX:=SUCC(ZQ_DEST_IDX);
                      FI;
                    OD;
                  FI;
                 OD;
               OD;  /* DO WITH Z_T9_PTR */
             OD;
            FI;
           OD;
          OD;
        OD;
      OD;
    FI;
   FI;
/*  OD; */
OD;

END Q_S4475_UPD_T9_TC_MTP2;                                                      
/* END: ADD-WIPRO-B10-MX-MR2-CHANGE */

/* START : WIPRO B11 IP MR0 PKG1 */
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0569_UPD_T35_TC_IP                               */        
/*                                                                    */        
/*     PROGRAMMER: SRINIVAS                                           */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 04/10/29                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATE TYPE 35 TC IP COUNTERS FROM TP.                       */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0140_GET_CIC_FROM_LCEID                    */        
/*                      Q_S0060_ADD_LONG_INT                          */        
/*     CALLED FROM:                                                   */        
/*                      P_GDXBYX_UPD_CCI_STD_CTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0569_UPD_T35_TC_IP: PROC(ZF_LDC_BUF_PTR PTR,
                            ZF_TC_ID M_TC_ID);                           
/*Commented by TCINVALIDISSUES*/
/*DCL ZQ_SRC_IDX       M_SLH_CNTR_NAME,                                           
    ZQ_DEST_IDX      RANGE(E_MT_09_CTR_N1_8:                                    
                           E_MT_09_CTR_N3_5);                                   
DCL ZQ_LCE_ID        M_LCE_ID;
DCL ZQ_IDX           INT;*/
/* SRINIVAS : ADDED TO CHECK REAL PERIOD */
/* NOTE THAT OPTIMIZATION SCOPE IS THERE AT ELSE */
/*DCL ZQ_TMP_CTR M_LONG_INT;
ZQ_TMP_CTR.B_HIGH := ZS_FFFF;
ZQ_TMP_CTR.B_LOW := ZS_FFFF;

DO WITH ZF_LDC_BUF_PTR -> ZM_TC_IP_PM_DATA;
  DO WITH B_IP_PM_DATA;
   IF B_PERIOD <= ZS_PER_MAX AND B_PERIOD >= ZS_PER_MIN
   THEN
     DO WITH Z_T35_4_PTR ->(ZM_TC_INDEX_VALUE(ZF_TC_ID));
        B_TC_IDX := ZF_TC_ID;
        B_FILLER := H'FF;
        DO WITH B_CTRS_PT4_MT_35;
           Q_S0060_ADD_LONG_INT(                                               
           B_TC_PM_IP_CNTRS(E_IP28A_NB_TC_SENT_TCSL_IP_BYT),                           
           B_IP21_TO_IP28H(E_MT_35_CTR_IP28A));                   

           Q_S0060_ADD_LONG_INT(                                               
           B_TC_PM_IP_CNTRS(E_IP28B_NB_TC_SENT_SS7_IP_BYT),                           
           B_IP21_TO_IP28H(E_MT_35_CTR_IP28B));                   
                                                                                
           Q_S0060_ADD_LONG_INT(                                               
           B_TC_PM_IP_CNTRS(E_IP28C_NB_TC_SENT_TCSL_IP_PKT),                           
           B_IP21_TO_IP28H(E_MT_35_CTR_IP28C));                   

           Q_S0060_ADD_LONG_INT(                                               
           B_TC_PM_IP_CNTRS(E_IP28D_NB_TC_SENT_SS7_IP_PKT),                           
           B_IP21_TO_IP28H(E_MT_35_CTR_IP28D));                   

           Q_S0060_ADD_LONG_INT(                                               
           B_TC_PM_IP_CNTRS(E_IP28F_TC_RESND_SS7_SCTP_SEG),                           
           B_IP21_TO_IP28H(E_MT_35_CTR_IP28F));                   

           Q_S0060_ADD_LONG_INT(                                               
           B_TC_PM_IP_CNTRS(E_IP28H_TC_SND_TCSL_BYT_HI_MIN),                           
           B_IP21_TO_IP28H(E_MT_35_CTR_IP28G));                   

           Q_S0060_ADD_LONG_INT(                                               
           B_TC_PM_IP_CNTRS(E_IP28G_TC_SND_SS7_BYT_HI_MIN),                           
           B_IP21_TO_IP28H(E_MT_35_CTR_IP28H));
       OD;
     OD;  
     DO WITH Z_T35_3_PTR ->(ZM_TC_INDEX_VALUE(ZF_TC_ID));
        B_TC_IDX := ZF_TC_ID;
        B_FILLER := H'FF;
        DO WITH B_CTRS_PT3_MT_35;                            
           Q_S0060_ADD_LONG_INT(                                               
           B_TC_PM_IP_CNTRS(E_IP33A_TC_TO_TC_SND_IPTCH_PKT),                           
           B_IP33A_TO_IP33F(E_MT_35_CTR_IP33A));                   

           Q_S0060_ADD_LONG_INT(                                               
           B_TC_PM_IP_CNTRS(E_IP33C_TC_TO_TC_SND_IPTCH_BYT),                           
           B_IP33A_TO_IP33F(E_MT_35_CTR_IP33C));                   

           Q_S0060_ADD_LONG_INT(                                               
           B_TC_PM_IP_CNTRS(E_IP33F_TCTC_IPTCH_BYT_HI_MIN),                           
           B_IP33A_TO_IP33F(E_MT_35_CTR_IP33F));                   
        OD;
    OD;
   ELSE
     DO WITH Z_T35_4_PTR ->(ZM_TC_INDEX_VALUE(ZF_TC_ID));
        B_TC_IDX := ZF_TC_ID;
        B_FILLER := H'FF;
        DO WITH B_CTRS_PT4_MT_35;
           Q_S0060_ADD_LONG_INT(
           ZQ_TMP_CTR,
           B_IP21_TO_IP28H(E_MT_35_CTR_IP28A));

           Q_S0060_ADD_LONG_INT(
           ZQ_TMP_CTR,
           B_IP21_TO_IP28H(E_MT_35_CTR_IP28B));

           Q_S0060_ADD_LONG_INT(
           ZQ_TMP_CTR,
           B_IP21_TO_IP28H(E_MT_35_CTR_IP28C));

           Q_S0060_ADD_LONG_INT(
           ZQ_TMP_CTR,
           B_IP21_TO_IP28H(E_MT_35_CTR_IP28D));

           Q_S0060_ADD_LONG_INT(
           ZQ_TMP_CTR,
           B_IP21_TO_IP28H(E_MT_35_CTR_IP28F));

           Q_S0060_ADD_LONG_INT(
           ZQ_TMP_CTR,
           B_IP21_TO_IP28H(E_MT_35_CTR_IP28G));

           Q_S0060_ADD_LONG_INT(
           ZQ_TMP_CTR,
           B_IP21_TO_IP28H(E_MT_35_CTR_IP28H));
       OD;
     OD;             
     DO WITH Z_T35_3_PTR ->(ZM_TC_INDEX_VALUE(ZF_TC_ID));
        B_TC_IDX := ZF_TC_ID;
        B_FILLER := H'FF;
      DO WITH B_CTRS_PT3_MT_35;
           Q_S0060_ADD_LONG_INT(
           ZQ_TMP_CTR,
           B_IP33A_TO_IP33F(E_MT_35_CTR_IP33A));

           Q_S0060_ADD_LONG_INT(
           ZQ_TMP_CTR,
           B_IP33A_TO_IP33F(E_MT_35_CTR_IP33C));

           Q_S0060_ADD_LONG_INT(
           ZQ_TMP_CTR,
           B_IP33A_TO_IP33F(E_MT_35_CTR_IP33F));
    OD;
   OD;
   FI;
  OD;
OD;*/
/*Commented by TCINVALIDISSUES*/
/*ADDED FOR TCINVALIDISSUES*/
DCL ZQ_LCE_ID        M_LCE_ID;
DCL ZQ_IDX           INT;
/* START: 3BKA36CBR236941*/
DCL ZQ_CNTR          RANGE(E_IP28B_NB_TC_SENT_SS7_IP_BYT
                          :E_IP33F_TCTC_IPTCH_BYT_HI_MIN);
/* END: 3BKA36CBR236941*/
DCL ZQ_TIME,ZQ_INDEX  INT;
DCL ZQ_PTR   PTR;
DCL ZQ_IP_PM_DATA ZM_IP_PM_DATA;
DCL ZQ_TMP_CTR M_STA_DPVAL;
/*SATRT : FR36/292347 */
DCL ZQ_LEN_VALID BOOL ;
ZQ_LEN_VALID:=FALSE; 
/*END : FR36/292347 */

ZQ_TMP_CTR.B_HIGH := ZS_FFFF;
ZQ_TMP_CTR.B_LOW := ZS_FFFF;
ZQ_INDEX := 4;
DO WITH ZF_LDC_BUF_PTR -> M_TC_PM_DATA;
  /*DO WITH B_PM_DATA;*/
    DO WITH ZQ_IP_PM_DATA;
/*SATRT : FR36/292347 */
B_PERIOD:=0;
IF B_PM_DATA_LEN>0 AND B_PM_DATA_LEN<= SIZEOF(B_PM_DATA)
THEN 

     ZQ_PTR := ->ZQ_TIME;
     ZQ_PTR -> ZM_INT.ZB_BYTE1 := B_PM_DATA(B_PM_DATA_LEN);
     ZQ_PTR -> ZM_INT.ZB_BYTE2 := B_PM_DATA(B_PM_DATA_LEN -1);
     B_PERIOD := ZQ_TIME;
ZQ_LEN_VALID:=TRUE; 
ELSE 
   TRACEINFO := 'INVALID TC T35 PM_DATA_LEN =%d  ';

   TRC_BSC_PM1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_CCDC_SSM),
              TRACEID(ERIR),
              TRACEINFO,
              LONG_INT((B_PM_DATA_LEN)),
              LONG_INT((0)),
              LONG_INT((0)));

FI;
/*END : FR36/292347 */

/* START: 3BKA36CBR236941*/
     /*DO FOR ZQ_CNTR := E_IP28A_NB_TC_SENT_TCSL_IP_BYT
                       TO E_IP33F_TCTC_IPTCH_BYT_HI_MIN;*/
       DO FOR ZQ_CNTR := E_IP28B_NB_TC_SENT_SS7_IP_BYT
                       TO E_IP33F_TCTC_IPTCH_BYT_HI_MIN;
/* END: 3BKA36CBR236941*/
       ZQ_PTR := ->B_TC_PM_IP_CNTRS(ZQ_CNTR);
       ZQ_PTR -> ZM_LONG.ZB_BYTE4 := B_PM_DATA(ZQ_INDEX-1);
       ZQ_PTR -> ZM_LONG.ZB_BYTE3 := B_PM_DATA(ZQ_INDEX);
       ZQ_PTR -> ZM_LONG.ZB_BYTE2 := B_PM_DATA(ZQ_INDEX-3);
       ZQ_PTR -> ZM_LONG.ZB_BYTE1 := B_PM_DATA(ZQ_INDEX-2);
       ZQ_INDEX := ZQ_INDEX + 4; 
     OD;  
   OD;
  /*OD;*/
OD;

DO WITH ZQ_IP_PM_DATA;
/*START : FR36/292347 */
   IF (B_PERIOD <= ZS_PER_MAX_INSEC AND B_PERIOD >= ZS_PER_MIN_INSEC)
      AND(ZQ_LEN_VALID=TRUE) 
/*END : FR36/292347 */ 
   THEN
     DO WITH Z_T35_4_PTR ->(ZM_TC_INDEX_VALUE(ZF_TC_ID));
        B_TC_IDX := ZF_TC_ID;
        B_FILLER := H'FF;
        DO WITH B_CTRS_PT4_MT_35;
           Q_S0020_ADD_DP_VALUES(                                               
           B_TC_PM_IP_CNTRS(E_IP28A_NB_TC_SENT_TCSL_IP_BYT),                           
           B_IP21_TO_IP35D(E_MT_35_CTR_IP28A));                   

           Q_S0020_ADD_DP_VALUES(                                               
           B_TC_PM_IP_CNTRS(E_IP28B_NB_TC_SENT_SS7_IP_BYT),                           
           B_IP21_TO_IP35D(E_MT_35_CTR_IP28B));                   
                                                                                
           Q_S0020_ADD_DP_VALUES(                                               
           B_TC_PM_IP_CNTRS(E_IP28C_NB_TC_SENT_TCSL_IP_PKT),                           
           B_IP21_TO_IP35D(E_MT_35_CTR_IP28C));                   

           Q_S0020_ADD_DP_VALUES(                                               
           B_TC_PM_IP_CNTRS(E_IP28D_NB_TC_SENT_SS7_IP_PKT),                           
           B_IP21_TO_IP35D(E_MT_35_CTR_IP28D));                   

           Q_S0020_ADD_DP_VALUES(                                               
           B_TC_PM_IP_CNTRS(E_IP28F_TC_RESND_SS7_SCTP_SEG),                           
           B_IP21_TO_IP35D(E_MT_35_CTR_IP28F));                   

/* BEGIN : FR-803256_01 */ 
/*           Q_S0020_ADD_DP_VALUES(                                               
           B_TC_PM_IP_CNTRS(E_IP28H_TC_SND_TCSL_BYT_HI_MIN),                           
           B_IP21_TO_IP35D(E_MT_35_CTR_IP28G));                   

           Q_S0020_ADD_DP_VALUES(                                               
           B_TC_PM_IP_CNTRS(E_IP28G_TC_SND_SS7_BYT_HI_MIN),                           
           B_IP21_TO_IP35D(E_MT_35_CTR_IP28H)); */


/*           Q_S0020_ADD_DP_VALUES(
           B_TC_PM_IP_CNTRS(E_IP28G_TC_SND_SS7_BYT_HI_MIN),
           B_IP21_TO_IP35D(E_MT_35_CTR_IP28G));

           Q_S0020_ADD_DP_VALUES(
           B_TC_PM_IP_CNTRS(E_IP28H_TC_SND_TCSL_BYT_HI_MIN),
           B_IP21_TO_IP35D(E_MT_35_CTR_IP28H));*/

/* END : FR-803256_01 */

/* START CR_817677_01 */
        
          /*           Q_S0020_ADD_DP_VALUES(
           B_TC_PM_IP_CNTRS(E_IP28G_TC_SND_SS7_BYT_HI_MIN),
           B_IP21_TO_IP35D(E_MT_35_CTR_IP28G));

           Q_S0020_ADD_DP_VALUES(
           B_TC_PM_IP_CNTRS(E_IP28H_TC_SND_TCSL_BYT_HI_MIN),
           B_IP21_TO_IP35D(E_MT_35_CTR_IP28H));*/


           Q_CALC_MAX_DPVAL(
           B_TC_PM_IP_CNTRS(E_IP28G_TC_SND_SS7_BYT_HI_MIN),
           B_IP21_TO_IP35D(E_MT_35_CTR_IP28G));

           Q_CALC_MAX_DPVAL(
           B_TC_PM_IP_CNTRS(E_IP28H_TC_SND_TCSL_BYT_HI_MIN),
           B_IP21_TO_IP35D(E_MT_35_CTR_IP28H));

/* END CR_817677_01 */



/* CR20/225233 */           
       OD;
     OD;  
     DO WITH Z_T35_3_PTR ->(ZM_TC_INDEX_VALUE(ZF_TC_ID));
        B_TC_IDX := ZF_TC_ID;
        B_FILLER := H'FF;
        DO WITH B_CTRS_PT3_MT_35;                            
           Q_S0020_ADD_DP_VALUES(                                               
           B_TC_PM_IP_CNTRS(E_IP33A_TC_TO_TC_SND_IPTCH_PKT),                           
           B_IP33A_TO_IP33F(E_MT_35_CTR_IP33A));                   

           Q_S0020_ADD_DP_VALUES(                                               
           B_TC_PM_IP_CNTRS(E_IP33C_TC_TO_TC_SND_IPTCH_BYT),                           
           B_IP33A_TO_IP33F(E_MT_35_CTR_IP33C));                   


/* START CR_817677_01 */
            
        /*   Q_S0020_ADD_DP_VALUES(                                               
           B_TC_PM_IP_CNTRS(E_IP33F_TCTC_IPTCH_BYT_HI_MIN),                           
           B_IP33A_TO_IP33F(E_MT_35_CTR_IP33F));  */ 
 
           Q_CALC_MAX_DPVAL(                                               
           B_TC_PM_IP_CNTRS(E_IP33F_TCTC_IPTCH_BYT_HI_MIN),                           
           B_IP33A_TO_IP33F(E_MT_35_CTR_IP33F));                   
      
/* END CR_817677_01 */



             OD;
    OD;
/* CR20/225233 */    
   ELSE
/*START:  CR36/288765  */ 
        TRACEINFO := 'TC- T-35 IP REAL PERIOD=%d N_I_R';
           TRC_BSC_PM1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_CCDC_SSM),
              TRACEID(ERIR),
              TRACEINFO,
              LONG_INT((B_PERIOD)),
              LONG_INT((0)),
              LONG_INT((0))); 
/*END:  CR36/288765  */ 
     DO WITH Z_T35_4_PTR ->(ZM_TC_INDEX_VALUE(ZF_TC_ID));
        B_TC_IDX := ZF_TC_ID;
        B_FILLER := H'FF;
        DO WITH B_CTRS_PT4_MT_35;
           Q_S0020_ADD_DP_VALUES(
           ZQ_TMP_CTR,
           B_IP21_TO_IP35D(E_MT_35_CTR_IP28A));

           Q_S0020_ADD_DP_VALUES(
           ZQ_TMP_CTR,
           B_IP21_TO_IP35D(E_MT_35_CTR_IP28B));

           Q_S0020_ADD_DP_VALUES(
           ZQ_TMP_CTR,
           B_IP21_TO_IP35D(E_MT_35_CTR_IP28C));

           Q_S0020_ADD_DP_VALUES(
           ZQ_TMP_CTR,
           B_IP21_TO_IP35D(E_MT_35_CTR_IP28D));

           Q_S0020_ADD_DP_VALUES(
           ZQ_TMP_CTR,
           B_IP21_TO_IP35D(E_MT_35_CTR_IP28F));

           Q_S0020_ADD_DP_VALUES(
           ZQ_TMP_CTR,
           B_IP21_TO_IP35D(E_MT_35_CTR_IP28G));

           Q_S0020_ADD_DP_VALUES(
           ZQ_TMP_CTR,
           B_IP21_TO_IP35D(E_MT_35_CTR_IP28H));
/* CR20/225233 */           
       OD;
     OD;             
     DO WITH Z_T35_3_PTR ->(ZM_TC_INDEX_VALUE(ZF_TC_ID));
        B_TC_IDX := ZF_TC_ID;
        B_FILLER := H'FF;
      DO WITH B_CTRS_PT3_MT_35;
           Q_S0020_ADD_DP_VALUES(
           ZQ_TMP_CTR,
           B_IP33A_TO_IP33F(E_MT_35_CTR_IP33A));

           Q_S0020_ADD_DP_VALUES(
           ZQ_TMP_CTR,
           B_IP33A_TO_IP33F(E_MT_35_CTR_IP33C));

           Q_S0020_ADD_DP_VALUES(
           ZQ_TMP_CTR,
           B_IP33A_TO_IP33F(E_MT_35_CTR_IP33F));
    OD;
   OD;
   FI;
OD;
/*ADDED FOR TCINVALIDISSUES*/

END Q_S0569_UPD_T35_TC_IP;                                                      

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0568_UPD_TC_IP_INVALID                           */        
/*                                                                    */        
/*     PROGRAMMER: SRINIVAS                                           */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 04/10/29                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATE TYPE 35 TC IP COUNTERS FROM TP TO INVALID             */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0140_GET_CIC_FROM_LCEID                    */        
/*                      Q_S0060_ADD_LONG_INT                          */        
/*     CALLED FROM:                                                   */        
/*                      P_GDXBYX_UPD_CCI_STD_CTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0568_UPD_TC_IP_INVALID: PROC(ZF_TC_ID M_TC_ID);

/* SRINIVAS : ADDED TO CHECK REAL PERIOD */
/* NOTE THAT OPTIMIZATION SCOPE IS THERE AT ELSE */
DCL ZQ_TMP_CTR M_LONG_INT;
ZQ_TMP_CTR.B_HIGH := ZS_FFFF;
ZQ_TMP_CTR.B_LOW := ZS_FFFF;

     DO WITH Z_T35_4_PTR ->(ZM_TC_INDEX_VALUE(ZF_TC_ID));
        B_TC_IDX := ZF_TC_ID;
        B_FILLER := H'FF;
        DO WITH B_CTRS_PT4_MT_35;
           Q_S0060_ADD_LONG_INT(
           ZQ_TMP_CTR,
           B_IP21_TO_IP35D(E_MT_35_CTR_IP28A));

           Q_S0060_ADD_LONG_INT(
           ZQ_TMP_CTR,
           B_IP21_TO_IP35D(E_MT_35_CTR_IP28B));

           Q_S0060_ADD_LONG_INT(
           ZQ_TMP_CTR,
           B_IP21_TO_IP35D(E_MT_35_CTR_IP28C));

           Q_S0060_ADD_LONG_INT(
           ZQ_TMP_CTR,
           B_IP21_TO_IP35D(E_MT_35_CTR_IP28D));

           Q_S0060_ADD_LONG_INT(
           ZQ_TMP_CTR,
           B_IP21_TO_IP35D(E_MT_35_CTR_IP28F));

           Q_S0060_ADD_LONG_INT(
           ZQ_TMP_CTR,
           B_IP21_TO_IP35D(E_MT_35_CTR_IP28G));

           Q_S0060_ADD_LONG_INT(
           ZQ_TMP_CTR,
           B_IP21_TO_IP35D(E_MT_35_CTR_IP28H));

/* CR20/225233 */           
       OD;
     OD;             
     DO WITH Z_T35_3_PTR ->(ZM_TC_INDEX_VALUE(ZF_TC_ID));
        B_TC_IDX := ZF_TC_ID;
        B_FILLER := H'FF;
       DO WITH B_CTRS_PT3_MT_35;
           Q_S0060_ADD_LONG_INT(
           ZQ_TMP_CTR,
           B_IP33A_TO_IP33F(E_MT_35_CTR_IP33A));

           Q_S0060_ADD_LONG_INT(
           ZQ_TMP_CTR,
           B_IP33A_TO_IP33F(E_MT_35_CTR_IP33C));

           Q_S0060_ADD_LONG_INT(
           ZQ_TMP_CTR,
           B_IP33A_TO_IP33F(E_MT_35_CTR_IP33F));
/* CR20/225233 */       

  OD;
OD;
END Q_S0568_UPD_TC_IP_INVALID;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0571_UPD_TCSL_IP                                 */
/*                                                                    */
/*     PROGRAMMER: SRINIVAS                                           */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 04/10/29                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       UPDATE TYPE 35 TCSL MR IP COUNTERS                           */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LDC_BUF_PTR PTR                            */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                                                                    */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0140_GET_CIC_FROM_LCEID                    */
/*                      Q_S0060_ADD_LONG_INT                          */
/*     CALLED FROM:                                                   */
/*                      P_GDXBYX_UPD_CCI_STD_CTRS                     */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0571_UPD_TCSL_IP: PROC(ZF_LDC_BUF_PTR PTR);

DCL ZQ_NBR_TC INT;
DCL ZQ_I INT;
DCL ZQ_TCSL_ID M_TC_ID;

/* SRINIVAS : ADDED TO CHECK REAL PERIOD */
/* NOTE THAT OPTIMIZATION SCOPE IS THERE AT ELSE */
DCL ZQ_TMP_CTR M_LONG_INT;
ZQ_TMP_CTR.B_HIGH := ZS_FFFF;
ZQ_TMP_CTR.B_LOW := ZS_FFFF;

DO WITH ZF_LDC_BUF_PTR -> M_TCSL_PM_CNTRS;
  ZQ_NBR_TC := B_NBR_TC;
  DO FOR ZQ_I := 1 TO ZQ_NBR_TC;
  DO WITH B_IP_CNTRS (ZQ_I);
   ZQ_TCSL_ID := M_TC_ID(B_TCSL_ID);
   IF B_REAL_PERIOD <= ZS_PER_MAX AND B_REAL_PERIOD >= ZS_PER_MIN
   THEN
     DO WITH Z_T35_4_PTR ->(ZM_TC_INDEX_VALUE(ZQ_TCSL_ID));
        B_TC_IDX := ZQ_TCSL_ID;
        B_FILLER := H'FF;
        DO WITH B_CTRS_PT4_MT_35;
           Q_S0060_ADD_LONG_INT(
           M_LONG_INT(B_TCSL_CTRS
                   (E_IP27A_NB_BSC_SENT_TCSL_IP_BYT)),
           B_IP21_TO_IP35D(E_MT_35_CTR_IP27A));

           Q_S0060_ADD_LONG_INT(
           M_LONG_INT(B_TCSL_CTRS
                   (E_IP27C_NB_BSC_SENT_TCSL_IP_PKT)),
           B_IP21_TO_IP35D(E_MT_35_CTR_IP27C));

    /* START CR_817677_01 */ 
         
           
       /*    Q_S0060_ADD_LONG_INT(
           M_LONG_INT(B_TCSL_CTRS
                   (E_IP27H_BSC_SND_TCSL_BYT_HI_MIN)),
           B_IP21_TO_IP35D(E_MT_35_CTR_IP27H)); */

           Q_CALC_MAX_LONG_INT_TO_DPVAL(
           M_LONG_INT(B_TCSL_CTRS
                   (E_IP27H_BSC_SND_TCSL_BYT_HI_MIN)),
           B_IP21_TO_IP35D(E_MT_35_CTR_IP27H));

    /* END CR_817677_01 */ 
        OD;
    OD;
   ELSE
     DO WITH Z_T35_4_PTR -> (ZM_TC_INDEX_VALUE(ZQ_TCSL_ID));
        B_TC_IDX := ZQ_TCSL_ID;
        B_FILLER := H'FF;
        DO WITH B_CTRS_PT4_MT_35;
           Q_S0060_ADD_LONG_INT(
           ZQ_TMP_CTR,
           B_IP21_TO_IP35D(E_MT_35_CTR_IP27A));

           Q_S0060_ADD_LONG_INT(
           ZQ_TMP_CTR,
           B_IP21_TO_IP35D(E_MT_35_CTR_IP27C));

           Q_S0060_ADD_LONG_INT(
           ZQ_TMP_CTR,
           B_IP21_TO_IP35D(E_MT_35_CTR_IP27H));
        OD;
     OD;
   FI;
  OD;
 OD;
OD;

END Q_S0571_UPD_TCSL_IP;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0572_UPD_TCSL_IP_INVALID                         */
/*                                                                    */
/*     PROGRAMMER: SRINIVAS                                           */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 04/10/29                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       UPDATE TYPE 35 TC IP COUNTERS FROM TP TO INVALID             */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LDC_BUF_PTR PTR                            */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                                                                    */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0140_GET_CIC_FROM_LCEID                    */
/*                      Q_S0060_ADD_LONG_INT                          */
/*     CALLED FROM:                                                   */
/*                      P_GDXBYX_UPD_CCI_STD_CTRS                     */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0572_UPD_TCSL_IP_INVALID: PROC();

DCL ZQ_TC_IDX M_TC_ID;

/* SRINIVAS : ADDED TO CHECK REAL PERIOD */
/* NOTE THAT OPTIMIZATION SCOPE IS THERE AT ELSE */
DCL ZQ_TMP_CTR M_LONG_INT;
ZQ_TMP_CTR.B_HIGH := ZS_FFFF;
ZQ_TMP_CTR.B_LOW := ZS_FFFF;

DO FOR ZQ_TC_IDX := 1 TO M_MAX_TCID;
 DO WITH Z_R_TC_MGT_PTR -> ZM_R_TC_MGT(ZM_TC_INDEX_VALUE
         (ZQ_TC_IDX));
  IF (D_TCOM_ST = E_MS_IT OR D_TCOM_ST = E_MS_FIT)
  THEN
     DO WITH Z_T35_4_PTR->(ZM_TC_INDEX_VALUE(ZQ_TC_IDX));
        B_TC_IDX := ZQ_TC_IDX;
        B_FILLER := H'FF;
        DO WITH B_CTRS_PT4_MT_35;
           Q_S0060_ADD_LONG_INT(
           ZQ_TMP_CTR,
           B_IP21_TO_IP35D(E_MT_35_CTR_IP27A));

           Q_S0060_ADD_LONG_INT(
           ZQ_TMP_CTR,
           B_IP21_TO_IP35D(E_MT_35_CTR_IP27C));

           Q_S0060_ADD_LONG_INT(
           ZQ_TMP_CTR,
           B_IP21_TO_IP35D(E_MT_35_CTR_IP27H));
        OD;
     OD;
  FI;
 OD;
OD;

END Q_S0572_UPD_TCSL_IP_INVALID;
/* END : WIPRO B11 IP MR0 PKG1 */

/*START: CR36/275131*/
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0573_UPD_M3UA_LM_PAG                             */
/*                                                                    */
/*     PROGRAMMER: AMRITPAL                                           */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 29/04/09                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       UPDATE TYPE 110 M3UA IP COUNTERS                             */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LDC_BUF_PTR PTR                            */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                                                                    */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0140_GET_CIC_FROM_LCEID                    */
/*                      Q_S0020_ADD_DP_VALUES                         */
/*     CALLED FROM:                                                   */
/*                      P_GDXBYX_UPD_ASIG_CTRS                        */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0573_UPD_M3UA_LM_PAG: PROC(ZF_LDC_BUF_PTR PTR);

DCL ZQ_LONG ZM_LONG_DPVAL;
DCL ZQ_LOC_DPVAL M_STA_DPVAL;

DO WITH ZF_LDC_BUF_PTR -> M_M3UALM_PM_BUFFER.B_M3UALM_PM_CNTRS;
  ZQ_LONG.ZB_LONG     := LONG_INT(B_BSS_PAG_CTR); 
  ZQ_LOC_DPVAL.B_HIGH := ZQ_LONG.ZB_HIGH;
  ZQ_LOC_DPVAL.B_LOW  := ZQ_LONG.ZB_LOW;
  DO WITH Z_T110_6_PTR->;
    DO WITH B_CTRS_PT6_MT_110;   
      Q_S0020_ADD_DP_VALUES(ZQ_LOC_DPVAL, B_MC940);
    OD;
  OD;
OD;

END Q_S0573_UPD_M3UA_LM_PAG;
/*END: CR36/275131*/

/* START : WIPRO B11 IP MR0 PKG1 */
/*CR36/236932*/
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0578_UPD_TYPE7_GSL_INVALID                       */
/*                                                                    */
/*     PROGRAMMER:                                                    */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE:                                                 */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       UPDATE TYPE 7   GSL      COUNTERS FROM DTC TO INVALID        */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LDC_BUF_PTR PTR                            */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                                                                    */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                                                                    */
/*                                                                    */
/*     CALLED FROM:                                                   */
/*                      P_GDXBYX_UPD_CCI_STD_CTRS                     */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0578_UPD_TYPE7_GSL_INVALID: PROC(ZF_LCE_ID M_LCE_ID);

DCL ZQ_GSL_ID M_BYTE;
DCL ZQ_IDX RANGE(1: CM_FY32_MAX_GSL_PER_BSC);
DCL ZQ_TMP_CTR M_STA_DPVAL;

ZQ_TMP_CTR.B_HIGH := ZS_FFFF;
ZQ_TMP_CTR.B_LOW := ZS_FFFF;

DO FOR ZQ_IDX := 1 TO CM_FY32_MAX_GSL_PER_BSC;
 DO WITH Z_R_GSL_LNK_PTR -> ZM_R_GSL_LNK(ZQ_IDX);
    IF D_DTC_ID = ZF_LCE_ID AND
     (D_GSL_MST = E_MS_IT OR D_GSL_MST = E_MS_FIT)
    THEN
     ZQ_GSL_ID := ZQ_IDX;
     DO WITH Z_T72_PTR -> (ZQ_GSL_ID);
        B_GSL_NBR := ZQ_GSL_ID;
        DO WITH B_CTRS_MT_7_2;
           Q_S0020_ADD_DP_VALUES(
           ZQ_TMP_CTR,
           B_L2_1_TO_L2_7(E_MT_7_CTR_L2_1));

           Q_S0020_ADD_DP_VALUES(
           ZQ_TMP_CTR,
           B_L2_1_TO_L2_7(E_MT_7_CTR_L2_2));

           Q_S0020_ADD_DP_VALUES(
           ZQ_TMP_CTR,
           B_L2_1_TO_L2_7(E_MT_7_CTR_L2_3));

           Q_S0020_ADD_DP_VALUES(
           ZQ_TMP_CTR,
           B_L2_1_TO_L2_7(E_MT_7_CTR_L2_4));

           Q_S0020_ADD_DP_VALUES(
           ZQ_TMP_CTR,
           B_L2_1_TO_L2_7(E_MT_7_CTR_L2_5));
           
           Q_S0020_ADD_DP_VALUES(
           ZQ_TMP_CTR,
           B_L2_1_TO_L2_7(E_MT_7_CTR_L2_6));
           
           Q_S0020_ADD_DP_VALUES(
           ZQ_TMP_CTR,
           B_L2_1_TO_L2_7(E_MT_7_CTR_L2_7));
                   
        OD;
      OD;
    FI;
  OD;
OD;

END Q_S0578_UPD_TYPE7_GSL_INVALID;
/*CR36/236932*/
/* BEGIN CR:745699 */
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0692_UPD_T110_15_OLC_DTC_INVALID                 */
/*                                                                    */
/*     PROGRAMMER:                                                    */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE:                                                 */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       UPDATE TYPE 110 OLC COUNTERS FROM DTC TO INVALID             */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LDC_BUF_PTR PTR                            */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                                                                    */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                                                                    */
/*                                                                    */
/*     CALLED FROM:                                                   */
/*                      P_GDXBYX_UPD_CCI_STD_CTRS                     */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
/**********************************************************************/
Q_S0692_UPD_T110_15_OLC_DTC_INVALID: PROC(ZF_LDC_BUF_PTR PTR);

DCL ZQ_NBR_OLC_CELLS, ZQ_RRH_OLC INT;
DCL ZQ_OLC_CELL_IDX M_CELL_IDX;
DCL ZQ_OLC_TRX_IDX M_TRX_ID; 
DCL ZQ_TRX  M_TRX_IDX;
DCL ZQ_RRH_ID  M_RRH_ID; 
DCL ZQ_RRH_FOUND BOOL;

ZQ_RRH_FOUND := FALSE;

DO WITH ZF_LDC_BUF_PTR ->ZM_UB_DTC_STD_OLC_CELL_CTRS;
 IF B_NBR_OLC_CELLS > 0
 THEN 
  ZQ_NBR_OLC_CELLS := B_NBR_OLC_CELLS;
 FI;
OD;

 DO WHILE ZQ_NBR_OLC_CELLS /= 0;
    DO WITH ZF_LDC_BUF_PTR->ZM_UB_DTC_STD_OLC_CELL_CTRS.
	                   B_OLC_CELL_CNTRS(ZQ_NBR_OLC_CELLS);
    
  IF (B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC AND
      B_CELL_IDX > 0) AND (B_RRH_ID > 0 AND B_RRH_ID <= 99)
   THEN
    IF Z_STD_CELL_LIST(B_CELL_IDX)
     THEN 	    
	  
    IF B_CELL_IDX <= (CM_FY32_MAX_CELLS_PER_BSC/2) 
     THEN 
	 	   ZQ_OLC_CELL_IDX := B_CELL_IDX;
		   ZQ_RRH_ID :=  B_RRH_ID;
	 
	DO WITH Z_T110_15_1_PTR->(LONG_INT((ZQ_OLC_CELL_IDX)));
	 DO FOR  ZQ_TRX := 1 TO B_NBR_TRX;
	  DO WITH B_DTC_TYPE110_OLC_TRX(ZQ_TRX);
     IF(( B_TRX_IDX > 0 AND B_TRX_IDX <= CM_FY32_MAX_TRX_PER_BSC)
	     AND B_TRX_IDX /= ZS_FFFF )
	  THEN
	  DO WITH Z_R_TRX_MGT_PTR -> ZM_R_TRX_MGT(B_TRX_IDX);
        ZQ_OLC_TRX_IDX := D_TRX_ID;	   
	   OD;
	  
       DO FOR ZQ_RRH_OLC := 1 TO 6 WHILE NOT ZQ_RRH_FOUND; 
       IF(ZQ_OLC_TRX_IDX /= H'FF)
       THEN	   
	    DO WITH B_RRH_ARY(ZQ_RRH_OLC).B_TRX_ARY(ZQ_OLC_TRX_IDX);
		
		 IF (B_RRH_IDX = H'FF) OR
            ((B_RRH_IDX /= H'FF)  AND
            (B_RRH_IDX = ZQ_RRH_ID))
                THEN
                 ZQ_RRH_FOUND := TRUE;
                 B_RRH_IDX := ZQ_RRH_ID;
				 B_CELL_ID := ZQ_OLC_CELL_IDX;
				 B_TRX_ID :=  ZQ_OLC_TRX_IDX;
                
          DO WITH B_CTRS_PT15_MT_110;
                 B_MC1604 := ZS_FFFE;				 
				 B_MC1610_TO_MC1612(E_MT_110_CTR_MC1612) :=
				                                    ZS_FFFE;
          OD;
		 FI;
        OD; /* B_RRH_ARY */
		FI;
        OD;	/* 	ZQ_RRH_OLC */
	   
         ZQ_RRH_FOUND := FALSE;
	 	FI;  
	 OD; /* B_DTC_TYPE110_OLC_TRX */
    OD;	 /* ZQ_TRX */
   OD; /* Z_T110_15_1_PTR */

   ELSIF B_CELL_IDX > (CM_FY32_MAX_CELLS_PER_BSC/2) AND
       B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC 	
    THEN	
	 	   ZQ_OLC_CELL_IDX := B_CELL_IDX;
		   ZQ_RRH_ID :=  B_RRH_ID;
	DO WITH Z_T110_15_2_PTR->(LONG_INT((ZQ_OLC_CELL_IDX)));
	 DO FOR  ZQ_TRX := 1 TO B_NBR_TRX;
	  DO WITH B_DTC_TYPE110_OLC_TRX(ZQ_TRX);
	 IF(( B_TRX_IDX > 0 AND B_TRX_IDX <= CM_FY32_MAX_TRX_PER_BSC)
	      AND B_TRX_IDX /= ZS_FFFF )
	  THEN
	   DO WITH Z_R_TRX_MGT_PTR -> ZM_R_TRX_MGT(B_TRX_IDX);
        ZQ_OLC_TRX_IDX := D_TRX_ID;	   
	   OD;
	  
       DO FOR ZQ_RRH_OLC := 1 TO 6 WHILE NOT ZQ_RRH_FOUND;
        IF(ZQ_OLC_TRX_IDX /= H'FF)
        THEN		
	    DO WITH B_RRH_ARY(ZQ_RRH_OLC).B_TRX_ARY(ZQ_OLC_TRX_IDX);
		
		 IF (B_RRH_IDX = H'FF) OR
            ((B_RRH_IDX /= H'FF)  AND
            (B_RRH_IDX = ZQ_RRH_ID))
                THEN
                 ZQ_RRH_FOUND := TRUE;
                 B_RRH_IDX := ZQ_RRH_ID;
				 B_CELL_ID := ZQ_OLC_CELL_IDX;
				 B_TRX_ID :=  ZQ_OLC_TRX_IDX;
                
          DO WITH B_CTRS_PT15_MT_110;
                 B_MC1604 := ZS_FFFE;				 
				 B_MC1610_TO_MC1612(E_MT_110_CTR_MC1612) :=
				                                    ZS_FFFE;
          OD;
		 FI;
        OD; /* B_RRH_ARY */
	    FI;	
        OD;	/* 	ZQ_RRH_OLC */
	   
         ZQ_RRH_FOUND := FALSE;
	   FI;	 
	 OD; /* B_DTC_TYPE110_OLC_TRX */
    OD;	 /* ZQ_TRX */
   OD; /* Z_T110_15_2_PTR */		   
		   
   FI;

  ELSE
  
  	   Q_S0705_UPD_T110_15_OLC_CELL_INVALID(B_CELL_IDX,
                                   M_FS_DTC_TRF_LDC,FALSE);
   FI; /* Z_STD_CELL_LIST */
  FI;
 OD;
     
      ZQ_NBR_OLC_CELLS := ZQ_NBR_OLC_CELLS - 1;
 OD; /* ZQ_NBR_OLC_CELLS */	  

END Q_S0692_UPD_T110_15_OLC_DTC_INVALID;
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0693_UPD_T110_15_OLC_STD_DTC                     */
/*                                                                    */
/*     PROGRAMMER:                                                    */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE:                                                 */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       UPDATE TYPE 110 OLC COUNTERS FROM DTC                        */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LDC_BUF_PTR PTR                            */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                                                                    */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0140_GET_CIC_FROM_LCEID                    */
/*                      Q_S0060_ADD_LONG_INT                          */
/*     CALLED FROM:                                                   */
/*                      P_GDXBYX_UPD_CCI_STD_CTRS                     */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0693_UPD_T110_15_OLC_STD_DTC : PROC(ZF_LDC_BUF_PTR PTR);

DCL ZQ_NBR_OLC_CELLS, ZQ_RRH_OLC INT;
DCL ZQ_OLC_CELL_IDX M_CELL_IDX;
DCL ZQ_OLC_TRX_IDX M_TRX_ID; 
DCL ZQ_TRX  M_TRX_IDX;
DCL ZQ_RRH_ID M_RRH_ID; 
DCL ZQ_RRH_FOUND BOOL;

DCL ZQ_FIRST_RRH_FOUND  BOOL;
DCL ZQ_TRX_OLC INT;

ZQ_RRH_FOUND := FALSE;
ZQ_FIRST_RRH_FOUND  :=FALSE;
/* ST BEGIN FR 00963189.01 */
ZQ_NBR_OLC_CELLS := 0;
/* ST END FR 00963189.01 */

DO WITH ZF_LDC_BUF_PTR ->ZM_UB_DTC_STD_OLC_CELL_CTRS;
 IF B_NBR_OLC_CELLS > 0
 THEN 
  ZQ_NBR_OLC_CELLS := B_NBR_OLC_CELLS;
 FI;
OD;

 DO WHILE ZQ_NBR_OLC_CELLS /= 0;
    DO WITH ZF_LDC_BUF_PTR->ZM_UB_DTC_STD_OLC_CELL_CTRS.
	                   B_OLC_CELL_CNTRS(ZQ_NBR_OLC_CELLS);
    
  IF (B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC AND
      B_CELL_IDX > 0) AND (B_RRH_ID > 0 AND B_RRH_ID <= 99)
   THEN
    IF Z_STD_CELL_LIST(B_CELL_IDX)
     THEN 	    
	  
    IF B_CELL_IDX <= (CM_FY32_MAX_CELLS_PER_BSC/2) 
     THEN 
	  ZQ_OLC_CELL_IDX := B_CELL_IDX;
	  ZQ_RRH_ID :=  B_RRH_ID;
	 
	DO WITH Z_T110_15_1_PTR->(LONG_INT((ZQ_OLC_CELL_IDX)));
	 DO FOR  ZQ_TRX := 1 TO B_NBR_TRX;
	  DO WITH B_DTC_TYPE110_OLC_TRX(ZQ_TRX);
     IF(( B_TRX_IDX > 0 AND B_TRX_IDX <= CM_FY32_MAX_TRX_PER_BSC)
	     AND B_TRX_IDX /= ZS_FFFF )
	  THEN
	  DO WITH Z_R_TRX_MGT_PTR -> ZM_R_TRX_MGT(B_TRX_IDX);
        ZQ_OLC_TRX_IDX := D_TRX_ID;	   
	   OD;
	  
       DO FOR ZQ_RRH_OLC := 1 TO 6 WHILE NOT ZQ_RRH_FOUND; 
       IF(ZQ_OLC_TRX_IDX /= H'FF)
       THEN	   
	    DO WITH B_RRH_ARY(ZQ_RRH_OLC).B_TRX_ARY(ZQ_OLC_TRX_IDX);
		
	   IF (B_RRH_IDX = H'FF) OR
            ((B_RRH_IDX /= H'FF)  AND
            (B_RRH_IDX = ZQ_RRH_ID))
                THEN
   /*Begin order SITE_TRX_ID in result file*/
                IF (B_RRH_IDX = H'FF)
                THEN
                ZQ_FIRST_RRH_FOUND := TRUE;
                FI;
   /*End order SITE_TRX_ID in result file*/
                 ZQ_RRH_FOUND := TRUE;
                 B_RRH_IDX := ZQ_RRH_ID;
		 B_CELL_ID := ZQ_OLC_CELL_IDX;
		 B_TRX_ID :=  ZQ_OLC_TRX_IDX;
          TRACEINFO := '1DTCCELLID,TRXID,RRHID:=%d,%d,%d';
   TRC_BSC_PM1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_CCDC_SSM),
              TRACEID(NORM),
              TRACEINFO,
              LONG_INT((B_CELL_ID)),
              LONG_INT((B_TRX_ID)),
              LONG_INT((B_RRH_IDX)));
   /*Begin order SITE_TRX_ID in result file*/
            IF ZQ_FIRST_RRH_FOUND = TRUE
            THEN 
             DO FOR ZQ_TRX_OLC := 1 TO M_MAX_TRX_PER_OLC; 
             DO WITH B_RRH_ARY(ZQ_RRH_OLC).
                               B_TRX_ARY(ZQ_TRX_OLC); 
                    B_RRH_IDX := ZQ_RRH_ID;
             OD;
             OD; 
               ZQ_FIRST_RRH_FOUND := FALSE;
            FI; 
   /*End order SITE_TRX_ID in result file */
          DO WITH B_CTRS_PT15_MT_110;
	       Q_S0040_ADD_INT_TO_INT(B_DTC_TYPE_110_OLC(
                 E_MC1604_OLC_NB_TCH_NA_FAIL_TRX),
                 B_MC1604);                      

                Q_S0040_ADD_INT_TO_INT(B_DTC_TYPE_110_OLC(
                 E_MC1612_OLC_NB_TCH_DRP_HO_TRX),
                 B_MC1610_TO_MC1612(E_MT_110_CTR_MC1612));
          OD;
		 FI;
        OD; /* B_RRH_ARY */
		FI;
        OD;	/* 	ZQ_RRH_OLC */
	   
         ZQ_RRH_FOUND := FALSE;
	 	FI;  
	 OD; /* B_DTC_TYPE110_OLC_TRX */
    OD;	 /* ZQ_TRX */
   OD; /* Z_T110_15_1_PTR */

   ELSIF B_CELL_IDX > (CM_FY32_MAX_CELLS_PER_BSC/2) AND
       B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC 	
    THEN	
	 	   ZQ_OLC_CELL_IDX := B_CELL_IDX;
		   ZQ_RRH_ID :=  B_RRH_ID;
	DO WITH Z_T110_15_2_PTR->(LONG_INT((ZQ_OLC_CELL_IDX)));
	 DO FOR  ZQ_TRX := 1 TO B_NBR_TRX;
	  DO WITH B_DTC_TYPE110_OLC_TRX(ZQ_TRX);
	 IF(( B_TRX_IDX > 0 AND B_TRX_IDX <= CM_FY32_MAX_TRX_PER_BSC)
	      AND B_TRX_IDX /= ZS_FFFF )
	  THEN
	   DO WITH Z_R_TRX_MGT_PTR -> ZM_R_TRX_MGT(B_TRX_IDX);
        ZQ_OLC_TRX_IDX := D_TRX_ID;	   
	   OD;
	  
       DO FOR ZQ_RRH_OLC := 1 TO 6 WHILE NOT ZQ_RRH_FOUND;
        IF(ZQ_OLC_TRX_IDX /= H'FF)
        THEN		
	    DO WITH B_RRH_ARY(ZQ_RRH_OLC).B_TRX_ARY(ZQ_OLC_TRX_IDX);
		
		 IF (B_RRH_IDX = H'FF) OR
            ((B_RRH_IDX /= H'FF)  AND
            (B_RRH_IDX = ZQ_RRH_ID))
                THEN
   /*Begin order SITE_TRX_ID in result file*/
                IF (B_RRH_IDX = H'FF)
                THEN
                ZQ_FIRST_RRH_FOUND := TRUE;
                FI;
   /*End order SITE_TRX_ID in result file*/
                 ZQ_RRH_FOUND := TRUE;
                 B_RRH_IDX := ZQ_RRH_ID;
				 B_CELL_ID := ZQ_OLC_CELL_IDX;
				 B_TRX_ID :=  ZQ_OLC_TRX_IDX;
          TRACEINFO := '2DTCCELLID,TRXID,RRHID:=%d,%d,%d';
   TRC_BSC_PM1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_CCDC_SSM),
              TRACEID(NORM),
              TRACEINFO,
              LONG_INT((B_CELL_ID)),
              LONG_INT((B_TRX_ID)),
              LONG_INT((B_RRH_IDX)));
   /*Begin order SITE_TRX_ID in result file*/
            IF ZQ_FIRST_RRH_FOUND = TRUE
            THEN 
             DO FOR ZQ_TRX_OLC := 1 TO M_MAX_TRX_PER_OLC; 
             DO WITH B_RRH_ARY(ZQ_RRH_OLC).
                               B_TRX_ARY(ZQ_TRX_OLC); 
                    B_RRH_IDX := ZQ_RRH_ID;
             OD;
             OD; 
               ZQ_FIRST_RRH_FOUND := FALSE;
              FI; 
   /*End order SITE_TRX_ID in result file*/
          DO WITH B_CTRS_PT15_MT_110;
		       Q_S0040_ADD_INT_TO_INT(B_DTC_TYPE_110_OLC(
                 E_MC1604_OLC_NB_TCH_NA_FAIL_TRX),
                 B_MC1604);                      

                Q_S0040_ADD_INT_TO_INT(B_DTC_TYPE_110_OLC(
                 E_MC1612_OLC_NB_TCH_DRP_HO_TRX),
                 B_MC1610_TO_MC1612(E_MT_110_CTR_MC1612));
          OD;
		 FI;
        OD; /* B_RRH_ARY */
	    FI;	
        OD;	/* 	ZQ_RRH_OLC */
	   
         ZQ_RRH_FOUND := FALSE;
	   FI;	 
	 OD; /* B_DTC_TYPE110_OLC_TRX */
    OD;	 /* ZQ_TRX */
   OD; /* Z_T110_15_2_PTR */		   
		   
   FI;

  ELSE
  
  	   Q_S0705_UPD_T110_15_OLC_CELL_INVALID(B_CELL_IDX,
                                   M_FS_DTC_TRF_LDC,FALSE);
   FI; /* Z_STD_CELL_LIST */
  FI;
 OD;
     
      ZQ_NBR_OLC_CELLS := ZQ_NBR_OLC_CELLS - 1;
 OD; /* ZQ_NBR_OLC_CELLS */	  

END  Q_S0693_UPD_T110_15_OLC_STD_DTC;

/* END CR:745699 */
/*START CR MOCN */
Q_S0694_UPD_T110_17_MOCN_STD_DTC : PROC(ZF_LDC_BUF_PTR PTR);

DCL ZQ_FOUND                BOOL;
DCL ZQ_1700_FOUND           BOOL;
DCL ZQ_FIRST_FREE_FOUND     BOOL;
DCL ZQ_1701_1706_IDX        INT;
DCL ZQ_1700_INDEX           INT;
DCL ZQ_FIRST_FREE           INT;
DCL ZQ_I,ZQ_J               INT;
DCL ZQ_K            RANGE(E_MT_110_CTR_MC1701:E_MT_110_CTR_MC1716);



DO WITH ZF_LDC_BUF_PTR ->ZM_UB_DTC_STD_MOCN_CTRS;
  ZQ_1700_FOUND := FALSE;
  DO FOR ZQ_J := 1 TO CM_FY32_MAX_MSC_PER_BSC;
  IF  ZB_MOCN_CTRS_ARRAY(ZQ_J).ZB_MSC_SBL /= H'FFFF AND
      ZB_MOCN_CTRS_ARRAY(ZQ_J).ZB_MSC_SBL /= 0
  THEN
    ZQ_FOUND := FALSE;
    ZQ_FIRST_FREE_FOUND := FALSE;
    DO FOR ZQ_I := 1 TO CM_FY32_MAX_MSC_PER_BSC;
      IF  (Z_T110_17_PTR ->CM_FY32_HIS_TYPE_110_17_BUF(ZQ_I).B_MSC_IDX=  
          ZB_MOCN_CTRS_ARRAY(ZQ_J).ZB_MSC_SBL) AND (NOT ZQ_FOUND)
      THEN
        ZQ_FOUND := TRUE;
        ZQ_1701_1706_IDX := ZQ_I;
      FI;
    
      IF Z_T110_17_PTR-> CM_FY32_HIS_TYPE_110_17_BUF(ZQ_I).B_MSC_IDX 
                                                        = H'FFFF AND 
         NOT ZQ_FIRST_FREE_FOUND
      THEN
        ZQ_FIRST_FREE := ZQ_I;
        ZQ_FIRST_FREE_FOUND := TRUE;
      FI;  
    OD;
  
    IF NOT ZQ_FOUND  
    THEN
      ZQ_1701_1706_IDX := ZQ_FIRST_FREE;
    FI;
    
    DO WITH Z_T110_17_PTR -> CM_FY32_HIS_TYPE_110_17_BUF
                                       (ZQ_1701_1706_IDX);
      DO WITH B_CTRS_P17_MT_110;
        DO WITH ZB_MOCN_CTRS_ARRAY(ZQ_J);
          Q_S0060_ADD_LONG_INT (
             ZB_MOCN_PER_MSC_CTRS_ARRAY(E_MC1701_MSC_REDIR_ATTACH),
                B_MC1701_TO_MC1716(E_MT_110_CTR_MC1701));
          Q_S0060_ADD_LONG_INT (
             ZB_MOCN_PER_MSC_CTRS_ARRAY(E_MC1702_MSC_REDIR_CMD),
                B_MC1701_TO_MC1716(E_MT_110_CTR_MC1702));
          Q_S0060_ADD_LONG_INT (
             ZB_MOCN_PER_MSC_CTRS_ARRAY(E_MC1703_MSC_REDIR_CMD_COORD),
                B_MC1701_TO_MC1716(E_MT_110_CTR_MC1703));
          Q_S0060_ADD_LONG_INT (
             ZB_MOCN_PER_MSC_CTRS_ARRAY(E_MC1704_MSC_REDIR_CMPL),
                B_MC1701_TO_MC1716(E_MT_110_CTR_MC1704));
          Q_S0060_ADD_LONG_INT (
             ZB_MOCN_PER_MSC_CTRS_ARRAY(E_MC1705_MSC_REDIR_CMPL_MS_NA),
                B_MC1701_TO_MC1716(E_MT_110_CTR_MC1705));
          Q_S0060_ADD_LONG_INT (
             ZB_MOCN_PER_MSC_CTRS_ARRAY(E_MC1706_MSC_REDIR_CMPL_MS_RGD),
                B_MC1701_TO_MC1716(E_MT_110_CTR_MC1706));
         
        OD;
      OD;  
      IF NOT ZQ_FOUND
      THEN
        B_MSC_IDX := ZB_MOCN_CTRS_ARRAY(ZQ_J).ZB_MSC_SBL;
        DO FOR ZQ_K := E_MT_110_CTR_MC1707 TO E_MT_110_CTR_MC1716;
          B_CTRS_P17_MT_110.B_MC1701_TO_MC1716(ZQ_K).B_LOW := 
                                                          ZS_FFFE ;
          B_CTRS_P17_MT_110.B_MC1701_TO_MC1716(ZQ_K).B_HIGH := 
                                                          ZS_FFFF ;
        OD;
      FI;
    OD;
  FI;  
  OD;
  
  ZQ_FIRST_FREE_FOUND := FALSE;
  IF ZB_C1700_MSC_SBL /= H'FFFF AND
     ZB_C1700_MSC_SBL /= 0
  THEN
  DO FOR ZQ_I := 1 TO CM_FY32_MAX_MSC_PER_BSC;
    IF ZB_C1700_MSC_SBL = Z_T110_17_PTR-> CM_FY32_HIS_TYPE_110_17_BUF
                                                      (ZQ_I).B_MSC_IDX
        AND (NOT ZQ_1700_FOUND)
    THEN
      ZQ_1700_FOUND := TRUE;
      ZQ_1700_INDEX := ZQ_I;
    FI;
    IF Z_T110_17_PTR-> CM_FY32_HIS_TYPE_110_17_BUF(ZQ_I).B_MSC_IDX
                                                     = H'FFFF AND 
       NOT ZQ_FIRST_FREE_FOUND
    THEN
      ZQ_FIRST_FREE := ZQ_I;
      ZQ_FIRST_FREE_FOUND := TRUE;
    FI; 
  OD;   
  IF NOT ZQ_1700_FOUND
  THEN
    ZQ_1700_INDEX :=  ZQ_FIRST_FREE;
  FI;
  
  DO WITH Z_T110_17_PTR -> CM_FY32_HIS_TYPE_110_17_BUF(ZQ_1700_INDEX);
    DO WITH  B_CTRS_P17_MT_110;
      Q_S0060_ADD_LONG_INT ( ZB_MC1700, B_MC1700);
    OD;
    IF NOT ZQ_1700_FOUND
    THEN
      B_MSC_IDX := ZB_C1700_MSC_SBL;
      DO WITH B_CTRS_P17_MT_110;
        DO FOR ZQ_K := E_MT_110_CTR_MC1701 TO E_MT_110_CTR_MC1716;
            B_MC1701_TO_MC1716(ZQ_K).B_LOW := 0;
            B_MC1701_TO_MC1716(ZQ_K).B_HIGH := 0;
        OD;
      OD; 
    FI;
  OD;   
  FI;
OD;
  
  

END Q_S0694_UPD_T110_17_MOCN_STD_DTC;

Q_S0695_UPD_T110_17_MOCN_DTC_INVALID :PROC(ZF_LDC_BUF_PTR PTR);

DCL ZQ_FOUND                BOOL;
DCL ZQ_1700_FOUND           BOOL;
DCL ZQ_FIRST_FREE_FOUND     BOOL;

DCL ZQ_1701_1706_IDX        INT;
DCL ZQ_1700_INDEX           INT;
DCL ZQ_FIRST_FREE           INT;

DCL ZQ_I,ZQ_J               INT;
DCL ZQ_K              RANGE (E_MT_110_CTR_MC1701:E_MT_110_CTR_MC1706);

DO WITH ZF_LDC_BUF_PTR ->ZM_UB_DTC_STD_MOCN_CTRS;
  ZQ_1700_FOUND := FALSE;
  DO FOR ZQ_J := 1 TO CM_FY32_MAX_MSC_PER_BSC;
  IF  ZB_MOCN_CTRS_ARRAY(ZQ_J).ZB_MSC_SBL /= H'FFFF
  THEN 
    ZQ_FOUND := FALSE;
    ZQ_FIRST_FREE_FOUND := FALSE;
    DO FOR ZQ_I := 1 TO CM_FY32_MAX_MSC_PER_BSC;
      IF  (Z_T110_17_PTR-> CM_FY32_HIS_TYPE_110_17_BUF(ZQ_I).B_MSC_IDX =  
          ZB_MOCN_CTRS_ARRAY(ZQ_J).ZB_MSC_SBL) AND (NOT ZQ_FOUND)
      THEN
        ZQ_FOUND := TRUE;
        ZQ_1701_1706_IDX := ZQ_I;
      FI;
      
      IF Z_T110_17_PTR-> CM_FY32_HIS_TYPE_110_17_BUF(ZQ_I).B_MSC_IDX 
                                                        = H'FFFF AND 
         NOT ZQ_FIRST_FREE_FOUND
      THEN
        ZQ_FIRST_FREE := ZQ_I;
        ZQ_FIRST_FREE_FOUND := TRUE;
      FI;
    OD;
    
    IF NOT ZQ_FOUND  
    THEN
      ZQ_1701_1706_IDX := ZQ_FIRST_FREE;
    FI;
 
    DO WITH Z_T110_17_PTR -> CM_FY32_HIS_TYPE_110_17_BUF
                                          (ZQ_1701_1706_IDX);
        DO WITH B_CTRS_P17_MT_110;
          DO WITH ZB_MOCN_CTRS_ARRAY(ZQ_J);
            DO FOR ZQ_K := E_MT_110_CTR_MC1701 TO E_MT_110_CTR_MC1706;
              B_MC1701_TO_MC1716(ZQ_K).B_LOW := ZS_FFFE;
              B_MC1701_TO_MC1716(ZQ_K).B_HIGH := ZS_FFFF;
            OD;
          OD;
        OD;  
      IF NOT ZQ_FOUND
      THEN
        B_MSC_IDX := ZB_MOCN_CTRS_ARRAY(ZQ_J).ZB_MSC_SBL;  
      FI;
    OD;  
  FI;  
  OD;
  
  DO FOR ZQ_I := 1 TO CM_FY32_MAX_MSC_PER_BSC;
    ZQ_FIRST_FREE_FOUND := FALSE; 
    IF ZB_C1700_MSC_SBL = Z_T110_17_PTR-> CM_FY32_HIS_TYPE_110_17_BUF
                                                     (ZQ_I).B_MSC_IDX
        AND (NOT ZQ_1700_FOUND)
    THEN
      ZQ_1700_FOUND := TRUE;
      ZQ_1700_INDEX := ZQ_I;
    FI;
    
    IF Z_T110_17_PTR-> CM_FY32_HIS_TYPE_110_17_BUF(ZQ_I).B_MSC_IDX
                                                     = H'FFFF AND 
       NOT ZQ_FIRST_FREE_FOUND
    THEN
      ZQ_FIRST_FREE := ZQ_I;
      ZQ_FIRST_FREE_FOUND := TRUE;
    FI; 
    
  OD;   
  IF NOT ZQ_1700_FOUND
  THEN
    ZQ_1700_INDEX :=  ZQ_FIRST_FREE;
  FI;
  DO WITH Z_T110_17_PTR -> CM_FY32_HIS_TYPE_110_17_BUF
                                            (ZQ_1700_INDEX);
      DO WITH  B_CTRS_P17_MT_110;
        B_MC1700.B_LOW := ZS_FFFE;
        B_MC1700.B_HIGH := ZS_FFFF;
      OD;
      IF NOT ZQ_1700_FOUND
      THEN
        B_MSC_IDX :=  ZB_C1700_MSC_SBL;
      FI;
  OD;   
OD;
END Q_S0695_UPD_T110_17_MOCN_DTC_INVALID;

/*END CR MOCN */
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0577_UPD_GSL_   INVALID                          */
/*                                                                    */
/*     PROGRAMMER: SRINIVAS                                           */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 04/10/29                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       UPDATE TYPE 110 GSL      COUNTERS FROM DTC TO INVALID        */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LDC_BUF_PTR PTR                            */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                                                                    */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0140_GET_CIC_FROM_LCEID                    */
/*                      Q_S0060_ADD_LONG_INT                          */
/*     CALLED FROM:                                                   */
/*                      P_GDXBYX_UPD_CCI_STD_CTRS                     */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0577_UPD_GSL_INVALID: PROC(ZF_LCE_ID M_LCE_ID);

DCL ZQ_GSL_ID M_BYTE;
DCL ZQ_IDX RANGE(1: CM_FY32_MAX_GSL_PER_BSC);
DCL ZQ_IP_IDX RANGE(1: CM_FY32_MAX_IP_GSL_PER_BSC);
DCL ZQ_TMP_CTR M_STA_DPVAL;
DCL ZQ_BSS_MODE BOOL;
ZQ_TMP_CTR.B_HIGH := ZS_FFFF;
ZQ_TMP_CTR.B_LOW := ZS_FFFF;
/*3BKA36FBR244521*/
ZQ_BSS_MODE := FALSE;
DO WITH Z_R_BSC_INFO_PTR -> M_R_BSC_INFO;
   IF D_BSS_MODE = M_BSS_TRANSPORT_MODE_IP
   THEN
     ZQ_BSS_MODE := TRUE;
   FI;
OD;
IF ZQ_BSS_MODE THEN
  DO FOR ZQ_IP_IDX := 1 TO CM_FY32_MAX_IP_GSL_PER_BSC;
   DO WITH Z_R_IP_GSL_PTR -> ZM_R_IP_GSL(ZQ_IP_IDX);
    IF D_DTC_ID = ZF_LCE_ID AND
     (D_GSL_MST = E_MS_IT OR D_GSL_MST = E_MS_FIT) 
    THEN
       ZQ_GSL_ID := ZQ_IP_IDX;
       DO WITH Z_T110_9_PTR -> (ZQ_GSL_ID);
         B_GSL_NBR := ZQ_GSL_ID;
         DO WITH B_CTRS_PT9_MT_110;
           Q_S0020_ADD_DP_VALUES(
           ZQ_TMP_CTR,
           B_MC1060_TO_MC1067(E_MT_110_CTR_MC1060));

           Q_S0020_ADD_DP_VALUES(
           ZQ_TMP_CTR,
           B_MC1060_TO_MC1067(E_MT_110_CTR_MC1061));

           Q_S0020_ADD_DP_VALUES(
           ZQ_TMP_CTR,
           B_MC1060_TO_MC1067(E_MT_110_CTR_MC1062));

           Q_S0020_ADD_DP_VALUES(
           ZQ_TMP_CTR,
           B_MC1060_TO_MC1067(E_MT_110_CTR_MC1063));

           Q_S0020_ADD_DP_VALUES(
           ZQ_TMP_CTR,
           B_MC1060_TO_MC1067(E_MT_110_CTR_MC1064));
           
           Q_S0020_ADD_DP_VALUES(
           ZQ_TMP_CTR,
           B_MC1060_TO_MC1067(E_MT_110_CTR_MC1065));
           
           Q_S0020_ADD_DP_VALUES(
           ZQ_TMP_CTR,
           B_MC1060_TO_MC1067(E_MT_110_CTR_MC1066));
           
           Q_S0020_ADD_DP_VALUES(
           ZQ_TMP_CTR,
           B_MC1060_TO_MC1067(E_MT_110_CTR_MC1067));
        OD;
      OD;
    FI;
  OD;
OD;
ELSE
/*3BKA36FBR244521*/
/* check R_IP_GSL if the LCE_ID is a GSL DTC */
DO FOR ZQ_IDX := 1 TO CM_FY32_MAX_GSL_PER_BSC;
 DO WITH Z_R_GSL_LNK_PTR -> ZM_R_GSL_LNK(ZQ_IDX);
    IF D_DTC_ID = ZF_LCE_ID AND
     (D_GSL_MST = E_MS_IT OR D_GSL_MST = E_MS_FIT)
    THEN
     ZQ_GSL_ID := ZQ_IDX;
     DO WITH Z_T110_9_PTR -> (ZQ_GSL_ID);
        B_GSL_NBR := ZQ_GSL_ID;
        DO WITH B_CTRS_PT9_MT_110;
           Q_S0020_ADD_DP_VALUES(
           ZQ_TMP_CTR,
           B_MC1060_TO_MC1067(E_MT_110_CTR_MC1060));

           Q_S0020_ADD_DP_VALUES(
           ZQ_TMP_CTR,
           B_MC1060_TO_MC1067(E_MT_110_CTR_MC1061));

           Q_S0020_ADD_DP_VALUES(
           ZQ_TMP_CTR,
           B_MC1060_TO_MC1067(E_MT_110_CTR_MC1062));

           Q_S0020_ADD_DP_VALUES(
           ZQ_TMP_CTR,
           B_MC1060_TO_MC1067(E_MT_110_CTR_MC1063));

           Q_S0020_ADD_DP_VALUES(
           ZQ_TMP_CTR,
           B_MC1060_TO_MC1067(E_MT_110_CTR_MC1064));
           
           Q_S0020_ADD_DP_VALUES(
           ZQ_TMP_CTR,
           B_MC1060_TO_MC1067(E_MT_110_CTR_MC1065));
           
           Q_S0020_ADD_DP_VALUES(
           ZQ_TMP_CTR,
           B_MC1060_TO_MC1067(E_MT_110_CTR_MC1066));
           
           Q_S0020_ADD_DP_VALUES(
           ZQ_TMP_CTR,
           B_MC1060_TO_MC1067(E_MT_110_CTR_MC1067));
        OD;
      OD;
    FI;
  OD;
OD;
/*3BKA36FBR244521*/
FI;
/*3BKA36FBR244521*/
END Q_S0577_UPD_GSL_INVALID;
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0567_UPD_T7_2_GSL_STD_DTC                        */
/*                                                                    */
/*     PROGRAMMER:                                                    */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE:                                                 */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       UPDATE TYPE 7   GSL      COUNTERS FROM DTC                   */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LDC_BUF_PTR PTR                            */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                                                                    */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                                                                    */
/*                                                                    */
/*     CALLED FROM:                                                   */
/*                      P_GDXBYX_UPD_CCI_STD_CTRS                     */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0567_UPD_T7_2_GSL_STD_DTC: PROC(ZF_LDC_BUF_PTR PTR);

DCL ZQ_GSL_ID M_BYTE;

DO WITH ZF_LDC_BUF_PTR -> ZM_GSL_COUNTER_ARRAY;
  ZQ_GSL_ID := ZB_GSL_IDX;
  IF ZQ_GSL_ID > CM_FY32_MAX_GSL_PER_BSC OR
     ZQ_GSL_ID < 0 
  THEN
    /*DO NOTHING*/
  ELSE 
  DO WITH Z_R_GSL_LNK_PTR -> ZM_R_GSL_LNK(ZQ_GSL_ID);
  IF (D_GSL_MST = E_MS_IT OR D_GSL_MST = E_MS_FIT) THEN
   DO WITH Z_T72_PTR -> (ZQ_GSL_ID);
    B_GSL_NBR := ZQ_GSL_ID;
    DO WITH ZB_TYPE7_GSL_CTRS;
     DO WITH B_CTRS_MT_7_2;
           Q_S0020_ADD_DP_VALUES(
           ZB_TYPE7_COUNT_ARRAY(E_L2_1_NB_GSL_LAPD_ESTB),
           B_L2_1_TO_L2_7(E_MT_7_CTR_L2_1));

           Q_S0020_ADD_DP_VALUES(
           ZB_TYPE7_COUNT_ARRAY(E_L2_2_NB_GSL_LAPD_CRC_ERR),
           B_L2_1_TO_L2_7(E_MT_7_CTR_L2_2));

           Q_S0020_ADD_DP_VALUES(
           ZB_TYPE7_COUNT_ARRAY(E_L2_3_NB_GSL_LAPD_INFO_RESENT),
           B_L2_1_TO_L2_7(E_MT_7_CTR_L2_3));

           Q_S0020_ADD_DP_VALUES(
           ZB_TYPE7_COUNT_ARRAY(E_L2_4_NB_GSL_LAPD_RNR_SENT),
           B_L2_1_TO_L2_7(E_MT_7_CTR_L2_4));

           Q_S0020_ADD_DP_VALUES(
           ZB_TYPE7_COUNT_ARRAY(E_L2_5_NB_GSL_LAPD_RNR_REC),
           B_L2_1_TO_L2_7(E_MT_7_CTR_L2_5));
           
           Q_S0020_ADD_DP_VALUES(
           ZB_TYPE7_COUNT_ARRAY(E_L2_6_TIME_GSL_LAPD_UNAVAIL),
           B_L2_1_TO_L2_7(E_MT_7_CTR_L2_6));
           
           Q_S0020_ADD_DP_VALUES(
           ZB_TYPE7_COUNT_ARRAY(E_L2_7_TIME_GSL_LAPD_CONG),
           B_L2_1_TO_L2_7(E_MT_7_CTR_L2_7));
           
           
     OD;
   OD;  
  OD;
  FI;
  OD;
 FI; 
OD;

END Q_S0567_UPD_T7_2_GSL_STD_DTC;
/*CR36/236932*/
/*ADDED FOR GSL COUNTERS MEMO*/
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0566_UPD_T110_9_GSL_STD_DTC                      */
/*                                                                    */
/*     PROGRAMMER: SRINIVAS                                           */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 04/10/29                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       UPDATE TYPE 110 GLS      COUNTERS FROM DTC                   */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LDC_BUF_PTR PTR                            */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                                                                    */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0140_GET_CIC_FROM_LCEID                    */
/*                      Q_S0060_ADD_LONG_INT                          */
/*     CALLED FROM:                                                   */
/*                      P_GDXBYX_UPD_CCI_STD_CTRS                     */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0566_UPD_T110_9_GSL_STD_DTC: PROC(ZF_LDC_BUF_PTR PTR);

DCL ZQ_GSL_ID M_BYTE;
/*3BKA36FBR244521*/
DCL ZQ_BSS_MODE BOOL;
ZQ_BSS_MODE := FALSE;
DO WITH Z_R_BSC_INFO_PTR -> M_R_BSC_INFO;
   IF D_BSS_MODE = M_BSS_TRANSPORT_MODE_IP
   THEN
     ZQ_BSS_MODE := TRUE;
   FI;
OD;
IF ZQ_BSS_MODE THEN
 DO WITH ZF_LDC_BUF_PTR -> ZM_GSL_COUNTER_ARRAY;
  ZQ_GSL_ID := ZB_GSL_IDX;
  IF ZQ_GSL_ID > CM_FY32_MAX_IP_GSL_PER_BSC OR
     ZQ_GSL_ID < 0 
  THEN
    /*DO NOTHING*/
  ELSE 
  DO WITH Z_R_IP_GSL_PTR -> ZM_R_IP_GSL(ZQ_GSL_ID);
  IF (D_GSL_MST = E_MS_IT OR D_GSL_MST = E_MS_FIT) THEN
   DO WITH Z_T110_9_PTR -> (ZQ_GSL_ID);
    B_GSL_NBR := ZQ_GSL_ID;
    DO WITH ZB_GSL_CTRS;
     DO WITH B_CTRS_PT9_MT_110;
           Q_S0020_ADD_DP_VALUES(
           ZB_COUNT_ARRAY(E_MC1060_NB_GSL_MSG_SENT),
           B_MC1060_TO_MC1067(E_MT_110_CTR_MC1060));

           Q_S0020_ADD_DP_VALUES(
           ZB_COUNT_ARRAY(E_MC1061_NB_GSL_MSG_DISCARDED),
           B_MC1060_TO_MC1067(E_MT_110_CTR_MC1061));

           Q_S0020_ADD_DP_VALUES(
           ZB_COUNT_ARRAY(E_MC1062_NB_GSL_MSG_RESENT),
           B_MC1060_TO_MC1067(E_MT_110_CTR_MC1062));

           Q_S0020_ADD_DP_VALUES(
           ZB_COUNT_ARRAY(E_MC1063_NB_GSL_MSG_RECEIVED),
           B_MC1060_TO_MC1067(E_MT_110_CTR_MC1063));

           Q_S0020_ADD_DP_VALUES(
           ZB_COUNT_ARRAY(E_MC1064_NB_GSL_BYTES_SENT),
           B_MC1060_TO_MC1067(E_MT_110_CTR_MC1064));
           
           Q_S0020_ADD_DP_VALUES(
           ZB_COUNT_ARRAY(E_MC1065_MAX_NB_GSL_BYTES_SENT),
           B_MC1060_TO_MC1067(E_MT_110_CTR_MC1065));
           
           Q_S0020_ADD_DP_VALUES(
           ZB_COUNT_ARRAY(E_MC1066_MAX_NB_GSL_MSG_SENT),
           B_MC1060_TO_MC1067(E_MT_110_CTR_MC1066));
           
           Q_S0020_ADD_DP_VALUES(
           ZB_COUNT_ARRAY( E_MC1067_AVG_NB_MSG_GSL_QUEUE),
           B_MC1060_TO_MC1067(E_MT_110_CTR_MC1067));
            
     OD;
   OD;  
  OD;
  FI;
  OD;
 FI; 
OD;
ELSE
/*3BKA36FBR244521*/
DO WITH ZF_LDC_BUF_PTR -> ZM_GSL_COUNTER_ARRAY;
  ZQ_GSL_ID := ZB_GSL_IDX;
  IF ZQ_GSL_ID > CM_FY32_MAX_GSL_PER_BSC OR
     ZQ_GSL_ID < 0 
  THEN
    /*DO NOTHING*/
  ELSE 
  DO WITH Z_R_GSL_LNK_PTR -> ZM_R_GSL_LNK(ZQ_GSL_ID);
  IF (D_GSL_MST = E_MS_IT OR D_GSL_MST = E_MS_FIT) THEN
   DO WITH Z_T110_9_PTR -> (ZQ_GSL_ID);
    B_GSL_NBR := ZQ_GSL_ID;
    DO WITH ZB_GSL_CTRS;
     DO WITH B_CTRS_PT9_MT_110;
           Q_S0020_ADD_DP_VALUES(
           ZB_COUNT_ARRAY(E_MC1060_NB_GSL_MSG_SENT),
           B_MC1060_TO_MC1067(E_MT_110_CTR_MC1060));

           Q_S0020_ADD_DP_VALUES(
           ZB_COUNT_ARRAY(E_MC1061_NB_GSL_MSG_DISCARDED),
           B_MC1060_TO_MC1067(E_MT_110_CTR_MC1061));

           Q_S0020_ADD_DP_VALUES(
           ZB_COUNT_ARRAY(E_MC1062_NB_GSL_MSG_RESENT),
           B_MC1060_TO_MC1067(E_MT_110_CTR_MC1062));

           Q_S0020_ADD_DP_VALUES(
           ZB_COUNT_ARRAY(E_MC1063_NB_GSL_MSG_RECEIVED),
           B_MC1060_TO_MC1067(E_MT_110_CTR_MC1063));

           Q_S0020_ADD_DP_VALUES(
           ZB_COUNT_ARRAY(E_MC1064_NB_GSL_BYTES_SENT),
           B_MC1060_TO_MC1067(E_MT_110_CTR_MC1064));
           
           Q_S0020_ADD_DP_VALUES(
           ZB_COUNT_ARRAY(E_MC1065_MAX_NB_GSL_BYTES_SENT),
           B_MC1060_TO_MC1067(E_MT_110_CTR_MC1065));
           
           Q_S0020_ADD_DP_VALUES(
           ZB_COUNT_ARRAY(E_MC1066_MAX_NB_GSL_MSG_SENT),
           B_MC1060_TO_MC1067(E_MT_110_CTR_MC1066));
           
           Q_S0020_ADD_DP_VALUES(
           ZB_COUNT_ARRAY( E_MC1067_AVG_NB_MSG_GSL_QUEUE),
           B_MC1060_TO_MC1067(E_MT_110_CTR_MC1067));
            
     OD;
   OD;  
  OD;
  FI;
  OD;
 FI; 
OD;
/*3BKA36FBR244521*/
FI;
/*3BKA36FBR244521*/
END Q_S0566_UPD_T110_9_GSL_STD_DTC;
/* END : WIPRO B11 IP MR0 PKG1 */
/*ADDED FOR GSL COUNTERS MEMO*/
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0480_UPD_T25_DTC                                 */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 10/11/97                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATE TYPE 25 N7 STANDARD COUNTERS FROM DTC N7.             */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*                      ZF_LDC_LCE_ID M_LCE_ID,                       */        
/*                      ZF_DTC_IND BOOL                               */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0140_GET_CIC_FROM_LCEID                    */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0250_UPD_DTC_STD_CNTRS                     */        
/*                      P_GDXBYX_UPD_CCI_STD_CTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0480_UPD_T25_DTC: PROC(ZF_LDC_BUF_PTR PTR,                                   
                          ZF_LDC_LCE_ID  M_LCE_ID,                              
                          ZF_DTC_IND     BOOL);                                 
                                                                                
DCL ZQ_SL_IDX        INT,                                                       
    ZQ_SL_FND        INT,                                                       
    ZQ_CIC           M_CIC,                                                     
    ZQ_SLC_N7        M_SLC_N7,                                                  
    ZQ_SCCP_CNTR     RANGE(E_C251_SCCPC_UDT_TX:E_C258_SCCPC_CREF_RX);                                          
                                                                                
DCL ZQ_LINK          INT;                                                       
DCL ZQ_LINK_INDEX    M_SLC_N7;                                                  
DCL ZQ_SLC_FND       INT;                                                       
DCL ZQ_REL_IDX       INT;                                                       
                                                                                
ZQ_SL_FND := 0;                                                                 
                                                                                
IF ZF_DTC_IND    /* C153A, C153B - SDON */                                      
THEN                                                                            
  DO WITH ZF_LDC_BUF_PTR -> M_DTC_STD_BSS_CTRS.B_N7_CNTRS;                      
    IF B_NBR_N7 > 0                                                             
    THEN                                                                        
      DO FOR ZQ_LINK:= 1 TO B_NBR_N7;                                           
        ZQ_LINK_INDEX := B_DTC_N7_CNTRS_BLOCK(ZQ_LINK).B_SLC;                   
        ZQ_SLC_FND := 0;                                                        
        DO FOR ZQ_REL_IDX := 1 TO CM_FY32_PM_MAX_NBR_DTC_N7                     
                                               WHILE ZQ_SLC_FND = 0;            
          DO WITH Z_R_N7_CONF_PTR -> ZM_R_N7_CONF(ZQ_REL_IDX);                  
            IF D_SLC = ZQ_LINK_INDEX                                            
            THEN                                                                
              ZQ_SLC_FND := ZQ_REL_IDX;                                         
                /*CR20/223453*/
              ZQ_CIC := Q_S0140_GET_CIC_FROM_LCEID(D_LCE_ID,D_SLC);
                /*CR20/223453*/
              ZQ_SL_FND := 0;                                                   
              DO FOR ZQ_SL_IDX := 1 TO ZS_MAX_SLC_N7                            
                                               WHILE ZQ_SL_FND = 0;             
                DO WITH Z_T25_PTR->(ZQ_SL_IDX);                                 
                  DO WITH B_DATA_MT_25;                                         
                    IF B_LINK_ID = ZS_NULL_CIC                                  
                       /* THIS IS THE FIRST FREE ENTRY */ OR                    
                       B_LINK_ID = ZQ_CIC                                       
                    THEN                                                        
                      ZQ_SL_FND := ZQ_SL_IDX;                                   
                      B_LINK_ID := ZQ_CIC;                                      
                                                                                
                      Q_S0080_ADD_INT_TO_DPVAL(                                 
                      B_DTC_N7_CNTRS_BLOCK(ZQ_LINK).                            
                        B_TYPE25(E_C153A_N7_CON_EST_FAIL_DUE_NSS),              
                        B_HIS_CC(E_C153A_N7_CON_EST_FAIL_NSS));                 
                                                                                
                      Q_S0080_ADD_INT_TO_DPVAL(                                 
                      B_DTC_N7_CNTRS_BLOCK(ZQ_LINK).                            
                        B_TYPE25(E_C153B_N7_CON_EST_FAIL_DUE_BSS),              
                        B_HIS_CC(E_C153B_N7_CON_EST_FAIL_BSS));                 
                    FI; /* B_LINK_ID = ZS_NULL_CIC */                           
                  OD; /* DO WITH B_DATA_MT_25 */                                
                OD;                                                             
              OD;                                                               
            FI;                                                                 
          OD; /* DO WITH Z_R_N7_CONF_PTR ->  */                                 
        OD;                                                                     
      OD; /* DO WITH ZQ_LINK */                                                 
    FI;  /* B_NBR_N7 /= 0 */                                                    
  OD; /* DO WITH ZF_LDC_BUF_PTR */                                              
ELSE                                                                            
                /*CR20/223453*/
  ZQ_SLC_N7 := Q_S0141_GET_SLC_FROM_LCEID(ZF_LDC_LCE_ID);
  ZQ_CIC := Q_S0140_GET_CIC_FROM_LCEID(ZF_LDC_LCE_ID,ZQ_SLC_N7);
                /*CR20/223453*/
                                                                                
  DO WITH ZF_LDC_BUF_PTR -> M_PM_N7_DTC_REPORT.B_CNTRS;                         
    ZQ_SL_FND := 0;                                                             
    DO FOR ZQ_SL_IDX := 1 TO ZS_MAX_SLC_N7 WHILE ZQ_SL_FND = 0;                 
      DO WITH Z_T25_PTR->(ZQ_SL_IDX);                                           
        DO WITH B_DATA_MT_25;                                                   
          IF B_LINK_ID = ZS_NULL_CIC                                            
             /* THIS IS THE FIRST FREE ENTRY */ OR                              
             B_LINK_ID = ZQ_CIC                                                 
          THEN                                                                  
            ZQ_SL_FND := ZQ_SL_IDX;                                             
            B_LINK_ID := ZQ_CIC;                                                
            DO FOR ZQ_SCCP_CNTR:=E_C251_SCCPC_UDT_TX TO                         
                                 E_C258_SCCPC_CREF_RX;                         
/* WIPRO CHANGE CR20/195110 */ 
              /*Q_S0080_ADD_INT_TO_DPVAL(    */                                     
              Q_S0060_ADD_LONG_INT(                      
/* WIPRO CHANGE CR20/195110 */ 
                           B_SCCP_CNTRS(ZQ_SCCP_CNTR),                          
                           B_HIS_CC(M_SCCP_CNTR_NAME(ZQ_SCCP_CNTR)));                             
            OD;                                                                 
          FI;                                                                   
        OD;                                                                     
      OD; /* DO WITH Z_T25_PTR */                                               
    OD;                                                                         
  OD; /* DO WITH ZF_LDC_BUF_PTR -> M_PM_N7_DTC_REPORT */                        
FI;                                                                             
                                                                                
END Q_S0480_UPD_T25_DTC;                                                        
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0481_UPD_N7_TP_T110_5                            */        
/*                                                                    */        
/*     PROGRAMMER: CHEN ZHANGYI  (ASB)                                */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 04/10/29                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATE TYPE 25 N7 STANDARD COUNTERS FROM TP.                 */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*                      ZF_LDC_LCE_ID M_LCE_ID                        */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0140_GET_CIC_FROM_LCEID                    */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*     CALLED FROM:                                                   */        
/*                      P_GDXBYX_UPD_CCI_STD_CTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0481_UPD_N7_TP_T110_5: PROC(ZF_LDC_BUF_PTR PTR);                       
                                                                                
DCL ZQ_SL_IDX        INT,                                                       
    ZQ_SL_FND        INT,                                                       
    ZQ_CIC           M_CIC,                                                     
    ZQ_SCCP_CNTR     RANGE(E_C251_SCCPC_UDT_TX:E_C258_SCCPC_CREF_RX);                                          
DCL ZQ_J             RANGE(E_MT_110_CTR_MC350:E_MT_110_CTR_MC351);              
DCL ZQ_N7_LINKS      INT;
DCL ZQ_IDX           INT;

DO WITH ZF_LDC_BUF_PTR -> ZM_PM_TP_N7_DATA;
  DO WITH B_TP_PM_N7_CNTRS;
    IF B_NBR_N7_LINKS > 0
    THEN
      DO FOR ZQ_N7_LINKS :=1 TO B_NBR_N7_LINKS;
        DO WITH B_TP_N7_CNTRS(ZQ_N7_LINKS - 1);
          DO FOR ZQ_IDX := 1 TO CM_FY32_PM_MAX_NBR_DTC_N7;
            DO WITH Z_R_N7_CONF_PTR -> ZM_R_N7_CONF(ZQ_IDX);
              IF (D_SLC = B_SLC) AND (D_LCE_ID /= ZS_FFFF)
              THEN
                /*CR20/223453*/
                ZQ_CIC := Q_S0140_GET_CIC_FROM_LCEID(D_LCE_ID,D_SLC);
                /*CR20/223453*/
                ZQ_SL_FND := 0;                                                               
                DO FOR ZQ_SL_IDX := 1 TO ZS_MAX_SLC_N7 
                                                   WHILE ZQ_SL_FND = 0;                   
                  DO WITH Z_T110_5_PTR->(ZQ_SL_IDX);                                          
                    IF B_LINK_ID = ZS_NULL_CIC                                                
                    /* THIS IS THE FIRST FREE ENTRY */ OR                                  
                       B_LINK_ID = ZQ_CIC                                                     
                    THEN                                                                      
                      ZQ_SL_FND := ZQ_SL_IDX;                                                 
                      B_LINK_ID := ZQ_CIC;                                                    
                      DO WITH B_CTRS_PT5_MT_110;                                              
                        DO FOR ZQ_SCCP_CNTR := E_C253_SCCPC_CR_TX  TO                         
                                               E_C256_SCCPC_CC_RX;                            
                          CASE ZQ_SCCP_CNTR OF                                                
                            (E_C253_SCCPC_CR_TX:                                              
                             E_C254_SCCPC_CR_RX): 
                               ZQ_J := E_MT_110_CTR_MC350;                 
                            (E_C255_SCCPC_CC_TX:                                              
                             E_C256_SCCPC_CC_RX): 
                               ZQ_J := E_MT_110_CTR_MC351;                 
                            ELSE                                                              
                          ESAC;                                                               
/* WIPRO CHANGE CR20/195110 */
                         /* Q_S0080_ADD_INT_TO_DPVAL( */
                          Q_S0060_ADD_LONG_INT(                      
/* WIPRO CHANGE CR20/195110 */
                            B_SCCP_CNTRS(ZQ_SCCP_CNTR),                            
                            B_MC350_TO_MC351(ZQ_J));                               
                        OD;                                                                   
                      OD;                                                                     
                    FI;                                                                       
                  OD;                                                                         
                OD;                                                                           
              FI;
            OD;
          OD;
        OD;
      OD;
    FI;
  OD;
OD;

END Q_S0481_UPD_N7_TP_T110_5;                                                  

/*START: CR36/275131*/
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0483_UPD_N7_TP_T110_6                            */        
/*                                                                    */        
/*     PROGRAMMER: AMRITPAL                                           */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 29/04/09                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATE TYPE 110 STANDARD COUNTERS FROM TP.                   */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*                      ZF_LDC_LCE_ID M_LCE_ID                        */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0020_ADD_DP_VALUES                         */        
/*     CALLED FROM:                                                   */        
/*                      P_GDXBYX_UPD_CCI_STD_CTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0483_UPD_N7_TP_T110_6 : PROC(ZF_LDC_BUF_PTR PTR);

DCL ZQ_LONG ZM_LONG_DPVAL;
DCL ZQ_LOC_DPVAL M_STA_DPVAL;

DO WITH ZF_LDC_BUF_PTR -> ZM_PM_TP_N7_DATA;
  DO WITH B_TP_PM_N7_CNTRS;
     ZQ_LONG.ZB_LONG     := LONG_INT(B_BSS_PAG_CTR); 
     ZQ_LOC_DPVAL.B_HIGH := ZQ_LONG.ZB_HIGH;
     ZQ_LOC_DPVAL.B_LOW  := ZQ_LONG.ZB_LOW;
     DO WITH Z_T110_6_PTR->;                                        
       DO WITH B_CTRS_PT6_MT_110;                                    
         Q_S0020_ADD_DP_VALUES(ZQ_LOC_DPVAL, B_MC940);
       OD;
     OD;
  OD;
OD; 

END Q_S0483_UPD_N7_TP_T110_6;

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0660_UPD_N7_SLH_IP_T110_6                        */        
/*                                                                    */        
/*     PROGRAMMER: AMRITPAL                                           */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 29/04/09                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATE TYPE 110 STANDARD COUNTERS FROM TP.                   */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*                      ZF_LDC_LCE_ID M_LCE_ID                        */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0020_ADD_DP_VALUES                         */        
/*     CALLED FROM:                                                   */        
/*                      P_GDXBYX_UPD_CCI_STD_CTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0660_UPD_N7_SLH_IP_T110_6 : PROC(ZF_LDC_BUF_PTR PTR);

DCL ZQ_LONG ZM_LONG_DPVAL;
DCL ZQ_LOC_DPVAL M_STA_DPVAL;

DO WITH ZF_LDC_BUF_PTR -> ZM_PM_SLH_IP_N7_DATA;
  DO WITH B_SLH_IP_PM_N7_CNTRS;
    ZQ_LONG.ZB_LONG     := LONG_INT(B_BSS_PAG_CTR); 
    ZQ_LOC_DPVAL.B_HIGH := ZQ_LONG.ZB_HIGH;
    ZQ_LOC_DPVAL.B_LOW  := ZQ_LONG.ZB_LOW;
    DO WITH Z_T110_6_PTR->;                                        
      DO WITH B_CTRS_PT6_MT_110;                                    
        Q_S0020_ADD_DP_VALUES(ZQ_LOC_DPVAL, B_MC940);
      OD;
    OD;
  OD;
OD; 

END Q_S0660_UPD_N7_SLH_IP_T110_6;
/*END: CR36/275131*/

/* START : WIPRO B11 IP MR0 PKG1 */
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0563_UPD_T35_4_SLH_IP                            */        
/*                                                                    */        
/*     PROGRAMMER: SRINIVAS                                           */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 04/10/29                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATE TYPE 35 BLOCK 4 SLH IP COUNTERS                       */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*                      ZF_LDC_LCE_ID M_LCE_ID                        */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0140_GET_CIC_FROM_LCEID                    */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*     CALLED FROM:                                                   */        
/*                      P_GDXBYX_UPD_CCI_STD_CTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0563_UPD_T35_4_SLH_IP: PROC(ZF_LDC_BUF_PTR PTR);                       
                                                                                
DCL ZQ_NBR_TC        INT;
DCL ZQ_TC_ID         M_TC_ID;
/* SRINIVAS : ADDED TO CHECK REAL PERIOD */
/* NOTE THAT OPTIMIZATION SCOPE IS THERE AT ELSE */
DCL ZQ_TMP_CTR M_LONG_INT;
ZQ_TMP_CTR.B_HIGH := ZS_FFFF;
ZQ_TMP_CTR.B_LOW := ZS_FFFF;


DO WITH ZF_LDC_BUF_PTR -> ZM_PM_SLH_IP_N7_DATA;
  DO WITH B_SLH_IP_PM_N7_CNTRS;
    IF B_NBR_TC > 0
    THEN
      DO FOR ZQ_NBR_TC:=1 TO B_NBR_TC;
        DO WITH B_IP_CNTRS(ZQ_NBR_TC);
            ZQ_TC_ID := M_TC_ID(B_TC_ID);
            DO WITH Z_T35_4_PTR->(ZM_TC_INDEX_VALUE(ZQ_TC_ID));                                          
             B_TC_IDX := ZQ_TC_ID; 
             B_FILLER := H'FF;
             IF B_REAL_PERIOD <= ZS_PER_MAX AND 
                         B_REAL_PERIOD >= ZS_PER_MIN
             THEN
              DO WITH B_CTRS_PT4_MT_35;
                    Q_S0060_ADD_LONG_INT(
                        M_LONG_INT(B_IP27B_NB_SCTP_BYTES),
                        B_IP21_TO_IP35D(E_MT_35_CTR_IP27B)); 
                    Q_S0060_ADD_LONG_INT(
                        M_LONG_INT(B_IP27D_NB_SCTP_PKTS),
                        B_IP21_TO_IP35D(E_MT_35_CTR_IP27D)); 
                    Q_S0060_ADD_LONG_INT(
                        M_LONG_INT(B_IP27E_NB_SCTP_PKT_RETRANS),
                        B_IP21_TO_IP35D(E_MT_35_CTR_IP27E)); 
               
             /* START CR_817677_01 */ 
                     
                     /*  Q_S0060_ADD_LONG_INT(
                        M_LONG_INT(B_IP27G_NB_MAX_SCTP_BYT_PER_MIN),
                        B_IP21_TO_IP35D(E_MT_35_CTR_IP27G)); */

                     Q_CALC_MAX_LONG_INT_TO_DPVAL(
                        M_LONG_INT(B_IP27G_NB_MAX_SCTP_BYT_PER_MIN),
                        B_IP21_TO_IP35D(E_MT_35_CTR_IP27G));
 
                /* START CR_817677_01 */ 


                    OD;
              ELSE
               DO WITH B_CTRS_PT4_MT_35;
                    Q_S0060_ADD_LONG_INT(
                        ZQ_TMP_CTR,
                        B_IP21_TO_IP35D(E_MT_35_CTR_IP27B));
                    Q_S0060_ADD_LONG_INT(
                        ZQ_TMP_CTR,
                        B_IP21_TO_IP35D(E_MT_35_CTR_IP27D));
                    Q_S0060_ADD_LONG_INT(
                        ZQ_TMP_CTR,
                        B_IP21_TO_IP35D(E_MT_35_CTR_IP27E));
                    Q_S0060_ADD_LONG_INT(
                        ZQ_TMP_CTR,
                        B_IP21_TO_IP35D(E_MT_35_CTR_IP27G));
                OD;
               FI; 
             OD;       
        OD;
      OD;
    FI;
  OD;
OD;
END Q_S0563_UPD_T35_4_SLH_IP;
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0564_UPD_SLH_IP_INVALID                          */        
/*                                                                    */        
/*     PROGRAMMER: SRINIVAS                                           */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 04/10/29                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATE TYPE 35 BLOCK 4 SLH IP COUNTERS                       */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*                      ZF_LDC_LCE_ID M_LCE_ID                        */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0140_GET_CIC_FROM_LCEID                    */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*     CALLED FROM:                                                   */        
/*                      P_GDXBYX_UPD_CCI_STD_CTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0564_UPD_SLH_IP_INVALID: PROC();                       

DCL ZQ_TC_IDX M_TC_ID;

DO FOR ZQ_TC_IDX := 1 TO M_MAX_TCID;
 DO WITH Z_R_TC_MGT_PTR -> ZM_R_TC_MGT(ZM_TC_INDEX_VALUE
         (ZQ_TC_IDX));
  IF (D_TCOM_ST = E_MS_IT OR D_TCOM_ST = E_MS_FIT)
  THEN
     DO WITH Z_T35_4_PTR->(ZM_TC_INDEX_VALUE(ZQ_TC_IDX));
        B_TC_IDX := ZQ_TC_IDX;
        B_FILLER := H'FF;
        DO WITH B_CTRS_PT4_MT_35;

        B_IP21_TO_IP35D(E_MT_35_CTR_IP27B).B_HIGH:=ZS_FFFF;
        B_IP21_TO_IP35D(E_MT_35_CTR_IP27B).B_LOW :=ZS_FFFE;

        B_IP21_TO_IP35D(E_MT_35_CTR_IP27D).B_HIGH:=ZS_FFFF;
        B_IP21_TO_IP35D(E_MT_35_CTR_IP27D).B_LOW :=ZS_FFFE;

        B_IP21_TO_IP35D(E_MT_35_CTR_IP27E).B_HIGH:=ZS_FFFF;
        B_IP21_TO_IP35D(E_MT_35_CTR_IP27E).B_LOW :=ZS_FFFE;

        B_IP21_TO_IP35D(E_MT_35_CTR_IP27G).B_HIGH:=ZS_FFFF;
        B_IP21_TO_IP35D(E_MT_35_CTR_IP27G).B_LOW :=ZS_FFFE; 
       OD;
      OD;
  FI;
 OD;
OD;

END Q_S0564_UPD_SLH_IP_INVALID;

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE:  Q_S0566_UPD_N7_SLH_IP_T110_5                       */        
/*                                                                    */        
/*     PROGRAMMER: SRINIVAS                                           */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 04/10/29                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATE TYPE 110 BLOCK 5 SLH IP COUNTERS                      */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*                      ZF_LDC_LCE_ID M_LCE_ID                        */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0140_GET_CIC_FROM_LCEID                    */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*     CALLED FROM:                                                   */        
/*                      P_GDXBYX_UPD_CCI_STD_CTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0566_UPD_N7_SLH_IP_T110_5: PROC(ZF_LDC_BUF_PTR PTR);                       
                                                                                
DCL ZQ_SL_IDX        INT,                                                       
    ZQ_SL_FND        INT,                                                       
    ZQ_CIC           M_CIC,                                                     
    ZQ_SCCP_CNTR     RANGE(E_C251_SCCPC_UDT_TX:E_C258_SCCPC_CREF_RX);                                          
DCL ZQ_J             RANGE(E_MT_110_CTR_MC350:E_MT_110_CTR_MC351);              
DCL ZQ_N7_LINKS      INT;
DCL ZQ_IDX           INT;

DO WITH ZF_LDC_BUF_PTR -> ZM_PM_SLH_IP_N7_DATA;
  DO WITH B_SLH_IP_PM_N7_CNTRS;
    IF B_NBR_N7_LINKS > 0
    THEN
      DO FOR ZQ_N7_LINKS :=1 TO B_NBR_N7_LINKS;
        DO WITH B_SLHIP_SCCP_CNTRS(ZQ_N7_LINKS - 1);
          DO FOR ZQ_IDX := 1 TO CM_FY32_PM_MAX_NBR_DTC_N7;
            DO WITH Z_R_N7_CONF_PTR -> ZM_R_N7_CONF(ZQ_IDX);
              IF (D_SLC = B_SLC) AND (D_LCE_ID /= ZS_FFFF)
              THEN
                ZQ_CIC := Q_S0140_GET_CIC_FROM_LCEID(D_LCE_ID,D_SLC);
                ZQ_SL_FND := 0;                                                               
                DO FOR ZQ_SL_IDX := 1 TO ZS_MAX_SLC_N7 
                                                   WHILE ZQ_SL_FND = 0;                   
                  DO WITH Z_T110_5_PTR->(ZQ_SL_IDX);                                          
                    IF B_LINK_ID = ZS_NULL_CIC                                                
                    /* THIS IS THE FIRST FREE ENTRY */ OR                                  
                       B_LINK_ID = ZQ_CIC                                                     
                    THEN                                                                      
                      ZQ_SL_FND := ZQ_SL_IDX;                                                 
                      B_LINK_ID := ZQ_CIC;                                                    
                      DO WITH B_CTRS_PT5_MT_110;                                              
                        DO FOR ZQ_SCCP_CNTR := E_C253_SCCPC_CR_TX  TO                         
                                               E_C256_SCCPC_CC_RX;                            
                          CASE ZQ_SCCP_CNTR OF                                                
                            (E_C253_SCCPC_CR_TX:                                              
                             E_C254_SCCPC_CR_RX): 
                               ZQ_J := E_MT_110_CTR_MC350;                 
                            (E_C255_SCCPC_CC_TX:                                              
                             E_C256_SCCPC_CC_RX): 
                               ZQ_J := E_MT_110_CTR_MC351;                 
                            ELSE                                                              
                          ESAC;                                                               
/* WIPRO CHANGE CR20/195110 */
                         /* Q_S0080_ADD_INT_TO_DPVAL( */
                          Q_S0060_ADD_LONG_INT(                      
/* WIPRO CHANGE CR20/195110 */
                            B_SCCP_CNTRS(ZQ_SCCP_CNTR),                            
                            B_MC350_TO_MC351(ZQ_J));                               
                        OD;                                                                   
                      OD;                                                                     
                    FI;                                                                       
                  OD;                                                                         
                OD;                                                                           
              FI;
            OD;
          OD;
        OD;
      OD;
    FI;
  OD;
OD;

END Q_S0566_UPD_N7_SLH_IP_T110_5;

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0567_UPD_T25_SLH_IP                              */        
/*                                                                    */        
/*     PROGRAMMER: SRINIVAS                                           */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 04/10/29                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATE TYPE 25 SLH IP COUNTERS                               */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*                      ZF_LDC_LCE_ID M_LCE_ID                        */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0140_GET_CIC_FROM_LCEID                    */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*     CALLED FROM:                                                   */        
/*                      P_GDXBYX_UPD_CCI_STD_CTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0567_UPD_T25_SLH_IP: PROC(ZF_LDC_BUF_PTR PTR);                       

DCL ZQ_SL_IDX        INT,
    ZQ_SL_FND        INT,
    ZQ_CIC           M_CIC,
    ZQ_SCCP_CNTR     RANGE(E_C251_SCCPC_UDT_TX:E_C258_SCCPC_CREF_RX);

DCL ZQ_LINK          INT;
DCL ZQ_LINK_INDEX    M_SLC_N7;
DCL ZQ_SLC_FND       INT;
DCL ZQ_REL_IDX       INT;
DCL ZQ_N7_LINKS      INT;
DCL ZQ_IDX           INT;

DO WITH ZF_LDC_BUF_PTR -> ZM_PM_SLH_IP_N7_DATA;
  DO WITH B_SLH_IP_PM_N7_CNTRS;
    IF B_NBR_N7_LINKS > 0
    THEN
      DO FOR ZQ_N7_LINKS :=1 TO B_NBR_N7_LINKS;
        DO WITH B_SLHIP_SCCP_CNTRS(ZQ_N7_LINKS - 1);
          DO FOR ZQ_IDX := 1 TO CM_FY32_PM_MAX_NBR_DTC_N7;
            DO WITH Z_R_N7_CONF_PTR -> ZM_R_N7_CONF(ZQ_IDX);
              IF (D_SLC = B_SLC) AND (D_LCE_ID /= ZS_FFFF)
              THEN
                ZQ_CIC := Q_S0140_GET_CIC_FROM_LCEID(D_LCE_ID,D_SLC);
                ZQ_SL_FND := 0;
                DO FOR ZQ_SL_IDX := 1 TO ZS_MAX_SLC_N7
                                                WHILE ZQ_SL_FND = 0;
                  DO WITH Z_T25_PTR->(ZQ_SL_IDX);
                    DO WITH B_DATA_MT_25;
                      IF B_LINK_ID = ZS_NULL_CIC
                        /* THIS IS THE FIRST FREE ENTRY */ OR
                         B_LINK_ID = ZQ_CIC
                      THEN
                        ZQ_SL_FND := ZQ_SL_IDX;
                        B_LINK_ID := ZQ_CIC;
                        DO FOR ZQ_SCCP_CNTR:=E_C251_SCCPC_UDT_TX TO
                                             E_C258_SCCPC_CREF_RX;
/* WIPRO CHANGE CR20/195110 */
                          /*Q_S0080_ADD_INT_TO_DPVAL(    */
                          Q_S0060_ADD_LONG_INT(
/* WIPRO CHANGE CR20/195110 */
                                       B_SCCP_CNTRS(ZQ_SCCP_CNTR),
                                       B_HIS_CC(
                                        M_SCCP_CNTR_NAME(ZQ_SCCP_CNTR)
                                        ));
                        OD;
                      FI;
                    OD;
                  OD; /* DO WITH Z_T25_PTR */
                OD;
              FI;
            OD;
          OD;
        OD;
      OD;
    FI;
  OD;
OD;

END Q_S0567_UPD_T25_SLH_IP;
/* END : WIPRO B11 IP MR0 PKG1 */

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0482_UPD_T25_TP                                  */        
/*                                                                    */        
/*     PROGRAMMER: CHEN ZHANGYI  (ASB)                                */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 04/10/27                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATE TYPE 25 N7 STANDARD COUNTERS FROM TP.                 */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*                      ZF_LDC_LCE_ID M_LCE_ID,                       */        
/*                      ZF_DTC_IND BOOL                               */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0140_GET_CIC_FROM_LCEID                    */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0250_UPD_DTC_STD_CNTRS                     */        
/*                      P_GDXBYX_UPD_CCI_STD_CTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0482_UPD_T25_TP: PROC(ZF_LDC_BUF_PTR PTR);                                 
                                                                                
DCL ZQ_SL_IDX        INT,                                                       
    ZQ_SL_FND        INT,                                                       
    ZQ_CIC           M_CIC,                                                     
    ZQ_SCCP_CNTR     RANGE(E_C251_SCCPC_UDT_TX:E_C258_SCCPC_CREF_RX);                                          
                                                                                
DCL ZQ_LINK          INT;                                                       
DCL ZQ_LINK_INDEX    M_SLC_N7;                                                  
DCL ZQ_SLC_FND       INT;                                                       
DCL ZQ_REL_IDX       INT;                                                       
DCL ZQ_N7_LINKS      INT;
DCL ZQ_IDX           INT;

DO WITH ZF_LDC_BUF_PTR -> ZM_PM_TP_N7_DATA;
  DO WITH B_TP_PM_N7_CNTRS;
    IF B_NBR_N7_LINKS > 0
    THEN
      DO FOR ZQ_N7_LINKS :=1 TO B_NBR_N7_LINKS;
        DO WITH B_TP_N7_CNTRS(ZQ_N7_LINKS - 1);
          DO FOR ZQ_IDX := 1 TO CM_FY32_PM_MAX_NBR_DTC_N7;
            DO WITH Z_R_N7_CONF_PTR -> ZM_R_N7_CONF(ZQ_IDX);
              IF (D_SLC = B_SLC) AND (D_LCE_ID /= ZS_FFFF)
              THEN
                /*CR20/223453*/
                ZQ_CIC := Q_S0140_GET_CIC_FROM_LCEID(D_LCE_ID,D_SLC); 
                /*CR20/223453*/
                ZQ_SL_FND := 0;                                                             
                DO FOR ZQ_SL_IDX := 1 TO ZS_MAX_SLC_N7 
                                                WHILE ZQ_SL_FND = 0;                 
                  DO WITH Z_T25_PTR->(ZQ_SL_IDX);                                           
                    DO WITH B_DATA_MT_25;                                                   
                      IF B_LINK_ID = ZS_NULL_CIC                                            
                        /* THIS IS THE FIRST FREE ENTRY */ OR                              
                         B_LINK_ID = ZQ_CIC                                                 
                      THEN                                                                  
                        ZQ_SL_FND := ZQ_SL_IDX;                                             
                        B_LINK_ID := ZQ_CIC;                                                
                        DO FOR ZQ_SCCP_CNTR:=E_C251_SCCPC_UDT_TX TO                         
                                             E_C258_SCCPC_CREF_RX;                          
/* WIPRO CHANGE CR20/195110 */ 
                          /*Q_S0080_ADD_INT_TO_DPVAL(    */                                     
                          Q_S0060_ADD_LONG_INT(                      
/* WIPRO CHANGE CR20/195110 */ 
                                       B_SCCP_CNTRS(ZQ_SCCP_CNTR),                          
                                       B_HIS_CC(
                                        M_SCCP_CNTR_NAME(ZQ_SCCP_CNTR)
                                        ));                             
                        OD;                                                                 
                      FI;                                                                   
                    OD;                                                                     
                  OD; /* DO WITH Z_T25_PTR */                                               
                OD;                                                                         
              FI;
            OD;
          OD;
        OD;
      OD;
    FI;
  OD;
OD;
                                                                                
END Q_S0482_UPD_T25_TP;                                                        
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0485_UPD_T26_TCU                                 */        
/*                                                                    */        
/*     PROGRAMMER: CHEN ZHANGYI                                       */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 02/07/25                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATE TYPE 26 STANDARD COUNTERS FROM TCU.                   */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*                      ZF_ACT_IDX INT                                */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0180_CELL_IN_SCOPE                         */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*                      Q_S0040_ADD_INT_TO_INT                        */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0285_UPD_T26_CNTRS                         */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0485_UPD_T26_TCU: PROC(ZF_LDC_BUF_PTR PTR,                               
                          ZF_ACT_IDX     INT);                              
                                                                                
DCL ZQ_CELL_CNT           INT,                                                  
    ZQ_CELL_INX           RANGE(1:M_PM_MAX_TARGET_CELLS);                      
DCL ZQ_NOT_FOUND_SERV     BOOL;
DCL ZQ_NOT_FOUND_TARGET   BOOL;                        
DCL ZQ_CI                 INT;

ZQ_CELL_CNT := 0;

DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_T26_CTRS_AREA.B_T26_CNTRS; 
  IF B_CELL_IDX /= M_NULL_CELL_IDX                                        
    THEN                                                            
    ZQ_CELL_CNT := B_NBR_TARGET_CELLS;
  FI;
OD;

/* CORRECT B8 WITTS 76
IF ZQ_CELL_CNT /= 0
THEN  */                                                             
  DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_T26_CTRS_AREA.B_T26_CNTRS;  
    IF (B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC) AND                          
       (B_CELL_IDX >  0) 
    THEN
     IF Q_S0180_CELL_IN_SCOPE(ZF_ACT_IDX, B_CELL_IDX)                          
     THEN                                                                      
      ZQ_NOT_FOUND_SERV:=TRUE;                                            
      DO FOR ZQ_CI:=1 TO M_PM_MAX_CELLS_FOR_A_MEAS_JOB                        
                                  WHILE ZQ_NOT_FOUND_SERV; 
       IF ZQ_CI <= M_PM_MAX_CELLS_FOR_A_MEAS_JOB/2
       THEN
        DO WITH Z_T26_PTR->(ZQ_CI)(0);             
          IF B_SERV_CELL=B_CELL_IDX OR    
             B_SERV_CELL=M_NULL_CELL_IDX 
          THEN                                        
            ZQ_NOT_FOUND_SERV:=FALSE;                       
            B_SERV_CELL := B_CELL_IDX;
            IF B_INVALID = FALSE
            THEN
             IF ZQ_CELL_CNT /= 0
             THEN 
              DO FOR ZQ_CELL_CNT := 1 TO B_NBR_TARGET_CELLS;
                ZQ_NOT_FOUND_TARGET := TRUE;
                DO FOR ZQ_CELL_INX := 1 TO M_PM_MAX_TARGET_CELLS
                                         WHILE ZQ_NOT_FOUND_TARGET;
                  DO WITH Z_T26_PTR->(ZQ_CI)(ZQ_CELL_INX);
                     DO WITH B_TARGET_CELL_CNTRS(ZQ_CELL_CNT);
                       /* CHENZY B9 BEGIN */
                       /*
                       IF B_ADJ_CELL=B_TARG_CELL_ID OR
                         (B_ADJ_CELL.ZB_LAC = ZS_FFFF   AND              
                          B_ADJ_CELL.ZB_CI = ZS_FFFF)                        
                       */
                       IF (B_ADJ_CELL.B_CELL_ID_CGI 
                             = B_TARG_CELL_ID.B_CELL_ID_CGI)
                          OR
                          (B_ADJ_CELL.B_CELL_ID_CGI = ZS_NULL_CGI)
                       /* CHENZY B9 END */
                       THEN                                                 
                         ZQ_NOT_FOUND_TARGET := FALSE;
                         /* CHENZY B9 BEGIN */
                         /*
                         B_ADJ_CELL:=B_TARG_CELL_ID;                        
                         */
                         B_ADJ_CELL.B_CELL_ID_CGI 
                           := B_TARG_CELL_ID.B_CELL_ID_CGI;
                         /* CHENZY B9 END */
                         Q_S0040_ADD_INT_TO_INT(                            
                           B_CNTRS_TYPE26
                             (E_C720_NB_ADJ_S_OUT_TCH_HO_ATPT),  
                           B_CTRS.B_MT_26_CTR_720);                          
                                                                             
                         Q_S0040_ADD_INT_TO_INT(                             
                           B_CNTRS_TYPE26
                             (E_C721_NB_ADJ_S_OUT_TCH_HO_SUCC), 
                           B_CTRS.B_MT_26_CTR_721);                         
                                                                            
                         Q_S0040_ADD_INT_TO_INT(                             
                           B_CNTRS_TYPE26
                             (E_C722_NB_ADJ_S_OUT_TCH_HO_EX_FR),
                           B_CTRS.B_MT_26_CTR_722);                       
                                                                          
                         Q_S0040_ADD_INT_TO_INT(                            
                           B_CNTRS_TYPE26
                             (E_C723_NB_ADJ_S_OUT_TCH_HO_EX_FN),
                           B_CTRS.B_MT_26_CTR_723);   
                    
                         Q_S0080_ADD_INT_TO_DPVAL(                            
                           B_CNTRS_TYPE26
                             (E_C724_NB_ADJ_S_OUT_TCH_HO_EM_AT), 
                           B_CTRS.B_MT_26_CTR_724);                         
                    
                         Q_S0080_ADD_INT_TO_DPVAL(                       
                           B_CNTRS_TYPE26
                             (E_C725_NB_ADJ_S_OUT_TCH_HO_PW_AT), 
                           B_CTRS.B_MT_26_CTR_725);                     
                    
                         Q_S0080_ADD_INT_TO_DPVAL(                           
                           B_CNTRS_TYPE26
                             (E_C727_NB_ADJ_S_OUT_TCH_HO_TF_AT),  
                           B_CTRS.B_MT_26_CTR_727);                       
                    
                         Q_S0080_ADD_INT_TO_DPVAL(                        
                           B_CNTRS_TYPE26
                             (E_C728_NB_ADJ_S_OUT_TCH_HO_DR_AT),  
                           B_CTRS.B_MT_26_CTR_728);                

                       FI;                                        
                     OD;
                   OD;
                OD;
              OD;
             FI; 
            FI;
          FI;
        OD;/*Z_T26_PTR*/
       ELSE
        DO WITH Z_T26_2_PTR->(ZQ_CI)(0);             
          IF B_SERV_CELL=B_CELL_IDX OR    
             B_SERV_CELL=M_NULL_CELL_IDX 
          THEN                                        
            ZQ_NOT_FOUND_SERV:=FALSE;                       
            B_SERV_CELL := B_CELL_IDX;
            IF B_INVALID = FALSE
            THEN 
             IF ZQ_CELL_CNT /= 0
             THEN
              DO FOR ZQ_CELL_CNT := 1 TO B_NBR_TARGET_CELLS;
                ZQ_NOT_FOUND_TARGET := TRUE;
                DO FOR ZQ_CELL_INX := 1 TO M_PM_MAX_TARGET_CELLS
                                         WHILE ZQ_NOT_FOUND_TARGET;
                  DO WITH Z_T26_2_PTR->(ZQ_CI)(ZQ_CELL_INX);
                     DO WITH B_TARGET_CELL_CNTRS(ZQ_CELL_CNT);
                       /* CHENZY B9 BEGIN */
                       /*
#ifdef GNU
                       IF  (B_ADJ_CELL.ZB_LAC = 
                               B_TARG_CELL_ID.ZB_LAC AND
                         B_ADJ_CELL.ZB_CI = B_TARG_CELL_ID.ZB_CI) OR 
#else
                       IF B_ADJ_CELL=B_TARG_CELL_ID OR
#endif
                         (B_ADJ_CELL.ZB_LAC = ZS_FFFF   AND              
                          B_ADJ_CELL.ZB_CI = ZS_FFFF)                        
                       */
                       IF (B_ADJ_CELL.B_CELL_ID_CGI 
                             = B_TARG_CELL_ID.B_CELL_ID_CGI)
                          OR
                          (B_ADJ_CELL.B_CELL_ID_CGI = ZS_NULL_CGI)
                       /* CHENZY B9 END */                       
                       THEN                                                 
                         ZQ_NOT_FOUND_TARGET := FALSE;
                         /* CHENZY B9 BEGIN */
                         /*
                         B_ADJ_CELL:=B_TARG_CELL_ID;                        
                         */
                         B_ADJ_CELL.B_CELL_ID_CGI 
                           := B_TARG_CELL_ID.B_CELL_ID_CGI;
                         /* CHENZY B9 END */
                         Q_S0040_ADD_INT_TO_INT(                            
                           B_CNTRS_TYPE26
                             (E_C720_NB_ADJ_S_OUT_TCH_HO_ATPT),  
                           B_CTRS.B_MT_26_CTR_720);                          
                                                                             
                         Q_S0040_ADD_INT_TO_INT(                             
                           B_CNTRS_TYPE26
                             (E_C721_NB_ADJ_S_OUT_TCH_HO_SUCC), 
                           B_CTRS.B_MT_26_CTR_721);                         
                                                                            
                         Q_S0040_ADD_INT_TO_INT(                             
                           B_CNTRS_TYPE26
                             (E_C722_NB_ADJ_S_OUT_TCH_HO_EX_FR),
                           B_CTRS.B_MT_26_CTR_722);                       
                                                                          
                         Q_S0040_ADD_INT_TO_INT(                            
                           B_CNTRS_TYPE26
                             (E_C723_NB_ADJ_S_OUT_TCH_HO_EX_FN),
                           B_CTRS.B_MT_26_CTR_723);   
                    
                         Q_S0080_ADD_INT_TO_DPVAL(                            
                           B_CNTRS_TYPE26
                             (E_C724_NB_ADJ_S_OUT_TCH_HO_EM_AT), 
                           B_CTRS.B_MT_26_CTR_724);                         
                    
                         Q_S0080_ADD_INT_TO_DPVAL(                       
                           B_CNTRS_TYPE26
                             (E_C725_NB_ADJ_S_OUT_TCH_HO_PW_AT), 
                           B_CTRS.B_MT_26_CTR_725);                     
                    
                         Q_S0080_ADD_INT_TO_DPVAL(                           
                           B_CNTRS_TYPE26
                             (E_C727_NB_ADJ_S_OUT_TCH_HO_TF_AT),  
                           B_CTRS.B_MT_26_CTR_727);                       
                    
                         Q_S0080_ADD_INT_TO_DPVAL(                        
                           B_CNTRS_TYPE26
                             (E_C728_NB_ADJ_S_OUT_TCH_HO_DR_AT),  
                           B_CTRS.B_MT_26_CTR_728);                

                       FI;                                        
                     OD;
                   OD;
                OD;
              OD;
             FI;
            FI;
          FI;
        OD;/*Z_T26_2_PTR*/
       FI;
      OD;
     FI;
    FI;
  OD;
/* CORRECT B8 WITTS 76
FI; */                            
 
END Q_S0485_UPD_T26_TCU;

                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0490_UPD_T27_STD_DTC                             */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 10/11/97                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATE TYPE 27 STANDARD COUNTERS FROM DTC.                   */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*                      ZF_ACT_IDX INT                                */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0444_UPD_T27_INVALID                       */        
/*                      Q_S0040_ADD_INT_TO_INT                        */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0250_UPD_DTC_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0490_UPD_T27_STD_DTC: PROC(ZF_LDC_BUF_PTR PTR,                               
                              ZF_ACT_IDX     INT,
                              ZF_LDC_SEQ_NBR INT);                              
                                                                                
DCL ZQ_CELL_CNT           INT,                                                  
    ZQ_CELL_INX           RANGE(1:M_PM_MAX_TARGET_CELLS);                       
DCL ZQ_NOT_FOUND          BOOL;                                                 
                                                                                
ZQ_CELL_CNT := 0;                                                               
/*START: FR36/294844*/
IF ZF_LDC_SEQ_NBR = 3
THEN
/*DO WITH ZF_LDC_BUF_PTR ->ZM_DTC_STD_BSS_CTRS_2.B_TARGET_CELL_CNTRS;*/                                  
DO WITH ZF_LDC_BUF_PTR ->ZM_DTC_STD_BSS_CTRS_2_A.B_TARGET_CELL_CNTRS;                                  
/*END: FR36/294844*/
  IF B_CELL_IDX /= M_NULL_CELL_IDX                                        
    THEN                                                                            
    ZQ_CELL_CNT := B_NBR_SERVING_CELLS;                     
  FI;
OD;                                                                             
                                                                                
Q_S0444_UPD_T27_INVALID(E_DATA_VALID, ZF_ACT_IDX);                              
IF ZQ_CELL_CNT /= 0                                                             
THEN                 
  IF NOT(Z_T27_PTR->(0).B_INVALID)
    THEN
/*START: FR36/294844*/
/*  DO WITH ZF_LDC_BUF_PTR ->ZM_DTC_STD_BSS_CTRS_2;*/                                  
    DO WITH ZF_LDC_BUF_PTR ->ZM_DTC_STD_BSS_CTRS_2_A;                                  
/*END: FR36/294844*/
      IF B_TARGET_CELLS_PRESENT                                                   
        THEN                                                                        
        DO WITH B_TARGET_CELL_CNTRS; /* USER BUFFER */                            
          Z_T27_PTR->(0).B_TARG_CELL := B_CELL_IDX;                               
          DO FOR ZQ_CELL_CNT := 1 TO B_NBR_SERVING_CELLS;                         
            /* MAY BE ZERO TARGET CELLS */                                        
            ZQ_NOT_FOUND := TRUE;                                                 
            DO FOR ZQ_CELL_INX := 1 TO M_PM_MAX_TARGET_CELLS WHILE                
                                              ZQ_NOT_FOUND;                     
              DO WITH Z_T27_PTR->(ZQ_CELL_INX);                                   
                /* FIND IF THE CELL IS PRESENT OR NEEDS TO BE CREATED */          
                DO WITH B_SERVING_CELL_CNTRS(ZQ_CELL_CNT);                        
                  /* CHENZY B9 BEGIN */
                  /*
#ifdef GNU
                  IF  (B_ADJ_CELL.ZB_LAC = B_SERV_CELL_ID.ZB_LAC AND
                      B_ADJ_CELL.ZB_CI = B_SERV_CELL_ID.ZB_CI)    OR 
#else
                  IF B_ADJ_CELL=B_SERV_CELL_ID OR                                 
#endif
                     (B_ADJ_CELL.ZB_LAC = ZS_FFFF   AND                                
                      B_ADJ_CELL.ZB_CI = ZS_FFFF)
                  */
                  IF (B_ADJ_CELL.B_CELL_ID_CGI
                        = B_SERV_CELL_ID.B_CELL_ID_CGI)
                     OR
                     (B_ADJ_CELL.B_CELL_ID_CGI = ZS_NULL_CGI)
                  /* CHENZY B9 END */
                  THEN                                                            
                    ZQ_NOT_FOUND := FALSE;                                        
                    /* CHENZY B9 BEGIN */
                    /*
                    B_ADJ_CELL:=B_SERV_CELL_ID;                                   
                    */
                    B_ADJ_CELL.B_CELL_ID_CGI 
                                      := B_SERV_CELL_ID.B_CELL_ID_CGI;
                    /* CHENZY B9 END */
                    Q_S0040_ADD_INT_TO_INT(                                       
                      B_CNTRS_TYPE27(E_C730_NB_ADJ_T_INC_TCH_HO_ATPT),            
                      B_CTRS.B_C730_INC_HO_ATPT);                                 
                                                                                
                    Q_S0040_ADD_INT_TO_INT(                                       
                      B_CNTRS_TYPE27(E_C731_NB_ADJ_T_INC_TCH_HO_SUCC),            
                      B_CTRS.B_C731_INC_HO_SUCC);                                 
                                                                                
                    Q_S0040_ADD_INT_TO_INT(                                       
                      B_CNTRS_TYPE27(E_C733_NB_ADJ_T_INC_TCH_HO_EX_F_),           
                      B_CTRS.B_C733_UNSUCC_HO_SEIZ_FAIL);                         
       
                    Q_S0080_ADD_INT_TO_DPVAL(                                     
                      B_CNTRS_TYPE27(E_C734_NB_ADJ_T_INC_TCH_HO_EM_AT),             
                      B_CTRS.B_C734_INC_EMERGENCY_ATPT);                                    
                    
                    Q_S0080_ADD_INT_TO_DPVAL(                                     
                      B_CNTRS_TYPE27(E_C735_NB_ADJ_T_INC_TCH_HO_PW_AT),             
                      B_CTRS.B_C735_INC_BETTERCELL_ATPT);                                    
                    
                    Q_S0080_ADD_INT_TO_DPVAL(                                     
                      B_CNTRS_TYPE27(E_C737_NB_ADJ_T_INC_TCH_HO_TF_AT),             
                      B_CTRS.B_C737_INC_TRAFFIC_ATPT);                                    
                    
                    Q_S0080_ADD_INT_TO_DPVAL(                                     
                      B_CNTRS_TYPE27(E_C738_NB_ADJ_T_INC_FORCED_DR_AT),             
                      B_CTRS.B_C738_INC_FORCED_DR_ATPT);                                    
                    
                    Q_S0080_ADD_INT_TO_DPVAL(                                     
                      B_CNTRS_TYPE27(E_C753_NB_ADJ_T_INC_TCH_HO_UN_AT),             
                      B_CTRS.B_C753_INC_HO_OTHER_ATPT);                                    
                
                  FI; /* IF CELL FOUND */                                         
                OD;                                                               
              OD; /* DO WITH THE HIS FILE PTR */                                  
            OD; /* DO FOR ALL TARGET CELLS */                                     
          OD; /* DO FOR TARGET CELLS IN USER BUFFER, IF ANY */                    
        OD; /* DO WITH THE SERVING CELL BUFFER */                                 
      FI; /* IF THE SERVING CELL IS PRESENT */                                    
    OD; /* DO WITH THE USER BUFFER */  
  FI;                                           
FI;                                                                             

/*START: FR36/294844*/
ELSE
 DO WITH ZF_LDC_BUF_PTR ->ZM_DTC_STD_BSS_CTRS_2_B.B_TARGET_CELL_CNTRS;                                  
  IF B_CELL_IDX /= M_NULL_CELL_IDX                                        
   THEN
  /* SSV : BEGIN - FR20/310052 */	
    /*ZQ_CELL_CNT := B_NBR_SERVING_CELLS; */                     
    /*START: CRI 649460 */
  /*ZQ_CELL_CNT := B_NBR_SERVING_CELLS - (M_PM_MAX_SERVING_CELLS/2);*/
    ZQ_CELL_CNT := B_NBR_SERVING_CELLS - (ZM_PM_MAX_SERVING_CELLS/2);
    /*END: CRI 649460 */
    /* SSV : END - FR20/310052 */                                                                         
  FI;
 OD;                                                                             
                                                                                
Q_S0444_UPD_T27_INVALID(E_DATA_VALID, ZF_ACT_IDX);                              
IF ZQ_CELL_CNT /= 0                                                             
THEN                 
  IF NOT(Z_T27_PTR->(0).B_INVALID)
    THEN
    DO WITH ZF_LDC_BUF_PTR ->ZM_DTC_STD_BSS_CTRS_2_B;                                  
      IF B_TARGET_CELLS_PRESENT                                                   
        THEN                                                                        
        DO WITH B_TARGET_CELL_CNTRS; /* USER BUFFER */                            
	  Z_T27_PTR->(0).B_TARG_CELL := B_CELL_IDX;                             
    /* SSV : BEGIN - FR20/310052 */		  
          /*DO FOR ZQ_CELL_CNT := 1 TO B_NBR_SERVING_CELLS; */
          /*START: CRI 649460*/
       /* DO FOR ZQ_CELL_CNT := ((M_PM_MAX_SERVING_CELLS/2)+1)  TO */
          DO FOR ZQ_CELL_CNT := ((ZM_PM_MAX_SERVING_CELLS/2)+1)  TO 
          /*END: CRI 649460*/
                                 B_NBR_SERVING_CELLS;		  
    /* SSV : END - FR20/310052 */                        
            /* MAY BE ZERO TARGET CELLS */                                        
            ZQ_NOT_FOUND := TRUE;                                                 
            DO FOR ZQ_CELL_INX := 1 TO M_PM_MAX_TARGET_CELLS WHILE                
                                              ZQ_NOT_FOUND;                     
              DO WITH Z_T27_PTR->(ZQ_CELL_INX);                                   
                /* FIND IF THE CELL IS PRESENT OR NEEDS TO BE CREATED */          
                DO WITH B_SERVING_CELL_CNTRS(ZQ_CELL_CNT);                        
                  /* CHENZY B9 BEGIN */
                  IF (B_ADJ_CELL.B_CELL_ID_CGI
                        = B_SERV_CELL_ID.B_CELL_ID_CGI)
                     OR
                     (B_ADJ_CELL.B_CELL_ID_CGI = ZS_NULL_CGI)
                  /* CHENZY B9 END */
                  THEN                                                            
                    ZQ_NOT_FOUND := FALSE;                                        
                    /* CHENZY B9 BEGIN */
                    /*
                    B_ADJ_CELL:=B_SERV_CELL_ID;                                   
                    */
                    B_ADJ_CELL.B_CELL_ID_CGI 
                                      := B_SERV_CELL_ID.B_CELL_ID_CGI;
                    /* CHENZY B9 END */
                    Q_S0040_ADD_INT_TO_INT(                                       
                      B_CNTRS_TYPE27(E_C730_NB_ADJ_T_INC_TCH_HO_ATPT),            
                      B_CTRS.B_C730_INC_HO_ATPT);                                 
                                                                                
                    Q_S0040_ADD_INT_TO_INT(                                       
                      B_CNTRS_TYPE27(E_C731_NB_ADJ_T_INC_TCH_HO_SUCC),            
                      B_CTRS.B_C731_INC_HO_SUCC);                                 
                                                                                
                    Q_S0040_ADD_INT_TO_INT(                                       
                      B_CNTRS_TYPE27(E_C733_NB_ADJ_T_INC_TCH_HO_EX_F_),           
                      B_CTRS.B_C733_UNSUCC_HO_SEIZ_FAIL);                         
       
                    Q_S0080_ADD_INT_TO_DPVAL(                                     
                      B_CNTRS_TYPE27(E_C734_NB_ADJ_T_INC_TCH_HO_EM_AT),             
                      B_CTRS.B_C734_INC_EMERGENCY_ATPT);                                    
                    
                    Q_S0080_ADD_INT_TO_DPVAL(                                     
                      B_CNTRS_TYPE27(E_C735_NB_ADJ_T_INC_TCH_HO_PW_AT),             
                      B_CTRS.B_C735_INC_BETTERCELL_ATPT);                                    
                    
                    Q_S0080_ADD_INT_TO_DPVAL(                                     
                      B_CNTRS_TYPE27(E_C737_NB_ADJ_T_INC_TCH_HO_TF_AT),             
                      B_CTRS.B_C737_INC_TRAFFIC_ATPT);                                    
                    
                    Q_S0080_ADD_INT_TO_DPVAL(                                     
                      B_CNTRS_TYPE27(E_C738_NB_ADJ_T_INC_FORCED_DR_AT),             
                      B_CTRS.B_C738_INC_FORCED_DR_ATPT);                                    
                    
                    Q_S0080_ADD_INT_TO_DPVAL(                                     
                      B_CNTRS_TYPE27(E_C753_NB_ADJ_T_INC_TCH_HO_UN_AT),             
                      B_CTRS.B_C753_INC_HO_OTHER_ATPT);                                    
                
                  FI; /* IF CELL FOUND */                                         
                OD;                                                               
              OD; /* DO WITH THE HIS FILE PTR */                                  
            OD; /* DO FOR ALL TARGET CELLS */                                     
          OD; /* DO FOR TARGET CELLS IN USER BUFFER, IF ANY */                    
        OD; /* DO WITH THE SERVING CELL BUFFER */                                 
      FI; /* IF THE SERVING CELL IS PRESENT */                                    
    OD; /* DO WITH THE USER BUFFER */  
  FI;                                           
FI;               

FI;                                                                 
/*END: FR36/294844*/

END Q_S0490_UPD_T27_STD_DTC;                                                    
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0498_UPD_T30_SMS_CB                              */        
/*                                                                    */        
/*     PROGRAMMER: L. DIERICK  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 13/01/98                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATE TYPE 28 DETAILED COUNTERS FROM DTC.                   */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*                      Q_S0040_ADD_INT_TO_INT                        */        
/*     CALLED FROM:                                                   */        
/*                      P_GDXBYX_UPD_CCI_STD_CTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0498_UPD_T30_SMS_CB: PROC(ZF_LDC_BUF_PTR   PTR);                             
                                                                                
 DO WITH ZF_LDC_BUF_PTR->M_PM_SMS_BUFFER;                                       
   DO WITH Z_T30_PTR->;                                                         
                                                                                
     Q_S0080_ADD_INT_TO_DPVAL(                                                  
            B_SMS_CNTRS(E_CB601_SMSCB_WRITE_REP_SUCC_LOA),                      
            B_HIS_SMSCB.B_MT_30_CTR_CB601);                                     
                                                                                
     Q_S0080_ADD_INT_TO_DPVAL(                                                  
            B_SMS_CNTRS(E_CB602_SMSCB_KILL_MSG_SUCC_LOAD),                      
            B_HIS_SMSCB.B_MT_30_CTR_CB602);                                     
                                                                                
     Q_S0040_ADD_INT_TO_INT(                                                    
            B_SMS_CNTRS(E_CB603_SMSCB_FAILURE_IND_LOAD),                        
            B_HIS_SMSCB.B_MT_30_CTR_CB603);                                     
                                                                                
     Q_S0040_ADD_INT_TO_INT(                                                    
            B_SMS_CNTRS(E_CB604_SMSCB_REJECT_LOAD),                             
            B_HIS_SMSCB.B_MT_30_CTR_CB604);                                     
   OD;                                                                          
 OD;                                                                            
END Q_S0498_UPD_T30_SMS_CB;                                                     
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0500_FIND_CELL_HIS_T1                            */        
/*                                                                    */        
/*     PROGRAMMER:  L. DIERICK                                        */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/12/02                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_CELL_IDX M_CELL_IDX                        */        
/*     RETURNED VALUE:                                                */        
/*                      INT                                           */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0506_UPD_T1_STD_TCU                        */        
/*                      Q_S0507_UPD_T1_STD_DTC                        */        
/*                      Q_S0509_UPD_T1_STD_TCHRM                      */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0500_FIND_CELL_HIS_T1: PROC(ZF_CELL_IDX M_CELL_IDX)                          
                    RETURNS (INT);                                              
                                                                                
                                                                                
DCL ZQ_FOUND     INT;                                                           
DCL ZQ_I         INT;                                                           
                                                                                
  ZQ_FOUND := 0;                                                                
                                                                                
  DO FOR ZQ_I := 1 TO M_PM_MAX_CELLS_FOR_A_MEAS_JOB WHILE ZQ_FOUND=0;           
    IF Z_T1_PTR->(ZQ_I).B_CELL = ZF_CELL_IDX OR                                 
       Z_T1_PTR->(ZQ_I).B_CELL = M_NULL_CELL_IDX                                
    THEN                                                                        
      Z_T1_PTR->(ZQ_I).B_CELL := ZF_CELL_IDX;                                   
      ZQ_FOUND := ZQ_I;                                                         
    FI;                                                                         
  OD;                                                                           
                                                                                
RETURN (ZQ_FOUND);                                                              
                                                                                
END Q_S0500_FIND_CELL_HIS_T1;                                                   
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0506_UPD_T1_STD_TCU                              */        
/*                                                                    */        
/*     PROGRAMMER:  L. DIERICK                                        */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/10/31                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*                      ZF_ACT_IDX INT                                */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0180_CELL_IN_SCOPE                         */        
/*                      Q_S0500_FIND_CELL_HIS_T1                      */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0506_UPD_T1_STD_TCU: PROC(ZF_LDC_BUF_PTR PTR,                                
                             ZF_ACT_IDX     INT);                               
                                                                                
DCL ZQ_NBR_OF_CELLS     INT;                                                    
DCL ZQ_HIS_IDX          INT;                                                    
DCL ZQ_J                M_TYPE_01_CTRS_CELL;                                         
DCL ZQ_I                CM_TCU_TYPE_110_CELL;    
DCL ZQ_TRX_IDX          M_TRX_IDX;
DCL ZQ_NBR_TRX          INT;   
DCL ZQ_INCREMENT        BOOL;                                                
                               
DO WITH ZF_LDC_BUF_PTR->CM_FY32_TCU_STD_CTRS_AREA;                            
  ZQ_NBR_TRX := B_NBR_TRX;                          
  ZQ_NBR_OF_CELLS := B_NBR_CELLS;  
OD;                  
IF ZQ_NBR_OF_CELLS > CM_FY32_MAX_CELLS_PER_TCU OR                               
   ZQ_NBR_OF_CELLS < 0                                                    
THEN                                                                            
  /* OUT OF RANGE */                                                            
  ZQ_NBR_OF_CELLS:=0;                                                           
  Q_S0010_CCDC_ERROR(M_ERC6_USER_REC,                                           
                     M_ERT0019_INC_MESS_DATA, 30, 0194);                        
FI;                                                                             
DO WHILE ZQ_NBR_OF_CELLS /= 0;                                                  
  DO WITH ZF_LDC_BUF_PTR->CM_FY32_TCU_STD_CTRS_AREA;                            
    DO WITH B_CELL_CNTRS(ZQ_NBR_OF_CELLS);                                      
      IF (B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC) AND                          
         (B_CELL_IDX > 0) AND                                                   
         (Q_S0180_CELL_IN_SCOPE(ZF_ACT_IDX,B_CELL_IDX))                         
      THEN                                                                      
        ZQ_HIS_IDX := Q_S0500_FIND_CELL_HIS_T1(B_CELL_IDX);                     
      ELSE                                                                      
        ZQ_HIS_IDX:=0;                                                          
      FI;                                                                       
      IF (ZQ_HIS_IDX /= 0)                                                      
      THEN                                                                      
        DO WITH Z_T1_PTR->(ZQ_HIS_IDX);                                         
          DO FOR ZQ_I := E_MC01_NBR_DCCH_TERM_TRANS TO                          
                         E_MC705_NBR_TCH_NOR_DATA_ALLOC;  
            ZQ_INCREMENT := TRUE;                                 
            CASE ZQ_I OF                                                        
                                                                                
              (E_MC01_NBR_DCCH_TERM_TRANS :                                     
               E_MC02_NBR_DCCH_ORIG_TRANS) :                                    
                ZQ_J := M_TYPE_01_CTRS_CELL(INT(ZQ_I));                              
                                                                                
              (E_MC02A_NBR_DCCH_LOC_UPD :                                       
               E_MC02G_NBR_DCCH_IMSI_DET_IND) :                                 
                ZQ_J := M_TYPE_01_CTRS_CELL(INT(E_MT_01_CTR_C02A) +                  
                        INT(ZQ_I) - INT(E_MC02A_NBR_DCCH_LOC_UPD));             
                                                                                
              (E_MC02H_NBR_DCCH_CALL_ESTABL_ORI) :                              
                ZQ_J := E_MT_01_CTR_C02H;                                       
                                                                                
              (E_MC04_NBR_NO_DCCH_AVAIL) :                                      
                ZQ_J := E_MT_01_CTR_C04;                                        
                                                                                
              (E_MC10_NBR_SDCCH_SEIZ_HO):                                       
                ZQ_J := E_MT_01_CTR_C10;                                        
                                                                                
              (E_MC14C_NBR_RTCH_LOST_BSS_PBL) :                                 
                 ZQ_J := E_MT_01_CTR_C14C;                                      
                                                                                
              (E_MC15A_NB_INC_IDR_ALLOC:                                        
               E_MC15B_NB_INC_TCH_HO_ALLOC) :                                   
                ZQ_J := M_TYPE_01_CTRS_CELL(INT(E_MT_01_CTR_C15A)+                  
                        INT(ZQ_I) - INT(E_MC15A_NB_INC_IDR_ALLOC));             
                                                                                
              (E_MC137_NBR_SDCCH_LOST_BSS_PBL:                                
               E_MC138_NBR_SDCCH_LOST_RADLK_FL) :                                     
                ZQ_J := M_TYPE_01_CTRS_CELL(INT(E_MT_01_CTR_C137)+                  
                 INT(ZQ_I) -                                                    
                 INT(E_MC137_NBR_SDCCH_LOST_BSS_PBL));                        
                                                                                
              (E_MC147_NBR_HO_SDCCH_SZ_ATTEMPT:                                 
               E_MC149_NBR_SDCCH_ASS_FL_MS_ACC):                                
                 ZQ_J := M_TYPE_01_CTRS_CELL(INT(E_MT_01_CTR_C147)+                 
                 INT(ZQ_I) -                                                    
                 INT(E_MC147_NBR_HO_SDCCH_SZ_ATTEMPT));                         
                                                     
              (E_MC850_NB_MULTIBAND_MS_ACCESS):                                
                 ZQ_J := E_MT_01_CTR_C850;                                      
                                                                                
              (E_MC170_NB_CALL_TFO):                                
                 ZQ_J := E_MT_01_CTR_C170;                                      
                                                                                
              (E_MC704A_NB_TCH_NOR_AMR_FR_ALLOC):
                 ZQ_J := E_MT_01_CTR_C704A;                                      
                                                                                
              (E_MC704B_NB_TCH_NOR_AMR_HR_ALLOC): 
                 ZQ_J := E_MT_01_CTR_C704B;                                      
                                                                                
              (E_MC706_NB_EGSM_MS_ACCESS_EXCEPT):                                
                 ZQ_J := E_MT_01_CTR_C706;  
              
              /* DEL FOR B8
              (E_MC851_NB_IMM_ASS_REQ_EXCEPT_LU):
                 ZQ_J := E_MT_01_CTR_C851;  
              */
                 
              (E_MC161A_NB_DTAP_MO_NOR_ASS_SUCC:                                
               E_MC162C_NB_DR_EST_PH_REM_TRAN_F):                               
                 ZQ_J := M_TYPE_01_CTRS_CELL(INT(E_MT_01_CTR_C161A)+                
                           INT(ZQ_I) -                                          
                           INT(E_MC161A_NB_DTAP_MO_NOR_ASS_SUCC));              
              
              (E_MC702A_NBR_TCH_NOR_FR_ALLOC:
               E_MC702C_NBR_TCH_NOR_EFR_ALLOC):
                 ZQ_J := M_TYPE_01_CTRS_CELL(INT(E_MT_01_CTR_C702A)+
                           INT(ZQ_I) -
                           INT(E_MC702A_NBR_TCH_NOR_FR_ALLOC));
              
              (E_MC705_NBR_TCH_NOR_DATA_ALLOC):
                 ZQ_J := E_MT_01_CTR_C705;
                                                                                
            ELSE                                                                
              ZQ_INCREMENT := FALSE; 
                                              
            ESAC;                                                               
            IF ZQ_INCREMENT
              THEN
              Q_S0080_ADD_INT_TO_DPVAL(                                           
                    B_CNTRS_TYPE_110(ZQ_I),                                       
                    B_CTRS_CELLPT.B_C01_TO_C02I(ZQ_J));                                        
            FI;                                                                    
          OD; /* DO FOR  */                                                     
          
          /* DEL FOR B8                                                                      
          Q_S0080_ADD_INT_TO_DPVAL(                                             
                 B_CNTRS_TYPE_110(                                              
                 E_MC14C_NBR_RTCH_LOST_BSS_PBL),                                
                 B_CTRS_CELLPT.B_C01_TO_C903(E_MT_01_CTR_C14));                    
          */
                                                                                
        OD; /* DO WITH Z_T1_PTR  */                                             
      FI;                                                                       
    OD; /* CELL CNTRS */                                                        
    ZQ_NBR_OF_CELLS := ZQ_NBR_OF_CELLS - 1;                                     
                                                                                
  OD;                                                                           
OD;    
                                                                         
IF ZQ_NBR_TRX < CM_FY32_MAX_TRX_PER_CELL OR                                     
   ZQ_NBR_TRX > 0                                                         
THEN                                                                            
  DO WHILE ZQ_NBR_TRX /= 0;                                                       
    DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_STD_CTRS_AREA;                          
      ZQ_TRX_IDX := B_TRX_CNTRS(ZQ_NBR_TRX).B_TRX_IDX;                            
                                                                                
      IF ZQ_TRX_IDX > 0 AND                              
         ZQ_TRX_IDX <= CM_FY32_MAX_TRX_PER_BSC                                    
      THEN                                                                        
        DO WITH Z_T1_2_PTR->(ZQ_TRX_IDX);                                       
          B_TRX_IDX := ZQ_TRX_IDX;                                                
          IF Z_STD_TRX_LIST(ZQ_TRX_IDX)                                           
          THEN                                                                    
            DO WITH B_TRX_CNTRS(ZQ_NBR_TRX);
                                                                                
              Q_S0040_ADD_INT_TO_INT(                                                    
                B_TRX_CNTRS(E_MC703_NB_TCH_NOR_ALLOC_TRX),                        
                B_CTRS_TRXPT.B_C621_TO_C746B(E_MT_01_CTR_C703));                                     
                                                                                
              Q_S0040_ADD_INT_TO_INT(                                                    
                B_TRX_CNTRS(E_MC717A_NB_INC_IDR_SUCC_TRX),                        
                B_CTRS_TRXPT.B_C621_TO_C746B(E_MT_01_CTR_C717A));                                     
                                                                                
              Q_S0040_ADD_INT_TO_INT(                                                    
                B_TRX_CNTRS(E_MC717B_NB_INC_TCH_HO_SUCC_TRX),                        
                B_CTRS_TRXPT.B_C621_TO_C746B(E_MT_01_CTR_C717B));                                     
                                                                                
              Q_S0040_ADD_INT_TO_INT(                                                    
                B_TRX_CNTRS(E_MC718_NB_TCH_NOR_ASS_SUCC_TRX),                        
                B_CTRS_TRXPT.B_C621_TO_C746B(E_MT_01_CTR_C718));                                     
                                                                                
              Q_S0040_ADD_INT_TO_INT(                                                    
                B_TRX_CNTRS(E_MC736_NB_TCH_DROP_PHAS_RFL_TRX),                        
                B_CTRS_TRXPT.B_C621_TO_C746B(E_MT_01_CTR_C736));                                     
                                                                                
              Q_S0040_ADD_INT_TO_INT(                                                    
                B_TRX_CNTRS(E_MC739_NB_TCH_DROP_PHAS_RTL_TRX),                        
                B_CTRS_TRXPT.B_C621_TO_C746B(E_MT_01_CTR_C739));                                     
            OD;                                                                      
          FI;                                                                     
        OD; /* DO WITH HIS FILE FORMAT */                                         
      FI;                                                                         
      ZQ_NBR_TRX := ZQ_NBR_TRX - 1;                                               
    OD;                                                                           
  OD;
FI;                                                                             
END Q_S0506_UPD_T1_STD_TCU;                                                     
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0507_UPD_T1_STD_DTC                              */        
/*                                                                    */        
/*     PROGRAMMER:  L. DIERICK                                        */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/10/31                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*                      ZF_ACT_IDX INT                                */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0180_CELL_IN_SCOPE                         */        
/*                      Q_S0500_FIND_CELL_HIS_T1                      */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0250_UPD_DTC_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0507_UPD_T1_STD_DTC: PROC(ZF_LDC_BUF_PTR PTR,                                
                             ZF_ACT_IDX     INT);                               
                                                                                
DCL ZQ_NBR_OF_CELLS     INT;                                                    
DCL ZQ_HIS_IDX          INT;                                                    
/*
DCL ZQ_I                M_DTC_TRF_CNTRS_TYPE110;                                
DCL ZQ_J                M_TYPE_01_CTRS_CELL;                             
*/
 
DO WITH ZF_LDC_BUF_PTR->M_DTC_STD_CELL_CTRS;                                  
  ZQ_NBR_OF_CELLS := B_NBR_CELLS; 
OD;                   
IF ZQ_NBR_OF_CELLS > M_PM_MAX_STD_CELLS_DTC_BUF OR                              
   ZQ_NBR_OF_CELLS < 0                                                          
THEN                                                                            
  /* OUT OF RANGE */                                                            
  ZQ_NBR_OF_CELLS:=0;                                                           
  Q_S0010_CCDC_ERROR(M_ERC6_USER_REC,                                           
                     M_ERT0019_INC_MESS_DATA, 31, 0194);                        
FI;                                                                             
                                                                                
DO WHILE ZQ_NBR_OF_CELLS /= 0;                                                  
  DO WITH ZF_LDC_BUF_PTR->M_DTC_STD_CELL_CTRS;                                  
    DO WITH B_CELL_CNTRS(ZQ_NBR_OF_CELLS);                                      
      IF (B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC) AND                          
         (B_CELL_IDX > 0) AND                                                   
         (Q_S0180_CELL_IN_SCOPE(ZF_ACT_IDX,B_CELL_IDX))                         
      THEN                                                                      
        ZQ_HIS_IDX := Q_S0500_FIND_CELL_HIS_T1(B_CELL_IDX);                     
      ELSE                                                                      
        ZQ_HIS_IDX:=0;                                                          
      FI;                                                                       
      IF (ZQ_HIS_IDX /= 0)                                                      
      THEN                                                                      
        DO WITH Z_T1_PTR->(ZQ_HIS_IDX);                                         
          Q_S0080_ADD_INT_TO_DPVAL(                                             
                     B_DTC_TYPE110(E_MC03_NB_OUT_SDCCH_HO_SUCC),                
                     B_CTRS_CELLPT.B_C01_TO_C02I
                      (E_MT_01_CTR_C03));                          
                                                                                
          Q_S0080_ADD_INT_TO_DPVAL(                                             
                     B_DTC_TYPE110(E_MC07_NBR_SDCCH_HO_NO_MS_RET),              
                     B_CTRS_CELLPT.B_C01_TO_C02I
                     (E_MT_01_CTR_C07)); 
                     
          /* CHENZY:COUNTERS DUP FROM TYPE 1 TO TYPE 110 */
          Q_S0080_ADD_INT_TO_DPVAL(                                             
                     B_DTC_TYPE110(E_MC701A_NBR_TCH_FR_REQ),              
                     B_CTRS_CELLPT.B_C01_TO_C02I
                     (E_MT_01_CTR_C701A));
          
          Q_S0080_ADD_INT_TO_DPVAL(                                             
                     B_DTC_TYPE110(E_MC701B_NBR_TCH_DR_REQ),              
                     B_CTRS_CELLPT.B_C01_TO_C02I
                     (E_MT_01_CTR_C701B));                         
          
          Q_S0080_ADD_INT_TO_DPVAL(                                             
                     B_DTC_TYPE110(E_MC701C_NBR_TCH_DR_EFR_REQ),              
                     B_CTRS_CELLPT.B_C01_TO_C02I
                     (E_MT_01_CTR_C701C));
          
          Q_S0080_ADD_INT_TO_DPVAL(                                             
                     B_DTC_TYPE110(E_MC701D_NBR_TCH_AMR_REQ),              
                     B_CTRS_CELLPT.B_C01_TO_C02I
                     (E_MT_01_CTR_C701D));
                     
          Q_S0080_ADD_INT_TO_DPVAL(                                             
                     B_DTC_TYPE110(E_MC701E_NBR_TCH_DATA_REQ),              
                     B_CTRS_CELLPT.B_C01_TO_C02I
                     (E_MT_01_CTR_C701E));
          
          Q_S0080_ADD_INT_TO_DPVAL(                                             
                     B_DTC_TYPE110(E_MC901_NBR_SUSPEND_FREQ),              
                     B_CTRS_CELLPT.B_C01_TO_C02I
                     (E_MT_01_CTR_C901));
          
          Q_S0080_ADD_INT_TO_DPVAL(                                             
                     B_DTC_TYPE110(E_MC902_NBR_SUSPEND_FAIL),              
                     B_CTRS_CELLPT.B_C01_TO_C02I
                     (E_MT_01_CTR_C902));
          
          Q_S0080_ADD_INT_TO_DPVAL(                                             
                     B_DTC_TYPE110(E_MC903_NBR_SUSPEND_SUCC),              
                     B_CTRS_CELLPT.B_C01_TO_C02I
                     (E_MT_01_CTR_C903));
                                                                                
          /* DEL FOR B8
          ZQ_J := E_MT_01_CTR_C14A;                                             
          DO FOR ZQ_I := E_MC14A_NBR_HO_RTCH_FAIL_BSS_PBL TO                    
                         E_MC14B_NBR_ASS_RTCH_FAIL_BSS_PB;                      
                                                                                
            Q_S0080_ADD_INT_TO_DPVAL(                                           
                     B_DTC_TYPE110(ZQ_I),                                       
                     B_CTRS_CELLPT.B_C01_TO_C903(ZQ_J));                                     
                                                                                
            Q_S0080_ADD_INT_TO_DPVAL(                                           
                     B_DTC_TYPE110(ZQ_I),                                       
                     B_CTRS_CELLPT.B_C01_TO_C903(E_MT_01_CTR_C14));                          
                                                                                
            ZQ_J := SUCC(ZQ_J);                                                 
          OD;
          */
          Q_S0080_ADD_INT_TO_DPVAL(
                     B_DTC_TYPE110(E_MC14A_NBR_HO_RTCH_FAIL_BSS_PBL),
                     B_CTRS_CELLPT.B_C01_TO_C02I
                     (E_MT_01_CTR_C14A));

          /* ADD IN B8 */
          Q_S0080_ADD_INT_TO_DPVAL(
                     B_DTC_TYPE110(E_MC02I_NUM_IMM_ASS_SUCC_MO_LCS),
                     B_CTRS_CELLPT.B_C01_TO_C02I
                     (E_MT_01_CTR_C02I));

          Q_S0080_ADD_INT_TO_DPVAL(
                     B_DTC_TYPE110(E_MC02I_NUM_IMM_ASS_SUCC_MO_LCS),
                     B_CTRS_CELLPT.B_C01_TO_C02I
                     (E_MT_01_CTR_C02));
          /* ADD END */
          
        OD;                                                                     
      FI;                                                                       
    OD;                                                                         
    ZQ_NBR_OF_CELLS := ZQ_NBR_OF_CELLS - 1;                                     
  OD;                                                                           
OD;                                                                             
                                                                                
END Q_S0507_UPD_T1_STD_DTC;                                                     

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0508_UPD_T6_STD_TCHRM                            */        
/*                                                                    */        
/*     PROGRAMMER:  L. DIERICK                                        */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/10/31                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*                      ZF_ACT_IDX INT                                */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0180_CELL_IN_SCOPE                         */        
/*                      Q_S0500_FIND_CELL_HIS_T1                      */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0260_UPD_TCH_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0508_UPD_T6_STD_TCHRM: PROC(ZF_LDC_BUF_PTR PTR,
                               ZF_ACT_IDX     INT);                             
                                                                                
DCL ZQ_FOUND         INT;
DCL ZQ_I             INT;                                                       
DCL ZQ_NBR_CELLS     INT;                              
                                                                                
DO WITH ZF_LDC_BUF_PTR -> CM_FY32_PM_TCH_UB_CELLS;
  ZQ_NBR_CELLS := B_FIXED.B_NBR_CELLS;
   /* FR36/258183 */
   /*  IF ZQ_NBR_CELLS > M_MAX_CELLS_PER_USR_BUF OR*/
      IF ZQ_NBR_CELLS > CM_FY32_PM_MAX_CELLS_PER_TCHRM_LDC_UB OR
   /* FR36/258183 */  
    ZQ_NBR_CELLS < 0
  THEN
    /* OUT OF RANGE */
    ZQ_NBR_CELLS := 0;
    Q_S0010_CCDC_ERROR(M_ERC6_USER_REC,
                       M_ERT0019_INC_MESS_DATA, 32, 0194);
  FI;
                                                                                
  DO WHILE ZQ_NBR_CELLS /= 0;                                                   
    DO WITH B_CELL_CTRS(LONG_INT((ZQ_NBR_CELLS)));                                          
      IF (B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC) AND                          
         (B_CELL_IDX >  0) AND                                                  
         (Q_S0180_CELL_IN_SCOPE(ZF_ACT_IDX,B_CELL_IDX))                         
        THEN     
        ZQ_FOUND := 0;                                                                 
        DO FOR ZQ_I := 1 TO M_PM_MAX_CELLS_FOR_A_MEAS_JOB                       
                                         WHILE ZQ_FOUND = 0;                    
          DO WITH Z_T6_PTR->(ZQ_I);                                             
            IF B_CELL_ID = B_CELL_IDX OR                                        
               B_CELL_ID = M_NULL_CELL_IDX                                      
              THEN                                                                
              ZQ_FOUND := ZQ_I;                                                 
              B_CELL_ID := B_CELL_IDX;                                          
                                                                                
              Q_S0080_ADD_INT_TO_DPVAL(                                           
                     B_TYPE_6(E_C460_NB_TCH_HO_ALLOC_EMER_PRES),                                              
                     B_HIS_CC_MT_06.B_FROM_C413_TO_C461(54));
            FI;
          OD;                                                  
        OD;                                                                     
      FI;                                                                       
      ZQ_NBR_CELLS := ZQ_NBR_CELLS - 1;                                         
    OD;                                                                         
  OD;                                                                           
OD;                                                                             
                                                                                
END Q_S0508_UPD_T6_STD_TCHRM;                                                   
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0509_UPD_T1_STD_TCHRM                            */        
/*                                                                    */        
/*     PROGRAMMER:  L. DIERICK                                        */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/10/31                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*                      ZF_ACT_IDX INT                                */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0180_CELL_IN_SCOPE                         */        
/*                      Q_S0500_FIND_CELL_HIS_T1                      */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0260_UPD_TCH_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0509_UPD_T1_STD_TCHRM: PROC(ZF_LDC_BUF_PTR PTR,
                               ZF_ACT_IDX     INT);                             
                                                                                
DCL ZQ_HIS_IDX       INT;                                                       
DCL ZQ_I             M_PM_TCH_TYPE_1;                                           
DCL ZQ_J             M_TYPE_01_CTRS_CELL;  
DCL ZQ_NBR_CELLS     INT;                              
                                                                                
DO WITH ZF_LDC_BUF_PTR -> CM_FY32_PM_TCH_UB_CELLS;
  ZQ_NBR_CELLS := B_FIXED.B_NBR_CELLS;
  /* FR36/258183 */
  /*  IF ZQ_NBR_CELLS > M_MAX_CELLS_PER_USR_BUF OR*/
  IF ZQ_NBR_CELLS > CM_FY32_PM_MAX_CELLS_PER_TCHRM_LDC_UB OR
  /* FR36/258183 */     
      ZQ_NBR_CELLS < 0
  THEN
    /* OUT OF RANGE */
    ZQ_NBR_CELLS := 0;
    Q_S0010_CCDC_ERROR(M_ERC6_USER_REC,
                       M_ERT0019_INC_MESS_DATA, 32, 0194);
  FI;

  DO WHILE ZQ_NBR_CELLS /= 0;
    DO WITH B_CELL_CTRS(LONG_INT((ZQ_NBR_CELLS)));                                          
      IF (B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC) AND                          
         (B_CELL_IDX >  0) AND                                                  
         (Q_S0180_CELL_IN_SCOPE(ZF_ACT_IDX,B_CELL_IDX))                         
      THEN                                                                      
        ZQ_HIS_IDX := Q_S0500_FIND_CELL_HIS_T1(B_CELL_IDX);                     
      ELSE                                                                      
        ZQ_HIS_IDX:=0;                                                          
      FI;                                                                       
      IF (ZQ_HIS_IDX /= 0)                                                      
      THEN                                                                      
        DO WITH Z_T1_PTR->(ZQ_HIS_IDX);                                         
          DO FOR ZQ_I := E_C612A_NO_RTCH_AVAIL_NO_QE TO                         
                         E_C612D_NO_RTCH_AVAIL_QE_REJ;                          
                                                                                
            ZQ_J := M_TYPE_01_CTRS_CELL(INT(E_MT_01_CTR_C612A) +                     
                    INT(ZQ_I) - INT(E_C612A_NO_RTCH_AVAIL_NO_QE));              
                                                                                
            Q_S0080_ADD_INT_TO_DPVAL(                                           
                   B_TYPE_1(ZQ_I),                                              
                   B_CTRS_CELLPT.B_C01_TO_C02I(ZQ_J));                                       
                                                                                
            Q_S0080_ADD_INT_TO_DPVAL(                                           
                   B_TYPE_1(ZQ_I),                                              
                   B_CTRS_CELLPT.B_C01_TO_C02I(E_MT_01_CTR_C812));                           
                                                                                
          OD;                                                                   
          
          /* PBLO: force C612E to 0 (dirty solution to solve 
                contradiction in catalog, in B8, this must be removed
                and C812 must become sum of C612a - C612e (but C612e 
                will not come from TCHRM_LDC */
          
          /* CHENZY: C612E IS DELETED IN B8 PKG6*/
          /* 
          Q_S0080_ADD_INT_TO_DPVAL(                                           
                   0,                                              
                   B_CTRS_CELLPT.B_C01_TO_C903(E_MT_01_CTR_C612E));                                       
          */
          Q_S0080_ADD_INT_TO_DPVAL(                                             
              B_TYPE_1(E_C13A_NB_TCH_NOR_ASS_QUEUED),                           
              B_CTRS_CELLPT.B_C01_TO_C02I(E_MT_01_CTR_C13A));                                
                                                                                
          Q_S0080_ADD_INT_TO_DPVAL(                                             
              B_TYPE_1(E_C13B_NB_INC_EXT_TCH_HO_QUEUED),                        
              B_CTRS_CELLPT.B_C01_TO_C02I(E_MT_01_CTR_C13B));                                
                                                                                
/** C410, C422 & C423 IN RESTRICTION   */                                       
                                                                                
          Q_S0080_ADD_INT_TO_DPVAL(                                             
              B_TYPE_1(E_C442_NBR_HIGH_TRAFFIC_LOAD),                           
              B_CTRS_CELLPT.B_C01_TO_C02I(E_MT_01_CTR_C442));                                
                                                                                
          Q_S0080_ADD_INT_TO_DPVAL(                                             
              B_TYPE_1(E_C443_NBR_LOW_TRAFFIC_LOAD),                            
              B_CTRS_CELLPT.B_C01_TO_C02I(E_MT_01_CTR_C443));                                
                                                                                
        OD;                                                                     
      FI;                                                                       
      ZQ_NBR_CELLS := ZQ_NBR_CELLS - 1;                                         
    OD;                                                                         
  OD;                                                                           
OD;                                                                             
                                                                                
END Q_S0509_UPD_T1_STD_TCHRM;                                                   
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0510_FIND_CELL_HIS_T2                            */        
/*                                                                    */        
/*     PROGRAMMER:  L. DIERICK                                        */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/12/02                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_CELL_IDX M_CELL_IDX                        */        
/*     RETURNED VALUE:                                                */        
/*                      INT                                           */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0512_UPD_T2_DET_TCU                        */        
/*                      Q_S0513_UPD_T2_STD_TCU                        */        
/*                      Q_S0514_UPD_T2_STD_TCHRM_DLS                  */        
/*                      Q_S0516_UPD_T2_STD_TCHRM                      */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0510_FIND_CELL_HIS_T2: PROC(ZF_CELL_IDX M_CELL_IDX)                          
                          RETURNS (INT);                                        
                                                                                
                                                                                
DCL ZQ_FOUND     INT;                                                           
DCL ZQ_I         INT;                                                           
                                                                                
  ZQ_FOUND := 0;                                                                
                                                                                
  DO FOR ZQ_I := 1 TO M_PM_MAX_CELLS_FOR_A_MEAS_JOB WHILE ZQ_FOUND=0;           
    IF Z_T2_PTR->(ZQ_I).B_CELL_ID = ZF_CELL_IDX OR                              
       Z_T2_PTR->(ZQ_I).B_CELL_ID = M_NULL_CELL_IDX                             
    THEN                                                                        
      Z_T2_PTR->(ZQ_I).B_CELL_ID := ZF_CELL_IDX;                                
      ZQ_FOUND := ZQ_I;                                                         
    FI;                                                                         
  OD;                                                                           
                                                                                
RETURN (ZQ_FOUND);                                                              
                                                                                
END Q_S0510_FIND_CELL_HIS_T2;      
                                             
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0511_UPD_DTC_TRX_STD                             */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 22/11/97                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATE THE COUNTERS OF TYPE 110 BLOCK 3 BASED ON THE BUFFER  */        
/*       FROM THE TCU.                                                */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0070_ADD_INT_TO_3_INT                      */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
                                                                                
Q_S0511_UPD_DTC_TRX_STD: PROC(ZF_ACT_IDX INT, 
                              ZF_MEAS_TYPE M_MEAS_TYPE,
                              ZF_LDC_BUF_PTR PTR);                         
                                                                                
DCL ZQ_NBR_TRX     INT;                                                         
DCL ZQ_TRX_IDX     M_TRX_IDX;                                                   
DCL ZQ_I           M_TYPE_01_CTRS_TRX; 
DCL ZQ_J           M_DTC_TRF_CNTRS_TYPE1_TRX;
DCL ZQ_CELL_IDX    M_CELL_IDX;
                                                                                
DO WITH ZF_LDC_BUF_PTR -> M_DTC_STD_TRX_CTRS;                          
  ZQ_NBR_TRX := B_NBR_TRX;                          
  DO WHILE ZQ_NBR_TRX /= 0;                                                       
    ZQ_TRX_IDX := B_TRX_CNTRS(ZQ_NBR_TRX).B_TRX_IDX;                            
                                                                                
    IF ZQ_TRX_IDX > 0 AND                              
       ZQ_TRX_IDX <= CM_FY32_MAX_TRX_PER_BSC                                    
      THEN  
      CASE ZF_MEAS_TYPE OF
        (E_MT_TRAFFIC):
         DO WITH Z_R_TRX_MGT_PTR -> ZM_R_TRX_MGT(ZQ_TRX_IDX);
           ZQ_CELL_IDX := D_CELL_IDX;
           IF ZQ_CELL_IDX /= M_NULL_CELL_IDX
             THEN
             IF Q_S0180_CELL_IN_SCOPE(ZF_ACT_IDX, ZQ_CELL_IDX)
               THEN
               DO WITH Z_T1_2_PTR->(ZQ_TRX_IDX);                                        
                 B_TRX_IDX := ZQ_TRX_IDX;  
                 ZQ_J := E_C621_NB_TCH_DROP_OUT_HO_EXEC_T;                                                 
                 DO FOR ZQ_I := E_MT_01_CTR_C621 TO                                
                                E_MT_01_CTR_C746B; 
                   CASE ZQ_I OF

                     (E_MT_01_CTR_C621,
                      E_MT_01_CTR_C710:E_MT_01_CTR_C714):
                      Q_S0040_ADD_INT_TO_INT(                                                    
                      B_TRX_CNTRS(ZQ_NBR_TRX).B_DTC_TYPE1(ZQ_J),                        
                      B_CTRS_TRXPT.B_C621_TO_C746B(ZQ_I));  
                      ZQ_J := SUCC(ZQ_J);
                                                         
                     (E_MT_01_CTR_C746B):
                      Q_S0040_ADD_INT_TO_INT(                                                    
                      B_TRX_CNTRS(ZQ_NBR_TRX).B_DTC_TYPE1(ZQ_J),                        
                      B_CTRS_TRXPT.B_C621_TO_C746B(ZQ_I));  
                      
                     ELSE
                   ESAC;
                 OD;    
               OD;
             FI;
           FI;                                                                     
         OD; /* DO WITH HIS FILE FORMAT */
        (E_MT_CELL_TRX_OVERVIEW_COUNTERS):
        /*START: MC Counters*/
         IF (ZQ_TRX_IDX <= CM_FY32_MAX_TRX_PER_BSC/2)
         THEN
         /*END: MC Counters*/
         DO WITH Z_T110_4_PTR->(ZM_TRX_INDEX_VALUE(ZQ_TRX_IDX));                                        
           B_TRX_IDX := ZQ_TRX_IDX; 
           Q_S0040_ADD_INT_TO_INT(                                                    
           B_TRX_CNTRS(ZQ_NBR_TRX).B_DTC_TYPE1
            (E_C621_NB_TCH_DROP_OUT_HO_EXEC_T),                        
           B_CTRS_PT4_MT_110.B_MC621_TO_MC746B
            (E_MT_110_CTR_MC621));
              
           Q_S0040_ADD_INT_TO_INT(                                                    
           B_TRX_CNTRS(ZQ_NBR_TRX).B_DTC_TYPE1
            (E_C710_NB_TCH_OUT_HO_REQ_TRX),                        
           B_CTRS_PT4_MT_110.B_MC621_TO_MC746B
            (E_MT_110_CTR_MC710));
              
           Q_S0040_ADD_INT_TO_INT(                                                    
           B_TRX_CNTRS(ZQ_NBR_TRX).B_DTC_TYPE1
            (E_C711_NB_TCH_OUT_HO_PREP_FAIL_C),                        
           B_CTRS_PT4_MT_110.B_MC621_TO_MC746B
            (E_MT_110_CTR_MC711));
              
           Q_S0040_ADD_INT_TO_INT(                                                    
           B_TRX_CNTRS(ZQ_NBR_TRX).B_DTC_TYPE1
            (E_C712_NB_TCH_OUT_HO_SUCC_TRX),                        
           B_CTRS_PT4_MT_110.B_MC621_TO_MC746B
            (E_MT_110_CTR_MC712));
              
           Q_S0040_ADD_INT_TO_INT(                                                    
           B_TRX_CNTRS(ZQ_NBR_TRX).B_DTC_TYPE1
            (E_C713_NB_TCH_OUT_HO_FAIL_REV_TR),                        
           B_CTRS_PT4_MT_110.B_MC621_TO_MC746B
            (E_MT_110_CTR_MC713));
              
           Q_S0040_ADD_INT_TO_INT(                                                    
           B_TRX_CNTRS(ZQ_NBR_TRX).B_DTC_TYPE1
            (E_C714_NB_TCH_OUT_HO_FAIL_NO_REV),                        
           B_CTRS_PT4_MT_110.B_MC621_TO_MC746B
            (E_MT_110_CTR_MC714));
              
           Q_S0040_ADD_INT_TO_INT(                                                    
           B_TRX_CNTRS(ZQ_NBR_TRX).B_DTC_TYPE1
            (E_C746_NB_TCH_NOR_ASS_EXEC_FAIL_),                        
           B_CTRS_PT4_MT_110.B_MC621_TO_MC746B
            (E_MT_110_CTR_MC746B));
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
  Q_S0080_ADD_INT_TO_DPVAL(
           B_TRX_CNTRS(ZQ_NBR_TRX).B_DTC_TYPE110
            (E_MC995_NB_AMR_DROP_HO_TRX),
           B_CTRS_PT4_MT_110.B_MC990_TO_MC996
            (E_MT_110_CTR_MC995));
Q_S0080_ADD_INT_TO_DPVAL(
           B_TRX_CNTRS(ZQ_NBR_TRX).B_DTC_TYPE110
            (E_MC996_NB_AMRDRP_RFCH_TRX),
           B_CTRS_PT4_MT_110.B_MC990_TO_MC996
            (E_MT_110_CTR_MC996));
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */            
         OD;
         /*START: MC Counters*/
         ELSE
         DO WITH Z_T110_4_2_PTR->(ZM_TRX_INDEX_VALUE(ZQ_TRX_IDX));                                        
           B_TRX_IDX := ZQ_TRX_IDX; 
           Q_S0040_ADD_INT_TO_INT(                                                    
           B_TRX_CNTRS(ZQ_NBR_TRX).B_DTC_TYPE1
            (E_C621_NB_TCH_DROP_OUT_HO_EXEC_T),                        
           B_CTRS_PT4_MT_110.B_MC621_TO_MC746B
            (E_MT_110_CTR_MC621));
              
           Q_S0040_ADD_INT_TO_INT(                                                    
           B_TRX_CNTRS(ZQ_NBR_TRX).B_DTC_TYPE1
            (E_C710_NB_TCH_OUT_HO_REQ_TRX),                        
           B_CTRS_PT4_MT_110.B_MC621_TO_MC746B
            (E_MT_110_CTR_MC710));
              
           Q_S0040_ADD_INT_TO_INT(                                                    
           B_TRX_CNTRS(ZQ_NBR_TRX).B_DTC_TYPE1
            (E_C711_NB_TCH_OUT_HO_PREP_FAIL_C),                        
           B_CTRS_PT4_MT_110.B_MC621_TO_MC746B
            (E_MT_110_CTR_MC711));
              
           Q_S0040_ADD_INT_TO_INT(                                                    
           B_TRX_CNTRS(ZQ_NBR_TRX).B_DTC_TYPE1
            (E_C712_NB_TCH_OUT_HO_SUCC_TRX),                        
           B_CTRS_PT4_MT_110.B_MC621_TO_MC746B
            (E_MT_110_CTR_MC712));
              
           Q_S0040_ADD_INT_TO_INT(                                                    
           B_TRX_CNTRS(ZQ_NBR_TRX).B_DTC_TYPE1
            (E_C713_NB_TCH_OUT_HO_FAIL_REV_TR),                        
           B_CTRS_PT4_MT_110.B_MC621_TO_MC746B
            (E_MT_110_CTR_MC713));
              
           Q_S0040_ADD_INT_TO_INT(                                                    
           B_TRX_CNTRS(ZQ_NBR_TRX).B_DTC_TYPE1
            (E_C714_NB_TCH_OUT_HO_FAIL_NO_REV),                        
           B_CTRS_PT4_MT_110.B_MC621_TO_MC746B
            (E_MT_110_CTR_MC714));
              
           Q_S0040_ADD_INT_TO_INT(                                                    
           B_TRX_CNTRS(ZQ_NBR_TRX).B_DTC_TYPE1
            (E_C746_NB_TCH_NOR_ASS_EXEC_FAIL_),                        
           B_CTRS_PT4_MT_110.B_MC621_TO_MC746B
            (E_MT_110_CTR_MC746B));
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
  Q_S0080_ADD_INT_TO_DPVAL(
           B_TRX_CNTRS(ZQ_NBR_TRX).B_DTC_TYPE110
            (E_MC995_NB_AMR_DROP_HO_TRX),
           B_CTRS_PT4_MT_110.B_MC990_TO_MC996
            (E_MT_110_CTR_MC995));
Q_S0080_ADD_INT_TO_DPVAL(
           B_TRX_CNTRS(ZQ_NBR_TRX).B_DTC_TYPE110
            (E_MC996_NB_AMRDRP_RFCH_TRX),
           B_CTRS_PT4_MT_110.B_MC990_TO_MC996
            (E_MT_110_CTR_MC996));
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */            
         OD;
         FI;
         /*END: MC Counters*/
        ELSE
      ESAC;                                            
    FI;                                                                         
    ZQ_NBR_TRX := ZQ_NBR_TRX - 1;                                               
  OD;                                                                           
OD;                                                                             
END Q_S0511_UPD_DTC_TRX_STD;                                               
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0512_UPD_T2_DET_TCU                              */        
/*                                                                    */        
/*     PROGRAMMER:  L. DIERICK                                        */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/10/31                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*     TYPE_2 COUNTERS EXTRACTED FROM TYPE_110 COUNTERS FROM TCU LDCP */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*                      ZF_LCE_ID M_LCE_ID,                           */        
/*                      ZF_ACT_IDX INT                                */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0180_CELL_IN_SCOPE                         */        
/*                      Q_S0510_FIND_CELL_HIS_T2                      */        
/*                      Q_S0100_IS_SDCCH_ON_TCU_FOR_CELL              */        
/*                      Q_S0050_AVG_OR_REPL_INT                       */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0270_UPD_DET_TCU_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
                                                                                
Q_S0512_UPD_T2_DET_TCU: PROC(ZF_LDC_BUF_PTR PTR,                                
                             ZF_LCE_ID M_LCE_ID,                                
                             ZF_ACT_IDX     INT);                               
                                                                                
DCL ZQ_HIS_IDX         INT;                                                        
DCL ZQ_NBR_OF_CELLS    INT;  
                                                       
DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_DET_CTRS_AREA;                          
  ZQ_NBR_OF_CELLS := B_NBR_CELLS;   
OD;                 
IF ZQ_NBR_OF_CELLS > CM_FY32_MAX_CELLS_PER_TCU OR                               
   ZQ_NBR_OF_CELLS < 0                                                          
THEN                                                                            
  /* OUT OF RANGE */                                                            
  ZQ_NBR_OF_CELLS:=0;                                                           
  Q_S0010_CCDC_ERROR(M_ERC6_USER_REC,                                           
                     M_ERT0019_INC_MESS_DATA, 33, 0194);                        
FI;                                                                             
DO WHILE ZQ_NBR_OF_CELLS /= 0;                                                  
  DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_DET_CTRS_AREA;                          
    DO WITH B_CELL_CNTRS(ZQ_NBR_OF_CELLS);                                      
      IF (B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC) AND                          
         (B_CELL_IDX > 0) AND                                                   
         (Q_S0180_CELL_IN_SCOPE(ZF_ACT_IDX,B_CELL_IDX))                         
      THEN                                                                      
        ZQ_HIS_IDX := Q_S0510_FIND_CELL_HIS_T2(B_CELL_IDX);                     
      ELSE                                                                      
        ZQ_HIS_IDX:=0;                                                          
      FI;                                                                       
      IF (ZQ_HIS_IDX /= 0)                                                      
      THEN                                                                      
        DO WITH Z_T2_PTR->(ZQ_HIS_IDX);                                         
                                                                                
          IF Q_S0100_IS_SDCCH_ON_TCU_FOR_CELL (B_CELL_IDX,                      
                                               ZF_LCE_ID)                       
          THEN                                                                  
            Q_S0050_AVG_OR_REPL_INT(                                            
                  B_CNTRS_TYPE_2(E_C30_NBR_AVRG_BUSY_SDCCH),                    
                  B_HIS_CC_MT_02(E_MT_02_CTR_C30),                              
                  ZS_AVG);                                                      
          FI;                                                                   
        OD;                                                                     
      FI;                                                                       
    OD;                                                                         
    ZQ_NBR_OF_CELLS := ZQ_NBR_OF_CELLS - 1;                                     
  OD;                                                                           
OD;                                                                             
END Q_S0512_UPD_T2_DET_TCU;                                                     
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0513_UPD_T2_STD_TCU                              */        
/*                                                                    */        
/*     PROGRAMMER:  L. DIERICK                                        */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/10/31                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*     TYPE_2 COUNTERS EXTRACTED FROM TYPE_110 COUNTERS FROM TCU LDCP */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*                      ZF_ACT_IDX INT                                */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0180_CELL_IN_SCOPE                         */        
/*                      Q_S0510_FIND_CELL_HIS_T2                      */        
/*                      Q_S0050_AVG_OR_REPL_INT                       */        
/*                      Q_S0040_ADD_INT_TO_INT                        */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0513_UPD_T2_STD_TCU: PROC(ZF_LDC_BUF_PTR PTR,                                
                             ZF_ACT_IDX     INT);                               
                                                                                
DCL ZQ_HIS_IDX         INT;                                                        
DCL ZQ_NBR_OF_CELLS    INT;   
                                                  
DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_STD_CTRS_AREA;                          
  ZQ_NBR_OF_CELLS := B_NBR_CELLS; 
OD;    
               
DO WHILE ZQ_NBR_OF_CELLS /= 0;                                                  
  DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_STD_CTRS_AREA;                          
    DO WITH B_CELL_CNTRS(ZQ_NBR_OF_CELLS);                                      
      IF (B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC) AND                          
         (B_CELL_IDX > 0) AND                                                   
         (Q_S0180_CELL_IN_SCOPE(ZF_ACT_IDX,B_CELL_IDX))                         
      THEN                                                                      
        ZQ_HIS_IDX := Q_S0510_FIND_CELL_HIS_T2(B_CELL_IDX);                     
      ELSE                                                                      
        ZQ_HIS_IDX:=0;                                                          
      FI;                                                                       
      IF (ZQ_HIS_IDX /= 0)                                                      
      THEN                                                                      
        DO WITH Z_T2_PTR->(ZQ_HIS_IDX);                                         
                                                                                
          Q_S0050_AVG_OR_REPL_INT(                                              
                B_CNTRS_TYPE_110(E_MC31_NBR_MAX_BUSY_SDCCH),                    
                B_HIS_CC_MT_02(E_MT_02_CTR_C31),                                
                ZS_REPL);                                                       
                                                                                
          Q_S0040_ADD_INT_TO_INT(                                               
                B_CNTRS_TYPE_110(E_MC803_TIME_SDCCH_CONGESTION),                   
                B_HIS_CC_MT_02(E_MT_02_CTR_C803));                               
                                                                                
        OD;                                                                     
      FI;                                                                       
    OD;                                                                         
    ZQ_NBR_OF_CELLS := ZQ_NBR_OF_CELLS - 1;                                     
  OD;                                                                           
OD;                                                                             
END Q_S0513_UPD_T2_STD_TCU;                                                     
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0514_UPD_T2_STD_TCHRM_DLS                        */        
/*                                                                    */        
/*     PROGRAMMER:  L. DIERICK                                        */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/10/31                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       FOR CTRS C24, C250, C26 AND C27,  THE AVERAGE VALUE OVER     */        
/*       SEVERAL POLLING PERIODS MUST BE CALCULATED. AS EACH CELL     */        
/*       IS REPORTED FOR BY ONLY ONE TCH DURING ONE POLLING PERIOD,   */        
/*       AVERING THE SUM OF THE EXEISTING VALUE WITH THE NEW WILL DO. */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*                      ZF_ACT_IDX INT                                */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0180_CELL_IN_SCOPE                         */        
/*                      Q_S0510_FIND_CELL_HIS_T2                      */        
/*                      Q_S0050_AVG_OR_REPL_INT                       */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0260_UPD_TCH_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0514_UPD_T2_STD_TCHRM_DLS: PROC(ZF_LDC_BUF_PTR PTR, 
                                   ZF_ACT_IDX     INT);                         
                                                                                
DCL ZQ_HIS_IDX      INT;                                                        
DCL ZQ_NBR_CELLS    INT;

DO WITH ZF_LDC_BUF_PTR->CM_FY32_TCH_UB_BSS_CELL_DLS.B_FIXED;
  ZQ_NBR_CELLS := B_NBR_CELLS;
OD;
IF ZQ_NBR_CELLS > CM_FY32_MAX_CELLS_PER_BSC OR
   ZQ_NBR_CELLS < 0
THEN
  /* OUT OF RANGE */
  ZQ_NBR_CELLS:=0;
  Q_S0010_CCDC_ERROR(M_ERC6_USER_REC,
                     M_ERT0019_INC_MESS_DATA, 35, 0194);
FI;
                                                                                
DO WHILE ZQ_NBR_CELLS /= 0;                                                     
  DO WITH ZF_LDC_BUF_PTR->CM_FY32_TCH_UB_BSS_CELL_DLS;                          
    DO WITH B_CELL_DLS_CTRS(LONG_INT((ZQ_NBR_CELLS)));                                          
      IF (B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC) AND                          
         (B_CELL_IDX > 0) AND                                                   
         (Q_S0180_CELL_IN_SCOPE(ZF_ACT_IDX,B_CELL_IDX))                         
      THEN                                                                      
        ZQ_HIS_IDX := Q_S0510_FIND_CELL_HIS_T2(B_CELL_IDX);                     
      ELSE                                                                      
        ZQ_HIS_IDX:=0;                                                          
      FI;                                                                       
      IF (ZQ_HIS_IDX /= 0)                                                      
      THEN                                                                      
        DO WITH Z_T2_PTR->(ZQ_HIS_IDX);                                         
          Q_S0050_AVG_OR_REPL_INT(                                              
                   B_CELL_CTRS(E_C24_NBR_NOT_AVAIL_TRX_TS),                     
                   B_HIS_CC_MT_02(E_MT_02_CTR_C24),                             
                   ZS_AVG);                                                     
                                                                                
          Q_S0050_AVG_OR_REPL_INT(                                              
                   B_CELL_CTRS(E_C250_NBR_AVAIL_TCH_TRX_TS),                    
                   B_HIS_CC_MT_02(E_MT_02_CTR_C250),                            
                   ZS_AVG);                                                     
                                                                                
          Q_S0050_AVG_OR_REPL_INT(                                              
                   B_CELL_CTRS(E_C26_NBR_AVAIL_SDCCH),                          
                   B_HIS_CC_MT_02(E_MT_02_CTR_C26),                             
                   ZS_AVG);                                                     
                                                                                
          Q_S0050_AVG_OR_REPL_INT(                                              
                   B_CELL_CTRS(E_C27_NBR_AVAIL_CCCH),                           
                   B_HIS_CC_MT_02(E_MT_02_CTR_C27),                             
                   ZS_AVG);                                                     
                                                                                
        OD;                                                                     
      FI;                                                                       
    OD;                                                                         
  OD;                                                                           
  ZQ_NBR_CELLS := ZQ_NBR_CELLS - 1;                                             
OD;                                                                             
                                                                                
END Q_S0514_UPD_T2_STD_TCHRM_DLS;                                               
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0515_UPD_T1_DET_TCU                              */        
/*                                                                    */        
/*     PROGRAMMER:  L. DIERICK                                        */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/10/31                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*     TYPE_2 COUNTERS EXTRACTED FROM TYPE_110 COUNTERS FROM TCU LDCP */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*                      ZF_LCE_ID M_LCE_ID,                           */        
/*                      ZF_ACT_IDX INT                                */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0180_CELL_IN_SCOPE                         */        
/*                      Q_S0510_FIND_CELL_HIS_T2                      */        
/*                      Q_S0100_IS_SDCCH_ON_TCU_FOR_CELL              */        
/*                      Q_S0050_AVG_OR_REPL_INT                       */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0270_UPD_DET_TCU_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
                                                                                
Q_S0515_UPD_T1_DET_TCU: PROC(ZF_LDC_BUF_PTR PTR,                                
                             ZF_ACT_IDX     INT);                               
                                                                                
DCL ZQ_NBR_OF_CELLS   INT;                                                      
DCL ZQ_FOUND          INT;                                                      
DCL ZQ_I              INT;
/*
DCL ZQ_RAW_CNTR       M_TCU_TYPE_1;
DCL ZQ_END_CNTR       M_TYPE_01_CTRS_CELL;                                                     
*/                                                                                
DO WITH ZF_LDC_BUF_PTR->CM_FY32_TCU_DET_CTRS_AREA;                            
  ZQ_NBR_OF_CELLS := B_NBR_CELLS;
OD;                    
DO WHILE ZQ_NBR_OF_CELLS /= 0;                                                  
  DO WITH ZF_LDC_BUF_PTR->CM_FY32_TCU_DET_CTRS_AREA;                            
    DO WITH B_CELL_CNTRS(ZQ_NBR_OF_CELLS);                                      
      IF (B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC) AND                          
         (B_CELL_IDX > 0) AND                                                   
         (Q_S0180_CELL_IN_SCOPE(ZF_ACT_IDX,B_CELL_IDX))                         
      THEN                                                                      
        ZQ_FOUND := 0;                                                          
        DO FOR ZQ_I := 1 TO M_PM_MAX_CELLS_FOR_A_MEAS_JOB                       
                                         WHILE ZQ_FOUND = 0;                    
          DO WITH Z_T1_PTR->(ZQ_I);                                             
            IF B_CELL = B_CELL_IDX OR                                        
               B_CELL = M_NULL_CELL_IDX                                      
            THEN                                                                
              ZQ_FOUND := ZQ_I;                                                 
              B_CELL := B_CELL_IDX;  
              /* REMOVE FOR B8
              DO FOR ZQ_RAW_CNTR := E_C702A_NBR_TCH_NOR_FR_ALLOC TO
                                    E_C171_NBR_TFO_CODEC_REC; 
                CASE ZQ_RAW_CNTR OF
                  (E_C702A_NBR_TCH_NOR_FR_ALLOC):
                  ZQ_END_CNTR := E_MT_01_CTR_C702A;
                  
                  (E_C702B_NBR_TCH_NOR_HR_ALLOC):
                  ZQ_END_CNTR := E_MT_01_CTR_C702B;
                  
                  (E_C702C_NBR_TCH_NOR_EFR_ALLOC):
                  ZQ_END_CNTR := E_MT_01_CTR_C702C;
                  
                  (E_C705_NBR_TCH_NOR_DATA_ALLOC):
                  ZQ_END_CNTR := E_MT_01_CTR_C705;
                  
                  (E_C171_NBR_TFO_CODEC_REC):
                  ZQ_END_CNTR := E_MT_01_CTR_C171;
                ESAC;
                
                Q_S0080_ADD_INT_TO_DPVAL(                                         
                   B_CNTRS_TYPE_1(ZQ_RAW_CNTR),                
                   B_CTRS_CELLPT.B_C01_TO_C903(ZQ_END_CNTR));
              OD;                    
              */
              Q_S0080_ADD_INT_TO_DPVAL(
                B_CNTRS_TYPE_1(E_C171_NBR_TFO_CODEC_REC),
                B_CTRS_CELLPT.B_C01_TO_C02I(E_MT_01_CTR_C171));
            FI;                                                                 
          OD;                                                                   
        OD;                                                                     
      FI;                                                                       
    OD;                                                                         
    ZQ_NBR_OF_CELLS := ZQ_NBR_OF_CELLS - 1;                                     
  OD;                                                                           
OD;                                                                            
END Q_S0515_UPD_T1_DET_TCU;                                                     
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0516_UPD_T2_STD_TCHRM                            */        
/*                                                                    */        
/*     PROGRAMMER:  L. DIERICK                                        */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/10/31                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*                      ZF_ACT_IDX INT                                */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0180_CELL_IN_SCOPE                         */        
/*                      Q_S0510_FIND_CELL_HIS_T2                      */        
/*                      Q_S0050_AVG_OR_REPL_INT                       */        
/*                      Q_S0040_ADD_INT_TO_INT                        */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0260_UPD_TCH_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0516_UPD_T2_STD_TCHRM: PROC(ZF_LDC_BUF_PTR PTR, 
                               ZF_ACT_IDX     INT);                             
                                                                                
DCL ZQ_HIS_IDX      INT;                                                        
DCL ZQ_I            M_PM_TCH_TYPE_2;                                            
DCL ZQ_J            M_TYPE_02_CTRS;
DCL ZQ_NBR_CELLS    INT;

ZQ_NBR_CELLS := ZF_LDC_BUF_PTR->
                          CM_FY32_PM_TCH_UB_CELLS.B_FIXED.B_NBR_CELLS;
IF ZQ_NBR_CELLS > CM_FY32_PM_MAX_CELLS_PER_TCHRM_LDC_UB OR
   ZQ_NBR_CELLS < 0
THEN
  /* OUT OF RANGE */
  ZQ_NBR_CELLS := 0;
  Q_S0010_CCDC_ERROR(M_ERC6_USER_REC,
                     M_ERT0019_INC_MESS_DATA, 36, 0194);
FI;

DO WHILE ZQ_NBR_CELLS /= 0;                                                     
  DO WITH ZF_LDC_BUF_PTR->                                                      
                    CM_FY32_PM_TCH_UB_CELLS.B_CELL_CTRS(
                     LONG_INT((ZQ_NBR_CELLS)));          
    IF (B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC) AND                            
       (B_CELL_IDX >  0) AND                                                    
       (Q_S0180_CELL_IN_SCOPE(ZF_ACT_IDX,B_CELL_IDX))                           
    THEN                                                                        
      ZQ_HIS_IDX := Q_S0510_FIND_CELL_HIS_T2(B_CELL_IDX);                       
    ELSE                                                                        
      ZQ_HIS_IDX := 0;                                                          
    FI;                                                                         
    IF (ZQ_HIS_IDX /= 0)                                                        
    THEN                                                                        
      DO WITH Z_T2_PTR->(ZQ_HIS_IDX);                                           
                                                                                
        DO FOR ZQ_I := E_C320A_NBR_IDLE_TCH_TS_ITF1 TO                          
                       E_C320E_NBR_IDLE_TCH_TS_ITF5;                            
                                                                                
          ZQ_J := M_TYPE_02_CTRS(                                               
                            INT(E_MT_02_CTR_C320A) +                            
                            INT(ZQ_I) -                                         
                            INT(E_C320A_NBR_IDLE_TCH_TS_ITF1));                 
                                                                                
          Q_S0050_AVG_OR_REPL_INT(                                              
                      B_TYPE_2(ZQ_I),                                           
                      B_HIS_CC_MT_02(ZQ_J),                                     
                      ZS_AVG);                                                  
                                                                                
        OD;                                                                     
                                                                                
        Q_S0050_AVG_OR_REPL_INT(                                                
                B_TYPE_2(E_C28A_NBR_AVG_BUSY_TCH_CS),                               
                B_HIS_CC_MT_02(E_MT_02_CTR_C28A),                                
                ZS_AVG);                                                        
                                                                                
        IF (B_HIS_CC_MT_02(E_MT_02_CTR_C29A) = ZS_FFFF)
           OR
           (B_TYPE_2(E_C29A_NBR_MAX_BUSY_TCH_CS)>
            B_HIS_CC_MT_02(E_MT_02_CTR_C29A))
        THEN
          Q_S0050_AVG_OR_REPL_INT(                                                
                B_TYPE_2(E_C29A_NBR_MAX_BUSY_TCH_CS),                               
                B_HIS_CC_MT_02(E_MT_02_CTR_C29A),                                
                ZS_REPL);
        FI;
                                                                                
        Q_S0040_ADD_INT_TO_INT(                                                 
                B_TYPE_2(E_C34_TOT_CHAN_BUSY_TIME),                             
                B_HIS_CC_MT_02(E_MT_02_CTR_C34));                               
                                                                                
        Q_S0050_AVG_OR_REPL_INT(                                                
                B_TYPE_2(E_C141_NBR_AVG_TCH_QE_LENGTH),                         
                B_HIS_CC_MT_02(E_MT_02_CTR_C141),                               
                ZS_AVG);                                                        
                                                                                
      OD; /* WITH Z_T2_PTR */                                                   
    FI;                                                                         
    ZQ_NBR_CELLS := ZQ_NBR_CELLS - 1;                                           
  OD;                                                                           
OD;                                                                             
                                                                                
END Q_S0516_UPD_T2_STD_TCHRM;                                                   
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0522_UPD_T3_STD_TCU                              */        
/*                                                                    */        
/*     PROGRAMMER:  L. DIERICK                                        */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/10/31                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*                      ZF_ACT_IDX INT                                */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0180_CELL_IN_SCOPE                         */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0522_UPD_T3_STD_TCU: PROC(ZF_LDC_BUF_PTR PTR,                                
                             ZF_ACT_IDX     INT);                               
                                                                                
DCL ZQ_NBR_OF_CELLS   INT;                                                      
DCL ZQ_I              INT;                                                      
DCL ZQ_FOUND          INT;                                                      
DCL ZQ_J              M_TYPE_03_CTRS;                                           
DCL ZQ_TRX_IDX        M_TRX_IDX;                               
DCL ZQ_K              INT;                 
                                                                                
DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_STD_CTRS_AREA;                          
  ZQ_NBR_OF_CELLS := B_NBR_CELLS; 
OD;    
               
DO WHILE ZQ_NBR_OF_CELLS /= 0;                                                  
  DO WITH ZF_LDC_BUF_PTR->CM_FY32_TCU_STD_CTRS_AREA;                            
    DO WITH B_CELL_CNTRS(ZQ_NBR_OF_CELLS);                                      
      IF (B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC) AND                          
         (B_CELL_IDX > 0) AND                                                   
         (Q_S0180_CELL_IN_SCOPE(ZF_ACT_IDX,B_CELL_IDX))                         
      THEN                                                                      
        ZQ_FOUND := 0;                                                          
        DO FOR ZQ_I := 1 TO M_PM_MAX_CELLS_FOR_A_MEAS_JOB                       
                                               WHILE ZQ_FOUND = 0;              
          IF Z_T3_PTR->(ZQ_I).B_CELL_IDX = M_NULL_CELL_IDX OR                   
             Z_T3_PTR->(ZQ_I).B_CELL_IDX = B_CELL_IDX                           
          THEN                                                                  
            Z_T3_PTR->(ZQ_I).B_CELL_IDX := B_CELL_IDX;                          
            DO WITH Z_R_CELL_MGT_PTR -> ZM_R_CELL_MGT(B_CELL_IDX);              
              ZQ_TRX_IDX := D_BCCH_TRX;                 
              IF ZQ_TRX_IDX /= M_NULL_TRX_IDX
                THEN
                DO WITH Z_R_TRX_MGT_PTR -> ZM_R_TRX_MGT(D_BCCH_TRX);              
                  Z_T3_PTR->(ZQ_I).B_INDEX_TRX := D_TRX_ID;                       
                OD;
              FI;                                                               
            OD;   

            IF ZQ_TRX_IDX /= M_NULL_TRX_IDX
              THEN
              ZQ_FOUND := ZQ_I;                                                   
           /* BEGIN: CHANGE-WIPRO-B10-MR1-CHANGE */  
                DO WITH Z_T3_PTR->(ZQ_I); 
                 /*BEGIN:ER585 MALA*/
                 IF B_NBR_CCCH_TS /= 0
                 THEN
                /*END:ER585 MALA*/
                 B_INDEX_TS := B_NBR_CCCH_TS;
                  DO FOR ZQ_K := 1 TO B_INDEX_TS;
                    DO WITH B_CNTRS_TYPE_3_ARRAY (ZQ_K);
                      DO WITH B_TYPE_03_CTRS_ARR(ZQ_K);
                        IF Z_STD_TRX_LIST(ZQ_TRX_IDX)                                     
                        THEN                          
                         B_CCCH_TS_NBR := B_TRX_TS_NBR;
                          /* start ER2130 */
                         Q_S0020_ADD_DP_VALUES(
                         /* START: DCTPD731919 */
                         B_TCU_TYPE_3_CTRS(E_C8A_NBR_ACC_PAGING),                
                        /* B_TCU_TYPE_3_C8A,*/
                         B_HIS_CC_MT_03(E_MT_03_C8A));
                           /* end  ER2130 */
                    
                        /*Q_S0080_ADD_INT_TO_DPVAL( */
                        Q_S0020_ADD_DP_VALUES(                                       
                        B_TCU_TYPE_3_CTRS(E_C8B_NBR_ACC_GRANT),                
                        B_HIS_CC_MT_03(E_MT_03_C8B));

                        /*Q_S0080_ADD_INT_TO_DPVAL( */
                        Q_S0020_ADD_DP_VALUES(                                       
                        B_TCU_TYPE_3_CTRS(E_C8C_NBR_ACC_RANDOM),               
                        B_HIS_CC_MT_03(E_MT_03_C8C)); 
                        
                        /*Q_S0080_ADD_INT_TO_DPVAL( */
                        Q_S0020_ADD_DP_VALUES(                                       
                        B_TCU_TYPE_3_CTRS(E_C8D_IMM_ASS_REJECT),               
                        B_HIS_CC_MT_03(E_MT_03_C8D)); 

                         /* END: DCTPD731919 */

                       /* BEGIN : AFLEX-FEATURE-B11-PKG2-C8E-CHANGE */
                       /*CR36/251325 START*/     
                       /*Q_S0020_ADD_DP_VALUES(*/ 
                       /*B_TCU_TYPE_3_C8E,*/ 
                       /*B_HIS_CC_MT_03(E_MT_03_C8E));*/                                         
                       /*CR36/251325 END*/     
                      ELSE                                                              
                       /* DO FOR ZQ_J := E_MT_03_C8C TO E_MT_03_C8D; */                      
                       /*CR36/251325 START*/     
                       /* DO FOR ZQ_J := E_MT_03_C8C TO E_MT_03_C8E;*/ 
                        DO FOR ZQ_J := E_MT_03_C8C TO E_MT_03_C8D;                         
                       /*CR36/251325 END*/     
                           B_HIS_CC_MT_03(ZQ_J).B_HIGH := ZS_FFFF;                       
                           B_HIS_CC_MT_03(ZQ_J).B_LOW  := ZS_FFFE;                       
                           OD;                                                             
                         FI;
                       OD;
                     OD;
                   OD;
                 ELSE;
                 FI;
                OD;
         /* END : CHANGE-WIPRO-B10-MR1-CHANGE */
                        /* END : AFLEX-FEATURE-B11-PKG2-C8E-CHANGE */
             FI;                                                                 
          FI;                                                                   
        OD;                                                                     
      FI;                                                                       
    OD;                                                                         
    ZQ_NBR_OF_CELLS := ZQ_NBR_OF_CELLS - 1;                                     
  OD;                                                                           
OD;                                                                             
END Q_S0522_UPD_T3_STD_TCU;                                                                                                                                     
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0525_UPD_T4_DET_TCU                              */        
/*                                                                    */        
/*     PROGRAMMER:  L. DIERICK                                        */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/10/31                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*                      ZF_ACT_IDX INT                                */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0180_CELL_IN_SCOPE                         */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0270_UPD_DET_TCU_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0525_UPD_T4_DET_TCU: PROC(ZF_LDC_BUF_PTR PTR,                                
                             ZF_ACT_IDX     INT);                               
                                                                                
DCL ZQ_NBR_OF_TRX       INT;                                                    
DCL ZQ_TRX_IDX          M_TRX_IDX;                                              
DCL ZQ_CELL_IDX         M_CELL_IDX;                                             
DCL ZQ_I                M_TCU_TYPE_4;                                           
DCL ZQ_SDCCH_IDX        INT;                                                                                
DCL ZQ_FOUND            BOOL;                                                   

/* WITTS 0032 */                                                                                
DO WITH ZF_LDC_BUF_PTR->CM_FY32_TCU_DET_CTRS_AREA.B_TRX_CNTRS;
  ZQ_NBR_OF_TRX := B_NBR_SDCCH_TRX;
OD;
IF ZQ_NBR_OF_TRX > CM_FY32_PM_MAX_SDCCH_TRX_PER_TCU OR                                
   ZQ_NBR_OF_TRX < 0                                                            
THEN                                                                            
  ZQ_NBR_OF_TRX := 0;                                                           
  Q_S0010_CCDC_ERROR(M_ERC6_USER_REC, M_ERT0019_INC_MESS_DATA,                  
                     38, 0194);                                                 
FI;                                                                             
/* WITTS 0032 END */
ZQ_SDCCH_IDX := 0;
                                                                                
DO WHILE ZQ_NBR_OF_TRX /= 0;
  ZQ_SDCCH_IDX := ZQ_SDCCH_IDX + 1;                                                    
  DO WITH ZF_LDC_BUF_PTR->CM_FY32_TCU_DET_CTRS_AREA.B_TRX_CNTRS;                
    ZQ_TRX_IDX := B_SDCCH_CNTRS(ZQ_SDCCH_IDX).B_TRX_IDX;                       
    IF ZQ_TRX_IDX <= CM_FY32_MAX_TRX_PER_BSC AND                                
       ZQ_TRX_IDX > 0                                                           
    THEN                                                                        
      DO WITH Z_R_TRX_MGT_PTR -> ZM_R_TRX_MGT(ZQ_TRX_IDX);                      
        ZQ_CELL_IDX := D_CELL_IDX;                                              
      OD;                                                                       
      IF (ZQ_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC) AND                         
         (ZQ_CELL_IDX > 0) AND                                                  
         (Q_S0180_CELL_IN_SCOPE(ZF_ACT_IDX,ZQ_CELL_IDX))                        
      THEN                                                                      
                                                                                
        /* AQ2C - SDON */                                                       
        ZQ_FOUND := FALSE;                                                      
        DO WHILE ZQ_FOUND = FALSE;                                              
          DO WITH Z_T4_PTR->(LONG_INT((ZQ_TRX_IDX)));                                       
                                                                                
            IF B_INDEX_TRX = ZS_FFFF OR (B_INDEX_TRX =                          
               B_SDCCH_CNTRS(ZQ_SDCCH_IDX).B_TRX_IDX AND                       
               B_TS_NUMBER = B_SDCCH_CNTRS(ZQ_SDCCH_IDX).B_TS_NBR)             
            THEN                                                                
              B_INDEX_TRX := B_SDCCH_CNTRS(ZQ_SDCCH_IDX).B_TRX_IDX;            
              B_TS_NUMBER := B_SDCCH_CNTRS(ZQ_SDCCH_IDX).B_TS_NBR;             
              DO FOR ZQ_I := E_C39_NBR_TOT_DCCH_ACC TO                          
                             E_C40_TOT_USAGE_TIME_DCCH;                         
                /* BEGIN: FR36/313766 - SSV */
                /*IF Z_STD_TRX_LIST(ZQ_TRX_IDX)*/
                IF Z_STD_TRX_LIST(B_INDEX_TRX)
               /* END: FR36/313766 - SSV */ 
                THEN                                                            
                  Q_S0080_ADD_INT_TO_DPVAL(                                     
                    B_SDCCH_CNTRS(ZQ_SDCCH_IDX).B_SUB_CHANS.                   
                                                  B_CNTRS_TYPE_4(ZQ_I),         
                    B_HIS_CC_MT_04(ZQ_I));                                      
                                                                                
                ELSE                                                            
                  B_HIS_CC_MT_04(ZQ_I).B_LOW := ZS_FFFE;                        
                  B_HIS_CC_MT_04(ZQ_I).B_HIGH := ZS_FFFF;                       
                FI;                                                             
              OD;                                                               
                                                                                
              ZQ_FOUND := TRUE;                                                 
            ELSE                                                                
              ZQ_TRX_IDX := CM_FY32_MAX_TRX_PER_BSC + ZQ_TRX_IDX;               
            FI;                                                                 
          OD;                                                                   
        OD;                                                                     
      FI;                                                                       
    FI;                                                                         
    ZQ_NBR_OF_TRX := ZQ_NBR_OF_TRX - 1;                                         
  OD;                                                                           
OD;                                                                             
                                                                                
                                                                                
END Q_S0525_UPD_T4_DET_TCU;                                                     
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0529_UPD_T5_DET_TCU                              */        
/*                                                                    */        
/*     PROGRAMMER:  L. DIERICK                                        */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/10/31                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_TRX_IDX M_TRX_IDX,                         */        
/*                      ZF_CTRS PTR,                                  */        
/*                      ZF_PTR_TRX_IDX PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0530_UPD_T5_DET_TCU                        */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0529_UPD_T5_DET_TCU: PROC(ZF_TRX_IDX       M_TRX_IDX,                        
                             ZF_CTRS          PTR,                              
                             ZF_PTR_TRX_IDX   PTR);                             
                                                                                
DCL ZQ_I            M_TCU_TYPE_5;                                               
DCL ZQ_J            INT;                                                        
                                                                                
DO WITH ZF_PTR_TRX_IDX -> M_HIS_TYPE_05;                                        
  B_INDEX_TRX := ZF_TRX_IDX;                                                    
  /* C370A, C370B, C380A, C380B, C381A, C381B */                                
  DO FOR ZQ_I := E_C370A_NBR_RTCH_SEIZ_FULL TO                                  
                 E_C381B_TOT_RTCH_OCCY_HALF_MULTI;                              
                                                                                
    DO FOR ZQ_J := 0 TO 7;                                                      
      DO WITH ZF_CTRS->M_TCH_CHANS_ARRAY(ZQ_J);                                 
        IF Z_STD_TRX_LIST(ZF_TRX_IDX)                                           
        THEN                                                                    
          Q_S0080_ADD_INT_TO_DPVAL(                                             
                       B_CNTRS_TYPE_5(ZQ_I),                                    
                       B_TS_DATA(ZQ_J)(ZQ_I));                                  
        ELSE                                                                    
          B_TS_DATA(ZQ_J)(ZQ_I).B_LOW  := ZS_FFFE;                              
          B_TS_DATA(ZQ_J)(ZQ_I).B_HIGH := ZS_FFFF;                              
        FI;                                                                     
      OD;                                                                       
    OD;                                                                         
  OD;                                                                           
OD;                                                                             
                                                                                
END Q_S0529_UPD_T5_DET_TCU;                                                     
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0530_UPD_T5_DET_TCU                              */        
/*                                                                    */        
/*     PROGRAMMER:  L. DIERICK                                        */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/10/31                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*                      ZF_ACT_IDX INT                                */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0180_CELL_IN_SCOPE                         */        
/*                      Q_S0529_UPD_T5_DET_TCU                        */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0270_UPD_DET_TCU_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0530_UPD_T5_DET_TCU: PROC(ZF_LDC_BUF_PTR PTR,                                
                             ZF_ACT_IDX     INT);                               
                                                                                
DCL ZQ_NBR_OF_TRX   INT;                                                        
DCL ZQ_TRX_IDX      M_TRX_IDX;                                                  
DCL ZQ_CELL_IDX     M_CELL_IDX;                                                 
                                                                                
DO WITH ZF_LDC_BUF_PTR->CM_FY32_TCU_DET_CTRS_AREA.B_TRX_CNTRS;
  ZQ_NBR_OF_TRX := B_NBR_TRX;
OD;

DO WHILE ZQ_NBR_OF_TRX /= 0;                                                    
  DO WITH ZF_LDC_BUF_PTR->CM_FY32_TCU_DET_CTRS_AREA.B_TRX_CNTRS;                
    ZQ_TRX_IDX := B_TCH_CNTRS(ZQ_NBR_OF_TRX).B_TRX_IDX;                         
    IF ZQ_TRX_IDX <= CM_FY32_MAX_TRX_PER_BSC AND                                
       ZQ_TRX_IDX > 0                                                           
    THEN                                                                        
      DO WITH Z_R_TRX_MGT_PTR -> ZM_R_TRX_MGT(ZQ_TRX_IDX);                      
        ZQ_CELL_IDX := D_CELL_IDX;                                              
      OD;                                                                       
      IF (ZQ_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC) AND                         
         (ZQ_CELL_IDX > 0) AND                                                  
         (Q_S0180_CELL_IN_SCOPE(ZF_ACT_IDX,ZQ_CELL_IDX))                        
      THEN                                                                      
        DO WITH B_TCH_CNTRS(ZQ_NBR_OF_TRX);                                     
          IF ZQ_TRX_IDX > CM_FY32_MAX_TRX_PER_BSC/2                             
          THEN                                                                  
            Q_S0529_UPD_T5_DET_TCU(ZQ_TRX_IDX,                                  
                               ->B_TCH_CHANS,                               
                ->Z_T5_2_PTR->(ZM_TRX_INDEX_VALUE(ZQ_TRX_IDX)));                 
          ELSE                                                                  
            Q_S0529_UPD_T5_DET_TCU(ZQ_TRX_IDX,                                  
                                   ->B_TCH_CHANS,                               
                  ->Z_T5_PTR->(ZM_TRX_INDEX_VALUE(ZQ_TRX_IDX)));                   
          FI;                                                                   
        OD;                                                                     
      FI;                                                                       
    FI;                                                                         
    ZQ_NBR_OF_TRX := ZQ_NBR_OF_TRX - 1;                                         
  OD;                                                                           
OD;                                                                             
                                                                                
END Q_S0530_UPD_T5_DET_TCU;                                                     
                               
/* BEGIN : B12 VAMOS */
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0650_UPDATE_CCI_TYPE37_0                         */        
/*                                                                    */        
/*     PROGRAMMER: AABHUSHAN JYOTI KANSAKAR                           */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 2011/01/03                                      */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE MEASUREMENT TYPE 37 IN MEMORY FOR ALL CELLS IN   */        
/*       THE USER BUFFER ORIGINATING FROM THE VARIOUS LDCPS.          */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*                      ZF_LDC_TYPE M_FMM_SELECTOR,                   */        
/*                      ZF_SEQ_NBR INT,                               */        
/*                      ZF_IS_TEL_DTC BOOL                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0555_ADD_TYPE_110_1_DTC                    */        
/*                      Q_S0575_UPD_T110_1_INVALID                    */        
/*                      Q_S0560_ADD_TYPE_110_1_TCU                    */        
/*                      Q_S0570_ADD_TYPE_110_1_TCHRM_DLS              */        
/*                      Q_S0565_ADD_TYPE_110_1_TCHRM                  */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*                      Q_S0250_UPD_DTC_STD_CNTRS                     */        
/*                      Q_S0260_UPD_TCH_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0650_UPDATE_CCI_TYPE37_0 : PROC(ZF_LDC_BUF_PTR PTR,                          
                                   ZF_LDC_TYPE    M_FMM_SELECTOR,              
                                   ZF_SEQ_NBR     INT,                          
                                   ZF_IS_TEL_DTC  BOOL);                        
                                                                                
DCL ZQ_IDX          INT;                                                        
DCL ZQ_NBR_OF_CELLS INT;                                                        
                                                                                
IF ZF_LDC_TYPE = M_FS_DTC_TRF_LDC                                               
THEN 
  DO WITH ZF_LDC_BUF_PTR -> M_DTC_STD_CELL_CTRS;                                
    ZQ_NBR_OF_CELLS := B_NBR_CELLS; 
  OD;                 
  IF ZQ_NBR_OF_CELLS > M_PM_MAX_STD_CELLS_DTC_BUF OR                            
     ZQ_NBR_OF_CELLS < 0                                                        
	THEN                                                                          
    /* OUT OF RANGE */                                                          
	     Q_S0010_CCDC_ERROR(M_ERC6_USER_REC,                                         
                     M_ERT0019_INC_MESS_DATA, 40, 0194);                        
    RETURN;                                                                     
  FI;                                                                           
                                                                                
  DO WITH ZF_LDC_BUF_PTR -> M_DTC_STD_CELL_CTRS;                                
    DO FOR ZQ_IDX:=1 TO B_NBR_CELLS;                                            
      /* COPY THE COUNTERS FOR THE CELLS IN THE LIST INTO THE                   
       * DATA STRUCTURE IN MEMORY.                                              
       */                                                                       
      DO WITH B_CELL_CNTRS(ZQ_IDX);                                             
        IF B_CELL_IDX > 0 AND                                                   
           B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC                              
        THEN                                                                    
          IF Z_STD_CELL_LIST(B_CELL_IDX)                                        
	   THEN             
	     /*IF B_CELL_IDX<=CM_FY32_MAX_CELLS_PER_BSC/2      
		THEN*/                                           
		  Q_S0555_ADD_TYPE_37_0_DTC(B_CELL_IDX,                            
					  B_DTC_TYPE37,  /* USER BUF */ 
                  Z_T37_0_PTR->(ZM_CELL_INDEX_VALUE(B_CELL_IDX)));           
              /*ELSE                                                                
				Q_S0555_ADD_TYPE_37_0_DTC(B_CELL_IDX,                            
                                         B_DTC_TYPE37,*/  /* USER BUF */          
                /*     Z_T37_0_PTR->(ZM_CELL_INDEX_VALUE(B_CELL_IDX)));         
              FI; */                                                                
          ELSE                                                                  
            Q_S0610_UPD_T37_0_INVALID(B_CELL_IDX,                              
                                       M_FS_DTC_TRF_LDC);                          
          FI;                                                                   
        FI;                                                                     
      OD;                                                                       
    OD;                                                                         
 OD;                                                                            
                                                                                
ELSIF ZF_LDC_TYPE = M_FS_TCU_TRF_LDC                                            
THEN                                                                            
  /* COPY THE COUNTERS FOR THE CELLS IN THE LIST INTO THE                       
   * DATA STRUCTURE IN MEMORY.                                                  
   */         
  DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_STD_CTRS_AREA;                          
    DO FOR ZQ_IDX:=1 TO B_NBR_CELLS;                                            
      DO WITH B_CELL_CNTRS(ZQ_IDX);                                             
        IF B_CELL_IDX > 0 AND                                                  
        /*START: FR 314871 KIRAN*/ 
          /* B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_TCU */
             B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC
         /*END: FR 314871 KIRAN*/ 
        THEN                                                                    
          IF Z_STD_CELL_LIST(B_CELL_IDX)                                        
		 /*     THEN                                                                  
			IF B_CELL_IDX<=CM_FY32_MAX_CELLS_PER_BSC/2    */               
             THEN                                                                
              Q_S0560_ADD_TYPE_37_0_TCU(B_CELL_IDX,                            
                                B_CNTRS_TYPE_37, 
                       Z_T37_0_PTR->(ZM_CELL_INDEX_VALUE(B_CELL_IDX)));
	     /*CRI 00823248.01*/
	     Q_S0560_ADD_TYPE_37_0_TCU_MC1422X_MC1423X(B_CELL_IDX,                            
                                B_CNTRS_TYPE_37, 
                Z_T37_0_TEMP_PTR->(ZM_CELL_INDEX_VALUE(B_CELL_IDX)));

		/*	ELSE
			  Q_S0560_ADD_TYPE_37_0_TCU(B_CELL_IDX,                            
                                B_CNTRS_TYPE_37, 
                       Z_T37_0_PTR->(ZM_CELL_INDEX_VALUE(B_CELL_IDX)));
            FI;      */                                               
          ELSE                                                                  
            Q_S0610_UPD_T37_0_INVALID(B_CELL_IDX,                              
                                       M_FS_TCU_TRF_LDC);                          
          FI;                                                                   
        FI;                                                                     
      OD;                                                                       
    OD;                                                                         
  OD;                                                                           
                                                                                
ELSIF ZF_LDC_TYPE = M_FS_TCHRM_LDC                                              
THEN                                                                            
  /* COPY THE COUNTERS FOR THE CELLS IN THE LIST INTO THE                       
   * DATA STRUCTURE IN MEMORY.                                                  
   */             
  /*IF ZF_SEQ_NBR/=1 AND ZF_SEQ_NBR/=2 */
  /*START: FR 314871 KIRAN*/ 
  /* IF ZF_SEQ_NBR=6 */
  IF ZF_SEQ_NBR>=6
  /*END: FR 314871 KIRAN*/
  THEN 
   /*Commented for VAMOS*/                                                                         
   /* IF NOT ZF_IS_TEL_DTC */
    IF ZF_IS_TEL_DTC                                                        
    THEN                                                                        
      ZQ_NBR_OF_CELLS := ZF_LDC_BUF_PTR-> CM_FY32_PM_TCH_UB_CELLS
                                          .B_FIXED.B_NBR_CELLS;
	/*     M_PM_TCH_UB_CELLS_FIXED.B_NBR_CELLS; */
                                  
      IF ZQ_NBR_OF_CELLS > CM_FY32_MAX_CELLS_PER_BSC OR             
		ZQ_NBR_OF_CELLS < 0                                                    
	    THEN                                                                      
        /* OUT OF RANGE */                                                      
		Q_S0010_CCDC_ERROR(M_ERC6_USER_REC,                                     
                         M_ERT0019_INC_MESS_DATA, 42, 0194);                    
        RETURN;                                                                 
      FI;                                                                       
                                                                                
      DO FOR ZQ_IDX:=1 TO ZQ_NBR_OF_CELLS;                                      
        DO WITH ZF_LDC_BUF_PTR -> CM_FY32_PM_TCH_UB_CELLS;                  
          DO WITH B_CELL_CTRS(LONG_INT((ZQ_IDX)));                                          
            IF B_CELL_IDX > 0 AND                                               
				B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC                          
             THEN                                                                
              IF Z_STD_CELL_LIST(B_CELL_IDX) 
	       THEN                                                              
	/*			IF B_CELL_IDX<=CM_FY32_MAX_CELLS_PER_BSC/2                      
			     THEN  */                                 
		Q_S0570_ADD_TYPE_37_0_TCH(B_CELL_IDX,                  
					B_TYPE_37,                 
		Z_T37_0_PTR->(ZM_CELL_INDEX_VALUE(B_CELL_IDX)));             
                /*ELSE
				Q_S0570_ADD_TYPE_37_0_TCH(B_CELL_IDX,                  
								B_TYPE_37,                 
				Z_T37_0_PTR->(ZM_CELL_INDEX_VALUE(B_CELL_IDX)));
				FI;*/
              ELSE                                                              
                Q_S0610_UPD_T37_0_INVALID(B_CELL_IDX,                          
                                           M_FS_TCHRM_LDC);                      
              FI;                                                               
            FI;                                                                 
          OD;                                                                   
        OD; /* DO WITH */                                                       
      OD; /* DO FOR */                                                          
    FI;                                          
  FI;                                                                           
FI;                                                                             
                                                                                
END Q_S0650_UPDATE_CCI_TYPE37_0;

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0670_UPDATE_CCI_TYPE37_1                         */        
/*                                                                    */        
/*     PROGRAMMER: AABHUSHAN JYOTI KANSAKAR                           */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 2011/01/03                                      */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE MEASUREMENT TYPE 37 IN MEMORY FOR ALL CELLS IN   */        
/*       THE USER BUFFER ORIGINATING FROM THE VARIOUS LDCPS.          */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*                      ZF_LDC_TYPE M_FMM_SELECTOR,                   */        
/*                      ZF_SEQ_NBR INT,                               */        
/*                      ZF_IS_TEL_DTC BOOL                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0555_ADD_TYPE_110_1_DTC                    */        
/*                      Q_S0575_UPD_T110_1_INVALID                    */        
/*                      Q_S0560_ADD_TYPE_110_1_TCU                    */        
/*                      Q_S0570_ADD_TYPE_110_1_TCHRM_DLS              */        
/*                      Q_S0565_ADD_TYPE_110_1_TCHRM                  */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*                      Q_S0250_UPD_DTC_STD_CNTRS                     */        
/*                      Q_S0260_UPD_TCH_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0670_UPDATE_CCI_TYPE37_1: PROC(ZF_LDC_BUF_PTR PTR,                          
                                   ZF_LDC_TYPE    M_FMM_SELECTOR,              
                                   ZF_SEQ_NBR     INT,                          
                                   ZF_IS_TEL_DTC  BOOL);                        
                                                                                
DCL ZQ_IDX          INT;                                                        
DCL ZQ_NBR_OF_CELLS INT;                                                     
                                                                                
IF ZF_LDC_TYPE = M_FS_TCU_TRF_LDC                                            
THEN                                                                            
  /* COPY THE COUNTERS FOR THE CELLS IN THE LIST INTO THE                       
   * DATA STRUCTURE IN MEMORY.                                                  
   */         
  DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_STD_CTRS_AREA;                          
    DO FOR ZQ_IDX:=1 TO B_NBR_CELLS;                                            
      DO WITH B_CELL_CNTRS(ZQ_IDX);                                             
        IF B_CELL_IDX > 0 AND                                                   
           B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC                              
        THEN                                                                    
          IF Z_STD_CELL_LIST(B_CELL_IDX)                                        
	   THEN                                                                  
	/*IF B_CELL_IDX<=CM_FY32_MAX_CELLS_PER_BSC/2                   
			 THEN */                   
		Q_S0560_ADD_TYPE_37_1_TCU(B_CELL_IDX,                            
					B_CNTRS_TYPE_37, 
                Z_T37_1_PTR->(ZM_CELL_INDEX_VALUE(B_CELL_IDX)));           
            /*ELSE                                                                
              Q_S0560_ADD_TYPE_37_1_TCU(B_CELL_IDX,                            
                                         B_CNTRS_TYPE_37,           
                     Z_T37_1_PTR->(ZM_CELL_INDEX_VALUE(B_CELL_IDX)));         
            FI;*/                                                                 
          ELSE                                                                  
            Q_S0620_UPD_T37_1_INVALID(B_CELL_IDX,                              
                                       M_FS_TCU_TRF_LDC);                          
          FI;                                                                   
        FI;                                                                     
      OD;                                                                       
    OD;                                                                         
  OD;                                                       
  FI;                                                                                
END Q_S0670_UPDATE_CCI_TYPE37_1;

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0555_ADD_TYPE_37_0_DTC                           */        
/*                                                                    */        
/*     PROGRAMMER: AABHUSHAN JYOTI KANASAKAR                          */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 2011/01/06                                      */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE MEASUREMENT TYPE 37 IN MEMORY DTC ORIGINATING    */        
/*       THE USER BUFFERS.                                            */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_CELL_IDX M_CELL_IDX,                       */        
/*                      ZF_T19_SRC M_DTC_TYPE19_ARRAY LOC,            */        
/*                      ZF_T29_SRC M_DTC_TYPE29_ARRAY LOC,            */        
/*                      ZF_T110_SRC M_DTC_TYPE110_ARRAY LOC,          */        
/*                      ZF_T110_DEST CM_FY32_HIS_TYPE_110_1 LOC       */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*                      Q_S0040_ADD_INT_TO_INT                        */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0550_UPDATE_CCI_TYPE37_0                   */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0555_ADD_TYPE_37_0_DTC: PROC(                                               
                            ZF_CELL_IDX  M_CELL_IDX,                            
                            ZF_T37_SRC   M_DTC_TYPE37_ARRAY LOC, 
                            ZF_T37_DEST CM_FY32_HIS_TYPE_37_0 LOC);           
                                                                                
DCL ZQ_I      M_DTC_TRF_CNTRS_TYPE37,     
    ZQ_J      RANGE (E_MT_37_CTR_MC1401A:E_MT_37_CTR_MC1421D);                     
                                                                                
DO WITH ZF_T37_DEST;                                                           
                                                                                
  B_CELL_ID:=ZF_CELL_IDX;                                                       
  DO WITH B_CTRS_PT0_MT_37;                                                    
                                                                 
        Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC(E_MC1401A_NB_REQ_NSAIC),        
                             B_MC1401A_TO_MC1409D(E_MT_37_CTR_MC1401A));                
      
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC(E_MC1401B_NB_REQ_SAIC),        
                             B_MC1401A_TO_MC1409D(E_MT_37_CTR_MC1401B));

	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC(E_MC1401C_NB_REQ_VMS1),        
                             B_MC1401A_TO_MC1409D(E_MT_37_CTR_MC1401C));                
      
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC(E_MC1401D_NB_REQ_VMS2),        
                             B_MC1401A_TO_MC1409D(E_MT_37_CTR_MC1401D));
							 
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC
			      		(E_MC1405A_NB_PAIR_SUCC_NSAIC),        
                             B_MC1401A_TO_MC1409D(E_MT_37_CTR_MC1405A));
							 
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC
					(E_MC1405B_NB_PAIR_SUCC_SAIC),   
                             B_MC1401A_TO_MC1409D(E_MT_37_CTR_MC1405B));
							 
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC
					(E_MC1405C_NB_PAIR_SUCC_VMS1), 
                             B_MC1401A_TO_MC1409D(E_MT_37_CTR_MC1405C));
							 
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC
					(E_MC1405D_NB_PAIR_SUCC_VMS2),        
                             B_MC1401A_TO_MC1409D(E_MT_37_CTR_MC1405D));
							 
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC
					(E_MC1406A_NB_EST_PAIR_DRP_NSAIC),        
                             B_MC1401A_TO_MC1409D(E_MT_37_CTR_MC1406A));
							 
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC
					(E_MC1406B_NB_EST_PAIR_DRP_SAIC),  
                             B_MC1401A_TO_MC1409D(E_MT_37_CTR_MC1406B));
							 
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC
					(E_MC1406C_NB_EST_PAIR_DRP_VMS1),
                             B_MC1401A_TO_MC1409D(E_MT_37_CTR_MC1406C));
							 
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC
					(E_MC1406D_NB_EST_PAIR_DRP_VMS2),
                             B_MC1401A_TO_MC1409D(E_MT_37_CTR_MC1406D));
							 
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC
					(E_MC1407A_NB_ESTUNPAIR_DRP_NSAIC),     
                             B_MC1401A_TO_MC1409D(E_MT_37_CTR_MC1407A));
							 
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC
					(E_MC1407B_NB_ESTUNPAIR_DRP_SAIC),     
                             B_MC1401A_TO_MC1409D(E_MT_37_CTR_MC1407B));
							 
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC
					(E_MC1407C_NB_ESTUNPAIR_DRP_VMS1),     
                             B_MC1401A_TO_MC1409D(E_MT_37_CTR_MC1407C));
							 
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC
					(E_MC1407D_NB_ESTUNPAIR_DRP_VMS2),     
                             B_MC1401A_TO_MC1409D(E_MT_37_CTR_MC1407D));
							 
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC
					(E_MC1420A_NB_HO_34_PAIR_NSAIC),
                             B_MC1420A_TO_MC1421D(E_MT_37_CTR_MC1420A));
							 
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC
					(E_MC1420B_NB_HO_34_PAIR_SAIC),
                             B_MC1420A_TO_MC1421D(E_MT_37_CTR_MC1420B));
							 
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC
					(E_MC1420C_NB_HO_34_PAIR_VMS1),
                             B_MC1420A_TO_MC1421D(E_MT_37_CTR_MC1420C));
							 
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC
					(E_MC1420D_NB_HO_34_PAIR_VMS2),
                             B_MC1420A_TO_MC1421D(E_MT_37_CTR_MC1420D));
							 
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC
					(E_MC1421A_NB_HO_35_UNPAIR_NSAIC),
                             B_MC1420A_TO_MC1421D(E_MT_37_CTR_MC1421A));
							 
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC
					(E_MC1421B_NB_HO_35_UNPAIR_SAIC),
                             B_MC1420A_TO_MC1421D(E_MT_37_CTR_MC1421B));
							 
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC
					(E_MC1421C_NB_HO_35_UNPAIR_VMS1),
                             B_MC1420A_TO_MC1421D(E_MT_37_CTR_MC1421C));
							 
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC
					(E_MC1421D_NB_HO_35_UNPAIR_VMS2),
                             B_MC1420A_TO_MC1421D(E_MT_37_CTR_MC1421D));
	/*BEGIN : CR20_310381*/
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC
					(E_MC1427_NB_MS_NSAIC_VMS_CAP),
                             B_MC1424A_TO_MC1427(E_MT_37_CTR_MC1427));

	/*END : CR20_310381*/
	/*BEGIN : CR 1035111 */
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC
					(E_MC1424A_NB_HO_35_PAIR_UNSUCC),
                             B_MC1424A_TO_MC1427(E_MT_37_CTR_MC1424A));
  /*END : CR 1035111 */   
	/*BEGIN: CRI #01165185.02*/
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC
					(E_MC1424D_NB_HO_35_INIT),
                             B_MC1424A_TO_MC1427(E_MT_37_CTR_MC1424D));
	/*END: CRI #01165185.02*/ 
	OD;   /*  DO WITH B_CTRS_PT0_MT_37 */                                                                    
                                               
OD;    /*  DO WITH ZF_T37_DEST */                     
                                                                                
END Q_S0555_ADD_TYPE_37_0_DTC;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0664_ADD_MC1408X_MC1409X_TMP                     */
/*                                                                    */
/*     PROGRAMMER: xuny                                               */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 14/01/22                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*      For CR1098364VAMOS counters MC1408x&MC1409x improvement       */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                                                                    */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      G_S_FT58AL_CC_DATA_COLLECTOR                  */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      NONE                                          */
/*     CALLED FROM:                                                   */
/*                      Q_S0630_GET_NEXT_LDCP_TO_POLL                 */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0664_ADD_MC1408X_MC1409X_TMP: PROC(ZF_CELL_IDX  M_CELL_IDX,
	                               /* LOC added to remove warning */ 
                            ZF_T37_SRC  M_TCU_TYPE_37_PER_CELL LOC);


DO WITH Z_TMP_MC1408_9_PTR->(ZF_CELL_IDX);  
  
  	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR 
				(E_MC1408A_NB_PAIR_PER_MS_NSAIC),
                             B_CNTR_C1408A);
  
    Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR 
				(E_MC1408B_NB_PAIR_PER_MS_SAIC),
                             B_CNTR_C1408B);
  
    Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR 
				(E_MC1408C_NB_PAIR_PER_MS_VMS1),
                             B_CNTR_C1408C);
  
    Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR 
				(E_MC1408D_NB_PAIR_PER_MS_VMS2),
                             B_CNTR_C1408D);
  
  	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR 
				(E_MC1409A_NB_UNPAIR_PER_MS_NSAIC),
                             B_CNTR_C1409A);
  
    Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR 
				(E_MC1409B_NB_UNPAIR_PER_MS_SAIC),
                             B_CNTR_C1409B);
  
    Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR 
				(E_MC1409C_NB_UNPAIR_PER_MS_VMS1),
                             B_CNTR_C1409C);
  
    Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR 
				(E_MC1409D_NB_UNPAIR_PER_MS_VMS2),
                             B_CNTR_C1409D);
  
OD;


END Q_S0664_ADD_MC1408X_MC1409X_TMP;

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0560_ADD_TYPE_37_0_TCU                           */        
/*                                                                    */        
/*     PROGRAMMER: AABHUSHAN JYOTI KANASAKAR                          */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 2011/01/06                                      */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE MEASUREMENT TYPE 37 IN MEMORY DTC ORIGINATING    */        
/*       THE USER BUFFERS.                                            */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_CELL_IDX M_CELL_IDX,                       */        
/*                      ZF_T19_SRC M_DTC_TYPE19_ARRAY LOC,            */        
/*                      ZF_T29_SRC M_DTC_TYPE29_ARRAY LOC,            */        
/*                      ZF_T110_SRC M_DTC_TYPE110_ARRAY LOC,          */        
/*                      ZF_T110_DEST CM_FY32_HIS_TYPE_110_1 LOC       */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*                      Q_S0040_ADD_INT_TO_INT                        */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0550_UPDATE_CCI_TYPE37_0                   */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0560_ADD_TYPE_37_0_TCU: PROC(                                  
                            ZF_CELL_IDX  M_CELL_IDX,               
                                   /* LOC added to remove warning */ 
                            ZF_T37_SRC  M_TCU_TYPE_37_PER_CELL LOC ,
                            ZF_T37_DEST CM_FY32_HIS_TYPE_37_0 LOC);     
                                                                        
/*DCL ZQ_I      M_TCU_TYPE_37_CELL,     
    ZQ_J      RANGE (E_MT_37_CTR_MC1401A:E_MT_37_CTR_MC1423D);*/
                                                 
 DO WITH ZF_T37_DEST;
              
  B_CELL_ID:=ZF_CELL_IDX;           
  DO WITH B_CTRS_PT0_MT_37;
                                                                 
    Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR 
				(E_MC1402A_NB_TCH_PAIR_ATPT_NSAIC),
                             B_MC1401A_TO_MC1409D(E_MT_37_CTR_MC1402A));
      
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR 
				(E_MC1402B_NB_TCH_PAIR_ATPT_SAIC),
                             B_MC1401A_TO_MC1409D(E_MT_37_CTR_MC1402B));

	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR 
				(E_MC1402C_NB_TCH_PAIR_ATPT_VMS1),
                             B_MC1401A_TO_MC1409D(E_MT_37_CTR_MC1402C));
      
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR 
				(E_MC1402D_NB_TCH_PAIR_ATPT_VMS2),
                             B_MC1401A_TO_MC1409D(E_MT_37_CTR_MC1402D));
							 
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR 
				(E_MC1403A_NB_TCH_PAIR_SUCC_NSAIC),
                             B_MC1401A_TO_MC1409D(E_MT_37_CTR_MC1403A));
							 
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR 
				(E_MC1403B_NB_TCH_PAIR_SUCC_SAIC),
                             B_MC1401A_TO_MC1409D(E_MT_37_CTR_MC1403B));
							 
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR 
				(E_MC1403C_NB_TCH_PAIR_SUCC_VMS1), 
                             B_MC1401A_TO_MC1409D(E_MT_37_CTR_MC1403C));
							 
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR 
				(E_MC1403D_NB_TCH_PAIR_SUCC_VMS2), 
                             B_MC1401A_TO_MC1409D(E_MT_37_CTR_MC1403D));
							 
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR 
				(E_MC1404A_NBTCHPAIR_HOATPT_NSAIC),
                             B_MC1401A_TO_MC1409D(E_MT_37_CTR_MC1404A));
							 
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR 
				(E_MC1404B_NBTCHPAIR_HO_ATPT_SAIC),
                             B_MC1401A_TO_MC1409D(E_MT_37_CTR_MC1404B));
							 
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR 
				(E_MC1404C_NBTCHPAIR_HO_ATPT_VMS1),
                             B_MC1401A_TO_MC1409D(E_MT_37_CTR_MC1404C));
							 
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR 
				(E_MC1404D_NBTCHPAIR_HO_ATPT_VMS2),
                             B_MC1401A_TO_MC1409D(E_MT_37_CTR_MC1404D));
  /*begin CR1098364 MC1408/MC1409 improv*/
  Q_S0664_ADD_MC1408X_MC1409X_TMP(ZF_CELL_IDX, ZF_T37_SRC);
  /*end CR1098364 MC1408/MC1409 improv*/
  /*START CR DCTPD1099054 */  
  Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_PRO_INT 
				(E_MC1424B_RESERVED_SAIC),
                             B_MC1424A_TO_MC1427(E_MT_37_CTR_MC1424B));
  Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_PRO_INT 
				(E_MC1424C_RESERVED_VAMOS1),
                             B_MC1424A_TO_MC1427(E_MT_37_CTR_MC1424C));                             
 /*begin-DEL CR1098364 MC1408/MC1409 improv*/							 
	/*Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR 
				(E_MC1408A_NB_PAIR_PER_MS_NSAIC),
                             B_MC1401A_TO_MC1409D(E_MT_37_CTR_MC1408A));
							 
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR 
				(E_MC1408B_NB_PAIR_PER_MS_SAIC),        
                             B_MC1401A_TO_MC1409D(E_MT_37_CTR_MC1408B));
							 
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR 
				(E_MC1408C_NB_PAIR_PER_MS_VMS1),        
                             B_MC1401A_TO_MC1409D(E_MT_37_CTR_MC1408C));
							 
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR 
				(E_MC1408D_NB_PAIR_PER_MS_VMS2),        
                             B_MC1401A_TO_MC1409D(E_MT_37_CTR_MC1408D));
							 
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR  
				(E_MC1409A_NB_UNPAIR_PER_MS_NSAIC), 
                             B_MC1401A_TO_MC1409D(E_MT_37_CTR_MC1409A));
							 
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR 
				(E_MC1409B_NB_UNPAIR_PER_MS_SAIC),  
                             B_MC1401A_TO_MC1409D(E_MT_37_CTR_MC1409B));
							 
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR 
				(E_MC1409C_NB_UNPAIR_PER_MS_VMS1),  
                             B_MC1401A_TO_MC1409D(E_MT_37_CTR_MC1409C));
							 
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR  
				(E_MC1409D_NB_UNPAIR_PER_MS_VMS2),  
                             B_MC1401A_TO_MC1409D(E_MT_37_CTR_MC1409D));
*/	
/*end-DEL CR1098364 MC1408/MC1409 improv*/

				 
	/*START:CRI 00823248.01*/
	/*Q_S0080_ADD_BYTE_TO_BYTE(ZF_T37_SRC.B_LONG_CNTR 
				(E_MC1422A_AV_RXQUAL_DL_VMS_NSAIC),
                             B_MC1422A_TO_MC1423D(E_MT_37_CTR_MC1422A));
							 
	Q_S0080_ADD_BYTE_TO_BYTE(ZF_T37_SRC.B_LONG_CNTR 
				(E_MC1422B_AV_RXQUAL_DL_VMS_SAIC),
                             B_MC1422A_TO_MC1423D(E_MT_37_CTR_MC1422B));
							 
	Q_S0080_ADD_BYTE_TO_BYTE(ZF_T37_SRC.B_LONG_CNTR 
				(E_MC1422C_AV_RXQUAL_DL_VMS_1),        
                             B_MC1422A_TO_MC1423D(E_MT_37_CTR_MC1422C));
							 
	Q_S0080_ADD_BYTE_TO_BYTE(ZF_T37_SRC.B_LONG_CNTR 
				(E_MC1422D_AV_RXQUAL_DL_VMS_2),        
                             B_MC1422A_TO_MC1423D(E_MT_37_CTR_MC1422D));
							 
	Q_S0080_ADD_BYTE_TO_BYTE(ZF_T37_SRC.B_LONG_CNTR 
				(E_MC1423A_AV_RXQUAL_UL_VMS_NSAIC),
                             B_MC1422A_TO_MC1423D(E_MT_37_CTR_MC1423A));
							 
	Q_S0080_ADD_BYTE_TO_BYTE(ZF_T37_SRC.B_LONG_CNTR 
				(E_MC1423B_AV_RXQUAL_UL_VMS_SAIC),
                             B_MC1422A_TO_MC1423D(E_MT_37_CTR_MC1423B));
							 
	Q_S0080_ADD_BYTE_TO_BYTE(ZF_T37_SRC.B_LONG_CNTR 
				(E_MC1423C_AV_RXQUAL_UL_VMS_1),        
                             B_MC1422A_TO_MC1423D(E_MT_37_CTR_MC1423C));
							 
	Q_S0080_ADD_BYTE_TO_BYTE(ZF_T37_SRC.B_LONG_CNTR 
				(E_MC1423D_AV_RXQUAL_UL_VMS_2),        
                          B_MC1422A_TO_MC1423D(E_MT_37_CTR_MC1423D));*/
       /*END:CRI 00823248.01*/

	OD;   /*  DO WITH B_CTRS_PT0_MT_37 */
                          
                                               
OD;    /*  DO WITH ZF_T37_DEST */                     
                                                                                
END Q_S0560_ADD_TYPE_37_0_TCU;

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0560_ADD_TYPE_37_0_TCU_MC1422X_MC1423X           */        
/*                                                                    */        
/*     PROGRAMMER: NAVNEETH                                           */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 2012/04/11                                      */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE MC1422X AND MC1423X COUNTERS OF		      */
/*		MEASUREMENT TYPE 37 IN MEMORY TCU ORIGINATING         */        
/*       THE USER BUFFERS FOR MC1422X and MC1423X.                    */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_CELL_IDX M_CELL_IDX,                       */        
/*                      ZF_T37_SRC  M_TCU_TYPE_37_PER_CELL,	      */
/*                      ZF_T37_DEST CM_FY32_TEMP_37_0 LOC);           */
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0080_ADD_BYTE_TO_BYTE                      */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0550_UPDATE_CCI_TYPE37_0                   */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/  

Q_S0560_ADD_TYPE_37_0_TCU_MC1422X_MC1423X: PROC(                                  
                            ZF_CELL_IDX  M_CELL_IDX,          
                                 /* LOC added to remove warning */
                            ZF_T37_SRC  M_TCU_TYPE_37_PER_CELL LOC,
                            ZF_T37_DEST CM_FY32_TEMP_37_0 LOC);     
                                                                                                                     
 DO WITH ZF_T37_DEST;
              
  B_TEMP_CELL_ID:=ZF_CELL_IDX;           
  DO WITH B_CTRS_TEMP_MT_37;
                              
	/*MC1422 SERIES*/
 /*   Q_S0080_ADD_BYTE_TO_BYTE(ZF_T37_SRC.B_SUM_MEAS_CNTR 
				(E_MC1422A_AV_RX_DL_VMS_NSAIC_SUM),
            B_MC1422A_SUM_MEAS_TO_MC1423D_SUM_MEAS
				(E_MC1422A_RX_DL_VMS_NSAIC_SUM));  */

Q_S0060_ADD_LONG_INT_LONG_INT(M_LONG((ZF_T37_SRC.B_SUM_MEAS_CNTR 
		(E_MC1422A_AV_RX_DL_VMS_NSAIC_SUM))),
                B_MC1422A_SUM_TO_MC1423D_SUM
            (E_MC1422A_RX_DL_VMS_NSAIC_SUM)); 

Q_S0060_ADD_LONG_INT_LONG_INT( M_LONG ((ZF_T37_SRC.B_SUM_MEAS_CNTR 
			(E_MC1422A_AV_RX_DL_VMS_NSAIC_MES))),
            B_MC1422A_SUM_TO_MC1423D_SUM
                                (E_MC1422A_RX_DL_VMS_NSAIC_MES));
				  
Q_S0060_ADD_LONG_INT_LONG_INT( M_LONG((ZF_T37_SRC.B_SUM_MEAS_CNTR 
		(E_MC1422B_AV_RX_DL_VMS_SAIC_SUM))),
   	    B_MC1422A_SUM_TO_MC1423D_SUM
				(E_MC1422B_RX_DL_VMS_SAIC_SUM));
    
Q_S0060_ADD_LONG_INT_LONG_INT(M_LONG((ZF_T37_SRC.B_SUM_MEAS_CNTR 
			(E_MC1422B_AV_RX_DL_VMS_SAIC_MES))),
            B_MC1422A_SUM_TO_MC1423D_SUM
				(E_MC1422B_RX_DL_VMS_SAIC_MES));
				  
Q_S0060_ADD_LONG_INT_LONG_INT(M_LONG((ZF_T37_SRC.B_SUM_MEAS_CNTR 
			(E_MC1422C_AV_RX_DL_VMS_1_SUM))),
  	    B_MC1422A_SUM_TO_MC1423D_SUM
				(E_MC1422C_RX_DL_VMS_1_SUM));
   
Q_S0060_ADD_LONG_INT_LONG_INT(M_LONG((ZF_T37_SRC.B_SUM_MEAS_CNTR 
			(E_MC1422C_AV_RX_DL_VMS_1_MES))),
   	   B_MC1422A_SUM_TO_MC1423D_SUM
				(E_MC1422C_RX_DL_VMS_1_MES));
				  
Q_S0060_ADD_LONG_INT_LONG_INT(M_LONG((ZF_T37_SRC.B_SUM_MEAS_CNTR 
		     (E_MC1422D_AV_RX_DL_VMS_2_SUM))),
 	   B_MC1422A_SUM_TO_MC1423D_SUM
		(E_MC1422D_RX_DL_VMS_2_SUM));
    
 Q_S0060_ADD_LONG_INT_LONG_INT(M_LONG((ZF_T37_SRC.B_SUM_MEAS_CNTR 
				(E_MC1422D_AV_RX_DL_VMS_2_MES))),
    	   B_MC1422A_SUM_TO_MC1423D_SUM
				(E_MC1422D_RX_DL_VMS_2_MES));
	
	/*MC1423 SERIES*/
	
 Q_S0060_ADD_LONG_INT_LONG_INT(M_LONG((ZF_T37_SRC.B_SUM_MEAS_CNTR 
			(E_MC1423A_AV_RX_UL_VMS_NSAIC_SUM))),
     	  B_MC1422A_SUM_TO_MC1423D_SUM
				(E_MC1423A_RX_UL_VMS_NSAIC_SUM));

 Q_S0060_ADD_LONG_INT_LONG_INT(M_LONG((ZF_T37_SRC.B_SUM_MEAS_CNTR 
			(E_MC1423A_AV_RX_UL_VMS_NSAIC_MES))),
      	   B_MC1422A_SUM_TO_MC1423D_SUM
				(E_MC1423A_RX_UL_VMS_NSAIC_MES));				 
      
Q_S0060_ADD_LONG_INT_LONG_INT(M_LONG((ZF_T37_SRC.B_SUM_MEAS_CNTR 
		(E_MC1423B_AV_RX_UL_VMS_SAIC_SUM))),
      	   B_MC1422A_SUM_TO_MC1423D_SUM
				(E_MC1423B_RX_UL_VMS_SAIC_SUM));
      
 Q_S0060_ADD_LONG_INT_LONG_INT(M_LONG((ZF_T37_SRC.B_SUM_MEAS_CNTR 
			(E_MC1423B_AV_RX_UL_VMS_SAIC_MES))),
      	   B_MC1422A_SUM_TO_MC1423D_SUM
				(E_MC1423B_RX_UL_VMS_SAIC_MES));		  
				  
      
 Q_S0060_ADD_LONG_INT_LONG_INT(M_LONG((ZF_T37_SRC.B_SUM_MEAS_CNTR 
			(E_MC1423C_AV_RX_UL_VMS_1_SUM))),
      	  B_MC1422A_SUM_TO_MC1423D_SUM
				(E_MC1423C_RX_UL_VMS_1_SUM));
      
  Q_S0060_ADD_LONG_INT_LONG_INT(M_LONG((ZF_T37_SRC.B_SUM_MEAS_CNTR 
                             (E_MC1423C_AV_RX_UL_VMS_1_MES))),
     	    B_MC1422A_SUM_TO_MC1423D_SUM
				(E_MC1423C_RX_UL_VMS_1_MES));	
				  
 Q_S0060_ADD_LONG_INT_LONG_INT(M_LONG((ZF_T37_SRC.B_SUM_MEAS_CNTR 
			(E_MC1423D_AV_RX_UL_VMS_2_SUM))),
     	    B_MC1422A_SUM_TO_MC1423D_SUM
				(E_MC1423D_RX_UL_VMS_2_SUM));
	
  Q_S0060_ADD_LONG_INT_LONG_INT(M_LONG((ZF_T37_SRC.B_SUM_MEAS_CNTR 
			(E_MC1423D_AV_RX_UL_VMS_2_MES))),
   	    B_MC1422A_SUM_TO_MC1423D_SUM
				(E_MC1423D_RX_UL_VMS_2_MES));
	
							 
   OD;   /* DO WITH B_CTRS_TEMP_MT_37 */
                                               
OD;    /*  DO WITH ZF_T37_DEST */                     
                                                                                
END Q_S0560_ADD_TYPE_37_0_TCU_MC1422X_MC1423X;

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0570_ADD_TYPE_37_0_TCH                           */        
/*                                                                    */        
/*     PROGRAMMER: AABHUSHAN JYOTI KANASAKAR                          */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 2011/01/06                                      */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE MEASUREMENT TYPE 37 IN MEMORY TCHRM ORIGINATING  */        
/*       THE USER BUFFERS.                                            */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_CELL_IDX M_CELL_IDX,                       */        
/*                      ZF_T19_SRC M_DTC_TYPE19_ARRAY LOC,            */        
/*                      ZF_T29_SRC M_DTC_TYPE29_ARRAY LOC,            */        
/*                      ZF_T110_SRC M_DTC_TYPE110_ARRAY LOC,          */        
/*                      ZF_T110_DEST CM_FY32_HIS_TYPE_110_1 LOC       */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*                      Q_S0040_ADD_INT_TO_INT                        */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0550_UPDATE_CCI_TYPE37_0                   */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0570_ADD_TYPE_37_0_TCH: PROC(                                               
                            ZF_CELL_IDX  M_CELL_IDX,                            
                            ZF_T37_SRC   M_PM_TCH_TYPE_37_CTRS LOC, 
                            ZF_T37_DEST CM_FY32_HIS_TYPE_37_0 LOC);           
                                                                                
DCL ZQ_I      M_TCU_TYPE_37_CELL,     
    ZQ_J      RANGE (E_MT_37_CTR_MC1410A:E_MT_37_CTR_MC1410E);                     
                                                                                
DO WITH ZF_T37_DEST;                                                           
                                                                                
  B_CELL_ID:=ZF_CELL_IDX;                                                       
  DO WITH B_CTRS_PT0_MT_37;                                                    
                                                                 
    Q_S0050_AVG_OR_REPL_INT(ZF_T37_SRC(E_MC1410A_ONE_CALL_NON_VAMOS),        
                             B_MC1410A_TO_MC1410E(E_MT_37_CTR_MC1410A),
							 ZS_AVG);                
      
	Q_S0050_AVG_OR_REPL_INT(ZF_T37_SRC(E_MC1410B_TWO_CALL_NON_VAMOS),        
                             B_MC1410A_TO_MC1410E(E_MT_37_CTR_MC1410B),
							 ZS_AVG);

	Q_S0050_AVG_OR_REPL_INT(ZF_T37_SRC(E_MC1410C_TWO_CALL_VAMOS),        
                             B_MC1410A_TO_MC1410E(E_MT_37_CTR_MC1410C),
							 ZS_AVG);                
      
	Q_S0050_AVG_OR_REPL_INT(ZF_T37_SRC(E_MC1410D_THREE_CALL_VAMOS),        
                             B_MC1410A_TO_MC1410E(E_MT_37_CTR_MC1410D),
							 ZS_AVG);
							 
	Q_S0050_AVG_OR_REPL_INT(ZF_T37_SRC(E_MC1410E_FOUR_CALL_VAMOS),        
                             B_MC1410A_TO_MC1410E(E_MT_37_CTR_MC1410E),
							 ZS_AVG);
	
	OD;   /*  DO WITH B_CTRS_PT0_MT_37 */                                                                    
                                               
OD;    /*  DO WITH ZF_T37_DEST */                     
                                                                                
END Q_S0570_ADD_TYPE_37_0_TCH;

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0560_ADD_TYPE_37_1_TCU                           */        
/*                                                                    */        
/*     PROGRAMMER: AABHUSHAN JYOTI KANASAKAR                          */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 2011/01/06                                      */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE MEASUREMENT TYPE 37 IN MEMORY TCU ORIGINATING    */        
/*       THE USER BUFFERS.                                            */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_CELL_IDX M_CELL_IDX,                       */        
/*                      ZF_T19_SRC M_DTC_TYPE19_ARRAY LOC,            */        
/*                      ZF_T29_SRC M_DTC_TYPE29_ARRAY LOC,            */        
/*                      ZF_T110_SRC M_DTC_TYPE110_ARRAY LOC,          */        
/*                      ZF_T110_DEST CM_FY32_HIS_TYPE_110_1 LOC       */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*                      Q_S0040_ADD_INT_TO_INT                        */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0550_UPDATE_CCI_TYPE37_0                   */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0560_ADD_TYPE_37_1_TCU: PROC(                                               
                            ZF_CELL_IDX  M_CELL_IDX,                            
                            ZF_T37_SRC   M_TCU_TYPE_37_PER_CELL LOC, 
                            ZF_T37_DEST CM_FY32_HIS_TYPE_37_1 LOC);           
                                                                                
DCL ZQ_I      M_TCU_TYPE_37_CELL,     
    ZQ_J      RANGE (E_MT_37_CTR_MC1411A:E_MT_37_CTR_MC1418D);                     
                                                                                
DO WITH ZF_T37_DEST;                                                           
                                                                                
  B_CELL_ID:=ZF_CELL_IDX;                                                       
  DO WITH B_CTRS_PT1_MT_37;                                                    
                                                                 
    Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR
				(E_MC1411A_DSTRB1SCPIR_NSAIC_VMS1),  
                             B_MC1411A_TO_MC1419D(E_MT_37_CTR_MC1411A));                
      
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR
				(E_MC1411B_DSTRB2SCPIR_NSAIC_VMS1),
                             B_MC1411A_TO_MC1419D(E_MT_37_CTR_MC1411B));

	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR
				(E_MC1411C_DSTRB3SCPIR_NSAIC_VMS1),
                             B_MC1411A_TO_MC1419D(E_MT_37_CTR_MC1411C));                
      
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR
				(E_MC1411D_DSTRB4SCPIR_NSAIC_VMS1),
                             B_MC1411A_TO_MC1419D(E_MT_37_CTR_MC1411D));
							 
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR
				(E_MC1412A_DSTRB1SCPIR_NSAIC_VMS2), 
                             B_MC1411A_TO_MC1419D(E_MT_37_CTR_MC1412A));                
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR
				(E_MC1412B_DSTRB2SCPIR_NSAIC_VMS2),   
                             B_MC1411A_TO_MC1419D(E_MT_37_CTR_MC1412B));

	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR
				(E_MC1412C_DSTRB3SCPIR_NSAIC_VMS2),
                             B_MC1411A_TO_MC1419D(E_MT_37_CTR_MC1412C));                
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR
				(E_MC1412D_DSTRB4SCPIR_NSAIC_VMS2),
                             B_MC1411A_TO_MC1419D(E_MT_37_CTR_MC1412D));
    
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR
				(E_MC1413A_DSTRB1SCPIR_SAIC_VMS1),
                             B_MC1411A_TO_MC1419D(E_MT_37_CTR_MC1413A));                
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR
				(E_MC1413B_DSTRB1SCPIR_SAIC_VMS1),     
                             B_MC1411A_TO_MC1419D(E_MT_37_CTR_MC1413B));

	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR
				(E_MC1413C_DSTRB3SCPIR_SAIC_VMS1),  
                             B_MC1411A_TO_MC1419D(E_MT_37_CTR_MC1413C));                
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR
				(E_MC1413D_DSTRB4SCPIR_SAIC_VMS1),
                             B_MC1411A_TO_MC1419D(E_MT_37_CTR_MC1413D));
							 
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR
				(E_MC1414A_DSTRB1SCPIR_SAIC_VMS2),
                             B_MC1411A_TO_MC1419D(E_MT_37_CTR_MC1414A));                
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR
				(E_MC1414B_DSTRB2SCPIR_SAIC_VMS2),
                             B_MC1411A_TO_MC1419D(E_MT_37_CTR_MC1414B));

	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR
				(E_MC1414C_DSTRB3SCPIR_SAIC_VMS2),
                             B_MC1411A_TO_MC1419D(E_MT_37_CTR_MC1414C));                
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR
				(E_MC1414D_DSTRB4SCPIR_SAIC_VMS2),        
                             B_MC1411A_TO_MC1419D(E_MT_37_CTR_MC1414D));
							 
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR
				(E_MC1415A_DSTRB1SCPIR_VMS1_VMS1), 
                             B_MC1411A_TO_MC1419D(E_MT_37_CTR_MC1415A));                
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR
				(E_MC1415B_DSTRB2SCPIR_VMS1_VMS1),    
                             B_MC1411A_TO_MC1419D(E_MT_37_CTR_MC1415B));

	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR
				(E_MC1415C_DSTRB3SCPIR_VMS1_VMS1),  
                             B_MC1411A_TO_MC1419D(E_MT_37_CTR_MC1415C));                
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR
				(E_MC1415D_DSTRB4SCPIR_VMS1_VMS1), 
                             B_MC1411A_TO_MC1419D(E_MT_37_CTR_MC1415D));
							 
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR
				(E_MC1416A_DSTRB1SCPIR_VMS1_VMS2),
                             B_MC1411A_TO_MC1419D(E_MT_37_CTR_MC1416A));                
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR
				(E_MC1416B_DSTRB2SCPIR_VMS1_VMS2),   
                             B_MC1411A_TO_MC1419D(E_MT_37_CTR_MC1416B));

	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR
				(E_MC1416C_DSTRB3SCPIR_VMS1_VMS2),	 
                             B_MC1411A_TO_MC1419D(E_MT_37_CTR_MC1416C));                
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR
				(E_MC1416D_DSTRB4SCPIR_VMS1_VMS2),
                             B_MC1411A_TO_MC1419D(E_MT_37_CTR_MC1416D));
    
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR
				(E_MC1417A_DSTRB1SCPIR_VMS2_VMS1), 
                             B_MC1411A_TO_MC1419D(E_MT_37_CTR_MC1417A));                
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR
				(E_MC1417B_DSTRB2SCPIR_VMS2_VMS1),
                             B_MC1411A_TO_MC1419D(E_MT_37_CTR_MC1417B));

	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR
				(E_MC1417C_DSTRB3SCPIR_VMS2_VMS1),  
                             B_MC1411A_TO_MC1419D(E_MT_37_CTR_MC1417C));                
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR
				(E_MC1417D_DSTRB4SCPIR_VMS2_VMS1),   
                             B_MC1411A_TO_MC1419D(E_MT_37_CTR_MC1417D));
							 
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR
				(E_MC1418A_DSTRB1SCPIR_VMS2_VMS2),   
                             B_MC1411A_TO_MC1419D(E_MT_37_CTR_MC1418A));                
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR
				(E_MC1418B_DSTRB2SCPIR_VMS2_VMS2),    
                             B_MC1411A_TO_MC1419D(E_MT_37_CTR_MC1418B));

	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR
				(E_MC1418C_DSTRB3SCPIR_VMS2_VMS2),
                             B_MC1411A_TO_MC1419D(E_MT_37_CTR_MC1418C));                
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR
				(E_MC1418D_DSTRB4SCPIR_VMS2_VMS2),
                             B_MC1411A_TO_MC1419D(E_MT_37_CTR_MC1418D));

/*START: CR36/307898*/
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR
				(E_MC1419A_DSTRB1SCPIR_SAIC_SAIC),   
                             B_MC1411A_TO_MC1419D(E_MT_37_CTR_MC1419A));                

	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR
				(E_MC1419B_DSTRB2SCPIR_SAIC_SAIC),    
                             B_MC1411A_TO_MC1419D(E_MT_37_CTR_MC1419B));

	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR
				(E_MC1419C_DSTRB3SCPIR_SAIC_SAIC),
                             B_MC1411A_TO_MC1419D(E_MT_37_CTR_MC1419C));                

	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_INT_CNTR
				(E_MC1419D_DSTRB4SCPIR_SAIC_SAIC),
                             B_MC1411A_TO_MC1419D(E_MT_37_CTR_MC1419D));
/*END: CR36/307898*/
/*BEGIN : CR20_310381*/
	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_PRO_INT
				(E_MC1425A_DSTRB1SCPIR_NSAIC_NSAI),
                             B_MC1425A_TO_MC1426D(E_MT_37_CTR_MC1425A));

	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_PRO_INT
				(E_MC1425B_DSTRB2SCPIR_NSAIC_NSAI),
                             B_MC1425A_TO_MC1426D(E_MT_37_CTR_MC1425B));

	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_PRO_INT
				(E_MC1425C_DSTRB3SCPIR_NSAIC_NSAI),
                             B_MC1425A_TO_MC1426D(E_MT_37_CTR_MC1425C));

	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_PRO_INT
				(E_MC1425D_DSTRB4SCPIR_NSAIC_NSAI),
                             B_MC1425A_TO_MC1426D(E_MT_37_CTR_MC1425D));

	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_PRO_INT
				(E_MC1426A_DSTRB1SCPIR_NSAIC_SAIC),
                             B_MC1425A_TO_MC1426D(E_MT_37_CTR_MC1426A));

	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_PRO_INT
				(E_MC1426B_DSTRB2SCPIR_NSAIC_SAIC),
                             B_MC1425A_TO_MC1426D(E_MT_37_CTR_MC1426B));

	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_PRO_INT
				(E_MC1426C_DSTRB3SCPIR_NSAIC_SAIC),
                             B_MC1425A_TO_MC1426D(E_MT_37_CTR_MC1426C));

	Q_S0080_ADD_INT_TO_DPVAL(ZF_T37_SRC.B_PRO_INT
				(E_MC1426D_DSTRB4SCPIR_NSAIC_SAIC),
                             B_MC1425A_TO_MC1426D(E_MT_37_CTR_MC1426D));

	/*END : CR20_310381*/
	OD;   /*  DO WITH B_CTRS_PT0_MT_37 */                                                                    
                                               
OD;    /*  DO WITH ZF_T37_DEST */                     
                                                                                
END Q_S0560_ADD_TYPE_37_1_TCU;
/* END : B12 VAMOS */							   
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0550_UPDATE_CCI_TYPE110_1                        */        
/*                                                                    */        
/*     PROGRAMMER: JP QUINN (KDC)                                     */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/13                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE MEASUREMENT TYPE 110 IN MEMORY FOR ALL CELLS IN  */        
/*       THE USER BUFFER ORIGINATING FROM THE VARIOUS LDCPS.          */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*                      ZF_LDC_TYPE M_FMM_SELECTOR,                   */        
/*                      ZF_SEQ_NBR INT,                               */        
/*                      ZF_IS_TEL_DTC BOOL                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0555_ADD_TYPE_110_1_DTC                    */        
/*                      Q_S0575_UPD_T110_1_INVALID                    */        
/*                      Q_S0560_ADD_TYPE_110_1_TCU                    */        
/*                      Q_S0570_ADD_TYPE_110_1_TCHRM_DLS              */        
/*                      Q_S0565_ADD_TYPE_110_1_TCHRM                  */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*                      Q_S0250_UPD_DTC_STD_CNTRS                     */        
/*                      Q_S0260_UPD_TCH_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0550_UPDATE_CCI_TYPE110_1: PROC(ZF_LDC_BUF_PTR PTR,                          
                                   ZF_LDC_TYPE    M_FMM_SELECTOR,              
                                   ZF_SEQ_NBR     INT,                          
                                   ZF_IS_TEL_DTC  BOOL);                        
                                                                                
DCL ZQ_IDX          INT;                                                        
DCL ZQ_NBR_OF_CELLS INT;                                                        
                                                                                
IF ZF_LDC_TYPE = M_FS_DTC_TRF_LDC                                               
THEN 
  DO WITH ZF_LDC_BUF_PTR -> M_DTC_STD_CELL_CTRS;                                
    ZQ_NBR_OF_CELLS := B_NBR_CELLS; 
  OD;                 
  IF ZQ_NBR_OF_CELLS > M_PM_MAX_STD_CELLS_DTC_BUF OR                            
     ZQ_NBR_OF_CELLS < 0                                                        
  THEN                                                                          
    /* OUT OF RANGE */                                                          
    Q_S0010_CCDC_ERROR(M_ERC6_USER_REC,                                         
                     M_ERT0019_INC_MESS_DATA, 40, 0194);                        
    RETURN;                                                                     
  FI;                                                                           
                                                                                
  DO WITH ZF_LDC_BUF_PTR -> M_DTC_STD_CELL_CTRS;                                
    DO FOR ZQ_IDX:=1 TO B_NBR_CELLS;                                            
      /* COPY THE COUNTERS FOR THE CELLS IN THE LIST INTO THE                   
       * DATA STRUCTURE IN MEMORY.                                              
       */                                                                       
      DO WITH B_CELL_CNTRS(ZQ_IDX);                                             
        IF B_CELL_IDX > 0 AND                                                   
           B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC                              
        THEN                                                                    
          IF Z_STD_CELL_LIST(B_CELL_IDX)                                        
          THEN                                                                  
            IF B_CELL_IDX<=CM_FY32_MAX_CELLS_PER_BSC/2                          
            THEN                                                                
              Q_S0555_ADD_TYPE_110_1_DTC(B_CELL_IDX,                            
                                         B_DTC_TYPE19,  /* USER BUF */          
                                         B_DTC_TYPE29,  /* USER BUF */          
                                         B_DTC_TYPE110, /* USER BUF */          
                       Z_T110_1_PTR->(ZM_CELL_INDEX_VALUE(B_CELL_IDX)));           
            ELSE                                                                
              Q_S0555_ADD_TYPE_110_1_DTC(B_CELL_IDX,                            
                                         B_DTC_TYPE19,  /* USER BUF */          
                                         B_DTC_TYPE29,  /* USER BUF */          
                                         B_DTC_TYPE110, /* USER BUF */          
                     Z_T110_1_2_PTR->(ZM_CELL_INDEX_VALUE(B_CELL_IDX)));         
            FI;                                                                 
          ELSE                                                                  
            Q_S0575_UPD_T110_1_INVALID(B_CELL_IDX,                              
                                       M_FS_DTC_TRF_LDC,                        
                                       ZF_IS_TEL_DTC);                          
          FI;                                                                   
        FI;                                                                     
      OD;                                                                       
    OD;                                                                         
 OD;                                                                            
                                                                                
ELSIF ZF_LDC_TYPE = M_FS_TCU_TRF_LDC                                            
THEN                                                                            
  /* COPY THE COUNTERS FOR THE CELLS IN THE LIST INTO THE                       
   * DATA STRUCTURE IN MEMORY.                                                  
   */         
  DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_STD_CTRS_AREA;                          
    DO FOR ZQ_IDX:=1 TO B_NBR_CELLS;                                            
      DO WITH B_CELL_CNTRS(ZQ_IDX);                                             
        IF B_CELL_IDX > 0 AND                                                   
           B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC                              
        THEN                                                                    
          IF Z_STD_CELL_LIST(B_CELL_IDX)                                        
          THEN                                                                  
            IF B_CELL_IDX<=CM_FY32_MAX_CELLS_PER_BSC/2                          
            THEN                                                                
              Q_S0560_ADD_TYPE_110_1_TCU(B_CELL_IDX,                            
                                         B_CNTRS_TYPE_19,                       
                                         B_CNTRS_TYPE_110,                      
                                         B_CNTRS_TYPE_110_DPVAL_ARRAY,
                       Z_T110_1_PTR->(ZM_CELL_INDEX_VALUE(B_CELL_IDX)));           
            ELSE                                                                
              Q_S0560_ADD_TYPE_110_1_TCU(B_CELL_IDX,                            
                                         B_CNTRS_TYPE_19,                       
                                         B_CNTRS_TYPE_110,           
                                         B_CNTRS_TYPE_110_DPVAL_ARRAY,           
                     Z_T110_1_2_PTR->(ZM_CELL_INDEX_VALUE(B_CELL_IDX)));         
            FI;                                                                 
          ELSE                                                                  
            Q_S0575_UPD_T110_1_INVALID(B_CELL_IDX,                              
                                       M_FS_TCU_TRF_LDC,                        
                                       ZF_IS_TEL_DTC);                          
          FI;                                                                   
        FI;                                                                     
      OD;                                                                       
    OD;                                                                         
  OD;                                                                           
                                                                                
ELSIF ZF_LDC_TYPE = M_FS_TCHRM_LDC                                              
THEN                                                                            
  /* COPY THE COUNTERS FOR THE CELLS IN THE LIST INTO THE                       
   * DATA STRUCTURE IN MEMORY.                                                  
   */                                                                           
  IF ZF_SEQ_NBR=1 OR ZF_SEQ_NBR=2
  THEN                                                                          
    IF NOT ZF_IS_TEL_DTC                                                        
    THEN                                                                        
      ZQ_NBR_OF_CELLS := ZF_LDC_BUF_PTR->                                       
                          CM_FY32_TCH_UB_BSS_CELL_DLS_FIXED.B_NBR_CELLS;        
      IF ZQ_NBR_OF_CELLS > CM_FY32_MAX_CELLS_PER_BSC OR             
         ZQ_NBR_OF_CELLS < 0                                                    
      THEN                                                                      
        /* OUT OF RANGE */                                                      
        Q_S0010_CCDC_ERROR(M_ERC6_USER_REC,                                     
                         M_ERT0019_INC_MESS_DATA, 42, 0194);                    
        RETURN;                                                                 
      FI;                                                                       
                                                                                
      DO FOR ZQ_IDX:=1 TO ZQ_NBR_OF_CELLS;                                      
        DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCH_UB_BSS_CELL_DLS;                  
          DO WITH B_CELL_DLS_CTRS(LONG_INT((ZQ_IDX)));                                          
            IF B_CELL_IDX > 0 AND                                               
               B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC                          
            THEN                                                                
              IF Z_STD_CELL_LIST(B_CELL_IDX)                                    
              THEN                                                              
                IF B_CELL_IDX<=CM_FY32_MAX_CELLS_PER_BSC/2                      
                THEN                                                            
                  Q_S0570_ADD_TYPE_110_1_TCHRM_DLS(B_CELL_IDX,                  
                                                   B_CELL_CTRS,                 
                    Z_T110_1_PTR->(ZM_CELL_INDEX_VALUE(B_CELL_IDX)));             
                ELSE                                                            
                  Q_S0570_ADD_TYPE_110_1_TCHRM_DLS(B_CELL_IDX,                  
                                                   B_CELL_CTRS,                 
                  Z_T110_1_2_PTR->(ZM_CELL_INDEX_VALUE(B_CELL_IDX)));           
                FI;                                                             
              ELSE                                                              
                Q_S0575_UPD_T110_1_INVALID(B_CELL_IDX,                          
                                           M_FS_TCHRM_LDC,                      
                                           ZF_IS_TEL_DTC);                      
              FI;                                                               
            FI;                                                                 
          OD;                                                                   
        OD; /* DO WITH */                                                       
      OD; /* DO FOR */                                                          
    FI;                                                                         
                                                                                
  ELSE                                                                          
    ZQ_NBR_OF_CELLS := ZF_LDC_BUF_PTR->                                         
                         CM_FY32_PM_TCH_UB_CELLS.B_FIXED.B_NBR_CELLS;           
    IF ZQ_NBR_OF_CELLS > CM_FY32_PM_MAX_CELLS_PER_TCHRM_LDC_UB OR               
       ZQ_NBR_OF_CELLS < 0                                                      
    THEN                                                                        
      /* OUT OF RANGE */                                                        
      Q_S0010_CCDC_ERROR(M_ERC6_USER_REC,                                       
                       M_ERT0019_INC_MESS_DATA, 43, 0194);                      
      RETURN;                                                                   
    FI;                                                                         
    DO FOR ZQ_IDX:=1 TO ZQ_NBR_OF_CELLS;                                        
      DO WITH ZF_LDC_BUF_PTR -> CM_FY32_PM_TCH_UB_CELLS;                        
        DO WITH B_CELL_CTRS(LONG_INT((ZQ_IDX)));                                            
          IF B_CELL_IDX > 0 AND                                                 
             B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC                            
          THEN                                                                  
            IF Z_STD_CELL_LIST(B_CELL_IDX)                                      
            THEN                                                                
              IF B_CELL_IDX<=CM_FY32_MAX_CELLS_PER_BSC/2                        
              THEN                                                              
                Q_S0565_ADD_TYPE_110_1_TCHRM(B_CELL_IDX,                        
                                B_CELL_CTRS(LONG_INT((ZQ_IDX))),               
                      Z_T110_1_PTR->(ZM_CELL_INDEX_VALUE(B_CELL_IDX)));           
              ELSE                                                              
                Q_S0565_ADD_TYPE_110_1_TCHRM(B_CELL_IDX,                        
                                B_CELL_CTRS(LONG_INT((ZQ_IDX))),               
                    Z_T110_1_2_PTR->(ZM_CELL_INDEX_VALUE(B_CELL_IDX)));         
              FI;                                                               
            ELSE                                                                
              Q_S0575_UPD_T110_1_INVALID(B_CELL_IDX,                            
                                         M_FS_TCHRM_LDC,                        
                                         ZF_IS_TEL_DTC);                        
            FI;                                                                 
          FI;                                                                   
        OD;                                                                     
      OD; /* DO WITH */                                                         
    OD; /* FOR CELLS */                                                         
  FI;                                                                           
FI;                                                                             
                                                                                
END Q_S0550_UPDATE_CCI_TYPE110_1;                                               
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0555_ADD_TYPE_110_1_DTC                          */        
/*                                                                    */        
/*     PROGRAMMER: JP QUINN (KDC)                                     */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/13                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE MEASUREMENT TYPE 110 IN MEMORY DTC ORIGINATING   */        
/*       THE USER BUFFERS.                                            */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_CELL_IDX M_CELL_IDX,                       */        
/*                      ZF_T19_SRC M_DTC_TYPE19_ARRAY LOC,            */        
/*                      ZF_T29_SRC M_DTC_TYPE29_ARRAY LOC,            */        
/*                      ZF_T110_SRC M_DTC_TYPE110_ARRAY LOC,          */        
/*                      ZF_T110_DEST CM_FY32_HIS_TYPE_110_1 LOC       */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*                      Q_S0040_ADD_INT_TO_INT                        */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0550_UPDATE_CCI_TYPE110_1                  */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0555_ADD_TYPE_110_1_DTC: PROC(                                               
                            ZF_CELL_IDX  M_CELL_IDX,                            
                            ZF_T19_SRC   M_DTC_TYPE19_ARRAY LOC,                
                            ZF_T29_SRC   M_DTC_TYPE29_ARRAY LOC,                
                            ZF_T110_SRC  M_DTC_TYPE110_ARRAY LOC,               
                            ZF_T110_DEST CM_FY32_HIS_TYPE_110_1 LOC);           
                                                                                
DCL ZQ_I      M_DTC_TRF_CNTRS_TYPE110,                                          
    ZQ_19     M_DTC_TRF_CNTRS_TYPE19,                                           
    ZQ_29     M_DTC_TRF_CNTRS_TYPE29,                                           
    ZQ_J      RANGE (E_MT_110_CTR_MC01:E_MT_110_CTR_MC921E);                     
                                                                                
DO WITH ZF_T110_DEST;                                                           
                                                                                
  B_CELL_ID:=ZF_CELL_IDX;                                                       
  DO WITH B_CTRS_PT1_MT_110;                                                    
    /* COPY MC03 */                                                             
    Q_S0080_ADD_INT_TO_DPVAL(ZF_T110_SRC(E_MC03_NB_OUT_SDCCH_HO_SUCC),        
                             B_MC01_TO_MC149(E_MT_110_CTR_MC03));                
    /* COPY MC07 */                                                             
    Q_S0080_ADD_INT_TO_DPVAL(ZF_T110_SRC(E_MC07_NBR_SDCCH_HO_NO_MS_RET),        
                             B_MC01_TO_MC149(E_MT_110_CTR_MC07));                
                                                                                
    /* DEL FOR B8: MC14 AND MC14B ARE REMOVED */
    /* COPY MC14A, MC14B */                                                     
    /*
    ZQ_J := E_MT_110_CTR_MC14A;                                                 
    DO FOR ZQ_I := E_MC14A_NBR_HO_RTCH_FAIL_BSS_PBL TO                          
                   E_MC14B_NBR_ASS_RTCH_FAIL_BSS_PB;                            
                                                                                
      Q_S0080_ADD_INT_TO_DPVAL(                                                 
                      ZF_T110_SRC(ZQ_I),                                        
                      B_MC01_TO_MC149(ZQ_J));                                    
                                                                                
      Q_S0080_ADD_INT_TO_DPVAL(                                                 
                      ZF_T110_SRC(ZQ_I),                                        
                      B_MC01_TO_MC149(E_MT_110_CTR_MC14));                       
      ZQ_J := SUCC(ZQ_J);                                                       
    OD;                                                                         
    */
    /* ADD IN B8*/
    Q_S0080_ADD_INT_TO_DPVAL(
                       ZF_T110_SRC(E_MC14A_NBR_HO_RTCH_FAIL_BSS_PBL),
                       B_MC01_TO_MC149(E_MT_110_CTR_MC14A));
                                                                                
    Q_S0040_ADD_INT_TO_INT(                                                     
                 ZF_T110_SRC
                 (E_MC541A_NB_INC_EXT_TCH_HO_PREP_),                 
                 B_MC541A_TO_MC41B(E_MT_110_CTR_MC541A));                         
                                                                                
    Q_S0040_ADD_INT_TO_INT(                                                     
                 ZF_T110_SRC(E_MC41B_MSC_INC_HO_UNSUCC_NO_TTC),                 
                 B_MC541A_TO_MC41B(E_MT_110_CTR_MC41B));                         
                                                                                
    ZQ_J := E_MT_110_CTR_MC586A;                                                
    DO FOR ZQ_I := E_MC586A_HO_ATPT_LOW_LEV_UP_IZ TO                            
                   E_MC586C_HO_ATPT_HIGH_LEV_UP_OZ;                             
                                                                                
      Q_S0080_ADD_INT_TO_DPVAL(                                                 
                      ZF_T110_SRC(ZQ_I),                                        
                      B_MC586A_TO_MC153(ZQ_J));                                 
      ZQ_J := SUCC(ZQ_J);                                                       
    OD;                                                                         
                                                                                
    /** MC142E = C142A + C142C; MC142F = C142B + C142D                          
        MC144E = C144A + C144C; MC144F = C144B + C144D **/                      
    DO FOR ZQ_29 := E_C142A_NB_OUT_FORCED_IDR_SUCC TO                           
                    E_C144D_NB_OUT_NORM_EDR_REQD;                               
                                                                                
      CASE ZQ_29 OF                                                             
        (E_C142A_NB_OUT_FORCED_IDR_SUCC,                                        
         E_C142C_NB_OUT_NORM_IDR_SUCC):                                         
                 Q_S0080_ADD_INT_TO_DPVAL(                                      
                       ZF_T29_SRC(ZQ_29),                                       
                       B_MC586A_TO_MC153(E_MT_110_CTR_MC142E));                 
                                                                                
        (E_C142B_NB_OUT_FORCED_EDR_SUCC,                                        
         E_C142D_NB_OUT_NORM_EDR_SUCC):                                         
                 Q_S0080_ADD_INT_TO_DPVAL(                                      
                       ZF_T29_SRC(ZQ_29),                                       
                       B_MC586A_TO_MC153(E_MT_110_CTR_MC142F));                 
                                                                                
        (E_C144A_NB_OUT_FORCED_IDR_REQD,                                        
         E_C144C_NB_OUT_NORM_IDR_REQD):                                         
                 Q_S0080_ADD_INT_TO_DPVAL(                                      
                       ZF_T29_SRC(ZQ_29),                                       
                       B_MC586A_TO_MC153(E_MT_110_CTR_MC144E));                 
                                                                                
        (E_C144B_NB_OUT_FORCED_EDR_REQD,                                        
         E_C144D_NB_OUT_NORM_EDR_REQD):                                         
                 Q_S0080_ADD_INT_TO_DPVAL(                                      
                       ZF_T29_SRC(ZQ_29),                                       
                       B_MC586A_TO_MC153(E_MT_110_CTR_MC144F));                 
                                                                                
        ELSE                                                                    
      ESAC;                                                                     
    OD;                                                                         
                                                                                
    Q_S0080_ADD_INT_TO_DPVAL(                                                   
                      ZF_T29_SRC(E_C151_NB_INC_IDR_SUCC),                       
                      B_MC586A_TO_MC153(E_MT_110_CTR_MC151));                   
                                                                                
    /** MC197 = C194A + C194B + C194C + C195 ***/                               
    DO FOR ZQ_19 := E_C194A_NBR_SMS_FAIL_RADIO TO                               
                    E_C194C_NBR_SMS_FAIL_PROTOCOL_ER;                           
                                                                                
      Q_S0080_ADD_INT_TO_DPVAL(                                                 
                     ZF_T19_SRC(ZQ_19),                                         
                     B_MC196_TO_MC461(E_MT_110_CTR_MC197));                     
                                                                                
    OD;      

    /* DEL FOR B8:
    Q_S0070_ADD_INT_TO_3_INT(                                           
                 ZF_T110_SRC(E_MC448A_NB_TCH_HO_ATPT_26_HR2FR),                         
                 B_MC448A); 
                 
    Q_S0070_ADD_INT_TO_3_INT(                                           
                 ZF_T110_SRC(E_C448_NB_TCH_HO_ATPT_27_FR2HR),                         
                 B_MC447); 
    */
                                       
    Q_S0080_ADD_INT_TO_DPVAL(ZF_T110_SRC(E_MC461_NB_TCH_HO_ATPT_29_TFO),        
                             B_MC196_TO_MC461(E_MT_110_CTR_MC461));                
                                                                                
    /* B7++ COUNTERS 921 A, C, E */
    Q_S0040_ADD_INT_TO_INT(                                                     
                 ZF_T110_SRC(E_MC921A_TCH_ASS_HO_PREEMPT_CAP),                 
                 B_MC921A_TO_MC921E(E_MT_110_CTR_MC921A));                         
                                                                                
    Q_S0040_ADD_INT_TO_INT(                                                     
                 ZF_T110_SRC(E_MC921C_NB_PREEMPTED_CALLS),                 
                 B_MC921A_TO_MC921E(E_MT_110_CTR_MC921C));                         
                                                                                
    Q_S0040_ADD_INT_TO_INT(                                                     
                 ZF_T110_SRC(E_MC921E_TCH_ASS_HO_PREEMPTABL),                 
                 B_MC921A_TO_MC921E(E_MT_110_CTR_MC921E));
                                          
    /* ADD IN B8 */
    Q_S0080_ADD_INT_TO_DPVAL(                                           
                 ZF_T110_SRC(E_MC02I_NUM_IMM_ASS_SUCC_MO_LCS),             
                 B_MC01_TO_MC149(E_MT_110_CTR_MC02));
                
  OD; /* DO WITH B_CTRS_PT1 */                                                  
OD; /* DO WITH ZF_DEST_PTR ->CM_FY32_HIS_TYPE_110_1 */                          
                                                                                
END Q_S0555_ADD_TYPE_110_1_DTC;                                                 
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0560_ADD_TYPE_110_1_TCU                          */        
/*                                                                    */        
/*     PROGRAMMER: JP QUINN (KDC)                                     */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/13                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE MEASUREMENT TYPE 110 IN MEMORY TCU ORIGINATING   */        
/*       THE USER BUFFERS.                                            */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_CELL_IDX M_CELL_IDX,                       */        
/*                      ZF_T19_SRC M_TCU_CNTRS_TYPE_19 LOC,           */        
/*                      ZF_T110_SRC M_TCU_TYPE_110_PER_CELL LOC,      */        
/*                      ZF_T110_DEST CM_FY32_HIS_TYPE_110_1 LOC       */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*                      Q_S0050_AVG_OR_REPL_INT                       */        
/*                      Q_S0040_ADD_INT_TO_INT                        */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0550_UPDATE_CCI_TYPE110_1                  */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0560_ADD_TYPE_110_1_TCU: PROC(                                               
                           ZF_CELL_IDX  M_CELL_IDX,                             
                           ZF_T19_SRC   M_TCU_CNTRS_TYPE_19 LOC,                
                           ZF_T110_SRC  CM_TCU_TYPE_110_PER_CELL LOC,            
                          ZF_T110_DP_SRC CM_TCU_TYPE110_DPVAL_ARRAY LOC,
                           ZF_T110_DEST CM_FY32_HIS_TYPE_110_1 LOC);

                                                                                
DCL ZQ_SRC_CNT_IDX  CM_TCU_TYPE_110_CELL,                                        
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
    ZQ_SRC_DP_IDX   CM_TCU_TYPE_110_DPVAL_CELL, 
/* END : ADD-WIPRO-B10-MR1-CHANGE */
    ZQ_I            M_TCU_TYPE_19,                                              
    ZQ_DEST_CNT_IDX RANGE(E_MT_110_CTR_MC01:E_MT_110_CTR_MC197);                
                                                                                
DO WITH ZF_T110_DEST;                                                           
  B_CELL_ID:=ZF_CELL_IDX;                                                       
  DO WITH B_CTRS_PT1_MT_110;                                                    
    /* COPY MC01 TO MC02H */                                                     
    ZQ_DEST_CNT_IDX:=E_MT_110_CTR_MC01;                                         
    DO FOR ZQ_SRC_CNT_IDX:=E_MC01_NBR_DCCH_TERM_TRANS TO                        
                           E_MC02H_NBR_DCCH_CALL_ESTABL_ORI;                            
      Q_S0080_ADD_INT_TO_DPVAL(                                                 
                      ZF_T110_SRC(ZQ_SRC_CNT_IDX),                              
                      B_MC01_TO_MC149(ZQ_DEST_CNT_IDX));                         
      /* GET THE NEXT ONE */                                                    
      ZQ_DEST_CNT_IDX:=SUCC(ZQ_DEST_CNT_IDX);                                   
    OD;                                                                         
                                                                                
    /* COPY MC04 */                                                             
    Q_S0080_ADD_INT_TO_DPVAL(                                                   
                      ZF_T110_SRC(E_MC04_NBR_NO_DCCH_AVAIL),                    
                      B_MC01_TO_MC149(E_MT_110_CTR_MC04));                       
                                                                                
    Q_S0080_ADD_INT_TO_DPVAL(                                                   
                      ZF_T110_SRC(E_MC10_NBR_SDCCH_SEIZ_HO),                    
                      B_MC01_TO_MC149(E_MT_110_CTR_MC10));                       
                                                                                
    Q_S0080_ADD_INT_TO_DPVAL(                                                   
                      ZF_T110_SRC(E_MC14C_NBR_RTCH_LOST_BSS_PBL),               
                      B_MC01_TO_MC149(E_MT_110_CTR_MC14C));                      
    
    /* DEL FOR B8
    Q_S0080_ADD_INT_TO_DPVAL(                                                   
                      ZF_T110_SRC(E_MC14C_NBR_RTCH_LOST_BSS_PBL),               
                      B_MC01_TO_MC149(E_MT_110_CTR_MC14));                       
    */
                                                                                
    /* INIT TO NEXT ELEMENT */                                                  
    ZQ_DEST_CNT_IDX:=E_MT_110_CTR_MC15A;                                         
                                                                                
    /* COPY MC15A TO MC149 */                                                    
    DO FOR ZQ_SRC_CNT_IDX:=E_MC15A_NB_INC_IDR_ALLOC TO                       
                           E_MC149_NBR_SDCCH_ASS_FL_MS_ACC;                           
                                                                                
      Q_S0080_ADD_INT_TO_DPVAL(                                                 
                      ZF_T110_SRC(ZQ_SRC_CNT_IDX),                              
                      B_MC01_TO_MC149(ZQ_DEST_CNT_IDX));                         
      /* GET THE NEXT ONE */                                                    
      ZQ_DEST_CNT_IDX:=SUCC(ZQ_DEST_CNT_IDX);                                   
    OD;                                                                         
             
/* BEGIN: CHANGE-WIPRO-B10-MR1-CHANGE */                                                                   
    /* COPY MC8A TO MC8D */                                                     
    ZQ_DEST_CNT_IDX := E_MT_110_CTR_MC8A;                                         
   
    
   DO FOR ZQ_SRC_DP_IDX := E_MC8A_NBR_ACC_PAGING TO                             
                             E_MC8D_IMM_ASS_REJECT;                               
                                                                                
      Q_S0020_ADD_DP_VALUES(                                                 
                      ZF_T110_DP_SRC(ZQ_SRC_DP_IDX),                              
                      B_MC8A_TO_MC8D(ZQ_DEST_CNT_IDX));                         
 /* END : CHANGE-WIPRO-B10-MR1-CHANGE */
      
     /* GET THE NEXT ONE */                                                    
      ZQ_DEST_CNT_IDX:=SUCC(ZQ_DEST_CNT_IDX);                                   
    OD;                                                                         
                                                                                
    Q_S0080_ADD_INT_TO_DPVAL(                                                   
                      ZF_T110_SRC(E_MC850_NB_MULTIBAND_MS_ACCESS),               
                      B_MC586A_TO_MC153(E_MT_110_CTR_MC850));                       
                                                                                
    Q_S0080_ADD_INT_TO_DPVAL(                                                   
                      ZF_T110_SRC(E_MC170_NB_CALL_TFO),               
                      B_MC196_TO_MC461(E_MT_110_CTR_MC170));                       
                                                                                
    /* DEL FOR B8 */
    /* COPY MC704A TO MC704B */                                                   
    /*
    DO FOR ZQ_SRC_CNT_IDX:=E_C704A_NBR_TCH_NOR_AMR_FR_ALLOC
                      TO  E_C704B_NBR_TCH_NOR_AMR_HR_ALLOC;                     
      Q_S0080_ADD_INT_TO_DPVAL(                                                 
                      ZF_T110_SRC(ZQ_SRC_CNT_IDX),                              
                      B_MC461_TO_MC704(E_MT_110_CTR_MC704));                         
    OD;                                                                         
    */
                                                                                
    /* MC196 = C190 + C191 + C192 + C193 */                                     
    DO FOR ZQ_I := E_C190_NBR_SDCCH_SMS_ORIG_TRANS TO                           
                   E_C193_NBR_SACCH_SMS_TERM_TRANS;                             
                                                                                
      Q_S0080_ADD_INT_TO_DPVAL(                                                 
                        ZF_T19_SRC(ZQ_I),                                       
                        B_MC196_TO_MC461(E_MT_110_CTR_MC196));                  
    OD;                                                                         
                                                                                
    /** MC197 = C194A + C194B + C194C + C195 ***/                               
    Q_S0080_ADD_INT_TO_DPVAL(                                                   
                      ZF_T19_SRC(E_C195_NBR_SMS_SAPI3_ERR_IND),                 
                      B_MC196_TO_MC461(E_MT_110_CTR_MC197));                    
                                                                                
  OD; /* WITH B_CTRS_PT1_MT_110; */                                             
OD; /* WITH ZF_DEST_PTR ->CM_FY32_HIS_TYPE_110_1; */                            
                                                                                
END Q_S0560_ADD_TYPE_110_1_TCU;                                                 
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0565_ADD_TYPE_110_1_TCHRM                        */        
/*                                                                    */        
/*     PROGRAMMER: JP QUINN (KDC)                                     */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/13                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE MEASUREMENT TYPE 110 IN MEMORY TCHRM ORIGINATING */        
/*       THE USER BUFFERS.                                            */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_CELL_IDX M_CELL_IDX,                       */        
/*                      ZF_T110_SRC M_PM_TCH_CELL_CTRS LOC,           */        
/*                      ZF_T110_DEST CM_FY32_HIS_TYPE_110_1 LOC       */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0050_AVG_OR_REPL_INT                       */        
/*                      Q_S0040_ADD_INT_TO_INT                        */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0550_UPDATE_CCI_TYPE110_1                  */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0565_ADD_TYPE_110_1_TCHRM: PROC(                                             
                           ZF_CELL_IDX  M_CELL_IDX,                             
                           ZF_T110_SRC  M_PM_TCH_CELL_CTRS LOC,                 
                           ZF_T110_DEST CM_FY32_HIS_TYPE_110_1 LOC);            
                                                                                
DO WITH ZF_T110_SRC;                                                            
  DO WITH ZF_T110_DEST;                                                         
    B_CELL_ID := ZF_CELL_IDX;                                                   
    DO WITH B_CTRS_PT1_MT_110;                                                  
                                                                                
      Q_S0050_AVG_OR_REPL_INT(B_TYPE_2(E_C141_NBR_AVG_TCH_QE_LENGTH),           
                              B_MC24_TO_MC141(E_MT_110_CTR_MC141),              
                              ZS_AVG);                                          
                                                                                
      Q_S0080_ADD_INT_TO_DPVAL(                                                 
                 B_TYPE_29(E_C153_NBR_INC_IDR_REQD),                            
                 B_MC586A_TO_MC153(E_MT_110_CTR_MC153));                        
                                                                                
      Q_S0040_ADD_INT_TO_INT(                                                   
                B_TYPE_29(E_C555_NBR_INC_IDR_PREP_FAIL_CON),
                B_MC555);     
                      
      Q_S0080_ADD_INT_TO_DPVAL(                                             
              B_TYPE_1(E_C13A_NB_TCH_NOR_ASS_QUEUED),                           
              B_MC01_TO_MC149(E_MT_110_CTR_MC13A));                                
                                                                                
      Q_S0080_ADD_INT_TO_DPVAL(                                             
              B_TYPE_1(E_C13B_NB_INC_EXT_TCH_HO_QUEUED),                        
              B_MC01_TO_MC149(E_MT_110_CTR_MC13B));
                                              
      /* B7++, COUNTERS 921B & D */                                                                          
      Q_S0040_ADD_INT_TO_INT(                                                   
                B_TYPE_110(E_C921B_NB_PREEMPT_CAP_ALLOC),
                B_MC921A_TO_MC921E(E_MT_110_CTR_MC921B));     
                                                                                
      Q_S0040_ADD_INT_TO_INT(                                                   
                B_TYPE_110(E_C921D_NB_PREEMPT_CAP_DR),
                B_MC921A_TO_MC921E(E_MT_110_CTR_MC921D));     
                                
    OD;                                                                         
  OD; /* WITH ZF_DEST_PTR ->CM_FY32_HIS_TYPE_110_1; */                          
OD;                                                                             
                                                                                
END Q_S0565_ADD_TYPE_110_1_TCHRM;                                               
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0570_ADD_TYPE_110_1_TCHRM_DLS                    */        
/*                                                                    */        
/*     PROGRAMMER: JP QUINN (KDC)                                     */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/13                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE MEASUREMENT TYPE 110 IN MEMORY TCHRM ORIGINATING */        
/*       THE USER BUFFERS. THIS CONTAINS ALL CELLS FROM S-CPR.        */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_CELL_IDX M_CELL_IDX,                       */        
/*                      ZF_T110_SRC M_PM_TCH_TYPE_2_DLS_CTRS LOC -    */        
/*                      ,                                             */        
/*                      ZF_T110_DEST CM_FY32_HIS_TYPE_110_1 LOC       */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0030_ADD_BYTE_TO_INT                       */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0550_UPDATE_CCI_TYPE110_1                  */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0570_ADD_TYPE_110_1_TCHRM_DLS: PROC(                                         
                           ZF_CELL_IDX  M_CELL_IDX,                             
                           ZF_T110_SRC  M_PM_TCH_TYPE_2_DLS_CTRS LOC,           
                           ZF_T110_DEST CM_FY32_HIS_TYPE_110_1 LOC);            
                                                                                
DO WITH ZF_T110_DEST;                                                           
  B_CELL_ID := ZF_CELL_IDX;                                                     
  DO WITH B_CTRS_PT1_MT_110;                                                    
    Q_S0030_ADD_BYTE_TO_INT(ZF_T110_SRC(E_C24_NBR_NOT_AVAIL_TRX_TS),            
                            B_MC24_TO_MC141(E_MT_110_CTR_MC24));                
                                                                                
    Q_S0030_ADD_BYTE_TO_INT(ZF_T110_SRC(E_C27_NBR_AVAIL_CCCH),                  
                            B_MC24_TO_MC141(E_MT_110_CTR_MC27));                
                                                                                
  OD; /* WITH B_CTRS_PT1_MT_110; */                                             
OD; /* WITH ZF_DEST_PTR ->CM_FY32_HIS_TYPE_110_1; */                            
                                                                                
END Q_S0570_ADD_TYPE_110_1_TCHRM_DLS;                                           
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0574_UPD_T110_1_INVALID                          */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/11                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 110 PART 1 COUNTERS VALIDITY FIELDS.        */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_PTR_TO_CELL_IDX PTR,                       */        
/*                      ZF_CELL_IDX M_CELL_IDX,                       */        
/*                      ZF_LDC_TYPE M_FMM_SELECTOR,                   */        
/*                      ZF_IS_TEL_DTC BOOL                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0574_UPD_T110_1_INVALID: PROC(ZF_PTR_TO_CELL_IDX  PTR,                       
                                 ZF_CELL_IDX         M_CELL_IDX,                
                                 ZF_LDC_TYPE         M_FMM_SELECTOR,            
                                 ZF_IS_TEL_DTC       BOOL);                     
                                                                                
DCL ZQ_J     RANGE(E_MT_110_CTR_MC01:E_MT_110_CTR_MC921E);
DCL ZQ_PTR   PTR;                                                               
                                                                                
DO WITH ZF_PTR_TO_CELL_IDX->CM_FY32_HIS_TYPE_110_1;                             
  B_CELL_ID := ZF_CELL_IDX;                                                     
  ZQ_PTR := ->B_CTRS_PT1_MT_110;                                                
  CASE ZF_LDC_TYPE OF
    (M_FS_DTC_TRF_LDC):
            DO WITH B_CTRS_PT1_MT_110;
            /* MC03, MC07, MC14A, MC541A -> MC144F,
               MC151, MC197, MC461, MC921A, MC921C,
               MC921E  */
               DO FOR ZQ_J := E_MT_110_CTR_MC03 TO E_MT_110_CTR_MC921E;
                 CASE ZQ_J OF
                   (E_MT_110_CTR_MC03,
                    E_MT_110_CTR_MC07,
                    E_MT_110_CTR_MC14A):
                      B_MC01_TO_MC149(ZQ_J).B_LOW  := ZS_FFFE;
                      B_MC01_TO_MC149(ZQ_J).B_HIGH := ZS_FFFF;
                      
                   (E_MT_110_CTR_MC541A:E_MT_110_CTR_MC41B):
                      B_MC541A_TO_MC41B(ZQ_J) := ZS_FFFE;
                      
                   (E_MT_110_CTR_MC586A:E_MT_110_CTR_MC144F,
                    E_MT_110_CTR_MC151):
                      B_MC586A_TO_MC153(ZQ_J).B_LOW  := ZS_FFFE;
                      B_MC586A_TO_MC153(ZQ_J).B_HIGH := ZS_FFFF;
                   
                   (E_MT_110_CTR_MC197,
                    E_MT_110_CTR_MC461):
                      B_MC196_TO_MC461(ZQ_J).B_LOW  := ZS_FFFE;
                      B_MC196_TO_MC461(ZQ_J).B_HIGH := ZS_FFFF;
                      
                   (E_MT_110_CTR_MC921A,
                    E_MT_110_CTR_MC921C,
                    E_MT_110_CTR_MC921E):
                      B_MC921A_TO_MC921E(ZQ_J) := ZS_FFFE;
                 
                   ELSE
                 
                 ESAC;
               OD;
            OD;

    (M_FS_TCU_TRF_LDC):
            DO WITH B_CTRS_PT1_MT_110;
            /* MC01 -> MC02H, MC04, MC10, MC14C -> MC149,
               MC8A -> MC8D, MC850, MC196, MC170 */
               DO FOR ZQ_J := E_MT_110_CTR_MC01 TO E_MT_110_CTR_MC170;
                 CASE ZQ_J OF
                   (E_MT_110_CTR_MC01:E_MT_110_CTR_MC02H,
                    E_MT_110_CTR_MC04,
                    E_MT_110_CTR_MC10,
                    E_MT_110_CTR_MC14C:E_MT_110_CTR_MC149):
                      B_MC01_TO_MC149(ZQ_J).B_LOW  := ZS_FFFE;
                      B_MC01_TO_MC149(ZQ_J).B_HIGH := ZS_FFFF;
                      
                                       
                   (E_MT_110_CTR_MC8A:E_MT_110_CTR_MC8D):
                      B_MC8A_TO_MC8D(ZQ_J).B_LOW  := ZS_FFFE;
                      B_MC8A_TO_MC8D(ZQ_J).B_HIGH := ZS_FFFF; 

                  
                   (E_MT_110_CTR_MC850):
                      B_MC586A_TO_MC153(ZQ_J).B_LOW  := ZS_FFFE;
                      B_MC586A_TO_MC153(ZQ_J).B_HIGH := ZS_FFFF;
                   
                   (E_MT_110_CTR_MC196,
                    E_MT_110_CTR_MC170):
                      B_MC196_TO_MC461(ZQ_J).B_LOW  := ZS_FFFE;
                      B_MC196_TO_MC461(ZQ_J).B_HIGH := ZS_FFFF;
                 
                   ELSE
                 
                 ESAC;
               OD;
            OD;
            
    (M_FS_TCHRM_LDC):                                                           
            DO WITH B_CTRS_PT1_MT_110;                                          
              IF NOT ZF_IS_TEL_DTC                                              
                THEN                                                              
                DO FOR ZQ_J := E_MT_110_CTR_MC24 TO E_MT_110_CTR_MC27;          
                  B_MC24_TO_MC141(ZQ_J) := ZS_FFFE;                             
                OD;                                                             
              ELSE  
                B_MC01_TO_MC149(E_MT_110_CTR_MC13A).B_LOW := ZS_FFFE;         
                B_MC01_TO_MC149(E_MT_110_CTR_MC13A).B_HIGH := ZS_FFFF;        
                B_MC01_TO_MC149(E_MT_110_CTR_MC13B).B_LOW := ZS_FFFE;         
                B_MC01_TO_MC149(E_MT_110_CTR_MC13B).B_HIGH := ZS_FFFF;        
                B_MC24_TO_MC141(E_MT_110_CTR_MC141) := ZS_FFFE;                           
                B_MC586A_TO_MC153(E_MT_110_CTR_MC153).B_LOW := ZS_FFFE;         
                B_MC586A_TO_MC153(E_MT_110_CTR_MC153).B_HIGH := ZS_FFFF;        
                B_MC555 := ZS_FFFE;     
                B_MC921A_TO_MC921E(E_MT_110_CTR_MC921B) := ZS_FFFE;
                B_MC921A_TO_MC921E(E_MT_110_CTR_MC921D) := ZS_FFFE;                
              FI;                                                               
            OD;                                                                 
    ELSE                                                                        
  ESAC;                                                                         
OD;                                                                             
                                                                                
END Q_S0574_UPD_T110_1_INVALID;                                                 
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0575_UPD_T110_1_INVALID                          */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/11                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 110 PART 1 COUNTERS VALIDITY FIELDS.        */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_CELL_IDX M_CELL_IDX,                       */        
/*                      ZF_LDC_TYPE M_FMM_SELECTOR,                   */        
/*                      ZF_IS_TEL_DTC BOOL                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0574_UPD_T110_1_INVALID                    */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0290_UPD_TCH_INVALID                       */        
/*                      Q_S0447_UPD_T110_DTC_INVALID                  */        
/*                      Q_S0448_UPD_T110_TCU_INVALID                  */        
/*                      Q_S0550_UPDATE_CCI_TYPE110_1                  */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0575_UPD_T110_1_INVALID: PROC(ZF_CELL_IDX     M_CELL_IDX,                    
                                 ZF_LDC_TYPE     M_FMM_SELECTOR,                
                                 ZF_IS_TEL_DTC   BOOL);                         
                                                                                
IF ZF_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC/2                                   
THEN                                                                            
  Q_S0574_UPD_T110_1_INVALID(-> Z_T110_1_PTR->
                             (ZM_CELL_INDEX_VALUE(ZF_CELL_IDX)),                    
                             ZF_CELL_IDX, ZF_LDC_TYPE,                          
                             ZF_IS_TEL_DTC);                                    
ELSE                                                                            
  /* DO FOR THE NEXT BUNCH OF CELLS */                                          
  Q_S0574_UPD_T110_1_INVALID(-> Z_T110_1_2_PTR->
                             (ZM_CELL_INDEX_VALUE(ZF_CELL_IDX)),                  
                             ZF_CELL_IDX, ZF_LDC_TYPE,                          
                             ZF_IS_TEL_DTC);                                    
FI;                                                                             
                                                                                
END Q_S0575_UPD_T110_1_INVALID;                                                 
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0580_UPDATE_CCI_TYPE110_2                        */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 22/11/97                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*      UPDATE THE TYPE 110 BLOCK 2 COUNTERS - THEY ALL COME FROM THE */        
/*      DTC AND SO DOES NOT NEED TO BE CHECKED FOR LDCP TYPE.         */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*                      Q_S0040_ADD_INT_TO_INT                        */        
/*                      Q_S0449_UPD_T110_2_INVALID                    */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0250_UPD_DTC_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0580_UPDATE_CCI_TYPE110_2: PROC(ZF_LDC_BUF_PTR PTR);                         
                                                                                
DCL ZQ_NBR_CELLS INT,                                                           
    ZQ_CI        M_CELL_IDX;                                                    
DCL ZQ_I         M_DTC_TRF_CNTRS_TYPE110,                                       
    ZQ_J         RANGE(E_MT_110_CTR_MC607:E_MT_110_CTR_MC162),                  
    ZQ_Z         M_DTC_TRF_CNTRS_TYPE28;                                        
   
                                                                                
DO WITH ZF_LDC_BUF_PTR -> M_DTC_STD_CELL_CTRS;                                
  ZQ_NBR_CELLS := B_NBR_CELLS;
OD;                     
                                                                                
DO WHILE ZQ_NBR_CELLS /= 0;                                                     
  DO WITH ZF_LDC_BUF_PTR -> M_DTC_STD_CELL_CTRS;                                
    DO WITH B_CELL_CNTRS(ZQ_NBR_CELLS);                                         
      ZQ_CI := B_CELL_IDX;                                                      
                                                                                
      IF (ZQ_CI <= CM_FY32_MAX_CELLS_PER_BSC) AND                               
         (ZQ_CI >  0)                                                           
      THEN                                                                      
        IF Z_STD_CELL_LIST(ZQ_CI)                                               
        THEN                                                                    
          DO WITH Z_T110_2_PTR->(ZM_CELL_INDEX_VALUE(ZQ_CI));                                        
            B_CELL_ID := ZQ_CI;                                                 
                                                                                
            DO WITH B_CTRS_PT2_MT_110;                                          
                                                                                
              Q_S0080_ADD_INT_TO_DPVAL(                                         
                   B_DTC_TYPE28
                   (E_C607_HO_ATPT_HLEV_NEIG_FORC_DR),                  
                   B_MC607_TO_MC612D(E_MT_110_CTR_MC607));
                                   
              Q_S0040_ADD_INT_TO_INT(                                           
                   B_DTC_TYPE110
                   (E_MC541_NB_INC_EXT_TCH_HO_PREP_F),             
                   B_MC541_TO_MC81(E_MT_110_CTR_MC541));                                                     
                                                                                    
              Q_S0040_ADD_INT_TO_INT(                                           
                   B_DTC_TYPE28(E_C81_MSC_INC_H_UNSUCC_RES_LA),                 
                   B_MC541_TO_MC81(E_MT_110_CTR_MC81));                                                     
                                                                                
              /* MC42 + C82 */                                                  
              Q_S0080_ADD_INT_TO_DPVAL(                                         
                   B_DTC_TYPE110(E_MC42_MSC_INC_H_SUCC),                        
                   B_MC642);                                                    
                                                                                
              Q_S0080_ADD_INT_TO_DPVAL(                                         
                   B_DTC_TYPE28(E_C82_MSC_INC_H_SUCC),                          
                   B_MC642);                                                    
                                                                                
              /* MC43 + C83 */                                                  
              Q_S0040_ADD_INT_TO_INT(                                           
                   B_DTC_TYPE110(E_MC43_MSC_INC_H_UNSUCC_SEIZ_F),               
                   B_MC643);                                                    
                                                                                
              Q_S0040_ADD_INT_TO_INT(                                           
                   B_DTC_TYPE28(E_C83_MSC_INC_H_UNSUCC_SEIZ_F),                 
                   B_MC643);                                                    
                                                                                
              /* MC45 + C85 AND MC46 + C86 */                                   
              ZQ_J := E_MT_110_CTR_MC645A;                                       
              ZQ_Z := E_C85A_MSC_OUT_H_REQD_NBR;                                 
              DO FOR ZQ_I := E_MC45A_MSC_OUT_H_REQD_NBR TO                       
                             E_MC46_MSC_OUT_H_SUCC;                             
                                                                                
                Q_S0080_ADD_INT_TO_DPVAL(                                       
                        B_DTC_TYPE110(ZQ_I),                                    
                        B_MC645A_TO_MC646(ZQ_J));                                
                                                                                
                Q_S0080_ADD_INT_TO_DPVAL(                                       
                        B_DTC_TYPE28(ZQ_Z),                                     
                        B_MC645A_TO_MC646(ZQ_J));                                
                                                                                
                ZQ_J := SUCC(ZQ_J);                                             
                ZQ_Z := SUCC(ZQ_Z);                                             
              OD;                                                               
                                                                                
              /* MC47 + C87 AND MC48 + C88 */                                   
              DO FOR ZQ_I := E_MC47_MSC_OUT_H_UNS_OLD_RE TO                     
                             E_MC48_MSC_OUT_H_OLD_RADIO_FAI;                    
                                                                                
                Q_S0040_ADD_INT_TO_INT(                                         
                        B_DTC_TYPE110(ZQ_I),                                    
                        B_MC647_TO_MC648(ZQ_J));                                
                                                                                
                Q_S0040_ADD_INT_TO_INT(                                         
                        B_DTC_TYPE28(ZQ_Z),                                     
                        B_MC647_TO_MC648(ZQ_J));                                
                ZQ_J := SUCC(ZQ_J);                                             
                ZQ_Z := SUCC(ZQ_Z);                                             
              OD;                                                               
                                                                                
              /* MC50 + C90 */                                                  
              Q_S0080_ADD_INT_TO_DPVAL(                                         
                   B_DTC_TYPE110(E_MC50_MSC_OUT_H_ATPT_NBR),                    
                   B_MC650);                                                    
                                                                                
              Q_S0080_ADD_INT_TO_DPVAL(                                         
                   B_DTC_TYPE28(E_C90_MSC_OUT_H_ATPT_NBR),                      
                   B_MC650);                                                    
                                                                                
              Q_S0040_ADD_INT_TO_INT(                                           
                   B_DTC_TYPE110(E_MC551_BSC_INC_H_UNSUCC_RES_LA),               
                   B_MC551_TO_MC91(E_MT_110_CTR_MC551));                                                     
                                                                                
              Q_S0040_ADD_INT_TO_INT(                                           
                   B_DTC_TYPE28(E_C91_BSC_INC_H_UNSUCC_RES_LA),                 
                   B_MC551_TO_MC91(E_MT_110_CTR_MC91));                                                     
                                                                                
              /* MC52 + C92 */                                                  
              Q_S0080_ADD_INT_TO_DPVAL(                                         
                   B_DTC_TYPE110(E_MC52_BSC_INC_H_SUCC),                        
                   B_MC652);                                                    
                                                                                
              Q_S0080_ADD_INT_TO_DPVAL(                                         
                   B_DTC_TYPE28(E_C92_BSC_INC_H_SUCC),                          
                   B_MC652);                                                    
                                                                                
              /* MC53 + C93 */                                                  
              Q_S0040_ADD_INT_TO_INT(                                           
                   B_DTC_TYPE110(E_MC53_BSC_INC_H_UNSUCC_SEIZ_F),               
                   B_MC653);                                                    
                                                                                
              Q_S0040_ADD_INT_TO_INT(                                           
                   B_DTC_TYPE28(E_C93_BSC_INC_H_UNSUCC_SEIZ_F),                 
                   B_MC653);                                                    
                                                                                
              ZQ_J := E_MT_110_CTR_MC655A;                                       
              ZQ_Z := E_C95_BSC_OUT_H_REQD_NBR;                                 
              DO FOR ZQ_I := E_MC55A_BSC_OUT_H_REQD_NBR TO                       
                             E_MC56_BSC_OUT_H_SUCC;                             
                                                                                
                Q_S0080_ADD_INT_TO_DPVAL(                                       
                     B_DTC_TYPE110(ZQ_I),                                       
                     B_MC655A_TO_MC656(ZQ_J));                                   
                                                                                
                Q_S0080_ADD_INT_TO_DPVAL(                                       
                     B_DTC_TYPE28(ZQ_Z),                                        
                     B_MC655A_TO_MC656(ZQ_J));                                   
                ZQ_J := SUCC(ZQ_J);                                             
                ZQ_Z := SUCC(ZQ_Z);                                             
              OD;                                                               
                                                                                
              ZQ_J := E_MT_110_CTR_MC657;                                       
              ZQ_Z := E_C97_BSC_OUT_H_UNSUCC_OLD_RE;                            
              DO FOR ZQ_I := E_MC57_BSC_OUT_H_UNSUCC_OLD_RE TO                  
                             E_MC58_BSC_OUT_H_OLD_RADIO_FAI;                    
                                                                                
                Q_S0040_ADD_INT_TO_INT(                                         
                        B_DTC_TYPE110(ZQ_I),                                    
                        B_MC657_TO_MC658(ZQ_J));                                
                                                                                
                Q_S0040_ADD_INT_TO_INT(                                         
                        B_DTC_TYPE28(ZQ_Z),                                     
                        B_MC657_TO_MC658(ZQ_J));                                
                ZQ_J := SUCC(ZQ_J);                                             
                ZQ_Z := SUCC(ZQ_Z);                                             
              OD;                                                               
                                                                                
              /* MC60 + C100 */                                                 
              Q_S0080_ADD_INT_TO_DPVAL(                                         
                   B_DTC_TYPE110(E_MC60_BSC_OUT_H_ATPT_NBR),                    
                   B_MC660);                                                    
                                                                                
              Q_S0080_ADD_INT_TO_DPVAL(                                         
                   B_DTC_TYPE28(E_C100_BSC_OUT_H_ATPT_NBR),                     
                   B_MC660);                                                    
                                                                                
              Q_S0040_ADD_INT_TO_INT(                                           
                   B_DTC_TYPE110(E_MC561_M_INTRA_H_UNSUCC_RES_LA),               
                   B_MC561_TO_MC101(E_MT_110_CTR_MC561));                                                     
                                                                                
              Q_S0040_ADD_INT_TO_INT(                                           
                   B_DTC_TYPE28(E_C101_M_INTRA_H_UNSUCC_RES_L),                 
                   B_MC561_TO_MC101(E_MT_110_CTR_MC101));                                                    
                                                                                
              /* MC62 + C102 */                                                 
              Q_S0080_ADD_INT_TO_DPVAL(                                         
                   B_DTC_TYPE110(E_MC62_M_INTRA_H_SUCC),                        
                   B_MC662);                                                    
                                                                                
              Q_S0080_ADD_INT_TO_DPVAL(                                         
                   B_DTC_TYPE28(E_C102_M_INTRA_H_SUCC),                         
                   B_MC662);                                                    
                                                                                
              /* MC63 + C103  ->  MC67 + C107*/                                 
              ZQ_J := E_MT_110_CTR_MC663;                                       
              ZQ_Z := E_C103_M_INTRA_H_UNSUCC_SEIZ_;                            
              DO FOR ZQ_I := E_MC63_M_INTRA_H_UNSUCC_SEIZ_F TO                  
                             E_MC67_M_INTRA_H_UNSUCC_OLD_RE;                    
                                                                                
                Q_S0040_ADD_INT_TO_INT(                                         
                        B_DTC_TYPE110(ZQ_I),                                    
                        B_MC663_TO_MC667(ZQ_J));                                
                                                                                
                Q_S0040_ADD_INT_TO_INT(                                         
                        B_DTC_TYPE28(ZQ_Z),                                     
                        B_MC663_TO_MC667(ZQ_J));                                
                ZQ_J := SUCC(ZQ_J);                                             
                ZQ_Z := SUCC(ZQ_Z);                                             
              OD;                                                               
                                                                                
              /* MC470 + C510  ->  MC785F + C605F */                            
              ZQ_J := E_MT_110_CTR_MC670;                                       
              ZQ_Z := E_C510_HO_ATPT_LOW_QUAL_UP;                               
              DO FOR ZQ_I := E_MC470_HO_ATPT_LOW_QUAL_UP TO                     
                             E_MC585F_HO_ATPT_HLEV_NEIG_SLWMS;                  
                IF ZQ_I = E_MC75_HNDV_REQD_RESP_MSC_INVOC
                  THEN
                  ZQ_J := SUCC(ZQ_J); 
                ELSE                                          
                  Q_S0080_ADD_INT_TO_DPVAL(                                       
                          B_DTC_TYPE110(ZQ_I),                                    
                          B_MC670_TO_MC820(ZQ_J));                                
                                                                                
                  Q_S0080_ADD_INT_TO_DPVAL(                                       
                          B_DTC_TYPE28(ZQ_Z),                                     
                          B_MC670_TO_MC820(ZQ_J));                                
                  ZQ_J := SUCC(ZQ_J);                                             
                  ZQ_Z := SUCC(ZQ_Z);        
                  IF ZQ_J = E_MT_110_CTR_MC706
                    THEN
                    ZQ_J := SUCC(ZQ_J); 
                  FI;       
                FI;                                                             
              OD;                                                               
                                                                                
              /* MC75 + C115 */                                                 
              Q_S0080_ADD_INT_TO_DPVAL(                                         
                   B_DTC_TYPE110(E_MC75_HNDV_REQD_RESP_MSC_INVOC),              
                   B_MC670_TO_MC820(E_MT_110_CTR_MC675));                       
                                                                                
              Q_S0080_ADD_INT_TO_DPVAL(                                         
                   B_DTC_TYPE28(E_C115_HNDV_REQD_RESP_MSCINVOC),                
                   B_MC670_TO_MC820(E_MT_110_CTR_MC675));                       
                                                                                
              /* MC220 + C310 */                                                 
              Q_S0080_ADD_INT_TO_DPVAL(                                         
                   B_DTC_TYPE110(E_MC220_NB_INC_EXT_TCH_HO_REQ),              
                   B_MC670_TO_MC820(E_MT_110_CTR_MC820));                       
                                                                                
              Q_S0080_ADD_INT_TO_DPVAL(                                         
                   B_DTC_TYPE28(E_C310_NB_INC_EXT_SDCCH_HO_REQ),                
                   B_MC670_TO_MC820(E_MT_110_CTR_MC820));                       
                                                                                
              /* MC221 + C311 */                                                 
              Q_S0080_ADD_INT_TO_DPVAL(                                         
                   B_DTC_TYPE110(E_MC221_NB_INC_EXT_TCH_HO_ATPT),              
                   B_MC821);                       
                                                                                
              Q_S0080_ADD_INT_TO_DPVAL(                                         
                   B_DTC_TYPE28(E_C311_NB_INC_EXT_SDCCH_HO_ATPT),                
                   B_MC821);                       
                                                                                
              /* MC230 + C330  ->  MC231 + C331 */                              
              ZQ_J := E_MT_110_CTR_MC830;                                      
              ZQ_Z := E_C330_NB_INC_INT_SDCCH_HO_REQ;                                   
              DO FOR ZQ_I := E_MC230_NB_INC_INT_TCH_HO_REQ TO                         
                             E_MC231_NB_INC_INT_TCH_HO_ATPT;                    
                                                                                
                Q_S0080_ADD_INT_TO_DPVAL(                                       
                        B_DTC_TYPE110(ZQ_I),                                    
                        B_MC830_TO_MC831(ZQ_J));                                
                                                                                
                Q_S0080_ADD_INT_TO_DPVAL(                                       
                        B_DTC_TYPE28(ZQ_Z),                                     
                        B_MC830_TO_MC831(ZQ_J));                                
                ZQ_J := SUCC(ZQ_J);                                           
                ZQ_Z := SUCC(ZQ_Z);                                             
              OD;                                                               
                                                                                
              /* MC270 + C360  ->  MC271 + C371 */                              
              ZQ_J := E_MT_110_CTR_MC870;                                      
              ZQ_Z := E_C360_NB_INTRA_SDCCH_HO_REQ;                                   
              DO FOR ZQ_I := E_MC270_NB_INTRA_TCH_HO_REQ TO                         
                             E_MC271_NB_INTRA_TCH_HO_ATPT;                    
                                                                                
                Q_S0080_ADD_INT_TO_DPVAL(                                       
                        B_DTC_TYPE110(ZQ_I),                                    
                        B_MC870_TO_MC871(ZQ_J));                                
                                                                                
                Q_S0080_ADD_INT_TO_DPVAL(                                       
                        B_DTC_TYPE28(ZQ_Z),                                     
                        B_MC870_TO_MC871(ZQ_J));                                
                ZQ_J := SUCC(ZQ_J);                                           
                ZQ_Z := SUCC(ZQ_Z);                                             
              OD;                                                               
                                                                                
              /* MC440 + C450  ->  MC445 + C454 */                              
              ZQ_J := E_MT_110_CTR_MC1040;                                      
              ZQ_Z := E_C445_HO_ATPT_TRAFFIC;                                   
              DO FOR ZQ_I := E_MC440_HO_ATPT_TRAFFIC TO                         
                             E_MC450_HO_ATPT_SHORT_DISTANCE;                    
                                                                                
                Q_S0080_ADD_INT_TO_DPVAL(                                       
                        B_DTC_TYPE110(ZQ_I),                                    
                        B_MC1040_TO_MC162(ZQ_J));                                
                                                                                
                Q_S0080_ADD_INT_TO_DPVAL(                                       
                        B_DTC_TYPE28(ZQ_Z),                                     
                        B_MC1040_TO_MC162(ZQ_J));                                
                ZQ_J := SUCC(ZQ_J);                                           
                ZQ_Z := SUCC(ZQ_Z);                                             
              OD;                                                               
                                                                                
            OD;                                                                 
          OD;                                                                   
        ELSE                                                                    
          Q_S0449_UPD_T110_2_INVALID(ZQ_CI, M_FS_DTC_TRF_LDC, FALSE);                  
        FI;                                                                     
      FI;                                                                       
    OD; /* DO WITH B_CELL_CNTRS(ZQ_NBR_CELLS) */                                
    ZQ_NBR_CELLS := ZQ_NBR_CELLS - 1;                                           
  OD; /* DO WHILE THE NUMBER OF CELLS IS GREATER THAN ZERO */                   
OD;                                                                             
                                                                                
END Q_S0580_UPDATE_CCI_TYPE110_2;                                               
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0581_UPD_CCI_TCH_TYPE110_2                       */        
/*                                                                    */        
/*     PROGRAMMER: L.DIERICK  (KDC)                                   */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 22/07/98                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*      UPDATE THE TYPE 110 BLOCK 2 COUNTERS COMING FROM THE TCHRM    */        
/*      TYPE 29                                                       */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*                      Q_S0449_UPD_T110_2_INVALID                    */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0260_UPD_TCH_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0581_UPD_CCI_TCH_TYPE110_2: PROC(ZF_LDC_BUF_PTR PTR,
                                    ZF_LDC_SEQ_NBR INT);                        
                                                                                
DCL ZQ_NBR_CELLS      INT;                                                      
DCL ZQ_DEST_CNT_IDX   RANGE(E_MT_110_CTR_MC612A:E_MT_110_CTR_MC34);             
DCL ZQ_I              M_PM_TCH_TYPE_1;
DCL ZQ_J              M_PM_TCH_TYPE_2;   
DCL ZQ_IDX            INT;                            

/* B8 P6 WITTS 0434 CHENZY BEGIN 
ZQ_NBR_CELLS := ZF_LDC_BUF_PTR ->                                               
                         CM_FY32_PM_TCH_UB_CELLS.B_FIXED.B_NBR_CELLS;           
IF ZQ_NBR_CELLS > CM_FY32_PM_MAX_CELLS_PER_TCHRM_LDC_UB OR                      
   ZQ_NBR_CELLS < 0                                                                   
THEN  */                                                                    
  /* OUT OF RANGE */                                                            
/*  ZQ_NBR_CELLS := 0;                                                            
  Q_S0010_CCDC_ERROR(M_ERC6_USER_REC,                                           
                     M_ERT0019_INC_MESS_DATA, 45, 0194);                        
FI;
B8 P6 WITTS 0434 CHENZY END */
   
                                                                          
IF ZF_LDC_SEQ_NBR /= 1 AND ZF_LDC_SEQ_NBR /= 2
THEN                                                                      
  ZQ_NBR_CELLS := ZF_LDC_BUF_PTR ->                                               
                         CM_FY32_PM_TCH_UB_CELLS.B_FIXED.B_NBR_CELLS;           
  IF ZQ_NBR_CELLS > CM_FY32_PM_MAX_CELLS_PER_TCHRM_LDC_UB OR                      
     ZQ_NBR_CELLS < 0                                                                   
  THEN                                                                      
    /* OUT OF RANGE */                                                            
  ZQ_NBR_CELLS := 0;                                                            
  Q_S0010_CCDC_ERROR(M_ERC6_USER_REC,                                           
                     M_ERT0019_INC_MESS_DATA, 45, 0194);                        
  FI;
  DO WHILE ZQ_NBR_CELLS /= 0;                                                     
    DO WITH ZF_LDC_BUF_PTR -> CM_FY32_PM_TCH_UB_CELLS;                            
      DO WITH B_CELL_CTRS(LONG_INT((ZQ_NBR_CELLS)));                                          
        IF (B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC) AND                          
           (B_CELL_IDX >  0)                                                      
          THEN                                                                      
          IF Z_STD_CELL_LIST(B_CELL_IDX)                                          
            THEN                                                                    
            DO WITH Z_T110_2_PTR->(ZM_CELL_INDEX_VALUE(B_CELL_IDX));                                   
              B_CELL_ID := B_CELL_IDX;                                            
              DO WITH B_CTRS_PT2_MT_110;                                          
                                                                                
                ZQ_DEST_CNT_IDX := E_MT_110_CTR_MC612A;                           
                DO FOR ZQ_I := E_C612A_NO_RTCH_AVAIL_NO_QE TO                     
                               E_C612D_NO_RTCH_AVAIL_QE_REJ;                      
                                                                                
                  Q_S0080_ADD_INT_TO_DPVAL(                                       
                       B_TYPE_1(ZQ_I),                                            
                       B_MC607_TO_MC612D(ZQ_DEST_CNT_IDX));                        
                                                                                
                  /* C812 IS THE SUM OF THE LOT */                                
                  Q_S0080_ADD_INT_TO_DPVAL(                                       
                       B_TYPE_1(ZQ_I),                                            
                       B_MC607_TO_MC612D(E_MT_110_CTR_MC812));                     
                  ZQ_DEST_CNT_IDX := SUCC(ZQ_DEST_CNT_IDX);                         
                OD;  
                
                Q_S0050_AVG_OR_REPL_INT(B_TYPE_2
                                (E_C28A_NBR_AVG_BUSY_TCH_CS),                 
                                B_MC250_TO_MC29A(E_MT_110_CTR_MC28A),               
                                ZS_AVG);                                          
                
                IF (B_MC250_TO_MC29A(E_MT_110_CTR_MC29A)= ZS_FFFF) 
                   OR
                   (B_TYPE_2(E_C29A_NBR_MAX_BUSY_TCH_CS)>
                    B_MC250_TO_MC29A(E_MT_110_CTR_MC29A))
                THEN 
                  Q_S0050_AVG_OR_REPL_INT(B_TYPE_2
                                (E_C29A_NBR_MAX_BUSY_TCH_CS),
                                B_MC250_TO_MC29A(E_MT_110_CTR_MC29A), 
                                ZS_REPL);
                FI;
                                                                                
                ZQ_DEST_CNT_IDX:=E_MT_110_CTR_MC320A;                             
                                                                                
                /* COPY MC320A TO MC320E */                                                 
                DO FOR ZQ_J := E_C320A_NBR_IDLE_TCH_TS_ITF1 TO                            
                               E_C320E_NBR_IDLE_TCH_TS_ITF5;                              
                                                                                
                  Q_S0050_AVG_OR_REPL_INT(B_TYPE_2(ZQ_J),                                 
                             B_MC320A_TO_MC320E(ZQ_DEST_CNT_IDX),               
                             ZS_AVG);                                        
                  /* GET THE NEXT ONE */                                                  
                  ZQ_DEST_CNT_IDX:=SUCC(ZQ_DEST_CNT_IDX);                                 
                OD;                                                                      
                                                                                
                Q_S0040_ADD_INT_TO_INT(
                     B_TYPE_2(E_C34_TOT_CHAN_BUSY_TIME),
                     B_MC34_TO_MC31(E_MT_110_CTR_MC34));

                                                                                
              OD;                                                                 
            OD;                                                                   
          ELSE                                                                    
            Q_S0449_UPD_T110_2_INVALID(B_CELL_IDX, M_FS_TCHRM_LDC,TRUE);               
          FI;                                                                     
        FI;                                                                       
      OD;                                                                         
      ZQ_NBR_CELLS := ZQ_NBR_CELLS - 1;                                           
    OD;                                                                           
  OD;  
ELSE                                                                           
  ZQ_NBR_CELLS := ZF_LDC_BUF_PTR->                                       
                          CM_FY32_TCH_UB_BSS_CELL_DLS_FIXED.B_NBR_CELLS;        
                                                                                
  DO FOR ZQ_IDX:=1 TO ZQ_NBR_CELLS;                                      
    DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCH_UB_BSS_CELL_DLS;                  
      DO WITH B_CELL_DLS_CTRS(LONG_INT((ZQ_IDX)));                                          
        IF B_CELL_IDX > 0 AND                                               
           B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC                          
          THEN                                                                
          IF Z_STD_CELL_LIST(B_CELL_IDX) 
            THEN
            DO WITH Z_T110_2_PTR->(ZM_CELL_INDEX_VALUE(B_CELL_IDX));                                   
              B_CELL_ID := B_CELL_IDX;                                            
              DO WITH B_CTRS_PT2_MT_110;                                          
                Q_S0030_ADD_BYTE_TO_INT(B_CELL_CTRS
                            (E_C250_NBR_AVAIL_TCH_TRX_TS),
                            B_MC250_TO_MC29A(E_MT_110_CTR_MC250));                
                                                                               
                Q_S0030_ADD_BYTE_TO_INT(B_CELL_CTRS
                            (E_C26_NBR_AVAIL_SDCCH),                  
                            B_MC250_TO_MC29A(E_MT_110_CTR_MC26));                
              OD;                   
            OD;                     
          FI;
        FI;
      OD;
    OD;
  OD;
FI;                         
                                                                                
END Q_S0581_UPD_CCI_TCH_TYPE110_2;                                              
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0582_UPD_CCI_TCU_TYPE110_2                       */        
/*                                                                    */        
/*     PROGRAMMER: L.DIERICK  (KDC)                                   */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 98/08/25                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*      UPDATE THE TYPE 110 BLOCK 2 COUNTERS COMING FROM THE TCHRM    */        
/*      TYPE 29                                                       */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*                      Q_S0449_UPD_T110_2_INVALID                    */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
                                                                                
Q_S0582_UPD_CCI_TCU_TYPE110_2: PROC(ZF_LDC_BUF_PTR PTR);                        
                                                                                
DCL ZQ_NBR_CELLS INT;                                                           
DCL ZQ_J         CM_TCU_TYPE_110_CELL;                                           
                                                                                
DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_STD_CTRS_AREA;  
  ZQ_NBR_CELLS := B_NBR_CELLS;
OD;

DO WHILE ZQ_NBR_CELLS /= 0;                                                     
  DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_STD_CTRS_AREA;                          
    DO WITH B_CELL_CNTRS(ZQ_NBR_CELLS);                                         
    /* COPY THE COUNTERS FOR THE CELLS IN THE LIST INTO THE                     
     * DATA STRUCTURE IN MEMORY.                                                
     */                                                                         
      IF B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC AND                            
         B_CELL_IDX > 0                                                         
      THEN                                                                      
        IF Z_STD_CELL_LIST(B_CELL_IDX)                                          
        THEN                                                                    
          DO WITH Z_T110_2_PTR->(ZM_CELL_INDEX_VALUE(B_CELL_IDX));                                   
                                                                                
            B_CELL_ID := B_CELL_IDX;                                            
            DO WITH B_CTRS_PT2_MT_110;                                          
                                                                                
              Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                (E_MC706_NB_EGSM_MS_ACCESS_EXCEPT), 
                 B_MC670_TO_MC820(E_MT_110_CTR_MC706));
                 
              Q_S0050_AVG_OR_REPL_INT(                                                
                 B_CNTRS_TYPE_110(E_MC31_NBR_MAX_BUSY_SDCCH),                               
                 B_MC34_TO_MC31(E_MT_110_CTR_MC31),                                
                 ZS_REPL);                                                       

              /* DEL FOR B8
              Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                (E_MC851_NB_IMM_ASS_REQ_EXCEPT_LU), 
                 B_MC851_TO_MC871(E_MT_110_CTR_MC851));
              */
              
              Q_S0040_ADD_INT_TO_INT(B_CNTRS_TYPE_110
                   (E_MC803_TIME_SDCCH_CONGESTION), B_MC803);

              DO FOR ZQ_J := E_MC161A_NB_DTAP_MO_NOR_ASS_SUCC TO                
                             E_MC161B_NB_DTAP_MT_NOR_ASS_SUC;                   
                                                                                
                Q_S0080_ADD_INT_TO_DPVAL(                                       
                            B_CNTRS_TYPE_110(ZQ_J),                             
                            B_MC1040_TO_MC162(E_MT_110_CTR_MC161));              
              OD;                                                               
              DO FOR ZQ_J := E_MC162A_NB_DR_DTAP_EST_PH_RLF TO                  
                             E_MC162C_NB_DR_EST_PH_REM_TRAN_F;                  
                                                                                
                Q_S0080_ADD_INT_TO_DPVAL(                                       
                            B_CNTRS_TYPE_110(ZQ_J),                             
                            B_MC1040_TO_MC162(E_MT_110_CTR_MC162));              
              OD;                                                               
            OD;                                                                 
          OD;                                                                   
                                                                                
        ELSE                                                                    
          Q_S0449_UPD_T110_2_INVALID(B_CELL_IDX, 
                                     M_FS_TCU_TRF_LDC,FALSE);             
        FI;                                                                     
      FI;                                                                       
    OD; /* WITH B_CELL_CNTRS */                                                 
  OD; /* WITH MAIN BUFFER */                                                    
  ZQ_NBR_CELLS := ZQ_NBR_CELLS - 1;                                             
OD; /* WITH ZQ_NBR_CELLS */                                                     
                                                                                
                                                                                
END Q_S0582_UPD_CCI_TCU_TYPE110_2;                                              
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0585_UPD_T28_STD_DTC                             */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 28/11/97                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION: NOTE: THE NUMBER OF SMAPLES (AND LOST) */        
/*       ARE NOT UPDATED.                                             */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*                      ZF_ACT_IDX INT,                               */        
/*                      ZF_ALL_CELLS BOOL                             */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0180_CELL_IN_SCOPE                         */        
/*                      Q_S0040_ADD_INT_TO_INT                        */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*                      Q_S0310_UPD_T28_INVALID                       */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0250_UPD_DTC_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
                                                                                
Q_S0585_UPD_T28_STD_DTC: PROC(ZF_LDC_BUF_PTR PTR,                               
                              ZF_ACT_IDX     INT,                               
                              ZF_ALL_CELLS   BOOL);                             
                                                                                
DCL ZQ_DTC_NBR_CELLS INT;                                                       
DCL ZQ_I             M_DTC_TRF_CNTRS_TYPE28;                                    
DCL ZQ_J             INT;                
                                                                                                                                                                
DO WITH ZF_LDC_BUF_PTR -> M_DTC_STD_CELL_CTRS;                                  
  DO FOR ZQ_DTC_NBR_CELLS:=1 TO B_NBR_CELLS;                                    
    DO WITH B_CELL_CNTRS(ZQ_DTC_NBR_CELLS);                                     
      IF (B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC) AND                          
         (B_CELL_IDX >  0) AND                                                  
         (ZF_ALL_CELLS OR                                                       
          Q_S0180_CELL_IN_SCOPE(ZF_ACT_IDX, B_CELL_IDX))                        
      THEN                                                                      
        /* FIND IF THE CELL IS IN THE LIST OR THIS                              
         * GET THE FIRST FREE ENTRY.                                            
         */                                                                     
        IF Z_STD_CELL_LIST(B_CELL_IDX)                                          
        THEN                                                                    
          DO WITH Z_T28_PTR->(ZM_CELL_INDEX_VALUE(B_CELL_IDX));                                      
                                                                                
            B_CELL_ID := B_CELL_IDX;                                            
            DO WITH B_HIS_CC_MT_28.B_ALL_CTRS;                                  
                                                                                
              Q_S0040_ADD_INT_TO_INT(                                           
                 B_DTC_TYPE28(E_C81_MSC_INC_H_UNSUCC_RES_LA),                   
                 B_MT_28_CTR_C81);                                              
                                                                                
              Q_S0080_ADD_INT_TO_DPVAL(                                         
                 B_DTC_TYPE28(E_C82_MSC_INC_H_SUCC),                            
                 B_MT_28_CTR_C82);                                              
                                                                                
              Q_S0040_ADD_INT_TO_INT(                                           
                 B_DTC_TYPE28(E_C83_MSC_INC_H_UNSUCC_SEIZ_F),                   
                 B_MT_28_CTR_C83);                                              
                                                                                
              Q_S0080_ADD_INT_TO_DPVAL(                                         
                 B_DTC_TYPE28(E_C85A_MSC_OUT_H_REQD_NBR),                        
                 B_MT_28_CTR_C85A);                                              
                                                                                
              Q_S0080_ADD_INT_TO_DPVAL(                                         
                 B_DTC_TYPE28(E_C86_MSC_OUT_H_SUCC),                            
                 B_MT_28_CTR_C86);                                              
                                                                                
              Q_S0040_ADD_INT_TO_INT(                                           
                 B_DTC_TYPE28(E_C87_MSC_OUT_H_UNSUCC_OLD_RE),                   
                 B_MT_28_CTR_C87);                                              
                                                                                
              Q_S0040_ADD_INT_TO_INT(                                           
                 B_DTC_TYPE28(E_C88_MSC_OUT_H_UNSUCC_RADIO),                    
                 B_MT_28_CTR_C88);                                              
                                                                                
              Q_S0080_ADD_INT_TO_DPVAL(                                         
                 B_DTC_TYPE28(E_C90_MSC_OUT_H_ATPT_NBR),                        
                 B_MT_28_CTR_C90);                                              
                                                                                
              Q_S0040_ADD_INT_TO_INT(                                           
                 B_DTC_TYPE28(E_C91_BSC_INC_H_UNSUCC_RES_LA),                   
                 B_MT_28_CTR_C91);                                              
                                                                                
              Q_S0080_ADD_INT_TO_DPVAL(                                         
                 B_DTC_TYPE28(E_C92_BSC_INC_H_SUCC),                            
                 B_MT_28_CTR_C92);                                              
                                                                                
              Q_S0040_ADD_INT_TO_INT(                                           
                 B_DTC_TYPE28(E_C93_BSC_INC_H_UNSUCC_SEIZ_F),                   
                 B_MT_28_CTR_C93);                                              
                                                                                
              Q_S0080_ADD_INT_TO_DPVAL(                                         
                 B_DTC_TYPE28(E_C95_BSC_OUT_H_REQD_NBR),                        
                 B_MT_28_CTR_C95A);                                              
                                                                                
              Q_S0080_ADD_INT_TO_DPVAL(                                         
                 B_DTC_TYPE28(E_C96_BSC_OUT_H_SUCC),                            
                 B_MT_28_CTR_C96);                                              
                                                                                
              Q_S0040_ADD_INT_TO_INT(                                           
                 B_DTC_TYPE28(E_C97_BSC_OUT_H_UNSUCC_OLD_RE),                   
                 B_MT_28_CTR_C97);                                              
                                                                                
              Q_S0040_ADD_INT_TO_INT(                                           
                 B_DTC_TYPE28(E_C98_BSC_OUT_H_OLD_RADIO_FAI),                   
                 B_MT_28_CTR_C98);                                              
                                                                                
              Q_S0080_ADD_INT_TO_DPVAL(                                         
                 B_DTC_TYPE28(E_C100_BSC_OUT_H_ATPT_NBR),                       
                 B_MT_28_CTR_C100);                                             
                                                                                
              Q_S0040_ADD_INT_TO_INT(                                           
                 B_DTC_TYPE28(E_C101_M_INTRA_H_UNSUCC_RES_L),                   
                 B_MT_28_CTR_C101);                                             
                                                                                
              Q_S0080_ADD_INT_TO_DPVAL(                                         
                 B_DTC_TYPE28(E_C102_M_INTRA_H_SUCC),                           
                 B_MT_28_CTR_C102);                                             
                                                                                
              Q_S0040_ADD_INT_TO_INT(                                           
                 B_DTC_TYPE28(E_C103_M_INTRA_H_UNSUCC_SEIZ_),                   
                 B_MT_28_CTR_C103);                                             
                                                                                
              Q_S0040_ADD_INT_TO_INT(                                           
                 B_DTC_TYPE28(E_C107_M_INTRA_H_UNSUCC_OLD_R),                   
                 B_MT_28_CTR_C107);                                             
                                                                                
              Q_S0080_ADD_INT_TO_DPVAL(                                         
                 B_DTC_TYPE28(E_C519_HO_ATPT_HLEV_NEIG_PREF_B),                 
                 B_MT_28_CTR_C519);                                             
                                                                                
            OD; /* DO WITH B_HIS_CC_MT_28.B_ALL_CTRS      */  
                              
            ZQ_J := 35 ;           
            DO WITH B_HIS_CC_MT_28;                                             
              DO FOR ZQ_I := E_C445_HO_ATPT_TRAFFIC TO                          
                             E_C454_HO_ATPT_SHORT_DISTANCE;                     
                Q_S0080_ADD_INT_TO_DPVAL(B_DTC_TYPE28(ZQ_I),                    
                                         B_FROM_C510_TO_C361(ZQ_J));
                ZQ_J := ZQ_J + 1;            
              OD;                                                               
              ZQ_J := 18;           
              DO FOR ZQ_I := E_C510_HO_ATPT_LOW_QUAL_UP TO                      
                             E_C518_HO_ATPT_LOW_POW_BUDGET;                     
                IF ZQ_I = E_C516_HO_ATPT_HIGH_LEV_INTF_UP
                  THEN
                  ZQ_J := ZQ_J + 1;
                  /* DUE TO C115 */
                FI;
                Q_S0080_ADD_INT_TO_DPVAL(B_DTC_TYPE28(ZQ_I),                    
                                         B_FROM_C510_TO_C361(ZQ_J));     
                ZQ_J := ZQ_J + 1;            
              OD;      
                                                                       
              Q_S0080_ADD_INT_TO_DPVAL(                                         
                 B_DTC_TYPE28(E_C115_HNDV_REQD_RESP_MSCINVOC),                  
                 B_FROM_C510_TO_C361(23));  
                                                            
              ZQ_J := 27;                   
              DO FOR ZQ_I := E_C605A_HO_ATPT_BAD_SACCH_MCELL TO                 
                             E_C607_HO_ATPT_HLEV_NEIG_FORC_DR;                  
                                                                                
                Q_S0080_ADD_INT_TO_DPVAL(B_DTC_TYPE28(ZQ_I),                    
                                         B_FROM_C510_TO_C361(ZQ_J)); 
                ZQ_J := ZQ_J + 1;           
              OD;  
                                                                           
              ZQ_J := 38;                    
              DO FOR ZQ_I := E_C310_NB_INC_EXT_SDCCH_HO_REQ TO                  
                             E_C361_NB_INTRA_SDCCH_HO_ATPT;                     
                                                                                
                Q_S0080_ADD_INT_TO_DPVAL(B_DTC_TYPE28(ZQ_I),                    
                                         B_FROM_C510_TO_C361(ZQ_J));
                ZQ_J := ZQ_J + 1;            
              OD;                                                               
            OD;                                                                 
                                                                                
          OD; /* DO WITH HISTORY POINTER */                                     
        ELSE                                                                    
          Q_S0310_UPD_T28_INVALID(B_CELL_IDX);                                  
        FI;                                                                     
      FI; /* CELL IN RANGE */                                                   
    OD;                                                                         
  OD;                                                                           
OD;                                                                             
END Q_S0585_UPD_T28_STD_DTC;                                                    
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0586_UPD_T29_STD_DTC                             */        
/*                                                                    */        
/*     PROGRAMMER: L. DIERICK  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 03/06/98                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION: NOTE: UPDATE OF THE TYPE 29 COUNTERS   */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*                      ZF_ACT_IDX INT,                               */        
/*                      ZF_ALL_CELLS BOOL                             */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0180_CELL_IN_SCOPE                         */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*                      Q_S0040_ADD_INT_TO_INT                        */        
/*                      Q_S0410_UPD_T29_INVALID                       */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0250_UPD_DTC_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0586_UPD_T29_STD_DTC: PROC(ZF_LDC_BUF_PTR PTR,                               
                              ZF_ACT_IDX     INT,                               
                              ZF_ALL_CELLS   BOOL);                             
                                                                                
DCL ZQ_DTC_NBR_CELLS INT;                                                       
DCL ZQ_I             M_DTC_TRF_CNTRS_TYPE29;                                    
DCL ZQ_J             INT;                                                       
                                                                                
DO WITH ZF_LDC_BUF_PTR -> M_DTC_STD_CELL_CTRS;                                  
  DO FOR ZQ_DTC_NBR_CELLS:=1 TO B_NBR_CELLS;                                    
    DO WITH B_CELL_CNTRS(ZQ_DTC_NBR_CELLS);                                     
      IF (B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC) AND                          
         (B_CELL_IDX >  0) AND                                                  
         (ZF_ALL_CELLS OR                                                       
          Q_S0180_CELL_IN_SCOPE(ZF_ACT_IDX, B_CELL_IDX))                        
      THEN                                                                      
        IF Z_STD_CELL_LIST(B_CELL_IDX)                                          
        THEN                                                                    
          DO WITH Z_T29_PTR -> (B_CELL_IDX);                                    
                                                                                
            B_CELL_ID := B_CELL_IDX;                                            
            DO WITH B_DIR_RETRY_CTRS;                                           
              DO FOR ZQ_I := E_C142A_NB_OUT_FORCED_IDR_SUCC TO                  
                             E_C142D_NB_OUT_NORM_EDR_SUCC;                      
                                                                                
                ZQ_J := 1 + INT(ZQ_I) -                                         
                        INT(E_C142A_NB_OUT_FORCED_IDR_SUCC);                    
                                                                                
                Q_S0080_ADD_INT_TO_DPVAL(B_DTC_TYPE29(ZQ_I),                    
                                         B_FROM_C142A_TO_C142D(ZQ_J));          
              OD;                                                               
              DO FOR ZQ_I := E_C143A_NB_OUT_FRCD_IDR_UNS_O_R TO                 
                             E_C143H_NB_OUT_NRM_EDR_UNS_R_F;                    
                                                                                
                ZQ_J := 5 + INT(ZQ_I) -                                         
                        INT(E_C143A_NB_OUT_FRCD_IDR_UNS_O_R);                   
                                                                                
                Q_S0040_ADD_INT_TO_INT(B_DTC_TYPE29(ZQ_I),                      
                                       B_FROM_C143A_TO_C143H(ZQ_J));            
              OD;                                                               
              DO FOR ZQ_I := E_C144A_NB_OUT_FORCED_IDR_REQD TO                  
                             E_C151_NB_INC_IDR_SUCC;                            
                                                                                
                ZQ_J := 13 + INT(ZQ_I) -                                        
                        INT(E_C144A_NB_OUT_FORCED_IDR_REQD);                    
                                                                                
                Q_S0080_ADD_INT_TO_DPVAL(B_DTC_TYPE29(ZQ_I),                    
                                         B_FROM_C144A_TO_C151(ZQ_J));           
              OD;                                                               
              Q_S0040_ADD_INT_TO_INT(                                           
                     B_DTC_TYPE29(E_C152_NB_INC_IDR_UNS_SEIZ_FAIL),             
                     B_C152);                                                   
              Q_S0080_ADD_INT_TO_DPVAL(                                         
                     B_DTC_TYPE29(E_C154_NB_INC_IDR_ATPT),                      
                     B_FROM_C153_TO_C154(24));                                  
                                                                                
                                                                                
            OD; /* DO WITH */                                                   
          OD; /* DO WITH HISTORY POINTER */                                     
        ELSE                                                                    
          Q_S0410_UPD_T29_INVALID(B_CELL_IDX, M_FS_DTC_TRF_LDC);                
        FI;                                                                     
      FI; /* CELL IN RANGE */                                                   
    OD;                                                                         
  OD;                                                                           
OD;                                                                             
                                                                                
END Q_S0586_UPD_T29_STD_DTC;                                                    
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0587_UPD_T29_STD_TCHRM                           */        
/*                                                                    */        
/*     PROGRAMMER:  L. DIERICK                                        */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/10/31                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*                      ZF_ACT_IDX INT,                               */        
/*                      ZF_ALL_CELLS BOOL                             */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0180_CELL_IN_SCOPE                         */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*                      Q_S0040_ADD_INT_TO_INT                        */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0260_UPD_TCH_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0587_UPD_T29_STD_TCHRM: PROC(ZF_LDC_BUF_PTR PTR,                             
                                ZF_ACT_IDX     INT,                             
                                ZF_ALL_CELLS   BOOL);                           
                                                                                
DCL ZQ_NBR_CELLS     INT;                                                       
                                                                                
                                                                                
ZQ_NBR_CELLS := ZF_LDC_BUF_PTR->                                                
                         CM_FY32_PM_TCH_UB_CELLS.B_FIXED.B_NBR_CELLS;           
IF ZQ_NBR_CELLS > CM_FY32_PM_MAX_CELLS_PER_TCHRM_LDC_UB OR                      
   ZQ_NBR_CELLS < 0                                                             
THEN                                                                            
  /* OUT OF RANGE */                                                            
  ZQ_NBR_CELLS := 0;                                                            
  Q_S0010_CCDC_ERROR(M_ERC6_USER_REC,                                           
                     M_ERT0019_INC_MESS_DATA,48, 0194);                         
FI;                                                                             
                                                                                
DO WITH ZF_LDC_BUF_PTR -> CM_FY32_PM_TCH_UB_CELLS;                              
  DO WHILE ZQ_NBR_CELLS /= 0;                                                   
    DO WITH B_CELL_CTRS(LONG_INT((ZQ_NBR_CELLS)));                                          
      IF (B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC) AND                          
         (B_CELL_IDX >  0) AND                                                  
         (ZF_ALL_CELLS OR                                                       
          Q_S0180_CELL_IN_SCOPE(ZF_ACT_IDX,B_CELL_IDX))                         
      THEN                                                                      
        DO WITH Z_T29_PTR->(B_CELL_IDX);                                        
          B_CELL_ID := B_CELL_IDX;                                              
          DO WITH B_DIR_RETRY_CTRS;                                             
                                                                                
            Q_S0080_ADD_INT_TO_DPVAL(                                           
                B_TYPE_29(E_C153_NBR_INC_IDR_REQD),                             
                B_ALL_CTRS.B_MT_29_CTR_C153);                                   
                                                                                
            Q_S0040_ADD_INT_TO_INT(                                             
                B_TYPE_29(E_C555_NBR_INC_IDR_PREP_FAIL_CON),
                B_C555);                                                        
          OD;                                                                   
        OD;                                                                     
      FI;                                                                       
    OD;                                                                         
    ZQ_NBR_CELLS := ZQ_NBR_CELLS - 1;                                           
  OD;                                                                           
OD;                                                                             
                                                                                
                                                                                
END Q_S0587_UPD_T29_STD_TCHRM;                                                  
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0590_UPDATE_CCI_TYPE110_4                        */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 22/11/97                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATE THE COUNTERS OF TYPE 110 BLOCK 3 BASED ON THE BUFFER  */        
/*       FROM THE TCU.                                                */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0070_ADD_INT_TO_3_INT                      */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
                                                                                
Q_S0590_UPDATE_CCI_TYPE110_4: PROC(ZF_LDC_BUF_PTR PTR);                         
                                                                                
DCL ZQ_NBR_TRX     INT;                                                         
DCL ZQ_TRX_IDX     M_TRX_IDX;                                                   
DCL ZQ_PTR         PTR;                                                         
DCL ZQ_I           INT; 

DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_STD_CTRS_AREA;                          
  ZQ_NBR_TRX := B_NBR_TRX;
OD;         
                 
DO WHILE ZQ_NBR_TRX /= 0;                                                       
  DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_STD_CTRS_AREA;                          
    ZQ_TRX_IDX := B_TRX_CNTRS(ZQ_NBR_TRX).B_TRX_IDX;                            
                                                                                
    IF ZQ_TRX_IDX > 0                          AND                              
       ZQ_TRX_IDX <= CM_FY32_MAX_TRX_PER_BSC                                    
    THEN             
    /*START: MC Counters*/
     IF (ZQ_TRX_IDX <= CM_FY32_MAX_TRX_PER_BSC/2)
     THEN
   /*END: MC Counters*/                                                           
      DO WITH Z_T110_4_PTR->(ZM_TRX_INDEX_VALUE(ZQ_TRX_IDX));                                       
        B_TRX_IDX := ZQ_TRX_IDX;                                                
        IF Z_STD_TRX_LIST(ZQ_TRX_IDX)                                           
        THEN                                                                    
          DO WITH B_TRX_CNTRS(ZQ_NBR_TRX);
            Q_S0040_ADD_INT_TO_INT(
             B_TRX_CNTRS(E_MC703_NB_TCH_NOR_ALLOC_TRX),                                            
             B_CTRS_PT4_MT_110.B_MC621_TO_MC746B
             (E_MT_110_CTR_MC703));
             
            Q_S0040_ADD_INT_TO_INT(
             B_TRX_CNTRS(E_MC717A_NB_INC_IDR_SUCC_TRX),                                            
             B_CTRS_PT4_MT_110.B_MC621_TO_MC746B
             (E_MT_110_CTR_MC717A));  
             
            Q_S0040_ADD_INT_TO_INT(
             B_TRX_CNTRS(E_MC717B_NB_INC_TCH_HO_SUCC_TRX),                                            
             B_CTRS_PT4_MT_110.B_MC621_TO_MC746B
             (E_MT_110_CTR_MC717B));
             
            Q_S0040_ADD_INT_TO_INT(
             B_TRX_CNTRS(E_MC718_NB_TCH_NOR_ASS_SUCC_TRX),                                            
             B_CTRS_PT4_MT_110.B_MC621_TO_MC746B
             (E_MT_110_CTR_MC718)); 
              
            Q_S0040_ADD_INT_TO_INT(
             B_TRX_CNTRS(E_MC736_NB_TCH_DROP_PHAS_RFL_TRX),                                            
             B_CTRS_PT4_MT_110.B_MC621_TO_MC746B
             (E_MT_110_CTR_MC736));
             
            Q_S0040_ADD_INT_TO_INT(
             B_TRX_CNTRS(E_MC739_NB_TCH_DROP_PHAS_RTL_TRX),                                            
             B_CTRS_PT4_MT_110.B_MC621_TO_MC746B
             (E_MT_110_CTR_MC739));  
                                                                  
            /* MC370, MC380, MC390, MC400 */                                    
            Q_S0070_ADD_INT_TO_3_INT(                                           
                 B_TRX_CNTRS(E_MC370A_NB_TRX_FR_ALLOC),                         
                 B_CTRS_PT4_MT_110.B_MC_370A_TO_MC400
                 (E_MT_110_CTR_MC370A));                       
                                                                                
            Q_S0070_ADD_INT_TO_3_INT(                                           
                 B_TRX_CNTRS(E_MC370B_NB_TRX_HR_ALLOC),                         
                 B_CTRS_PT4_MT_110.B_MC_370A_TO_MC400
                 (E_MT_110_CTR_MC370B));                       
                                                                                
            Q_S0070_ADD_INT_TO_3_INT(                                           
                 B_TRX_CNTRS(E_MC380A_TIME_TRX_FR_BUSY),                        
                 B_CTRS_PT4_MT_110.B_MC_370A_TO_MC400
                 (E_MT_110_CTR_MC380A));                       
                                                                                
            Q_S0070_ADD_INT_TO_3_INT(                                           
                 B_TRX_CNTRS(E_MC380B_TIME_TRX_HR_BUSY),                        
                 B_CTRS_PT4_MT_110.B_MC_370A_TO_MC400
                 (E_MT_110_CTR_MC380B));                       
                 
            Q_S0070_ADD_INT_TO_3_INT(
                 B_TRX_CNTRS(E_MC380C_TIME_TRX_GSM_FR_BUSY),
                 B_CTRS_PT4_MT_110.B_MC_370A_TO_MC400
                 (E_MT_110_CTR_MC380C));
            
            Q_S0070_ADD_INT_TO_3_INT(
                 B_TRX_CNTRS(E_MC380D_TIME_TRX_GSM_HR_BUSY),
                 B_CTRS_PT4_MT_110.B_MC_370A_TO_MC400
                 (E_MT_110_CTR_MC380D));
            
            Q_S0070_ADD_INT_TO_3_INT(
                 B_TRX_CNTRS(E_MC380E_TIME_TRX_DCS_FR_BUSY),
                 B_CTRS_PT4_MT_110.B_MC_370A_TO_MC400
                 (E_MT_110_CTR_MC380E));
            
            Q_S0070_ADD_INT_TO_3_INT(
                 B_TRX_CNTRS(E_MC380F_TIME_TRX_DCS_HR_BUSY),
                 B_CTRS_PT4_MT_110.B_MC_370A_TO_MC400
                 (E_MT_110_CTR_MC380F));
                                                                                
            Q_S0070_ADD_INT_TO_3_INT(                                           
                 B_TRX_CNTRS(E_MC390_NBR_TOT_DCCH_ACC),                         
                 B_CTRS_PT4_MT_110.B_MC_370A_TO_MC400
                 (E_MT_110_CTR_MC390));                        
                                                                                
            Q_S0070_ADD_INT_TO_3_INT(                                           
                 B_TRX_CNTRS(E_MC400_TOT_USAGE_TIME_DCCH),                      
                 B_CTRS_PT4_MT_110.B_MC_370A_TO_MC400
                 (E_MT_110_CTR_MC400));                        
                                                                                
            Q_S0070_ADD_INT_TO_3_INT(                                           
                 B_TRX_CNTRS(E_MC381_TRX_TOT_RTCH_OCCY_MULTI),                  
                 B_CTRS_PT4_MT_110.B_MC_370A_TO_MC400
                 (E_MT_110_CTR_MC381));                        
   /* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
            Q_S0080_ADD_INT_TO_DPVAL(
                  B_TRX_CNTRS(E_MC990_NB_MS_RACCH_CAPABLE),
                  B_CTRS_PT4_MT_110.B_MC990_TO_MC996
                  (E_MT_110_CTR_MC990));           
            Q_S0080_ADD_INT_TO_DPVAL(
                  B_TRX_CNTRS(E_MC991_NB_CALLS_RFACCH_ACTIV),
                  B_CTRS_PT4_MT_110.B_MC990_TO_MC996
                  (E_MT_110_CTR_MC991));
            Q_S0080_ADD_INT_TO_DPVAL(
                  B_TRX_CNTRS(E_MC992_NB_CALLS_RSACCH_ACTIV),
                  B_CTRS_PT4_MT_110.B_MC990_TO_MC996
                  (E_MT_110_CTR_MC992));
            Q_S0080_ADD_INT_TO_DPVAL(
                  B_TRX_CNTRS(E_MC993_NB_AMR_DROP_RLF_TRX),
                  B_CTRS_PT4_MT_110.B_MC990_TO_MC996
                  (E_MT_110_CTR_MC993));
            Q_S0080_ADD_INT_TO_DPVAL(
                  B_TRX_CNTRS(E_MC994_NB_AMR_DROP_RSACCH_TX),
                  B_CTRS_PT4_MT_110.B_MC990_TO_MC996
                  (E_MT_110_CTR_MC994)); 
   /* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
             OD; /* DO WITH B_TRX_CNTRS */                                         
        ELSE                                                                    
          ZQ_PTR := ->B_CTRS_PT4_MT_110;    
          DO FOR ZQ_I := 1 TO 13;
            CASE ZQ_I OF 
              (2, 8:12):
              ZQ_PTR->ZM_INT_MASK(ZQ_I) := ZS_FFFE; 
              
              ELSE
            ESAC;
          OD;
          
          DO FOR ZQ_I := 14 TO 46;                                               
            IF ZQ_I REM 3 = 1                                                   
            THEN                                                                
              ZQ_PTR->ZM_INT_MASK(ZQ_I) := ZS_FFFE;                             
            ELSE                                                                
              ZQ_PTR->ZM_INT_MASK(ZQ_I) := ZS_FFFF;                             
            FI;                                                                 
          OD;    
   /* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */          
          DO FOR ZQ_I := 47 TO 60;
            IF ZQ_I REM 2 = 0
            THEN             
              ZQ_PTR->ZM_INT_MASK(ZQ_I) := ZS_FFFE;
            ELSE                                   
              ZQ_PTR->ZM_INT_MASK(ZQ_I) := ZS_FFFF;
            FI;
          OD;  
   /* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
        FI;                                                                     
      OD; /* DO WITH HIS FILE FORMAT */
     /*START: MC Counters*/
     ELSE
     DO WITH Z_T110_4_2_PTR->(ZM_TRX_INDEX_VALUE(ZQ_TRX_IDX));                                       
        B_TRX_IDX := ZQ_TRX_IDX;                                                
        IF Z_STD_TRX_LIST(ZQ_TRX_IDX)                                           
        THEN                                                                    
          DO WITH B_TRX_CNTRS(ZQ_NBR_TRX);
            Q_S0040_ADD_INT_TO_INT(
             B_TRX_CNTRS(E_MC703_NB_TCH_NOR_ALLOC_TRX),                                            
             B_CTRS_PT4_MT_110.B_MC621_TO_MC746B
             (E_MT_110_CTR_MC703));
             
            Q_S0040_ADD_INT_TO_INT(
             B_TRX_CNTRS(E_MC717A_NB_INC_IDR_SUCC_TRX),                                            
             B_CTRS_PT4_MT_110.B_MC621_TO_MC746B
             (E_MT_110_CTR_MC717A));  
             
            Q_S0040_ADD_INT_TO_INT(
             B_TRX_CNTRS(E_MC717B_NB_INC_TCH_HO_SUCC_TRX),                                            
             B_CTRS_PT4_MT_110.B_MC621_TO_MC746B
             (E_MT_110_CTR_MC717B));
             
            Q_S0040_ADD_INT_TO_INT(
             B_TRX_CNTRS(E_MC718_NB_TCH_NOR_ASS_SUCC_TRX),                                            
             B_CTRS_PT4_MT_110.B_MC621_TO_MC746B
             (E_MT_110_CTR_MC718)); 
              
            Q_S0040_ADD_INT_TO_INT(
             B_TRX_CNTRS(E_MC736_NB_TCH_DROP_PHAS_RFL_TRX),                                            
             B_CTRS_PT4_MT_110.B_MC621_TO_MC746B
             (E_MT_110_CTR_MC736));
             
            Q_S0040_ADD_INT_TO_INT(
             B_TRX_CNTRS(E_MC739_NB_TCH_DROP_PHAS_RTL_TRX),                                            
             B_CTRS_PT4_MT_110.B_MC621_TO_MC746B
             (E_MT_110_CTR_MC739));  
                                                                  
            /* MC370, MC380, MC390, MC400 */                                    
            Q_S0070_ADD_INT_TO_3_INT(                                           
                 B_TRX_CNTRS(E_MC370A_NB_TRX_FR_ALLOC),                         
                 B_CTRS_PT4_MT_110.B_MC_370A_TO_MC400
                 (E_MT_110_CTR_MC370A));                       
                                                                                
            Q_S0070_ADD_INT_TO_3_INT(                                           
                 B_TRX_CNTRS(E_MC370B_NB_TRX_HR_ALLOC),                         
                 B_CTRS_PT4_MT_110.B_MC_370A_TO_MC400
                 (E_MT_110_CTR_MC370B));                       
                                                                                
            Q_S0070_ADD_INT_TO_3_INT(                                           
                 B_TRX_CNTRS(E_MC380A_TIME_TRX_FR_BUSY),                        
                 B_CTRS_PT4_MT_110.B_MC_370A_TO_MC400
                 (E_MT_110_CTR_MC380A));                       
                                                                                
            Q_S0070_ADD_INT_TO_3_INT(                                           
                 B_TRX_CNTRS(E_MC380B_TIME_TRX_HR_BUSY),                        
                 B_CTRS_PT4_MT_110.B_MC_370A_TO_MC400
                 (E_MT_110_CTR_MC380B));                       
                 
            Q_S0070_ADD_INT_TO_3_INT(
                 B_TRX_CNTRS(E_MC380C_TIME_TRX_GSM_FR_BUSY),
                 B_CTRS_PT4_MT_110.B_MC_370A_TO_MC400
                 (E_MT_110_CTR_MC380C));
            
            Q_S0070_ADD_INT_TO_3_INT(
                 B_TRX_CNTRS(E_MC380D_TIME_TRX_GSM_HR_BUSY),
                 B_CTRS_PT4_MT_110.B_MC_370A_TO_MC400
                 (E_MT_110_CTR_MC380D));
            
            Q_S0070_ADD_INT_TO_3_INT(
                 B_TRX_CNTRS(E_MC380E_TIME_TRX_DCS_FR_BUSY),
                 B_CTRS_PT4_MT_110.B_MC_370A_TO_MC400
                 (E_MT_110_CTR_MC380E));
            
            Q_S0070_ADD_INT_TO_3_INT(
                 B_TRX_CNTRS(E_MC380F_TIME_TRX_DCS_HR_BUSY),
                 B_CTRS_PT4_MT_110.B_MC_370A_TO_MC400
                 (E_MT_110_CTR_MC380F));
                                                                                
            Q_S0070_ADD_INT_TO_3_INT(                                           
                 B_TRX_CNTRS(E_MC390_NBR_TOT_DCCH_ACC),                         
                 B_CTRS_PT4_MT_110.B_MC_370A_TO_MC400
                 (E_MT_110_CTR_MC390));                        
                                                                                
            Q_S0070_ADD_INT_TO_3_INT(                                           
                 B_TRX_CNTRS(E_MC400_TOT_USAGE_TIME_DCCH),                      
                 B_CTRS_PT4_MT_110.B_MC_370A_TO_MC400
                 (E_MT_110_CTR_MC400));                        
                                                                                
            Q_S0070_ADD_INT_TO_3_INT(                                           
                 B_TRX_CNTRS(E_MC381_TRX_TOT_RTCH_OCCY_MULTI),                  
                 B_CTRS_PT4_MT_110.B_MC_370A_TO_MC400
                 (E_MT_110_CTR_MC381));                        
   /* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
            Q_S0080_ADD_INT_TO_DPVAL(
                  B_TRX_CNTRS(E_MC990_NB_MS_RACCH_CAPABLE),
                  B_CTRS_PT4_MT_110.B_MC990_TO_MC996
                  (E_MT_110_CTR_MC990));           
            Q_S0080_ADD_INT_TO_DPVAL(
                  B_TRX_CNTRS(E_MC991_NB_CALLS_RFACCH_ACTIV),
                  B_CTRS_PT4_MT_110.B_MC990_TO_MC996
                  (E_MT_110_CTR_MC991));
            Q_S0080_ADD_INT_TO_DPVAL(
                  B_TRX_CNTRS(E_MC992_NB_CALLS_RSACCH_ACTIV),
                  B_CTRS_PT4_MT_110.B_MC990_TO_MC996
                  (E_MT_110_CTR_MC992));
            Q_S0080_ADD_INT_TO_DPVAL(
                  B_TRX_CNTRS(E_MC993_NB_AMR_DROP_RLF_TRX),
                  B_CTRS_PT4_MT_110.B_MC990_TO_MC996
                  (E_MT_110_CTR_MC993));
            Q_S0080_ADD_INT_TO_DPVAL(
                  B_TRX_CNTRS(E_MC994_NB_AMR_DROP_RSACCH_TX),
                  B_CTRS_PT4_MT_110.B_MC990_TO_MC996
                  (E_MT_110_CTR_MC994)); 
   /* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
             OD; /* DO WITH B_TRX_CNTRS */                                         
        ELSE                                                                    
          ZQ_PTR := ->B_CTRS_PT4_MT_110;    
          DO FOR ZQ_I := 1 TO 13;
            CASE ZQ_I OF 
              (2, 8:12):
              ZQ_PTR->ZM_INT_MASK(ZQ_I) := ZS_FFFE; 
              
              ELSE
            ESAC;
          OD;
          
          DO FOR ZQ_I := 14 TO 46;                                               
            IF ZQ_I REM 3 = 1                                                   
            THEN                                                                
              ZQ_PTR->ZM_INT_MASK(ZQ_I) := ZS_FFFE;                             
            ELSE                                                                
              ZQ_PTR->ZM_INT_MASK(ZQ_I) := ZS_FFFF;                             
            FI;                                                                 
          OD;    
   /* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */          
          DO FOR ZQ_I := 47 TO 60;
            IF ZQ_I REM 2 = 0
            THEN             
              ZQ_PTR->ZM_INT_MASK(ZQ_I) := ZS_FFFE;
            ELSE                                   
              ZQ_PTR->ZM_INT_MASK(ZQ_I) := ZS_FFFF;
            FI;
          OD;  
   /* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
        FI;                                                                     
      OD; /* DO WITH HIS FILE FORMAT */
     FI;
     /*END: MC Counters*/                     
    FI;                                                                         
    ZQ_NBR_TRX := ZQ_NBR_TRX - 1;                                               
  OD;                                                                           
OD;                                                                             
END Q_S0590_UPDATE_CCI_TYPE110_4;                                               

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0595_UPD_T32_TCU_INVALID                         */        
/*                                                                    */        
/*     PROGRAMMER: CHEN ZHANGYI                                       */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 02/07/31                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 32 CELL COUNTERS VALIDITY FIELDS.           */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LCE_ID M_LCE_ID,                           */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0120_GET_CIS_FOR_TCU                       */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0595_UPD_T32_TCU_INVALID: PROC(ZF_LCE_ID M_LCE_ID);

DCL ZQ_CELL_LIST    ZM_CIS_PER_TCU,
    ZQ_IDX          RANGE(1:CM_FY32_MAX_CELLS_PER_TCU),
    ZQ_I            M_TYPE_32_CTRS;

ZQ_CELL_LIST := Q_S0120_GET_CIS_FOR_TCU(ZF_LCE_ID);

DO FOR ZQ_IDX := 1 TO CM_FY32_MAX_CELLS_PER_TCU WHILE
                               ZQ_CELL_LIST(ZQ_IDX) /= M_NULL_CELL_IDX;
  DO WITH Z_T32_PTR -> (ZQ_CELL_LIST(ZQ_IDX));
    B_CELL_ID:=ZQ_CELL_LIST(ZQ_IDX);
    DO WITH B_CTRS_CELL_MT_32;
      DO FOR ZQ_I IN M_TYPE_32_CTRS;
        B_C403A_TO_C421B(ZQ_I).B_LOW  := ZS_FFFE;
        B_C403A_TO_C421B(ZQ_I).B_HIGH := ZS_FFFF;
      OD;
    OD;
  OD;
OD;

END Q_S0595_UPD_T32_TCU_INVALID;
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0596_UPD_T32_STD_TCU                             */        
/*                                                                    */        
/*     PROGRAMMER: CHEN ZHANGYI                                       */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 02/07/31                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 32 CELL COUNTERS IN MEMORY USING THE USER   */        
/*       BUFFER RECEIVED. SCOPE IS ALL CELLS.                         */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0596_UPD_T32_STD_TCU: PROC(ZF_LDC_BUF_PTR PTR);

DCL ZQ_NBR_CELLS  INT;
DCL ZQ_J          M_TYPE_32_CTRS;
DCL ZQ_I          M_TCU_TRF_CNTRS_TYPE32;

DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_STD_CTRS_AREA;
  ZQ_NBR_CELLS := B_NBR_CELLS;
OD;
                                                                                
DO WHILE ZQ_NBR_CELLS /= 0;                                                     
  DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_STD_CTRS_AREA;                          
    DO WITH B_CELL_CNTRS(ZQ_NBR_CELLS);                                         
    /* COPY THE COUNTERS FOR THE CELLS IN THE LIST INTO THE                     
     * DATA STRUCTURE IN MEMORY.                                                
     */                                                                         
      IF (B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC) AND                          
         (B_CELL_IDX > 0)                   
      THEN                                                                      
        DO WITH Z_T32_PTR->(B_CELL_IDX);                                        
          /* NOTE THAT THERE IS DIRECT ACCESS TO MEMORY - NO                    
           * SEARCHING FOR A MATCHING CELL AS THEY ARE ASSUMED                  
           * TO BE CONTIGUOUS.                                                  
           */                                                                   
          B_CELL_ID:=B_CELL_IDX;
          DO WITH B_CTRS_CELL_MT_32;
            IF Z_STD_CELL_LIST(B_CELL_IDX)
            THEN
              DO FOR ZQ_I IN M_TCU_TRF_CNTRS_TYPE32;
                ZQ_J := M_TYPE_32_CTRS(INT(ZQ_I));

                Q_S0080_ADD_INT_TO_DPVAL(
                                  B_CNTRS_TYPE_32(ZQ_I),
                                  B_C403A_TO_C421B(ZQ_J));
              OD;
            ELSE
              DO FOR ZQ_J IN M_TYPE_32_CTRS;
                B_C403A_TO_C421B(ZQ_J).B_LOW  := ZS_FFFE;
                B_C403A_TO_C421B(ZQ_J).B_HIGH := ZS_FFFF;
              OD;
            FI;
          OD; /* WITH B_CTRS_CELL_MT_32 */
        OD; /* WITH Z_T32_PTR */                                                
      FI;                                                                       
    OD; /* WITH B_CELL_CNTRS */                                                 
  OD; /* WITH MAIN BUFFER */                                                    
  ZQ_NBR_CELLS := ZQ_NBR_CELLS - 1;                                             
OD; /* WITH ZQ_NBR_CELLS */                                                     
                                                                                
END Q_S0596_UPD_T32_STD_TCU;

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0600_UPDATE_CCI_TYPE110_3                        */        
/*                                                                    */        
/*     PROGRAMMER: CHEN ZHANGYI                                       */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 02/07/31                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*      UPDATE THE TYPE 110 BLOCK 3 COUNTERS - THEY ALL COME FROM THE */        
/*      DTC AND SO DOES NOT NEED TO BE CHECKED FOR LDCP TYPE.         */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*                      Q_S0040_ADD_INT_TO_INT                        */        
/*                      Q_S0449_UPD_T110_2_INVALID                    */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0250_UPD_DTC_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0600_UPDATE_CCI_TYPE110_3: PROC(ZF_LDC_BUF_PTR PTR);                         
                                                                                
DCL ZQ_NBR_CELLS INT,                                                           
    ZQ_CI        M_CELL_IDX;                                                    

DO WITH ZF_LDC_BUF_PTR -> M_DTC_STD_CELL_CTRS;                                
  ZQ_NBR_CELLS := B_NBR_CELLS;
OD;                     
                                                                                
DO WHILE ZQ_NBR_CELLS /= 0;                                                     
  DO WITH ZF_LDC_BUF_PTR -> M_DTC_STD_CELL_CTRS;                                
    DO WITH B_CELL_CNTRS(ZQ_NBR_CELLS);                                         
      ZQ_CI := B_CELL_IDX;                                                      
                                                                                
      IF (ZQ_CI <= CM_FY32_MAX_CELLS_PER_BSC) AND                               
         (ZQ_CI >  0)                                                           
      THEN                                                                      
        IF Z_STD_CELL_LIST(ZQ_CI)                                               
        THEN                                                                    
          DO WITH Z_T110_3_PTR->(ZM_CELL_INDEX_VALUE(ZQ_CI));                                        
            B_CELL_ID := ZQ_CI;                                                 
                                                                                
            DO WITH B_CTRS_PT3_MT_110;                                          
                                                                                
              Q_S0080_ADD_INT_TO_DPVAL(                                         
                   B_DTC_TYPE110
                   (E_MC448A_NB_TCH_HO_ATPT_26_HR2FR),
                   B_MC448A_TO_MC922D(E_MT_110_CTR_MC448A));
                                   
              Q_S0080_ADD_INT_TO_DPVAL(
                   B_DTC_TYPE110
                   (E_MC448B_NB_TCH_HO_ATPT_27_FR2HR),             
                   B_MC448A_TO_MC922D(E_MT_110_CTR_MC448B));
              
              Q_S0080_ADD_INT_TO_DPVAL(
                   B_DTC_TYPE110
                   (E_MC140A_NB_TCH_NOR_ASS_REQ),
                   B_MC448A_TO_MC922D(E_MT_110_CTR_MC140A));
              
              Q_S0080_ADD_INT_TO_DPVAL(
                   B_DTC_TYPE110
                   (E_MC449_NB_TCH_HO_ATPT_28),
                   B_MC448A_TO_MC922D(E_MT_110_CTR_MC449));

              Q_S0080_ADD_INT_TO_DPVAL(
                   B_DTC_TYPE110
                   (E_MC701A_NBR_TCH_FR_REQ),
                   B_MC448A_TO_MC922D(E_MT_110_CTR_MC701A));

              Q_S0080_ADD_INT_TO_DPVAL(
                   B_DTC_TYPE110
                   (E_MC701B_NBR_TCH_DR_REQ),
                   B_MC448A_TO_MC922D(E_MT_110_CTR_MC701B));
              
              Q_S0080_ADD_INT_TO_DPVAL(
                   B_DTC_TYPE110
                   (E_MC701C_NBR_TCH_DR_EFR_REQ),
                   B_MC448A_TO_MC922D(E_MT_110_CTR_MC701C));
              
              Q_S0080_ADD_INT_TO_DPVAL(
                   B_DTC_TYPE110
                   (E_MC701D_NBR_TCH_AMR_REQ),
                   B_MC448A_TO_MC922D(E_MT_110_CTR_MC701D));

              Q_S0080_ADD_INT_TO_DPVAL(
                   B_DTC_TYPE110
                   (E_MC701E_NBR_TCH_DATA_REQ),
                   B_MC448A_TO_MC922D(E_MT_110_CTR_MC701E));

              Q_S0080_ADD_INT_TO_DPVAL(
                   B_DTC_TYPE110
                   (E_MC901_NBR_SUSPEND_FREQ),
                   B_MC448A_TO_MC922D(E_MT_110_CTR_MC901));

              Q_S0080_ADD_INT_TO_DPVAL(
                   B_DTC_TYPE110
                   (E_MC902_NBR_SUSPEND_FAIL),
                   B_MC448A_TO_MC922D(E_MT_110_CTR_MC902));

              Q_S0080_ADD_INT_TO_DPVAL(
                   B_DTC_TYPE110
                   (E_MC903_NBR_SUSPEND_SUCC),
                   B_MC448A_TO_MC922D(E_MT_110_CTR_MC903));

              Q_S0080_ADD_INT_TO_DPVAL(
                   B_DTC_TYPE110
                   (E_MC922A_INC_EXT_3G2G_HO_REQ),
                   B_MC448A_TO_MC922D(E_MT_110_CTR_MC922A));

              Q_S0080_ADD_INT_TO_DPVAL(
                   B_DTC_TYPE110
                   (E_MC922B_INC_EXT_3G2G_HO_SUCC),
                   B_MC448A_TO_MC922D(E_MT_110_CTR_MC922B));

              Q_S0080_ADD_INT_TO_DPVAL(
                   B_DTC_TYPE110
                   (E_MC922C_INC_EXT_3G2G_HO_FA_MS_A),
                   B_MC448A_TO_MC922D(E_MT_110_CTR_MC922C));

              Q_S0080_ADD_INT_TO_DPVAL(                                           
                   B_DTC_TYPE110
                   (E_MC922D_INC_EXT_3G2G_HO_ATPT),             
                   B_MC448A_TO_MC922D(E_MT_110_CTR_MC922D));
                   
              Q_S0080_ADD_INT_TO_DPVAL(                                           
                   B_DTC_TYPE110
                   (E_MC923A_NB_LCS_REQ),             
                   B_MC804A_TO_MC02I(E_MT_110_CTR_MC923A));
                   
              Q_S0080_ADD_INT_TO_DPVAL(                                           
                   B_DTC_TYPE110
                   (E_MC923B_NB_LCS_REQ_SUCC),             
                   B_MC804A_TO_MC02I(E_MT_110_CTR_MC923B));
                   
              Q_S0080_ADD_INT_TO_DPVAL(                                           
                   B_DTC_TYPE110
                   (E_MC923C_NB_LCS_REQ_FAIL),             
                   B_MC804A_TO_MC02I(E_MT_110_CTR_MC923C));
                   
              Q_S0080_ADD_INT_TO_DPVAL(                                           
                   B_DTC_TYPE110
                   (E_MC923D_NB_LCS_ABORT),             
                   B_MC804A_TO_MC02I(E_MT_110_CTR_MC923D));
                   
              Q_S0080_ADD_INT_TO_DPVAL(                                           
                   B_DTC_TYPE110
                   (E_MC02I_NUM_IMM_ASS_SUCC_MO_LCS),             
                   B_MC804A_TO_MC02I(E_MT_110_CTR_MC02I));
                   
              Q_S0040_ADD_INT_TO_INT(                                           
                   B_DTC_TYPE110
                   (E_MC462A_OUT_INT_PLMN_TCH_HO_REQ),             
                   B_MC462A_TO_MC482(E_MT_110_CTR_MC462A));
                   
              Q_S0040_ADD_INT_TO_INT(                                           
                   B_DTC_TYPE110
                   (E_MC463A_INC_INT_PLMN_TCH_HO_REQ),             
                   B_MC462A_TO_MC482(E_MT_110_CTR_MC463A));
                   
              Q_S0040_ADD_INT_TO_INT(                                           
                   B_DTC_TYPE110
                   (E_MC463B_INC_INT_PLMN_TCH_HO_ATP),             
                   B_MC462A_TO_MC482(E_MT_110_CTR_MC463B));
              
              /* B9 CHENZY BEGIN */
              Q_S0040_ADD_INT_TO_INT(
                   B_DTC_TYPE110
                   (E_MC922E_NB_INC_TCH_3GHO_EM_REQ),
                   B_MC462A_TO_MC482(E_MT_110_CTR_MC922E));
                   
              Q_S0040_ADD_INT_TO_INT(
                   B_DTC_TYPE110
                   (E_MC922F_NB_INC_TCH_3GHO_REQ),
                   B_MC462A_TO_MC482(E_MT_110_CTR_MC922F));
                   
              Q_S0040_ADD_INT_TO_INT(
                   B_DTC_TYPE110
                   (E_MC481_NB_TCH_HO_ATPT_30_RCSZ),
                   B_MC462A_TO_MC482(E_MT_110_CTR_MC481));
              /* B9 CHENZY END */

              /* ADD BY MINAN FOR 2G 3G HO BEGIN */
              Q_S0040_ADD_INT_TO_INT(
                   B_DTC_TYPE110
                   (E_MC924B_NB_OUT_2G_3G_HO_REQ),
                   B_MC462A_TO_MC482(E_MT_110_CTR_MC924B)); 

              Q_S0040_ADD_INT_TO_INT(
                   B_DTC_TYPE110
                   (E_MC924C_NB_OUT_2G_3G_HO_SUCC),
                   B_MC462A_TO_MC482(E_MT_110_CTR_MC924C));

              Q_S0040_ADD_INT_TO_INT(
                   B_DTC_TYPE110
                   (E_MC924D_NB_OUT_2G_3G_HO_ATPT),
                   B_MC462A_TO_MC482(E_MT_110_CTR_MC924D));

              Q_S0040_ADD_INT_TO_INT(
                   B_DTC_TYPE110
                   (E_MC924E_NB_OUT_2G3G_HO_FL_NO_R),
                   B_MC462A_TO_MC482(E_MT_110_CTR_MC924E));

              Q_S0040_ADD_INT_TO_INT(
                   B_DTC_TYPE110
                   (E_MC924F_NB_OUT_2G3G_HO_FL_REV),
                   B_MC462A_TO_MC482(E_MT_110_CTR_MC924F));

              Q_S0040_ADD_INT_TO_INT(
                   B_DTC_TYPE110
                   (E_MC924G_NB_OUT_2G3G_HO_PR_FL),
                   B_MC462A_TO_MC482(E_MT_110_CTR_MC924G));
              /* ADD BY MINAN END */
          
	 /*START:LTE TO GSM HO*/
	      Q_S0080_ADD_INT_TO_DPVAL(
                   B_DTC_TYPE110
                   (E_MC929A_INC_EXT_4G2G_HO_REQ),
                   B_MC929A_TO_MC929D(E_MT_110_CTR_MC929A));

	      Q_S0080_ADD_INT_TO_DPVAL(
                   B_DTC_TYPE110
                   (E_MC929B_INC_EXT_4G2G_HO_SUCC),
                   B_MC929A_TO_MC929D(E_MT_110_CTR_MC929B));

	       Q_S0080_ADD_INT_TO_DPVAL(
                   B_DTC_TYPE110
                   (E_MC929C_INC_EXT_4G2G_HO_FA_MS_A),
                   B_MC929A_TO_MC929D(E_MT_110_CTR_MC929C));

		Q_S0080_ADD_INT_TO_DPVAL(                                           
                   B_DTC_TYPE110
                   (E_MC929D_INC_EXT_4G2G_HO_ATPT),             
                   B_MC929A_TO_MC929D(E_MT_110_CTR_MC929D));

	         Q_S0040_ADD_INT_TO_INT(
                   B_DTC_TYPE110
                   (E_MC929E_NB_INC_TCH_4GHO_EM_REQ),
                   B_MC929E_TO_MC929H(E_MT_110_CTR_MC929E));
                   
              Q_S0040_ADD_INT_TO_INT(
                   B_DTC_TYPE110
                   (E_MC929F_NB_INC_TCH_4GHO_REQ),
                   B_MC929E_TO_MC929H(E_MT_110_CTR_MC929F));
	/*END:LTE TO GSM HO*/

	

	
/* START : AUPOIP FEATURE */
              Q_S0080_ADD_INT_TO_DPVAL(                                           
                   B_DTC_TYPE110
                   (E_MC490A_NB_HO_ATPT_33_MSC_INTRA),             
                   B_MC490A_TO_MC701J(E_MT_110_CTR_MC490A));
             Q_S0080_ADD_INT_TO_DPVAL(                                           
                   B_DTC_TYPE110
                   (E_MC490B_NB_HO_ATPT_33_MSC_INTER),             
                   B_MC490A_TO_MC701J(E_MT_110_CTR_MC490B));

             Q_S0080_ADD_INT_TO_DPVAL(                                           
                   B_DTC_TYPE110
                   (E_MC701I_NB_TCH_ATDM_REQ),             
                   B_MC490A_TO_MC701J(E_MT_110_CTR_MC701I));

             Q_S0080_ADD_INT_TO_DPVAL(                                           
                   B_DTC_TYPE110
                   (E_MC701J_NB_TCH_AIP_REQ),             
                   B_MC490A_TO_MC701J(E_MT_110_CTR_MC701J));
/* END : AUPOIP FEATURE */                 
            OD;                                                                 
          OD;                                                                   
        ELSE                                                                    
          Q_S0603_UPD_T110_3_INVALID(ZQ_CI, M_FS_DTC_TRF_LDC, FALSE);                  
        FI;                                                                     
      FI;                                                                       
    OD; /* DO WITH B_CELL_CNTRS(ZQ_NBR_CELLS) */                                
    ZQ_NBR_CELLS := ZQ_NBR_CELLS - 1;                                           
  OD; /* DO WHILE THE NUMBER OF CELLS IS GREATER THAN ZERO */                   
OD;                                                                             
                                                                                
END Q_S0600_UPDATE_CCI_TYPE110_3;                      
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */                         

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0387_UPDATE_CCI_DTC_TYPE110_7                    */        
/*                                                                    */        
/*     PROGRAMMER: MALA                                               */        
/*                                                                    */        
/*     LAST MODIFIED BY:  PURNA (WIPRO)         DATE:10/11/2011       */        
/*                                                                    */        
/*     CREATION DATE:                                                 */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*      UPDATE THE TYPE 110 BLOCK 7 COUNTERS - THEY ALL COME FROM THE */        
/*      DTC AND SO DOES NOT NEED TO BE CHECKED FOR LDCP TYPE.         */        
/*      ADDED FOR B10                                                 */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                                                                    */ 
/*     CALLED FROM:                                                   */        
/*                      Q_S0250_UPD_DTC_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0387_UPDATE_CCI_DTC_TYPE110_7: PROC(ZF_LDC_BUF_PTR PTR);

DCL ZQ_NBR_CELLS INT,
    ZQ_CI        M_CELL_IDX;

DO WITH ZF_LDC_BUF_PTR -> M_DTC_STD_CELL_CTRS;
  ZQ_NBR_CELLS := B_NBR_CELLS;
OD;

DO WHILE ZQ_NBR_CELLS /= 0;
  DO WITH ZF_LDC_BUF_PTR -> M_DTC_STD_CELL_CTRS;
    DO WITH B_CELL_CNTRS(ZQ_NBR_CELLS);
      ZQ_CI := B_CELL_IDX;

      IF (ZQ_CI <= CM_FY32_MAX_CELLS_PER_BSC) AND
         (ZQ_CI >  0)
      THEN
      IF Z_STD_CELL_LIST(ZQ_CI)
      THEN
/* CR20/209493 START */
       IF (ZQ_CI <= CM_FY32_MAX_CELLS_PER_BSC/2)
       THEN
        DO WITH Z_T110_7_PTR->(ZM_CELL_INDEX_VALUE(ZQ_CI));
/* CR20/209493 END */
          B_CELL_ID := ZQ_CI;

         DO WITH B_CTRS_PT7_MT_110;
         /*BEGIN : CR20_299359-Lb Interface*/
         DO WITH Z_R_BSS_PAR2_PTR -> ZM_R_BSS_PAR2;
		IF D_EN_LB = TRUE OR D_EN_LBNMR =TRUE
		THEN
		    Q_S0080_ADD_INT_TO_DPVAL(
			B_DTC_TYPE110(E_MC965_NB_LCS_INTRA_BSC_HO),
			B_MC191_TO_MC975(E_MT_110_CTR_MC965));

		   Q_S0080_ADD_INT_TO_DPVAL(
			B_DTC_TYPE110(E_MC966_NB_LCS_INTER_BSC_HO),
			B_MC191_TO_MC975(E_MT_110_CTR_MC966));
		ELSE
			B_MC191_TO_MC975(E_MT_110_CTR_MC965).B_LOW := 0;
			B_MC191_TO_MC975(E_MT_110_CTR_MC965).B_HIGH := 0;
			B_MC191_TO_MC975(E_MT_110_CTR_MC966).B_LOW := 0;
			B_MC191_TO_MC975(E_MT_110_CTR_MC966).B_HIGH := 0;	
                FI;
	OD;
/*BEGIN : IURG CELL LEVEL COUNTERS*/
	DO WITH Z_R_BSS_PAR2_PTR -> ZM_R_BSS_PAR2;
		IF D_EN_IURG = TRUE
		THEN
		Q_S0080_ADD_INT_TO_DPVAL(
			B_DTC_TYPE110(E_MC1307_NB_EH_REQ_REC),
			B_MC191_TO_MC975(E_MT_110_CTR_MC1307));
	
		Q_S0080_ADD_INT_TO_DPVAL(
			B_DTC_TYPE110(E_MC1308_NB_EH_RESP_SENT),
			B_MC191_TO_MC975(E_MT_110_CTR_MC1308));
	
		Q_S0080_ADD_INT_TO_DPVAL(
			B_DTC_TYPE110(E_MC1309_NB_EH_FAIL_SENT),
			B_MC191_TO_MC975(E_MT_110_CTR_MC1309));
	
		ELSE
			B_MC191_TO_MC975(E_MT_110_CTR_MC1307).B_LOW := 0;
			B_MC191_TO_MC975(E_MT_110_CTR_MC1307).B_HIGH := 0;
			B_MC191_TO_MC975(E_MT_110_CTR_MC1308).B_LOW := 0;
			B_MC191_TO_MC975(E_MT_110_CTR_MC1308).B_HIGH := 0;
			B_MC191_TO_MC975(E_MT_110_CTR_MC1309).B_LOW := 0;
			B_MC191_TO_MC975(E_MT_110_CTR_MC1309).B_HIGH := 0;
		FI;
	OD;
/*END : IURG CELL LEVEL COUNTERS*/
/* CR 188510 START */
/* CR20/209493 START */
          Q_S0080_ADD_INT_TO_DPVAL(
             B_DTC_TYPE110(E_MC927A_NB_DTM_UL_TCH_ASS_ATPT),
             B_MC191_TO_MC975(E_MT_110_CTR_MC927A));

          Q_S0080_ADD_INT_TO_DPVAL(
             B_DTC_TYPE110(E_MC927B_NB_DTM_DL_TCH_ASS_ATPT),
             B_MC191_TO_MC975(E_MT_110_CTR_MC927B));

          Q_S0080_ADD_INT_TO_DPVAL(
             B_DTC_TYPE110(E_MC927C_NB_DTM_UL_PKT_ASS_ATPT),
             B_MC191_TO_MC975(E_MT_110_CTR_MC927C));


          Q_S0080_ADD_INT_TO_DPVAL(
             B_DTC_TYPE110(E_MC927D_NB_DTM_DL_PKT_ASS_ATPT),
             B_MC191_TO_MC975(E_MT_110_CTR_MC927D));

          Q_S0080_ADD_INT_TO_DPVAL(
             B_DTC_TYPE110(E_MC927E_NB_DTM_UL_EX_FAIL_RAD),
             B_MC191_TO_MC975(E_MT_110_CTR_MC927E));

          Q_S0080_ADD_INT_TO_DPVAL(
             B_DTC_TYPE110(E_MC927F_NB_DTM_DL_EX_FAIL_RAD),
             B_MC191_TO_MC975(E_MT_110_CTR_MC927F));

          Q_S0080_ADD_INT_TO_DPVAL(
              B_DTC_TYPE110(E_MC701F_NBR_TCH_FR_EFR_REQ),
              B_MC191_TO_MC975(E_MT_110_CTR_MC701F));

          Q_S0080_ADD_INT_TO_DPVAL(
              B_DTC_TYPE110(E_MC701G_NBR_TCH_NO_FR_REQ),
              B_MC191_TO_MC975(E_MT_110_CTR_MC701G));

/* START: WIPRO AMR-WB CHANGE */
          Q_S0080_ADD_INT_TO_DPVAL(
              B_DTC_TYPE110(E_MC932_NB_TCH_AMR_WB_REQ),
              B_MC191_TO_MC975(E_MT_110_CTR_MC932));

          Q_S0080_ADD_INT_TO_DPVAL(
              B_DTC_TYPE110(E_MC933_NB_NORASS_PREP_FL_PMIS),
              B_MC191_TO_MC975(E_MT_110_CTR_MC933));

          Q_S0080_ADD_INT_TO_DPVAL(
              B_DTC_TYPE110(E_MC934_NB_INCEXHO_PRP_FL_PMIS),
              B_MC191_TO_MC975(E_MT_110_CTR_MC934));
/* END: WIPRO AMR-WB CHANGE */
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
          Q_S0080_ADD_INT_TO_DPVAL(
              B_DTC_TYPE110(E_MC951_NB_TCH_A5_3_REQ),
              B_MC191_TO_MC975(E_MT_110_CTR_MC951));

          Q_S0080_ADD_INT_TO_DPVAL(
              B_DTC_TYPE110(E_MC952_NB_CIPHER_CMD_A5_3),
              B_MC191_TO_MC975(E_MT_110_CTR_MC952));

          Q_S0080_ADD_INT_TO_DPVAL(
              B_DTC_TYPE110(E_MC953_NB_SUCC_CIPH_CMD_A5_3),
              B_MC191_TO_MC975(E_MT_110_CTR_MC953));

          Q_S0080_ADD_INT_TO_DPVAL(
              B_DTC_TYPE110(E_MC954_NB_TCH_A5_3_ASS),
              B_MC191_TO_MC975(E_MT_110_CTR_MC954));

          Q_S0080_ADD_INT_TO_DPVAL(
              B_DTC_TYPE110(E_MC955_NB_TCH_A5_3_ASS_NO_TRX),
              B_MC191_TO_MC975(E_MT_110_CTR_MC955));
              
          Q_S0080_ADD_INT_TO_DPVAL(
              B_DTC_TYPE110(E_MC956_NB_ASSHOCMD_A53_NO_TRX),
              B_MC191_TO_MC975(E_MT_110_CTR_MC956));              
	  /*START :CR312407*/
	  Q_S0080_ADD_INT_TO_DPVAL(
              B_DTC_TYPE110(E_MC182A_NB_N7_CLR_REQ_EST_PHAS),
              B_MC191_TO_MC975(E_MT_110_CTR_MC182A)); 
	  /*STOP :CR312407*/
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
/* CR20/209493 END */
/* CR 188510 END */

/* CR 20/245729 START */
           Q_S0080_ADD_INT_TO_DPVAL( 
              B_DTC_TYPE110(E_MC960_NB_DISC_PS_CHRQ_CON),
              B_MC191_TO_MC975(E_MT_110_CTR_MC960));
/* CR 20/245729 END */   

         OD;
       OD;
/* CR 188510 START */
       ELSE
        DO WITH Z_T110_7_2_PTR->(ZM_CELL_INDEX_VALUE(ZQ_CI));
          B_CELL_ID := ZQ_CI;

         DO WITH B_CTRS_PT7_MT_110;
         
         /*BEGIN : CR20_299359-Lb Interface*/
         DO WITH Z_R_BSS_PAR2_PTR -> ZM_R_BSS_PAR2;
		IF D_EN_LB = TRUE OR D_EN_LBNMR =TRUE
		THEN
		    Q_S0080_ADD_INT_TO_DPVAL(
			B_DTC_TYPE110(E_MC965_NB_LCS_INTRA_BSC_HO),
			B_MC191_TO_MC975(E_MT_110_CTR_MC965));

		   Q_S0080_ADD_INT_TO_DPVAL(
			B_DTC_TYPE110(E_MC966_NB_LCS_INTER_BSC_HO),
			B_MC191_TO_MC975(E_MT_110_CTR_MC966));
        /* BEGIN FR36/304340 */
         	ELSE
			B_MC191_TO_MC975(E_MT_110_CTR_MC965).B_LOW := 0;
			B_MC191_TO_MC975(E_MT_110_CTR_MC965).B_HIGH := 0;
			B_MC191_TO_MC975(E_MT_110_CTR_MC966).B_LOW := 0;
			B_MC191_TO_MC975(E_MT_110_CTR_MC966).B_HIGH := 0;	
        /* END FR36/304340 */
		FI;
	OD;
        /*END : CR20_299359*/

/*BEGIN : IURG CELL LEVEL COUNTERS*/
	DO WITH Z_R_BSS_PAR2_PTR -> ZM_R_BSS_PAR2;
		IF D_EN_IURG = TRUE
		THEN
		Q_S0080_ADD_INT_TO_DPVAL(
			B_DTC_TYPE110(E_MC1307_NB_EH_REQ_REC),
			B_MC191_TO_MC975(E_MT_110_CTR_MC1307));
	
		Q_S0080_ADD_INT_TO_DPVAL(
			B_DTC_TYPE110(E_MC1308_NB_EH_RESP_SENT),
			B_MC191_TO_MC975(E_MT_110_CTR_MC1308));
	
		Q_S0080_ADD_INT_TO_DPVAL(
			B_DTC_TYPE110(E_MC1309_NB_EH_FAIL_SENT),
			B_MC191_TO_MC975(E_MT_110_CTR_MC1309));
	
		ELSE
			B_MC191_TO_MC975(E_MT_110_CTR_MC1307).B_LOW := 0;
			B_MC191_TO_MC975(E_MT_110_CTR_MC1307).B_HIGH := 0;
			B_MC191_TO_MC975(E_MT_110_CTR_MC1308).B_LOW := 0;
			B_MC191_TO_MC975(E_MT_110_CTR_MC1308).B_HIGH := 0;
			B_MC191_TO_MC975(E_MT_110_CTR_MC1309).B_LOW := 0;
			B_MC191_TO_MC975(E_MT_110_CTR_MC1309).B_HIGH := 0;
		FI;
	OD;
/*END : IURG CELL LEVEL COUNTERS*/
          Q_S0080_ADD_INT_TO_DPVAL(
             B_DTC_TYPE110(E_MC927A_NB_DTM_UL_TCH_ASS_ATPT),
             B_MC191_TO_MC975(E_MT_110_CTR_MC927A));

          Q_S0080_ADD_INT_TO_DPVAL(
             B_DTC_TYPE110(E_MC927B_NB_DTM_DL_TCH_ASS_ATPT),
             B_MC191_TO_MC975(E_MT_110_CTR_MC927B));

          Q_S0080_ADD_INT_TO_DPVAL(
             B_DTC_TYPE110(E_MC927C_NB_DTM_UL_PKT_ASS_ATPT),
             B_MC191_TO_MC975(E_MT_110_CTR_MC927C));

          Q_S0080_ADD_INT_TO_DPVAL(
             B_DTC_TYPE110(E_MC927D_NB_DTM_DL_PKT_ASS_ATPT),
             B_MC191_TO_MC975(E_MT_110_CTR_MC927D));

          Q_S0080_ADD_INT_TO_DPVAL(
             B_DTC_TYPE110(E_MC927E_NB_DTM_UL_EX_FAIL_RAD),
             B_MC191_TO_MC975(E_MT_110_CTR_MC927E));

          Q_S0080_ADD_INT_TO_DPVAL(
             B_DTC_TYPE110(E_MC927F_NB_DTM_DL_EX_FAIL_RAD),
             B_MC191_TO_MC975(E_MT_110_CTR_MC927F));

          Q_S0080_ADD_INT_TO_DPVAL(
              B_DTC_TYPE110(E_MC701F_NBR_TCH_FR_EFR_REQ),
              B_MC191_TO_MC975(E_MT_110_CTR_MC701F));

          Q_S0080_ADD_INT_TO_DPVAL(
              B_DTC_TYPE110(E_MC701G_NBR_TCH_NO_FR_REQ),
              B_MC191_TO_MC975(E_MT_110_CTR_MC701G));

/* START: WIPRO AMR-WB CHANGE */
          Q_S0080_ADD_INT_TO_DPVAL(
              B_DTC_TYPE110(E_MC932_NB_TCH_AMR_WB_REQ),
              B_MC191_TO_MC975(E_MT_110_CTR_MC932));

          Q_S0080_ADD_INT_TO_DPVAL(
              B_DTC_TYPE110(E_MC933_NB_NORASS_PREP_FL_PMIS),
              B_MC191_TO_MC975(E_MT_110_CTR_MC933));

          Q_S0080_ADD_INT_TO_DPVAL(
              B_DTC_TYPE110(E_MC934_NB_INCEXHO_PRP_FL_PMIS),
              B_MC191_TO_MC975(E_MT_110_CTR_MC934));
/* END: WIPRO AMR-WB CHANGE */
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
          Q_S0080_ADD_INT_TO_DPVAL(
              B_DTC_TYPE110(E_MC951_NB_TCH_A5_3_REQ),
              B_MC191_TO_MC975(E_MT_110_CTR_MC951));

          Q_S0080_ADD_INT_TO_DPVAL(
              B_DTC_TYPE110(E_MC952_NB_CIPHER_CMD_A5_3),
              B_MC191_TO_MC975(E_MT_110_CTR_MC952));

          Q_S0080_ADD_INT_TO_DPVAL(
              B_DTC_TYPE110(E_MC953_NB_SUCC_CIPH_CMD_A5_3),
              B_MC191_TO_MC975(E_MT_110_CTR_MC953));

          Q_S0080_ADD_INT_TO_DPVAL(
              B_DTC_TYPE110(E_MC954_NB_TCH_A5_3_ASS),
              B_MC191_TO_MC975(E_MT_110_CTR_MC954));

          Q_S0080_ADD_INT_TO_DPVAL(
              B_DTC_TYPE110(E_MC955_NB_TCH_A5_3_ASS_NO_TRX),
              B_MC191_TO_MC975(E_MT_110_CTR_MC955));
              
          Q_S0080_ADD_INT_TO_DPVAL(
              B_DTC_TYPE110(E_MC956_NB_ASSHOCMD_A53_NO_TRX),
              B_MC191_TO_MC975(E_MT_110_CTR_MC956));
	 /*START :CR312407*/
	  Q_S0080_ADD_INT_TO_DPVAL(
              B_DTC_TYPE110(E_MC182A_NB_N7_CLR_REQ_EST_PHAS),
              B_MC191_TO_MC975(E_MT_110_CTR_MC182A)); 
	  /*STOP :CR312407*/
 

/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */

/* CR 20/245729 START */
           Q_S0080_ADD_INT_TO_DPVAL( 
              B_DTC_TYPE110(E_MC960_NB_DISC_PS_CHRQ_CON),
              B_MC191_TO_MC975(E_MT_110_CTR_MC960));
/* CR 20/245729 END */   

         OD;
        OD;
       FI;
/* CR20/209493 END */
      ELSE
        Q_S0287_UPD_T110_7_INVALID(ZQ_CI, M_FS_DTC_TRF_LDC, FALSE);
      FI;
    FI;
   OD; /* DO WITH B_CELL_CNTRS(ZQ_NBR_CELLS) */
  ZQ_NBR_CELLS := ZQ_NBR_CELLS - 1;
 OD; /* DO WHILE THE NUMBER OF CELLS IS GREATER THAN ZERO */
OD;
END Q_S0387_UPDATE_CCI_DTC_TYPE110_7;
/* END : ADD-WIPRO-B10-MR1-CHANGE */

/*START CR36/302024 RFI4448 */
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0902_UPDATE_CCI_DTC_TYPE110_11                   */        
/*                                                                    */        
/*     PROGRAMMER: KALYANA VINEELA M                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 16/11/2010                                      */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*                                                                    */        
/*       UPDATES THE TYPE 110 BLOCK 11 COUNTERS COMING FROM DTC       */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                                                                    */        
/*                      Q_S0020_ADD_DP_VALUES                         */        
/*                      Q_S0900_UPD_T110_11_INVALID                   */        
/*                                                                    */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0250_UPD_DTC_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0902_UPDATE_CCI_DTC_TYPE110_11: PROC(ZF_LDC_BUF_PTR PTR);

DCL ZQ_NBR_CELLS INT,

ZQ_CI  M_CELL_IDX;

DO WITH ZF_LDC_BUF_PTR ->M_DTC_STD_CELL_CTRS;
  ZQ_NBR_CELLS := B_NBR_CELLS;
OD;

DO WHILE ZQ_NBR_CELLS /= 0;
  DO WITH ZF_LDC_BUF_PTR -> M_DTC_STD_CELL_CTRS;
    DO WITH B_CELL_CNTRS(ZQ_NBR_CELLS);
      ZQ_CI := B_CELL_IDX;

      IF (ZQ_CI <= CM_FY32_MAX_CELLS_PER_BSC) AND
         (ZQ_CI >  0) 
      THEN 
        IF Z_STD_CELL_LIST(ZQ_CI) 
        THEN 
           DO WITH Z_T110_11_PTR
           ->(ZM_CELL_INDEX_VALUE(LONG_INT((ZQ_CI))));
            B_CELL_ID := ZQ_CI;

            DO WITH B_CTRS_PT11_MT_110;
              
		Q_S0020_ADD_DP_VALUES(B_DTC_TYPE110_CODAC
                   (E_MC718A_NB_TCH_FR_ASS_CMP),
                   B_MC718A_TO_B_MC975D(E_MT_110_CTR_MC718A));

               Q_S0020_ADD_DP_VALUES(B_DTC_TYPE110_CODAC
                   (E_MC718B_NB_TCH_HR_ASS_CMP),
                   B_MC718A_TO_B_MC975D(E_MT_110_CTR_MC718B));

               Q_S0020_ADD_DP_VALUES(B_DTC_TYPE110_CODAC
                   (E_MC718C_NB_TCH_EFR_ASS_CMP),
                   B_MC718A_TO_B_MC975D(E_MT_110_CTR_MC718C));

               Q_S0020_ADD_DP_VALUES(B_DTC_TYPE110_CODAC
                   (E_MC718D_NB_TCH_FR_AMR_ASS_CMP),
                   B_MC718A_TO_B_MC975D(E_MT_110_CTR_MC718D));

               Q_S0020_ADD_DP_VALUES(B_DTC_TYPE110_CODAC
                   (E_MC718E_NB_TCH_HR_AMR_ASS_CMP),
                   B_MC718A_TO_B_MC975D(E_MT_110_CTR_MC718E));

                Q_S0020_ADD_DP_VALUES(B_DTC_TYPE110_CODAC
                   (E_MC718F_NB_TCH_AMRWB_ASS_CMP),
                   B_MC718A_TO_B_MC975D(E_MT_110_CTR_MC718F));

		Q_S0020_ADD_DP_VALUES(B_DTC_TYPE110_CODAC
                   (E_MC718G_NB_TCH_RFACCH_ASS_CMP),
                   B_MC718A_TO_B_MC975D(E_MT_110_CTR_MC718G));

               Q_S0020_ADD_DP_VALUES(B_DTC_TYPE110_CODAC
                   (E_MC718H_NB_TCH_RSACCH_ASS_CMP),
                   B_MC718A_TO_B_MC975D(E_MT_110_CTR_MC718H));

               Q_S0020_ADD_DP_VALUES(B_DTC_TYPE110_CODAC
                   (E_MC719E_NB_TCH_OT_HO_SU_N_AMR),
                   B_MC718A_TO_B_MC975D(E_MT_110_CTR_MC719E));

               Q_S0020_ADD_DP_VALUES(B_DTC_TYPE110_CODAC
                   (E_MC719F_NB_TCH_OT_HO_SU_A_AMR),
                   B_MC718A_TO_B_MC975D(E_MT_110_CTR_MC719F));

               Q_S0020_ADD_DP_VALUES(B_DTC_TYPE110_CODAC
                   (E_MC719G_NB_ITRA_TCH_HO_S_N_AMR),
                   B_MC718A_TO_B_MC975D(E_MT_110_CTR_MC719G));

               Q_S0020_ADD_DP_VALUES(B_DTC_TYPE110_CODAC
                   (E_MC719H_NB_ITRA_TCH_HO_S_A_AMR),
                   B_MC718A_TO_B_MC975D(E_MT_110_CTR_MC719H));

              Q_S0020_ADD_DP_VALUES(B_DTC_TYPE110_CODAC
                   (E_MC719K_NB_TCH_OUT_HO_SUCC),
                    B_MC718A_TO_B_MC975D(E_MT_110_CTR_MC719K));

               Q_S0020_ADD_DP_VALUES(B_DTC_TYPE110_CODAC
                   (E_MC719L_NB_INTRA_TCH_HO_SUCC),
                    B_MC718A_TO_B_MC975D(E_MT_110_CTR_MC719L));
   
/*START : AUPOIP FEATURE  */
               Q_S0020_ADD_DP_VALUES(B_DTC_TYPE110_CODAC
                   (E_MC718I_NB_TCH_ATDM_REP),
                   B_MC718A_TO_B_MC975D(E_MT_110_CTR_MC718I));

               Q_S0020_ADD_DP_VALUES(B_DTC_TYPE110_CODAC
                   (E_MC718J_NB_TCH_AIP_REP),
                   B_MC718A_TO_B_MC975D(E_MT_110_CTR_MC718J));

	      Q_S0080_ADD_INT_TO_DPVAL(B_DTC_TYPE110
                   (E_MC975A_NB_BSS_INT_HO_MSC_REQ),
                   B_MC718A_TO_B_MC975D(E_MT_110_CTR_MC975A));

               Q_S0080_ADD_INT_TO_DPVAL(B_DTC_TYPE110
                   (E_MC975B_NB_BSS_INT_HO_MSC_SUCC),
                   B_MC718A_TO_B_MC975D(E_MT_110_CTR_MC975B));

               Q_S0080_ADD_INT_TO_DPVAL(B_DTC_TYPE110
                   (E_MC975D_NB_BSS_INT_HO_MSC_ATPT),
                   B_MC718A_TO_B_MC975D(E_MT_110_CTR_MC975D));

/* END : AUPOIP FEATURE  */
 
            OD; /*WITH B_CTRS_PT11_MT_110*/    
           OD; /*WITH Z_T110_11_PTR*/
  	ELSE 
          Q_S0900_UPD_T110_11_INVALID(ZQ_CI, M_FS_DTC_TRF_LDC, FALSE);
        FI;
      FI;   
 
     OD;/*WITH B_CELL_CNTRS*/
     ZQ_NBR_CELLS := ZQ_NBR_CELLS - 1;
    OD;/*WITH ZF_LDC_BUF_PTR*/ 
    OD; /* DO WHILE THE NUMBER OF CELLS IS GREATER THAN ZERO */

 END Q_S0902_UPDATE_CCI_DTC_TYPE110_11;
/* START CR36/302024 RFI4448 */
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0900_UPD_T110_11_INVALID                         */        
/*                                                                    */        
/*     PROGRAMMER: KALYANA VINEELA M                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:AMITABH             DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 16/11/2010                                      */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*                                                                    */        
/*                                                                    */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                                                                    */        
/*                                                                    */        
/*                      NONE                                          */        
/*                                                                    */        
/*     CALLED FROM:                                                   */        
/*                      Q_SO447_UPD_T110_DTC_INVALID                  */        
/*                      Q_SO448_UPD_T110_TCU_INVALID                  */        
/*                      Q_S0901_UPDATE_CCI_TCU_TYPE110_11             */        
/*                      Q_S0902_UPDATE_CCI_DTC_TYPE110_11             */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/
 Q_S0900_UPD_T110_11_INVALID: PROC(ZF_CELL_IDX   M_CELL_IDX,                      
				 ZF_LDC_TYPE   M_FMM_SELECTOR,
				 ZF_TEL        BOOL);                 
				 

   DCL ZQ_I RANGE(E_MT_110_CTR_MC718A: E_MT_110_CTR_MC975D);


     IF (ZF_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC)
      THEN 
 
       DO WITH Z_T110_11_PTR
       ->(ZM_CELL_INDEX_VALUE(LONG_INT((ZF_CELL_IDX))));
       B_CELL_ID  := ZF_CELL_IDX;
        DO WITH B_CTRS_PT11_MT_110;

       CASE ZF_LDC_TYPE OF

       (M_FS_DTC_TRF_LDC) : 


	DO FOR ZQ_I := E_MT_110_CTR_MC718A TO E_MT_110_CTR_MC975D; 

               CASE (ZQ_I) OF
                 (E_MT_110_CTR_MC718A,E_MT_110_CTR_MC718B,
                  E_MT_110_CTR_MC718C,E_MT_110_CTR_MC718D,
                  E_MT_110_CTR_MC718E,E_MT_110_CTR_MC718F,
                  E_MT_110_CTR_MC718G,E_MT_110_CTR_MC718H,
                  E_MT_110_CTR_MC719E,E_MT_110_CTR_MC719F,
                  E_MT_110_CTR_MC719G,E_MT_110_CTR_MC719H,
                  E_MT_110_CTR_MC719K,E_MT_110_CTR_MC719L,
		  E_MT_110_CTR_MC718I,E_MT_110_CTR_MC718J,
		  E_MT_110_CTR_MC975A,E_MT_110_CTR_MC975B,
		  E_MT_110_CTR_MC975D): 
		/* BEGIN : FR36/305796 */
		B_MC718A_TO_B_MC975D(ZQ_I).B_HIGH:= ZS_FFFF;
		B_MC718A_TO_B_MC975D(ZQ_I).B_LOW:= ZS_FFFF;
		/* END : FR36/305796 */

	
              ELSE
           ESAC;
         OD;

       (M_FS_TCU_TRF_LDC): 


      DO FOR ZQ_I := E_MT_110_CTR_MC718A TO E_MT_110_CTR_MC975D; 
               CASE (ZQ_I) OF
                 (E_MT_110_CTR_MC719A,E_MT_110_CTR_MC719B,
                  E_MT_110_CTR_MC719C,E_MT_110_CTR_MC719D,
                  E_MT_110_CTR_MC719I,E_MT_110_CTR_MC719J,
		  E_MT_110_CTR_MC975C):
		/* BEGIN : FR36/305796 */
		B_MC718A_TO_B_MC975D(ZQ_I).B_HIGH:= ZS_FFFF;
		B_MC718A_TO_B_MC975D(ZQ_I).B_LOW:= ZS_FFFF;
		/* END : FR36/305796 */
                 

              ELSE
           ESAC;
          OD;
       ELSE
    ESAC;
  OD;
OD; 

FI;
END Q_S0900_UPD_T110_11_INVALID;
/* END CR36/302024 RFI4448 */

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0905_UPDATE_CCI_DTC_TYPE110_18                   */        
/*                                                                    */        
/*     PROGRAMMER: xuny                                               */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 28/05/2014                                      */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:           CR1238146 A-GPS              */        
/*                                                                    */        
/*       UPDATES THE TYPE 110 BLOCK 18 COUNTERS COMING FROM DTC       */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                                                                    */        
/*                      Q_S0020_ADD_DP_VALUES                         */        
/*                      Q_S0906_UPD_T110_18_INVALID                   */        
/*                                                                    */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0250_UPD_DTC_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0905_UPDATE_CCI_DTC_TYPE110_18: PROC(ZF_LDC_BUF_PTR PTR);

DCL ZQ_NBR_CELLS INT,

ZQ_CI  M_CELL_IDX;

DO WITH ZF_LDC_BUF_PTR ->M_DTC_STD_CELL_CTRS;
  ZQ_NBR_CELLS := B_NBR_CELLS;
OD;

DO WHILE ZQ_NBR_CELLS /= 0;
  DO WITH ZF_LDC_BUF_PTR -> M_DTC_STD_CELL_CTRS;
    DO WITH B_CELL_CNTRS(ZQ_NBR_CELLS);
      ZQ_CI := B_CELL_IDX;

      IF (ZQ_CI <= CM_FY32_MAX_CELLS_PER_BSC) AND
         (ZQ_CI >  0) 
      THEN 
        IF Z_STD_CELL_LIST(ZQ_CI) 
        THEN 
           DO WITH Z_T110_18_PTR
           ->(ZM_CELL_INDEX_VALUE(LONG_INT((ZQ_CI))));
            B_CELL_ID := ZQ_CI;

            DO WITH B_CTRS_PT18_MT_110;
              
		           Q_S0080_ADD_INT_TO_DPVAL(B_DTC_TYPE110
                   (E_MC923E_NB_LCS_REQ_EM_LI),
                   B_MC923E_TO_B_MC947J(E_MT_110_CTR_MC923E));

               Q_S0080_ADD_INT_TO_DPVAL(B_DTC_TYPE110
                   (E_MC923F_NB_LCS_REQ_PLMN),
                   B_MC923E_TO_B_MC947J(E_MT_110_CTR_MC923F));

               Q_S0080_ADD_INT_TO_DPVAL(B_DTC_TYPE110
                   (E_MC923G_NB_LCS_REQ_VADD),
                   B_MC923E_TO_B_MC947J(E_MT_110_CTR_MC923G));

               Q_S0080_ADD_INT_TO_DPVAL(B_DTC_TYPE110
                   (E_MC923H_NB_LCS_REQ_POS_ESTIMATE),
                   B_MC923E_TO_B_MC947J(E_MT_110_CTR_MC923H));

               Q_S0080_ADD_INT_TO_DPVAL(B_DTC_TYPE110
                   (E_MC946A_NB_LCS_COI_MS_POS_C_RX),
                   B_MC923E_TO_B_MC947J(E_MT_110_CTR_MC946A));

               Q_S0080_ADD_INT_TO_DPVAL(B_DTC_TYPE110
                   (E_MC946B_NB_LCS_COI_MS_POS_R_TX),
                   B_MC923E_TO_B_MC947J(E_MT_110_CTR_MC946B));

		           Q_S0080_ADD_INT_TO_DPVAL(B_DTC_TYPE110
                   (E_MC946C_NB_LCS_COI_ABORT_TX),
                   B_MC923E_TO_B_MC947J(E_MT_110_CTR_MC946C));

               Q_S0080_ADD_INT_TO_DPVAL(B_DTC_TYPE110
                   (E_MC946D_NB_LCS_COI_REJECT_TX),
                   B_MC923E_TO_B_MC947J(E_MT_110_CTR_MC946D));

               Q_S0080_ADD_INT_TO_DPVAL(B_DTC_TYPE110
                   (E_MC946E_NB_LCS_LOC_ABORT_TO_TX),
                   B_MC923E_TO_B_MC947J(E_MT_110_CTR_MC946E));

               Q_S0080_ADD_INT_TO_DPVAL(B_DTC_TYPE110
                   (E_MC946F_NB_LCS_INTR_INTRA_HO_TX),
                   B_MC923E_TO_B_MC947J(E_MT_110_CTR_MC946F));

               Q_S0080_ADD_INT_TO_DPVAL(B_DTC_TYPE110
                   (E_MC946G_NB_LCS_INTR_INTER_HO_TX),
                   B_MC923E_TO_B_MC947J(E_MT_110_CTR_MC946G));

               Q_S0080_ADD_INT_TO_DPVAL(B_DTC_TYPE110
                   (E_MC946H_NB_LCS_TA_REQUEST_RX),
                   B_MC923E_TO_B_MC947J(E_MT_110_CTR_MC946H));             
 
            OD; /*WITH B_CTRS_PT11_MT_110*/    
           OD; /*WITH Z_T110_18_PTR*/
  	    ELSE 
          Q_S0906_UPD_T110_18_INVALID(ZQ_CI, M_FS_DTC_TRF_LDC, FALSE);
        FI;
      FI;   
 
     OD;/*WITH B_CELL_CNTRS*/
     ZQ_NBR_CELLS := ZQ_NBR_CELLS - 1;
    OD;/*WITH ZF_LDC_BUF_PTR*/ 
    OD; /* DO WHILE THE NUMBER OF CELLS IS GREATER THAN ZERO */

 END Q_S0905_UPDATE_CCI_DTC_TYPE110_18;
 
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0906_UPD_T110_18_INVALID                         */        
/*                                                                    */        
/*     PROGRAMMER: xuny                                               */        
/*                                                                    */        
/*                                                                    */        
/*     CREATION DATE: 16/11/2010                                      */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                                                                    */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                                                                    */        
/*                                                                    */        
/*                      NONE                                          */        
/*                                                                    */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0447_UPD_T110_DTC_INVALID                  */        
/*                      Q_S0905_UPDATE_CCI_DTC_TYPE110_18             */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/
 Q_S0906_UPD_T110_18_INVALID: PROC(ZF_CELL_IDX   M_CELL_IDX,                      
				 ZF_LDC_TYPE   M_FMM_SELECTOR,
				 ZF_TEL        BOOL);                 
				 

   DCL ZQ_I RANGE(E_MT_110_CTR_MC923E : E_MT_110_CTR_MC947J);

     IF (ZF_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC) AND
        (ZF_CELL_IDX >  0)        
      THEN 
       DO WITH Z_T110_18_PTR
       ->(ZM_CELL_INDEX_VALUE(LONG_INT((ZF_CELL_IDX))));
        B_CELL_ID  := ZF_CELL_IDX;      
        DO WITH B_CTRS_PT18_MT_110;
         CASE ZF_LDC_TYPE OF

         (M_FS_DTC_TRF_LDC) :

	        DO FOR ZQ_I := E_MT_110_CTR_MC923E TO E_MT_110_CTR_MC947J;
               CASE (ZQ_I) OF
                 (E_MT_110_CTR_MC923E,E_MT_110_CTR_MC923F,
                  E_MT_110_CTR_MC923G,E_MT_110_CTR_MC923H,
                  E_MT_110_CTR_MC946A,E_MT_110_CTR_MC946B,
                  E_MT_110_CTR_MC946C,E_MT_110_CTR_MC946D,
                  E_MT_110_CTR_MC946E,E_MT_110_CTR_MC946F,
                  E_MT_110_CTR_MC946G,E_MT_110_CTR_MC946H,
                  E_MT_110_CTR_MC947A,E_MT_110_CTR_MC947B,
                  E_MT_110_CTR_MC947C,E_MT_110_CTR_MC947D,
                  E_MT_110_CTR_MC947E,E_MT_110_CTR_MC947F,
                  E_MT_110_CTR_MC947G,E_MT_110_CTR_MC947H,
                  E_MT_110_CTR_MC947I,E_MT_110_CTR_MC947J
                 ): 
	
		             B_MC923E_TO_B_MC947J(ZQ_I).B_HIGH:= ZS_FFFF;
		             B_MC923E_TO_B_MC947J(ZQ_I).B_LOW:= ZS_FFFE;
	
               ELSE
               ESAC;
             OD;            
         ELSE
         ESAC;
         OD;
       OD;
      FI;

END Q_S0906_UPD_T110_18_INVALID;

/* START CR20/313054 */
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0904_UPD_T110_13_INVALID                         */        
/*                                                                    */        
/*     PROGRAMMER: BALA                                               */        
/*                                                                    */        
/*                LAST MODIFIED BY:AMITABH             DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 24/11/2011                                      */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*                                                                    */        
/*                                                                    */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                                                                    */        
/*                                                                    */        
/*                      NONE                                          */        
/*                                                                    */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0903_UPDATE_CCI_TCU_TYPE110_13             */        
/*                                                                    */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/
 Q_S0904_UPD_T110_13_INVALID: PROC(ZF_CELL_IDX   M_CELL_IDX,                      
				 ZF_LDC_TYPE   M_FMM_SELECTOR,
				 ZF_TEL        BOOL);                 
				 

   DCL ZQ_I RANGE(E_MT_110_CTR_MC1520: E_MT_110_CTR_MC1531);
    IF (ZF_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC)
    THEN        
	   DO WITH Z_T110_13_PTR
       ->(ZM_CELL_INDEX_VALUE_INT(ZF_CELL_IDX)); 	   
        B_CELL_ID  := ZF_CELL_IDX;
        DO WITH B_CTRS_PT13_MT_110;
         CASE ZF_LDC_TYPE OF       

          (M_FS_TCU_TRF_LDC): 

            DO FOR ZQ_I := E_MT_110_CTR_MC1520 TO E_MT_110_CTR_MC1530; 
                /*BEGIN: DCTPD00633131.01*/
		/*CASE (ZQ_I) OF
                 (E_MT_110_CTR_MC1520,E_MT_110_CTR_MC1521,
                  E_MT_110_CTR_MC1522,E_MT_110_CTR_MC1523,
                  E_MT_110_CTR_MC1524,E_MT_110_CTR_MC1525
		          ):*/
                /*END: DCTPD00633131.01*/
	
	            B_MC1520_TO_MC1539(ZQ_I).B_HIGH:= ZS_FFFF;
			/*START: DCTPD000646615 BEGIN CHANGE .........                 			
		        B_MC1520_TO_MC1539(ZQ_I).B_LOW:= ZS_FFFF;
            ....: CHANGE TO...............................*/
                B_MC1520_TO_MC1539(ZQ_I).B_LOW:= ZS_FFFE;
            /*END : DCTPD000646615 END CHANGE.............*/				

		/*BEGIN: DCTPD00633131.01*/
		/*END
                  ESAC;*/
		/*END: DCTPD00633131.01*/
            OD;
	/*BEGIN CR 889255 */ 
	(M_FS_TCHRM_LDC):
		CASE (ZQ_I) OF

         	   ( E_MT_110_CTR_MC1531):
	 	B_MC1520_TO_MC1539(ZQ_I).B_HIGH := ZS_FFFF;
		B_MC1520_TO_MC1539(ZQ_I).B_LOW := ZS_FFFE;
                ELSE
	    	ESAC;
       /* END CR 889255 */
          ELSE
         ESAC;
    OD;
  OD; 
FI;
END Q_S0904_UPD_T110_13_INVALID;




/* END CR20/313054 */

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0601_UPD_CCI_TCH_TYPE110_3                       */        
/*                                                                    */        
/*     PROGRAMMER: L.DIERICK  (KDC)                                   */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 22/07/98                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*      UPDATE THE TYPE 110 BLOCK 3 COUNTERS COMING FROM THE TCHRM    */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*                      Q_S0603_UPD_T110_3_INVALID                    */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0260_UPD_TCH_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0601_UPD_CCI_TCH_TYPE110_3: PROC(ZF_LDC_BUF_PTR PTR,
                                    ZF_LDC_SEQ_NBR INT);

DCL ZQ_NBR_CELLS      INT;
DCL ZQ_IDX            INT;

IF ZF_LDC_SEQ_NBR /= 1 AND ZF_LDC_SEQ_NBR /= 2
THEN
  ZQ_NBR_CELLS := ZF_LDC_BUF_PTR ->
                         CM_FY32_PM_TCH_UB_CELLS.B_FIXED.B_NBR_CELLS;
  IF ZQ_NBR_CELLS > CM_FY32_PM_MAX_CELLS_PER_TCHRM_LDC_UB OR
     ZQ_NBR_CELLS < 0 
  THEN
    /* OUT OF RANGE */
    ZQ_NBR_CELLS := 0;
    Q_S0010_CCDC_ERROR(M_ERC6_USER_REC,
                     M_ERT0019_INC_MESS_DATA, 45, 0194);
  FI;
  DO WHILE ZQ_NBR_CELLS /= 0;
    DO WITH ZF_LDC_BUF_PTR -> CM_FY32_PM_TCH_UB_CELLS;
      DO WITH B_CELL_CTRS(LONG_INT((ZQ_NBR_CELLS)));
        IF (B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC) AND
           (B_CELL_IDX >  0)
          THEN
          IF Z_STD_CELL_LIST(B_CELL_IDX)
            THEN
            DO WITH Z_T110_3_PTR->(ZM_CELL_INDEX_VALUE(B_CELL_IDX));
              B_CELL_ID := B_CELL_IDX;
              DO WITH B_CTRS_PT3_MT_110;
              
                Q_S0080_ADD_INT_TO_DPVAL(
                     B_TYPE_110(E_MC460A_NB_TCH_HO_ALLOC_EMER_PR),
                     B_MC448A_TO_MC922D(E_MT_110_CTR_MC460A));

                Q_S0050_AVG_OR_REPL_INT(
                     B_TYPE_110(E_MC801A_AV_NB_BUSY_DYN_TCH),
                     B_MC800_TO_MC802B(E_MT_110_CTR_MC801A),
                     ZS_AVG);

                IF (B_MC800_TO_MC802B(E_MT_110_CTR_MC801B)=ZS_FFFF)
                   OR
                   (B_TYPE_110(E_MC801B_MAX_NB_BUSY_DYN_TCH)>
                    B_MC800_TO_MC802B(E_MT_110_CTR_MC801B))
                THEN
                  Q_S0050_AVG_OR_REPL_INT(
                     B_TYPE_110(E_MC801B_MAX_NB_BUSY_DYN_TCH),
                     B_MC800_TO_MC802B(E_MT_110_CTR_MC801B),
                     ZS_REPL);
                FI;

                /* B9 CHENZY BEGIN */
                Q_S0040_ADD_INT_TO_INT(
                     B_TYPE_110(E_MC922G_NB_INC_TCH_3G_HO_REJ_HL),
                     B_MC462A_TO_MC482(E_MT_110_CTR_MC922G));

                Q_S0040_ADD_INT_TO_INT(
                     B_TYPE_110(E_MC922H_T_3G_HO_REJ_HL),
                     B_MC462A_TO_MC482(E_MT_110_CTR_MC922H));
                     
                Q_S0040_ADD_INT_TO_INT(
                     B_TYPE_110(E_MC480_NB_TCH_HO_REQ_30_RCSZ),
                     B_MC462A_TO_MC482(E_MT_110_CTR_MC480));
                /* B9 CHENZY END */
                
                /* CR 153212 BEGIN BY ZHUJ*/
                 Q_S0040_ADD_INT_TO_INT(
                     B_TYPE_110(E_MC924A_TIM_SPDCH_LIMIT_HL),
                     B_MC462A_TO_MC482(E_MT_110_CTR_MC924A));
                /* CR 153212 END*/
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
                 Q_S0040_ADD_INT_TO_INT(
                     B_TYPE_110(E_MC482_NB_TCHHOREQ_30_ABOR),
                     B_MC462A_TO_MC482(E_MT_110_CTR_MC482));
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
              		/*START:LTE TO GSM HO*/
		 Q_S0040_ADD_INT_TO_INT(
                     B_TYPE_110(E_MC929G_NB_INC_TCH_4G_HO_REJ_HL),
                     B_MC929E_TO_MC929H(E_MT_110_CTR_MC929G));

                Q_S0040_ADD_INT_TO_INT(
                     B_TYPE_110(E_MC929H_NB_INC_TCH_4G_HO_REJ_HL),
                     B_MC929E_TO_MC929H(E_MT_110_CTR_MC929H));
               /*END:LTE TO GSM HO*/
 

              OD;
            OD;
          ELSE
            Q_S0603_UPD_T110_3_INVALID(B_CELL_IDX, 
                                       M_FS_TCHRM_LDC, TRUE);
          FI;
        FI;
      OD;
      ZQ_NBR_CELLS := ZQ_NBR_CELLS - 1;
    OD;
  OD;
ELSE
  ZQ_NBR_CELLS := ZF_LDC_BUF_PTR->
                          CM_FY32_TCH_UB_BSS_CELL_DLS_FIXED.B_NBR_CELLS;

  DO FOR ZQ_IDX:=1 TO ZQ_NBR_CELLS;
    DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCH_UB_BSS_CELL_DLS;
      DO WITH B_CELL_DLS_CTRS(LONG_INT((ZQ_IDX)));
        IF B_CELL_IDX > 0 AND
           B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC
          THEN
          IF Z_STD_CELL_LIST(B_CELL_IDX)
            THEN
            DO WITH Z_T110_3_PTR->(ZM_CELL_INDEX_VALUE(B_CELL_IDX));
              B_CELL_ID := B_CELL_IDX;
              DO WITH B_CTRS_PT3_MT_110;
                Q_S0030_ADD_BYTE_TO_INT(
                    B_CELL_CTRS(E_MC800_NBR_AVAIL_DTS),
                    B_MC800_TO_MC802B(E_MT_110_CTR_MC800));
              OD;                   
            OD;                     
          FI;
        FI;
      OD;
    OD;
  OD;
FI;

END Q_S0601_UPD_CCI_TCH_TYPE110_3;

/*START : CR312407*/

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0601_UPD_CCI_TCH_TYPE110_4                       */        
/*                                                                    */        
/*     PROGRAMMER: PURNA (WIPRO)                                      */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 11/08/11                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*      UPDATE THE TYPE 110 BLOCK 4 COUNTERS COMING FROM THE TCHRM    */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0040_ADD_INT_TO_INT                        */        
/*                      Q_S0603_UPD_T110_4_INVALID                    */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0260_UPD_TCH_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0601_UPD_CCI_TCH_TYPE110_4: PROC(ZF_LDC_BUF_PTR PTR,
                                    ZF_LDC_SEQ_NBR INT);

DCL ZQ_NBR_TRX      INT;
DCL ZQ_IDX            INT;
DCL ZQ_TRX_IDX     M_TRX_IDX;

ZQ_NBR_TRX := ZF_LDC_BUF_PTR->
                          CM_FY32_PM_TCH_UB_TRX.
                          B_FIXED.B_NBR_TRX;

  DO FOR ZQ_IDX:=1 TO ZQ_NBR_TRX;
    DO WITH ZF_LDC_BUF_PTR ->CM_FY32_PM_TCH_UB_TRX;
      DO WITH B_TRX_CTRS(ZQ_IDX);
        ZQ_TRX_IDX :=  B_TRX_IDX;
       IF B_TRX_IDX > 0 AND
           B_TRX_IDX <= CM_FY32_MAX_TRX_PER_BSC
          THEN
          IF Z_STD_TRX_LIST(B_TRX_IDX)
            THEN
            DO WITH Z_T110_4_PTR->(ZM_TRX_INDEX_VALUE(ZQ_TRX_IDX));
              B_TRX_IDX := ZQ_TRX_IDX;
              DO WITH B_CTRS_PT4_MT_110;
		/*START CR20/312407 SS*/
		/*Q_S0080_ADD_INT_TO_DPVAL(
                     B_TYPE_110_1(E_MC320F_NB_IDLE_TCH_BAND1),
                     B_MC1201_TO_MC320J(E_MT_110_CTR_MC320F));
		Q_S0080_ADD_INT_TO_DPVAL(
                     B_TYPE_110_1(E_MC320G_NB_IDLE_TCH_BAND2),
                     B_MC1201_TO_MC320J(E_MT_110_CTR_MC320G)); 
		Q_S0080_ADD_INT_TO_DPVAL(
                     B_TYPE_110_1(E_MC320H_NB_IDLE_TCH_BAND3),
                     B_MC1201_TO_MC320J(E_MT_110_CTR_MC320H)); 
		Q_S0080_ADD_INT_TO_DPVAL(
                     B_TYPE_110_1(E_MC320I_NB_IDLE_TCH_BAND4),
                     B_MC1201_TO_MC320J(E_MT_110_CTR_MC320I)); 
		Q_S0080_ADD_INT_TO_DPVAL(
                     B_TYPE_110_1(E_MC320J_NB_IDLE_TCH_BAND5),
                     B_MC1201_TO_MC320J(E_MT_110_CTR_MC320J));*/
                Q_S5432_AVG_OR_REPL_LONG_INT( 
		     B_TYPE_110_1(E_MC320F_NB_IDLE_TCH_BAND1),
		     B_MC1201_TO_MC320J(E_MT_110_CTR_MC320F)
		     );
		Q_S5432_AVG_OR_REPL_LONG_INT( 
		     B_TYPE_110_1(E_MC320G_NB_IDLE_TCH_BAND2),
		     B_MC1201_TO_MC320J(E_MT_110_CTR_MC320G)
		     );
		Q_S5432_AVG_OR_REPL_LONG_INT( 
		     B_TYPE_110_1(E_MC320H_NB_IDLE_TCH_BAND3),
		     B_MC1201_TO_MC320J(E_MT_110_CTR_MC320H)
		     );
		Q_S5432_AVG_OR_REPL_LONG_INT( 
		     B_TYPE_110_1(E_MC320I_NB_IDLE_TCH_BAND4),
		     B_MC1201_TO_MC320J(E_MT_110_CTR_MC320I)
		     );
		Q_S5432_AVG_OR_REPL_LONG_INT( 
		     B_TYPE_110_1(E_MC320J_NB_IDLE_TCH_BAND5),
		     B_MC1201_TO_MC320J(E_MT_110_CTR_MC320J)
		     );
		/*END CR20/312407 SS*/
              OD;                   

            OD; 
          ELSE
		Q_S0603_UPD_T110_4_INVALID(B_TRX_IDX, 
                                       M_FS_TCHRM_LDC,TRUE);                     
          FI;
        FI;
      OD;
    OD;
  OD;

END Q_S0601_UPD_CCI_TCH_TYPE110_4;
/*AM START :CR745699*/
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0701_UPD_CCI_TCH_TYPE110_5                       */        
/*                                                                    */        
/*     PROGRAMMER: ATMARAM MORE                                       */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 10/03/2012                                      */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*      UPDATE THE TYPE 110 BLOCK 5 COUNTERS COMING FROM THE TCHRM    */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */
/*                      ZF_LDC_SEQ_NBR                                */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S5432_AVG_OR_REPL_LONG_INT                  */        
/*                      Q_S0703_UPD_T110_5_INVALID                    */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0260_UPD_TCH_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0701_UPD_CCI_TCH_TYPE110_5 : PROC(ZF_LDC_BUF_PTR PTR,
                                    ZF_LDC_SEQ_NBR INT);

DCL ZQ_NBR_OLC_CELL   INT;
DCL ZQ_IDX            INT;
DCL ZQ_RRHID_IDX     M_RRH_ID;
DCL ZQ_RRH INT;
DCL ZQ_TRX INT;
DCL ZQ_OLC_CELL_IDX M_CELL_IDX;
DCL ZQ_TRX_ID M_TRX_ID;/* DCTPD01273907 */
DCL ZQ_RRH_FOUND BOOL;

DCL ZQ_TRX_OLC INT;
DCL ZQ_FIRST_RRH_FOUND  BOOL;
/*Begin serach all RRHs of the trx*/
DCL ZQ_RRH_OLC INT; 
/* DCTPD01273907 */
DCL ZQ_OLC_FIRST_CELL INT;
DCL ZQ_OLC_LAST_CELL INT;
ZQ_OLC_FIRST_CELL := 0;
ZQ_OLC_LAST_CELL := 0;
/* DCTPD01273907 */
ZQ_RRH_FOUND := FALSE;
ZQ_FIRST_RRH_FOUND := FALSE;
/*End serach all RRHs of the trx*/
IF Z_OLC_CELL_SEQ_NBR = 0
THEN
  Z_OLC_CELL_SEQ_NBR := ZF_LDC_SEQ_NBR;
FI;  

ZQ_NBR_OLC_CELL := ZF_LDC_BUF_PTR->
                          CM_FY32_PM_TCH_UB_OLC_CELL.
                          B_FIXED.B_NBR_OLC_CELLS;
/* FIRST CELL BEGIN NUMBER */
ZQ_OLC_FIRST_CELL := (ZF_LDC_SEQ_NBR - Z_OLC_CELL_SEQ_NBR)*                      
           (CM_FY32_PM_MAX_OLC_CELL_PER_TCHRM_LDC_UB) + 1;   
ZQ_OLC_LAST_CELL :=  ZQ_OLC_FIRST_CELL + ZQ_NBR_OLC_CELL - 1;      
/*Begin modified for search cell*/
 /*IF ZQ_NBR_OLC_CELL <= 350 AND ZQ_NBR_OLC_CELL > 0
 THEN*/
IF ZQ_NBR_OLC_CELL > 0
THEN
/*END modified for search cell*/
  DO FOR ZQ_IDX:=ZQ_OLC_FIRST_CELL TO ZQ_OLC_LAST_CELL;
/* FIRST CELL BEGIN NUMBER */   
    DO WITH ZF_LDC_BUF_PTR ->CM_FY32_PM_TCH_UB_OLC_CELL;
      DO WITH B_OLC_CELL_CTRS(LONG_INT(ZQ_IDX - ZQ_OLC_FIRST_CELL + 1));
       DO WITH B_FIXED_OLC_CNTR;
/*Begin modified for search cell*/
 IF ((B_OLC_CELL_IDX <= (CM_FY32_MAX_CELLS_PER_BSC/2)) 
              AND (B_OLC_CELL_IDX > 0 ))
 THEN
/*END modified for search cell*/
        DO FOR ZQ_RRH := 1 TO B_OLC_NBR_RRH;
         DO WITH Z_T110_15_1_PTR->
                    (ZM_CELL_INDEX_VALUE(B_OLC_CELL_IDX));
          DO WITH B_OLC_RRH_CNTR_INFO(ZQ_RRH);
          DO WITH B_FIXED_RRH_CNTR;
	  ZQ_OLC_CELL_IDX := B_OLC_CELL_IDX;

          DO FOR ZQ_TRX := 1 TO B_OLC_NBR_TRX;
          /* BEGIN DCTPD01273907 */          
               DO WITH B_OLC_TRX_CNTR_INFO(ZQ_TRX); 
		 ZQ_TRX_ID := B_OLC_TRX_IDX;  
	/*Begin search all RRHs of the trx*/
	ZQ_RRH_FOUND := FALSE;
        DO FOR ZQ_RRH_OLC := 1 TO 6 WHILE NOT ZQ_RRH_FOUND;
	/*End search all RRHs of the trx*/	                     
	       DO WITH B_RRH_ARY(ZQ_RRH_OLC).B_TRX_ARY(ZQ_TRX_ID);    
	         IF (B_RRH_IDX = H'FF) OR              
                   ((B_RRH_IDX /= H'FF)  AND   
                   (B_RRH_IDX = B_OLC_RRH_IDX))   
                 THEN 
       /*Begin order SITE_TRX_ID in result file*/
                 IF (B_RRH_IDX = H'FF)
                 THEN
                 ZQ_FIRST_RRH_FOUND := TRUE; 
                 FI;  
      /*End order SITE_TRX_ID in result file*/
                    ZQ_RRH_FOUND := TRUE;                   
                    B_TRX_ID := ZQ_TRX_ID;      
		    B_CELL_ID := ZQ_OLC_CELL_IDX;         
                    B_RRH_IDX := B_OLC_RRH_IDX; 
                    
          TRACEINFO := '1TCHCELLID,TRXID,RRHID:=%d,%d,%d';
   TRC_BSC_PM1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_CCDC_SSM),
              TRACEID(NORM),
              TRACEINFO,
              LONG_INT((B_CELL_ID)),
              LONG_INT((B_TRX_ID)),
              LONG_INT((B_RRH_IDX))); 
      /*Begin order SITE_TRX_ID in result file*/ 
               IF ZQ_FIRST_RRH_FOUND =TRUE
              THEN 
               DO FOR ZQ_TRX_OLC := 1 TO M_MAX_TRX_PER_OLC; 
                    DO WITH B_RRH_ARY(ZQ_RRH_OLC).
                                      B_TRX_ARY(ZQ_TRX_OLC); 
                    B_RRH_IDX := B_OLC_RRH_IDX;
                    OD;
               OD; 
               ZQ_FIRST_RRH_FOUND := FALSE;
              FI;
      /*End order SITE_TRX_ID in result file*/ 
     
                    DO WITH B_CTRS_PT15_MT_110;  
          /* END DCTPD01273907 */ 
                  Q_S5432_AVG_OR_REPL_LONG_INT( 
		     B_TYPE_110_OLC(E_MC1605_OLC_AV_IDLE_TCH_B1_TRX),
		     B_MC1605_TO_MC1609(E_MT_110_CTR_MC1605)
		     );
		  Q_S5432_AVG_OR_REPL_LONG_INT( 
		     B_TYPE_110_OLC(E_MC1606_OLC_AV_IDLE_TCH_B2_TRX),
		     B_MC1605_TO_MC1609(E_MT_110_CTR_MC1606)
		     );
		  Q_S5432_AVG_OR_REPL_LONG_INT( 
		     B_TYPE_110_OLC(E_MC1607_OLC_AV_IDLE_TCH_B3_TRX),
		     B_MC1605_TO_MC1609(E_MT_110_CTR_MC1607)
		     );
		  Q_S5432_AVG_OR_REPL_LONG_INT( 
		     B_TYPE_110_OLC(E_MC1608_OLC_AV_IDLE_TCH_B4_TRX),
		     B_MC1605_TO_MC1609(E_MT_110_CTR_MC1608)
		     );
		  Q_S5432_AVG_OR_REPL_LONG_INT( 
		     B_TYPE_110_OLC(E_MC1609_OLC_AV_IDLE_TCH_B5_TRX),
		     B_MC1605_TO_MC1609(E_MT_110_CTR_MC1609)
		     );
                 OD;    
                 FI;               
                OD;
               OD;
              OD;
             OD;
            OD;
           OD;
           OD;
          OD;
/*Begin modified for search cell*/
/*         OD;
        OD;
       OD;
      OD;

 ELSE
  IF ZQ_NBR_OLC_CELL > 350 AND ZQ_NBR_OLC_CELL <= 700
  THEN
   DO FOR ZQ_IDX:=1 TO ZQ_NBR_OLC_CELL;
    DO WITH ZF_LDC_BUF_PTR ->CM_FY32_PM_TCH_UB_OLC_CELL;
      DO WITH B_OLC_CELL_CTRS(LONG_INT(ZQ_IDX));
       DO WITH B_FIXED_OLC_CNTR;
*/
ELSE
  IF (B_OLC_CELL_IDX > (CM_FY32_MAX_CELLS_PER_BSC/2))AND 
  (B_OLC_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC)
  THEN  
/*End modified for search cell*/
        DO FOR ZQ_RRH := 1 TO B_OLC_NBR_RRH;
         DO WITH Z_T110_15_2_PTR->
                    (ZM_CELL_INDEX_VALUE(B_OLC_CELL_IDX));

          DO WITH B_OLC_RRH_CNTR_INFO(ZQ_RRH);
           DO WITH B_FIXED_RRH_CNTR;
	    ZQ_OLC_CELL_IDX := B_OLC_CELL_IDX;

            DO FOR ZQ_TRX := 1 TO B_OLC_NBR_TRX;          

          /* BEGIN DCTPD01273907 */          
               DO WITH B_OLC_TRX_CNTR_INFO(ZQ_TRX);                             
		 ZQ_TRX_ID := B_OLC_TRX_IDX;
	/*Begin search all RRHs of the trx*/
	ZQ_RRH_FOUND := FALSE;
        DO FOR ZQ_RRH_OLC := 1 TO 6 WHILE NOT ZQ_RRH_FOUND;
	/*End search all RRHs of the trx*/                                                  
	       DO WITH B_RRH_ARY(ZQ_RRH_OLC).B_TRX_ARY(ZQ_TRX_ID);    
	         IF (B_RRH_IDX = H'FF) OR                                              
                   ((B_RRH_IDX /= H'FF)  AND                                    
                   (B_RRH_IDX = B_OLC_RRH_IDX))   
                 THEN 
       /*Begin order SITE_TRX_ID in result file*/
                 IF (B_RRH_IDX = H'FF)
                 THEN
                 ZQ_FIRST_RRH_FOUND := TRUE; 
                 FI;  
      /*End order SITE_TRX_ID in result file*/                                                       
                    ZQ_RRH_FOUND := TRUE;                   
                    B_TRX_ID := ZQ_TRX_ID;                                          
		    B_CELL_ID := ZQ_OLC_CELL_IDX;                                                 
                    B_RRH_IDX := B_OLC_RRH_IDX; 
          TRACEINFO := '2TCHCELLID,TRXID,RRHID:=%d,%d,%d';
   TRC_BSC_PM1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_CCDC_SSM),
              TRACEID(NORM),
              TRACEINFO,
              LONG_INT((B_CELL_ID)),
              LONG_INT((B_TRX_ID)),
              LONG_INT((B_RRH_IDX))); 
      /*Begin order SITE_TRX_ID in result file*/ 
              IF ZQ_FIRST_RRH_FOUND =TRUE
              THEN 
               DO FOR ZQ_TRX_OLC := 1 TO M_MAX_TRX_PER_OLC; 
                    DO WITH B_RRH_ARY(ZQ_RRH_OLC).
                                      B_TRX_ARY(ZQ_TRX_OLC); 
                    B_RRH_IDX := B_OLC_RRH_IDX;
                    OD;
               OD; 
               ZQ_FIRST_RRH_FOUND := FALSE;
              FI;
      /*End order SITE_TRX_ID in result file*/ 
/* CR740338 BEGIN*/                                                                                       
                    DO WITH B_CTRS_PT15_MT_110;  
          /* END DCTPD01273907 */ 

                  Q_S5432_AVG_OR_REPL_LONG_INT( 
		     B_TYPE_110_OLC(E_MC1605_OLC_AV_IDLE_TCH_B1_TRX),
		     B_MC1605_TO_MC1609(E_MT_110_CTR_MC1605)
		     );
                   Q_S5432_AVG_OR_REPL_LONG_INT( 
		     B_TYPE_110_OLC(E_MC1606_OLC_AV_IDLE_TCH_B2_TRX),
		     B_MC1605_TO_MC1609(E_MT_110_CTR_MC1606)
		     );
		  Q_S5432_AVG_OR_REPL_LONG_INT( 
		     B_TYPE_110_OLC(E_MC1607_OLC_AV_IDLE_TCH_B3_TRX),
		     B_MC1605_TO_MC1609(E_MT_110_CTR_MC1607)
		     );
		  Q_S5432_AVG_OR_REPL_LONG_INT( 
		     B_TYPE_110_OLC(E_MC1608_OLC_AV_IDLE_TCH_B4_TRX),
		     B_MC1605_TO_MC1609(E_MT_110_CTR_MC1608)
		     );
		  Q_S5432_AVG_OR_REPL_LONG_INT( 
		     B_TYPE_110_OLC(E_MC1609_OLC_AV_IDLE_TCH_B5_TRX),
		     B_MC1605_TO_MC1609(E_MT_110_CTR_MC1609)
		     );
                 OD;     
                 FI;              
                OD;
               OD;
              OD;
             OD;
            OD;
           OD;
          OD;
          OD;
/*Begin modified for search cell*/      
/*         OD;
        OD;
       OD;
      OD;
   ELSE 
     DO FOR ZQ_IDX:=1 TO ZQ_NBR_OLC_CELL;
      DO WITH ZF_LDC_BUF_PTR ->CM_FY32_PM_TCH_UB_OLC_CELL;
       DO WITH B_OLC_CELL_CTRS(LONG_INT(ZQ_IDX));
        DO WITH B_FIXED_OLC_CNTR;
*/

/*End modified for search cell*/
   ELSE 
         DO FOR ZQ_RRH := 1 TO B_OLC_NBR_RRH;
          Q_S0705_UPD_T110_15_OLC_CELL_INVALID(B_OLC_CELL_IDX,
                                       M_FS_TCHRM_LDC,TRUE); 
/*          Q_S0703_UPD_T110_5_INVALID(B_OLC_CELL_IDX,
                                       M_FS_TCHRM_LDC,TRUE); */
         OD;
/*Begin modified for search cell*/
/*         OD;
        OD;
       OD;
      OD;
   FI;
FI;*/
   FI;
FI;
         OD;
        OD;
       OD;
      OD;
/*End modified for search cell*/
FI;
END Q_S0701_UPD_CCI_TCH_TYPE110_5;
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0703_UPD_T110_5_INVALID                          */        
/*                                                                    */        
/*     PROGRAMMER: ATMARAM MORE                                       */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 10/03/2012                                      */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 110 TCHRM COUNTERS VALIDITY FIELDS.         */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_OLC_CELL_IDX   M_CELL_IDX                  */        
/*                      ZF_LDC_TYPE M_FMM_SELECTOR                    */
/*                      ZF_TEL            BOOL                        */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                   Q_S0701_UPD_CCI_TCH_TYPE110_5                    */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
/*Q_S0703_UPD_T110_5_INVALID : PROC(ZF_OLC_CELL_IDX   M_CELL_IDX,                      
                                  ZF_LDC_TYPE       M_FMM_SELECTOR,
                                  ZF_TEL            BOOL);                 
                                                                                
DCL ZQ_I    RANGE (E_MT_110_CTR_MC1605:E_MT_110_CTR_MC1609); 
DCL ZQ_NBR_OLC_CELL   INT;

DCL ZQ_RRH INT;
DCL ZQ_TRX INT;
DCL ZQ_OLC_PTR PTR;
DO WITH ZQ_OLC_PTR ->CM_FY32_PM_TCH_UB_OLC_CELL;
 ZQ_NBR_OLC_CELL := B_FIXED.B_NBR_OLC_CELLS;
OD;

IF ZQ_NBR_OLC_CELL < 350
THEN
 
DO WITH Z_T110_15_1_PTR -> (ZM_CELL_INDEX_VALUE(ZF_OLC_CELL_IDX));
 DO FOR ZQ_RRH := 1 TO 8 ;
  DO FOR ZQ_TRX := 1 TO 6;
   DO WITH B_RRH_ARY(ZQ_RRH);
    DO WITH B_TRX_ARY(ZQ_TRX);
     DO WITH B_CTRS_PT15_MT_110;                                                    
                                                                                
      CASE ZF_LDC_TYPE OF                                                         
                                         
       (M_FS_TCHRM_LDC):    
         IF ZF_TEL 
         THEN
          DO FOR ZQ_I := E_MT_110_CTR_MC1605 TO E_MT_110_CTR_MC1609;              
                B_MC1605_TO_MC1609(ZQ_I).B_LOW  := ZS_FFFE;
             	B_MC1605_TO_MC1609(ZQ_I).B_HIGH := ZS_FFFF;
          OD;                                                                    
         FI;   
      ELSE                                                                      
      ESAC;             
     OD;
    OD;
   OD;
  OD;
 OD;                                                        
OD;    
ELSE
 DO WITH Z_T110_15_2_PTR -> (ZM_CELL_INDEX_VALUE(ZF_OLC_CELL_IDX));                                          
  DO FOR ZQ_RRH := 1 TO 8;
   DO FOR ZQ_TRX := 1 TO 6;
    DO WITH B_RRH_ARY(ZQ_RRH);
     DO WITH B_TRX_ARY(ZQ_TRX);
      DO WITH B_CTRS_PT15_MT_110;                                                    
                                                                                
      CASE ZF_LDC_TYPE OF                                                         
                                         
       (M_FS_TCHRM_LDC):    
         IF ZF_TEL 
         THEN
           DO FOR ZQ_I := E_MT_110_CTR_MC1605 TO E_MT_110_CTR_MC1609;              
                B_MC1605_TO_MC1609(ZQ_I).B_LOW  := ZS_FFFE;
             	B_MC1605_TO_MC1609(ZQ_I).B_HIGH := ZS_FFFF;
           OD;                                                                    
         FI;   
      ELSE                                                                      
      ESAC;             
      OD;
     OD;
    OD;
   OD;
  OD;                                                       
 OD;  
FI; 
                                                                                
END Q_S0703_UPD_T110_5_INVALID;*/                 
/*AM END : CR745699*/
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0603_UPD_T110_4_INVALID                          */        
/*                                                                    */        
/*     PROGRAMMER: PURNA  (WIPRO)                                     */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 11/11/10                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 110 TCHRM COUNTERS VALIDITY FIELDS.         */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_TRX_IDX M_TRX_IDX,                         */        
/*                      ZF_LDC_TYPE M_FMM_SELECTOR                    */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0581_UPD_CCI_TCH_TYPE110_4                 */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0603_UPD_T110_4_INVALID: PROC(ZF_TRX_IDX   M_TRX_IDX,                      
                                 ZF_LDC_TYPE   M_FMM_SELECTOR,
                                 ZF_TEL        BOOL);                 
                                                                                
DCL ZQ_I    RANGE (E_MT_110_CTR_MC320F:E_MT_110_CTR_MC320J); 
/*DCL ZQ_I CM_MC320F_TO_MC320J;*/                      

DO WITH Z_T110_4_PTR -> (ZM_TRX_INDEX_VALUE(ZF_TRX_IDX));                                          
                                                                                
  B_TRX_IDX  := ZF_TRX_IDX;                                                    
                                                                                
  DO WITH B_CTRS_PT4_MT_110;                                                    
                                                                                
    CASE ZF_LDC_TYPE OF                                                         
                                                                                
                                         
      (M_FS_TCHRM_LDC):    
         IF ZF_TEL 
           THEN
           DO FOR ZQ_I := E_MT_110_CTR_MC320F TO E_MT_110_CTR_MC320J;              
	     /*BEGIN: DCTPD00633131.01*/
             /*CASE (ZQ_I) OF
              
               (E_MT_110_CTR_MC320F:E_MT_110_CTR_MC320J):*/
             /*END: DCTPD00633131.01*/
                B_MC1201_TO_MC320J(ZQ_I).B_LOW  := ZS_FFFE;
             	B_MC1201_TO_MC320J(ZQ_I).B_HIGH := ZS_FFFF;
 

	     /*BEGIN: DCTPD00633131.01*/	
             /*ELSE
               ESAC;*/  
	     /*END: DCTPD00633131.01*/
           OD;                                                                    
         FI;   
      ELSE                                                                      
                                                                                
    ESAC;                                                                       
  OD;                                                                           
OD;                                                                             
                                                                                
                                                                                
END Q_S0603_UPD_T110_4_INVALID;                 
/*END :CR312407*/

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0602_UPD_CCI_TCU_TYPE110_3                       */        
/*                                                                    */        
/*     PROGRAMMER: CHEN ZHANGYI                                       */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 02/07/31                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*      UPDATE THE TYPE 110 BLOCK 3 COUNTERS COMING FROM THE TCU      */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*                      Q_S0603_UPD_T110_3_INVALID                    */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
                                                                                
Q_S0602_UPD_CCI_TCU_TYPE110_3: PROC(ZF_LDC_BUF_PTR PTR);

DCL ZQ_NBR_CELLS INT;

DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_STD_CTRS_AREA;
  ZQ_NBR_CELLS := B_NBR_CELLS;
OD;

DO WHILE ZQ_NBR_CELLS /= 0;
  DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_STD_CTRS_AREA;
    DO WITH B_CELL_CNTRS(ZQ_NBR_CELLS); 
    /* COPY THE COUNTERS FOR THE CELLS IN THE LIST INTO THE 
     * DATA STRUCTURE IN MEMORY.
     */
      IF B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC AND
         B_CELL_IDX > 0
      THEN
        IF Z_STD_CELL_LIST(B_CELL_IDX)
        THEN
          DO WITH Z_T110_3_PTR->(ZM_CELL_INDEX_VALUE(B_CELL_IDX));

            B_CELL_ID := B_CELL_IDX;
            DO WITH B_CTRS_PT3_MT_110;

              Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                (E_MC704A_NB_TCH_NOR_AMR_FR_ALLOC),
                 B_MC448A_TO_MC922D(E_MT_110_CTR_MC704A));

              Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                (E_MC704B_NB_TCH_NOR_AMR_HR_ALLOC),
                 B_MC448A_TO_MC922D(E_MT_110_CTR_MC704B));

              Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                (E_MC140B_NB_TCH_NOR_ASS_ATPT),
                 B_MC448A_TO_MC922D(E_MT_110_CTR_MC140B));

              Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                (E_MC702A_NBR_TCH_NOR_FR_ALLOC),
                 B_MC448A_TO_MC922D(E_MT_110_CTR_MC702A));

              Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                (E_MC702B_NBR_TCH_NOR_HR_ALLOC),
                 B_MC448A_TO_MC922D(E_MT_110_CTR_MC702B));

              Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                (E_MC702C_NBR_TCH_NOR_EFR_ALLOC),
                 B_MC448A_TO_MC922D(E_MT_110_CTR_MC702C));

              Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                (E_MC705_NBR_TCH_NOR_DATA_ALLOC),
                 B_MC448A_TO_MC922D(E_MT_110_CTR_MC705));
                 
              Q_S0050_AVG_OR_REPL_INT(
                 B_CNTRS_TYPE_110(E_MC802A_AV_NB_BUSY_DYN_SDCCH),
                 B_MC800_TO_MC802B(E_MT_110_CTR_MC802A),
                 ZS_AVG);

              IF (B_MC800_TO_MC802B(E_MT_110_CTR_MC802B)=ZS_FFFF)
                 OR
                 (B_CNTRS_TYPE_110(E_MC802B_MAX_NB_BUSY_DYN_SDCCH)>
                  B_MC800_TO_MC802B(E_MT_110_CTR_MC802B))
              THEN
                Q_S0050_AVG_OR_REPL_INT(
                  B_CNTRS_TYPE_110(E_MC802B_MAX_NB_BUSY_DYN_SDCCH),
                  B_MC800_TO_MC802B(E_MT_110_CTR_MC802B),
                  ZS_REPL);
              FI;
     
              /* START: DCTPD731919 */

              Q_S0020_ADD_DP_VALUES(B_CNTRS_TYPE_110_DPVAL_ARRAY
                (E_MC804A_NB_UL_SINGLE_BLK_SIG_RA),
                 B_MC804A_TO_MC02I(E_MT_110_CTR_MC804A));

              Q_S0020_ADD_DP_VALUES(B_CNTRS_TYPE_110_DPVAL_ARRAY
                (E_MC804B_NB_UL_ONE_PHASE_SIG_RA),
                 B_MC804A_TO_MC02I(E_MT_110_CTR_MC804B));

              /* END: DCTPD731919 */

              Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                (E_MC805A_NB_CHANNEL_ASS_DL_AGCH),
                 B_MC804A_TO_MC02I(E_MT_110_CTR_MC805A));

              Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                (E_MC805B_NB_CHANNEL_ASS_DL_PCH),
                 B_MC804A_TO_MC02I(E_MT_110_CTR_MC805B));

              Q_S0040_ADD_INT_TO_INT(B_CNTRS_TYPE_110
                (E_MC462B_OUT_INT_PLMN_TCH_HO_ATP),
                 B_MC462A_TO_MC482(E_MT_110_CTR_MC462B));

              Q_S0040_ADD_INT_TO_INT(B_CNTRS_TYPE_110
                (E_MC462C_OUT_INT_PLMN_TCH_HO_SUC),
                 B_MC462A_TO_MC482(E_MT_110_CTR_MC462C));

              Q_S0040_ADD_INT_TO_INT(B_CNTRS_TYPE_110
                (E_MC463C_INC_INT_PLMN_TCH_HO_SUC),
                 B_MC462A_TO_MC482(E_MT_110_CTR_MC463C));

            OD;
          OD;

        ELSE
          Q_S0603_UPD_T110_3_INVALID(B_CELL_IDX,
                                     M_FS_TCU_TRF_LDC,FALSE);
        FI;                                                                     
      FI;                                                                       
    OD; /* WITH B_CELL_CNTRS */                                                 
  OD; /* WITH MAIN BUFFER */                                                    
  ZQ_NBR_CELLS := ZQ_NBR_CELLS - 1;                                             
OD; /* WITH ZQ_NBR_CELLS */                                                     
                                                                                
                                                                                
END Q_S0602_UPD_CCI_TCU_TYPE110_3;                                              

 /*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE */

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S4475_UPD_T35_IP_CELL_CONG                        */        
/*                                                                    */        
/*     PROGRAMMER:                                                    */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE:                                                 */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*                                                                    */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                                                                    */        
/*                                                                    */        
/*                                                                    */        
/*     CALLED FROM:                                                   */        
/*                                                                    */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
                                                                                
Q_S4475_UPD_T35_IP_CELL_CONG: PROC(ZF_LDC_BUF_PTR PTR);

DCL ZQ_NBR_CELLS INT;

ZQ_NBR_CELLS := ZF_LDC_BUF_PTR->                                                
                         CM_FY32_PM_TCH_UB_CELLS.B_FIXED.B_NBR_CELLS;           
IF ZQ_NBR_CELLS > CM_FY32_PM_MAX_CELLS_PER_TCHRM_LDC_UB OR                      
   ZQ_NBR_CELLS < 0                                                             
THEN                                                                            
  /* OUT OF RANGE */                                                            
  ZQ_NBR_CELLS := 0;                                                            
  Q_S0010_CCDC_ERROR(M_ERC6_USER_REC,                                           
                     M_ERT0019_INC_MESS_DATA,48, 0194);                         
FI;    
DO WITH ZF_LDC_BUF_PTR -> CM_FY32_PM_TCH_UB_CELLS;                              
  DO WHILE ZQ_NBR_CELLS /= 0;                                                   
    DO WITH B_CELL_CTRS(LONG_INT((ZQ_NBR_CELLS)));                                          
      IF (B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC) AND                          
         (B_CELL_IDX >  0) 
      THEN                           
      /* START: 3BKA36CBR236941*/
       IF Q_S0456_CHK_CELL_MAP_IP_BTS(B_CELL_IDX) THEN
      /* END: 3BKA36CBR236941*/
       DO WITH Z_T35_0_PTR->(B_CELL_IDX);                                        
          B_CELL_ID := B_CELL_IDX;                                              
          DO WITH B_CTRS_PT0_MT_35;    
	      Q_S0040_ADD_INT_TO_INT(                                             
              B_TYPE_35(E_IP11_CALL_REJECT_IP_CONG),
              B_IP11_TO_IP13(E_MT_35_CTR_IP11));                                
                                                                                
              Q_S0040_ADD_INT_TO_INT(                                             
              B_TYPE_35(E_IP13_MAX_ACTIVE_TCH_REJ),                        
              B_IP11_TO_IP13(E_MT_35_CTR_IP13));      

          OD;                                                                   
       OD;                                                                     
/* START: 3BKA36CBR236941*/
       FI;
/* END: 3BKA36CBR236941*/    
      FI;                                                                       
    OD;                                                                         
    ZQ_NBR_CELLS := ZQ_NBR_CELLS - 1;                                           
  OD;                                                                           
OD;                     
END Q_S4475_UPD_T35_IP_CELL_CONG;


/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S5444_UPD_IP_CONG_CELL_INVALID                    */        
/*                                                                    */        
/*     PROGRAMMER: CHEN ZHANGYI                                       */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 02/07/31                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 110 BLOCK 3 INVALID FIELDS.                 */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_CELL_IDX M_CELL_IDX,                       */        
/*                      ZF_LDC_TYPE M_FMM_SELECTOR                    */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0290_UPD_TCH_INVALID                       */        
/*                      Q_S0447_UPD_T110_DTC_INVALID                  */        
/*                      Q_S0448_UPD_T110_TCU_INVALID                  */        
/*                      Q_S0600_UPDATE_CCI_TYPE110_3                  */        
/*                      Q_S0601_UPD_CCI_TCH_TYPE110_3                 */        
/*                      Q_S0602_UPD_CCI_TCU_TYPE110_3                 */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S5444_UPD_IP_CONG_CELL_INVALID: PROC(ZF_CELL_IDX   M_CELL_IDX);

                                                                                
DCL ZQ_I    RANGE(E_MT_35_CTR_IP11:E_MT_35_CTR_IP13);

/* START: 3BKA36CBR236941*/
IF Q_S0456_CHK_CELL_MAP_IP_BTS(ZF_CELL_IDX) THEN
/* END: 3BKA36CBR236941*/
DO WITH Z_T35_0_PTR -> (ZF_CELL_IDX);                                  
  B_CELL_ID  := ZF_CELL_IDX;  
  DO WITH B_CTRS_PT0_MT_35;
   /*DO FOR ZQ_I := E_MT_35_CTR_IP11 TO E_MT_35_CTR_IP13;*/
     B_IP11_TO_IP13(E_MT_35_CTR_IP11) := ZS_FFFE;
     B_IP11_TO_IP13(E_MT_35_CTR_IP13) := ZS_FFFE;
   /*OD;*/ 
  OD;
OD;
/* START: 3BKA36CBR236941*/
FI;
/* END: 3BKA36CBR236941*/ 

END Q_S5444_UPD_IP_CONG_CELL_INVALID;


/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S4475_UPD_T35_IP_BTS_CONG                        */        
/*                                                                    */        
/*     PROGRAMMER: CHEN ZHANGYI                                       */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 02/07/31                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*      UPDATE THE TYPE 110 BLOCK 3 COUNTERS COMING FROM THE TCU      */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*                      Q_S0603_UPD_T110_3_INVALID                    */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
                                                                                
Q_S4475_UPD_T35_IP_BTS_CONG: PROC(ZF_LDC_BUF_PTR PTR);

DCL ZQ_NBR_BTS INT;
DCL ZQ_BTS_ID M_BEQ_NBR;

ZQ_NBR_BTS := ZF_LDC_BUF_PTR->                                                
                         CM_FY32_PM_TCH_UB_BTS.B_FIXED.B_NBR_BTS;           
IF ZQ_NBR_BTS > CM_FY32_MAX_BTS_PER_BSC OR                      
   ZQ_NBR_BTS < 0                                                             
THEN                                                                            
  /* OUT OF RANGE */                                                            
  ZQ_NBR_BTS := 0;                                                            
  Q_S0010_CCDC_ERROR(M_ERC6_USER_REC,                                           
                     M_ERT0019_INC_MESS_DATA,48, 0194);                         
ELSE
DO WITH ZF_LDC_BUF_PTR -> CM_FY32_PM_TCH_UB_BTS;                              
  DO WHILE ZQ_NBR_BTS /= 0;                                                   
    DO WITH B_BTS_CTRS(ZQ_NBR_BTS);                                          
         ZQ_BTS_ID:= B_BTS_IDX;
      IF (B_BTS_IDX <= CM_FY32_MAX_BTS_PER_BSC) AND                          
         (B_BTS_IDX >  0) 
      THEN                           
       /*FR20/235960 255 BTS*/
       IF(Q_S0455_CHK_IF_IP_BTS(B_BTS_IDX))
       THEN
	/*FR20/235960 255 BTS*/
       DO WITH Z_T35_5_PTR->(ZM_BTS_INDEX_VALUE(ZQ_BTS_ID));                                        
          B_BTS_IDX := ZQ_BTS_ID;
          /* CR20/225233 */
          DO WITH Z_R_BEQ_MGT_PTR -> ZM_R_BEQ_MGT(ZQ_BTS_ID);
	/*BEGIN : FR36/307401-307402*/
             B_TC_IDX := M_BYTE(D_TC_ID);
	/*END : FR36/307401-307402*/
          OD;          
          /*B_FILLER := H'FF;*/
          /* CR20/225233 */ 
          DO WITH B_CTRS_PT5_MT_35;    
	      Q_S0040_ADD_INT_TO_INT(                                             
              B_TYPE_BTS_35(E_IP12_CUM_TIME_IP_CONG),
        /* START : WIPRO B11 IP MR0 PKG1 */
           /*  B_IP12_TO_IP12(E_MT_35_CTR_IP12)); */                               
              B_IP12_TO_IP12);                                
        /* END : WIPRO B11 IP MR0 PKG1 */
                                                                                
          OD;                                                                   
       OD;                                                                     
   /*FR20/235960 255 BTS*/
     FI;
    /*FR20/235960 255 BTS*/ 
      FI;                                                                       
    OD;                                                                         
    ZQ_NBR_BTS := ZQ_NBR_BTS - 1;
  OD;                                                                           
OD;                                                                           
FI;  
END Q_S4475_UPD_T35_IP_BTS_CONG;

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S6444_UPD_IP_CONG_BTS_INVALID                     */        
/*                                                                    */        
/*     PROGRAMMER: CHEN ZHANGYI                                       */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 02/07/31                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*      UPDATE THE TYPE 110 BLOCK 3 COUNTERS COMING FROM THE TCU      */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*                      Q_S0603_UPD_T110_3_INVALID                    */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
                                                                                
Q_S6444_UPD_IP_CONG_BTS_INVALID : PROC(ZF_BTS_ID M_BEQ_NBR);


 DO WITH Z_T35_5_PTR -> (ZF_BTS_ID);
   B_BTS_IDX    := ZF_BTS_ID; 
   /* CR20/225233 */
   DO WITH Z_R_BEQ_MGT_PTR -> ZM_R_BEQ_MGT(ZF_BTS_ID);
	/*BEGIN : FR36/307401-307402*/
             B_TC_IDX := M_BYTE(D_TC_ID);
	/*END : FR36/307401-307402*/
   OD;          
   /* CR20/225233 */      
    DO WITH B_CTRS_PT5_MT_35;
  /* START : WIPRO B11 IP MR0 PKG1 */
    /* B_IP12_TO_IP12(E_MT_35_CTR_IP12):=ZS_FFFE; */
       B_IP12_TO_IP12 := ZS_FFFE;
  /* END : WIPRO B11 IP MR0 PKG1 */
    OD;
 OD;

END Q_S6444_UPD_IP_CONG_BTS_INVALID;

/* START : WIPRO B11 IP MR0 PKG1 */
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0559_UPDATE_CCI_IP_TYPE35                        */        
/*                                                                    */        
/*     PROGRAMMER: SRINIVAS                                           */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 10/07/20                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*      UPDATE THE TYPE 35 BLOCK 5 IP COUNTERS COMING FROM THE TCU    */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*                      Q_S0603_UPD_T110_3_INVALID                    */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
                                                                                
Q_S0559_UPDATE_CCI_IP_TYPE35: PROC(ZF_LDC_BUF_PTR PTR);


DCL ZQ_NBR_BTS INT;
DCL ZQ_BTS_ID M_BEQ_NBR;

DCL ZQ_LONG ZM_LONG_DPVAL;
/* NOW UPDATE THE BTS OML COUNTERS */
ZQ_NBR_BTS := ZF_LDC_BUF_PTR->
                         CM_FY32_TCU_T33_CTRS_AREA.B_OML_BTS;
IF ZQ_NBR_BTS > CM_FY32_MAX_BTS_PER_BSC OR
   ZQ_NBR_BTS < 0
THEN
  /* OUT OF RANGE */
  ZQ_NBR_BTS := 0;
  Q_S0010_CCDC_ERROR(M_ERC6_USER_REC,
                     M_ERT0019_INC_MESS_DATA,48, 0194);
ELSE
DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_T33_CTRS_AREA;
  DO WHILE ZQ_NBR_BTS /= 0;
   DO WITH B_OML_CNTRS(ZQ_NBR_BTS);
         ZQ_BTS_ID:= B_BTS_IDX;
      IF (B_BTS_IDX <= CM_FY32_MAX_BTS_PER_BSC) AND
         (B_BTS_IDX >  0)
      THEN
       /*BEGIN:FR 761944 Change*/
       IF(Q_S0455_CHK_IF_IP_BTS(B_BTS_IDX)) 
       THEN
       /* END: FR 761944 Change*/
       DO WITH Z_T35_5_PTR->(ZM_BTS_INDEX_VALUE(ZQ_BTS_ID));
          B_BTS_IDX := ZQ_BTS_ID;
          /* CR20/225233 */
          DO WITH Z_R_BEQ_MGT_PTR -> ZM_R_BEQ_MGT(ZQ_BTS_ID);
	/*BEGIN : FR36/307401-307402*/
             B_TC_IDX := M_BYTE(D_TC_ID);
	/*END : FR36/307401-307402*/	
          OD;          
          /* CR20/225233 */      
          DO WITH B_CTRS_PT5_MT_35;
          
              Q_S0020_ADD_DP_VALUES(
              B_TYPE_OML_BTS_35(E_IP26A_BTS_SND_OML_IP_BYTES),
              B_IP25A_TO_IP30M(E_MT_35_CTR_IP26A));
              
              Q_S0020_ADD_DP_VALUES(
              B_TYPE_OML_BTS_35(E_IP26B_BTS_SND_RSL_IP_BYTES),
              B_IP25A_TO_IP30M(E_MT_35_CTR_IP26B));
              
              Q_S0020_ADD_DP_VALUES(
              B_TYPE_OML_BTS_35(E_IP26C_BTS_SND_OML_IP_PKTS),
              B_IP25A_TO_IP30M(E_MT_35_CTR_IP26C));
              
              Q_S0020_ADD_DP_VALUES(
              B_TYPE_OML_BTS_35(E_IP26D_BTS_SND_RSL_IP_PKTS),
              B_IP25A_TO_IP30M(E_MT_35_CTR_IP26D));    
    
              Q_S0020_ADD_DP_VALUES(
              B_TYPE_OML_BTS_35(E_IP26E_BTS_RESND_RSLI_LAPD_FRM),
              B_IP25A_TO_IP30M(E_MT_35_CTR_IP26E));
              
              Q_S0020_ADD_DP_VALUES(
              B_TYPE_OML_BTS_35(E_IP29A_BTS_SND_IPTCH_BYTES),
              B_IP25A_TO_IP30M(E_MT_35_CTR_IP29A));
              
              Q_S0020_ADD_DP_VALUES(
              B_TYPE_OML_BTS_35(E_IP29C_BTS_SND_IPTCH_PKTS),
              B_IP25A_TO_IP30M(E_MT_35_CTR_IP29C));
              
              Q_S0020_ADD_DP_VALUES(
              B_TYPE_OML_BTS_35(E_IP29K_BTS_RCV_TCH_PKT_DELAY),
              B_IP25A_TO_IP30M(E_MT_35_CTR_IP29K));
              
              Q_S0020_ADD_DP_VALUES(
              B_TYPE_OML_BTS_35(E_IP29L_BTS_NT_RCV_DL_IPTCH_PKT),
              B_IP25A_TO_IP30M(E_MT_35_CTR_IP29L));
/* START : AUPOIP FEATURE */
	    DO WITH Z_R_BSS_PAR2_PTR -> ZM_R_BSS_PAR2;
    	    IF D_EN_AUOIP = FALSE THEN
   	 /* IGNORE COUNTERS RECIEVED FROM BTS/TCU THEY ARE CONSIDERED  
	    FROM TPIP IN CASE  AUPOIP FEATURE IS ENABLED */
              Q_S0020_ADD_DP_VALUES(
              B_TYPE_OML_BTS_35(E_IP30A_TC_NOT_RCV_UL_TCH_PKT),
              B_IP25A_TO_IP30M(E_MT_35_CTR_IP30A));
              
              Q_S0020_ADD_DP_VALUES(
              B_TYPE_OML_BTS_35(E_IP30C_TC_SENT_IPTCH_PACKETS),
              B_IP25A_TO_IP30M(E_MT_35_CTR_IP30C));
          
/* START CR_817677_01 */
   
              
           /*   Q_S0020_ADD_DP_VALUES(
              B_TYPE_OML_BTS_35(E_IP30G_TC_SENT_TCH_BYT_HI_MIN),
              B_IP25A_TO_IP30M(E_MT_35_CTR_IP30G)); */
 
              Q_CALC_MAX_DPVAL(
              B_TYPE_OML_BTS_35(E_IP30G_TC_SENT_TCH_BYT_HI_MIN),
              B_IP25A_TO_IP30M(E_MT_35_CTR_IP30G));

/* END CR_817677_01 */

              Q_S0020_ADD_DP_VALUES(
              B_TYPE_OML_BTS_35(E_IP30M_TC_NOT_RCV_UL_TCH_PKT),
              B_IP25A_TO_IP30M(E_MT_35_CTR_IP30M));
         /* IP30G WILL BE ZERO IN CASE OF PURE AUPOIP FEATURE ENABLED*/
              FI;
	     OD;	
/* END : AUPOIP FEATURE */
   
/*  BEGIN CR_817677_01 CHANGE ....................*/
   /*        ZQ_LONG.ZB_LOW := B_TYPE_OML_BTS_35
                      (E_IP31A_BTS_SND_ALL_BYT_HI_MIN ).B_LOW;
              ZQ_LONG.ZB_HIGH := B_TYPE_OML_BTS_35
                      (E_IP31A_BTS_SND_ALL_BYT_HI_MIN ).B_HIGH;  */
              
          /*    Q_S0081_ADD_LONG_INT_TO_3_INT(
              M_LONG_INT(ZQ_LONG),
              B_IP31A_TO_IP31A); */
/*........................   END CR_817677_01 CHANGE */ 

/* START CR_817677_01 */
            
            ZQ_LONG.ZB_LOW := B_TYPE_OML_BTS_35
                      (E_IP31A_BTS_SND_ALL_BYT_HI_MIN ).B_LOW;
              ZQ_LONG.ZB_HIGH := B_TYPE_OML_BTS_35
                      (E_IP31A_BTS_SND_ALL_BYT_HI_MIN ).B_HIGH;   
    
             Q_CALC_MAX_3_INT(
                 M_LONG_INT(ZQ_LONG),
                   B_IP31A_TO_IP31A);

/* END CR_817677_01 */              
      

              Q_S0020_ADD_DP_VALUES(
              B_TYPE_OML_BTS_35(E_IP31C_BTS_DROP_IP_PKTS_PR0),
              B_IP31C_TO_IP42D(E_MT_35_CTR_IP31C));
              
              Q_S0020_ADD_DP_VALUES(
              B_TYPE_OML_BTS_35(E_IP31D_BTS_DROP_IP_PKTS_PR1),
              B_IP31C_TO_IP42D(E_MT_35_CTR_IP31D));
              
              Q_S0020_ADD_DP_VALUES(
              B_TYPE_OML_BTS_35(E_IP31E_BTS_DROP_IP_PKTS_PR2),
              B_IP31C_TO_IP42D(E_MT_35_CTR_IP31E));
              
              Q_S0020_ADD_DP_VALUES(
              B_TYPE_OML_BTS_35(E_IP31F_BTS_DROP_IP_PKTS_PR3),
              B_IP31C_TO_IP42D(E_MT_35_CTR_IP31F));
              
              Q_S0020_ADD_DP_VALUES(
              B_TYPE_OML_BTS_35(E_IP40A_BTS_SND_IPGCHU_GBR_PKTS),
              B_IP31C_TO_IP42D(E_MT_35_CTR_IP40A));
              
              Q_S0020_ADD_DP_VALUES(
              B_TYPE_OML_BTS_35(E_IP40B_BTS_RESND_GCHU_GBR_PKT),
              B_IP31C_TO_IP42D(E_MT_35_CTR_IP40B));
              
              Q_S0020_ADD_DP_VALUES(
              B_TYPE_OML_BTS_35(E_IP40D_BTS_SND_IPGCHU_GBR_BYT),
              B_IP31C_TO_IP42D(E_MT_35_CTR_IP40D));
              
              Q_S0020_ADD_DP_VALUES(
              B_TYPE_OML_BTS_35(E_IP41A_BTS_SND_IPGCHU_BE_PKTS),
              B_IP31C_TO_IP42D(E_MT_35_CTR_IP41A));
              
              Q_S0020_ADD_DP_VALUES(
              B_TYPE_OML_BTS_35(E_IP41B_BTS_RESND_GCHU_BE_PKT),
              B_IP31C_TO_IP42D(E_MT_35_CTR_IP41B));
              
              Q_S0020_ADD_DP_VALUES(
              B_TYPE_OML_BTS_35(E_IP41D_BTS_SND_IPGCHU_BE_BYT),
              B_IP31C_TO_IP42D(E_MT_35_CTR_IP41D));
              
              Q_S0020_ADD_DP_VALUES(
              B_TYPE_OML_BTS_35(E_IP42A_BTS_SND_IPGCHC_IP_PKTS),
              B_IP31C_TO_IP42D(E_MT_35_CTR_IP42A));
              
              Q_S0020_ADD_DP_VALUES(
              B_TYPE_OML_BTS_35(E_IP42D_BTS_SND_IPGCHC_IP_BYT),
              B_IP31C_TO_IP42D(E_MT_35_CTR_IP42D));
            OD;
           OD;
         FI;/*  FR 761944 Change*/
/* START :CR20/284751 BTS FRQ SYNCHRO*/
       DO WITH Z_T35_6_PTR->(ZM_BTS_INDEX_VALUE(ZQ_BTS_ID));
          B_BTS_IDX := ZQ_BTS_ID;
          DO WITH Z_R_BEQ_MGT_PTR -> ZM_R_BEQ_MGT(ZQ_BTS_ID);
          OD;          
          DO WITH B_CTRS_PT6_MT_35;
           
            Q_S0040_ADD_INT_TO_INT(
              B_TYPE_BTS_35_BLK7(E_IP70_NB_ACC_TIME_SVR1),
              B_IP70_TO_IP73(E_MT_35_CTR_IP70));
            Q_S0040_ADD_INT_TO_INT(
              B_TYPE_BTS_35_BLK7(E_IP71_NB_ACC_TIME_SVR2),
              B_IP70_TO_IP73(E_MT_35_CTR_IP71));
            Q_S0040_ADD_INT_TO_INT(
              B_TYPE_BTS_35_BLK7(E_IP72_NB_SUCC_ACC_SVR1),
              B_IP70_TO_IP73(E_MT_35_CTR_IP72));
            Q_S0040_ADD_INT_TO_INT(
              B_TYPE_BTS_35_BLK7(E_IP73_NB_SUCC_ACC_SVR2),
              B_IP70_TO_IP73(E_MT_35_CTR_IP73));

              Q_S0021_CHK_RPL_DP(B_TYPE_BTS_35_BLK8_1
                       (E_IP74_LAST_CLK_DIFF_SVR1),
              B_IP74_TO_IP79(E_MT_35_CTR_IP74));

              Q_S0021_CHK_RPL_DP(B_TYPE_BTS_35_BLK8_1
                       (E_IP75_LAST_CLK_DIFF_SVR2),
              B_IP74_TO_IP79(E_MT_35_CTR_IP75));

     	      Q_S0021_CHK_RPL_DP(B_TYPE_BTS_35_BLK8_1
                       (E_IP76_MIN_CLK_DIFF_SVR1),
              B_IP74_TO_IP79(E_MT_35_CTR_IP76));

       	      Q_S0021_CHK_RPL_DP(B_TYPE_BTS_35_BLK8_1
                       (E_IP77_MIN_CLK_DIFF_SVR2),
              B_IP74_TO_IP79(E_MT_35_CTR_IP77));

              Q_S0021_CHK_RPL_DP(B_TYPE_BTS_35_BLK8_1
                       (E_IP78_LAST_RTT_TIME_SVR1),
              B_IP74_TO_IP79(E_MT_35_CTR_IP78));

              Q_S0021_CHK_RPL_DP(B_TYPE_BTS_35_BLK8_1
                       (E_IP79_LAST_RTT_TIME_SVR2),
              B_IP74_TO_IP79(E_MT_35_CTR_IP79));


 	      Q_S0021_CHK_RPL_INT(B_TYPE_BTS_35_BLK8_2
             		(E_IP80_NB_EVALS_RETUNE_SVR1),
              B_IP80_TO_IP87(E_MT_35_CTR_IP80));

	      Q_S0021_CHK_RPL_INT(B_TYPE_BTS_35_BLK8_2
                       (E_IP81_NB_EVALS_RETUNE_SVR2),
              B_IP80_TO_IP87(E_MT_35_CTR_IP81));

 	      Q_S0021_CHK_RPL_INT(B_TYPE_BTS_35_BLK8_2
                       (E_IP82_NB_ACC_EVALS_RT_SVR1),
              B_IP80_TO_IP87(E_MT_35_CTR_IP82));

	      Q_S0021_CHK_RPL_INT((B_TYPE_BTS_35_BLK8_2
                       (E_IP83_NB_ACC_EVALS_RT_SVR2)),
              B_IP80_TO_IP87(E_MT_35_CTR_IP83));

              Q_S0021_CHK_RPL_INT((B_TYPE_BTS_35_BLK8_2
                       (E_IP84_GRADIENT_TIME_SVR1)),
              B_IP80_TO_IP87(E_MT_35_CTR_IP84));

	      Q_S0021_CHK_RPL_INT((B_TYPE_BTS_35_BLK8_2
                       (E_IP85_GRADIENT_TIME_SVR2)),
              B_IP80_TO_IP87(E_MT_35_CTR_IP85));

	      Q_S0021_CHK_RPL_INT((B_TYPE_BTS_35_BLK8_2
                       (E_IP86_MEAN_GRADIENT_SVR1)),
              B_IP80_TO_IP87(E_MT_35_CTR_IP86));

	      Q_S0021_CHK_RPL_INT((B_TYPE_BTS_35_BLK8_2
                       (E_IP87_MEAN_GRADIENT_SVR2)),
              B_IP80_TO_IP87(E_MT_35_CTR_IP87));
              
              IF (B_TYPE_BTS_35_BLK8_IP88 /= ZS_FF)
              THEN
              B_IP88 := B_TYPE_BTS_35_BLK8_IP88;
              ELSE
               /*RETAIN PREVIOUS VALUE */
              FI;
              Q_S0021_CHK_RPL_INT(
              B_TYPE_BTS_35_BLK8_IP89,B_IP89); 

	OD;

	OD;
/* END:CR20/284751 BTS FRQ SYNCHRO*/
          FI;
         OD;
    ZQ_NBR_BTS := ZQ_NBR_BTS - 1;
  OD;
OD;
FI;     
END Q_S0559_UPDATE_CCI_IP_TYPE35;
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0558_UPD_T35_IP_TCU_INVALID                      */        
/*                                                                    */        
/*     PROGRAMMER: SRINIVAS                                           */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 10/07/20                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*      UPDATE THE TYPE 35 BLOCK 5 IP COUNTERS COMING FROM THE TCU    */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*                      Q_S0603_UPD_T110_3_INVALID                    */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
                                                                                
Q_S0558_UPD_T35_IP_TCU_INVALID: PROC(ZF_LCE_ID M_LCE_ID);
                                     
DCL ZQ_NBR_I M_OML_IDX;
DCL ZQ_BTS_ID M_BEQ_NBR;
DCL ZQ_COUNTER_I   RANGE(E_MT_35_CTR_IP26A:E_MT_35_CTR_IP42D);
DCL ZQ_COUNTER_J   RANGE(E_MT_35_CTR_IP70:E_MT_35_CTR_IP89);
DCL ZQ_LOC_I INT;
DCL ZQ_FOUND BOOL;
DCL ZQ_TMP M_3_INT_CNTR;

ZQ_TMP(1):= ZS_FFFF;
ZQ_TMP(2):= ZS_FFFF;
ZQ_TMP(3):= ZS_FFFE;

DO FOR ZQ_NBR_I := 1 TO M_MAX_BTS_PER_BSC;
 DO WITH Z_R_OML_LNK_PTR -> ZM_R_OML_LNK(ZQ_NBR_I); 
  IF D_TCU_ID = ZF_LCE_ID THEN
   IF (D_BEQ_NBR <= CM_FY32_MAX_BTS_PER_BSC) AND
      (D_BEQ_NBR > 0) THEN
    IF ( Q_S0455_CHK_IF_IP_BTS(D_BEQ_NBR)) THEN
      ZQ_BTS_ID := D_BEQ_NBR;
      DO WITH Z_T35_5_PTR->(ZQ_BTS_ID);
        B_BTS_IDX := ZQ_BTS_ID;
        /* CR20/225233 */
        DO WITH Z_R_BEQ_MGT_PTR -> ZM_R_BEQ_MGT(ZQ_BTS_ID);
	/*BEGIN : FR36/307401-307402*/
           B_TC_IDX := M_BYTE(D_TC_ID);
	/*END : FR36/307401-307402*/
        OD;
        /* CR20/225233 */          
        DO WITH B_CTRS_PT5_MT_35;
         DO FOR ZQ_COUNTER_I := E_MT_35_CTR_IP26A TO 
            E_MT_35_CTR_IP42D;
         CASE ZQ_COUNTER_I OF
         (E_MT_35_CTR_IP26A:E_MT_35_CTR_IP30M):
        
          B_IP25A_TO_IP30M(ZQ_COUNTER_I).B_HIGH := ZS_FFFF;
          B_IP25A_TO_IP30M(ZQ_COUNTER_I).B_LOW := ZS_FFFE;   
          
         (E_MT_35_CTR_IP31A):
         
          B_IP31A_TO_IP31A := ZQ_TMP;
      
         (E_MT_35_CTR_IP31C:E_MT_35_CTR_IP42D):
        
          B_IP31C_TO_IP42D(ZQ_COUNTER_I).B_HIGH := ZS_FFFF;
          B_IP31C_TO_IP42D(ZQ_COUNTER_I).B_LOW := ZS_FFFE;  
          
         ESAC;
       OD;
      OD;
/* START:CR20/284751 BTS FRQ SYNCHRO*/
       DO WITH Z_T35_6_PTR->(ZQ_BTS_ID);
          B_BTS_IDX := ZQ_BTS_ID;
         DO WITH Z_R_BEQ_MGT_PTR -> ZM_R_BEQ_MGT(ZQ_BTS_ID);
         OD;
	DO WITH B_CTRS_PT6_MT_35;
         DO FOR ZQ_COUNTER_J := E_MT_35_CTR_IP70 TO 
            E_MT_35_CTR_IP89;
         CASE ZQ_COUNTER_J OF
              (E_MT_35_CTR_IP70:E_MT_35_CTR_IP73):
          B_IP70_TO_IP73(ZQ_COUNTER_J) := ZS_FFFF;

             (E_MT_35_CTR_IP74:E_MT_35_CTR_IP79):
          B_IP74_TO_IP79(ZQ_COUNTER_J).B_HIGH := ZS_FFFF;
          B_IP74_TO_IP79(ZQ_COUNTER_J).B_LOW := ZS_FFFF;

         (E_MT_35_CTR_IP80:E_MT_35_CTR_IP87):
          B_IP80_TO_IP87(ZQ_COUNTER_J):= ZS_FFFF;

         (E_MT_35_CTR_IP88):
          B_IP88:=ZS_FF;

         (E_MT_35_CTR_IP89):
          B_IP89:=ZS_FFFF;
         ESAC;
         OD;
        OD;
       OD;
/* END:CR20/284751 BTS FRQ SYNCHRO*/
     OD;
    FI; 
   FI;
  FI;      
 OD;     
OD; 
END Q_S0558_UPD_T35_IP_TCU_INVALID;
/* END : WIPRO B11 IP MR0 PKG1 */

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE:Q_S7444_UPD_ATERMUX_INVALID                          */        
/*                                                                    */        
/*     PROGRAMMER: CHEN ZHANGYI                                       */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 02/07/31                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*      UPDATE THE TYPE 110 BLOCK 3 COUNTERS COMING FROM THE TCU      */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*                      Q_S0603_UPD_T110_3_INVALID                    */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
                                                                                
Q_S4475_UPD_T35_ATERMUX: PROC(ZF_LDC_BUF_PTR PTR);


DCL ZQ_NBR_TC M_TC_ID;

ZQ_NBR_TC := ZF_LDC_BUF_PTR->                                                
                         CM_FY32_PM_TCH_UB_TC.B_FIXED.B_NBR_TC;           
IF ZQ_NBR_TC > CM_FY32_MAX_TC_PER_BSC OR                      
   ZQ_NBR_TC < 0                                                             
THEN                                                                            
  /* OUT OF RANGE */                                                            
  ZQ_NBR_TC := 0;                                                            
  Q_S0010_CCDC_ERROR(M_ERC6_USER_REC,                                           
                     M_ERT0019_INC_MESS_DATA,48, 1716);                         
ELSE    
DO WITH ZF_LDC_BUF_PTR -> CM_FY32_PM_TCH_UB_TC;                              
  DO WHILE ZQ_NBR_TC /= 0;                                                   
    DO WITH B_TC_CTRS(ZM_TC_INDEX_VALUE(ZQ_NBR_TC));   
      IF (B_TC_ID <= CM_FY32_MAX_TC_PER_BSC) AND                          
         (B_TC_ID >  0) 
      THEN                           
       DO WITH Z_T35_4_PTR->(ZM_TC_INDEX_VALUE(ZQ_NBR_TC));
          B_TC_IDX := B_TC_ID;
          B_FILLER := H'FF;                                              
          DO WITH B_CTRS_PT4_MT_35;    
              Q_S0080_ADD_INT_TO_DPVAL(                                             
              B_TYPE_TC_35(E_IP21_PM_NIB_ALLOC_REQ),
              B_IP21_TO_IP35D(E_MT_35_CTR_IP21));                                
              Q_S0080_ADD_INT_TO_DPVAL(                                             
              B_TYPE_TC_35(E_IP22_PM_NIB_ALLOC_FAIL_CONG),
              B_IP21_TO_IP35D(E_MT_35_CTR_IP22)); 

              Q_S0080_ADD_INT_TO_DPVAL(                                             
              B_TYPE_TC_35(E_IP23_PM_TIME_NIB_CONG),
              B_IP21_TO_IP35D(E_MT_35_CTR_IP23));
          OD;                                                                   
       OD;                                                                     
      FI;                                                                       
    OD;                                                                         
    ZQ_NBR_TC := ZQ_NBR_TC - 1;
  OD;                                                                           
OD;               
FI;
END Q_S4475_UPD_T35_ATERMUX;



/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S7444_UPD_ATERMUX_INVALID                        */        
/*                                                                    */        
/*     PROGRAMMER: CHEN ZHANGYI                                       */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 02/07/31                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*      UPDATE THE TYPE 110 BLOCK 3 COUNTERS COMING FROM THE TCU      */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*                      Q_S0603_UPD_T110_3_INVALID                    */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
                                                                                
Q_S7444_UPD_ATERMUX_INVALID : PROC(ZF_TC_ID M_TC_ID);
/*CR2517*/
/*DCL ZQ_I CM_TYPE_35_CTRS_4;*/
/*CR2517*/
/* START : AUPOIP FEATURE */
DCL ZQ_I RANGE(E_MT_35_CTR_IP21:E_MT_35_CTR_IP23);
/* END AUPOIP FEATURE */

DO WITH Z_T35_4_PTR ->(ZM_TC_INDEX_VALUE(ZF_TC_ID));
  B_TC_IDX := ZF_TC_ID;
  DO WITH B_CTRS_PT4_MT_35;
   DO FOR ZQ_I := E_MT_35_CTR_IP21 TO E_MT_35_CTR_IP23;
     B_IP21_TO_IP35D(ZQ_I).B_LOW :=ZS_FFFE;
     B_IP21_TO_IP35D(ZQ_I).B_HIGH :=ZS_FFFF;
   OD;
  OD;
 OD;

END Q_S7444_UPD_ATERMUX_INVALID;
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE:  Q_S0487_UPD_CCI_TCU_TYPE110_7                      */        
/*                                                                    */        
/*     PROGRAMMER: CHEN ZHANGYI                                       */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 17/03/2006                                      */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*      UPDATE THE TYPE 110 BLOCK 7 COUNTERS COMING FROM THE TCU      */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*                      Q_S0603_UPD_T110_3_INVALID                    */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/

Q_S0487_UPD_CCI_TCU_TYPE110_7 : PROC(ZF_LDC_BUF_PTR PTR);                 

DCL ZQ_NBR_CELLS INT;

DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_STD_CTRS_AREA;
  ZQ_NBR_CELLS := B_NBR_CELLS;
OD;

DO WHILE ZQ_NBR_CELLS /= 0;
  DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_STD_CTRS_AREA;
    DO WITH B_CELL_CNTRS(ZQ_NBR_CELLS);
    /* COPY THE COUNTERS FOR THE CELLS IN THE LIST INTO THE
     * DATA STRUCTURE IN MEMORY.
     */
      IF B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC AND
         B_CELL_IDX > 0
      THEN
        IF Z_STD_CELL_LIST(B_CELL_IDX)
        THEN
/* CR20/209493 START */
      IF (B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC/2)
      THEN
       DO WITH Z_T110_7_PTR->(ZM_CELL_INDEX_VALUE(B_CELL_IDX));
/* CR20/209493 END */
            B_CELL_ID := B_CELL_IDX;
            DO WITH B_CTRS_PT7_MT_110;

/* CR 188510 START */
/* CR20/209493 START */
             Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_19
                (E_C191_NBR_SDCCH_SMS_TERM_TRANS),
                 B_MC191_TO_MC975(E_MT_110_CTR_MC191));

             Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                (E_MC928A_TCH_CAU_LOW_QUAL_UL),
                 B_MC191_TO_MC975(E_MT_110_CTR_MC928A));

             Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                (E_MC928B_TCH_CAU_LOW_LVL_UL),
                 B_MC191_TO_MC975(E_MT_110_CTR_MC928B));

             Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                (E_MC928C_TCH_CAU_LOW_QUAL_DL),
                B_MC191_TO_MC975(E_MT_110_CTR_MC928C));

             Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                (E_MC928D_TCH_CAU_LOW_LVL_DL),
                B_MC191_TO_MC975(E_MT_110_CTR_MC928D));

             Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                (E_MC928E_TCH_CAU_LONG_MSBS_DIST),
                 B_MC191_TO_MC975(E_MT_110_CTR_MC928E));

             Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                (E_MC928F_TCH_CAU_SHORT_MSBS_DIST),
                 B_MC191_TO_MC975(E_MT_110_CTR_MC928F));

             Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                (E_MC928G_TCH_CAU_HIGHLOW_LVL_UL),
                 B_MC191_TO_MC975(E_MT_110_CTR_MC928G));

             Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                (E_MC928H_TCH_CAU_HIGHLOW_LVL_DL),
                 B_MC191_TO_MC975(E_MT_110_CTR_MC928H));

             Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                    (E_MC928I_TCH_CAU_AUTRE),
                     B_MC191_TO_MC975(E_MT_110_CTR_MC928I));
/*START :ADDED FOR A-FLEX CHANGES*/
             Q_S0020_ADD_DP_VALUES(B_CNTRS_TYPE_110_DPVAL_ARRAY
                  /*(E_MC8E_PAG_WITH_IMSI),*/ 
                  /* B_MC191_TO_MC975(E_MT_110_CTR_MC961));*/ 
                  /*CR36/251325 START*/ 
                  /* B_MC191_TO_MC975(E_MT_110_CTR_MC8E));*/ 
                  (E_MC961_PAG_WITH_IMSI), 
                   B_MC191_TO_MC975(E_MT_110_CTR_MC961)); 
                  /*CR36/251325 END*/ 
/*END :ADDED FOR A-FLEX CHANGES*/
/* START: WIPRO AMR-WB CHANGE */
            Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                    (E_MC931_TCH_NOR_AMRWB_FR_ALLOC),
                     B_MC191_TO_MC975(E_MT_110_CTR_MC931));
/* END: WIPRO AMR-WB CHANGE */
/* START: WIPRO TFO FOR AMR-WB CHANGE */
             Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                    (E_MC935_NB_CALL_TFO_AMR_WB),
                     B_MC191_TO_MC975(E_MT_110_CTR_MC935));
             Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                    (E_MC936_NB_INTERHO_TFO_AMR_WB),
                     B_MC191_TO_MC975(E_MT_110_CTR_MC936));
             Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                    (E_MC937_NB_EXTHO_TFO_AMR_WB),
                     B_MC191_TO_MC975(E_MT_110_CTR_MC937));
/* END: WIPRO TFO FOR AMR-WB CHANGE */
/* CR20/209493 END */
/* CR 188510 END */
/* START: WIPRO TFO FOR AMR-NB CHANGE */
             Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                    (E_MC938_NB_CALL_TFO_AMR_NB),
                     B_MC191_TO_MC975(E_MT_110_CTR_MC938));
             Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                    (E_MC939_NB_INTERHO_TFO_AMR_NB),
                     B_MC191_TO_MC975(E_MT_110_CTR_MC939));
             Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                    (E_MC950_NB_EXTHO_TFO_AMR_NB),
                     B_MC191_TO_MC975(E_MT_110_CTR_MC950));
/* END: WIPRO TFO FOR AMR-NB CHANGE */

/* CR 20/245729 START */

              Q_S0020_ADD_DP_VALUES(B_CNTRS_TYPE_110_DPVAL_ARRAY
	            (E_MC959_PS_CHAN_REQD),
	             B_MC191_TO_MC975(E_MT_110_CTR_MC959));

/* CR 20/245729 END */

/* CR 20/243517 START */

            Q_S0020_ADD_DP_VALUES(B_CNTRS_TYPE_110_DPVAL_ARRAY
	            (E_MC962_INV_CHRQ_RD_BSC),
	             B_MC191_TO_MC975(E_MT_110_CTR_MC962));
	       
	     Q_S0020_ADD_DP_VALUES(B_CNTRS_TYPE_110_DPVAL_ARRAY
	            (E_MC963_NON_PS_CHRQ_DIS_CON),
	             B_MC191_TO_MC975(E_MT_110_CTR_MC963));

/* CR 20/243517 END */  

/*CR260349 START*/
	    
	    Q_S0020_ADD_DP_VALUES(B_CNTRS_TYPE_110_DPVAL_ARRAY
	            (E_MC964_VAL_LOC_UPD_RCV_BSC),
	             B_MC191_TO_MC975(E_MT_110_CTR_MC964));
	     
/*CR260349 END*/


            OD;
          OD;
/* CR20/209493 START */
         ELSE
           DO WITH Z_T110_7_2_PTR->(ZM_CELL_INDEX_VALUE(B_CELL_IDX));
            B_CELL_ID := B_CELL_IDX;
            DO WITH B_CTRS_PT7_MT_110;
             Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_19
                (E_C191_NBR_SDCCH_SMS_TERM_TRANS),
                 B_MC191_TO_MC975(E_MT_110_CTR_MC191));

             Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                (E_MC928A_TCH_CAU_LOW_QUAL_UL),
                 B_MC191_TO_MC975(E_MT_110_CTR_MC928A));

             Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                (E_MC928B_TCH_CAU_LOW_LVL_UL),
                 B_MC191_TO_MC975(E_MT_110_CTR_MC928B));

             Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                (E_MC928C_TCH_CAU_LOW_QUAL_DL),
                B_MC191_TO_MC975(E_MT_110_CTR_MC928C));

             Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                (E_MC928D_TCH_CAU_LOW_LVL_DL),
                B_MC191_TO_MC975(E_MT_110_CTR_MC928D));

             Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                (E_MC928E_TCH_CAU_LONG_MSBS_DIST),
                 B_MC191_TO_MC975(E_MT_110_CTR_MC928E));

             Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                (E_MC928F_TCH_CAU_SHORT_MSBS_DIST),
                 B_MC191_TO_MC975(E_MT_110_CTR_MC928F));

             Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                (E_MC928G_TCH_CAU_HIGHLOW_LVL_UL),
                 B_MC191_TO_MC975(E_MT_110_CTR_MC928G));

             Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                (E_MC928H_TCH_CAU_HIGHLOW_LVL_DL),
                 B_MC191_TO_MC975(E_MT_110_CTR_MC928H));


             Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                (E_MC928I_TCH_CAU_AUTRE),
                 B_MC191_TO_MC975(E_MT_110_CTR_MC928I));
/*START :ADDED FOR A-FLEX CHANGES*/
             Q_S0020_ADD_DP_VALUES(B_CNTRS_TYPE_110_DPVAL_ARRAY
                  /*(E_MC8E_PAG_WITH_IMSI),*/ 
               /*    B_MC191_TO_MC975(E_MT_110_CTR_MC961));*/ 
                  /*CR36/251325 START*/ 
                  /* B_MC191_TO_MC975(E_MT_110_CTR_MC8E));*/ 
                  (E_MC961_PAG_WITH_IMSI), 
                   B_MC191_TO_MC975(E_MT_110_CTR_MC961)); 
                  /*CR36/251325 END*/ 
/*END :ADDED FOR A-FLEX CHANGES*/
/* START: WIPRO AMR-WB CHANGE */
            Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                    (E_MC931_TCH_NOR_AMRWB_FR_ALLOC),
                     B_MC191_TO_MC975(E_MT_110_CTR_MC931));
/* END: WIPRO AMR-WB CHANGE */
/* START: WIPRO TFO FOR AMR-WB CHANGE */
             Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                    (E_MC935_NB_CALL_TFO_AMR_WB),
                     B_MC191_TO_MC975(E_MT_110_CTR_MC935));
             Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                    (E_MC936_NB_INTERHO_TFO_AMR_WB),
                     B_MC191_TO_MC975(E_MT_110_CTR_MC936));
             Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                    (E_MC937_NB_EXTHO_TFO_AMR_WB),
                     B_MC191_TO_MC975(E_MT_110_CTR_MC937));
/* END: WIPRO TFO FOR AMR-WB CHANGE */
/* START: WIPRO TFO FOR AMR-NB CHANGE */
             Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                    (E_MC938_NB_CALL_TFO_AMR_NB),
                     B_MC191_TO_MC975(E_MT_110_CTR_MC938));
             Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                    (E_MC939_NB_INTERHO_TFO_AMR_NB),
                     B_MC191_TO_MC975(E_MT_110_CTR_MC939));
             Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                    (E_MC950_NB_EXTHO_TFO_AMR_NB),
                     B_MC191_TO_MC975(E_MT_110_CTR_MC950));
/* END: WIPRO TFO FOR AMR-NB CHANGE */

/* CR 20/245729 START */

              Q_S0020_ADD_DP_VALUES(B_CNTRS_TYPE_110_DPVAL_ARRAY
	            (E_MC959_PS_CHAN_REQD),
	             B_MC191_TO_MC975(E_MT_110_CTR_MC959));

/* CR 20/245729 END */

/* CR 20/243517 START */

            Q_S0020_ADD_DP_VALUES(B_CNTRS_TYPE_110_DPVAL_ARRAY
	            (E_MC962_INV_CHRQ_RD_BSC),
	             B_MC191_TO_MC975(E_MT_110_CTR_MC962));
	       
	     Q_S0020_ADD_DP_VALUES(B_CNTRS_TYPE_110_DPVAL_ARRAY
	            (E_MC963_NON_PS_CHRQ_DIS_CON),
	             B_MC191_TO_MC975(E_MT_110_CTR_MC963));

/* CR 20/243517 END */  

/*CR260349 START*/
	    
	    Q_S0020_ADD_DP_VALUES(B_CNTRS_TYPE_110_DPVAL_ARRAY
	            (E_MC964_VAL_LOC_UPD_RCV_BSC),
	             B_MC191_TO_MC975(E_MT_110_CTR_MC964));
	     
/*CR260349 END*/

            OD;
          OD;
         FI;
/* CR20/209493 END */
        ELSE
          Q_S0287_UPD_T110_7_INVALID(B_CELL_IDX,
                                     M_FS_TCU_TRF_LDC,FALSE);
        FI;
      FI;
    OD;  /* WITH B_CELL_CNTRS */
  OD;    /* WITH MAIN BUFFER */
  ZQ_NBR_CELLS := ZQ_NBR_CELLS - 1;
OD; /* WITH ZQ_NBR_CELLS */
END Q_S0487_UPD_CCI_TCU_TYPE110_7;
/* END : ADD-WIPRO-B10-MR1-CHANGE */
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0901_UPDATE_CCI_TCU_TYPE110_11                   */        
/*                                                                    */        
/*     PROGRAMMER: KALYANA VINEELA M                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 16/11/2010                                      */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*                                                                    */        
/*       UPDATES THE TYPE 110 BLOCK 11 COUNTERS COMING FROM TCU       */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                                                                    */        
/*                      Q_S0020_ADD_DP_VALUES                         */        
/*                      Q_S0900_UPD_T110_11_INVALID                   */        
/*                                                                    */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/                                                                                
Q_S0901_UPD_CCI_TCU_TYPE110_11: PROC(ZF_LDC_BUF_PTR PTR);

DCL ZQ_NBR_CELLS INT;
/*MC975 DEBUG*/
/*DCL ZQ_MC975C2   M_STA_DPVAL;*/
/*MC975 DEBUG*/

DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_STD_CTRS_AREA;
  ZQ_NBR_CELLS := B_NBR_CELLS;
OD;

DO WHILE ZQ_NBR_CELLS /= 0;
  DO WITH ZF_LDC_BUF_PTR ->CM_FY32_TCU_STD_CTRS_AREA;
 /*  DO FOR ZQ_CODAC := 1 TO ZQ_NBR_CELLS; */
   DO WITH B_CODAC_CNTRS_CELL(ZQ_NBR_CELLS);
/*    DO WITH B_CELL_CNTRS(ZQ_NBR_CELLS);  */
    /* COPY THE COUNTERS FOR THE CELLS IN THE LIST INTO THE 
     * DATA STRUCTURE IN MEMORY.
     */
       IF B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC AND
         B_CELL_IDX > 0
      THEN
          IF Z_STD_CELL_LIST(B_CELL_IDX)
      THEN
       DO WITH Z_T110_11_PTR
       ->(ZM_CELL_INDEX_VALUE(LONG_INT((B_CELL_IDX))));

            B_CELL_ID := B_CELL_IDX;
            DO WITH B_CTRS_PT11_MT_110;

               Q_S0020_ADD_DP_VALUES(B_CODAC_CNTRS
                   (E_MC719A_NB_IDR_SUCC_NON_AMR),
                    B_MC718A_TO_B_MC975D(E_MT_110_CTR_MC719A));

               Q_S0020_ADD_DP_VALUES(B_CODAC_CNTRS

                   (E_MC719B_NB_IDR_SUCC_ALL_AMR),
                    B_MC718A_TO_B_MC975D(E_MT_110_CTR_MC719B));

               Q_S0020_ADD_DP_VALUES(B_CODAC_CNTRS

                   (E_MC719C_NB_TCH_HO_SUC_NON_AMR),
                    B_MC718A_TO_B_MC975D(E_MT_110_CTR_MC719C));

               Q_S0020_ADD_DP_VALUES(B_CODAC_CNTRS

                   (E_MC719D_NB_TCH_HO_SUC_ALL_AMR),
                    B_MC718A_TO_B_MC975D(E_MT_110_CTR_MC719D));

               Q_S0020_ADD_DP_VALUES(B_CODAC_CNTRS
                   (E_MC719I_NB_INC_IDR_SUCC),
                    B_MC718A_TO_B_MC975D(E_MT_110_CTR_MC719I));

	       Q_S0020_ADD_DP_VALUES(B_CODAC_CNTRS
                   (E_MC719J_NB_INC_TCH_HO_SUCC),
                    B_MC718A_TO_B_MC975D(E_MT_110_CTR_MC719J));

                          
             OD;/*WITH B_CTRS_PT11_MT_110*/
          OD;/*WITH Z_T110_11_PTR*/

        ELSE
          Q_S0900_UPD_T110_11_INVALID(B_CELL_IDX,
                                     M_FS_TCU_TRF_LDC,FALSE);
        FI;/*Z_STD_CELL_LIST*/                           
      FI;/*B_CELL_IDX*/                             
    OD;/* WITH B_CODAC_CNTRS_CELL */

   /*BEGIN : AUPoIP*/ 
   DO WITH B_CELL_CNTRS(ZQ_NBR_CELLS);
   /* DO WITH B_CELL_CNTRS(ZQ_NBR_CELLS);  */
    /* COPY THE COUNTERS FOR THE CELLS IN THE LIST INTO THE 
     * DATA STRUCTURE IN MEMORY.
     */
       IF B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC AND
         B_CELL_IDX > 0
      THEN
          IF Z_STD_CELL_LIST(B_CELL_IDX)
      THEN
       DO WITH Z_T110_11_PTR
       ->(ZM_CELL_INDEX_VALUE(LONG_INT((B_CELL_IDX))));
	 
	 /*MC975 DEBUG*/
      /*TRACEINFO :='BF LCELLID (%d) HIS CELLID(%d)  ';
      TRC_BSC_PM1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_TCU_TRF_LDC),
              TRACEID(ERIR),
              TRACEINFO,
              LONG_INT(NUM(B_CELL_IDX)),
              LONG_INT(NUM(B_CELL_ID)),
              LONG_INT(0));*/
        /*MC975 DEBUG*/

            B_CELL_ID := B_CELL_IDX;
      /*MC975 DEBUG*/
     /* TRACEINFO :='AF LCELLID (%d) HIS CELLID(%d)  ';
      TRC_BSC_PM1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_TCU_TRF_LDC),
              TRACEID(ERIR),
              TRACEINFO,
              LONG_INT(NUM(B_CELL_IDX)),
              LONG_INT(NUM(B_CELL_ID)),
              LONG_INT(0));*/
        /*MC975 DEBUG*/

            DO WITH B_CTRS_PT11_MT_110;
              /*MC975 DEBUG*/
           /*  ZQ_MC975C2:=B_MC718A_TO_B_MC975D(E_MT_110_CTR_MC975C);
         TRACEINFO :='BF LDC MC975C(%d) HIS MC975C(%d)';
   	 TRC_BSC_PM1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_TCU_TRF_LDC),
              TRACEID(ERIR),
              TRACEINFO,
     LONG_INT(NUM(B_CNTRS_TYPE_110(E_MC975C_NB_BSS_INT_HO_MSC_ALLOC))),
     LONG_INT((ZQ_MC975C2)),
     LONG_INT(0));*/
      /*MC975 DEBUG*/

		Q_S0080_ADD_INT_TO_DPVAL(
    	           B_CNTRS_TYPE_110(E_MC975C_NB_BSS_INT_HO_MSC_ALLOC),
	             B_MC718A_TO_B_MC975D(E_MT_110_CTR_MC975C));
      /*MC975 DEBUG*/
       /*  TRACEINFO :='AF LDC MC975C(%d) HIS MC975C(%d)';
   	 TRC_BSC_PM1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_TCU_TRF_LDC),
              TRACEID(ERIR),
              TRACEINFO,
      LONG_INT(NUM(B_CNTRS_TYPE_110(E_MC975C_NB_BSS_INT_HO_MSC_ALLOC))),
      LONG_INT((ZQ_MC975C2)),
              LONG_INT(0));*/
        /*MC975 DEBUG*/

	   OD;/*WITH B_CTRS_PT11_MT_110*/
        OD;/*WITH Z_T110_11_PTR*/
      ELSE
          Q_S0900_UPD_T110_11_INVALID(B_CELL_IDX,
                                      M_FS_TCU_TRF_LDC,FALSE);
      FI;/*Z_STD_CELL_LIST*/
    FI;/*B_CELL_IDX*/
   OD; /*WITH B_CELL_CNTRS*/
   /*END : AUPoIP*/

    ZQ_NBR_CELLS := ZQ_NBR_CELLS - 1;                                             
   OD; /* WITH MAIN BUFFER */                                                    
   OD; /* WITH ZQ_NBR_CELLS */                                                     
                                                   
END Q_S0901_UPD_CCI_TCU_TYPE110_11;  
  
/*END CR36/302024 RFI4448 */
/*BEGIN : CR20/313054 */
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0903_UPDATE_CCI_TCU_TYPE110_13                   */        
/*                                                                    */        
/*     PROGRAMMER: BALA                                               */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 16/11/2010                                      */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*                                                                    */        
/*       UPDATES THE TYPE 110 BLOCK 13 COUNTERS COMING FROM TCU       */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                                                                    */        
/*                      Q_S0020_ADD_DP_VALUES                         */        
/*                      Q_S0900_UPD_T110_13_INVALID                   */        
/*                                                                    */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/                                                                                
Q_S0903_UPD_CCI_TCU_TYPE110_13: PROC(ZF_LDC_BUF_PTR PTR);

DCL ZQ_NBR_CELLS INT;

DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_STD_CTRS_AREA;
  ZQ_NBR_CELLS := B_NBR_CELLS;
OD;

DO WHILE ZQ_NBR_CELLS /= 0;
  DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_STD_CTRS_AREA;
    DO WITH B_CELL_CNTRS(ZQ_NBR_CELLS);
    /* COPY THE COUNTERS FOR THE CELLS IN THE LIST INTO THE
     * DATA STRUCTURE IN MEMORY.
     */
      IF B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC AND
         B_CELL_IDX > 0
      THEN
        IF Z_STD_CELL_LIST(B_CELL_IDX)
        THEN         
		 DO WITH Z_T110_13_PTR
         ->(ZM_CELL_INDEX_VALUE_INT(B_CELL_IDX));		 
            B_CELL_ID := B_CELL_IDX;
            DO WITH B_CTRS_PT13_MT_110;     
             
             Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                (E_MC1520_TRF_VOL_AMR_FR),
                 B_MC1520_TO_MC1539(E_MT_110_CTR_MC1520));

             Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                (E_MC1521_TRF_VOL_AMR_HR),
                 B_MC1520_TO_MC1539(E_MT_110_CTR_MC1521));

             Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                (E_MC1522_TRF_VOL_EFR),
                 B_MC1520_TO_MC1539(E_MT_110_CTR_MC1522));

             Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                (E_MC1523_TRF_VOL_FR),
                 B_MC1520_TO_MC1539(E_MT_110_CTR_MC1523));
			
	     Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                (E_MC1524_TRF_VOL_HR),
                 B_MC1520_TO_MC1539(E_MT_110_CTR_MC1524));

             Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
                (E_MC1525_TRF_VOL_WB_AMR),
                 B_MC1520_TO_MC1539(E_MT_110_CTR_MC1525));
            /* BEGIN CR 889255*/
	     
	     Q_S0080_ADD_INT_TO_DPVAL(B_CNTRS_TYPE_110
	        (E_MC1530_TRF_VOL_DCS1800_BND_TRX),
		B_MC1520_TO_MC1539(E_MT_110_CTR_MC1530));
	   /* END CR 889255*/
	  OD;

         OD; 
        ELSE
          Q_S0904_UPD_T110_13_INVALID(B_CELL_IDX,
                                     M_FS_TCU_TRF_LDC,FALSE);
        FI; /* FOR IF Z_STD_CELL_LIST */
      FI;   /* FOR IF B_CELL_IDX */
    OD;  /* WITH B_CELL_CNTRS */
  OD;    /* WITH MAIN BUFFER */
  ZQ_NBR_CELLS := ZQ_NBR_CELLS - 1;
OD; /* WITH ZQ_NBR_CELLS */                                                     
                                                   
END Q_S0903_UPD_CCI_TCU_TYPE110_13;  
  
/*END : CR20/313054 */



/* CR 889255*/

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0801_UPD_CCI_TCH_TYPE110_13                      */        
/*                                                                    */        
/*     PROGRAMMER:                                                    */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 16/11/2010                                      */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*                                                                    */        
/*       UPDATES THE TYPE 110 BLOCK 13 COUNTERS COMING FROM TCHRM     */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                                                                    */        
/*                      Q_S0020_ADD_DP_VALUES                         */        
/*                      Q_S0900_UPD_T110_13_INVALID                   */        
/*                                                                    */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/                                                                                

Q_S0801_UPD_CCI_TCH_TYPE110_13: PROC(ZF_LDC_BUF_PTR PTR,
				    ZF_LDC_SEQ_NBR INT);

DCL ZQ_NBR_CELLS      INT;
DCL ZQ_IDX            INT;
DCL ZQ_FIRST_CP_OF_AP BOOL;
DCL ZQ_ACT_IDX INT;
DCL Z_ACT_BOOL BOOL;
DCL Z_PM_CTR_1531_PTR PTR;
DCL Z_VAR ZM_PM_TCH_CELL_CTRS_1531;

IF ZF_LDC_SEQ_NBR > 5
THEN
  ZQ_NBR_CELLS := ZF_LDC_BUF_PTR ->
             CM_FY32_PM_TCH_UB_CELLS.B_FIXED.B_NBR_CELLS;
  IF ZQ_NBR_CELLS > CM_FY32_PM_MAX_CELLS_PER_TCHRM_LDC_UB OR
     ZQ_NBR_CELLS < 0 
  THEN
    ZQ_NBR_CELLS := 0;
    Q_S0010_CCDC_ERROR(M_ERC6_USER_REC,
                     M_ERT0019_INC_MESS_DATA, 45, 0194);
  FI;
  DO WHILE ZQ_NBR_CELLS /= 0;
    DO WITH ZF_LDC_BUF_PTR -> CM_FY32_PM_TCH_UB_CELLS;
      DO WITH B_CELL_CTRS(LONG_INT((ZQ_NBR_CELLS)));
        IF (B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC) AND
           (B_CELL_IDX >  0)
         THEN
          IF Z_STD_CELL_LIST(B_CELL_IDX)
          THEN
           DO WITH Z_T110_13_PTR->(ZM_CELL_INDEX_VALUE_INT(B_CELL_IDX));
              B_CELL_ID := B_CELL_IDX;
            DO WITH B_CTRS_PT13_MT_110;
             
	     DO FOR ZQ_ACT_IDX := 1 TO 64 WHILE NOT Z_ACT_BOOL;
              DO WITH Z_R_PM_ACT_PTR -> ZM_R_PM_ACT(ZQ_ACT_IDX); 
		IF D_CURR_PER = D_LAST_REP + 1 
                THEN
                  ZQ_FIRST_CP_OF_AP := TRUE;
		  Z_ACT_BOOL :=TRUE;
                 FI;
                OD;
              OD;
		Z_ACT_BOOL:=FALSE;
              IF NOT(ZQ_FIRST_CP_OF_AP)
              THEN
               IF B_TYPE_110_MC1531.B_ADJUSTMENT= TRUE
	       THEN 
		B_TYPE_110_MC1531.B_NBR_OF_TIMES_CONG_OBSERVD := 
                B_TYPE_110_MC1531.B_NBR_OF_TIMES_CONG_OBSERVD -1;
		FI;
	      FI;
	      DO WITH Z_T110_MC1531_PTR->.ZB_TYPE_110_MC1531(B_CELL_IDX); 
       Q_S0040_ADD_INT_TO_INT(B_TYPE_110_MC1531
		.B_MC1531_TCH_CONG_TIME,
		ZB_MC1531_TCH_CONG_TIME);
       Q_S0040_ADD_INT_TO_INT(B_TYPE_110_MC1531.
		B_NBR_OF_TIMES_CONG_OBSERVD,
                ZB_NBR_OF_TIMES_CONG_OBSERVD);
		OD;
	    OD;
           OD; 
        ELSE
          Q_S0904_UPD_T110_13_INVALID(B_CELL_IDX,
                                     M_FS_TCHRM_LDC,FALSE);
        FI; 
      FI;  
    OD;  
  OD;   
  ZQ_NBR_CELLS := ZQ_NBR_CELLS - 1;
OD; 
FI;
                                                   
END Q_S0801_UPD_CCI_TCH_TYPE110_13; 


/* BEGIN :ADDED FOR A-FLEX NRI COUNTERS*/
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0449_UPD_T110_TCU_BSS_INVALID                    */
/*                                                                    */
/*     PROGRAMMER:  MALARVIZHI                                        */       
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 10/7/2008                                       */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                                                                    */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                                                                    */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                                                                    */
/*                                                                    */
/*     CALLED FROM:                                                   */
/*                                                                    */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0449_UPD_T110_TCU_BSS_INVALID : PROC();  

DO WITH Z_T110_6_PTR ->;
  DO WITH B_CTRS_PT6_MT_110;
  /*FR252210*/
  DO WITH Z_R_BSS_PAR2_PTR -> ZM_R_BSS_PAR2;
  IF D_EN_AFLEX = TRUE THEN
  /*FR252210*/
         B_MC941.B_LOW  := ZS_FFFE;
         B_MC941.B_HIGH := ZS_FFFF;
  /*FR252210*/
  ELSE
  	B_MC941.B_LOW := 0;
  	B_MC941.B_HIGH := 0;
  FI;
  OD;
  /*FR252210*/             
  OD;
OD;
END Q_S0449_UPD_T110_TCU_BSS_INVALID ;

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE:  Q_S0490_UPD_T110_TCU_BSS                           */        
/*                                                                    */        
/*     PROGRAMMER:  MALARVIZHI                                        */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 10/7/2008                                       */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*      UPDATE THE TYPE 110 BLOCK 6 COUNTERS COMING FROM THE TCU      */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*                      Q_S0603_UPD_T110_3_INVALID                    */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/
Q_S0490_UPD_T110_TCU_BSS: PROC(ZF_LDC_BUF_PTR PTR);
DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_STD_CTRS_AREA;                       
  DO WITH Z_T110_6_PTR->;                                                    
    DO WITH B_CTRS_PT6_MT_110;   
    /*FR252210*/
    DO WITH Z_R_BSS_PAR2_PTR -> ZM_R_BSS_PAR2;
    IF D_EN_AFLEX = TRUE THEN
    /*FR252210*/
     Q_S0060_ADD_LONG_INT(B_MC941_CMSERQ_NRI_UNKNW,
                  B_MC941);
    /*FR252210*/
    ELSE
    	B_MC941.B_LOW := 0;
    	B_MC941.B_HIGH := 0;
    FI;
    OD;
    /*FR252210*/
    OD;
  OD;
OD;
END Q_S0490_UPD_T110_TCU_BSS;

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE:  Q_S0491_UPD_CCI_TCU_TYPE110_9                      */        
/*                                                                    */        
/*     PROGRAMMER: MALARVIZHI                                         */
/*                                                                    */        
/*                                                                    */        
/*     LAST MODIFIED BY:                    DATE:                     */        
/*                                                                    */        
/*     CREATION DATE: 26/06/2008                                      */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*      UPDATE THE TYPE 110 BLOCK 8 COUNTERS COMING FROM THE TCU      */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*                      Q_S0603_UPD_T110_3_INVALID                    */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
                                                                                
Q_S0491_UPD_CCI_TCU_TYPE110_9 : PROC(ZF_LDC_BUF_PTR PTR);                      
                                                                                
DCL ZQ_NBR_MSC INT;                                                             
DCL ZQ_I INT;
DCL ZQ_J INT;                                                                   
DCL ZQ_MSC_SBL INT;                                                             
                                                                                
DO WITH  ZF_LDC_BUF_PTR -> CM_FY32_TCU_AFLEX_CTRS_AREA;                   
ZQ_NBR_MSC  := B_NBR_MSC;                                                                              
IF ZQ_NBR_MSC > CM_FY32_MAX_SUPPORTED_NRI OR                                    
   ZQ_NBR_MSC < 0                                                               
THEN                                                                            
    /* OUT OF RANGE */                                                          
  ZQ_NBR_MSC := 0;                                                              
  Q_S0010_CCDC_ERROR(M_ERC6_USER_REC,                                           
                     M_ERT0019_INC_MESS_DATA, 49, 0194);                        
FI;                                                                             
                                                                                
DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_AFLEX_CTRS_AREA;                          
  DO FOR ZQ_I := 1 TO ZQ_NBR_MSC;                                               
   ZQ_MSC_SBL := B_AFLEX_CNTRS(ZQ_I).B_MSC_SBL;                                 
   IF ZQ_MSC_SBL > CM_FY32_MAX_SUPPORTED_NRI OR                                 
     ZQ_MSC_SBL < 0                                                             
   THEN                                                                         
    /*DO NOTHING*/                                                              
   ELSE  
/*FR251467_68_69*/ 
MSC_TCU_LOOP:  
/*FR251467_68_69*/ 
   DO FOR ZQ_J :=1 TO M_MAX_MSC;                                                                     
    DO WITH Z_R_MSC_MGT_PTR -> ZM_R_MSC_MGT(ZQ_J);                        
/*FR250253*/
/*  IF D_MSC_MST = E_MS_IT OR D_MSC_MST = E_MS_FIT*/ 
    IF (D_MSC_MST /= E_MS_NEQ) 
/*FR251467_68_69*/ 
    AND (D_MSC_SBL = ZQ_MSC_SBL)
/*FR251467_68_69*/ 
/*FR250253*/
     THEN                         
      DO WITH Z_T110_8_PTR ->(ZQ_J);                                     
        B_MSC_IDX := ZQ_MSC_SBL;                                                
        DO WITH B_CTRS_PT8_MT_110;                                             
                                                                                
          Q_S0060_ADD_LONG_INT(
            B_AFLEX_CNTRS(ZQ_I).B_CNTRS_TYPE_110_PER_MSC
                   (E_MC1204_MSC_SELEC_NRI),                                   
               B_MC1109_TO_MC1207(E_MT_110_CTR_MC1204));                  
           Q_S0060_ADD_LONG_INT(
             B_AFLEX_CNTRS(ZQ_I).B_CNTRS_TYPE_110_PER_MSC
                    (E_MC1205_MSC_SELEC_IMSI),                                  
               B_MC1109_TO_MC1207(E_MT_110_CTR_MC1205));                  
           Q_S0060_ADD_LONG_INT(
              B_AFLEX_CNTRS(ZQ_I).B_CNTRS_TYPE_110_PER_MSC
                   (E_MC1206_MSC_SELEC_LB),                                    
               B_MC1109_TO_MC1207(E_MT_110_CTR_MC1206));       
/* Start : CR20/279046 */
 	   Q_S0060_ADD_LONG_INT(
              B_AFLEX_CNTRS(ZQ_I).B_CNTRS_TYPE_110_PER_MSC
                   (E_MC1207_MSC_SELEC_STORE),                                    
               B_MC1109_TO_MC1207(E_MT_110_CTR_MC1207));             
/* End   : CR20/279046 */
            OD;
           OD;                                                                  
/*FR251467_68_69*/ 

EXIT MSC_TCU_LOOP;

/*FR251467_68_69*/ 
         FI;                                                                    
       OD; 
      OD;                                                              
    FI;                                                                       
   OD;  /* WITH B_ALFLEX_CNTRS */                                              
  OD;    /* WITH MAIN BUFFER */    
OD;                                                                                
END Q_S0491_UPD_CCI_TCU_TYPE110_9;
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0492_UPD_T110_TCU_MSC_INVALID                    */
/*                                                                    */
/*     PROGRAMMER:  MALARVIZHI                                        */       
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE:                                                 */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                                                                    */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                                                                    */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                                                                    */
/*                                                                    */
/*     CALLED FROM:                                                   */
/*                                                                    */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0492_UPD_T110_TCU_MSC_INVALID : PROC();  

DCL ZQ_NBR_MSC INT;
DCL ZQ_I INT;
DCL ZQ_MSC_SBL INT;
DCL ZQ_TMP_CTR INT;
ZQ_TMP_CTR := ZS_FFFF;

DO FOR ZQ_I := 1 TO M_MAX_MSC;

   DO WITH Z_R_MSC_MGT_PTR -> ZM_R_MSC_MGT(ZQ_I);
   ZQ_MSC_SBL := D_MSC_SBL;
/*FR250253*/
/* IF D_MSC_MST = E_MS_IT OR D_MSC_MST = E_MS_FIT THEN*/ 
   IF (D_MSC_MST /= E_MS_NEQ) THEN
/*FR250253*/
      DO WITH Z_T110_8_PTR ->(ZQ_I);
        B_MSC_IDX := ZQ_MSC_SBL; 
        DO WITH B_CTRS_PT8_MT_110;

           Q_S0080_ADD_INT_TO_DPVAL(
           ZQ_TMP_CTR,
           B_MC1109_TO_MC1207(E_MT_110_CTR_MC1204)) ;
             
           Q_S0080_ADD_INT_TO_DPVAL(
           ZQ_TMP_CTR,
           B_MC1109_TO_MC1207(E_MT_110_CTR_MC1205));
           
           Q_S0080_ADD_INT_TO_DPVAL(
           ZQ_TMP_CTR,
           B_MC1109_TO_MC1207(E_MT_110_CTR_MC1206));
/*  Start : CR20/279046  */
 	   Q_S0080_ADD_INT_TO_DPVAL(
           ZQ_TMP_CTR,
           B_MC1109_TO_MC1207(E_MT_110_CTR_MC1207));
/*  End   : CR20/279046  */
        OD;
      OD;
   FI;  
  OD;
OD;                                  
END Q_S0492_UPD_T110_TCU_MSC_INVALID;
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0449_UPD_T110_TCU_NRI_INVALID                    */
/*                                                                    */
/*     PROGRAMMER:  MALARVIZHI                                        */       
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE:                                                 */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                                                                    */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                                                                    */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                                                                    */
/*                                                                    */
/*     CALLED FROM:                                                   */
/*                                                                    */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0449_UPD_T110_TCU_NRI_INVALID : PROC();  

DCL ZQ_NBR_MSC INT;
DCL ZQ_I INT;
DCL ZQ_NO_NRI INT;
DCL ZQ_MSC_SBL INT;
DCL ZQ_L INT;
DCL ZQ_NRI_MSC_SBL INT;
DCL ZQ_TMP_CTR INT;
ZQ_TMP_CTR := ZS_FFFF;

DO FOR ZQ_I := 1 TO M_MAX_MSC;
  DO WITH Z_R_MSC_MGT_PTR -> ZM_R_MSC_MGT(ZQ_I);
/*FR250253*/
/*  IF ((D_MSC_MST = E_MS_IT) OR (D_MSC_MST = E_MS_FIT) AND
        (D_MSC_SBL /= H'0000) AND (D_MSC_SBL /= H'FFFF))THEN*/ 
    IF ((D_MSC_MST /= E_MS_NEQ) AND
        ((D_MSC_SBL /= H'0000) AND (D_MSC_SBL /= H'FFFF)))THEN
/*FR250253*/
     ZQ_MSC_SBL := D_MSC_SBL;	
      DO FOR ZQ_NO_NRI := 1 TO 1024;
       DO WITH Z_R_NRI_MAP_PTR -> ZM_R_NRI_MAP(ZQ_NO_NRI);
        ZQ_NRI_MSC_SBL := D_MSC_SBL;
        IF (ZQ_NRI_MSC_SBL = ZQ_MSC_SBL)
        THEN
         DO FOR ZQ_L := 1 TO CM_FY32_MAX_SUPPORTED_NRI;
          DO WITH Z_T110_10_PTR ->(ZQ_L);
           IF ((B_MSC_SBL = ZQ_NRI_MSC_SBL)AND(B_NRI_NBR = ZQ_NO_NRI))
           THEN
          /*  B_MSC_SBL := ZQ_NRI_MSC_SBL;
              B_NRI_NBR := ZQ_NO_NRI;*/

              DO WITH B_CTRS_PT10_MT_110;

                 Q_S0080_ADD_INT_TO_DPVAL(
                 ZQ_TMP_CTR,
                 B_MC980_TO_MC985E(E_MT_110_CTR_MC980));

                 Q_S0080_ADD_INT_TO_DPVAL(
                 ZQ_TMP_CTR,
                 B_MC980_TO_MC985E(E_MT_110_CTR_MC981));

                 Q_S0080_ADD_INT_TO_DPVAL(
                 ZQ_TMP_CTR,
                 B_MC980_TO_MC985E(E_MT_110_CTR_MC982));

                 Q_S0080_ADD_INT_TO_DPVAL(
                 ZQ_TMP_CTR,
                 B_MC980_TO_MC985E(E_MT_110_CTR_MC983));

                 Q_S0080_ADD_INT_TO_DPVAL(
                 ZQ_TMP_CTR,
                 B_MC980_TO_MC985E(E_MT_110_CTR_MC984));

                 Q_S0080_ADD_INT_TO_DPVAL(
                 ZQ_TMP_CTR,
                 B_MC980_TO_MC985E(E_MT_110_CTR_MC985A));

                 Q_S0080_ADD_INT_TO_DPVAL(
                 ZQ_TMP_CTR,
                 B_MC980_TO_MC985E(E_MT_110_CTR_MC985B));

                 Q_S0080_ADD_INT_TO_DPVAL(
                 ZQ_TMP_CTR,
                 B_MC980_TO_MC985E(E_MT_110_CTR_MC985C));

                 Q_S0080_ADD_INT_TO_DPVAL(
                 ZQ_TMP_CTR,
                 B_MC980_TO_MC985E(E_MT_110_CTR_MC985D));
 
                 Q_S0080_ADD_INT_TO_DPVAL(
                 ZQ_TMP_CTR,
                 B_MC980_TO_MC985E(E_MT_110_CTR_MC985E));

              OD;
             FI;
           OD; 
         OD;
        FI;
       OD;
     OD;
    FI;  
  OD;
OD;                                  
END Q_S0449_UPD_T110_TCU_NRI_INVALID;
/* BEGIN CR:745699 */
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0704_UPD_TCU_OLC_T110_15                         */        
/*                                                                    */        
/*     PROGRAMMER: SABIYA                                             */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 17/09/2012                                      */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*                                                                    */        
/*       UPDATES THE TYPE 110 BLOCK 15 OLC COUNTERS COMING FROM TCU   */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                                                                    */        
/*                      Q_S0010_CCDC_ERROR                            */
/*			Q_S0020_ADD_DP_VALUES                         */
/*                      Q_S0040_ADD_INT_TO_INT                        */
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */
/*                      Q_S0705_UPD_OLC_T110_15_INVALID               */        
/*                                                                    */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/                                                                                
Q_S0704_UPD_TCU_OLC_T110_15: PROC(ZF_LDC_BUF_PTR PTR);
					 
DCL ZQ_NBR_OF_OLC_CELLS     INT;
DCL ZQ_TRX, ZQ_RRH, ZQ_RRH_OLC INT; 
DCL ZQ_RRH_FOUND  BOOL; 
DCL ZQ_OLC_CELL_IDX M_CELL_IDX;
DCL ZQ_OLC_TRX_IDX M_TRX_IDX;


DCL ZQ_TRX_OLC INT;
DCL ZQ_FIRST_RRH_FOUND  BOOL;


ZQ_RRH_FOUND := FALSE;
ZQ_NBR_OF_OLC_CELLS := 0;

ZQ_FIRST_RRH_FOUND := FALSE;

DO WITH ZF_LDC_BUF_PTR-> CM_FY32_TCU_STD_CTRS_AREA;   
    ZQ_NBR_OF_OLC_CELLS := B_NBR_OLC;
OD;

 DO WHILE ZQ_NBR_OF_OLC_CELLS /= 0;
    DO WITH ZF_LDC_BUF_PTR->CM_FY32_TCU_STD_CTRS_AREA.
	                      B_OLC_CNTRS(ZQ_NBR_OF_OLC_CELLS);
    
  IF B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC AND
           B_CELL_IDX > 0
    THEN
   IF Z_STD_CELL_LIST(B_CELL_IDX)
    THEN 	 
	
     IF B_CELL_IDX <= (CM_FY32_MAX_CELLS_PER_BSC/2) 
     THEN
       ZQ_OLC_CELL_IDX :=B_CELL_IDX;
       ZQ_OLC_TRX_IDX := B_TRX_IDX;
	   
       DO FOR ZQ_RRH := 1 TO B_NBR_RRH/*6*/;
        DO WITH B_RRH_CNTRS(ZQ_RRH);
        
	IF B_RRHID_ID > 0 AND B_RRHID_ID <= 99
         THEN 
        DO WITH Z_T110_15_1_PTR->(LONG_INT((B_CELL_IDX)));
	     
	 DO FOR ZQ_RRH_OLC := 1 TO 6 WHILE NOT ZQ_RRH_FOUND;
			  
    	  DO WITH B_RRH_ARY(ZQ_RRH_OLC).B_TRX_ARY(ZQ_OLC_TRX_IDX);
	 
        	 IF (B_RRH_IDX = H'FF) OR
                   ((B_RRH_IDX /= H'FF)  AND
                   (B_RRH_IDX = B_RRHID_ID))
                  THEN
/*Begin order SITE_TRX_ID in result file*/
                  IF (B_RRH_IDX = H'FF)
                  THEN
                  ZQ_FIRST_RRH_FOUND := TRUE;
                  FI;
/*End order SITE_TRX_ID in result file*/
                    ZQ_RRH_FOUND := TRUE;
                    B_RRH_IDX := B_RRHID_ID;
		    B_CELL_ID := ZQ_OLC_CELL_IDX;
		    B_TRX_ID :=  ZQ_OLC_TRX_IDX;
          TRACEINFO := '1TCUCELLID,TRXID,RRHID:=%d,%d,%d';
   TRC_BSC_PM1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_CCDC_SSM),
              TRACEID(NORM),
              TRACEINFO,
              LONG_INT((B_CELL_ID)),
              LONG_INT((B_TRX_ID)),
              LONG_INT((B_RRH_IDX)));
              	    
/*Begin order SITE_TRX_ID in result file*/
               IF ZQ_FIRST_RRH_FOUND = TRUE
              THEN 
                  DO FOR ZQ_TRX_OLC := 1 TO M_MAX_TRX_PER_OLC; 
                    DO WITH B_RRH_ARY(ZQ_RRH_OLC).
                               B_TRX_ARY(ZQ_TRX_OLC); 
                    B_RRH_IDX := B_RRHID_ID;
                    OD;
                 OD; 
               ZQ_FIRST_RRH_FOUND := FALSE;
              FI;     
/*End order SITE_TRX_ID in result file*/

            DO WITH B_CTRS_PT15_MT_110;
             DO WITH B_TYPE_110_OLC_CNTRS;	
                   				  
  	      Q_S0020_ADD_DP_VALUES(                     /*934803*/
               B_MC1600_TO_MC1614(E_MC1600_OLC_NB_CHAN_REQD),
               B_MC1600_TO_MC1601(E_MT_110_CTR_MC1600));

               Q_S0020_ADD_DP_VALUES(
               B_MC1600_TO_MC1614 /*CR:934803 YX*/
               (E_MC1601_OLC_NB_IMM_ASS_EXC_FAIL),
               B_MC1600_TO_MC1601
               (E_MT_110_CTR_MC1601));
         
	       Q_S0040_ADD_INT_TO_INT(
               B_MC1602_TO_MC1611
               (E_MC1602_OLC_NB_NA_SUCC_TRX),
               B_MC1602);

       	       Q_S0020_ADD_DP_VALUES(
               B_MC1600_TO_MC1614 /*CR:934803 YX*/
               (E_MC1603_OLC_NB_TCH_NOR_ASS_ATPT),
               B_MC1603
               );

               Q_S0040_ADD_INT_TO_INT(
               B_MC1602_TO_MC1611
               (E_MC1611_OLC_NB_TCH_EST_FAIL_TRX),
               B_MC1610_TO_MC1612(E_MT_110_CTR_MC1611));
 
               Q_S0040_ADD_INT_TO_INT(
               B_MC1602_TO_MC1611
               (E_MC1610_OLC_NB_TCH_DROP_EST_TRX),
               B_MC1610_TO_MC1612(E_MT_110_CTR_MC1610));
 
               Q_S0020_ADD_DP_VALUES(
               B_MC1600_TO_MC1614 /*CR:934803 YX*/
               (E_MC1613_OLC_NB_TCH_DROP_BSS_TRX),
               B_MC1613
               );
               
               /* BEGIN CR:934803 YX*/
				       Q_S0020_ADD_DP_VALUES(
                 B_MC1600_TO_MC1614 
                  (E_MC1614_OLC_NB_DIS_CHN_REQD),
                 B_MC1614_TO_MC1634
                  (E_MT_110_CTR_MC1614));                  
           
				       /* END CR:934803 YX*/
	        OD;
	       OD; /* B_CTRS_PT15_MT_110 */	
           FI; /*B_RRH_IDX = H'FF */
	  OD; /* B_RRH_ARY */
	 OD;  /* ZQ_RRH_OLC */
        OD; /* Z_T110_15_1_PTR */
       FI;
 
      ZQ_RRH_FOUND := FALSE;
	   
      OD; /* B_RRH_CNTRS */
     OD;
    
     ELSIF B_CELL_IDX > (CM_FY32_MAX_CELLS_PER_BSC/2) AND
        B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC 	
      THEN
       	   ZQ_OLC_CELL_IDX :=B_CELL_IDX;
       ZQ_OLC_TRX_IDX := B_TRX_IDX;
	   
       DO FOR ZQ_RRH := 1 TO B_NBR_RRH/*6*/;
        DO WITH B_RRH_CNTRS(ZQ_RRH);
        
		IF B_RRHID_ID > 0 AND B_RRHID_ID <= 99
         THEN 
          DO WITH Z_T110_15_2_PTR ->(LONG_INT((B_CELL_IDX)));
	     
           DO FOR ZQ_RRH_OLC := 1 TO 6 WHILE NOT ZQ_RRH_FOUND;
			  
            DO WITH B_RRH_ARY(ZQ_RRH_OLC).B_TRX_ARY(ZQ_OLC_TRX_IDX);
			 
			 IF (B_RRH_IDX = H'FF) OR
                   ((B_RRH_IDX /= H'FF)  AND
                   (B_RRH_IDX = B_RRHID_ID))
                THEN
/*Begin order SITE_TRX_ID in result file*/
                  IF (B_RRH_IDX = H'FF)
                  THEN
                  ZQ_FIRST_RRH_FOUND := TRUE;
                  FI;
/*End order SITE_TRX_ID in result file*/
                 ZQ_RRH_FOUND := TRUE;
                 B_RRH_IDX := B_RRHID_ID;
				 B_CELL_ID := ZQ_OLC_CELL_IDX;
				 B_TRX_ID :=  ZQ_OLC_TRX_IDX;
				 
          TRACEINFO := '2TCUCELLID,TRXID,RRHID:=%d,%d,%d';
   TRC_BSC_PM1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_CCDC_SSM),
              TRACEID(NORM),
              TRACEINFO,
              LONG_INT((B_CELL_ID)),
              LONG_INT((B_TRX_ID)),
              LONG_INT((B_RRH_IDX)));
              	    
/*Begin order SITE_TRX_ID in result file*/
               IF ZQ_FIRST_RRH_FOUND = TRUE
              THEN 
                  DO FOR ZQ_TRX_OLC := 1 TO M_MAX_TRX_PER_OLC; 
                    DO WITH B_RRH_ARY(ZQ_RRH_OLC).
                               B_TRX_ARY(ZQ_TRX_OLC); 
                    B_RRH_IDX := B_RRHID_ID;
                    OD;
                 OD; 
               ZQ_FIRST_RRH_FOUND := FALSE;
              FI;     
/*End order SITE_TRX_ID in result file*/
            DO WITH B_CTRS_PT15_MT_110;
             DO WITH B_TYPE_110_OLC_CNTRS;
                   				  
  		      Q_S0020_ADD_DP_VALUES(                   /*934803*/
               B_MC1600_TO_MC1614(E_MC1600_OLC_NB_CHAN_REQD),
               B_MC1600_TO_MC1601(E_MT_110_CTR_MC1600));

               Q_S0020_ADD_DP_VALUES(
               B_MC1600_TO_MC1614 /*CR:934803 YX*/
               (E_MC1601_OLC_NB_IMM_ASS_EXC_FAIL),
               B_MC1600_TO_MC1601
               (E_MT_110_CTR_MC1601));
         
               Q_S0040_ADD_INT_TO_INT(
               B_MC1602_TO_MC1611
               (E_MC1602_OLC_NB_NA_SUCC_TRX),
               B_MC1602);

       	       Q_S0020_ADD_DP_VALUES(
               B_MC1600_TO_MC1614 /*CR:934803 YX*/
               (E_MC1603_OLC_NB_TCH_NOR_ASS_ATPT),
               B_MC1603
               );

               Q_S0040_ADD_INT_TO_INT(
               B_MC1602_TO_MC1611
               (E_MC1611_OLC_NB_TCH_EST_FAIL_TRX),
               B_MC1610_TO_MC1612(E_MT_110_CTR_MC1611));
 
               Q_S0040_ADD_INT_TO_INT(
               B_MC1602_TO_MC1611
               (E_MC1610_OLC_NB_TCH_DROP_EST_TRX),
               B_MC1610_TO_MC1612(E_MT_110_CTR_MC1610));
 
               Q_S0020_ADD_DP_VALUES(
               B_MC1600_TO_MC1614 /*CR:934803 YX*/
               (E_MC1613_OLC_NB_TCH_DROP_BSS_TRX),
               B_MC1613
               );
               
               /* BEGIN CR:934803 YX*/
				       Q_S0020_ADD_DP_VALUES(
                 B_MC1600_TO_MC1614
                  (E_MC1614_OLC_NB_DIS_CHN_REQD),                 
                 B_MC1614_TO_MC1634
                  (E_MT_110_CTR_MC1614));                  
  
				       /* END CR:934803 YX*/
	        OD;
	      OD; /* B_CTRS_PT15_MT_110 */	
           FI; /*B_RRH_IDX = H'FF */
	  OD; /* B_RRH_ARY */
	 OD;  /* ZQ_RRH_OLC */
        OD; /* Z_T110_15_1_PTR */
       FI; 

	   ZQ_RRH_FOUND := FALSE;
	  
      OD; /* B_RRH_CNTRS */
     OD;	  
    FI;
	
	ELSE
	
	   Q_S0705_UPD_T110_15_OLC_CELL_INVALID(B_CELL_IDX,
                                   M_FS_TCU_TRF_LDC,FALSE);
	
   FI; /* Z_STD_CELL_LIST */
  FI;	
   
 OD;
  
  ZQ_NBR_OF_OLC_CELLS := ZQ_NBR_OF_OLC_CELLS - 1;
  
 OD;  /*ZQ_NBR_OF_OLC_CELLS */
 
END Q_S0704_UPD_TCU_OLC_T110_15;   
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0705_UPD_OLC_T110_15_INVALID                     */        
/*                                                                    */        
/*     PROGRAMMER: SABIYA                                             */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE:                                                 */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*                                                                    */        
/*                                                                    */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                                                                    */        
/*                                                                    */        
/*                      NONE                                          */        
/*                                                                    */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0704_UPD_TCU_OLC_T110_15                   */        
/*                                                                    */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/
Q_S0705_UPD_T110_15_OLC_CELL_INVALID: PROC(ZF_CELL_IDX   M_CELL_IDX,   
				 ZF_LDC_TYPE   M_FMM_SELECTOR,
				 ZF_TEL        BOOL);                 

DCL ZQ_TRX , ZQ_RRH INT;				 
DCL ZQ_J RANGE(E_MT_110_CTR_MC1600: E_MT_110_CTR_MC1614);/*934803*/
DCL ZQ_CELL RANGE (1L:CM_FY32_MAX_CELLS_PER_BSC_LONG); 

 IF ZF_CELL_IDX <= (CM_FY32_MAX_CELLS_PER_BSC/2)
 THEN    
 
 DO WITH Z_T110_15_1_PTR->(LONG_INT((ZF_CELL_IDX)));
  DO FOR ZQ_RRH := 1 TO 6;
   DO WITH B_RRH_ARY(ZQ_RRH);
    DO FOR ZQ_TRX := 1 TO CM_FY32_PM_MAX_TRX_PER_TCU;
     DO  WITH B_TRX_ARY(ZQ_TRX);
     
    	 B_CELL_ID  := ZF_CELL_IDX;
		
		
  CASE ZF_LDC_TYPE OF
 
  (M_FS_TCU_TRF_LDC) :
		                                                  /*934803*/
        DO FOR ZQ_J := E_MT_110_CTR_MC1600 TO E_MT_110_CTR_MC1614;
         DO WITH B_CTRS_PT15_MT_110;
          CASE ZQ_J OF 
          (E_MT_110_CTR_MC1600:E_MT_110_CTR_MC1601):
           B_MC1600_TO_MC1601(ZQ_J).B_HIGH:= ZS_FFFF; 
           B_MC1600_TO_MC1601(ZQ_J).B_LOW:= ZS_FFFE; 
		
          (E_MT_110_CTR_MC1602):
           B_MC1602 := ZS_FFFE;
		
          (E_MT_110_CTR_MC1603):
           B_MC1603.B_HIGH:= ZS_FFFF; 
           B_MC1603.B_LOW:= ZS_FFFE; 
		
          (E_MT_110_CTR_MC1610:E_MT_110_CTR_MC1611):
           B_MC1610_TO_MC1612(ZQ_J):= ZS_FFFE;
		
          (E_MT_110_CTR_MC1613):
           B_MC1613.B_HIGH:= ZS_FFFF; 
           B_MC1613.B_LOW:= ZS_FFFE;
           	
          /* BEGIN CR:934803 YX*/
          (E_MT_110_CTR_MC1614):
           B_MC1614_TO_MC1634(ZQ_J).B_HIGH := ZS_FFFF;
           B_MC1614_TO_MC1634(ZQ_J).B_LOW := ZS_FFFE;
          /* END CR:934803 YX*/
          ELSE 
          ESAC;
          OD; /* B_CTRS_PT15_MT_110 */
         OD; 
		
  (M_FS_DTC_TRF_LDC) :
		
       DO WITH B_CTRS_PT15_MT_110;
	  B_MC1604 := ZS_FFFE;
	  B_MC1610_TO_MC1612(E_MT_110_CTR_MC1612) :=
	                                     ZS_FFFE;
       OD;											 
		
   (M_FS_TCHRM_LDC) :

	IF( ZF_TEL = TRUE)
  	THEN
	 DO FOR ZQ_J := E_MT_110_CTR_MC1605 TO E_MT_110_CTR_MC1609;
	  DO WITH B_CTRS_PT15_MT_110;
	
	   B_MC1605_TO_MC1609(ZQ_J).B_HIGH := ZS_FFFF;
	   B_MC1605_TO_MC1609(ZQ_J).B_HIGH := ZS_FFFE;
		 
	 OD;
	OD;
       FI;       
       ELSE 
       ESAC;	 
       OD;
      OD;
     OD;
    OD;
  OD;  /* Z_T110_15_1_PTR */
 
 ELSIF ZF_CELL_IDX > (CM_FY32_MAX_CELLS_PER_BSC/2) AND
              ZF_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC
 THEN    

 DO WITH Z_T110_15_2_PTR->(LONG_INT((ZF_CELL_IDX)));
  DO FOR ZQ_RRH := 1 TO 6;
   DO WITH B_RRH_ARY(ZQ_RRH);
    DO FOR ZQ_TRX := 1 TO CM_FY32_PM_MAX_TRX_PER_TCU;
     DO  WITH B_TRX_ARY(ZQ_TRX);
     
    	 B_CELL_ID  := ZF_CELL_IDX;
		
		
   CASE ZF_LDC_TYPE OF

   (M_FS_TCU_TRF_LDC) :
		                                                  /*934803*/
         DO FOR ZQ_J := E_MT_110_CTR_MC1600 TO E_MT_110_CTR_MC1614;
          DO WITH B_CTRS_PT15_MT_110;
          CASE ZQ_J OF 
          (E_MT_110_CTR_MC1600:E_MT_110_CTR_MC1601):
           B_MC1600_TO_MC1601(ZQ_J).B_HIGH:= ZS_FFFF; 
           B_MC1600_TO_MC1601(ZQ_J).B_LOW:= ZS_FFFE; 
		
          (E_MT_110_CTR_MC1602):
           B_MC1602 := ZS_FFFE;
		
          (E_MT_110_CTR_MC1603):
           B_MC1603.B_HIGH:= ZS_FFFF; 
           B_MC1603.B_LOW:= ZS_FFFE; 
		
          (E_MT_110_CTR_MC1610:E_MT_110_CTR_MC1611):
           B_MC1610_TO_MC1612(ZQ_J):= ZS_FFFE;
		
          (E_MT_110_CTR_MC1613):
           B_MC1613.B_HIGH:= ZS_FFFF; 
           B_MC1613.B_LOW:= ZS_FFFE;
           	
          /* BEGIN CR:934803 YX*/
          (E_MT_110_CTR_MC1614):
           B_MC1614_TO_MC1634(ZQ_J).B_HIGH := ZS_FFFF;
           B_MC1614_TO_MC1634(ZQ_J).B_LOW := ZS_FFFE;
          /* END CR:934803 YX*/
          ELSE 
          ESAC;
          OD; /* B_CTRS_PT15_MT_110 */
         OD; 
		
	(M_FS_DTC_TRF_LDC) :
	
	DO WITH B_CTRS_PT15_MT_110;
	  B_MC1604 := ZS_FFFE;
	  B_MC1610_TO_MC1612(E_MT_110_CTR_MC1612) :=
	                                     ZS_FFFE;
        OD;											 
		
	(M_FS_TCHRM_LDC) :
	IF( ZF_TEL = TRUE)
   	 THEN
	 DO FOR ZQ_J := E_MT_110_CTR_MC1605 TO E_MT_110_CTR_MC1609;
	   DO WITH B_CTRS_PT15_MT_110;
	 
	     B_MC1605_TO_MC1609(ZQ_J).B_HIGH := ZS_FFFF;
	     B_MC1605_TO_MC1609(ZQ_J).B_HIGH := ZS_FFFE;
		 
	   OD;
         OD;
        FI;  
         ELSE 
         ESAC;	 
       OD;
      OD;
     OD;
    OD;
  OD;  /* Z_T110_15_1_PTR */
FI;

END Q_S0705_UPD_T110_15_OLC_CELL_INVALID;

/* END CR:745699 */

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE:  Q_S0488_UPD_CCI_TCU_TYPE110_10                     */        
/*                                                                    */        
/*     PROGRAMMER:MALARVIZHI                                          */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 26/06/2008                                      */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*      UPDATE THE TYPE 110 BLOCK 10 COUNTERS COMING FROM THE TCU     */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0060_ADD_LONG_INT                          */        
/*                                                                    */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/

Q_S0488_UPD_CCI_TCU_TYPE110_10 : PROC(ZF_LDC_BUF_PTR PTR);                 

DCL ZQ_NBR_MSC INT;
DCL ZQ_NBR_NRI INT;
DCL ZQ_I INT;
DCL ZQ_J INT;
DCL ZQ_K INT;
DCL ZQ_L INT;
DCL ZQ_MSC_IDX INT;
DCL ZQ_NRI INT;
DCL ZQ_SBL INT;
DCL ZQ_VALID BOOL;

DO WITH  ZF_LDC_BUF_PTR -> CM_FY32_TCU_AFLEX_CTRS_AREA;                   
ZQ_NBR_MSC  := B_NBR_MSC;    

IF ZQ_NBR_MSC > CM_FY32_MAX_SUPPORTED_NRI OR
   ZQ_NBR_MSC < 0
THEN
    /* OUT OF RANGE */
  ZQ_NBR_MSC := 0; 
  Q_S0010_CCDC_ERROR(M_ERC6_USER_REC,
                     M_ERT0019_INC_MESS_DATA, 49, 0194);
FI;
 
DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_AFLEX_CTRS_AREA;
 DO FOR ZQ_I := 1 TO ZQ_NBR_MSC;
  ZQ_MSC_IDX := B_AFLEX_CNTRS(ZQ_I).B_MSC_SBL;
   IF ZQ_MSC_IDX > CM_FY32_MAX_SUPPORTED_NRI OR
      ZQ_MSC_IDX < 0 
   THEN
    /*DO NOTHING*/
   ELSE
  /*DO FOR ZQ_J :=1 TO M_MAX_MSC;*/
   Q_S0493_CHECK_MSC_VALID (ZQ_I,ZQ_MSC_IDX,ZQ_VALID);
   IF ZQ_VALID
     THEN
     DO WITH B_AFLEX_CNTRS(ZQ_I);
       IF B_NBR_NRI > 0 THEN
         DO FOR ZQ_K :=1 TO B_NBR_NRI;
          DO WITH B_CNTRS_TYPE_110_NRI_ARR(ZQ_K);
           ZQ_NRI:=B_NRI;                   
            NRI_FOUND:
            DO FOR ZQ_L := 1 TO CM_FY32_MAX_SUPPORTED_NRI;
             DO WITH Z_T110_10_PTR->(ZQ_L);
              IF (((B_MSC_SBL = ZQ_MSC_IDX)AND(B_NRI_NBR = ZQ_NRI))
                 OR ((B_MSC_SBL = H'FFFF) AND(B_NRI_NBR = H'FFFF)))  
               THEN
                B_MSC_SBL := ZQ_MSC_IDX;
                B_NRI_NBR := B_NRI;
 
                DO WITH B_CTRS_PT10_MT_110;
                   Q_S0060_ADD_LONG_INT(
                   B_TCU_TYPE_110_NRI_CNTRS
                   (E_MC980_PAG_RESPONSE_NRI),
                   B_MC980_TO_MC985E(E_MT_110_CTR_MC980));
                 
                    Q_S0060_ADD_LONG_INT(
                    B_TCU_TYPE_110_NRI_CNTRS
                    (E_MC981_IMSI_DETACH_IND_NRI),
                    B_MC980_TO_MC985E(E_MT_110_CTR_MC981));

                    Q_S0060_ADD_LONG_INT(
                    B_TCU_TYPE_110_NRI_CNTRS
                    (E_MC982_CM_RE_ESTABL_REQ_NRI),
                    B_MC980_TO_MC985E(E_MT_110_CTR_MC982));

                    Q_S0060_ADD_LONG_INT(
                    B_TCU_TYPE_110_NRI_CNTRS
                    (E_MC983_IMSI_ATTACH_NRI),
                    B_MC980_TO_MC985E(E_MT_110_CTR_MC983));

                    Q_S0060_ADD_LONG_INT(
                    B_TCU_TYPE_110_NRI_CNTRS
                    (E_MC984_LOC_UPD_NRI),
                    B_MC980_TO_MC985E(E_MT_110_CTR_MC984));

                    Q_S0060_ADD_LONG_INT(
                    B_TCU_TYPE_110_NRI_CNTRS
                    (E_MC985A_CM_SERQ_SMS_NRI),
                    B_MC980_TO_MC985E(E_MT_110_CTR_MC985A));

                    Q_S0060_ADD_LONG_INT(
                    B_TCU_TYPE_110_NRI_CNTRS
                    (E_MC985B_CM_SERQ_SUP_SERV_NRI),
                    B_MC980_TO_MC985E(E_MT_110_CTR_MC985B));

                    Q_S0060_ADD_LONG_INT(
                    B_TCU_TYPE_110_NRI_CNTRS
                    (E_MC985C_CM_SERQ_CALL_EST_NRI),
                    B_MC980_TO_MC985E(E_MT_110_CTR_MC985C));

                    Q_S0060_ADD_LONG_INT(
                    B_TCU_TYPE_110_NRI_CNTRS
                    (E_MC985D_CM_SERQ_LOC_SERV_NRI),
                    B_MC980_TO_MC985E(E_MT_110_CTR_MC985D));

                    Q_S0060_ADD_LONG_INT(
                    B_TCU_TYPE_110_NRI_CNTRS
                    (E_MC985E_CM_SERQ_OTHERS_NRI),
                    B_MC980_TO_MC985E(E_MT_110_CTR_MC985E));
               OD;
               EXIT NRI_FOUND;
             FI; 
            OD;
           OD;
          OD;
         OD;
        FI;
       OD;
      FI;
    /*OD;*/
   FI;
  OD;
 OD;
OD;    
END Q_S0488_UPD_CCI_TCU_TYPE110_10;
/*END :ADDED FOR A-FLEX NRI COUNTERS*/
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0493_CHECK_MSC_VALID                             */        
/*                                                                    */        
/*     PROGRAMMER: CHEN ZHANGYI                                       */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 02/07/31                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 110 BLOCK 3 INVALID FIELDS.                 */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_CELL_IDX M_CELL_IDX,                       */        
/*                      ZF_LDC_TYPE M_FMM_SELECTOR                    */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0290_UPD_TCH_INVALID                       */        
/*                      Q_S0447_UPD_T110_DTC_INVALID                  */        
/*                      Q_S0448_UPD_T110_TCU_INVALID                  */        
/*                      Q_S0600_UPDATE_CCI_TYPE110_3                  */        
/*                      Q_S0601_UPD_CCI_TCH_TYPE110_3                 */        
/*                      Q_S0602_UPD_CCI_TCU_TYPE110_3                 */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/  
Q_S0493_CHECK_MSC_VALID: PROC( ZF_CNT INT,ZF_MSC_IDX INT,
                              ZF_VALID_MSC BOOL LOC);                      
DCL ZQ_SBL INT;

ZF_VALID_MSC := FALSE;

/* BEGIN: FR20_273200  */
/*DO WITH Z_R_MSC_MGT_PTR -> ZM_R_MSC_MGT(ZF_CNT);*/
DO WITH Z_R_MSC_MGT_PTR -> ZM_R_MSC_MGT(ZF_MSC_IDX);
/* END: FR20_273200  */

/*FR250253*/
/* IF ((D_MSC_MST = E_MS_IT) OR( D_MSC_MST = E_MS_FIT) 
       AND (D_MSC_SBL = ZF_MSC_IDX))*/ 
   IF ((D_MSC_MST /= E_MS_NEQ) 
       AND (D_MSC_SBL = ZF_MSC_IDX))
/*FR250253*/
   THEN
      ZF_VALID_MSC := TRUE;
   FI;
OD;

END Q_S0493_CHECK_MSC_VALID;
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0603_UPD_T110_3_INVALID                          */        
/*                                                                    */        
/*     PROGRAMMER: CHEN ZHANGYI                                       */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 02/07/31                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 110 BLOCK 3 INVALID FIELDS.                 */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_CELL_IDX M_CELL_IDX,                       */        
/*                      ZF_LDC_TYPE M_FMM_SELECTOR                    */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0290_UPD_TCH_INVALID                       */        
/*                      Q_S0447_UPD_T110_DTC_INVALID                  */        
/*                      Q_S0448_UPD_T110_TCU_INVALID                  */        
/*                      Q_S0600_UPDATE_CCI_TYPE110_3                  */        
/*                      Q_S0601_UPD_CCI_TCH_TYPE110_3                 */        
/*                      Q_S0602_UPD_CCI_TCU_TYPE110_3                 */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0603_UPD_T110_3_INVALID: PROC(ZF_CELL_IDX   M_CELL_IDX,                      
                                 ZF_LDC_TYPE   M_FMM_SELECTOR,
                                 ZF_TEL        BOOL);                 
/* START : AUPOIP FEATURE */                                                                                
/*DCL ZQ_I    RANGE(E_MT_110_CTR_MC448A:E_MT_110_CTR_MC924G);*/
/*START: FR36/310288*/
/*DCL ZQ_I    RANGE(E_MT_110_CTR_MC448A:E_MT_110_CTR_MC701J);*/
DCL ZQ_I    RANGE(E_MT_110_CTR_MC448A:E_MT_110_CTR_MC490B);
/*START: FR36/310288*/
/* END : AUPOIP FEATURE */ 
DO WITH Z_T110_3_PTR -> (ZM_CELL_INDEX_VALUE(ZF_CELL_IDX));

  B_CELL_ID  := ZF_CELL_IDX;

  DO WITH B_CTRS_PT3_MT_110;

    CASE ZF_LDC_TYPE OF

      (M_FS_DTC_TRF_LDC) :
/*START : AUPOIP FEATURE */
/*        DO FOR ZQ_I := E_MT_110_CTR_MC448A TO E_MT_110_CTR_MC481; */
          /*START: FR36/310288*/
          /*DO FOR ZQ_I := E_MT_110_CTR_MC448A TO E_MT_110_CTR_MC701J;*/
          DO FOR ZQ_I := E_MT_110_CTR_MC448A TO E_MT_110_CTR_MC490B;
          /*END: FR36/310288*/
           CASE (ZQ_I) OF
             (E_MT_110_CTR_MC448A:E_MT_110_CTR_MC701E,
              E_MT_110_CTR_MC901:E_MT_110_CTR_MC140A,
              E_MT_110_CTR_MC922A:E_MT_110_CTR_MC922D):
                B_MC448A_TO_MC922D(ZQ_I).B_LOW  := ZS_FFFE;
                B_MC448A_TO_MC922D(ZQ_I).B_HIGH := ZS_FFFF;
              
             (E_MT_110_CTR_MC923A:E_MT_110_CTR_MC02I):
                B_MC804A_TO_MC02I(ZQ_I).B_LOW  := ZS_FFFE;
                B_MC804A_TO_MC02I(ZQ_I).B_HIGH := ZS_FFFF;
             
             /* B9 CHENZY BEGIN */
             (E_MT_110_CTR_MC462A,
              E_MT_110_CTR_MC463A,E_MT_110_CTR_MC463B,
              E_MT_110_CTR_MC922E,E_MT_110_CTR_MC922F,
              E_MT_110_CTR_MC481,
              /* ADD BY MINAN FOR 2G 3G HO BEGIN*/
              E_MT_110_CTR_MC924B:E_MT_110_CTR_MC924G):
              /* ADD BY MINAN END */
                B_MC462A_TO_MC482(ZQ_I) := ZS_FFFE;
             /* B9 CHENZY END */
/* START : AUPOIP FEATURE */
	   (E_MT_110_CTR_MC490A,E_MT_110_CTR_MC490B,
	    E_MT_110_CTR_MC701I,E_MT_110_CTR_MC701J):
                B_MC490A_TO_MC701J(ZQ_I).B_LOW  := ZS_FFFE;
                B_MC490A_TO_MC701J(ZQ_I).B_HIGH := ZS_FFFF;
		
/* END : AUPOIP FEATURE */             
	    /*START:LTE TO GSM HO*/
	     (E_MT_110_CTR_MC929A:E_MT_110_CTR_MC929D):
                B_MC929A_TO_MC929D(ZQ_I).B_LOW  := ZS_FFFE;
                B_MC929A_TO_MC929D(ZQ_I).B_HIGH := ZS_FFFF;

              (E_MT_110_CTR_MC929E,E_MT_110_CTR_MC929F):
                B_MC929E_TO_MC929H(ZQ_I) := ZS_FFFE;
            /*END:LTE TO GSM HO*/

             ELSE
           ESAC;
         OD;

      (M_FS_TCU_TRF_LDC):
         DO FOR ZQ_I := E_MT_110_CTR_MC702A TO E_MT_110_CTR_MC463C; 
           CASE (ZQ_I) OF
             (E_MT_110_CTR_MC702A:E_MT_110_CTR_MC705,
              E_MT_110_CTR_MC140B):
              B_MC448A_TO_MC922D(ZQ_I).B_LOW  := ZS_FFFE;
              B_MC448A_TO_MC922D(ZQ_I).B_HIGH := ZS_FFFF;
              
             (E_MT_110_CTR_MC802A:E_MT_110_CTR_MC802B):
              B_MC800_TO_MC802B(ZQ_I)  := ZS_FFFE;

             (E_MT_110_CTR_MC804A:E_MT_110_CTR_MC805B):
              B_MC804A_TO_MC02I(ZQ_I).B_LOW  := ZS_FFFE;
              B_MC804A_TO_MC02I(ZQ_I).B_HIGH := ZS_FFFF;
             
             (E_MT_110_CTR_MC462B:E_MT_110_CTR_MC462C,
              E_MT_110_CTR_MC463C):
              B_MC462A_TO_MC482(ZQ_I) := ZS_FFFE;
              
             ELSE
           ESAC;   
         OD; 
      (M_FS_TCHRM_LDC):
         IF ZF_TEL
         THEN
           B_MC448A_TO_MC922D(E_MT_110_CTR_MC460A).B_LOW  := ZS_FFFE;
           B_MC448A_TO_MC922D(E_MT_110_CTR_MC460A).B_HIGH := ZS_FFFF;
           B_MC800_TO_MC802B(E_MT_110_CTR_MC801A)  := ZS_FFFE;
           B_MC800_TO_MC802B(E_MT_110_CTR_MC801B)  := ZS_FFFE;
           /* B9 CHENZY BEGIN */
           B_MC462A_TO_MC482(E_MT_110_CTR_MC922G) := ZS_FFFE;
           B_MC462A_TO_MC482(E_MT_110_CTR_MC922H) := ZS_FFFE;
           B_MC462A_TO_MC482(E_MT_110_CTR_MC480)  := ZS_FFFE;
           /* B9 CHENZY END */
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
           B_MC462A_TO_MC482(E_MT_110_CTR_MC482)  := ZS_FFFE;
           B_MC462A_TO_MC482(E_MT_110_CTR_MC924A)  := ZS_FFFE;
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */

	/*START: LTE TO GSM HO*/
	   B_MC929E_TO_MC929H(E_MT_110_CTR_MC929G) := ZS_FFFE;
	   B_MC929E_TO_MC929H(E_MT_110_CTR_MC929H) := ZS_FFFE;
        /*END: LTE TO GSM HO*/

         ELSE
           B_MC800_TO_MC802B(E_MT_110_CTR_MC800)  := ZS_FFFE;
         FI;
      ELSE

    ESAC;
  OD;
OD;

END Q_S0603_UPD_T110_3_INVALID;
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0287_UPD_T110_7_INVALID                          */        
/*                                                                    */        
/*     PROGRAMMER: MALA  (WIPRO)                                      */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 02/08/30                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       SETS THE TYPE 26 SERVING CELL COUNTERS TO INVALID (=H'FE)    */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_LCE_ID M_LCE_ID,                       */        
/*                      ZF_ACT_IDX INT                                */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0443_UPD_T26_INVALID                       */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0287_UPD_T110_7_INVALID: PROC(ZF_CELL_IDX   M_CELL_IDX,                      
				 ZF_LDC_TYPE   M_FMM_SELECTOR,
				 ZF_TEL        BOOL);                 
				 
/* CR20/203395 */
/* START: WIPRO AMR-WB CHANGE */
/* DCL ZQ_I RANGE(E_MT_110_CTR_MC191: E_MT_110_CTR_MC930); */
/*START: ADDED FOR A-FLEX CHANGES*/
      /* DCL ZQ_I RANGE(E_MT_110_CTR_MC191 : E_MT_110_CTR_MC956); */
     /*  DCL ZQ_I RANGE( E_MT_110_CTR_MC191 : E_MT_110_CTR_MC961);*/ 
       /*CR36/251325 START*/ 
      /* DCL ZQ_I RANGE( E_MT_110_CTR_MC191 : E_MT_110_CTR_MC8E);*/ 
      /* DCL ZQ_I RANGE( E_MT_110_CTR_MC191 : E_MT_110_CTR_MC961);*/   
       /*CR36/251325 END*/ 
/*END :  ADDED FOR A-FLEX CHANGES*/

/* END: WIPRO AMR-WB CHANGE */
/* CR20/203395 */
/* CR 20/245729 */
/*Commented for CR260349*/
/*DCL ZQ_I RANGE(E_MT_110_CTR_MC191: E_MT_110_CTR_MC963);*/
/* CR 20/245729 */  

/* BEGIN : CR20_299359- Lb Interface */
/* CR260349 START */
/* DCL ZQ_I RANGE(E_MT_110_CTR_MC191: E_MT_110_CTR_MC964); */
/* CR260349 END */
/* DCL ZQ_I RANGE(E_MT_110_CTR_MC191: E_MT_110_CTR_MC966);*/
/*START : CR312407*/
DCL ZQ_I RANGE(E_MT_110_CTR_MC191: E_MT_110_CTR_MC182A);
/* END : CR20_299359*/
/*STOP : CR312407*/
/* CR20/209493 START */
      IF (ZF_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC/2)
      THEN
       DO WITH Z_T110_7_PTR->(ZM_CELL_INDEX_VALUE(ZF_CELL_IDX));
/* CR20/209493 END */
       B_CELL_ID  := ZF_CELL_IDX;
        DO WITH B_CTRS_PT7_MT_110;

       CASE ZF_LDC_TYPE OF

       (M_FS_DTC_TRF_LDC) :
/* START: WIPRO AMR-WB CHANGE */
       /* DO FOR ZQ_I := E_MT_110_CTR_MC191 TO E_MT_110_CTR_MC928I; */
       /* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
       /*DO FOR ZQ_I := E_MT_110_CTR_MC191 TO E_MT_110_CTR_MC934;*/
       /*   DO FOR ZQ_I := E_MT_110_CTR_MC191 TO E_MT_110_CTR_MC956;*/
       /* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
/*BEGIN : */   

/*BEGIN - CR20_299359 -Lb Interface*/
/* CR 20/245729 START */
/*   DO FOR ZQ_I := E_MT_110_CTR_MC191 TO E_MT_110_CTR_MC960; */
/* CR 20/245729 END */ 
	 /*START :CR 312407*/
	DO FOR ZQ_I := E_MT_110_CTR_MC191 TO E_MT_110_CTR_MC182A;
	/*STOP :CR 312407*/
   
	/*DO FOR ZQ_I := E_MT_110_CTR_MC191 TO E_MT_110_CTR_MC966;*/ 
/*END: CR20_299359*/
               CASE (ZQ_I) OF
                 (E_MT_110_CTR_MC701F,E_MT_110_CTR_MC701G,
                  E_MT_110_CTR_MC927A,E_MT_110_CTR_MC927B,
                  E_MT_110_CTR_MC927C,E_MT_110_CTR_MC927D,
                  E_MT_110_CTR_MC927E,E_MT_110_CTR_MC927F,
                  E_MT_110_CTR_MC932,E_MT_110_CTR_MC933,
       /* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
                  /*E_MT_110_CTR_MC934):*/
                  E_MT_110_CTR_MC934,E_MT_110_CTR_MC951,
                  E_MT_110_CTR_MC952,E_MT_110_CTR_MC953,
                  E_MT_110_CTR_MC954,E_MT_110_CTR_MC955,
                  E_MT_110_CTR_MC956,
                  /* FOR CR 20/245729 */
                  E_MT_110_CTR_MC960,
                  /* FOR CR 20/245729 */
		  /*START :CR 312407*/
		  E_MT_110_CTR_MC182A
		    /*STOP :CR 312407*/):

       /* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */           
/* END: WIPRO AMR-WB CHANGE */
/* CR 188510 START */
/* CR20/209493 START */
		    B_MC191_TO_MC975(ZQ_I).B_LOW  := ZS_FFFE;
                    B_MC191_TO_MC975(ZQ_I).B_HIGH := ZS_FFFF;
/* CR20/209493 END */
/* CR 188510 END */
		/*BEGIN : CR20_299359 - Lb Interface*/
		(E_MT_110_CTR_MC965,E_MT_110_CTR_MC966):
		    DO WITH Z_R_BSS_PAR2_PTR -> ZM_R_BSS_PAR2;
			IF D_EN_LB = TRUE OR D_EN_LBNMR = TRUE
			THEN
			  B_MC191_TO_MC975(ZQ_I).B_LOW  := ZS_FFFE;
			  B_MC191_TO_MC975(ZQ_I).B_HIGH := ZS_FFFF;
			ELSE
			  B_MC191_TO_MC975(ZQ_I).B_LOW  := 0;
			  B_MC191_TO_MC975(ZQ_I).B_HIGH := 0;
			FI;
		    OD;
		/*END: CR20_299359*/
             ELSE
           ESAC;
OD;
       (M_FS_TCU_TRF_LDC):
/* CR20/203395 */
 /*    DO FOR ZQ_I := E_MT_110_CTR_MC191 TO E_MT_110_CTR_MC928I;*/
/* START: WIPRO AMR-WB CHANGE */
      /* DO FOR ZQ_I := E_MT_110_CTR_MC191 TO E_MT_110_CTR_MC930; */
      /*START: ADDED FOR A-FLEX CHANGES*/
      /* DO FOR ZQ_I := E_MT_110_CTR_MC191 TO E_MT_110_CTR_MC937; */
      /* DO FOR ZQ_I := E_MT_110_CTR_MC191 TO E_MT_110_CTR_MC961; */ 
       /*CR36/251325 START*/ 
      /* DO FOR ZQ_I := E_MT_110_CTR_MC191 TO E_MT_110_CTR_MC8E;*/ 
      /*   DO FOR ZQ_I := E_MT_110_CTR_MC191 TO E_MT_110_CTR_MC961;*/    
       /*CR36/251325 END*/ 
       /*END :  ADDED FOR A-FLEX CHANGES*/
        /* END: WIPRO AMR-WB CHANGE */
/* CR20/203395 */
/* CR 20/245729 START */
/*Commented for CR260349*/
/* DO FOR ZQ_I := E_MT_110_CTR_MC191 TO E_MT_110_CTR_MC963;*/
/* CR 20/245729 END */ 
/* CR260349 START */
   DO FOR ZQ_I := E_MT_110_CTR_MC191 TO E_MT_110_CTR_MC964;
/* CR260349 END */ 
           CASE (ZQ_I) OF
              (E_MT_110_CTR_MC928A,E_MT_110_CTR_MC928B,
              E_MT_110_CTR_MC928C,E_MT_110_CTR_MC928D,
              E_MT_110_CTR_MC928E,E_MT_110_CTR_MC928F,
              E_MT_110_CTR_MC928G,E_MT_110_CTR_MC928H,
              E_MT_110_CTR_MC928I,
              E_MT_110_CTR_MC191,
              /*FOR CR20/233490*/
              /*E_MT_110_CTR_MC925A,E_MT_110_CTR_MC925B,
              E_MT_110_CTR_MC925C,E_MT_110_CTR_MC925D,
              E_MT_110_CTR_MC925E,E_MT_110_CTR_MC925F,
              E_MT_110_CTR_MC925G,E_MT_110_CTR_MC925H,
              E_MT_110_CTR_MC930,E_MT_110_CTR_MC931,*/
              E_MT_110_CTR_MC931,
              /*FOR CR20/233490*/
              E_MT_110_CTR_MC935,E_MT_110_CTR_MC936,
              E_MT_110_CTR_MC937,E_MT_110_CTR_MC938,
              E_MT_110_CTR_MC939,E_MT_110_CTR_MC950,
 /* BEGIN: TRX-POWER-SAVING-FEATURE */
              E_MT_110_CTR_MC957,E_MT_110_CTR_MC958, 
 /* END: TRX-POWER-SAVING-FEATURE */
              /* FOR CR 20/245729 */
              E_MT_110_CTR_MC959,
              /* FOR CR 20/245729 */            
 /*  E_MT_110_CTR_MC961):*/ 
            /*CR36/251325 START*/ 
           /* E_MT_110_CTR_MC8E):*/ 
              E_MT_110_CTR_MC961,
            /*CR36/251325 END*/  
               /* FOR CR 20/243517 */
              E_MT_110_CTR_MC962,
              E_MT_110_CTR_MC963,
             /* CR260349 START */
              E_MT_110_CTR_MC964
              /* CR260349 END */ 
              /* FOR CR 20/243517 */):   
           
/* END: WIPRO AMR-WB CHANGE */
/* CR20/203395 */
/* CR 188510 START */
/* CR20/209493 START */
                B_MC191_TO_MC975(ZQ_I).B_LOW  := ZS_FFFE;
                B_MC191_TO_MC975(ZQ_I).B_HIGH := ZS_FFFF;
/* CR20/209493 END */
/* CR 188510 END */
             ELSE
           ESAC;
          OD;
       ELSE
    ESAC;
  OD;
OD;
/* CR20/209493 START */
ELSE
       DO WITH Z_T110_7_2_PTR->(ZM_CELL_INDEX_VALUE(ZF_CELL_IDX));
       B_CELL_ID  := ZF_CELL_IDX;
        DO WITH B_CTRS_PT7_MT_110;

       CASE ZF_LDC_TYPE OF

       (M_FS_DTC_TRF_LDC) :
/* START: WIPRO AMR-WB CHANGE */
       /* DO FOR ZQ_I := E_MT_110_CTR_MC191 TO E_MT_110_CTR_MC928I; */
       /* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
       /*DO FOR ZQ_I := E_MT_110_CTR_MC191 TO E_MT_110_CTR_MC934;*/
        /*  DO FOR ZQ_I := E_MT_110_CTR_MC191 TO E_MT_110_CTR_MC956;*/
       /* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */   
/*BEGIN: CR20_299359-Lb Interface*/
/* CR 20/245729 START */
/*      DO FOR ZQ_I := E_MT_110_CTR_MC191 TO E_MT_110_CTR_MC960;*/
/* CR 20/245729 END */  
	/* DCL ZQ_I RANGE(E_MT_110_CTR_MC191: E_MT_110_CTR_MC966);*/
	/*START :CR 312407*/
	DO FOR ZQ_I := E_MT_110_CTR_MC191 TO E_MT_110_CTR_MC182A;
	/*STOP:CR 312407*/
/*END: CR20_299359*/
               CASE (ZQ_I) OF
                 (E_MT_110_CTR_MC701F,E_MT_110_CTR_MC701G,
                  E_MT_110_CTR_MC927A,E_MT_110_CTR_MC927B,
                  E_MT_110_CTR_MC927C,E_MT_110_CTR_MC927D,
                  E_MT_110_CTR_MC927E,E_MT_110_CTR_MC927F,
                  E_MT_110_CTR_MC932,E_MT_110_CTR_MC933,
       /* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
                  /*E_MT_110_CTR_MC934):*/
                  E_MT_110_CTR_MC934,E_MT_110_CTR_MC951,
                  E_MT_110_CTR_MC952,E_MT_110_CTR_MC953,
                  E_MT_110_CTR_MC954,E_MT_110_CTR_MC955,
                  E_MT_110_CTR_MC956,
                  /* FOR CR 20/245729 */
                  E_MT_110_CTR_MC960,
                  /* FOR CR 20/245729 */
		/*START : CR312407*/
		E_MT_110_CTR_MC182A
		/*STOP : CR312407*/):
       /* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */           
/* END: WIPRO AMR-WB CHANGE */
                B_MC191_TO_MC975(ZQ_I).B_LOW  := ZS_FFFE;
                B_MC191_TO_MC975(ZQ_I).B_HIGH := ZS_FFFF;

		/*BEGIN : CR20_299359 - Lb Interface*/
		(E_MT_110_CTR_MC965,E_MT_110_CTR_MC966):
		    DO WITH Z_R_BSS_PAR2_PTR -> ZM_R_BSS_PAR2;
			IF D_EN_LB = TRUE OR D_EN_LBNMR = TRUE
			THEN
			  B_MC191_TO_MC975(ZQ_I).B_LOW  := ZS_FFFE;
			  B_MC191_TO_MC975(ZQ_I).B_HIGH := ZS_FFFF;
			ELSE
			  B_MC191_TO_MC975(ZQ_I).B_LOW  := 0;
			  B_MC191_TO_MC975(ZQ_I).B_HIGH := 0;
			FI;
		    OD;
		/*END: CR20_299359*/
	
             ELSE
           ESAC;
         OD;

       (M_FS_TCU_TRF_LDC):
 /*    DO FOR ZQ_I := E_MT_110_CTR_MC191 TO E_MT_110_CTR_MC928I;*/
/* START: WIPRO AMR-WB CHANGE */
      /* DO FOR ZQ_I := E_MT_110_CTR_MC191 TO E_MT_110_CTR_MC930; */
/*START: ADDED FOR A-FLEX CHANGES*/
      /* DO FOR ZQ_I := E_MT_110_CTR_MC191 TO E_MT_110_CTR_MC937; */
      /* DO FOR ZQ_I := E_MT_110_CTR_MC191 TO E_MT_110_CTR_MC961; */ 
        /*CR36/251325 START*/ 
       /*DO FOR ZQ_I := E_MT_110_CTR_MC191 TO E_MT_110_CTR_MC8E;*/ 
       /*  DO FOR ZQ_I := E_MT_110_CTR_MC191 TO E_MT_110_CTR_MC961;*/    
        /*CR36/251325 END*/ 
/*END :  ADDED FOR A-FLEX CHANGES*/
/* END: WIPRO AMR-WB CHANGE */
/* CR 20/245729 START */
/*Commented for CR260349*/
/* DO FOR ZQ_I := E_MT_110_CTR_MC191 TO E_MT_110_CTR_MC963;*/
/* CR 20/245729 END */ 
/* CR260349 START */
   DO FOR ZQ_I := E_MT_110_CTR_MC191 TO E_MT_110_CTR_MC964;
/* CR260349 END */ 
            CASE (ZQ_I) OF
             (E_MT_110_CTR_MC928A,E_MT_110_CTR_MC928B,
              E_MT_110_CTR_MC928C,E_MT_110_CTR_MC928D,
              E_MT_110_CTR_MC928E,E_MT_110_CTR_MC928F,
              E_MT_110_CTR_MC928G,E_MT_110_CTR_MC928H,
              E_MT_110_CTR_MC928I,
              E_MT_110_CTR_MC191,
              /*FOR CR20/233490*/
              /*E_MT_110_CTR_MC925A,E_MT_110_CTR_MC925B,
              E_MT_110_CTR_MC925C,E_MT_110_CTR_MC925D,
              E_MT_110_CTR_MC925E,E_MT_110_CTR_MC925F,
              E_MT_110_CTR_MC925G,E_MT_110_CTR_MC925H,
              E_MT_110_CTR_MC930,E_MT_110_CTR_MC931,*/
              E_MT_110_CTR_MC931,
              /*FOR CR20/233490*/
              E_MT_110_CTR_MC935,E_MT_110_CTR_MC936,
              E_MT_110_CTR_MC937, E_MT_110_CTR_MC938,
              E_MT_110_CTR_MC939,E_MT_110_CTR_MC950,
 /* BEGIN: TRX-POWER-SAVING-FEATURE */
              E_MT_110_CTR_MC957,E_MT_110_CTR_MC958, 
 /* END: TRX-POWER-SAVING-FEATURE */
                  /* FOR CR 20/245729 */
              E_MT_110_CTR_MC959,
             /* FOR CR 20/245729 */   
           /* E_MT_110_CTR_MC961):*/ 
             /*CR36/251325 START*/ 
            /*E_MT_110_CTR_MC8E):*/ 
              E_MT_110_CTR_MC961,   
             /*CR36/251325 END*/
             /* FOR CR 20/243517 */
              E_MT_110_CTR_MC962,
              E_MT_110_CTR_MC963,
              /* CR260349 START */
              E_MT_110_CTR_MC964):
             /* CR260349 END */ 
              /* FOR CR 20/243517 */ 
/* END: WIPRO AMR-WB CHANGE */
                B_MC191_TO_MC975(ZQ_I).B_LOW  := ZS_FFFE;
                B_MC191_TO_MC975(ZQ_I).B_HIGH := ZS_FFFF;
             ELSE
           ESAC;
          OD;
       ELSE
    ESAC;
  OD;
OD;
FI;
END Q_S0287_UPD_T110_7_INVALID;

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0604_UPD_T110_6_INVALID                          */        
/*                                                                    */        
/*     PROGRAMMER: MALA  (WIPRO)                                      */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 02/08/30                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                                                                    */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0604_UPD_T110_6_INVALID: PROC(ZF_TEL BOOL);
                                                                                
 IF ZF_TEL
 THEN
   DO WITH Z_T110_6_PTR-> ;
     DO WITH B_CTRS_PT6_MT_110;
         B_MC926.B_LOW  := ZS_FFFE;
         B_MC926.B_HIGH := ZS_FFFF;
     OD;
   OD;
 FI;

END Q_S0604_UPD_T110_6_INVALID;
/* END : ADD-WIPRO-B10-MR1-CHANGE */
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0605_UPD_T26_INVALID_CNTRS                       */        
/*                                                                    */        
/*     PROGRAMMER: CHEN ZHANGYI  (ASB)                                */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 02/08/30                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       SETS THE TYPE 26 SERVING CELL COUNTERS TO INVALID (=H'FE)    */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_LCE_ID M_LCE_ID,                       */        
/*                      ZF_ACT_IDX INT                                */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0443_UPD_T26_INVALID                       */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0605_UPD_T26_INVALID_CNTRS: PROC(
          ZF_T26_BUF_EL PTR,
          ZF_CELL_IDX INT);

DCL ZQ_I RANGE(1:M_PM_MAX_TARGET_CELLS);

DO WITH ZF_T26_BUF_EL->CM_FY32_HIS_TYPE_26_BUF_EL(0);
  B_SERV_CELL := ZF_CELL_IDX;
  B_INVALID := TRUE;
OD;

DO FOR ZQ_I := 1 TO M_PM_MAX_TARGET_CELLS;
  DO WITH ZF_T26_BUF_EL->CM_FY32_HIS_TYPE_26_BUF_EL(ZQ_I).B_CTRS;
    B_MT_26_CTR_720 := ZS_FFFE;
    B_MT_26_CTR_721 := ZS_FFFE;
    B_MT_26_CTR_722 := ZS_FFFE;
    B_MT_26_CTR_723 := ZS_FFFE;
    B_MT_26_CTR_724.B_HIGH := ZS_FFFF;
    B_MT_26_CTR_724.B_LOW := ZS_FFFE;
    B_MT_26_CTR_725.B_HIGH := ZS_FFFF;
    B_MT_26_CTR_725.B_LOW := ZS_FFFE;
    B_MT_26_CTR_727.B_HIGH := ZS_FFFF;
    B_MT_26_CTR_727.B_LOW := ZS_FFFE;
    B_MT_26_CTR_728.B_HIGH := ZS_FFFF;
    B_MT_26_CTR_728.B_LOW := ZS_FFFE;
  OD;
OD;

END Q_S0605_UPD_T26_INVALID_CNTRS;


/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0610_UPD_T33_CNTRS                               */        
/*                                                                    */        
/*     PROGRAMMER: CHEN ZHANGYI                                       */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 02/07/24                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*         THIS PROCEDURE IS ENTERED WHEN A 1408 MSG ARRIVES          */        
/*         IN RESPONSE TO T26 POLL REQUEST.                           */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_LCE_ID M_LCE_ID,                       */        
/*                      ZF_LDC_SEQ_NBR M_BYTE,                        */        
/*                      ZF_VALIDITY M_PM_DATA_VALIDITY,               */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0090_MEAS_TYPE_RUNNING                     */        
/*                      Q_S0443_UPD_T26_INVALID                       */        
/*                      Q_S0485_UPD_T26_DTC                           */        
/*     CALLED FROM:                                                   */        
/*                      P_GDXBYX_UPD_CCI_T26_CTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0610_UPD_T33_CNTRS: PROC(ZF_LDC_LCE_ID  M_LCE_ID,                        
                            ZF_LDC_SEQ_NBR M_BYTE,                          
                            ZF_VALIDITY    M_PM_DATA_VALIDITY,              
                            ZF_LDC_BUF_PTR PTR);

DCL ZQ_ACT_IDX INT;  

IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_EME,
                             ZQ_ACT_IDX)
THEN
  IF ZF_VALIDITY = E_DATA_INVALID
  THEN
    Q_S0615_UPD_T33_TCU_INVALID(ZF_LDC_LCE_ID);
  ELSE                                                                        
    Q_S0620_UPD_T33_TCU(ZF_LDC_BUF_PTR);                                       
  FI;                                                                         
FI;                                                                         

END Q_S0610_UPD_T33_CNTRS;
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0615_UPD_T33_TCU_INVALID                         */        
/*                                                                    */        
/*     PROGRAMMER: CHEN ZHANGYI                                       */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 02/07/31                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 32 CELL COUNTERS VALIDITY FIELDS.           */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LCE_ID M_LCE_ID,                           */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0120_GET_CIS_FOR_TCU                       */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0615_UPD_T33_TCU_INVALID: PROC(ZF_LCE_ID M_LCE_ID);

DCL ZQ_CELL_LIST    ZM_CIS_PER_TCU,
    ZQ_IDX          RANGE(1:CM_FY32_MAX_CELLS_PER_TCU),
    ZQ_I            M_TYPE_33_CTRS;

ZQ_CELL_LIST := Q_S0120_GET_CIS_FOR_TCU(ZF_LCE_ID);

DO FOR ZQ_IDX := 1 TO CM_FY32_MAX_CELLS_PER_TCU WHILE
                               ZQ_CELL_LIST(ZQ_IDX) /= M_NULL_CELL_IDX;
  DO WITH Z_T33_PTR -> (ZQ_CELL_LIST(ZQ_IDX));
    B_CELL_ID:=ZQ_CELL_LIST(ZQ_IDX);
    DO WITH B_CTRS_CELL_MT_33;
      DO FOR ZQ_I IN M_TYPE_33_CTRS;
      /*B_E01_TO_E02(ZQ_I) := ZS_FFFE; CHENZY B9P1 WITTS 289 */
        B_E01_TO_E02(ZQ_I).B_LOW  := ZS_FFFE;
        B_E01_TO_E02(ZQ_I).B_HIGH := ZS_FFFF;
      OD;
    OD;
  OD;
OD;

END Q_S0615_UPD_T33_TCU_INVALID;
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0620_UPD_T33_TCU                                 */        
/*                                                                    */        
/*     PROGRAMMER: CHEN ZHANGYI                                       */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 02/07/31                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 32 CELL COUNTERS IN MEMORY USING THE USER   */        
/*       BUFFER RECEIVED. SCOPE IS ALL CELLS.                         */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0620_UPD_T33_TCU: PROC(ZF_LDC_BUF_PTR PTR);

DCL ZQ_NBR_CELLS  INT;
DCL ZQ_J          M_TYPE_33_CTRS;
DCL ZQ_I          M_TCU_TRF_CNTRS_TYPE33;

DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_T33_CTRS_AREA;
  ZQ_NBR_CELLS := B_NBR_CELLS;
OD;
                                                                                
DO WHILE ZQ_NBR_CELLS /= 0;                                                     
  DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_T33_CTRS_AREA;                          
    DO WITH B_T33_CNTRS(ZQ_NBR_CELLS);                                         
    /* COPY THE COUNTERS FOR THE CELLS IN THE LIST INTO THE                     
     * DATA STRUCTURE IN MEMORY.                                                
     */                                                                         
      IF (B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC) AND                          
         (B_CELL_IDX > 0)                   
      THEN                                                                      
        DO WITH Z_T33_PTR->(B_CELL_IDX);                                        
          /* NOTE THAT THERE IS DIRECT ACCESS TO MEMORY - NO                    
           * SEARCHING FOR A MATCHING CELL AS THEY ARE ASSUMED                  
           * TO BE CONTIGUOUS.                                                  
           */                                                                   
          B_CELL_ID:=B_CELL_IDX;
          DO WITH B_CTRS_CELL_MT_33;
            IF Z_STD_CELL_LIST(B_CELL_IDX)
            THEN
              DO FOR ZQ_I IN M_TCU_TRF_CNTRS_TYPE33;
                ZQ_J := M_TYPE_33_CTRS(INT(ZQ_I));
                /* CHENZY B9P1 WITTS 289
                Q_S0040_ADD_INT_TO_INT(
                                  B_CNTRS_TYPE33(ZQ_I),
                                  B_E01_TO_E02(ZQ_J));*/
                Q_S0080_ADD_INT_TO_DPVAL(
                                  B_CNTRS_TYPE33(ZQ_I),
                                  B_E01_TO_E02(ZQ_J));
              OD;
            ELSE
              DO FOR ZQ_J IN M_TYPE_33_CTRS;
              /*B_E01_TO_E02(ZQ_J) := ZS_FFFE; CHENZY B9P1 WITTS 289*/
                B_E01_TO_E02(ZQ_J).B_LOW := ZS_FFFE;
                B_E01_TO_E02(ZQ_J).B_HIGH := ZS_FFFF;
              OD;
            FI;
          OD; /* WITH B_CTRS_CELL_MT_33 */
        OD; /* WITH Z_T33_PTR */                                                
      FI;                                                                       
    OD; /* WITH B_T33_CNTRS */                                                 
  OD; /* WITH MAIN BUFFER */                                                    
  ZQ_NBR_CELLS := ZQ_NBR_CELLS - 1;                                             
OD; /* WITH ZQ_NBR_CELLS */                                                     
END Q_S0620_UPD_T33_TCU;

 /* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */ 
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0687_UPD_MCCH_CNTRS                              */        
/*                                                                    */        
/*     PROGRAMMER: CHEN ZHANGYI                                       */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 02/07/31                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 110_7 MCCH CELL COUNTERS                    */ 
/*       IN MEMORY USING THE USER                                     */        
/*       BUFFER RECEIVED. SCOPE IS ALL CELLS.                         */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                                                                    */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/

Q_S0687_UPD_MCCH_CNTRS : PROC(ZF_LDC_LCE_ID  M_LCE_ID,                        
                              ZF_LDC_SEQ_NBR M_BYTE,                          
                              ZF_VALIDITY    M_PM_DATA_VALIDITY,              
                              ZF_LDC_BUF_PTR PTR);

DCL ZQ_ACT_IDX       INT;
                              
                              
IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_CELL_TRX_OVERVIEW_COUNTERS,
			     ZQ_ACT_IDX)
THEN
  IF ZF_VALIDITY = E_DATA_INVALID
  THEN
  Q_S0448_UPD_T110_TCU_INVALID(ZF_LDC_LCE_ID);
  ELSE
    Q_S0987_UPD_MCCH_TCU_TYPE110_7(ZF_LDC_BUF_PTR);
 /*BEGIN: FUNCTION CALLED FOR "TRX-POWER-SAVING" COUNTERS UPDATION */ 
   Q_S0988_UPD_TRX_PWR_TCU_TYPE110_7(ZF_LDC_BUF_PTR); 
/*END: FUNCTION CALLED FOR "TRX-POWER-SAVING" COUNTERS UPDATION */ 
 FI;  
FI;
END Q_S0687_UPD_MCCH_CNTRS;
/* END : ADD-WIPRO-B10-MR1-CHANGE */

/* BEGIN:BTS-TRX-TEMP-LOGGING */
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE:Q_S0688_UPD_TRX_TEMP_CNTRS                           */
/*                                                                    */
/*     PROGRAMMER: CHEN ZHANGYI                                       */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 02/07/31                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*                                                                    */
/*                                                                    */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                                                                    */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                                                                    */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                                                                    */
/*     CALLED FROM:                                                   */
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0688_UPD_TRX_TEMP_CNTRS: PROC(ZF_LDC_LCE_ID  M_LCE_ID,
                                   ZF_LDC_SEQ_NBR M_BYTE,
                                   ZF_VALIDITY    M_PM_DATA_VALIDITY,
                                   ZF_LDC_BUF_PTR PTR);
 DCL  ZQ_ACT_IDX     INT;
 DCL  ZQ_NBR_TRX     INT;
 DCL  ZQ_TRX_IDX     M_TRX_IDX;

 IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_CELL_TRX_OVERVIEW_COUNTERS,
			     ZQ_ACT_IDX)
 THEN
  IF ZF_VALIDITY /= E_DATA_INVALID
   THEN
       
    DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_T33_CTRS_AREA;
       ZQ_NBR_TRX := B_NBR_TRX;
    OD;  
    
    DO WHILE ZQ_NBR_TRX /= 0;
     DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_T33_CTRS_AREA;
       ZQ_TRX_IDX := B_T110_TRX_BTS_CNTRS(ZQ_NBR_TRX).B_TRX_IDX;
       IF ZQ_TRX_IDX > 0 AND
           ZQ_TRX_IDX <= CM_FY32_MAX_TRX_PER_BSC
       THEN
          /*START: MC Counters*/
          IF (ZQ_TRX_IDX <= CM_FY32_MAX_TRX_PER_BSC/2)
          THEN
          /*END: MC Counters*/
          DO WITH Z_T110_4_PTR->(ZM_TRX_INDEX_VALUE(ZQ_TRX_IDX));
            B_TRX_IDX := ZQ_TRX_IDX;
            IF Z_STD_TRX_LIST(ZQ_TRX_IDX)
            THEN
             DO WITH B_T110_TRX_BTS_CNTRS(ZQ_NBR_TRX);
              
       	         Q_S0689_UPD_MAX_VALUE(B_BTS_CNTRS_TYPE110
                     (E_MC1200_TRX_MAX_TEMP),
                       B_CTRS_PT4_MT_110.B_MC1200);
              /* BEGIN : CR20_291301- Better DPS Counters */
		Q_S0020_ADD_DP_VALUES(B_TRX_POW_BIOS_CNTRS_T110
			(E_MC1201_TIME_PA_BIAS_ON_TRX),
			B_CTRS_PT4_MT_110.B_MC1201_TO_MC320J
				(E_MT_110_CTR_MC1201));
	      /* END : CR20_291301 */ 
             OD;  /* DO WITH B_T110_TRX_BTS_CNTRS */
            
	    FI;

            /* CR20/279889*/
              DO WITH B_T110_TRX_MC_CNTRS(ZQ_NBR_TRX);
                 Q_S0020_ADD_DP_VALUES(ZB_MC_CNTRS_TYPE110
                     (E_MC1208_TIME_PWR_RED_8PSK_1),
                        B_CTRS_PT4_MT_110.B_MC1201_TO_MC320J
                                         (E_MT_110_CTR_MC1208));

                 Q_S0020_ADD_DP_VALUES(ZB_MC_CNTRS_TYPE110
                     (E_MC1209_TIME_PWR_RED_8PSK_2),
                        B_CTRS_PT4_MT_110.B_MC1201_TO_MC320J
                                         (E_MT_110_CTR_MC1209));

                 Q_S0020_ADD_DP_VALUES(ZB_MC_CNTRS_TYPE110
                     (E_MC1210_TIME_PWR_RED_8PSK_3),
                        B_CTRS_PT4_MT_110.B_MC1201_TO_MC320J
                                         (E_MT_110_CTR_MC1210));
                 Q_S0020_ADD_DP_VALUES(ZB_MC_CNTRS_TYPE110
                     (E_MC1211_TIME_PWR_RED_8PSK_4),
                        B_CTRS_PT4_MT_110.B_MC1201_TO_MC320J
                                         (E_MT_110_CTR_MC1211));

                 Q_S0020_ADD_DP_VALUES(ZB_MC_CNTRS_TYPE110
                     (E_MC1212_TIME_PWR_RED_GMSK_1),
                        B_CTRS_PT4_MT_110.B_MC1201_TO_MC320J
                                         (E_MT_110_CTR_MC1212));

                Q_S0020_ADD_DP_VALUES(ZB_MC_CNTRS_TYPE110
                     (E_MC1213_TIME_PWR_RED_GMSK_2),
                        B_CTRS_PT4_MT_110.B_MC1201_TO_MC320J
                                         (E_MT_110_CTR_MC1213));

                Q_S0020_ADD_DP_VALUES(ZB_MC_CNTRS_TYPE110
                     (E_MC1214_TIME_PWR_RED_GMSK_3),
                        B_CTRS_PT4_MT_110.B_MC1201_TO_MC320J
                                         (E_MT_110_CTR_MC1214));

                Q_S0020_ADD_DP_VALUES(ZB_MC_CNTRS_TYPE110
                     (E_MC1215_TIME_PWR_RED_GMSK_4),
                        B_CTRS_PT4_MT_110.B_MC1201_TO_MC320J
                                         (E_MT_110_CTR_MC1215));

                Q_S0020_ADD_DP_VALUES(ZB_MC_CNTRS_TYPE110
                     (E_MC1216_TIME_PWR_RED_DEFENSE_1),
                        B_CTRS_PT4_MT_110.B_MC1201_TO_MC320J
                                         (E_MT_110_CTR_MC1216));

                Q_S0020_ADD_DP_VALUES(ZB_MC_CNTRS_TYPE110
                     (E_MC1217_TIME_PWR_RED_DEFENSE_2),
                        B_CTRS_PT4_MT_110.B_MC1201_TO_MC320J
                                         (E_MT_110_CTR_MC1217));

                Q_S0020_ADD_DP_VALUES(ZB_MC_CNTRS_TYPE110
                     (E_MC1218_TIME_PWR_RED_DEFENSE_3),
                        B_CTRS_PT4_MT_110.B_MC1201_TO_MC320J
                                         (E_MT_110_CTR_MC1218));

                Q_S0020_ADD_DP_VALUES(ZB_MC_CNTRS_TYPE110
                     (E_MC1219_TIME_PWR_RED_DEFENSE_4),
                        B_CTRS_PT4_MT_110.B_MC1201_TO_MC320J
                                         (E_MT_110_CTR_MC1219));

                Q_S0020_ADD_DP_VALUES(ZB_MC_CNTRS_TYPE110
                     (E_MC1220_TIME_8PSK_BURST_TRANS),
                        B_CTRS_PT4_MT_110.B_MC1201_TO_MC320J
                                         (E_MT_110_CTR_MC1220));

                Q_S0020_ADD_DP_VALUES(ZB_MC_CNTRS_TYPE110
                     (E_MC1221_TIME_GMSK_BURST_TRANS),
                        B_CTRS_PT4_MT_110.B_MC1201_TO_MC320J
                                         (E_MT_110_CTR_MC1221));

                Q_S0020_ADD_DP_VALUES(ZB_MC_CNTRS_TYPE110
                     (E_MC1222_TIME_DEFENSE_TRANS),
                        B_CTRS_PT4_MT_110.B_MC1201_TO_MC320J
                                         (E_MT_110_CTR_MC1222));

              OD;
            /* CR20/279889*/
         OD; /*HISTORY FILE POINTER */
         /*START: MC Counters*/
         ELSE
         DO WITH Z_T110_4_2_PTR->(ZM_TRX_INDEX_VALUE(ZQ_TRX_IDX));
            B_TRX_IDX := ZQ_TRX_IDX;
            IF Z_STD_TRX_LIST(ZQ_TRX_IDX)
            THEN
             DO WITH B_T110_TRX_BTS_CNTRS(ZQ_NBR_TRX);
              
       	         Q_S0689_UPD_MAX_VALUE(B_BTS_CNTRS_TYPE110
                     (E_MC1200_TRX_MAX_TEMP),
                       B_CTRS_PT4_MT_110.B_MC1200);
              /* BEGIN : CR20_291301- Better DPS Counters */
		Q_S0020_ADD_DP_VALUES(B_TRX_POW_BIOS_CNTRS_T110
			(E_MC1201_TIME_PA_BIAS_ON_TRX),
			B_CTRS_PT4_MT_110.B_MC1201_TO_MC320J
				(E_MT_110_CTR_MC1201));
	      /* END : CR20_291301 */ 
          
             OD;  /* DO WITH B_T110_TRX_BTS_CNTRS */
	    FI;

            /* CR20/279889*/
              DO WITH B_T110_TRX_MC_CNTRS(ZQ_NBR_TRX);
	         Q_S0020_ADD_DP_VALUES(ZB_MC_CNTRS_TYPE110
                     (E_MC1208_TIME_PWR_RED_8PSK_1),
                        B_CTRS_PT4_MT_110.B_MC1201_TO_MC320J
                                         (E_MT_110_CTR_MC1208));

                 Q_S0020_ADD_DP_VALUES(ZB_MC_CNTRS_TYPE110
                     (E_MC1209_TIME_PWR_RED_8PSK_2),
                        B_CTRS_PT4_MT_110.B_MC1201_TO_MC320J
                                         (E_MT_110_CTR_MC1209));

                 Q_S0020_ADD_DP_VALUES(ZB_MC_CNTRS_TYPE110
                     (E_MC1210_TIME_PWR_RED_8PSK_3),
                        B_CTRS_PT4_MT_110.B_MC1201_TO_MC320J
                                         (E_MT_110_CTR_MC1210));
                 Q_S0020_ADD_DP_VALUES(ZB_MC_CNTRS_TYPE110
                     (E_MC1211_TIME_PWR_RED_8PSK_4),
                        B_CTRS_PT4_MT_110.B_MC1201_TO_MC320J
                                         (E_MT_110_CTR_MC1211));

                 Q_S0020_ADD_DP_VALUES(ZB_MC_CNTRS_TYPE110
                     (E_MC1212_TIME_PWR_RED_GMSK_1),
                        B_CTRS_PT4_MT_110.B_MC1201_TO_MC320J
                                         (E_MT_110_CTR_MC1212));

                Q_S0020_ADD_DP_VALUES(ZB_MC_CNTRS_TYPE110
                     (E_MC1213_TIME_PWR_RED_GMSK_2),
                        B_CTRS_PT4_MT_110.B_MC1201_TO_MC320J
                                         (E_MT_110_CTR_MC1213));

                Q_S0020_ADD_DP_VALUES(ZB_MC_CNTRS_TYPE110
                     (E_MC1214_TIME_PWR_RED_GMSK_3),
                        B_CTRS_PT4_MT_110.B_MC1201_TO_MC320J
                                         (E_MT_110_CTR_MC1214));

                Q_S0020_ADD_DP_VALUES(ZB_MC_CNTRS_TYPE110
                     (E_MC1215_TIME_PWR_RED_GMSK_4),
                        B_CTRS_PT4_MT_110.B_MC1201_TO_MC320J
                                         (E_MT_110_CTR_MC1215));

                Q_S0020_ADD_DP_VALUES(ZB_MC_CNTRS_TYPE110
                     (E_MC1216_TIME_PWR_RED_DEFENSE_1),
                        B_CTRS_PT4_MT_110.B_MC1201_TO_MC320J
                                         (E_MT_110_CTR_MC1216));

                Q_S0020_ADD_DP_VALUES(ZB_MC_CNTRS_TYPE110
                     (E_MC1217_TIME_PWR_RED_DEFENSE_2),
                        B_CTRS_PT4_MT_110.B_MC1201_TO_MC320J
                                         (E_MT_110_CTR_MC1217));

                Q_S0020_ADD_DP_VALUES(ZB_MC_CNTRS_TYPE110
                     (E_MC1218_TIME_PWR_RED_DEFENSE_3),
                        B_CTRS_PT4_MT_110.B_MC1201_TO_MC320J
                                         (E_MT_110_CTR_MC1218));

                Q_S0020_ADD_DP_VALUES(ZB_MC_CNTRS_TYPE110
                     (E_MC1219_TIME_PWR_RED_DEFENSE_4),
                        B_CTRS_PT4_MT_110.B_MC1201_TO_MC320J
                                         (E_MT_110_CTR_MC1219));

                Q_S0020_ADD_DP_VALUES(ZB_MC_CNTRS_TYPE110
                     (E_MC1220_TIME_8PSK_BURST_TRANS),
                        B_CTRS_PT4_MT_110.B_MC1201_TO_MC320J
                                         (E_MT_110_CTR_MC1220));

                Q_S0020_ADD_DP_VALUES(ZB_MC_CNTRS_TYPE110
                     (E_MC1221_TIME_GMSK_BURST_TRANS),
                        B_CTRS_PT4_MT_110.B_MC1201_TO_MC320J
                                         (E_MT_110_CTR_MC1221));

                Q_S0020_ADD_DP_VALUES(ZB_MC_CNTRS_TYPE110
                     (E_MC1222_TIME_DEFENSE_TRANS),
                        B_CTRS_PT4_MT_110.B_MC1201_TO_MC320J
                                         (E_MT_110_CTR_MC1222));
              OD;
            /* CR20/279889*/

         OD; /*HISTORY FILE POINTER */
         FI;
         /*END: MC Counters*/
       FI;
      ZQ_NBR_TRX := ZQ_NBR_TRX - 1;
    OD;
  OD;
 FI;
FI;
END Q_S0688_UPD_TRX_TEMP_CNTRS;
/*END:BTS-TRX-TEMP-LOGGING */

/* BEGIN:BTS-TRX-TEMP-LOGGING */
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE:Q_S0689_UPD_MAX_VALUE                                */
/*                                                                    */
/*     PROGRAMMER: CHEN ZHANGYI                                       */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 02/07/31                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*                                                                    */
/*                                                                    */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                                                                    */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                                                                    */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                                                                    */
/*     CALLED FROM:                                                   */
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0689_UPD_MAX_VALUE: PROC(ZQ_INT     INT,
                              ZQ_OUT_INT INT LOC
                              );


IF ZQ_INT = ZS_FFFF
THEN
  /* IT HAS OVERFLOWED AS INDICATED BY H'FFFE OR
   * THE SOURCE VALUE IS INVALID.
   */
   IF ZQ_OUT_INT = ZS_FFFF 
   THEN
      ZQ_OUT_INT := ZS_FFFE;
   FI;
ELSE
  IF ZQ_OUT_INT = ZS_FFFF OR  ZQ_OUT_INT = ZS_FFFE
  THEN
    /* IT IS UNINITIALISED SO OVERWRITE */
    ZQ_OUT_INT := ZQ_INT;
  ELSE
    IF ZQ_INT /= 0
    THEN
     IF ZQ_OUT_INT = 0
     THEN
       ZQ_OUT_INT := ZQ_INT;
     ELSIF ZQ_OUT_INT/ZQ_INT > 0 OR ZQ_INT/ZQ_OUT_INT > 0
     THEN
      /* SAME SIGN FOR BOTH NUMBERS */
      IF ZQ_OUT_INT < ZQ_INT
      THEN
         ZQ_OUT_INT := ZQ_INT;
      FI;
     ELSIF ZQ_INT < 0         /* DIFFERENT SIGN: NEG AND POS */
     THEN
        ZQ_OUT_INT := ZQ_INT;
     FI;
  FI;  
 FI;
FI;
  
END Q_S0689_UPD_MAX_VALUE;                

/*END:BTS-TRX-TEMP-LOGGING */

/*************************************************************/

/* START: CR 605005 */

Q_S0690_UPD_PM_CPI_CTRS: PROC(ZF_PTR PTR);

  DO WITH ZF_PTR -> M_MXPF_CPI_MPPMSPMCPUOVLDRDATA;
     DO WITH Z_T110_14_PTR->;
	  DO WITH B_CTRS_PT14_MT_110;

	/*START 751566*/
	Q_S0050_AVG_OR_REPL_INT(
                 B_MXPF_MPPMSPMCPUOVLDRDATA.B_MXPF_OVLINDICAVG,
					B_MC1540_TO_MC1541(E_MT_110_CTR_MC1540),
                 ZS_AVG);

	Q_S0050_AVG_OR_REPL_INT(
                 B_MXPF_MPPMSPMCPUOVLDRDATA.B_MXPF_OVLINDICMAX,
					B_MC1540_TO_MC1541(E_MT_110_CTR_MC1541),
                 ZS_REPL);
	
	    /*Q_S0040_ADD_INT_TO_INT ( 
		 B_MXPF_MPPMSPMCPUOVLDRDATA.B_MXPF_OVLINDICAVG,
	    B_MC1540_TO_MC1541(E_MT_110_CTR_MC1540));
	
	    Q_S0040_ADD_INT_TO_INT (
     	B_MXPF_MPPMSPMCPUOVLDRDATA.B_MXPF_OVLINDICMAX,
	    B_MC1540_TO_MC1541(E_MT_110_CTR_MC1541));*/
/*END 751566*/
	  OD;
	OD;
  OD;

END Q_S0690_UPD_PM_CPI_CTRS;  

/*************************************************************/

Q_S0691_UPD_PM_CPI_CTRS_INVALID: PROC();

DO WITH Z_T110_14_PTR->;
  DO WITH B_CTRS_PT14_MT_110;
  
    B_MC1540_TO_MC1541(E_MT_110_CTR_MC1540) := ZS_FFFF;
	B_MC1540_TO_MC1541(E_MT_110_CTR_MC1541) := ZS_FFFF;
	
   OD;
OD;

END Q_S0691_UPD_PM_CPI_CTRS_INVALID;

/* END: CR 605005 */

/**********************************************************************/

/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0987_UPD_MCCH_TCU_TYPE110_7                      */        
/*                                                                    */        
/*     PROGRAMMER: CHEN ZHANGYI                                       */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 17/02/2006                                      */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*         THIS PROCEDURE IS ADDED TO UPDATE TYPE 110_7 VALID         */        
/*         COUNTERS FROM THE USER BUFFER                              */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*     CALLED FROM:   Q_S0687_UPD_MCCH_CNTRS                          */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        

Q_S0987_UPD_MCCH_TCU_TYPE110_7 : PROC(ZF_LDC_BUF_PTR PTR);

DCL ZQ_NBR_CCCH_CELLS  INT;

DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_T33_CTRS_AREA;
  ZQ_NBR_CCCH_CELLS := B_NBR_CCCH_CELLS;
OD;

DO WHILE ZQ_NBR_CCCH_CELLS /= 0;                                                     
  DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_T33_CTRS_AREA;                          
    DO WITH B_T110_CCCH_CNTRS(ZQ_NBR_CCCH_CELLS);                                         
    /* COPY THE COUNTERS FOR THE CELLS IN THE LIST INTO THE                     
     * DATA STRUCTURE IN MEMORY.                                                
     */                                                                         
      IF (B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC) AND                          
         (B_CELL_IDX > 0)                   
      THEN
/* CR20/209493 START */
       IF (B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC/2)
       THEN  
        DO WITH Z_T110_7_PTR->(ZM_CELL_INDEX_VALUE(B_CELL_IDX)); 
/* CR20/209493 END */        
        B_CELL_ID:=B_CELL_IDX;
        DO WITH B_CTRS_PT7_MT_110;
           IF Z_STD_CELL_LIST(B_CELL_IDX) 
           THEN 
              Q_S0020_ADD_DP_VALUES(B_CCCH_CNTRS_TYPE110
                  (E_MC925A_NB_AGCH_USE_BLKS_SENT),
/* CR 188510 START */        
/* CR20/209493 START */
                  B_MC191_TO_MC975(E_MT_110_CTR_MC925A));
            
             Q_S0020_ADD_DP_VALUES(B_CCCH_CNTRS_TYPE110
                  (E_MC925B_NB_PCH_USE_BLKS_SENT),
                   B_MC191_TO_MC975(E_MT_110_CTR_MC925B)); 
                                     
              Q_S0020_ADD_DP_VALUES(B_CCCH_CNTRS_TYPE110
                   (E_MC925C_NB_BUSY_RACH_SLOTS),
                   B_MC191_TO_MC975(E_MT_110_CTR_MC925C));
                                      
              Q_S0020_ADD_DP_VALUES(B_CCCH_CNTRS_TYPE110
                   (E_MC925D_NB_CHANNEL_RQ_RADIO),
                   B_MC191_TO_MC975(E_MT_110_CTR_MC925D)); 
                                     
              Q_S0020_ADD_DP_VALUES(B_CCCH_CNTRS_TYPE110
                   (E_MC925E_NB_ASS_CMD_RCVD_ABIS),
                    B_MC191_TO_MC975(E_MT_110_CTR_MC925E)); 
                                     
              Q_S0020_ADD_DP_VALUES(B_CCCH_CNTRS_TYPE110
                   (E_MC925F_NB_ASS_CMD_DISCARDED),
                    B_MC191_TO_MC975(E_MT_110_CTR_MC925F));                         
                                     
              Q_S0020_ADD_DP_VALUES(B_CCCH_CNTRS_TYPE110
                   (E_MC925G_NB_PAG_CMD_RCVD_ABIS),
                   B_MC191_TO_MC975(E_MT_110_CTR_MC925G)); 
                                     
              Q_S0020_ADD_DP_VALUES(B_CCCH_CNTRS_TYPE110
                   (E_MC925H_NB_PAG_CMD_DISCARDED ),
                   B_MC191_TO_MC975(E_MT_110_CTR_MC925H)); 

/* CR20/203395 */
              Q_S0020_ADD_DP_VALUES(B_CCCH_CNTRS_TYPE110
                   (E_MC930_NB_ABIS_PAG_MSG_RCVD),
                   B_MC191_TO_MC975(E_MT_110_CTR_MC930)); 
/* CR20/203395 */
/* CR20/209493 END */
           ELSE
              Q_S0287_UPD_T110_7_INVALID(B_CELL_IDX,
                                  M_FS_TCU_TRF_LDC,FALSE);
           FI;
         OD;
        OD;
/* CR20/209493 START */
      ELSE
       DO WITH Z_T110_7_2_PTR->(ZM_CELL_INDEX_VALUE(B_CELL_IDX)); 
        B_CELL_ID:=B_CELL_IDX;
        DO WITH B_CTRS_PT7_MT_110;
           IF Z_STD_CELL_LIST(B_CELL_IDX)
           THEN
              Q_S0020_ADD_DP_VALUES(B_CCCH_CNTRS_TYPE110
                  (E_MC925A_NB_AGCH_USE_BLKS_SENT),
                  B_MC191_TO_MC975(E_MT_110_CTR_MC925A));

             Q_S0020_ADD_DP_VALUES(B_CCCH_CNTRS_TYPE110
                  (E_MC925B_NB_PCH_USE_BLKS_SENT),
                   B_MC191_TO_MC975(E_MT_110_CTR_MC925B));

              Q_S0020_ADD_DP_VALUES(B_CCCH_CNTRS_TYPE110
                   (E_MC925C_NB_BUSY_RACH_SLOTS),
                   B_MC191_TO_MC975(E_MT_110_CTR_MC925C));

              Q_S0020_ADD_DP_VALUES(B_CCCH_CNTRS_TYPE110
                   (E_MC925D_NB_CHANNEL_RQ_RADIO),
                   B_MC191_TO_MC975(E_MT_110_CTR_MC925D));

              Q_S0020_ADD_DP_VALUES(B_CCCH_CNTRS_TYPE110
                   (E_MC925E_NB_ASS_CMD_RCVD_ABIS),
                    B_MC191_TO_MC975(E_MT_110_CTR_MC925E));

              Q_S0020_ADD_DP_VALUES(B_CCCH_CNTRS_TYPE110
                   (E_MC925F_NB_ASS_CMD_DISCARDED),
                    B_MC191_TO_MC975(E_MT_110_CTR_MC925F));

              Q_S0020_ADD_DP_VALUES(B_CCCH_CNTRS_TYPE110
                   (E_MC925G_NB_PAG_CMD_RCVD_ABIS),
                   B_MC191_TO_MC975(E_MT_110_CTR_MC925G));

              Q_S0020_ADD_DP_VALUES(B_CCCH_CNTRS_TYPE110
                   (E_MC925H_NB_PAG_CMD_DISCARDED ),
                   B_MC191_TO_MC975(E_MT_110_CTR_MC925H));

              Q_S0020_ADD_DP_VALUES(B_CCCH_CNTRS_TYPE110
                   (E_MC930_NB_ABIS_PAG_MSG_RCVD),
                   B_MC191_TO_MC975(E_MT_110_CTR_MC930));
           ELSE
              Q_S0287_UPD_T110_7_INVALID(B_CELL_IDX,
                                  M_FS_TCU_TRF_LDC,FALSE);
           FI; 
         OD;
        OD;           
      FI;
/* CR20/209493 END */
      FI; 
    OD;           
   OD;
  ZQ_NBR_CCCH_CELLS := ZQ_NBR_CCCH_CELLS - 1;
OD;

END Q_S0987_UPD_MCCH_TCU_TYPE110_7;
/* END : ADD-WIPRO-B10-MR1-CHANGE */

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0988_UPD_TRX_PWR_TCU_TYPE110_7                   */
/*                                                                    */
/*     PROGRAMMER:                                                    */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE:                                                 */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*         THIS PROCEDURE IS ADDED TO UPDATE TYPE 110_7 VALID         */
/*         COUNTERS FROM THE USER BUFFER                              */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                                                                    */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*     CALLED FROM:   Q_S0687_UPD_MCCH_CNTRS                          */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0988_UPD_TRX_PWR_TCU_TYPE110_7 : PROC(ZF_LDC_BUF_PTR PTR);

DCL ZQ_NBR_CELLS  INT;

DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_T33_CTRS_AREA;
  ZQ_NBR_CELLS := B_NBR_CELLS;
OD;

DO WHILE ZQ_NBR_CELLS /= 0;
  DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_T33_CTRS_AREA;
    DO WITH B_T110_TRX_POW_CNTRS(ZQ_NBR_CELLS);
    /* COPY THE COUNTERS FOR THE CELLS IN THE LIST INTO THE
     * DATA STRUCTURE IN MEMORY.
     */
      IF (B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC) AND
         (B_CELL_IDX > 0)
      THEN
       IF (B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC/2)
       THEN
        DO WITH Z_T110_7_PTR->(ZM_CELL_INDEX_VALUE(B_CELL_IDX));
        B_CELL_ID:=B_CELL_IDX;
        DO WITH B_CTRS_PT7_MT_110;
           IF Z_STD_CELL_LIST(B_CELL_IDX)
           THEN
             Q_S0020_ADD_DP_VALUES(B_CNTRS_TRX_POW_TYPE110
                   (E_MC957_TIME_TS_BUSY),
                     B_MC191_TO_MC975(E_MT_110_CTR_MC957));
             Q_S0020_ADD_DP_VALUES(B_CNTRS_TRX_POW_TYPE110
                   (E_MC958_TIME_PA_BIAS_ON),
                     B_MC191_TO_MC975(E_MT_110_CTR_MC958));
           ELSE
              Q_S0287_UPD_T110_7_INVALID(B_CELL_IDX,
                                  M_FS_TCU_TRF_LDC,FALSE);
           FI;
        OD;
        OD;
       ELSE
        DO WITH Z_T110_7_2_PTR->(ZM_CELL_INDEX_VALUE(B_CELL_IDX));
          B_CELL_ID:=B_CELL_IDX;
          DO WITH B_CTRS_PT7_MT_110;
            IF Z_STD_CELL_LIST(B_CELL_IDX)
            THEN
              Q_S0020_ADD_DP_VALUES(B_CNTRS_TRX_POW_TYPE110
                    (E_MC957_TIME_TS_BUSY),
                     B_MC191_TO_MC975(E_MT_110_CTR_MC957));
              Q_S0020_ADD_DP_VALUES(B_CNTRS_TRX_POW_TYPE110
                    (E_MC958_TIME_PA_BIAS_ON),
                     B_MC191_TO_MC975(E_MT_110_CTR_MC958));
            ELSE
              Q_S0287_UPD_T110_7_INVALID(B_CELL_IDX,
                                  M_FS_TCU_TRF_LDC,FALSE);
            FI;
          OD;
        OD;
       FI;
      FI;
    OD;
  OD;
  ZQ_NBR_CELLS := ZQ_NBR_CELLS - 1;
OD;

END Q_S0988_UPD_TRX_PWR_TCU_TYPE110_7; 

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0630_UPD_T34_STD_TCU                             */        
/*                                                                    */        
/*     PROGRAMMER: CHEN ZHANGYI  (ASB)                                */        
/*                                                                    */        
/*                LAST MODIFIED BY: CHENZY             DATE: 04/09/20 */        
/*                                                                    */        
/*     CREATION DATE: 04/09/20                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 34 CELL COUNTERS IN MEMORY USING THE USER   */        
/*       BUFFER RECEIVED FROM TCU.                                    */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*                      ZF_ACT_IDX INT,                               */        
/*                      ZF_ALL_CELLS BOOL                             */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0180_CELL_IN_SCOPE                         */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0630_UPD_T34_STD_TCU: PROC(ZF_LDC_BUF_PTR PTR,                               
                              ZF_ACT_IDX     INT,                               
                              ZF_ALL_CELLS   BOOL);                             
                                                                                
DCL ZQ_NBR_CELLS  INT;                                                          
                                                                                
DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_STD_CTRS_AREA; 
  ZQ_NBR_CELLS := B_NBR_CELLS;  
OD;                     
                                                                                
DO WHILE ZQ_NBR_CELLS /= 0;                                                     
  DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_STD_CTRS_AREA;                          
    DO WITH B_CELL_CNTRS(ZQ_NBR_CELLS);                                         
    /* COPY THE COUNTERS FOR THE CELLS IN THE LIST INTO THE                     
     * DATA STRUCTURE IN MEMORY.                                                
     */                                                                         
      IF (B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC) AND                          
         (B_CELL_IDX > 0) AND                                                   
         (ZF_ALL_CELLS OR                                                       
          Q_S0180_CELL_IN_SCOPE(ZF_ACT_IDX,B_CELL_IDX))                         
      THEN                                                                      
        DO WITH Z_T34_2_PTR->(B_CELL_IDX);                                        
          /* NOTE THAT THERE IS DIRECT ACCESS TO MEMORY - NO                    
           * SEARCHING FOR A MATCHING CELL AS THEY ARE ASSUMED                  
           * TO BE CONTIGUOUS.                                                  
           */                                                                   
          B_CELL_ID:=B_CELL_IDX;                                                
                                                                                
          IF Z_STD_CELL_LIST(B_CELL_IDX)                                        
          THEN                                                                  
            /* ADD V05, V13, V19 */                                    
            DO WITH B_CTRS_CELL_MT_34;
              Q_S0040_ADD_INT_TO_INT(
                 B_CNTRS_TYPE_34(E_V05_CM_SERV_REQ_VGCS),
                 B_V01_TO_V20(E_MT_34_CTR_V05));
               
              Q_S0040_ADD_INT_TO_INT(
                 B_CNTRS_TYPE_34(E_V13_VGCS_NOTIF_FACCH),
                 B_V01_TO_V20(E_MT_34_CTR_V13));
               
              Q_S0040_ADD_INT_TO_INT(
                 B_CNTRS_TYPE_34(E_V19_NB_PAGING_FACCH),
                 B_V01_TO_V20(E_MT_34_CTR_V19));
            OD;
          ELSE                                                                  
            DO WITH B_CTRS_CELL_MT_34;
              B_V01_TO_V20(E_MT_34_CTR_V05) := ZS_FFFE;
              B_V01_TO_V20(E_MT_34_CTR_V13) := ZS_FFFE;
              B_V01_TO_V20(E_MT_34_CTR_V19) := ZS_FFFE;
            OD;
          FI;                                                                   
                                                                                
        OD; /* WITH Z_T34_PTR */                                                
      FI;                                                                       
    OD; /* WITH B_CELL_CNTRS */                                                 
  OD; /* WITH MAIN BUFFER */                                                    
  ZQ_NBR_CELLS := ZQ_NBR_CELLS - 1;                                             
OD; /* WITH ZQ_NBR_CELLS */                                                     
                                                                                
END Q_S0630_UPD_T34_STD_TCU;                                                    

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0631_UPD_T34_TCU_INVALID                         */        
/*                                                                    */        
/*     PROGRAMMER: CHEN ZHANGYI  (ASB)                                */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 04/09/20                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 34 CELL COUNTERS VALIDITY FIELDS.           */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LCE_ID M_LCE_ID,                           */        
/*                      ZF_ACT_IDX INT,                               */        
/*                      ZF_ALL_CELLS BOOL                             */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0120_GET_CIS_FOR_TCU                       */        
/*                      Q_S0180_CELL_IN_SCOPE                         */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0631_UPD_T34_TCU_INVALID: PROC(ZF_LCE_ID     M_LCE_ID,                       
                                  ZF_ACT_IDX    INT,                            
                                  ZF_ALL_CELLS  BOOL);                          
                                                                                
DCL ZQ_CELL_LIST    ZM_CIS_PER_TCU,                                             
    ZQ_IDX          RANGE(1:CM_FY32_MAX_CELLS_PER_TCU);
                                                                                
ZQ_CELL_LIST := Q_S0120_GET_CIS_FOR_TCU(ZF_LCE_ID);                             
                                                                                
DO FOR ZQ_IDX := 1 TO CM_FY32_MAX_CELLS_PER_TCU WHILE                           
                               ZQ_CELL_LIST(ZQ_IDX) /= M_NULL_CELL_IDX;         
  IF ZF_ALL_CELLS OR                                                            
     Q_S0180_CELL_IN_SCOPE(ZF_ACT_IDX, ZQ_CELL_LIST(ZQ_IDX))                    
  THEN                                                                          
    DO WITH Z_T34_2_PTR -> (ZQ_CELL_LIST(ZQ_IDX));                                
      /* IT MAY BE THAT NO SAMPLES HAVE BEEN RECEIVED BUT STILL                 
       * THE CELLS SHOULD BE IDENTIFIED.                                        
       */                                                                       
      B_CELL_ID:=ZQ_CELL_LIST(ZQ_IDX);                                          
      DO WITH B_CTRS_CELL_MT_34;
        B_V01_TO_V20(E_MT_34_CTR_V05) := ZS_FFFE;
        B_V01_TO_V20(E_MT_34_CTR_V13) := ZS_FFFE;
        B_V01_TO_V20(E_MT_34_CTR_V19) := ZS_FFFE;
      OD;
    OD;                                                                         
  FI;                                                                           
OD;                                                                             
                                                                                
END Q_S0631_UPD_T34_TCU_INVALID;                                                

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0635_UPD_T34_DTC_BSS                             */        
/*                                                                    */        
/*     PROGRAMMER: CHEN ZHANGYI  (KDC)                                */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 04/09/20                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 34 BSS COUNTERS IN MEMORY USING THE USER    */        
/*       BUFFER RECEIVED.                                             */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0250_UPD_DTC_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0635_UPD_T34_DTC_BSS: PROC(ZF_LDC_BUF_PTR PTR);                             
                                                                                
DO WITH ZF_LDC_BUF_PTR -> M_DTC_STD_BSS_CTRS.B_BSS_CNTRS;                       
  DO WITH Z_T34_PTR->.B_BSS_CNTRS;                                                  
                                                                                
      Q_S0040_ADD_INT_TO_INT(                                                 
                B_CNTRS_TYPE34(E_V11_NB_TALKER_CHANGE_VGCS),              
                B_V11_TO_V17(E_MT_34_CTR_V11));                                                        
                                                                                
      Q_S0040_ADD_INT_TO_INT(                                                 
                B_CNTRS_TYPE34(E_V17_NB_VGCS_ESTABLISHED),              
                B_V11_TO_V17(E_MT_34_CTR_V17));                                                        
                                                                                
  OD;  /* Z_T34_PTR */                                                       
OD; /* ZF_LDC_BUF_PTR */                                                        
                                                                                
END Q_S0635_UPD_T34_DTC_BSS;                                                   

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0636_UPD_T34_DTC_BSS_INVALID                     */        
/*                                                                    */        
/*     PROGRAMMER: CHEN ZHANGYI  (ASB)                                */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 04/09/20                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 34 DTC COUNTERS VALIDITY FIELDS.            */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_CELL_DEP BOOL                              */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0575_UPD_T110_1_INVALID                    */        
/*                      Q_S0449_UPD_T110_2_INVALID                    */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0250_UPD_DTC_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0636_UPD_T34_DTC_BSS_INVALID: PROC();

DO WITH Z_T34_PTR->;
  DO WITH B_BSS_CNTRS;
      B_V11_TO_V17(E_MT_34_CTR_V11) := ZS_FFFE;
      B_V11_TO_V17(E_MT_34_CTR_V17) := ZS_FFFE;
  OD;
OD;

END Q_S0636_UPD_T34_DTC_BSS_INVALID;                                               

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0637_UPD_T34_STD_DTC                             */        
/*                                                                    */        
/*     PROGRAMMER: CHEN ZHANGYI  (ASB)                                */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 04/09/20                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION: NOTE: UPDATE OF THE TYPE 34 COUNTERS   */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*                      ZF_ACT_IDX INT,                               */        
/*                      ZF_ALL_CELLS BOOL                             */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0180_CELL_IN_SCOPE                         */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*                      Q_S0040_ADD_INT_TO_INT                        */        
/*                      Q_S0410_UPD_T29_INVALID                       */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0250_UPD_DTC_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0637_UPD_T34_STD_DTC: PROC(ZF_LDC_BUF_PTR PTR,                               
                              ZF_ACT_IDX     INT,                               
                              ZF_ALL_CELLS   BOOL);                             
                                                                                
DCL ZQ_DTC_NBR_CELLS INT;                                                       
DCL ZQ_I             M_DTC_TRF_CNTRS_TYPE34;                                    
DCL ZQ_J             M_TYPE_34_2_CTRS;                                                       
                                                                                
DO WITH ZF_LDC_BUF_PTR -> M_DTC_STD_CELL_CTRS;                                  
  DO FOR ZQ_DTC_NBR_CELLS:=1 TO B_NBR_CELLS;                                    
    DO WITH B_CELL_CNTRS(ZQ_DTC_NBR_CELLS);                                     
      IF (B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC) AND                          
         (B_CELL_IDX >  0) AND                                                  
         (ZF_ALL_CELLS OR                                                       
          Q_S0180_CELL_IN_SCOPE(ZF_ACT_IDX, B_CELL_IDX))                        
      THEN                                                                      
        IF Z_STD_CELL_LIST(B_CELL_IDX)                                          
        THEN                                                                    
          DO WITH Z_T34_2_PTR -> (B_CELL_IDX);                                    
                                                                                
            B_CELL_ID := B_CELL_IDX;
            DO WITH B_CTRS_CELL_MT_34;
              DO FOR ZQ_I := E_V03_NB_VGCS_EST_REQ TO
                             E_V04_NB_VGCS_EST_SUCC;

                ZQ_J := M_TYPE_34_2_CTRS(3 + INT(ZQ_I) -
                        INT(E_V03_NB_VGCS_EST_REQ));

                Q_S0040_ADD_INT_TO_INT(B_DTC_TYPE34(ZQ_I),
                                       B_V01_TO_V20(ZQ_J));
              OD;                                                               

              DO FOR ZQ_I := E_V06_NB_VGC_RELEASED_VGCS TO
                             E_V10_NB_INC_TCH_HO_VGCS_SUCC;

                ZQ_J := M_TYPE_34_2_CTRS(6 + INT(ZQ_I) -
                        INT(E_V06_NB_VGC_RELEASED_VGCS));

                Q_S0040_ADD_INT_TO_INT(B_DTC_TYPE34(ZQ_I),
                                       B_V01_TO_V20(ZQ_J));
              OD;                                                               

              DO FOR ZQ_I := E_V14_NB_ASS_REQ_ABLE_PRE_VGCS TO
                             E_V15_NB_VGCS_ASS_REQ_ABLE_PRE;

                ZQ_J := M_TYPE_34_2_CTRS(13 + INT(ZQ_I) -
                        INT(E_V14_NB_ASS_REQ_ABLE_PRE_VGCS));

                Q_S0040_ADD_INT_TO_INT(B_DTC_TYPE34(ZQ_I),                    
                                       B_V01_TO_V20(ZQ_J));           
              OD;                                                               
                                                                                
            OD; /* DO WITH */                                                   
          OD; /* DO WITH HISTORY POINTER */                                     
        ELSE                                                                    
          Q_S0640_UPD_T34_INVALID(B_CELL_IDX, M_FS_DTC_TRF_LDC);                
        FI;                                                                     
      FI; /* CELL IN RANGE */                                                   
    OD;                                                                         
  OD;                                                                           
OD;                                                                             
                                                                                
END Q_S0637_UPD_T34_STD_DTC;                                                    

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0638_UPD_T34_STD_TCHRM                           */        
/*                                                                    */        
/*     PROGRAMMER:  CHEN ZHANGYI (ASB)                                */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 04/09/20                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*                      ZF_ACT_IDX INT,                               */        
/*                      ZF_ALL_CELLS BOOL                             */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0180_CELL_IN_SCOPE                         */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*                      Q_S0040_ADD_INT_TO_INT                        */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0260_UPD_TCH_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0638_UPD_T34_STD_TCHRM: PROC(ZF_LDC_BUF_PTR PTR,                             
                                ZF_ACT_IDX     INT,                             
                                ZF_ALL_CELLS   BOOL);                           
                                                                                
DCL ZQ_NBR_CELLS     INT;                                                       
                                                                                
                                                                                
ZQ_NBR_CELLS := ZF_LDC_BUF_PTR->                                                
                         CM_FY32_PM_TCH_UB_CELLS.B_FIXED.B_NBR_CELLS;           
IF ZQ_NBR_CELLS > CM_FY32_PM_MAX_CELLS_PER_TCHRM_LDC_UB OR                      
   ZQ_NBR_CELLS < 0                                                             
THEN                                                                            
  /* OUT OF RANGE */                                                            
  ZQ_NBR_CELLS := 0;                                                            
  Q_S0010_CCDC_ERROR(M_ERC6_USER_REC,                                           
                     M_ERT0019_INC_MESS_DATA,48, 0194);                         
FI;                                                                             
                                                                                
DO WITH ZF_LDC_BUF_PTR -> CM_FY32_PM_TCH_UB_CELLS;                              
  DO WHILE ZQ_NBR_CELLS /= 0;                                                   
    DO WITH B_CELL_CTRS(LONG_INT((ZQ_NBR_CELLS)));                                          
      IF (B_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC) AND                          
         (B_CELL_IDX >  0) AND                                                  
         (ZF_ALL_CELLS OR                                                       
          Q_S0180_CELL_IN_SCOPE(ZF_ACT_IDX,B_CELL_IDX))                         
      THEN                                                                      
        DO WITH Z_T34_2_PTR->(B_CELL_IDX);                                        
          B_CELL_ID := B_CELL_IDX;                                              
          DO WITH B_CTRS_CELL_MT_34;                                             
                                                                                
            Q_S0040_ADD_INT_TO_INT(
                B_TYPE_34(E_V01_NB_PTP_CALL_PREEMPTED_VGCS),
                B_V01_TO_V20(E_MT_34_CTR_V01));
                                                                                
            /* BEGIN:ADD-CHANGE-FR 36/164931 */
            Q_S0050_AVG_OR_REPL_INT(
                B_TYPE_34(E_V021_AV_PARALLEL_TCH_VGCS),
                B_V01_TO_V20(E_MT_34_CTR_V021),
                ZS_AVG);
            /* END:ADD-CHANGE-FR 36/164931 */
                
            /* BEGIN:ADD-CHANGE-ER 1092 */
            Q_S0050_AVG_OR_REPL_INT(
                B_TYPE_34(E_V022_MAX_PARALLEL_TCH_VGCS),
                B_V01_TO_V20(E_MT_34_CTR_V022),
                ZS_REPL);
            /* END:ADD-CHANGE-ER 1092 */
                
            Q_S0040_ADD_INT_TO_INT(
                B_TYPE_34(E_V12_NB_VGC_BLOCKED_VGCS),
                B_V01_TO_V20(E_MT_34_CTR_V12));
                
            Q_S0040_ADD_INT_TO_INT(
                B_TYPE_34(E_V16_NB_VGCS_QUEUED),
                B_V01_TO_V20(E_MT_34_CTR_V16));
                
            Q_S0040_ADD_INT_TO_INT(
                B_TYPE_34(E_V18_NB_PREEMTED_TCH_VGCS),
                B_V01_TO_V20(E_MT_34_CTR_V18));

          OD;                                                                   
        OD;                                                                     
      FI;                                                                       
    OD;                                                                         
    ZQ_NBR_CELLS := ZQ_NBR_CELLS - 1;                                           
  OD;                                                                           
OD;                                                                             
                                                                                
                                                                                
END Q_S0638_UPD_T34_STD_TCHRM;                                                  

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0640_UPD_T34_INVALID                             */        
/*                                                                    */        
/*     PROGRAMMER: CHEN ZHANGYI  (ASB)                                */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 04/09/20                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       SETS EVERY COUNTER FOR TYPE 34 TO INVALID                    */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_CELL_IDX M_CELL_IDX,                       */        
/*                      ZF_LDC_TYPE M_FMM_SELECTOR                    */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0290_UPD_TCH_INVALID                       */        
/*                      Q_S0300_UPD_DTC_INVALID                       */        
/*                      Q_S0586_UPD_T29_STD_DTC                       */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0640_UPD_T34_INVALID: PROC(ZF_CELL_IDX   M_CELL_IDX,                         
                              ZF_LDC_TYPE   M_FMM_SELECTOR);                    
                                                                                
DCL ZQ_PTR      PTR;                                                            
DCL ZQ_I        INT;                                                            
                                                                                
DO WITH Z_T34_2_PTR -> (ZF_CELL_IDX);                                             
  B_CELL_ID  := ZF_CELL_IDX;                                                    
  CASE ZF_LDC_TYPE OF                                                           
    (M_FS_DTC_TRF_LDC) :                                                        
        ZQ_PTR := ->B_CTRS_CELL_MT_34;                                           
        /* V03 -> V04, V06 -> V10, V14 -> V15 */
        DO FOR ZQ_I := 1 TO 20;                                                 
          CASE ZQ_I OF                                                          
            (4:5, 7:11, 14:15):                                   
              ZQ_PTR->ZM_INT_MASK(ZQ_I) := ZS_FFFE;
            ELSE
          ESAC;
        OD;
    (M_FS_TCHRM_LDC) :
        DO WITH B_CTRS_CELL_MT_34;
          B_V01_TO_V20(E_MT_34_CTR_V01) := ZS_FFFE;
          B_V01_TO_V20(E_MT_34_CTR_V021) := ZS_FFFE;
          B_V01_TO_V20(E_MT_34_CTR_V022) := ZS_FFFE;
          B_V01_TO_V20(E_MT_34_CTR_V12) := ZS_FFFE;
          B_V01_TO_V20(E_MT_34_CTR_V16) := ZS_FFFE;
          B_V01_TO_V20(E_MT_34_CTR_V18) := ZS_FFFE;
        OD;                                                                 
    ELSE                                                                        
  ESAC;                                                                         
OD;                                                                             
                                                                                
END Q_S0640_UPD_T34_INVALID;                                                    


/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0650_UPD_TP_HDLC_INVALID                         */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/11                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 7 LAPD COUNTERS IN MEMORY USING THE USER    */        
/*       BUFFER RECEIVED.                                             */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0650_UPD_TP_HDLC_INVALID: PROC();                               
                                                                                
DCL ZQ_LAPD_IDX    LONG_INT;
/*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE*/                                                               
DCL ZQ_BTS_EQ M_BEQ_NBR;                                                     
DCL ZQ_IP_BTS BOOL;                                                     
/*END: ADD-WIPRO-B10-MX-MR2-CHANGE*/                                                             
                                                                                
DO FOR ZQ_LAPD_IDX:=1L TO CM_FY32_MAX_LAPD_PER_BSC;
  DO WITH Z_T7_PTR->(ZQ_LAPD_IDX);                                      
    DO WITH B_LAPD_ID;                    
     IF (M_BYTE(B_SBL_TYP*1) /= M_SBLT_NULL)
      THEN
        /*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE*/ 
          ZQ_BTS_EQ  := B_BTS_EQ;                                                            
          ZQ_IP_BTS := Q_S0455_CHK_IF_IP_BTS(ZQ_BTS_EQ);                                                                
        /*END: ADD-WIPRO-B10-MX-MR2-CHANGE*/
           IF(ZQ_IP_BTS)
           THEN
              B_HIS_CC_MT_07(E_L1_12_NBR_CRC_ERR).B_LOW := 0;      
              B_HIS_CC_MT_07(E_L1_12_NBR_CRC_ERR).B_HIGH := 0;     
           ELSE                                                
      /* END: ADD-WIPRO-B10-MX-MR2-CHANGE */ 
              B_HIS_CC_MT_07(E_L1_12_NBR_CRC_ERR).B_LOW := ZS_FFFE;
              B_HIS_CC_MT_07(E_L1_12_NBR_CRC_ERR).B_HIGH := ZS_FFFF;
           FI;   
      FI;
    OD;
  OD;                                                                           
OD;                                                                             
                                                                                
END Q_S0650_UPD_TP_HDLC_INVALID;                                                     
/*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE*/
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0656_UPD_T7_TP_HDLC_IP                           */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/11                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 7 LAPD COUNTERS IN MEMORY USING THE USER    */        
/*       BUFFER RECEIVED.                                             */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0656_UPD_T7_TP_HDLC_IP: PROC(ZF_LDC_BUF_PTR PTR);                               
                                                                                
 DCL ZQ_NBR_HDLC    INT;                                                        
 DCL ZQ_NOT_FOUND   BOOL;                                                       
 DCL ZQ_LAPD_IDX    LONG_INT;                                                        
 DCL ZQ_J           M_TCU_TYPE_7;                                               
 DCL ZQ_BTS_EQ      M_UNIT_NBR;
 DCL ZQ_TEI_NBR     M_SBLN;
 DCL ZQ_RSL_IDX     RANGE(1:CM_FY32_MAX_TRX_PER_BSC);
 DCL ZQ_OML_IDX     RANGE(1:M_MAX_BTS_PER_BSC);
 DCL ZQ_FOUND_REL   BOOL;
 DCL ZQ_SBL_TYPE    M_SBLT;
 DCL ZQ_L1_12_NB_HDLC_CRC_ERROR INT;
                                                                                
/*DO WITH ZF_LDC_BUF_PTR->ZM_PM_TP_HDLC_DATA; 
  ZQ_NBR_HDLC := B_TP_PM_HDLC_CNTRS.B_NBR_HDLC;
OD; */                        

/* 1024 HDLC CHANNEL BEGIN */

DO WITH ZF_LDC_BUF_PTR->ZM_PM_TP_HDLC_DATA.B_TP_PM_HDLC_CNTRS; 
  ZQ_NBR_HDLC := ZB_NBR_HDLC;
OD;

/* 1024 HDLC CHANNEL END  */


IF ZQ_NBR_HDLC > 0                                                              
THEN                                                                            
  DO WITH ZF_LDC_BUF_PTR->ZM_PM_TP_HDLC_DATA.B_TP_PM_HDLC_CNTRS;
    /* UPDATE RSL */
    DO FOR ZQ_RSL_IDX := 1 TO CM_FY32_MAX_TRX_PER_BSC;
      DO WITH Z_R_RSL_LNK_PTR -> ZM_R_RSL_LNK(ZQ_RSL_IDX);
        IF (D_RSL_MST = E_MS_IT) OR (D_RSL_MST = E_MS_FIT)
        THEN
          ZQ_FOUND_REL := FALSE;
         /* DO FOR ZQ_NBR_HDLC := 1 TO B_NBR_HDLC 
                                       WHILE ZQ_FOUND_REL = FALSE;*/
          
           /* 1024 HDLC CHANNEL BEGIN */

          DO FOR ZQ_NBR_HDLC := 1 TO ZB_NBR_HDLC 
                                     WHILE ZQ_FOUND_REL = FALSE;
         /* 1024 HDLC CHANNEL END  */

         /*  DO WITH B_TP_HDLC_CNTRS(ZQ_NBR_HDLC-1); */

          /* 1024 HDLC CHANNEL BEGIN */

            DO WITH ZB_TP_HDLC_CNTRS(ZQ_NBR_HDLC-1);

           /* 1024 HDLC CHANNEL END */

              IF D_HDLC_NBR = B_HDLC_IDX
              THEN
                ZQ_FOUND_REL := TRUE;
                ZQ_BTS_EQ := D_BEQ_NBR;
                ZQ_TEI_NBR := D_TEI_NBR;
                ZQ_SBL_TYPE := M_SBLT_RSL;
                  
              FI;
            OD;
          OD;
          IF ZQ_FOUND_REL = TRUE
          THEN
            ZQ_NOT_FOUND:=TRUE;
            DO FOR ZQ_LAPD_IDX:=1L TO CM_FY32_MAX_LAPD_PER_BSC
                                               WHILE ZQ_NOT_FOUND;
            /* SEARCH FOR THIS LAPD INSTANCE */
              DO WITH Z_T7_PTR->(ZQ_LAPD_IDX);
                DO WITH B_LAPD_ID;
                /* ENTRY MATCHES OR FIRST FREE ONE */
                  IF (B_BTS_EQ  = ZQ_BTS_EQ AND
                      B_TEI_NBR = ZQ_TEI_NBR  AND
                      B_SBL_TYP = ZQ_SBL_TYPE) OR
                 /* THIS IS A FREE ENTRY */
                 /* DEFAULT HAPPENS TO BE FF! */

                     (M_BYTE(B_SBL_TYP*1) = M_SBLT_NULL)

                  THEN
                    ZQ_NOT_FOUND:=FALSE;
                    B_BTS_EQ := ZQ_BTS_EQ;
                    B_TEI_NBR := ZQ_TEI_NBR;
                    B_SBL_TYP := ZQ_SBL_TYPE;
                  /*    DO WITH B_HIS_CC_MT_07;*/
                    B_HIS_CC_MT_07(E_L1_12_NBR_CRC_ERR).
                                           B_HIGH := 0;
                    B_HIS_CC_MT_07(E_L1_12_NBR_CRC_ERR).
                                           B_LOW  := 0;

                  FI;
                OD;
              OD;
            OD;
          FI;
        FI;
      OD;
    OD;
    /* UPDATE OML */
    DO FOR ZQ_OML_IDX := 1 TO M_MAX_BTS_PER_BSC;
      DO WITH Z_R_OML_LNK_PTR -> ZM_R_OML_LNK(ZQ_OML_IDX);
        IF (D_OML_MST = E_MS_IT) OR (D_OML_MST = E_MS_FIT)
        THEN
          ZQ_FOUND_REL := FALSE;
              
  /*	  DO FOR ZQ_NBR_HDLC := 1 TO B_NBR_HDLC
                                     WHILE ZQ_FOUND_REL = FALSE; */	
/* 1024 HDLC CHANNEL BEGIN */

          DO FOR ZQ_NBR_HDLC := 1 TO ZB_NBR_HDLC 
                                     WHILE ZQ_FOUND_REL = FALSE;
/* 1024 HDLC CHANNEL END  */

     /*  DO WITH B_TP_HDLC_CNTRS(ZQ_NBR_HDLC-1); */

/* 1024 HDLC CHANNEL BEGIN */

            DO WITH ZB_TP_HDLC_CNTRS(ZQ_NBR_HDLC-1);

/* 1024 HDLC CHANNEL END */

              IF D_HDLC_NBR = B_HDLC_IDX
              THEN
                ZQ_FOUND_REL := TRUE;
                ZQ_BTS_EQ := D_BEQ_NBR;
                ZQ_TEI_NBR := D_TEI_NBR;
                ZQ_SBL_TYPE := M_SBLT_OML;
              FI;
            OD;
          OD;
          IF ZQ_FOUND_REL = TRUE
          THEN
            ZQ_NOT_FOUND:=TRUE;
            DO FOR ZQ_LAPD_IDX:=1L TO CM_FY32_MAX_LAPD_PER_BSC
                                               WHILE ZQ_NOT_FOUND;
            /* SEARCH FOR THIS LAPD INSTANCE */
              DO WITH Z_T7_PTR->(ZQ_LAPD_IDX);
                DO WITH B_LAPD_ID;
                /* ENTRY MATCHES OR FIRST FREE ONE */
                  IF (B_BTS_EQ  = ZQ_BTS_EQ AND
                      B_TEI_NBR = ZQ_TEI_NBR  AND
                      B_SBL_TYP = ZQ_SBL_TYPE) OR
                 /* THIS IS A FREE ENTRY */
                 /* DEFAULT HAPPENS TO BE FF! */

                     (M_BYTE(B_SBL_TYP*1) = M_SBLT_NULL)

                  THEN
                    ZQ_NOT_FOUND:=FALSE;
                    B_BTS_EQ := ZQ_BTS_EQ;
                    B_TEI_NBR := ZQ_TEI_NBR;
                    B_SBL_TYP := ZQ_SBL_TYPE;
                      /*DO WITH B_HIS_CC_MT_07;*/
                    B_HIS_CC_MT_07(E_L1_12_NBR_CRC_ERR).
                                           B_HIGH := 0;
                    B_HIS_CC_MT_07(E_L1_12_NBR_CRC_ERR).
                                           B_LOW  := 0;
                  FI;
                OD;
              OD;
            OD;
          FI;
        FI;
      OD;
    OD;
  OD;
FI;

END Q_S0656_UPD_T7_TP_HDLC_IP;                                                     
                                                                                
/*END: ADD-WIPRO-B10-MX-MR2-CHANGE*/
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0655_UPD_T7_TP_HDLC                              */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/11                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 7 LAPD COUNTERS IN MEMORY USING THE USER    */        
/*       BUFFER RECEIVED.                                             */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0655_UPD_T7_TP_HDLC: PROC(ZF_LDC_BUF_PTR PTR);                               
                                                                                
 DCL ZQ_NBR_HDLC    INT;                                                        
 DCL ZQ_NOT_FOUND   BOOL;                                                       
 DCL ZQ_LAPD_IDX    LONG_INT;                                                        
 DCL ZQ_J           M_TCU_TYPE_7;                                               
 DCL ZQ_BTS_EQ      M_UNIT_NBR;
 DCL ZQ_TEI_NBR     M_SBLN;
 DCL ZQ_RSL_IDX     RANGE(1:CM_FY32_MAX_TRX_PER_BSC);
 DCL ZQ_OML_IDX     RANGE(1:M_MAX_BTS_PER_BSC);
 DCL ZQ_FOUND_REL   BOOL;
 DCL ZQ_SBL_TYPE    M_SBLT;
 DCL ZQ_L1_12_NB_HDLC_CRC_ERROR INT;
 DCL ZQ_IP_BTS      BOOL;
                                                                                
/*DO WITH ZF_LDC_BUF_PTR->ZM_PM_TP_HDLC_DATA; 
  ZQ_NBR_HDLC := B_TP_PM_HDLC_CNTRS.B_NBR_HDLC;
OD; */

/* 1024 HDLC CHANNEL BEGIN */

DO WITH ZF_LDC_BUF_PTR->ZM_PM_TP_HDLC_DATA.B_TP_PM_HDLC_CNTRS; 
  ZQ_NBR_HDLC := ZB_NBR_HDLC;
OD;

/* 1024 HDLC CHANNEL END  */
                        
IF ZQ_NBR_HDLC > 0                                                              
THEN                                                                            
  DO WITH ZF_LDC_BUF_PTR->ZM_PM_TP_HDLC_DATA.B_TP_PM_HDLC_CNTRS;
    /* UPDATE RSL */
    DO FOR ZQ_RSL_IDX := 1 TO CM_FY32_MAX_TRX_PER_BSC;
      DO WITH Z_R_RSL_LNK_PTR -> ZM_R_RSL_LNK(ZQ_RSL_IDX);
        IF (D_RSL_MST = E_MS_IT) OR (D_RSL_MST = E_MS_FIT)
        THEN
          ZQ_FOUND_REL := FALSE;
        /*    DO FOR ZQ_NBR_HDLC := 1 TO B_NBR_HDLC
                                      WHILE ZQ_FOUND_REL = FALSE; */   
 
        /*  1024 HDLC CHANNEL BEGIN */

             DO FOR ZQ_NBR_HDLC := 1 TO ZB_NBR_HDLC 
                                     WHILE ZQ_FOUND_REL = FALSE;

        /*  1024 HDLC CHANNEL END  */

         /*  DO WITH B_TP_HDLC_CNTRS(ZQ_NBR_HDLC-1);  */
 
         /*  1024 HDLC CHANNEL BEGIN */
  
            DO WITH ZB_TP_HDLC_CNTRS(ZQ_NBR_HDLC-1);

          /*  1024 HDLC CHANNEL END */
       
              IF D_HDLC_NBR = B_HDLC_IDX
              THEN
                ZQ_FOUND_REL := TRUE;
                ZQ_BTS_EQ := D_BEQ_NBR;
                ZQ_TEI_NBR := D_TEI_NBR;
                ZQ_SBL_TYPE := M_SBLT_RSL;
           /*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE */
                ZQ_IP_BTS := Q_S0455_CHK_IF_IP_BTS(ZQ_BTS_EQ);
                IF ZQ_IP_BTS
                THEN
                ZQ_L1_12_NB_HDLC_CRC_ERROR := 0;
                ELSE
         /*END: ADD-WIPRO-B10-MX-MR2-CHANGE */
                ZQ_L1_12_NB_HDLC_CRC_ERROR := 
                  B_HDLC_CNTRS(E_L1_12_NB_HDLC_CRC_ERROR);
                FI;
              FI;
            OD;
          OD;

          IF ZQ_FOUND_REL = TRUE
          THEN
            ZQ_NOT_FOUND:=TRUE;
            DO FOR ZQ_LAPD_IDX:=1L TO CM_FY32_MAX_LAPD_PER_BSC
                                               WHILE ZQ_NOT_FOUND;
            /* SEARCH FOR THIS LAPD INSTANCE */
              DO WITH Z_T7_PTR->(ZQ_LAPD_IDX);
                DO WITH B_LAPD_ID;
                /* ENTRY MATCHES OR FIRST FREE ONE */
                  IF (B_BTS_EQ  = ZQ_BTS_EQ AND
                      B_TEI_NBR = ZQ_TEI_NBR  AND
                      B_SBL_TYP = ZQ_SBL_TYPE) OR
                 /* THIS IS A FREE ENTRY */
                 /* DEFAULT HAPPENS TO BE FF! */

                     (M_BYTE(B_SBL_TYP*1) = M_SBLT_NULL)

                  THEN
                    ZQ_NOT_FOUND:=FALSE;
                    B_BTS_EQ := ZQ_BTS_EQ;
                    B_TEI_NBR := ZQ_TEI_NBR;
                    B_SBL_TYP := ZQ_SBL_TYPE;

                    Q_S0080_ADD_INT_TO_DPVAL(
                      ZQ_L1_12_NB_HDLC_CRC_ERROR,
                      B_HIS_CC_MT_07(E_L1_12_NBR_CRC_ERR));
                  FI;
                OD;
              OD;
            OD;
          FI;
        FI;
      OD;
    OD;
    /* UPDATE OML */
    DO FOR ZQ_OML_IDX := 1 TO M_MAX_BTS_PER_BSC;
      DO WITH Z_R_OML_LNK_PTR -> ZM_R_OML_LNK(ZQ_OML_IDX);
        IF (D_OML_MST = E_MS_IT) OR (D_OML_MST = E_MS_FIT)
        THEN
          ZQ_FOUND_REL := FALSE;
          /* DO FOR ZQ_NBR_HDLC := 1 TO B_NBR_HDLC
                                     WHILE ZQ_FOUND_REL = FALSE; */	
         /* 1024 HDLC CHANNEL BEGIN */

             DO FOR ZQ_NBR_HDLC := 1 TO ZB_NBR_HDLC 
                                     WHILE ZQ_FOUND_REL = FALSE;
         /* 1024 HDLC CHANNEL END  */

         /*  DO WITH B_TP_HDLC_CNTRS(ZQ_NBR_HDLC-1); */

        /* 1024 HDLC CHANNEL BEGIN */

            DO WITH ZB_TP_HDLC_CNTRS(ZQ_NBR_HDLC-1);

        /* 1024 HDLC CHANNEL END */

              IF D_HDLC_NBR = B_HDLC_IDX
              THEN
                ZQ_FOUND_REL := TRUE;
                ZQ_BTS_EQ := D_BEQ_NBR;
                ZQ_TEI_NBR := D_TEI_NBR;
                ZQ_SBL_TYPE := M_SBLT_OML;
             /*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE */
                ZQ_IP_BTS := Q_S0455_CHK_IF_IP_BTS(ZQ_BTS_EQ);
                IF ZQ_IP_BTS
                THEN
                ZQ_L1_12_NB_HDLC_CRC_ERROR := 0;
                ELSE
         /*END: ADD-WIPRO-B10-MX-MR2-CHANGE */

                ZQ_L1_12_NB_HDLC_CRC_ERROR := 
                  B_HDLC_CNTRS(E_L1_12_NB_HDLC_CRC_ERROR);
                FI;
              FI;
            OD;
          OD;
          IF ZQ_FOUND_REL = TRUE
          THEN
            ZQ_NOT_FOUND:=TRUE;
            DO FOR ZQ_LAPD_IDX:=1L TO CM_FY32_MAX_LAPD_PER_BSC
                                               WHILE ZQ_NOT_FOUND;
            /* SEARCH FOR THIS LAPD INSTANCE */
              DO WITH Z_T7_PTR->(ZQ_LAPD_IDX);
                DO WITH B_LAPD_ID;
                /* ENTRY MATCHES OR FIRST FREE ONE */
                  IF (B_BTS_EQ  = ZQ_BTS_EQ AND
                      B_TEI_NBR = ZQ_TEI_NBR  AND
                      B_SBL_TYP = ZQ_SBL_TYPE) OR
                 /* THIS IS A FREE ENTRY */
                 /* DEFAULT HAPPENS TO BE FF! */

                     (M_BYTE(B_SBL_TYP*1) = M_SBLT_NULL)

                  THEN
                    ZQ_NOT_FOUND:=FALSE;
                    B_BTS_EQ := ZQ_BTS_EQ;
                    B_TEI_NBR := ZQ_TEI_NBR;
                    B_SBL_TYP := ZQ_SBL_TYPE;

                    Q_S0080_ADD_INT_TO_DPVAL(
                      ZQ_L1_12_NB_HDLC_CRC_ERROR,
                      B_HIS_CC_MT_07(E_L1_12_NBR_CRC_ERR));
                  FI;
                OD;
              OD;
            OD;
          FI;
        FI;
      OD;
    OD;
  OD;
FI;

END Q_S0655_UPD_T7_TP_HDLC;                                                     
/* START : WIPRO B11 IP MR0 PKG1 */
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0562_UPD_T35_TP_IPOE1                            */        
/*                                                                    */        
/*     PROGRAMMER: SRINIVAS                                           */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 97/11/11                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 7 LAPD COUNTERS IN MEMORY USING THE USER    */        
/*       BUFFER RECEIVED.                                             */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0562_UPD_T35_TP_IPOE1: PROC(ZF_LDC_BUF_PTR PTR);                               
/* SRINIVAS : IPOE1 CODE GOES HERE */
/*CR2596 START*/
NEWMODE M_INT_INTEL = STRUCT(                                                   
         CASE OF                                                                
         :B_INT   INT,                                                          
         :B_LSB   RANGE(0:255),                                                 
          B_MSB   RANGE(0:255)                                                  
         ESAC );                                                                
DCL ZQ_BYTE_INT M_INT_INTEL;                                                    
/*CR2596 END*/
DCL ZQ_NBR_E1_PORT INT;
DCL ZQ_ABIS_NBR M_ABIS_LINK_NBR;
DCL ZQ_ABIS_NUM M_ABIS_LINK_NBR;
DCL ZQ_I INT;

DO WITH ZF_LDC_BUF_PTR->ZM_PM_TP_IPOE1_DATA;
  ZQ_NBR_E1_PORT := B_IPOE1_PM_CNTRS.B_NBR_IPOE1;
OD;

IF ZQ_NBR_E1_PORT > 0
THEN
 DO WITH ZF_LDC_BUF_PTR->ZM_PM_TP_IPOE1_DATA.B_IPOE1_PM_CNTRS;
  DO FOR ZQ_I := 0 TO ZQ_NBR_E1_PORT - 1; 
   DO WITH B_IPOE1_CNTRS(ZQ_I);
    ABIS_LOOP:/* MAX NO. OF ABIS LINKS */ 
    DO FOR ZQ_ABIS_NBR := 1 TO 252/*176 CR312498*/; 
    /* SRINIVAS find out abis no from port no */
    /* SRINIVAS relation access goes here */
  /*CR2596 START*/
    /*DO WITH Z_R_ABIS_INF_PTR -> ZM_R_ABIS_INF(ZQ_ABIS_NBR);
    
     IF D_ABTP_NR1 = B_E1_PORT_NUM 
     THEN
     ZQ_ABIS_NUM := ZQ_ABIS_NBR;*/
    DO WITH Z_R_CNF_ABTP_PTR -> ZM_R_CNF_ABTP(ZQ_ABIS_NBR);
     ZQ_BYTE_INT.B_LSB := 
          ZM_IPOE1_ABIS_TPPORT_VAL(D_TP_PORT);
     ZQ_BYTE_INT.B_MSB := 0; 
     IF ZQ_BYTE_INT.B_INT = B_E1_PORT_NUM 
     THEN
     ZQ_ABIS_NUM := ZQ_ABIS_NBR;
    /*CR2596 END*/  
     /* SRINIVAS: IP32 a and b are 6 byte counters */
     /* SRINIVAS: Type 35 8th block to be defined */
     /* BEGIN: CR 625837 */
     DO WITH Z_R_ABIS_INF_PTR -> ZM_R_ABIS_INF(ZQ_ABIS_NUM);
     IF NOT (D_CUR_MODE = M_ABIS_TRANS_MODE_IP_E1WCP)
     THEN

     /* END: CR 625837 */

     DO WITH Z_T35_8_PTR->(ZQ_ABIS_NUM);
     B_ABIS_NBR := ZQ_ABIS_NUM;
      DO WITH B_CTRS_PT8_MT_35;

      Q_S0081_ADD_LONG_INT_TO_3_INT(
              M_LONG_INT(B_E1_CNTRS
                  (E_IP32A_NB_BSC_SENT_ALL_FLO)),
              B_IP32A_TO_IP32B(E_MT_35_CTR_IP32A));
      Q_S0081_ADD_LONG_INT_TO_3_INT(
              M_LONG_INT(B_E1_CNTRS
                  (E_IP32B_NB_BSC_RCVD_ALL_FLO_BYT)),
              B_IP32A_TO_IP32B(E_MT_35_CTR_IP32B));
      Q_S0060_ADD_LONG_INT(
              M_LONG_INT(B_E1_CNTRS
                  (E_IP32C_NB_BSC_DROP_IP_PKT_PRI0)),
              B_IP32C_TO_IP32F(E_MT_35_CTR_IP32C));
      Q_S0060_ADD_LONG_INT(
              M_LONG_INT(B_E1_CNTRS
                  (E_IP32D_NB_BSC_DROP_IP_PKT_PRI1)),
              B_IP32C_TO_IP32F(E_MT_35_CTR_IP32D));
      Q_S0060_ADD_LONG_INT(
              M_LONG_INT(B_E1_CNTRS
                  (E_IP32E_NB_BSC_DROP_IP_PKT_PRI2)),
              B_IP32C_TO_IP32F(E_MT_35_CTR_IP32E));
      Q_S0060_ADD_LONG_INT(
              M_LONG_INT(B_E1_CNTRS
                  (E_IP32F_NB_BSC_DROP_IP_PKT_PRI3)),
              B_IP32C_TO_IP32F(E_MT_35_CTR_IP32F));
      OD;
     OD; 
    /* BEGIN: CR 625837 */ 
    FI;
    OD;
    /* END: CR 625837 */ 
    EXIT ABIS_LOOP;
    FI;
   OD; 
  OD;
 OD;
OD;
OD;
FI; 

END Q_S0562_UPD_T35_TP_IPOE1;
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0561_UPD_TP_IPOE1_INVALID                        */        
/*                                                                    */        
/*     PROGRAMMER: SRINIVAS                                           */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 07/10/22                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 7 LAPD COUNTERS IN MEMORY USING THE USER    */        
/*       BUFFER RECEIVED.                                             */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0561_UPD_TP_IPOE1_INVALID: PROC();                               

/* SRINIVAS : IPOE1 CODE GOES HERE */
/* SRINIVAS : condition to make invalid is*/
/* SRINIVAS : check relation and for BSC mode*/
/* SRINIVAS : and if in IPOE1 then make them invalid */ 

DCL ZQ_ABIS_NBR M_ABIS_LINK_NBR;
DCL ZQ_ABIS_NUM M_ABIS_LINK_NBR;
DCL ZQ_I INT;
DCL ZQ_TMP M_3_INT_CNTR;

ZQ_TMP(1):= ZS_FFFF;
ZQ_TMP(2):= ZS_FFFF;
ZQ_TMP(3):= ZS_FFFE;

    /* MAX NO. OF ABIS LINKS */
    DO FOR ZQ_ABIS_NBR := 1 TO 252/*176 CR312498*/; 
    /* SRINIVAS find out abis no from port no */
    /* SRINIVAS relation access goes here */
    /*CR2596 START*/
     /*DO WITH Z_R_ABIS_INF_PTR -> ZM_R_ABIS_INF(ZQ_ABIS_NBR);
     IF (D_CUR_MODE = M_ABIS_TRANS_MODE_IPFR) 
        OR (D_CUR_MODE = M_ABIS_TRANS_MODE_IPUN)
     THEN*/
     DO WITH Z_R_CNF_ABTP_PTR -> ZM_R_CNF_ABTP(ZQ_ABIS_NBR);
      IF (D_ABTP_ST =  E_MS_IT) OR (D_ABTP_ST =  E_MS_FIT)
      THEN     
     /*CR2596 END*/
     ZQ_ABIS_NUM:= ZQ_ABIS_NBR;
     /* SRINIVAS: IP32 a and b are 6 byte counters */
     /* SRINIVAS: Type 35 8th block to be defined */
     /* SRINIVAS: all counters will be set to invalid */
     /* BEGIN: CR 625837 */

     DO WITH Z_R_ABIS_INF_PTR -> ZM_R_ABIS_INF(ZQ_ABIS_NUM);
     IF NOT (D_CUR_MODE = M_ABIS_TRANS_MODE_IP_E1WCP)
     THEN

     /* END: CR 625837 */

     DO WITH Z_T35_8_PTR->(ZQ_ABIS_NUM);
     B_ABIS_NBR := ZQ_ABIS_NUM;
      DO WITH B_CTRS_PT8_MT_35;
         B_IP32A_TO_IP32B(E_MT_35_CTR_IP32A) := ZQ_TMP;
         B_IP32A_TO_IP32B(E_MT_35_CTR_IP32B) := ZQ_TMP;

        B_IP32C_TO_IP32F(E_MT_35_CTR_IP32C).B_HIGH := ZS_FFFF;
        B_IP32C_TO_IP32F(E_MT_35_CTR_IP32C).B_LOW := ZS_FFFE;

        B_IP32C_TO_IP32F(E_MT_35_CTR_IP32D).B_HIGH := ZS_FFFF;
        B_IP32C_TO_IP32F(E_MT_35_CTR_IP32D).B_LOW := ZS_FFFE;

        B_IP32C_TO_IP32F(E_MT_35_CTR_IP32E).B_HIGH := ZS_FFFF;
        B_IP32C_TO_IP32F(E_MT_35_CTR_IP32E).B_LOW := ZS_FFFE;

        B_IP32C_TO_IP32F(E_MT_35_CTR_IP32F).B_HIGH := ZS_FFFF;
        B_IP32C_TO_IP32F(E_MT_35_CTR_IP32F).B_LOW := ZS_FFFE;
     OD;
    OD;
    /* BEGIN: CR 625837 */ 
    FI;
    OD;
    /* END: CR 625837 */
   FI;
  OD;
 OD;
 
END Q_S0561_UPD_TP_IPOE1_INVALID;                                                                                
/* END : WIPRO B11 IP MR0 PKG1 */
/*START : AUPOIP FEATURE  */
Q_S0952_MATCH_MGW_IP_ADDRESS: PROC(ZF_MGW INT,ZF_IP LONG_INT)
                                              RETURNS(INT);
DCL ZQ_INDEX    INT;

DO FOR ZQ_INDEX := (ZF_MGW +1) TO 512;
  IF (Z_T110_12_PTR ->(ZQ_INDEX).B_MGW_IP = ZF_IP)
  THEN
    RETURN (ZQ_INDEX);
  FI;
OD;
DO FOR ZQ_INDEX := 1 TO (ZF_MGW - 1 );
  IF (Z_T110_12_PTR ->(ZQ_INDEX).B_MGW_IP = ZF_IP)
  THEN
    RETURN (ZQ_INDEX);
  FI;
OD;
/* Searching completed. May be newly added one Put 
   In First Empty Location */
DO FOR ZQ_INDEX := (ZF_MGW ) TO 512;
  IF (Z_T110_12_PTR ->(ZQ_INDEX).B_MGW_IP =-1L) OR
     (Z_T110_12_PTR ->(ZQ_INDEX).B_MGW_IP = 0L)
  THEN
    RETURN (ZQ_INDEX);
  FI;
OD;

DO FOR ZQ_INDEX := 1 TO (ZF_MGW - 1 );
  IF (Z_T110_12_PTR ->(ZQ_INDEX).B_MGW_IP =-1L) OR
     (Z_T110_12_PTR ->(ZQ_INDEX).B_MGW_IP = 0L)
  THEN
    RETURN (ZQ_INDEX);
  FI;
  
OD;
RETURN (ZQ_INDEX);
END Q_S0952_MATCH_MGW_IP_ADDRESS;
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0951_UPD_TPIP_AUPOIP_CNTRS                       */        
/*                                                                    */        
/*     PROGRAMMER:AMITABH WIPRO WI                                    */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 16/12/2010                                      */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE AUPOIP COUNTERS IN MEMORY USING THE USER         */        
/*       BUFFER RECEIVED.                                             */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0951_UPD_TPIP_AUPOIP_MGW_TC_CNTRS: PROC(ZF_LDC_BUF_PTR PTR,
                                           ZF_ZEQ_NBR     INT);                               
		
/*DCL ZQ_T110_CNTRS CM_TYPE_110_CTRS_12;*/
 /* BEGIN CR 725623 Change */
/*DCL ZQ_T110_CNTRS  RANGE(E_MT_110_CTR_AIP10A:E_MT_110_CTR_AIP54);*/
DCL ZQ_T110_CNTRS  RANGE(E_MT_110_CTR_AIP10A:E_MT_110_CTR_AIP20E);
 /* END CR 725623 Change */


DCL ZQ_T35_CNTRS_1 RANGE (E_MT_35_CTR_IP59 :
                               E_MT_35_CTR_IP62);
DCL ZQ_T35_CNTRS_2 RANGE (E_MT_35_CTR_IP30A :
                               E_MT_35_CTR_IP30M);

DCL ZQ_T35_4_CNTRS RANGE (E_MT_35_CTR_IP35A:
                          E_MT_35_CTR_IP35D);


DCL ZQ_NBR_MGW INT;
DCL ZQ_TC_NBR INT;
DCL ZQ_BTS_NBR INT;
DCL ZQ_MSG_CRRUPT BOOL;
DCL ZQ_LONG_DPVAL   ZM_LONG_DPVAL;
DCL ZQ_LOC_DPVAL M_STA_DPVAL;
DCL ZQ_FOUND INT;
DCL ZQ_MGW INT;
DCL ZQ_TC INT;
DCL ZQ_POS INT;
DCL ZQ_COUNT INT;
DCL ZQ_AUPOIP_MODE BOOL;
/* CR740338 BEGIN*/
/*DCL ZQ_INVALID_COUNT INT;*/
DCL ZQ_INVALID_MGW BOOL;
DCL ZQ_INVALID_TC BOOL;
/* CR740338 END*/
/*BEGIN FR:829347*/
DCL ZQ_MGW_FOUND  BOOL;
ZQ_MGW_FOUND := FALSE;  
/*END FR:829347*/
ZQ_FOUND:=0;
ZQ_COUNT:=0;
/*BEGIN: FR36/308293*/
/*ZQ_MSG_CRRUPT:= FALSE;*/
/* CR740338 BEGIN*/
/*ZQ_INVALID_COUNT:=0;*/
ZQ_INVALID_MGW := FALSE;
ZQ_INVALID_TC := FALSE;
/* CR740338 END*/
/*END : FR36/308293*/



/*BEGIN: FR36/308293*/
ZQ_AUPOIP_MODE := BOOL (Q_S4290_GET_AUOIP_MODE ());
/*IF  B_NB_MGW_IP>0 AND B_NB_MGW_IP<= M_MAX_MGW */
DO WITH Z_R_BSS_PAR2_PTR -> ZM_R_BSS_PAR2;
  IF D_EN_AUOIP = TRUE
  THEN
/*END: FR36/308293*/
/* START : 256 MGW IP Addresses */
    IF (ZF_ZEQ_NBR = 3) OR (ZF_ZEQ_NBR = 4)OR (ZF_ZEQ_NBR = 5) OR
       (ZF_ZEQ_NBR = 6) OR (ZF_ZEQ_NBR = 7)OR (ZF_ZEQ_NBR = 8)
    THEN
      DO WITH ZF_LDC_BUF_PTR->CM_TPIP_AUP_MGW_TC_CTR_DATA
                            .B_TPIP_AUP_MGW_CTR;

      ZQ_NBR_MGW:=B_NB_MGW_IP;
/* END : 256 MGW IP Addresses */    
      IF  ZQ_NBR_MGW>0 AND ZQ_NBR_MGW<= M_MAX_MGW 
      THEN
/* START : 256 MGW IP Addresses */ 
        DO FOR ZQ_MGW:= 1 TO ZQ_NBR_MGW 
/* END : 256 MGW IP Addresses */        
                                    WHILE ZQ_FOUND/=ZQ_NBR_MGW;
          DO WITH B_PM_BSC_MGW_INTF_CNTRS(ZQ_MGW);
            IF (B_MGW_IP_ADDRESS /= -1L)/* AND
               (B_MGW_IP_ADDRESS.B_LOW /= H'FFFF))*/
                /* START: FR36/309170 */
                AND
                /* END: FR36/309170 */ 
               (B_MGW_IP_ADDRESS /= 0L)/* AND
               (B_MGW_IP_ADDRESS.B_LOW /= H'0000))*/
            THEN
              ZQ_FOUND:=ZQ_FOUND+1;
              ZQ_POS := (ZF_ZEQ_NBR - 3)*100 + ZQ_MGW;
		/* START : CRI01330703.02 CHANGE  ZQ_MGW TO  ZQ_POS */
              IF Z_T110_12_PTR ->(ZQ_POS).B_MGW_IP /= 
              /* END : CRI01330703.02 CHANGE ZQ_MGW TO  ZQ_POS */   
				 B_PM_BSC_MGW_INTF_CNTRS(ZQ_MGW).B_MGW_IP_ADDRESS
             THEN 
                ZQ_POS := Q_S0952_MATCH_MGW_IP_ADDRESS(ZQ_POS,
                     B_PM_BSC_MGW_INTF_CNTRS(ZQ_MGW).B_MGW_IP_ADDRESS);
              FI;
              DO WITH Z_T110_12_PTR ->(ZQ_POS);
                DO WITH B_PM_BSC_MGW_INTF_CNTRS(ZQ_MGW);
                  B_MGW_IP:=B_MGW_IP_ADDRESS;
                  DO FOR ZQ_T110_CNTRS := E_MT_110_CTR_AIP10A 
                        TO E_MT_110_CTR_AIP20E;
                    CASE ZQ_T110_CNTRS OF
                     (E_MT_110_CTR_AIP10A,E_MT_110_CTR_AIP10B,
                      E_MT_110_CTR_AIP11, E_MT_110_CTR_AIP12,
                      E_MT_110_CTR_AIP20A,E_MT_110_CTR_AIP20B,
                      E_MT_110_CTR_AIP30A,E_MT_110_CTR_AIP30B,
                      E_MT_110_CTR_AIP10D,E_MT_110_CTR_AIP10E,
                      E_MT_110_CTR_AIP20D,E_MT_110_CTR_AIP20E,
                      E_MT_110_CTR_AIP50):     
                        ZQ_LONG_DPVAL.ZB_LONG:= 
                          B_BSC_MGW_INTER_CTRS(ZQ_T110_CNTRS);
                        ZQ_LOC_DPVAL.B_HIGH:=ZQ_LONG_DPVAL.ZB_HIGH;
                        ZQ_LOC_DPVAL.B_LOW:=ZQ_LONG_DPVAL.ZB_LOW;
                        Q_S0020_ADD_DP_VALUES (ZQ_LOC_DPVAL,
                         B_CTRS_PT12_MT_110.
                         /* BEGIN CR 725623 Change */
                         /*B_AIP10A_TO_AIP54(ZQ_T110_CNTRS));*/
                         B_AIP10A_TO_AIP20E(ZQ_T110_CNTRS));
                     (E_MT_110_CTR_AIP10C,E_MT_110_CTR_AIP20C,
                      E_MT_110_CTR_AIP30C,E_MT_110_CTR_AIP40):               
                        ZQ_LONG_DPVAL.ZB_LONG:= 
                        B_BSC_MGW_INTER_CTRS(ZQ_T110_CNTRS);
                        ZQ_LOC_DPVAL.B_HIGH:=ZQ_LONG_DPVAL.ZB_HIGH;
                        ZQ_LOC_DPVAL.B_LOW:=ZQ_LONG_DPVAL.ZB_LOW;
                        Q_CALC_MAX_DPVAL (ZQ_LOC_DPVAL,
                         B_CTRS_PT12_MT_110.
			              		 B_AIP10A_TO_AIP20E(ZQ_T110_CNTRS));
		                 ELSE 
                    ESAC;     
                  OD;
                OD;
              OD;
            FI;
          OD;
        OD;
      ELSE 
        DO FOR ZQ_MGW:=1 TO M_MAX_MGW WHILE  ZQ_MGW_FOUND = FALSE;
          DO WITH Z_T110_12_PTR ->(ZQ_MGW);
            IF (B_MGW_IP /= 0L AND B_MGW_IP /= -1L)
            THEN
              ZQ_MGW_FOUND := TRUE;
            FI;
          OD;
        OD;
        IF (NOT ZQ_MGW_FOUND)
        THEN
          ZQ_INVALID_MGW := TRUE;
        FI;
      FI;
      OD;
    FI;
/* START : 256 MGW IP Addresses */
    IF (ZQ_AUPOIP_MODE) AND (ZF_ZEQ_NBR = 9)
    THEN
      DO WITH ZF_LDC_BUF_PTR->CM_TPIP_AUP_MGW_TC_CTR_DATA
                            .B_TPIP_AUP_TC_CTR; 
      ZQ_TC_NBR:=B_NB_TC;
/* END : 256 MGW IP Addresses */          
      IF (ZQ_TC_NBR>0 AND ZQ_TC_NBR<=CM_FY32_MAX_TC_PER_BSC)
      THEN
        DO FOR ZQ_TC:=1 TO CM_FY32_MAX_TC_PER_BSC 
                         WHILE ZQ_COUNT/=ZQ_TC_NBR;
          DO WITH B_PM_TC_BSC_MUXTRAUP_AOTDM_INTF_CNTR(ZQ_TC);
            IF (B_TC_ID_RC_TPIP /= 0) 
            THEN
              ZQ_COUNT:=ZQ_COUNT+1;
              DO WITH Z_T35_4_PTR ->
                      (ZM_TC_INDEX_VALUE(B_TC_ID_RC_TPIP));
		            B_TC_IDX :=B_TC_ID_RC_TPIP;
		            DO FOR ZQ_T35_4_CNTRS := E_MT_35_CTR_IP35A 
			             TO E_MT_35_CTR_IP35D;
		               ZQ_LONG_DPVAL.ZB_LONG := 
			                 B_TC_BSC_MUXTRAUP_AUPOTDM_INTF_CNTRS
				                                   (ZQ_T35_4_CNTRS);
		               ZQ_LOC_DPVAL.B_HIGH:= ZQ_LONG_DPVAL.ZB_HIGH;
		               ZQ_LOC_DPVAL.B_LOW:= ZQ_LONG_DPVAL.ZB_LOW;
		               Q_S0020_ADD_DP_VALUES (ZQ_LOC_DPVAL,
			                                    B_CTRS_PT4_MT_35.
		                            B_IP21_TO_IP35D(ZQ_T35_4_CNTRS
			                         ));
                OD;
                  /* START: CR 614323 */	 
				 
                ZQ_LONG_DPVAL.ZB_LONG :=B_TPIP_IP30N;                                  
          			ZQ_LOC_DPVAL.B_HIGH:=ZQ_LONG_DPVAL.ZB_HIGH;                                  
			          ZQ_LOC_DPVAL.B_LOW:=ZQ_LONG_DPVAL.ZB_LOW;                                    
			          Q_S0020_ADD_DP_VALUES (ZQ_LOC_DPVAL,                                         
				            B_CTRS_PT4_MT_35                                                            
					          .B_IP21_TO_IP35D(E_MT_35_CTR_IP30N)); 
					  		ZQ_LONG_DPVAL.ZB_LONG :=B_TPIP_IP30O;                                  
			          ZQ_LOC_DPVAL.B_HIGH:=ZQ_LONG_DPVAL.ZB_HIGH;                                  
			          ZQ_LOC_DPVAL.B_LOW:=ZQ_LONG_DPVAL.ZB_LOW;                                    
        		    Q_S0020_ADD_DP_VALUES (ZQ_LOC_DPVAL,                                         
				        B_CTRS_PT4_MT_35                                                            
					      .B_IP21_TO_IP35D(E_MT_35_CTR_IP30O));

          			ZQ_LONG_DPVAL.ZB_LONG :=B_TPIP_IP30P;                                  
			          ZQ_LOC_DPVAL.B_HIGH:=ZQ_LONG_DPVAL.ZB_HIGH;                                  
			          ZQ_LOC_DPVAL.B_LOW:=ZQ_LONG_DPVAL.ZB_LOW;                                    
		            Q_CALC_MAX_DPVAL(ZQ_LOC_DPVAL,
	      			    B_CTRS_PT4_MT_35                                                            
					        .B_IP21_TO_IP35D(E_MT_35_CTR_IP30P));					
			

			          ZQ_LONG_DPVAL.ZB_LONG :=B_TPIP_IP30Q;                                  
			          ZQ_LOC_DPVAL.B_HIGH:=ZQ_LONG_DPVAL.ZB_HIGH;                                  
			          ZQ_LOC_DPVAL.B_LOW:=ZQ_LONG_DPVAL.ZB_LOW;                                    
			          Q_S0020_ADD_DP_VALUES (ZQ_LOC_DPVAL,                                         
				                               B_CTRS_PT4_MT_35                                                            
					          .B_IP21_TO_IP35D(E_MT_35_CTR_IP30Q));             
		
                 
              OD;
            FI;
          OD;
        OD;
      ELSE
        ZQ_INVALID_TC := TRUE;
      FI;
      OD;
    FI;	 
  FI;
OD;

IF ZQ_INVALID_MGW OR ZQ_INVALID_TC
/* CR740338 END*/
/*END : FR36/308293*/
THEN
  TRACEINFO := 'MSG1544 CRPT NB MGW=%d,NB TC=%d ';

   TRC_BSC_PM1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_CCDC_SSM),
              TRACEID(NORM),
              TRACEINFO,
              LONG_INT((ZQ_NBR_MGW)),
              LONG_INT((ZQ_TC_NBR)),
              LONG_INT((0))); 
/* CR740338 BEGIN*/
/*Q_S0951_UPD_MGW_TC_AUPOIP_INVALID(ZQ_INVALID_COUNT);*/
Q_S0951_UPD_MGW_TC_AUPOIP_INVALID(ZQ_INVALID_MGW,
				  ZQ_INVALID_TC);
/* CR740338 END*/
FI;

END Q_S0951_UPD_TPIP_AUPOIP_MGW_TC_CNTRS;

/*BEGIN: FR36/308293*/
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE:    Q_S4290_GET_AUOIP_MODE                           */
/*                                                                    */
/*     PROGRAMMER: RAJASHRI                                           */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 10/04/11                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*     TO GET THE MODE FOR AUP : TDM OR IP                            */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                                                                    */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*     CALLED FROM:                                                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S4290_GET_AUOIP_MODE : PROC()                
RETURNS(ZM_AUPOIP_MODE);        
                                                                                

  DO WITH Z_R_BSS_PAR2_PTR -> 
                  ZM_R_BSS_PAR2;         
   IF M_BYTE(D_TDM_COD) = H'00  
  THEN       
                   
     RETURN(ZE_AUPOIP_FULL);   
  ELSE                    
     
    RETURN(ZE_AUPOIP_MIXED);
  FI;
OD; 

END Q_S4290_GET_AUOIP_MODE;   

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE:    Q_S0951_UPD_MGW_TC_AUPOIP_INVALID                */
/*                                                                    */
/*     PROGRAMMER: RAJASHRI                                           */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 10/04/11                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:  TO SET SEQ 3 COUNTERS INVALID INCASE  */
/*				OF MSG CURRUPT                        */
/*    								      */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                                                                    */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*     CALLED FROM:                                                   */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/

Q_S0951_UPD_MGW_TC_AUPOIP_INVALID: PROC (/*CR740338 BEGIN*/
					/*ZF_INVALID INT*/
					ZF_INVALID_MGW BOOL,
					ZF_INVALID_TC BOOL
					/*CR740338 END*/);                               

DCL ZQ_DPVAL_INVALID M_STA_DPVAL;
 /* BEGIN CR 725623 Change */
/*DCL ZQ_T110_CNTRS RANGE (E_MT_110_CTR_AIP10A:E_MT_110_CTR_AIP54) ;*/
/* BEGIN CR:DCTPD00979074 */
/* BEGIN CR:1053653 */
DCL ZQ_T110_CNTRS RANGE (E_MT_110_CTR_AIP10A:E_MT_110_CTR_AIP20E); 
/*DCL ZQ_T110_CNTRS RANGE (E_MT_110_CTR_AIP10A:E_MT_110_CTR_AIP20D);*/
/* END CR:1053653 */
/* END CR:DCTPD00979074 */
 /* END CR 725623 Change */

DCL ZQ_T35_4_CNTRS RANGE (E_MT_35_CTR_IP35A :
                               E_MT_35_CTR_IP35D);
DCL ZQ_NBR_MGW INT;
DCL B_CTRS_PT12_MT_110 INT;
DCL ZQ_TC_NBR INT; 
/* CRI#01437978.01 INVALID IP COUNTERS BEGIN */
ZQ_DPVAL_INVALID.B_LOW := ZS_FFFE;
ZQ_DPVAL_INVALID.B_HIGH:= ZS_FFFF;
/* CRI#01437978.01 INVALID IP COUNTERS END */
/* CR740338 BEGIN*/
/*DCL ZQ_INVALID_COUNT INT;

ZQ_INVALID_COUNT := ZF_INVALID;*/
/*IF (ZQ_INVALID_COUNT=1)*/ 
IF ZF_INVALID_MGW
/* CR740338 END*/
  THEN
	DO FOR ZQ_NBR_MGW := 1 TO M_MAX_MGW ;
		DO WITH Z_T110_12_PTR ->(ZQ_NBR_MGW);
				B_MGW_IP := -1L ;
			DO FOR ZQ_T110_CNTRS :=E_MT_110_CTR_AIP10A
                              /*START: FR36/308293*/
			      /*TO E_MT_110_CTR_AIP54;*/
                             /* BEGIN CR:DCTPD00979074 */
			      /*  TO E_MT_110_CTR_AIP50; */
			     /* BEGIN CR:1053653 
                                  TO E_MT_110_CTR_AIP20D; */
				  TO E_MT_110_CTR_AIP20E;
		  	     /* END CR:1053653 */
                              /* END CR:DCTPD00979074 */
                              /*END: FR36/308293*/
				B_CTRS_PT12_MT_110.
                               /* BEGIN CR 725623 Change */
				/*B_AIP10A_TO_AIP54(ZQ_T110_CNTRS):=*/
                              /* BEGIN CR:DCTPD00979074 */
			      /* BEGIN CR:1053653 */
			       B_AIP10A_TO_AIP20E(ZQ_T110_CNTRS):= 
                              /* B_AIP10A_TO_AIP20D(ZQ_T110_CNTRS):= */
 			      /* END CR:1053653 */
                           /* END CR:DCTPD00979074 */
                               /* END CR 725623 Change */
				ZQ_DPVAL_INVALID;
			OD;/*END OF FOR LOOP CNTR*/
                       /* BEGIN CR 725623 Change */
                   /* BEGIN CR:DCTPD00979074 */
                     /*   B_CTRS_PT12_MT_110.
                        B_AIP10A_TO_AIP20E(E_MT_110_CTR_AIP10E) :=
                        ZQ_DPVAL_INVALID;
                        B_CTRS_PT12_MT_110. 
                        B_AIP10A_TO_AIP20E(E_MT_110_CTR_AIP20E) := 
                        ZQ_DPVAL_INVALID; */
                   /* END CR:DCTPD00979074 */
 
                       /* END CR 725623 Change */
		OD;		
	OD;/*END OF FOR LOOP HFILE*/
/* CR740338 BEGIN*/
FI;
 /*IF (ZQ_INVALID_COUNT=2)*/
IF ZF_INVALID_TC
/* CR740338 END*/
   THEN
	DO FOR ZQ_TC_NBR :=1 TO CM_FY32_MAX_TC_PER_BSC;
		DO WITH Z_T35_4_PTR ->(ZM_TC_INDEX_VALUE(ZQ_TC_NBR));
			DO FOR ZQ_T35_4_CNTRS := E_MT_35_CTR_IP35A
				TO E_MT_35_CTR_IP35D; 
	  			   B_CTRS_PT4_MT_35.
				     B_IP21_TO_IP35D(ZQ_T35_4_CNTRS):=
							ZQ_DPVAL_INVALID;
			OD;/*END OF FOR LOOP CNTR*/
		OD;
	OD;/*END OF FOR LOOP HFILE*/
 FI; 	
/* CR740338 BEGIN*/
/*FI;*/
/* CR740338 END*/
END Q_S0951_UPD_MGW_TC_AUPOIP_INVALID;   
/*END: FR36/308293*/

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0952_UPD_TPIP_AUPOIP_BTS_CNTRS                   */        
/*                                                                    */        
/*     PROGRAMMER:AMITABH WIPRO WI                                    */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 16/12/2010                                      */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE AUPOIP COUNTERS IN MEMORY USING THE USER         */        
/*       BUFFER RECEIVED.                                             */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*     CALLED FROM:                                                   */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0952_UPD_TPIP_AUPOIP_BTS_CNTRS: PROC(ZF_LDC_BUF_PTR PTR, 
					ZQ_SEQNBR INT);                               
		
DCL ZQ_BTS_NBR INT;
DCL ZQ_MSG_CRRUPT BOOL;
DCL ZQ_LONG_DPVAL   ZM_LONG_DPVAL;
DCL ZQ_LOC_DPVAL M_STA_DPVAL;
DCL ZQ_MAX_BTS INT;
DCL ZQ_START_BTS_NBR INT;
DCL ZQ_T35_CNTRS_1 RANGE (E_MT_35_CTR_IP59 :
                               E_MT_35_CTR_IP62);
DCL ZQ_T35_CNTRS_2 RANGE (E_MT_35_CTR_IP30A :
                               E_MT_35_CTR_IP30M);

DCL ZQ_T35_4_CNTRS RANGE (E_MT_35_CTR_IP35A :
                               E_MT_35_CTR_IP35D);
/* BEGIN : FR36/307843 */
DCL ZQ_FOUND INT;
DCL ZQ_NBR_BTS INT;
ZQ_FOUND:=0;
/* END : FR36/307843 */
/* CRI#01437978.01 INVALID IP COUNTERS BEGIN */
/*IF ZQ_SEQNBR =4 */
IF ZQ_SEQNBR = 10
/* CRI#01437978.01 INVALID IP COUNTERS END */
THEN 
/*DO WITH ZF_LDC_BUF_PTR->CM_TPIP_PM_AUPOIP_BTS_CTR_REPORT_S4;*/
DO WITH ZF_LDC_BUF_PTR->CM_TPIP_PM_AUPOIP_BTS_CTR_DATA_S4
                                  .B_TPIP_PM_AUPOIP_BT_CTR_DATA_S4;
   ZQ_MAX_BTS := CM_FY32_MAX_BTS_PER_BSC/2;
   ZQ_START_BTS_NBR := 1;
/* BEGIN : FR36/307843 */
   ZQ_NBR_BTS := B_NB_BTS;
/* END : FR36/307843 */
	IF ((B_NB_BTS >= ZQ_START_BTS_NBR) AND
			(B_NB_BTS<= ZQ_MAX_BTS)) 
		THEN
		ZQ_MSG_CRRUPT := FALSE;
		DO FOR ZQ_BTS_NBR := ZQ_START_BTS_NBR TO ZQ_MAX_BTS
					/* BEGIN : FR36/307843 */
					WHILE ZQ_FOUND/=ZQ_NBR_BTS;
					/* END : FR36/307843 */
               /* BEGIN:FR 761944 Change */
         /*START 807626 CORRECTION */

          /*     IF(Q_S0455_CHK_IF_IP_BTS(ZQ_BTS_NBR))
               THEN    */
              
           /*END  807626 CORRECTION */
 
          /* END:FR 761944 Change */
		DO WITH B_PM_BSC_MUXTRAU_AUPOIP_INTF_CNTR(ZQ_BTS_NBR);
		/* BEGIN : FR36/307843 */
		IF (B_BTS_IDX_RC_TPIP /= 0)
                  THEN
          	    ZQ_FOUND:=ZQ_FOUND+1;
		/* END : FR36/307843 */
		    DO WITH Z_T35_5_PTR ->(B_BTS_IDX_RC_TPIP);
		      B_BTS_IDX :=B_BTS_IDX_RC_TPIP;
	

       /* START CR_817677_01 */ 
         
              
                 /*    DO FOR ZQ_T35_CNTRS_1 := 
		                E_MT_35_CTR_IP59 TO 
				     E_MT_35_CTR_IP62;
                          	ZQ_LONG_DPVAL.ZB_LONG :=
			B_BSC_MUXTRAU_AUPOIP_INTF_CNTRS(ZQ_T35_CNTRS_1);
			ZQ_LOC_DPVAL.B_HIGH:=ZQ_LONG_DPVAL.ZB_HIGH;
			ZQ_LOC_DPVAL.B_LOW:=ZQ_LONG_DPVAL.ZB_LOW;
		
              	Q_S0020_ADD_DP_VALUES (ZQ_LOC_DPVAL,
			B_CTRS_PT5_MT_35.B_IP59_TO_IP62(ZQ_T35_CNTRS_1));  */

              	    
             DO FOR ZQ_T35_CNTRS_1 := 
		                E_MT_35_CTR_IP59 TO 
				     E_MT_35_CTR_IP62;
	        
             CASE  ZQ_T35_CNTRS_1 OF
           
             (E_MT_35_CTR_IP59):
            
                	ZQ_LONG_DPVAL.ZB_LONG :=
			B_BSC_MUXTRAU_AUPOIP_INTF_CNTRS(ZQ_T35_CNTRS_1);
			ZQ_LOC_DPVAL.B_HIGH:=ZQ_LONG_DPVAL.ZB_HIGH;
			ZQ_LOC_DPVAL.B_LOW:=ZQ_LONG_DPVAL.ZB_LOW;
		
              	Q_S0020_ADD_DP_VALUES (ZQ_LOC_DPVAL,
			B_CTRS_PT5_MT_35.B_IP59_TO_IP62(ZQ_T35_CNTRS_1));

           (E_MT_35_CTR_IP60):
            
                	ZQ_LONG_DPVAL.ZB_LONG :=
			B_BSC_MUXTRAU_AUPOIP_INTF_CNTRS(ZQ_T35_CNTRS_1);
			ZQ_LOC_DPVAL.B_HIGH:=ZQ_LONG_DPVAL.ZB_HIGH;
			ZQ_LOC_DPVAL.B_LOW:=ZQ_LONG_DPVAL.ZB_LOW;
		
              	Q_S0020_ADD_DP_VALUES (ZQ_LOC_DPVAL,
			B_CTRS_PT5_MT_35.B_IP59_TO_IP62(ZQ_T35_CNTRS_1));
	
                 (E_MT_35_CTR_IP61):
            
                	ZQ_LONG_DPVAL.ZB_LONG :=
			B_BSC_MUXTRAU_AUPOIP_INTF_CNTRS(ZQ_T35_CNTRS_1);
			ZQ_LOC_DPVAL.B_HIGH:=ZQ_LONG_DPVAL.ZB_HIGH;
			ZQ_LOC_DPVAL.B_LOW:=ZQ_LONG_DPVAL.ZB_LOW;
		
              	Q_CALC_MAX_DPVAL (ZQ_LOC_DPVAL,
			B_CTRS_PT5_MT_35.B_IP59_TO_IP62(ZQ_T35_CNTRS_1));
         
              (E_MT_35_CTR_IP62):
            
                	ZQ_LONG_DPVAL.ZB_LONG :=
			B_BSC_MUXTRAU_AUPOIP_INTF_CNTRS(ZQ_T35_CNTRS_1);
			ZQ_LOC_DPVAL.B_HIGH:=ZQ_LONG_DPVAL.ZB_HIGH;
			ZQ_LOC_DPVAL.B_LOW:=ZQ_LONG_DPVAL.ZB_LOW;
		
              	Q_S0020_ADD_DP_VALUES (ZQ_LOC_DPVAL,
			B_CTRS_PT5_MT_35.B_IP59_TO_IP62(ZQ_T35_CNTRS_1));
        
              ELSE 
     ESAC;
    
	       OD;

      /* END CR_817677_01 */

/*LAGACY COUNTER IP30A,C,G AND M: INCASE OF AUPOIP FEATURE IS ENABLE
COUNTERS ARE RECEIVED FROM TPIP INSTEAD OF BTS AND COUNTERS COMING 
FROM BTS ARE SIMPLY IGNORED*/

                /* START: COMMENTED FOR CR 614323 */

	        /* ZQ_LONG_DPVAL.ZB_LONG :=B_TPIP_IP30A;
			ZQ_LOC_DPVAL.B_HIGH:=ZQ_LONG_DPVAL.ZB_HIGH;
			ZQ_LOC_DPVAL.B_LOW:=ZQ_LONG_DPVAL.ZB_LOW;
			Q_S0020_ADD_DP_VALUES (ZQ_LOC_DPVAL,
				B_CTRS_PT5_MT_35
					.B_IP25A_TO_IP30M(E_MT_35_CTR_IP30A));
	        ZQ_LONG_DPVAL.ZB_LONG :=B_TPIP_IP30C;
			ZQ_LOC_DPVAL.B_HIGH:=ZQ_LONG_DPVAL.ZB_HIGH;
			ZQ_LOC_DPVAL.B_LOW:=ZQ_LONG_DPVAL.ZB_LOW;
			Q_S0020_ADD_DP_VALUES (ZQ_LOC_DPVAL,
				B_CTRS_PT5_MT_35
					.B_IP25A_TO_IP30M(E_MT_35_CTR_IP30C));
            ZQ_LONG_DPVAL.ZB_LONG :=B_TPIP_IP30G;
			ZQ_LOC_DPVAL.B_HIGH:=ZQ_LONG_DPVAL.ZB_HIGH;
			ZQ_LOC_DPVAL.B_LOW:=ZQ_LONG_DPVAL.ZB_LOW;
			Q_S0020_ADD_DP_VALUES (ZQ_LOC_DPVAL,
				B_CTRS_PT5_MT_35
					.B_IP25A_TO_IP30M(E_MT_35_CTR_IP30G));
          	ZQ_LONG_DPVAL.ZB_LONG :=B_TPIP_IP30M;
			ZQ_LOC_DPVAL.B_HIGH:=ZQ_LONG_DPVAL.ZB_HIGH;
			ZQ_LOC_DPVAL.B_LOW:=ZQ_LONG_DPVAL.ZB_LOW;
			Q_S0020_ADD_DP_VALUES (ZQ_LOC_DPVAL,
				B_CTRS_PT5_MT_35
					.B_IP25A_TO_IP30M(E_MT_35_CTR_IP30M)); */

                  /* END: CR 614323 */

		       OD;
                  FI; 
		OD;
	    /*    FI; */ /* End FR 761944 Change */
		OD;
	ELSE 
	ZQ_MSG_CRRUPT := TRUE;
	FI;
 OD;
ELSE
/* CRI#01437978.01 INVALID IP COUNTERS BEGIN */
/*IF ZQ_SEQNBR =5*/ 
IF ZQ_SEQNBR = 11
/* CRI#01437978.01 INVALID IP COUNTERS END */
THEN 
 DO WITH ZF_LDC_BUF_PTR->CM_TPIP_PM_AUPOIP_BTS_CTR_DATA_S5
                              .B_TPIP_PM_AUPOIP_BT_CTR_DATA_S5;
 ZQ_MAX_BTS := CM_FY32_MAX_BTS_PER_BSC;
 ZQ_START_BTS_NBR := (CM_FY32_MAX_BTS_PER_BSC/2) +1;
/* BEGIN : FR36/307843 */
   ZQ_NBR_BTS := B_NB_BTS;
	/*IF ((B_NB_BTS >= ZQ_START_BTS_NBR) AND
			(B_NB_BTS<= ZQ_MAX_BTS))*/
	IF ((B_NB_BTS >= 1) AND
		(B_NB_BTS<= ((CM_FY32_MAX_BTS_PER_BSC/2)+1)))
/* END : FR36/307843 */
 
		THEN
		ZQ_MSG_CRRUPT := FALSE;
		DO FOR ZQ_BTS_NBR := ZQ_START_BTS_NBR TO ZQ_MAX_BTS
					/* BEGIN : FR36/307843 */
					WHILE ZQ_FOUND/=ZQ_NBR_BTS;
					/* END : FR36/307843 */
               /*BEGIN:FR 761944 Change */
         
         /*START 807626 CORRECTION */

        /*   IF (Q_S0455_CHK_IF_IP_BTS(ZQ_BTS_NBR))
             THEN   */

            /*END 807626 CORRECTION */
 
             /*END:FR 761944 Change */
		DO WITH B_PM_BSC_MUXTRAU_AUPOIP_INTF_CNTR(ZQ_BTS_NBR);
		/* BEGIN : FR36/307843 */
		IF (B_BTS_IDX_RC_TPIP /= 0)
                  THEN
          	    ZQ_FOUND:=ZQ_FOUND+1;
		/* END : FR36/307843 */
		  DO WITH Z_T35_5_PTR ->(B_BTS_IDX_RC_TPIP);
		    B_BTS_IDX :=B_BTS_IDX_RC_TPIP;

               /* START CR_817677_01 */ 
         
               
              
	/*	    DO FOR ZQ_T35_CNTRS_1 := 
		           E_MT_35_CTR_IP59 TO 
				E_MT_35_CTR_IP62;

                   	ZQ_LONG_DPVAL.ZB_LONG :=
			B_BSC_MUXTRAU_AUPOIP_INTF_CNTRS(ZQ_T35_CNTRS_1);
			ZQ_LOC_DPVAL.B_HIGH:=ZQ_LONG_DPVAL.ZB_HIGH;
			ZQ_LOC_DPVAL.B_LOW:=ZQ_LONG_DPVAL.ZB_LOW;
		
              	Q_S0020_ADD_DP_VALUES (ZQ_LOC_DPVAL,
			B_CTRS_PT5_MT_35.B_IP59_TO_IP62(ZQ_T35_CNTRS_1));  */


 
	        DO FOR ZQ_T35_CNTRS_1 := 
		           E_MT_35_CTR_IP59 TO 
				E_MT_35_CTR_IP62;
	        
	        
               CASE  ZQ_T35_CNTRS_1 OF
           
             (E_MT_35_CTR_IP59):
            
                	ZQ_LONG_DPVAL.ZB_LONG :=
			B_BSC_MUXTRAU_AUPOIP_INTF_CNTRS(ZQ_T35_CNTRS_1);
			ZQ_LOC_DPVAL.B_HIGH:=ZQ_LONG_DPVAL.ZB_HIGH;
			ZQ_LOC_DPVAL.B_LOW:=ZQ_LONG_DPVAL.ZB_LOW;
		
              	Q_S0020_ADD_DP_VALUES (ZQ_LOC_DPVAL,
			B_CTRS_PT5_MT_35.B_IP59_TO_IP62(ZQ_T35_CNTRS_1));

           (E_MT_35_CTR_IP60):
            
                	ZQ_LONG_DPVAL.ZB_LONG :=
			B_BSC_MUXTRAU_AUPOIP_INTF_CNTRS(ZQ_T35_CNTRS_1);
			ZQ_LOC_DPVAL.B_HIGH:=ZQ_LONG_DPVAL.ZB_HIGH;
			ZQ_LOC_DPVAL.B_LOW:=ZQ_LONG_DPVAL.ZB_LOW;
		
              	Q_S0020_ADD_DP_VALUES (ZQ_LOC_DPVAL,
			B_CTRS_PT5_MT_35.B_IP59_TO_IP62(ZQ_T35_CNTRS_1));
	
                 (E_MT_35_CTR_IP61):
            
                	ZQ_LONG_DPVAL.ZB_LONG :=
			B_BSC_MUXTRAU_AUPOIP_INTF_CNTRS(ZQ_T35_CNTRS_1);
			ZQ_LOC_DPVAL.B_HIGH:=ZQ_LONG_DPVAL.ZB_HIGH;
			ZQ_LOC_DPVAL.B_LOW:=ZQ_LONG_DPVAL.ZB_LOW;
		
              	Q_CALC_MAX_DPVAL (ZQ_LOC_DPVAL,
			B_CTRS_PT5_MT_35.B_IP59_TO_IP62(ZQ_T35_CNTRS_1));
         
              (E_MT_35_CTR_IP62):
            
                	ZQ_LONG_DPVAL.ZB_LONG :=
			B_BSC_MUXTRAU_AUPOIP_INTF_CNTRS(ZQ_T35_CNTRS_1);
			ZQ_LOC_DPVAL.B_HIGH:=ZQ_LONG_DPVAL.ZB_HIGH;
			ZQ_LOC_DPVAL.B_LOW:=ZQ_LONG_DPVAL.ZB_LOW;
		
              	Q_S0020_ADD_DP_VALUES (ZQ_LOC_DPVAL,
			B_CTRS_PT5_MT_35.B_IP59_TO_IP62(ZQ_T35_CNTRS_1));
        
              ELSE 
     ESAC;

		     OD;

     
       /* END CR_817677_01 */

/*LAGACY COUNTER IP30A,C AND M, INCASE OF AUPOIP FEATURE IS ENABLE,
 COUNTERS ARERECEIVED FROM TPIP INSTEAD OF BTS, AND COUNTERS COMMING 
FROM BTS ARE SIMPLY IGNORED*/

                /* START: COMMENTED FOR CR 614323 */

	       /*  ZQ_LONG_DPVAL.ZB_LONG :=B_TPIP_IP30A;
			ZQ_LOC_DPVAL.B_HIGH:=ZQ_LONG_DPVAL.ZB_HIGH;
			ZQ_LOC_DPVAL.B_LOW:=ZQ_LONG_DPVAL.ZB_LOW;
			Q_S0020_ADD_DP_VALUES (ZQ_LOC_DPVAL,
				B_CTRS_PT5_MT_35
					.B_IP25A_TO_IP30M(E_MT_35_CTR_IP30A));
	        ZQ_LONG_DPVAL.ZB_LONG :=B_TPIP_IP30C;
			ZQ_LOC_DPVAL.B_HIGH:=ZQ_LONG_DPVAL.ZB_HIGH;
			ZQ_LOC_DPVAL.B_LOW:=ZQ_LONG_DPVAL.ZB_LOW;
			Q_S0020_ADD_DP_VALUES (ZQ_LOC_DPVAL,
				B_CTRS_PT5_MT_35
					.B_IP25A_TO_IP30M(E_MT_35_CTR_IP30C));
            ZQ_LONG_DPVAL.ZB_LONG :=B_TPIP_IP30G;
			ZQ_LOC_DPVAL.B_HIGH:=ZQ_LONG_DPVAL.ZB_HIGH;
			ZQ_LOC_DPVAL.B_LOW:=ZQ_LONG_DPVAL.ZB_LOW;
			Q_S0020_ADD_DP_VALUES (ZQ_LOC_DPVAL,
				B_CTRS_PT5_MT_35
					.B_IP25A_TO_IP30M(E_MT_35_CTR_IP30G));
          	ZQ_LONG_DPVAL.ZB_LONG :=B_TPIP_IP30M;
			ZQ_LOC_DPVAL.B_HIGH:=ZQ_LONG_DPVAL.ZB_HIGH;
			ZQ_LOC_DPVAL.B_LOW:=ZQ_LONG_DPVAL.ZB_LOW;
			Q_S0020_ADD_DP_VALUES (ZQ_LOC_DPVAL,
				B_CTRS_PT5_MT_35
					.B_IP25A_TO_IP30M(E_MT_35_CTR_IP30M)); */

                 /* END: CR 614323 */ 

		  OD;
	/* BEGIN : FR36/307843 */
	        FI;
	/* END : FR36/307843 */
	       OD;
         /*    FI;  */ /*FR 761944 Change */
	    OD;
		
	ELSE 
	ZQ_MSG_CRRUPT := TRUE;
	FI;
  OD;
FI;
FI;
/* IN CASE FOLLOWING IS TRUE THEN MSG1544 IS CRRUPTED*/
IF ZQ_MSG_CRRUPT=TRUE
THEN
/* CRI#01437978.01 INVALID IP COUNTERS BEGIN */
/*IF ZQ_SEQNBR =4*/
IF ZQ_SEQNBR = 10
/* CRI#01437978.01 INVALID IP COUNTERS END */
  THEN 
 DO WITH ZF_LDC_BUF_PTR->CM_TPIP_PM_AUPOIP_BTS_CTR_REPORT_S4;
  TRACEINFO := 'MSG1544 CRPT NBR BTS = %d       ';

   TRC_BSC_PM1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_CCDC_SSM),
              TRACEID(NORM),
              TRACEINFO,
              LONG_INT((B_NB_BTS)),
              LONG_INT((0)),
              LONG_INT((0))); 
 OD;
   ELSE  
 DO WITH ZF_LDC_BUF_PTR->CM_TPIP_PM_AUPOIP_BTS_CTR_REPORT_S5;
  TRACEINFO := 'MSG1544 CRPT NBR BTS = %d       ';

   TRC_BSC_PM1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_CCDC_SSM),
              TRACEID(NORM),
              TRACEINFO,
              LONG_INT((B_NB_BTS)),
              LONG_INT((0)),
              LONG_INT((0))); 
OD;
FI;
Q_S0950_UPD_TPIP_AUPOIP_INVALID(ZQ_SEQNBR);	
FI;
END Q_S0952_UPD_TPIP_AUPOIP_BTS_CNTRS;
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0950_UPD_TPIP_AUPOIP_INVALID                     */        
/*                                                                    */        
/*     PROGRAMMER: AMITABH WIPRO WI                                   */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 16/12/2010                                      */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE AUPOIP COUNTERS INVALID                          */        
/*                                                                    */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*                      Q_S0080_ADD_INT_TO_DPVAL                      */        
/*     CALLED FROM:                                                   */        
/*                      			                      */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0950_UPD_TPIP_AUPOIP_INVALID: PROC(ZQ_SEQNBR INT);                               

DCL ZQ_DPVAL_INVALID M_STA_DPVAL;
 /* BEGIN CR 725623 Change */
/*DCL ZQ_T110_CNTRS RANGE (E_MT_110_CTR_AIP10A:E_MT_110_CTR_AIP54) ;*/
/* BEGIN CR:DCTPD00979074 */
/* BEGIN CR:1053653 */
DCL ZQ_T110_CNTRS RANGE (E_MT_110_CTR_AIP10A:E_MT_110_CTR_AIP20E);
/* DCL ZQ_T110_CNTRS RANGE (E_MT_110_CTR_AIP10A:E_MT_110_CTR_AIP20D); */
/* END CR:DCTPD00979074 */
 /* END CR 725623 Change */

DCL ZQ_T35_CNTRS_1 RANGE (E_MT_35_CTR_IP59 :
                               E_MT_35_CTR_IP62);
DCL ZQ_T35_CNTRS_2 RANGE (E_MT_35_CTR_IP30A :
                               E_MT_35_CTR_IP30M);

DCL ZQ_T35_4_CNTRS RANGE (E_MT_35_CTR_IP35A :
                               E_MT_35_CTR_IP35D);
DCL ZQ_NBR_MGW INT;
DCL B_CTRS_PT12_MT_110 INT;
DCL ZQ_MAX_BTS INT;
DCL ZQ_START_BTS_NBR INT;
DCL ZQ_TC_NBR INT; 
DCL ZQ_BTS_NBR INT;   
TRACEINFO := 'INVD TPIP AUPIP COUNTERS 1544 %d';

   TRC_BSC_PM1(
              FILENAME,
              LONG_INT(__LINENO__),
              LONG_INT(SUB_CLASS_CCDC_SSM),
              TRACEID(NORM),
              TRACEINFO,
              LONG_INT((ZQ_SEQNBR)),
              LONG_INT((0)),
              LONG_INT((0)));
ZQ_DPVAL_INVALID.B_LOW := ZS_FFFE;
ZQ_DPVAL_INVALID.B_HIGH:= ZS_FFFF;
/* CRI#01437978.01 INVALID IP COUNTERS BEGIN */
/* IF ZQ_SEQNBR =3 */
IF (ZQ_SEQNBR >= 3) AND (ZQ_SEQNBR <= 8)
/* CRI#01437978.01 INVALID IP COUNTERS END */
THEN
	DO FOR ZQ_NBR_MGW := 1 TO M_MAX_MGW ;
	   DO WITH Z_T110_12_PTR ->(ZQ_NBR_MGW);
	      B_MGW_IP := -1L ;
	      DO FOR ZQ_T110_CNTRS :=E_MT_110_CTR_AIP10A
                /*START: FR36/308293*/
		/*TO E_MT_110_CTR_AIP54;*/
               /* BEGIN CR:DCTPD00979074 */
	/*	TO E_MT_110_CTR_AIP50; */
             /*   TO E_MT_110_CTR_AIP20D; */
		  TO E_MT_110_CTR_AIP20E;
              /* END CR:DCTPD00979074 */
                /*END: FR36/308293*/
		B_CTRS_PT12_MT_110.
                /* BEGIN CR 725623 Change */
		/*B_AIP10A_TO_AIP54(ZQ_T110_CNTRS):=*/
              /* BEGIN CR:DCTPD00979074 */
	      /* BEGIN CR:1053653 */
	       B_AIP10A_TO_AIP20E(ZQ_T110_CNTRS):= 
              /* B_AIP10A_TO_AIP20D(ZQ_T110_CNTRS):= */
    	      /* END CR:1053653 */
              /* END CR:DCTPD00979074 */
                /* END CR 725623 Change */
		ZQ_DPVAL_INVALID;
             OD;/*END OF FOR LOOP CNTR*/
              /* BEGIN CR 725623 Change */
           /* BEGIN CR:DCTPD00979074 */
           /*   B_CTRS_PT12_MT_110.
              B_AIP10A_TO_AIP20E(E_MT_110_CTR_AIP10E) :=
              ZQ_DPVAL_INVALID;
              B_CTRS_PT12_MT_110.
              B_AIP10A_TO_AIP20E(E_MT_110_CTR_AIP20E) :=
              ZQ_DPVAL_INVALID; */
          /* END CR:DCTPD00979074 */
              /* END CR 725623 Change */
	   OD;		
	OD;/*END OF FOR LOOP HFILE*/
/* CRI#01437978.01 INVALID IP COUNTERS BEGIN */
	FI;/* SEQ 3 TO SEQ 8 */
	IF ZQ_SEQNBR = 9 
/* SEQ 9 FOR TC COUNTERS */
/* CRI#01437978.01 INVALID IP COUNTERS BEGIN */
	THEN
	DO FOR ZQ_TC_NBR :=1 TO CM_FY32_MAX_TC_PER_BSC;
	   DO WITH Z_T35_4_PTR ->(ZM_TC_INDEX_VALUE(ZQ_TC_NBR));
	     DO FOR ZQ_T35_4_CNTRS := E_MT_35_CTR_IP35A
		           TO E_MT_35_CTR_IP35D; 
		   B_CTRS_PT4_MT_35.
		    B_IP21_TO_IP35D(ZQ_T35_4_CNTRS):=
			ZQ_DPVAL_INVALID;
	     OD;/*END OF FOR LOOP CNTR*/

             /* START: CR 614323 */

             B_CTRS_PT4_MT_35.B_IP21_TO_IP35D(E_MT_35_CTR_IP30N) := 
                                                  ZQ_DPVAL_INVALID;
             B_CTRS_PT4_MT_35.B_IP21_TO_IP35D(E_MT_35_CTR_IP30O) := 
                                                  ZQ_DPVAL_INVALID;
             B_CTRS_PT4_MT_35.B_IP21_TO_IP35D(E_MT_35_CTR_IP30P) := 
                                                  ZQ_DPVAL_INVALID;
             B_CTRS_PT4_MT_35.B_IP21_TO_IP35D(E_MT_35_CTR_IP30Q) := 
                                                  ZQ_DPVAL_INVALID;
              
             /* END: CR 614323 */

	   OD;
	OD;/*END OF FOR LOOP HFILE*/
FI; /*SEQ 9*/	
/* CRI#01437978.01 INVALID IP COUNTERS BEGIN */
/* IF ZQ_SEQNBR =4 */
IF ZQ_SEQNBR = 10 
/* CRI#01437978.01 INVALID IP COUNTERS END */
THEN 
ZQ_MAX_BTS := CM_FY32_MAX_BTS_PER_BSC/2;
ZQ_START_BTS_NBR := 1;
FI;
/* CRI#01437978.01 INVALID IP COUNTERS BEGIN */
/*IF ZQ_SEQNBR =5 */
IF ZQ_SEQNBR = 11
/* CRI#01437978.01 INVALID IP COUNTERS END */
THEN 
ZQ_MAX_BTS := CM_FY32_MAX_BTS_PER_BSC;
ZQ_START_BTS_NBR := (CM_FY32_MAX_BTS_PER_BSC/2) +1;
FI;
/* CRI#01437978.01 INVALID IP COUNTERS BEGIN */
/* IF (ZQ_SEQNBR =4) OR (ZQ_SEQNBR = 5) */
IF (ZQ_SEQNBR = 10 ) OR (ZQ_SEQNBR = 11 ) 
/* CRI#01437978.01 INVALID IP COUNTERS END */
THEN

	DO FOR ZQ_BTS_NBR := ZQ_START_BTS_NBR TO ZQ_MAX_BTS;
		DO WITH Z_T35_5_PTR ->(ZQ_BTS_NBR);
		   DO FOR ZQ_T35_CNTRS_1 := 
		           E_MT_35_CTR_IP59 TO 
				E_MT_35_CTR_IP62;
			B_CTRS_PT5_MT_35.
			B_IP59_TO_IP62(ZQ_T35_CNTRS_1) := ZQ_DPVAL_INVALID;
		    OD;
/*LAGACY COUNTER IP30A,C AND M, INCASE OF AUPOIP FEATURE IS ENABLE,
 COUNTERS ARERECEIVED FROM TPIP INSTEAD OF BTS, AND COUNTERS COMING 
FROM BTS ARE SIMPLY IGNORED*/

                                /* START: CR 614323 */

				/* B_CTRS_PT5_MT_35
				.B_IP25A_TO_IP30M(E_MT_35_CTR_IP30A):= 
							ZQ_DPVAL_INVALID;
				B_CTRS_PT5_MT_35
				.B_IP25A_TO_IP30M(E_MT_35_CTR_IP30C):= 
							ZQ_DPVAL_INVALID;
				B_CTRS_PT5_MT_35
				.B_IP25A_TO_IP30M(E_MT_35_CTR_IP30G):= 
							ZQ_DPVAL_INVALID;								
				B_CTRS_PT5_MT_35
				.B_IP25A_TO_IP30M(E_MT_35_CTR_IP30M):= 
							ZQ_DPVAL_INVALID; */	

                                /* END: CR 614323 */

		OD;
		OD;
FI;
END Q_S0950_UPD_TPIP_AUPOIP_INVALID;                                                                                
/*END : AUPOIP FEATURE  */
/**********************************************************************/        
/*                                                                    */        
/*          4.5  GLOBAL PROCEDURE DEFINITIONS                         */        
/*                                                                    */        
/**********************************************************************/        
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: P_GDXBYX_INIT_SSM  : INTERFACE_PROC                 */        
/*                                                                    */        
/*     PROGRAMMER: L. DIERICK  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE: 22/07/99 */        
/*                                                                    */        
/*     CREATION DATE: 22/07/99                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION: INITIALISES RSMB POINTERS TO NULL.     */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_DS_PTR PTR                               */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                      NONE                                          */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0200_INIT_MEM_PTRS                         */        
/*                      Q_S0210_REG_STATIC_MEM                        */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*     CALLED FROM:                                                   */        
/*                      NONE                                          */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      GET     R_F_ACCESS                            */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
P_GDXBYX_INIT_SSM : INTERFACE_PROC (ZF_DS_PTR  PTR);                          
                                                                                
DCL ZQ_REL_IDX           ZM_REL_TYPE;                                           
DCL ZQ_FAST_ACC_PTR      ZM_FAST_ACC_PTR;                                       
DCL ZQ_I                 INT;                                                   
/* START : WIPRO B11 IP MR0 PKG1 */
DCL ZQ_J                 INT;
DCL ZQ_K                 INT;
/* END : WIPRO B11 IP MR0 PKG1 */

INVOKE RELATION (R_F_ACCESS);                                                   
INIT DB_AREAS;                                                                  

Q_S0200_INIT_MEM_PTRS (ZF_DS_PTR);                                            
/*added */
Q_INIT_GLOB_BTS_BUFFER();
/*added */
/* BEGIN: ADD-WIPRO-B10-MR1-CHANGE */
/*AS WE USE DS REGISTERING MEM IS NOT REQUIRED*/
/*Q_S0210_REG_STATIC_MEM (); */
/* END: ADD-WIPRO-B10-MR1-CHANGE */

DO FOR ZQ_I := 1 TO 5;                                                          
  Z_VAL_MATE(ZQ_I) := ZS_INIT_VAL_MATE;                                         
OD;                                                                             
                                                                                
DO FOR ZQ_REL_IDX IN ZM_REL_TYPE;                                               
                                                                                
  GET R_F_ACCESS WHERE (D_FAST_IDX = INT(ZS_RELATION_NBR(ZQ_REL_IDX)));         
                                                                                
  IF DB_PARMS.B_DB_STATUS = M_DB_SUCCESS                                        
  THEN                                                                          
                                                                                
    DO WITH ZQ_FAST_ACC_PTR;                                                    
      PTR(ZB_PTR):=PTR((R_F_ACCESS.D_ABS_BASE));
    OD;                                                                         
                                                                                
    CASE ZQ_REL_IDX OF                                                          
                                                                                
      (ZE_R_CELL_MGT  ) : Z_R_CELL_MGT_PTR   := ZQ_FAST_ACC_PTR.ZB_PTR;         
      (ZE_R_CIC_CODE  ) : Z_R_CIC_CODE_PTR   := ZQ_FAST_ACC_PTR.ZB_PTR;         
      (ZE_R_CONF_CE   ) : Z_R_CONF_CE_PTR    := ZQ_FAST_ACC_PTR.ZB_PTR;         
      (ZE_R_N7_CONF   ) : Z_R_N7_CONF_PTR    := ZQ_FAST_ACC_PTR.ZB_PTR;         
      (ZE_R_PM_ACT    ) : Z_R_PM_ACT_PTR     := ZQ_FAST_ACC_PTR.ZB_PTR;         
      (ZE_R_PM_SC_G2  ) : Z_R_PM_SC_G2_PTR   := ZQ_FAST_ACC_PTR.ZB_PTR;         
      (ZE_R_RSL_LNK   ) : Z_R_RSL_LNK_PTR    := ZQ_FAST_ACC_PTR.ZB_PTR;         
      (ZE_R_TRX_MGT   ) : Z_R_TRX_MGT_PTR    := ZQ_FAST_ACC_PTR.ZB_PTR;     
      (ZE_R_BTS_TEL   ) : Z_R_BTS_TEL_PTR    := ZQ_FAST_ACC_PTR.ZB_PTR;    
      (ZE_R_OML_LNK   ) : Z_R_OML_LNK_PTR    := ZQ_FAST_ACC_PTR.ZB_PTR;
      /*CR20/223453*/
      (ZE_R_BSC_INFO  ) : Z_R_BSC_INFO_PTR   := ZQ_FAST_ACC_PTR.ZB_PTR;
      /*CR20/223453*/
   /* BEGIN: ADD-WIPRO-B10-MR2-CHANGE */
      (ZE_R_BEQ_MGT   ) : Z_R_BEQ_MGT_PTR    := ZQ_FAST_ACC_PTR.ZB_PTR;
      (ZE_R_ABIS_INF  ) : Z_R_ABIS_INF_PTR   := ZQ_FAST_ACC_PTR.ZB_PTR; 
      (ZE_R_TRAU_CP  ) : Z_R_TRAU_CP_PTR   := ZQ_FAST_ACC_PTR.ZB_PTR;  
      (ZE_R_ATER_INF   ) : Z_R_ATER_INF_PTR   := ZQ_FAST_ACC_PTR.ZB_PTR;  
      (ZE_R_CONF_TRK   ) : Z_R_CONF_TRK_PTR   := ZQ_FAST_ACC_PTR.ZB_PTR; 
      (ZE_R_TC_MGT   ) : Z_R_TC_MGT_PTR   := ZQ_FAST_ACC_PTR.ZB_PTR;  
   /* END: ADD-WIPRO-B10-MR2-CHANGE */
   /* START : WIPRO B11 IP MR0 PKG1 */
      (ZE_R_IP_GSL   ) : Z_R_IP_GSL_PTR   := ZQ_FAST_ACC_PTR.ZB_PTR;
   /* END : WIPRO B11 IP MR0 PKG1 */
   /*ADDED FOR GSL COUNTERS MEMO*/
      (ZE_R_GSL_LNK  ) : Z_R_GSL_LNK_PTR  := ZQ_FAST_ACC_PTR.ZB_PTR;
      (ZE_R_BSS_PAR2 ) : Z_R_BSS_PAR2_PTR := ZQ_FAST_ACC_PTR.ZB_PTR;
      (ZE_R_MSC_MGT  ) : Z_R_MSC_MGT_PTR := ZQ_FAST_ACC_PTR.ZB_PTR;
   /*ADDED FOR GSL COUNTERS MEMO*/
   /*ADDED FOR AFLEX COUNTERS*/   
      (ZE_R_NRI_MAP  ) : Z_R_NRI_MAP_PTR := ZQ_FAST_ACC_PTR.ZB_PTR;
   /*ADDED FOR AFLEX COUNTERS*/
      /*CR2596*/
    (ZE_R_CNF_ABTP ) : Z_R_CNF_ABTP_PTR   := ZQ_FAST_ACC_PTR.ZB_PTR;
      /*CR2596*/
   /*ADDED FOR IURG INTERFACE FEATURE*/
    (ZE_R_RNC_MGT )  : Z_R_RNC_MGT_PTR    := ZQ_FAST_ACC_PTR.ZB_PTR;
   /*ADDED FOR IURG INTERFACE FEATURE*/
   /* BEGIN : B12 VAMOS */
   (ZE_R_CELL_IN )    : Z_R_CELL_IN_PTR   := ZQ_FAST_ACC_PTR.ZB_PTR;
	/* END : B12 VAMOS */
    /*AM START:CR650353*/
    (ZE_R_SCCP_CNF)   : Z_R_SCCP_CNF_PTR  := ZQ_FAST_ACC_PTR.ZB_PTR;
    /*AM END:CR650353 */                                                      
    ESAC;                                                                       

    /* START : WIPRO B11 IP MR0 PKG1 */
    /* SRINIVAS: CODE ADDED TO INIT IP25C ARRAY */
    /*commented */
      /* DO FOR ZQ_J :=1 TO CM_FY32_MAX_BTS_PER_BSC;
        DO FOR ZQ_K := 1 TO 15;
         Z_BTS_IP25C(ZQ_J).ZB_IP25C(ZQ_K).B_HIGH:=0;
         Z_BTS_IP25C(ZQ_J).ZB_IP25C(ZQ_K).B_LOW:=0;
        OD;
       OD;*/
    /*commented */
    /* END : WIPRO B11 IP MR0 PKG1 */
  ELSE                                                                          
       Z_DB_PARMS := DB_PARMS;                                                  
       Q_S0010_CCDC_ERROR(M_ERC6_USER_REC, M_ERT0009_DBASE_ACC_FAIL,            
                          09, INT(ZQ_REL_IDX));                                               
  FI;                                                                           
OD;                                                                             
                                                                                
                                                                                
END P_GDXBYX_INIT_SSM;                                                          
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: P_GDXBYX_CELL_LIST  : INTERFACE_PROC                */        
/*                                                                    */        
/*     PROGRAMMER: L. DIERICK  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE: 22/07/99 */        
/*                                                                    */        
/*     CREATION DATE: 22/07/99                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*         AT EACH 15 MIN BOUNDARY, CC_DATA_COLLECTOR FMM TRIGGERS    */        
/*         THE SSM IN ORDER TO SET UP A LIST OF ALL CELLS ACTIVATED   */        
/*         (ACCORDING TO R_CELL_MGT). THIS ARRAY IS CHECKED WHEN      */        
/*         PROCESSING THE CTRS FROM THE POLLING RESPONS MSGS RECEIVED */        
/*         AT THE NEXT 15 MIN BOUNDARY. IF IN BETWEEN A CELL IS ADDED */        
/*         - THE COUNTER VALUES ARE INCOMPLETE (INVALID) - THE        */        
/*         COUNTERS ARE SET TO INVALID FOR THIS CELL. ONLY CELLS      */        
/*         WITHIN THE LIST CAN HAVE THE REPORTED COUNTER VALUES.      */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      NONE                                          */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                      NONE                                          */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      NONE                                          */        
/*     CALLED FROM:                                                   */        
/*                      NONE                                          */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
P_GDXBYX_CELL_LIST : INTERFACE_PROC();                                          
                                                                                
DCL ZQ_CELL_IDX    M_CELL_IDX;                                                  
DCL ZQ_TRX_IDX     M_TRX_IDX;
DCL ZQ_MSC_IDX     INT;
DCL ZQ_I           INT;                                                   
DCL ZQ_J           RANGE(E_MT_110_CTR_MC1701 : E_MT_110_CTR_MC1716);
                                                                                
Z_STD_CELL_LIST := Z_STD_CELL_LIST_NEW;                                         
Z_STD_CELL_LIST_NEW := (:(*): FALSE :);                                         
                                                                                
DO FOR ZQ_CELL_IDX := 1 TO CM_FY32_MAX_CELLS_PER_BSC;                           
  DO WITH Z_R_BTS_TEL_PTR -> ZM_R_BTS_TEL(ZQ_CELL_IDX);                       
    IF D_BTS_TEL /= E_MS_NEQ                                                    
    THEN                                                                        
      Z_STD_CELL_LIST_NEW(ZQ_CELL_IDX) := TRUE;                                 
    FI;                                                                         
  OD;                                                                           
OD;                                                                             
                                                                                
Z_STD_TRX_LIST := Z_STD_TRX_LIST_NEW;                                           
Z_STD_TRX_LIST_NEW := (:(*): FALSE :);                                          
                                                                                
DO FOR ZQ_TRX_IDX := 1 TO CM_FY32_MAX_TRX_PER_BSC;                              
  DO WITH Z_R_TRX_MGT_PTR -> ZM_R_TRX_MGT(ZQ_TRX_IDX);                          
    IF D_CELL_IDX /= M_NULL_CELL_IDX 
    THEN 
      IF Z_STD_CELL_LIST_NEW(D_CELL_IDX)                                          
      THEN                                                                        
        Z_STD_TRX_LIST_NEW(ZQ_TRX_IDX) := TRUE;                                   
      FI;
    FI;                                                                          
  OD;                                                                           
OD;                                                                             

ZQ_MSC_IDX := 1;
DO FOR ZQ_I := 1 TO CM_FY32_MAX_MSC_PER_BSC;
  DO WITH Z_R_MSC_MGT_PTR -> ZM_R_MSC_MGT(ZQ_I);
    IF D_MSC_MST /= E_MS_NEQ
    THEN
      DO WITH Z_T110_17_PTR ->CM_FY32_HIS_TYPE_110_17_BUF(ZQ_MSC_IDX);
        IF B_MSC_IDX = H'FFFF
        THEN
          B_MSC_IDX := D_MSC_SBL;
          DO WITH B_CTRS_P17_MT_110;
            B_MC1700.B_LOW  := 0;
            B_MC1700.B_HIGH := 0;
            DO FOR ZQ_J := E_MT_110_CTR_MC1701
                       TO E_MT_110_CTR_MC1716;
              B_MC1701_TO_MC1716(ZQ_J).B_LOW  := 0;
              B_MC1701_TO_MC1716(ZQ_J).B_HIGH := 0;           
            OD;              
          OD;
        FI; 
      OD;
      DO WITH Z_T110_8_PTR ->CM_FY32_HIS_TYPE_110_8_BUF(ZQ_MSC_IDX);
        B_MSC_IDX := D_MSC_SBL;
      OD;
      ZQ_MSC_IDX := ZQ_MSC_IDX + 1;
    FI;  
  OD;
OD;
/* DCTPD01273907 */
Z_OLC_CELL_SEQ_NBR := 0;
/* DCTPD01273907 */
END P_GDXBYX_CELL_LIST;                                                         
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: P_GDXBYX_UPD_CCI_STD_CTRS  : INTERFACE_PROC         */        
/*                                                                    */        
/*     PROGRAMMER: L. DIERICK  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE: 22/07/99 */        
/*                                                                    */        
/*     CREATION DATE: 22/07/99                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION: INITIALISES RSMB POINTERS TO NULL.     */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_LCE_ID M_LCE_ID,                       */        
/*                      ZF_LDC_TYPE M_FMM_SELECTOR,                   */        
/*                      ZF_LDC_SEQ_NBR M_BYTE,                        */        
/*                      ZF_VALIDITY M_PM_DATA_VALIDITY,               */        
/*                      ZF_LDC_BUF_PTR PTR,                           */        
/*                      ZF_ACT_CE BOOL                                */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                      NONE                                          */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0240_UPD_TCU_STD_CNTRS                     */        
/*                      Q_S0250_UPD_DTC_STD_CNTRS                     */        
/*                      Q_S0260_UPD_TCH_STD_CNTRS                     */        
/*                      Q_S0090_MEAS_TYPE_RUNNING                     */        
/*                      Q_S0442_UPD_DTC_N7_INVALID                    */        
/*                      Q_S0475_UPD_T9_DTC_N7                         */        
/*                      Q_S0480_UPD_T25_DTC                           */        
/*                      Q_S0481_UPD_N7_DTC_T110_5                     */        
/*                      Q_S0230_SET_INVALID                           */        
/*                      Q_S0439_UPD_N7_SCPR_INVALID                   */        
/*                      Q_S0474_UPD_T9_CPR_N7                         */        
/*                      Q_S0473_UPD_N7_SCPR_T110_5                    */        
/*                      Q_S0438_UPD_T8_INVALID                        */        
/*                      Q_S0470_UPDATE_CCI_TYPE8                      */        
/*                      Q_S0429_UPD_SMS_INVALID                       */        
/*                      Q_S0498_UPD_T30_SMS_CB                        */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*     CALLED FROM:                                                   */        
/*                      NONE                                          */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      GET     R_CE_DYST                             */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
P_GDXBYX_UPD_CCI_STD_CTRS : INTERFACE_PROC(                                     
                                 ZF_LDC_LCE_ID    M_LCE_ID,                     
                                 ZF_LDC_TYPE      M_FMM_SELECTOR,               
                                 ZF_LDC_SEQ_NBR   M_BYTE,                       
                                 ZF_VALIDITY      M_PM_DATA_VALIDITY,           
                                 ZF_LDC_BUF_PTR   PTR,                          
                                 ZF_ACT_CE        BOOL,
                                 ZF_STD_TRX       BOOL);                        
                                                                                
DCL ZQ_ACT_IDX      INT;                                                        
DCL ZQ_SET_INVALID  BOOL;                                                       
DCL ZQ_VALIDITY     M_PM_DATA_VALIDITY;                                         
DCL ZQ_DTC_IND      BOOL;                                                       
                                                                                
INVOKE RELATION (R_CE_DYST,                                                     
                 R_RSL_LNK,                                                     
                /* R_TSL_LNK,*/                                                     
                 R_OML_LNK);                                                    
                                                                                
INIT DB_AREAS;                                                                  
                                                                                
GET R_CE_DYST;                                                                  
                                                                                
CASE ZF_LDC_TYPE OF                                                             
  (M_FS_TCU_TRF_LDC):                                                           
    Q_S0240_UPD_TCU_STD_CNTRS(ZF_LDC_LCE_ID,                                    
                              ZF_LDC_SEQ_NBR,                                   
                              ZF_VALIDITY,                                      
                              ZF_LDC_BUF_PTR);                                  
                                                                                
  (M_FS_DTC_TRF_LDC):                                                           
    Q_S0250_UPD_DTC_STD_CNTRS(ZF_LDC_LCE_ID,                                    
                              ZF_LDC_SEQ_NBR,                                   
                              ZF_VALIDITY,
                              ZF_STD_TRX,                                      
                              ZF_LDC_BUF_PTR);   
                                                                                
  (M_FS_TCHRM_LDC):                                                             
    Q_S0260_UPD_TCH_STD_CNTRS(ZF_LDC_LCE_ID,                                    
                              ZF_LDC_SEQ_NBR,                                   
                              ZF_VALIDITY,                                      
                              ZF_LDC_BUF_PTR,                                   
                              ZF_ACT_CE);      
 
  /* DEL IN MXB8 BEGIN */
  /*
  (M_FS_DTC_N_7_LDC): */
    /* THE FOLLOWING MEASUREMENT TYPES ARE EXPECTED :                           
     *  9, 25                                                                   
     */                                                                         
  /*ZQ_DTC_IND := FALSE;                                                        
    IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_NUMBER7, ZQ_ACT_IDX)                      
    THEN                                                                        
      IF ZF_VALIDITY = E_DATA_INVALID                                           
      THEN                                                                      
        Q_S0442_UPD_DTC_N7_INVALID(ZF_LDC_LCE_ID, E_MT_NUMBER7);                
      ELSE                                                                      
        Q_S0475_UPD_T9_DTC_N7(ZF_LDC_BUF_PTR, ZF_LDC_LCE_ID);                   
      FI;                                                                       
    FI;                                                                         
                                                                                
    IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_SCCP, ZQ_ACT_IDX)                         
    THEN                                                                        
      IF ZF_VALIDITY = E_DATA_INVALID                                           
      THEN                                                                      
        Q_S0442_UPD_DTC_N7_INVALID(ZF_LDC_LCE_ID, E_MT_SCCP);                   
      ELSE                                                                      
        Q_S0480_UPD_T25_DTC(ZF_LDC_BUF_PTR, ZF_LDC_LCE_ID,                      
                            ZQ_DTC_IND);                                        
      FI;                                                                       
    FI;                                                                         
                                                                                
    IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_CELL_TRX_OVERVIEW_COUNTERS,               
                                 ZQ_ACT_IDX)                                    
    THEN                                                                        
      IF ZF_VALIDITY = E_DATA_INVALID                                           
      THEN                                                                      
        Q_S0442_UPD_DTC_N7_INVALID(ZF_LDC_LCE_ID,                               
                                   E_MT_CELL_TRX_OVERVIEW_COUNTERS);            
      ELSE                                                                      
        Q_S0481_UPD_N7_DTC_T110_5(ZF_LDC_BUF_PTR, ZF_LDC_LCE_ID);               
      FI;                                                                       
    FI; */
  /* DEL IN MXB8 END */
                                                                                
                                                                                
   (M_FS_CPR_N_7_LDC):                                                          
   /*---------------*/                                                          
    /* THE FOLLOWING MEASUREMENT TYPES ARE EXPECTED :                           
     *  9, 110-4                                                                
     */
    /*CR20/237798*/
    DO WITH Z_R_BSS_PAR2_PTR -> ZM_R_BSS_PAR2;
    IF D_EN_AOIP = FALSE THEN
    /*CR20/237798*/
     ZQ_SET_INVALID := Q_S0230_SET_INVALID(ZF_LDC_LCE_ID,                        
                                          ZF_LDC_TYPE,                          
                                          ZF_VALIDITY);                         
     ZQ_VALIDITY := ZF_VALIDITY;                                                 
     IF ZQ_SET_INVALID                                                           
     THEN                                                                        
      ZQ_VALIDITY := E_DATA_INVALID;                                            
     FI;
    
     IF ZF_ACT_CE OR ZF_VALIDITY = E_DATA_VALID_INCOMPLETE OR                    
       ZQ_SET_INVALID                                                           
     THEN                                                                        
      IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_NUMBER7, ZQ_ACT_IDX)                    
      THEN                                                                      
        IF ZQ_VALIDITY = E_DATA_INVALID                                         
        THEN                                                                    
          Q_S0439_UPD_N7_SCPR_INVALID(E_MT_NUMBER7);                            
        ELSE                                                                    
          Q_S0474_UPD_T9_CPR_N7(ZF_LDC_BUF_PTR);                                
        FI;                                                                     
      FI;                                                                       
                                                                                
      IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_CELL_TRX_OVERVIEW_COUNTERS,             
                                   ZQ_ACT_IDX)                                  
      THEN                                                                      
        IF ZQ_VALIDITY = E_DATA_INVALID                                         
        THEN                                                                    
          Q_S0439_UPD_N7_SCPR_INVALID(E_MT_CELL_TRX_OVERVIEW_COUNTERS);         
        ELSE                                                                    
          Q_S0473_UPD_N7_SCPR_T110_5(ZF_LDC_BUF_PTR);                           
        FI;                                                                     
      FI;                                                                       
     FI;                                                                         
/*CR20/237798*/
   ELSE
     IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_NUMBER7, ZQ_ACT_IDX) THEN
      Q_S0440_UPD_N7_SCPR_ZEROS(E_MT_NUMBER7);
     FI;
     IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_CELL_TRX_OVERVIEW_COUNTERS
                                  , ZQ_ACT_IDX) THEN
      Q_S0440_UPD_N7_SCPR_ZEROS(E_MT_CELL_TRX_OVERVIEW_COUNTERS);
     FI; 
   FI;
  OD; 
/*CR20/237798*/                                                                                
   (M_FS_LME_X25):                                                              
    /* THE FOLLOWING MEASUREMENT TYPES ARE EXPECTED :                           
     *  8                                                                       
     */                                                                         
                                                                                
     IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_X25, ZQ_ACT_IDX)                         
     THEN                                                                       
       IF ZF_VALIDITY=E_DATA_INVALID                                            
       THEN                                                                     
         Q_S0438_UPD_T8_INVALID(ZF_LDC_LCE_ID);                                 
       ELSE                                                                     
         Q_S0470_UPDATE_CCI_TYPE8(ZF_LDC_BUF_PTR, ZF_LDC_LCE_ID);               
       FI;                                                                      
     FI;                                                                        
                                                                                
   (M_FS_SMS_CB_MASTER):                                                        
    /* THE FOLLOWING MEASUREMENT TYPES ARE EXPECTED :                           
     *  30                                                                      
     */                                                                         
                                                                                
    ZQ_SET_INVALID := Q_S0230_SET_INVALID(ZF_LDC_LCE_ID,                        
                                          ZF_LDC_TYPE,                          
                                          ZF_VALIDITY);                         
                                                                                
                                                                                
    ZQ_VALIDITY := ZF_VALIDITY;                                                 
    IF ZQ_SET_INVALID                                                           
    THEN                                                                        
      ZQ_VALIDITY := E_DATA_INVALID;                                            
    FI;                                                                         
    IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_SMSCB, ZQ_ACT_IDX)                        
    THEN                                                                        
      IF ZF_ACT_CE OR ZF_VALIDITY = E_DATA_VALID_INCOMPLETE OR                  
         ZQ_SET_INVALID                                                         
      THEN                                                                      
        IF ZQ_VALIDITY=E_DATA_INVALID                                           
        THEN                                                                    
          Q_S0429_UPD_SMS_INVALID();                                            
        ELSE                                                                    
          Q_S0498_UPD_T30_SMS_CB(ZF_LDC_BUF_PTR);                               
        FI;                                                                     
      FI;                                                                       
    FI;                                                                         
                                                                                
   ELSE                                                                         
     /* INVALID LDC TYPE */                                                     
     Q_S0010_CCDC_ERROR(M_ERC6_USER_REC, M_ERT0019_INC_MESS_DATA,               
                        10, 0194);                                              
 ESAC;                                                                          
                                                                                
END P_GDXBYX_UPD_CCI_STD_CTRS;                                                  
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: P_GDXBYX_UPD_CCI_DETAIL_CTRS  : INTERFACE_PROC      */        
/*                                                                    */        
/*     PROGRAMMER: L. DIERICK  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE: 22/07/99 */        
/*                                                                    */        
/*     CREATION DATE: 22/07/99                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION: INITIALISES RSMB POINTERS TO NULL.     */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_LCE_ID M_LCE_ID,                       */        
/*                      ZF_LDC_TYPE M_FMM_SELECTOR,                   */        
/*                      ZF_LDC_SEQ_NBR M_BYTE,                        */        
/*                      ZF_VALIDITY M_PM_DATA_VALIDITY,               */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                      NONE                                          */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0270_UPD_DET_TCU_CNTRS                     */        
/*                      Q_S0280_UPD_DET_DTC_CNTRS                     */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*     CALLED FROM:                                                   */        
/*                      NONE                                          */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
P_GDXBYX_UPD_CCI_DETAIL_CTRS: INTERFACE_PROC(                                   
                                   ZF_LDC_LCE_ID  M_LCE_ID,                     
                                   ZF_LDC_TYPE    M_FMM_SELECTOR,               
                                   ZF_LDC_SEQ_NBR M_BYTE,                       
                                   ZF_VALIDITY    M_PM_DATA_VALIDITY,           
                                   ZF_LDC_BUF_PTR PTR);                         
                                                                                
                                                                                
CASE ZF_LDC_TYPE OF                                                             
  (M_FS_TCU_TRF_LDC):                                                           
    Q_S0270_UPD_DET_TCU_CNTRS(ZF_LDC_LCE_ID,                                    
                              ZF_LDC_SEQ_NBR,                                   
                              ZF_VALIDITY,                                      
                              ZF_LDC_BUF_PTR);                                  
                                                                                
  (M_FS_DTC_TRF_LDC):                                                           
    Q_S0280_UPD_DET_DTC_CNTRS(ZF_VALIDITY,                                      
                              ZF_LDC_BUF_PTR);                                  
                                                                                
  ELSE                                                                          
  /* INVALID LDC TYPE */                                                        
    Q_S0010_CCDC_ERROR(M_ERC6_USER_REC, M_ERT0019_INC_MESS_DATA,                
                      12, 1142);                                                
ESAC;                                                                           
                                                                                
END P_GDXBYX_UPD_CCI_DETAIL_CTRS;                                               

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: P_GDXBYX_UPD_CCI_T26_CTRS  :    INTERFACE_PROC      */        
/*                                                                    */        
/*     PROGRAMMER: CHEN ZHANGYI                                       */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE: 22/07/99 */        
/*                                                                    */        
/*     CREATION DATE: 02/07/24                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION: INITIALISES RSMB POINTERS TO NULL.     */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_LCE_ID M_LCE_ID,                       */        
/*                      ZF_LDC_TYPE M_FMM_SELECTOR,                   */        
/*                      ZF_LDC_SEQ_NBR M_BYTE,                        */        
/*                      ZF_VALIDITY M_PM_DATA_VALIDITY,               */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                      NONE                                          */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0285_UPD_T26_CNTRS                         */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*     CALLED FROM:                                                   */        
/*                      NONE                                          */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
P_GDXBYX_UPD_CCI_T26_CTRS: INTERFACE_PROC(                                   
                                   ZF_LDC_LCE_ID  M_LCE_ID,                     
                                   ZF_LDC_TYPE    M_FMM_SELECTOR,               
                                   ZF_LDC_SEQ_NBR M_BYTE,                       
                                   ZF_VALIDITY    M_PM_DATA_VALIDITY,           
                                   ZF_LDC_BUF_PTR PTR);                         
                                                                                
                                                                                
CASE ZF_LDC_TYPE OF                                                             
  (M_FS_TCU_TRF_LDC):                                                           
    Q_S0285_UPD_T26_CNTRS(ZF_LDC_LCE_ID,                                    
                          ZF_LDC_SEQ_NBR,                                   
                          ZF_VALIDITY,                                      
                          ZF_LDC_BUF_PTR);
                                                                                
  ELSE                                                                          
  /* INVALID LDC TYPE */                                                        
    Q_S0010_CCDC_ERROR(M_ERC6_USER_REC, M_ERT0019_INC_MESS_DATA,                
                      13, 1408);                                                
ESAC;                                                                           
                                                                                
END P_GDXBYX_UPD_CCI_T26_CTRS;

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: P_GDXBYX_UPD_CCI_TP_CTRS  :    INTERFACE_PROC       */        
/*                                                                    */        
/*     PROGRAMMER: CHEN ZHANGYI                                       */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 29/10/04                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_LCE_ID M_LCE_ID,                       */        
/*                      ZF_LDC_TYPE M_FMM_SELECTOR,                   */        
/*                      ZF_LDC_SEQ_NBR M_BYTE,                        */        
/*                      ZF_VALIDITY M_PM_DATA_VALIDITY,               */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                      NONE                                          */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0285_UPD_T26_CNTRS                         */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*     CALLED FROM:                                                   */        
/*                      NONE                                          */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
P_GDXBYX_UPD_CCI_TP_CTRS: INTERFACE_PROC(                                   
                                   ZF_LDC_LCE_ID  M_LCE_ID,                     
                                  /* START : WIPRO B11 IP MR0 PKG1 */
                                   ZF_LDC_SEQ_NBR INT,
                                  /* END : WIPRO B11 IP MR0 PKG1 */ 
                                   ZF_VALIDITY    M_PM_DATA_VALIDITY,           
                                   ZF_LDC_BUF_PTR PTR);                         

DCL ZQ_ACT_IDX      INT;                                                                                
/* START : WIPRO B11 IP MR0 PKG1 */
IF (ZF_LDC_SEQ_NBR = 1)
THEN
/* END : WIPRO B11 IP MR0 PKG1 */
CASE ZF_LDC_LCE_ID OF
  (CM_FY32_TP_LCE_ID_SS7_MAIN):
    IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_NUMBER7, ZQ_ACT_IDX)
    THEN
      IF ZF_VALIDITY = E_DATA_INVALID
      THEN
        Q_S0442_UPD_TP_N7_INVALID(E_MT_NUMBER7);
      ELSE
        Q_S0475_UPD_T9_TP_N7(ZF_LDC_BUF_PTR);
      FI;
    FI;

    IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_SCCP, ZQ_ACT_IDX)
    THEN
      IF ZF_VALIDITY = E_DATA_INVALID
      THEN
        Q_S0442_UPD_TP_N7_INVALID(E_MT_SCCP);
      ELSE
        Q_S0482_UPD_T25_TP(ZF_LDC_BUF_PTR);
      FI;
    FI;

    IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_CELL_TRX_OVERVIEW_COUNTERS,
                                 ZQ_ACT_IDX)
    THEN
      IF ZF_VALIDITY = E_DATA_INVALID
      THEN
        Q_S0442_UPD_TP_N7_INVALID(E_MT_CELL_TRX_OVERVIEW_COUNTERS);
      ELSE
        Q_S0481_UPD_N7_TP_T110_5(ZF_LDC_BUF_PTR);
        /*START: CR36/275131*/ 
        Q_S0483_UPD_N7_TP_T110_6(ZF_LDC_BUF_PTR);
        /*END: CR36/275131*/ 
      FI;                                                                       
    FI;

   /*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE */
  (CM_FY32_N7SLH_LCEID_MAIN):
  IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_SCCP, ZQ_ACT_IDX)
    THEN
      IF ZF_VALIDITY = E_DATA_INVALID
      THEN
        Q_S0442_UPD_TP_N7_INVALID(E_MT_SCCP);
      ELSE
   /* START : WIPRO B11 IP MR0 PKG1 */
     /* Q_S0482_UPD_T25_TP(ZF_LDC_BUF_PTR); */
        Q_S0567_UPD_T25_SLH_IP(ZF_LDC_BUF_PTR);
   /* END : WIPRO B11 IP MR0 PKG1 */
      FI;
    FI;

    IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_CELL_TRX_OVERVIEW_COUNTERS,
                                 ZQ_ACT_IDX)
    THEN
      IF ZF_VALIDITY = E_DATA_INVALID
      THEN
        Q_S0442_UPD_TP_N7_INVALID(E_MT_CELL_TRX_OVERVIEW_COUNTERS);
      ELSE
   /* START : WIPRO B11 IP MR0 PKG1 */
     /* Q_S0481_UPD_N7_TP_T110_5(ZF_LDC_BUF_PTR); */
        Q_S0566_UPD_N7_SLH_IP_T110_5(ZF_LDC_BUF_PTR);
   /* END : WIPRO B11 IP MR0 PKG1 */
        /*START: CR36/275131*/ 
        Q_S0660_UPD_N7_SLH_IP_T110_6(ZF_LDC_BUF_PTR);
        /*END: CR36/275131*/ 
      FI;                                                                       
    FI;  

   /* START : WIPRO B11 IP MR0 PKG1 */
   /* SRINIVAS : NEW IP COUNTERS FROM SLH-IP */
   /* SRINIVAS: NOTE THAT THESE ARE FROM OMCP SLH_IP */
   IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_IP, ZQ_ACT_IDX)
    THEN
      IF ZF_VALIDITY = E_DATA_INVALID
      THEN
        Q_S0564_UPD_SLH_IP_INVALID();
      ELSE
        Q_S0563_UPD_T35_4_SLH_IP(ZF_LDC_BUF_PTR);
      FI;
    FI;

   /* END : WIPRO B11 IP MR0 PKG1 */ 

  (CM_FY32_TP_LCE_ID_MAIN):                                                           
    IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_LAPD, ZQ_ACT_IDX)
    THEN
            IF ZF_VALIDITY = E_DATA_INVALID
            THEN
            Q_S0650_UPD_TP_HDLC_INVALID();
            ELSE
            Q_S0655_UPD_T7_TP_HDLC(ZF_LDC_BUF_PTR);
            FI;
    FI;
 ELSE
  /* INVALID LDC TYPE */
    Q_S0010_CCDC_ERROR(M_ERC6_USER_REC, M_ERT0019_INC_MESS_DATA,
                      12, 1544);
ESAC;
/* START : WIPRO B11 IP MR0 PKG1 */
/* SRINIVAS: IP over E1 counters to be added here */
ELSIF (ZF_LDC_SEQ_NBR = 2) /* SRINIVAS : IPOverE1 COUNTERS */
THEN
CASE ZF_LDC_LCE_ID OF
  (CM_FY32_TP_LCE_ID_MAIN):
    IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_IP, ZQ_ACT_IDX)
    THEN
            IF ZF_VALIDITY = E_DATA_INVALID
            THEN
            Q_S0561_UPD_TP_IPOE1_INVALID();
            ELSE
            Q_S0562_UPD_T35_TP_IPOE1(ZF_LDC_BUF_PTR);
            FI;
    FI;
  ELSE                                                                          
  /* INVALID LDC TYPE */                                                        
    Q_S0010_CCDC_ERROR(M_ERC6_USER_REC, M_ERT0019_INC_MESS_DATA,                
                      12, 1544);                                                
ESAC;   
/* START : AUPOIP FEATURE*/       
/* START : 256 MGW IP Addresses */
ELSIF (ZF_LDC_SEQ_NBR = 3) OR (ZF_LDC_SEQ_NBR = 4) OR
      (ZF_LDC_SEQ_NBR = 5) OR (ZF_LDC_SEQ_NBR = 6) OR
      (ZF_LDC_SEQ_NBR = 7) OR (ZF_LDC_SEQ_NBR = 8) OR
      (ZF_LDC_SEQ_NBR = 9) 
/* END : 256 MGW IP Addresses */                      
/*AMITABH: ADDED FOR TPIP AUPOIP MGW & TC COUNTERS */
THEN
CASE ZF_LDC_LCE_ID OF
  (CM_FY32_TP_LCE_ID_MAIN):
    IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_IP, ZQ_ACT_IDX) OR
	Q_S0090_MEAS_TYPE_RUNNING(E_MT_CELL_TRX_OVERVIEW_COUNTERS,
                                 ZQ_ACT_IDX)
    THEN
            IF ZF_VALIDITY = E_DATA_INVALID
            THEN
            Q_S0950_UPD_TPIP_AUPOIP_INVALID(ZF_LDC_SEQ_NBR);
            ELSE
            Q_S0951_UPD_TPIP_AUPOIP_MGW_TC_CNTRS(ZF_LDC_BUF_PTR,
                                                ZF_LDC_SEQ_NBR);
            FI;
    FI;
  ELSE                                                                          
  /* INVALID LDC TYPE */                                                        
    Q_S0010_CCDC_ERROR(M_ERC6_USER_REC, M_ERT0019_INC_MESS_DATA,                
                      12, 1544);    
ESAC; 
/* END : AUPOIP FEATURE*/
ELSIF ((ZF_LDC_SEQ_NBR = 10) OR (ZF_LDC_SEQ_NBR = 11)) 
/*AMITABH: ADDED FROM TPIP AUPOIP BTS COUNTERS */
THEN
CASE ZF_LDC_LCE_ID OF
  (CM_FY32_TP_LCE_ID_MAIN):
    IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_IP, ZQ_ACT_IDX) OR
	Q_S0090_MEAS_TYPE_RUNNING(E_MT_CELL_TRX_OVERVIEW_COUNTERS,
                                 ZQ_ACT_IDX)
    THEN
            IF ZF_VALIDITY = E_DATA_INVALID
            THEN
            Q_S0950_UPD_TPIP_AUPOIP_INVALID(ZF_LDC_SEQ_NBR);
            ELSE
            Q_S0952_UPD_TPIP_AUPOIP_BTS_CNTRS(ZF_LDC_BUF_PTR,
		ZF_LDC_SEQ_NBR);
            FI;
    FI;
  ELSE                                                                          
  /* INVALID LDC TYPE */                                                        
    Q_S0010_CCDC_ERROR(M_ERC6_USER_REC, M_ERT0019_INC_MESS_DATA,                
                      12, 1544);                                                
ESAC;                                                                           
ELSE
 /* SRINIVAS: INVALID SEQUENCE NUMBER */
    Q_S0010_CCDC_ERROR(M_ERC6_USER_REC, M_ERT0019_INC_MESS_DATA,
                      12, 1544);
FI;                                                                                
/* END : WIPRO B11 IP MR0 PKG1 */

END P_GDXBYX_UPD_CCI_TP_CTRS;
/*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE*/

/* START : WIPRO B11 IP MR0 PKG1 */
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: P_GDXBYX_UPD_CCI_TCSL_MR_CTRS:   INTERFACE_PROC     */
/*                                                                    */
/*     PROGRAMMER: SRINIVAS                                           */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE: 29/10/04                                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LDC_LCE_ID M_LCE_ID,                       */
/*                      ZF_LDC_TYPE M_FMM_SELECTOR,                   */
/*                      ZF_LDC_SEQ_NBR M_BYTE,                        */
/*                      ZF_VALIDITY M_PM_DATA_VALIDITY,               */
/*                      ZF_LDC_BUF_PTR PTR                            */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      NONE                                          */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                      Q_S0285_UPD_T26_CNTRS                         */
/*                      Q_S0010_CCDC_ERROR                            */
/*     CALLED FROM:                                                   */
/*                      NONE                                          */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
P_GDXBYX_UPD_CCI_TCSL_MR_CTRS: INTERFACE_PROC(
                                   ZF_LDC_LCE_ID  M_LCE_ID,
                                   ZF_VALIDITY    M_PM_DATA_VALIDITY,
                                   ZF_LDC_BUF_PTR PTR);

DCL ZQ_ACT_IDX      INT;

CASE ZF_LDC_LCE_ID OF
/*Begin ER2364*/
  /*(CM_FY32_TP_LCE_ID_SS7_MAIN): *//* FILL TCSL MR LCE ID HERE */
  (CM_FY32_TCSLMR_LCEID_MAIN): /* FILL TCSL MR LCE ID HERE */
/*Begin ER2364*/
    IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_IP, ZQ_ACT_IDX)
    THEN
      IF ZF_VALIDITY = E_DATA_INVALID
      THEN
        Q_S0572_UPD_TCSL_IP_INVALID();
      ELSE
        Q_S0571_UPD_TCSL_IP(ZF_LDC_BUF_PTR);
      FI;
    FI;

ELSE
 /* SRINIVAS: INVALID SEQUENCE NUMBER */
    Q_S0010_CCDC_ERROR(M_ERC6_USER_REC, M_ERT0019_INC_MESS_DATA,
                      12, 1544);
ESAC;

END P_GDXBYX_UPD_CCI_TCSL_MR_CTRS;
/* END : WIPRO B11 IP MR0 PKG1 */
/* START : WIPRO B11 IP MR0 PKG1 */
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */

/* BEGIN: IURG INTERFACE FEATURE */
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: P_GDXBYX_UPD_IURG_CTRS:          INTERFACE_PROC     */
/*                                                                    */
/*     PROGRAMMER: SRINIVAS                                           */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE:                                                 */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LDC_LCE_ID M_LCE_ID,                       */
/*                      ZF_LDC_TYPE M_FMM_SELECTOR,                   */
/*                      ZF_LDC_SEQ_NBR M_BYTE,                        */
/*                      ZF_VALIDITY M_PM_DATA_VALIDITY,               */
/*                      ZF_LDC_BUF_PTR PTR                            */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      NONE                                          */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                                                                    */
/*                      Q_S0010_CCDC_ERROR                            */
/*     CALLED FROM:                                                   */
/*                      NONE                                          */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
P_GDXBYX_UPD_IURG_CTRS: INTERFACE_PROC(
                                   ZF_LDC_LCE_ID  M_LCE_ID,
                                   ZF_SEQ_NBR  INT,
                                   ZF_VALIDITY    M_PM_DATA_VALIDITY,
                                   ZF_LDC_BUF_PTR PTR);

DCL ZQ_ACT_IDX      INT;

CASE ZF_LDC_LCE_ID OF
  (CM_FY32_M3UALM_LCEID_MAIN): 

    IF Q_S0090_MEAS_TYPE_RUNNING
              (E_MT_IURG, ZQ_ACT_IDX)
    THEN
      IF ZF_VALIDITY = E_DATA_INVALID
      THEN
	    /* For counters MC1301 to MC1306 */					  
								  
		Q_S0584_UPD_IURG_T36_INVALID(); 
		
		/* For MC1307 to MC1309 */
	/*START : COMMENTED FOR IURG CELL LEVEL COUNTER IMPACT*/
		/* Q_S0589_UPD_IURG_T110_7_INVALID(); */
	/*END : IURG CELL LEVEL COUNTERS*/
      ELSE
	    /* For counters MC1301 to MC1306 */	
   	  Q_S0583_UPD_IURG_T36_CTRS(ZF_LDC_BUF_PTR);
	
	/* For MC1307 to MC1309 */
	/*START : COMMENTED FOR IURG CELL LEVEL COUNTER IMPACT*/
      /*Q_S0588_UPD_IURG_T110_7_CTRS(ZF_LDC_BUF_PTR);*/
	/*END : IURG CELL LEVEL IMPACT*/
      FI;
      
    FI;

ELSE

    Q_S0010_CCDC_ERROR(M_ERC6_USER_REC, M_ERT0019_INC_MESS_DATA,
                      13, 2107);
ESAC;

END P_GDXBYX_UPD_IURG_CTRS;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0584_UPD_IURG_T36_INVALID                        */
/*                                                                    */
/*     PROGRAMMER: SRINIVAS                                           */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE:                                                 */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      NONE                                          */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                                                                    */
/*     CALLED FROM:                                                   */
/*                      NONE                                          */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0584_UPD_IURG_T36_INVALID: PROC();
DCL ZQ_RNC_IDX INT;
DCL ZQ_I INT;
DCL ZQ_J M_TYPE_36_CTRS_0;

 DO FOR ZQ_I := 1 TO M_MAX_RNC;
  DO WITH Z_R_RNC_MGT_PTR -> ZM_R_RNC_MGT(ZQ_I);
       ZQ_RNC_IDX := D_RNC_SBL;
 
  IF(D_RNC_MST  /= E_MS_NEQ)
   THEN
       DO WITH Z_T36_PTR ->(ZQ_I);
        B_RNC_IDX := ZQ_RNC_IDX;
        DO WITH B_CTRS_PT0_MT_36;
         DO FOR ZQ_J := E_MT_36_CTR_C1301 TO E_MT_36_CTR_C1306;
           
         B_MC1301_TO_MC1306(ZQ_J).B_LOW := ZS_FFFE;
		 B_MC1301_TO_MC1306(ZQ_J).B_HIGH := ZS_FFFF;
		 
		 OD;	  
	  	OD;	  
	   OD;
      FI;
  OD;
 OD;	

END Q_S0584_UPD_IURG_T36_INVALID;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0589_UPD_IURG_T110_7_INVALID                     */
/*                                                                    */
/*     PROGRAMMER: SRINIVAS                                           */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE:                                                 */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      NONE                                          */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                                                                    */
/*     CALLED FROM:                                                   */
/*                      NONE                                          */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
 Q_S0589_UPD_IURG_T110_7_INVALID: PROC();

 DCL ZQ_CELL_IDX INT;
 DCL ZQ_I RANGE(E_MT_110_CTR_MC1307:E_MT_110_CTR_MC1309);

  DO FOR ZQ_CELL_IDX := 1 TO CM_FY32_MAX_CELLS_PER_BSC;
   DO WITH Z_R_BTS_TEL_PTR -> ZM_R_BTS_TEL(ZQ_CELL_IDX);                       
    IF D_BTS_TEL /= E_MS_NEQ                                                    
     THEN  
	 
     IF (ZQ_CELL_IDX <= CM_FY32_MAX_CELLS_PER_BSC/2)
      THEN
       DO WITH Z_T110_7_PTR->(ZM_CELL_INDEX_VALUE(ZQ_CELL_IDX));
	   
         B_CELL_ID  := ZQ_CELL_IDX;
         
	    DO WITH B_CTRS_PT7_MT_110;
	     DO FOR  ZQ_I := E_MT_110_CTR_MC1307 TO E_MT_110_CTR_MC1309;
		 
	        B_MC191_TO_MC975(ZQ_I).B_LOW  := ZS_FFFE;
                B_MC191_TO_MC975(ZQ_I).B_HIGH := ZS_FFFF;
	     OD;
	    OD;
       OD;
     ELSE
     
       DO WITH Z_T110_7_2_PTR->(ZM_CELL_INDEX_VALUE(ZQ_CELL_IDX));
  
         B_CELL_ID  := ZQ_CELL_IDX;
         
		DO WITH B_CTRS_PT7_MT_110;
  	 	 DO FOR  ZQ_I := E_MT_110_CTR_MC1307 TO E_MT_110_CTR_MC1309;
		 
		  B_MC191_TO_MC975(ZQ_I).B_LOW  := ZS_FFFE;
                  B_MC191_TO_MC975(ZQ_I).B_HIGH := ZS_FFFF;
	         OD;
	        OD;
       OD;
     FI;
    FI;
   OD;
  OD;

END Q_S0589_UPD_IURG_T110_7_INVALID;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0583_UPD_IURG_T36_CTRS                           */
/*                                                                    */
/*     PROGRAMMER: SRINIVAS                                           */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE:                                                 */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      NONE                                          */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                                                                    */
/*     CALLED FROM:                                                   */
/*                      NONE                                          */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0583_UPD_IURG_T36_CTRS: PROC(ZF_LDC_BUF_PTR PTR);

DCL ZQ_NBR_RNC INT;
DCL ZQ_I INT;
DCL ZQ_J INT;
DCL ZQ_RNC_IDX INT;
DCL ZQ_FOUND BOOL;

ZQ_FOUND:=FALSE;

ZQ_NBR_RNC := ZF_LDC_BUF_PTR -> M_M3UALM_IURG_PM_BUFFER.
                            B_M3UALM_IURG_PM_CNTRS.B_NBR_RNC;

  IF ZQ_NBR_RNC > CM_FY32_MAX_RNC_PER_BSC OR
      ZQ_NBR_RNC < 0
    THEN 
    /* OUT OF RANGE */
     ZQ_NBR_RNC := 0; 
     Q_S0010_CCDC_ERROR(M_ERC6_USER_REC,
                       M_ERT0019_INC_MESS_DATA, 72, 1366);
  FI;

 DO WITH ZF_LDC_BUF_PTR -> M_M3UALM_IURG_PM_BUFFER
                             .B_M3UALM_IURG_PM_CNTRS;
  DO FOR ZQ_I := 1 TO ZQ_NBR_RNC;
   ZQ_RNC_IDX := B_IURG_RNC_BSC_CNTRS_ARR(ZQ_I).B_RNC_SBL;

   ZQ_FOUND:=FALSE;

   IF ZQ_RNC_IDX < CM_FY32_MAX_RNC_PER_BSC OR
     ZQ_RNC_IDX > 0 
   THEN
   
   DO WITH B_IURG_RNC_BSC_CNTRS_ARR(ZQ_I);
    DO FOR ZQ_J := 1 TO M_MAX_RNC WHILE ZQ_FOUND=FALSE; 
 
    DO WITH Z_R_RNC_MGT_PTR -> ZM_R_RNC_MGT(ZQ_J);
   
    IF (D_RNC_MST /= E_MS_NEQ)
           AND (D_RNC_SBL = ZQ_RNC_IDX)
	THEN
             ZQ_FOUND := TRUE;	
	      DO WITH Z_T36_PTR ->(ZQ_J);
 
          B_RNC_IDX := ZQ_RNC_IDX;
		  
		  DO WITH B_IURG_RNC_BSC_CNTRS_ARR(ZQ_I);
          DO WITH B_CTRS_PT0_MT_36;
		  
           Q_S0060_ADD_LONG_INT(                                               
           B_IURG_SCCP_IP_CNTRS(E_MC1301_NB_IP_BYT_SENT),                           
           B_MC1301_TO_MC1306(E_MT_36_CTR_C1301));
		   
           Q_S0060_ADD_LONG_INT(                                               
           B_IURG_SCCP_IP_CNTRS(E_MC1302_NB_IP_PKT_SENT),                           
           B_MC1301_TO_MC1306(E_MT_36_CTR_C1302));

           Q_S0060_ADD_LONG_INT(                                               
           B_IURG_SCCP_IP_CNTRS(E_MC1303_NB_IP_PKT_RESENT),                           
           B_MC1301_TO_MC1306(E_MT_36_CTR_C1303));
		   
           Q_S0060_ADD_LONG_INT(                                               
           B_IURG_SCCP_IP_CNTRS(E_MC1304_NB_HIGH_BYT_MIN),                           
           B_MC1301_TO_MC1306(E_MT_36_CTR_C1304));

           Q_S0060_ADD_LONG_INT(                                               
           B_IURG_SCCP_IP_CNTRS(E_MC1305_NB_CON_REQ_REC),                           
           B_MC1301_TO_MC1306(E_MT_36_CTR_C1305));
		   
           Q_S0060_ADD_LONG_INT(                                               
           B_IURG_SCCP_IP_CNTRS(E_MC1306_NB_CON_CONF_SENT),                           
           B_MC1301_TO_MC1306(E_MT_36_CTR_C1306));
	  OD;
         OD;
	OD;
       FI;
     OD;
    OD;
    OD;
    FI;
   OD;
  OD;
  
END Q_S0583_UPD_IURG_T36_CTRS;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0588_UPD_IURG_T110_7_CTRS                        */
/*                                                                    */
/*     PROGRAMMER: SRINIVAS                                           */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE:                                                 */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      NONE                                          */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                                                                    */
/*     CALLED FROM:                                                   */
/*                      NONE                                          */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/  
/*START : COMMENTED FOR IURG CELL LEVEL COUNTERS*/
/*Q_S0588_UPD_IURG_T110_7_CTRS: PROC(ZF_LDC_BUF_PTR PTR);

DCL ZQ_NBR_CELLS INT,
    ZQ_CI        M_CELL_IDX;

 DO WITH ZF_LDC_BUF_PTR -> M_M3UALM_IURG_PM_BUFFER
                            .B_M3UALM_IURG_PM_CNTRS;
   ZQ_NBR_CELLS := B_NBR_CELLS;
 OD;
 
 DO WHILE ZQ_NBR_CELLS /= 0;
  DO WITH ZF_LDC_BUF_PTR -> M_M3UALM_IURG_PM_BUFFER
                            .B_M3UALM_IURG_PM_CNTRS;
    DO WITH B_IURG_CELL_CNTRS_ARR(ZQ_NBR_CELLS);
      ZQ_CI := B_CELL_IDX;
        IF (ZQ_CI <= CM_FY32_MAX_CELLS_PER_BSC) AND
         (ZQ_CI >  0)
		THEN
        IF (ZQ_CI <= CM_FY32_MAX_CELLS_PER_BSC/2)
        THEN 		
        
	   DO WITH Z_T110_7_PTR->(ZM_CELL_INDEX_VALUE(ZQ_CI));
		B_CELL_ID := ZQ_CI;
        DO WITH B_CTRS_PT7_MT_110;
		
          Q_S0060_ADD_LONG_INT(B_IURG_CTRS
               (E_MC1307_NB_EH_REQ_REC),
                 B_MC191_TO_MC975(E_MT_110_CTR_MC1307));
				 
          Q_S0060_ADD_LONG_INT(B_IURG_CTRS
               (E_MC1308_NB_EH_RESP_SENT),
                 B_MC191_TO_MC975(E_MT_110_CTR_MC1308));
				 
          Q_S0060_ADD_LONG_INT(B_IURG_CTRS
               (E_MC1309_NB_EH_FAIL_SENT),
                 B_MC191_TO_MC975(E_MT_110_CTR_MC1309));
        OD;
       OD;		
      ELSE
	   DO WITH Z_T110_7_2_PTR->(ZM_CELL_INDEX_VALUE(ZQ_CI));
		B_CELL_ID := ZQ_CI;
        DO WITH B_CTRS_PT7_MT_110;
		
          Q_S0060_ADD_LONG_INT(B_IURG_CTRS
               (E_MC1307_NB_EH_REQ_REC),
                 B_MC191_TO_MC975(E_MT_110_CTR_MC1307));
				 
          Q_S0060_ADD_LONG_INT(B_IURG_CTRS
               (E_MC1308_NB_EH_RESP_SENT),
                 B_MC191_TO_MC975(E_MT_110_CTR_MC1308));
				 
          Q_S0060_ADD_LONG_INT(B_IURG_CTRS
               (E_MC1309_NB_EH_FAIL_SENT),
                 B_MC191_TO_MC975(E_MT_110_CTR_MC1309));
        OD;
       OD;		  
	  FI;
	 FI;  
	 OD;
    OD;
      ZQ_NBR_CELLS := ZQ_NBR_CELLS - 1;
 OD;

END	  Q_S0588_UPD_IURG_T110_7_CTRS;*/
/* END: IURG INTERFACE FEATURE */
/* END: COMMENTED FOR IURG CELL LEVEL COUNTERS*/
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: P_GDXBYX_UPD_ASIG_CTRS:          INTERFACE_PROC     */
/*                                                                    */
/*     PROGRAMMER:                                                    */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE:                                                 */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LDC_LCE_ID M_LCE_ID,                       */
/*                      ZF_LDC_TYPE M_FMM_SELECTOR,                   */
/*                      ZF_LDC_SEQ_NBR M_BYTE,                        */
/*                      ZF_VALIDITY M_PM_DATA_VALIDITY,               */
/*                      ZF_LDC_BUF_PTR PTR                            */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                      NONE                                          */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                                                                    */
/*                      Q_S0010_CCDC_ERROR                            */
/*     CALLED FROM:                                                   */
/*                      NONE                                          */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
P_GDXBYX_UPD_ASIG_CTRS: INTERFACE_PROC(
                                   ZF_LDC_LCE_ID  M_LCE_ID,
                                   ZF_SEQ_NBR  INT,
                                   ZF_VALIDITY    M_PM_DATA_VALIDITY,
                                   ZF_LDC_BUF_PTR PTR);

DCL ZQ_ACT_IDX      INT;

CASE ZF_LDC_LCE_ID OF
  (CM_FY32_M3UALM_LCEID_MAIN): 

    IF Q_S0090_MEAS_TYPE_RUNNING
              (E_MT_CELL_TRX_OVERVIEW_COUNTERS, ZQ_ACT_IDX)
    THEN
      IF ZF_VALIDITY = E_DATA_INVALID
      THEN
        Q_S0572_UPD_M3UA_LM_INVALID();
      ELSE
        Q_S0571_UPD_M3UA_LM(ZF_LDC_BUF_PTR);
        /*START: CR36/275131*/
        Q_S0573_UPD_M3UA_LM_PAG(ZF_LDC_BUF_PTR);
        /*END: CR36/275131*/
      FI;
      Q_S0443_UPD_TP_N7_ZEROS(E_MT_CELL_TRX_OVERVIEW_COUNTERS);
    FI;
    /*CR20/237798*/
    IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_NUMBER7, ZQ_ACT_IDX)
    THEN
       Q_S4444_UPD_TC_MTP2_ZEROS();
    FI;
    IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_IP, ZQ_ACT_IDX)
    THEN
       Q_S0565_UPD_SLH_IP_ZEROS();
    FI;   
    IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_SCCP, ZQ_ACT_IDX)
    THEN
       Q_S0443_UPD_TP_N7_ZEROS(E_MT_SCCP);
    FI;   
    /*CR20/237798*/
ELSE
 /* SRINIVAS: INVALID SEQUENCE NUMBER */
    Q_S0010_CCDC_ERROR(M_ERC6_USER_REC, M_ERT0019_INC_MESS_DATA,
                      12, 1544);
ESAC;

END P_GDXBYX_UPD_ASIG_CTRS;
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0571_UPD_M3UA_LM                                 */
/*                                                                    */
/*     PROGRAMMER:                                                    */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE:                                                 */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*       UPDATE TYPE 110 M3UA LM   COUNTERS                           */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LDC_BUF_PTR PTR                            */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                                                                    */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                                                                    */
/*                                                                    */
/*     CALLED FROM:                                                   */
/*                                                                    */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0571_UPD_M3UA_LM: PROC(ZF_LDC_BUF_PTR PTR);

DCL ZQ_NBR_MSC INT;
DCL ZQ_I INT;
DCL ZQ_MSC_IDX INT;
/*ADDED*/
DCL ZQ_J INT;
/*ADDED*/
ZQ_NBR_MSC := ZF_LDC_BUF_PTR -> 
                         M_M3UALM_PM_BUFFER.B_M3UALM_PM_CNTRS
                         .B_NBR_MSC;
IF ZQ_NBR_MSC > CM_FY32_MAX_MSC_PER_BSC OR
     ZQ_NBR_MSC < 0
THEN 
    /* OUT OF RANGE */
  ZQ_NBR_MSC := 0; 
  Q_S0010_CCDC_ERROR(M_ERC6_USER_REC,
                     M_ERT0019_INC_MESS_DATA, 71, 0194);
FI;

DO WITH ZF_LDC_BUF_PTR -> M_M3UALM_PM_BUFFER.B_M3UALM_PM_CNTRS;
 DO FOR ZQ_I := 1 TO ZQ_NBR_MSC;
   ZQ_MSC_IDX := B_M3UA_ASIG_CNTRS(ZQ_I-1).B_MSC_SBL;
   IF ZQ_MSC_IDX > CM_FY32_MAX_MSC_PER_BSC OR
     ZQ_MSC_IDX < 0 
   THEN
    /*DO NOTHING*/
   ELSE 
   /*ADDED*/
   DO WITH B_M3UA_ASIG_CNTRS(ZQ_I-1);
   MSC_M3UA_LOOP:
    DO FOR ZQ_J := 1 TO M_MAX_MSC;
   /*ADDED*/    
    DO WITH Z_R_MSC_MGT_PTR -> ZM_R_MSC_MGT(ZQ_J);
/*FR250253*/
/*  IF (D_MSC_MST = E_MS_IT OR D_MSC_MST = E_MS_FIT)*/ 
    IF (D_MSC_MST /= E_MS_NEQ)
/*FR250253*/
    /*ADDED*/
    AND (D_MSC_SBL = ZQ_MSC_IDX)
    /*ADDED*/    
    THEN
    /*ADDED*/    
      /*DO WITH Z_T110_8_PTR ->(ZQ_MSC_IDX);*/
      DO WITH Z_T110_8_PTR ->(ZQ_J);
    /*ADDED*/      
       B_MSC_IDX := ZQ_MSC_IDX;
       DO WITH B_M3UA_ASIG_CNTRS(ZQ_I-1); 
        DO WITH B_CTRS_PT8_MT_110;
          Q_S0040_ADD_INT_TO_INT(
           B_ASIG_CNTRS(E_MC1101_NB_ASPUP_TX),
           B_MC1101_TO_MC1108(E_MT_110_CTR_MC1101));
           
           Q_S0040_ADD_INT_TO_INT(
           B_ASIG_CNTRS(E_MC1102_NB_ASPUP_RX),
           B_MC1101_TO_MC1108(E_MT_110_CTR_MC1102));

           Q_S0040_ADD_INT_TO_INT(
           B_ASIG_CNTRS(E_MC1103_NB_ASPDOWN_TX),
           B_MC1101_TO_MC1108(E_MT_110_CTR_MC1103));

           Q_S0040_ADD_INT_TO_INT(
           B_ASIG_CNTRS(E_MC1104_NB_ASPDOWN_RX),
           B_MC1101_TO_MC1108(E_MT_110_CTR_MC1104));

           Q_S0040_ADD_INT_TO_INT(
           B_ASIG_CNTRS(E_MC1105_NB_ASPACT_TX),
           B_MC1101_TO_MC1108(E_MT_110_CTR_MC1105));

           Q_S0040_ADD_INT_TO_INT(
           B_ASIG_CNTRS(E_MC1106_NB_ASPACT_RX),
           B_MC1101_TO_MC1108(E_MT_110_CTR_MC1106));

           Q_S0040_ADD_INT_TO_INT(
           B_ASIG_CNTRS(E_MC1107_NB_ASPINACT_TX),
           B_MC1101_TO_MC1108(E_MT_110_CTR_MC1107));

           Q_S0040_ADD_INT_TO_INT(
           B_ASIG_CNTRS(E_MC1108_NB_ASPINACT_RX),
           B_MC1101_TO_MC1108(E_MT_110_CTR_MC1108));          
          
           Q_S0060_ADD_LONG_INT(
           B_SCCP_IP_CNTRS(E_MC1109_SS7_IP_BYT_SENT),
           B_MC1109_TO_MC1207(E_MT_110_CTR_MC1109));
           
           Q_S0060_ADD_LONG_INT(
           B_SCCP_IP_CNTRS(E_MC1110_SS7_IP_PKT_SENT),
           B_MC1109_TO_MC1207(E_MT_110_CTR_MC1110));
           
           Q_S0060_ADD_LONG_INT(
           B_SCCP_IP_CNTRS(E_MC1111_SS7_IP_PKT_RESENT),
           B_MC1109_TO_MC1207(E_MT_110_CTR_MC1111));

           /* Start CR 01002592 */ 
           /* Merged from Debug branch */
           /*Q_S0060_ADD_LONG_INT(
           B_SCCP_IP_CNTRS(E_MC1112_SS7_HIGH_BYT_MIN),
           B_MC1109_TO_MC1207(E_MT_110_CTR_MC1112));*/
           
	   Q_CALC_MAX_LONG_INT_TO_DPVAL(
           B_SCCP_IP_CNTRS(E_MC1112_SS7_HIGH_BYT_MIN),
           B_MC1109_TO_MC1207(E_MT_110_CTR_MC1112)); 
   
	   /* End CR 01002592 */ 

           Q_S0060_ADD_LONG_INT(
           B_SCCP_IP_CNTRS(E_MC1114_UNIT_DATA_SENT),
           B_MC1109_TO_MC1207(E_MT_110_CTR_MC1114));
           
           Q_S0060_ADD_LONG_INT(
           B_SCCP_IP_CNTRS(E_MC1115_UNIT_DATA_REC),
           B_MC1109_TO_MC1207(E_MT_110_CTR_MC1115)); 
           
           Q_S0060_ADD_LONG_INT(
           B_SCCP_IP_CNTRS(E_MC1116_CON_REQ_SENT),
           B_MC1109_TO_MC1207(E_MT_110_CTR_MC1116));
           
           Q_S0060_ADD_LONG_INT(
           B_SCCP_IP_CNTRS(E_MC1117_CON_REQ_REC),
           B_MC1109_TO_MC1207(E_MT_110_CTR_MC1117));
           
           Q_S0060_ADD_LONG_INT(
           B_SCCP_IP_CNTRS(E_MC1118_CON_CONF_SENT),
           B_MC1109_TO_MC1207(E_MT_110_CTR_MC1118));
           
           Q_S0060_ADD_LONG_INT(
           B_SCCP_IP_CNTRS(E_MC1119_CON_CONF_REC),
           B_MC1109_TO_MC1207(E_MT_110_CTR_MC1119));
           
           Q_S0060_ADD_LONG_INT(
           B_SCCP_IP_CNTRS(E_MC1120_CON_REF_SENT),
           B_MC1109_TO_MC1207(E_MT_110_CTR_MC1120));
           
           Q_S0060_ADD_LONG_INT(
           B_SCCP_IP_CNTRS(E_MC1121_CON_REF_REC),
           B_MC1109_TO_MC1207(E_MT_110_CTR_MC1121));                                                                                                             
        OD;
       OD; 
      OD;
     /*ADDED*/  
     EXIT MSC_M3UA_LOOP;
     /*ADDED*/ 
     FI;
    OD;
   /*ADDED*/  
    OD;
   OD;
   /*ADDED*/     
   FI; 
 OD;  
OD;                                
END Q_S0571_UPD_M3UA_LM;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0572_UPD_M3UA_LM_INVALID                         */
/*                                                                    */
/*     PROGRAMMER:                                                    */
/*                                                                    */
/*                LAST MODIFIED BY:                    DATE:          */
/*                                                                    */
/*     CREATION DATE:                                                 */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*     GLOBAL DATA:                                                   */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      ZF_LDC_BUF_PTR PTR                            */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */
/*                                                                    */
/*     CONTAINING PROCEDURES:                                         */
/*                      NONE                                          */
/*     RECEIVED MESSAGES:                                             */
/*                      NONE                                          */
/*     SENT MESSAGES:                                                 */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                                                                    */
/*                                                                    */
/*     CALLED FROM:                                                   */
/*                                                                    */
/*     PRIMITIVES CALLED:                                             */
/*                      NONE                                          */
/*     DATABASE ACCESS:                                               */
/*                      NONE                                          */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0572_UPD_M3UA_LM_INVALID: PROC();
DCL ZQ_NBR_MSC INT;
DCL ZQ_I INT;
DCL ZQ_MSC_IDX INT;
DCL ZQ_J RANGE (E_MT_110_CTR_MC1101:E_MT_110_CTR_MC1121);
DCL ZQ_TMP_CTR INT;
ZQ_TMP_CTR := ZS_FFFF;

DO FOR ZQ_I := 1 TO M_MAX_MSC;
 DO WITH Z_R_MSC_MGT_PTR -> ZM_R_MSC_MGT(ZQ_I);
   /*ZQ_MSC_IDX := ZQ_I;*/
   ZQ_MSC_IDX := D_MSC_SBL;
/*FR250253*/
/* IF D_MSC_MST = E_MS_IT OR D_MSC_MST = E_MS_FIT THEN*/ 
   IF (D_MSC_MST /= E_MS_NEQ) THEN
/*FR250253*/
      DO WITH Z_T110_8_PTR ->(ZQ_I);
        B_MSC_IDX := ZQ_MSC_IDX;
        DO WITH B_CTRS_PT8_MT_110;
         DO FOR ZQ_J := E_MT_110_CTR_MC1101 TO E_MT_110_CTR_MC1121;
           CASE (ZQ_J) OF
             (E_MT_110_CTR_MC1101:E_MT_110_CTR_MC1108):
              Q_S0040_ADD_INT_TO_INT(
              ZQ_TMP_CTR,
              B_MC1101_TO_MC1108(ZQ_J));
             (E_MT_110_CTR_MC1109:E_MT_110_CTR_MC1112):
              Q_S0080_ADD_INT_TO_DPVAL(
              ZQ_TMP_CTR,
              B_MC1109_TO_MC1207(ZQ_J));
             (E_MT_110_CTR_MC1113A:E_MT_110_CTR_MC1113B):

              /*DO NOTHING*/
             (E_MT_110_CTR_MC1114:E_MT_110_CTR_MC1121):
              Q_S0080_ADD_INT_TO_DPVAL(
              ZQ_TMP_CTR,
              B_MC1109_TO_MC1207(ZQ_J));              
           ELSE
           ESAC;   
         OD;       
        OD;
     OD;
     /*START: CR36/275131*/
     DO WITH Z_T110_6_PTR->;
       DO WITH B_CTRS_PT6_MT_110;
         B_MC940.B_LOW  := ZS_FFFE;
         B_MC940.B_HIGH := ZS_FFFF;
       OD;
     OD;
     /*END: CR36/275131*/
   FI;  
 OD; 
OD;
END Q_S0572_UPD_M3UA_LM_INVALID;
/* BEGIN: ADD-WIPRO-B11-MR0-PKG2-CHANGE */
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S6638_UPD_T35_STD_TCHRM :        INTERFACE_PROC   */        
/*                                                                    */        
/*     PROGRAMMER: MALA                                               */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 26/05/06                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_LCE_ID M_LCE_ID,                       */        
/*                      ZF_LDC_TYPE M_FMM_SELECTOR,                   */        
/*                      ZF_LDC_SEQ_NBR M_BYTE,                        */        
/*                      ZF_VALIDITY M_PM_DATA_VALIDITY,               */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                      NONE                                          */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0285_UPD_T26_CNTRS                         */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*     CALLED FROM:                                                   */        
/*                      NONE                                          */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S6638_UPD_T35_STD_TCHRM:PROC (ZF_LDC_BUF_PTR   PTR,                      
                          ZF_LDC_SEQ_NBR   M_BYTE,                        
                          ZF_IS_TEL_DTC  BOOL            
                          );
                                
IF (ZF_LDC_SEQ_NBR > 5 AND (ZF_IS_TEL_DTC))
THEN
    Q_S4475_UPD_T35_IP_CELL_CONG(ZF_LDC_BUF_PTR);
        
ELSIF (ZF_LDC_SEQ_NBR = 4 AND (ZF_IS_TEL_DTC))
THEN
    Q_S4475_UPD_T35_IP_BTS_CONG(ZF_LDC_BUF_PTR);
        
ELSIF (ZF_LDC_SEQ_NBR = 3 AND NOT (ZF_IS_TEL_DTC))
THEN
  
   Q_S4475_UPD_T35_ATERMUX(ZF_LDC_BUF_PTR);
FI;
END Q_S6638_UPD_T35_STD_TCHRM;
/* BEGIN: ADD-WIPRO-B11-MR0-PKG1-CHANGE */
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_INIT_GLOB_BTS_BUFFER                              */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                                                                    */
/*     CALLED FROM:                                                   */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_INIT_GLOB_BTS_BUFFER : PROC ();                          

DCL ZQ_J                 INT;
DCL ZQ_I                 INT;

DO FOR ZQ_J :=1 TO CM_FY32_MAX_BTS_PER_BSC;
  DO WITH Z_BTS_IP_LAPD_CTRS(ZQ_J);
       ZB_ACTIVE := FALSE;
       ZB_BTS_IDX := ZM_BTS_INDEX_VALUE(ZQ_J);
       ZB_REAL_PER := 0;
       ZB_IP25A.B_LOW :=0;
       ZB_IP25A.B_HIGH :=0;
       ZB_IP25B.B_LOW :=0;
       ZB_IP25B.B_HIGH :=0;
       DO FOR ZQ_I := 1 TO 15;
         ZB_IP25C(ZQ_I).B_LOW := 0;
         ZB_IP25C(ZQ_I).B_HIGH := 0;
       OD;
  OD;
OD;
END Q_INIT_GLOB_BTS_BUFFER;
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_FILL_GLOB_BTS_BUFFER                              */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                                                                    */
/*     CALLED FROM:                                                   */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_FILL_GLOB_BTS_BUFFER : PROC (ZF_LDC_BUF_PTR PTR);

DCL ZQ_NBR_BTS INT;
DCL ZQ_IP25C_IDX INT;

DO WITH ZF_LDC_BUF_PTR -> CM_FY32_TCU_STD_CTRS_AREA;
 ZQ_NBR_BTS := B_NBR_BTS;
 DO WHILE ZQ_NBR_BTS /= 0;
  DO WITH B_TCU_BTS_CNTRS(ZQ_NBR_BTS);
   IF (B_BTS_ID <= CM_FY32_MAX_BTS_PER_BSC) AND
      (B_BTS_ID > 0) THEN
    DO WITH Z_BTS_IP_LAPD_CTRS(B_BTS_ID);
      IF NOT ZB_ACTIVE THEN
        ZB_ACTIVE := TRUE;
        ZB_BTS_IDX := B_BTS_ID;
        ZB_REAL_PER := B_SMPL_PER;
        ZB_IP25A := B_IP25A_BTS_COUNTER;
        ZB_IP25B := B_IP25B_BTS_COUNTER;
        DO FOR ZQ_IP25C_IDX := 1 TO 15;
         ZB_IP25C(ZQ_IP25C_IDX) :=
               B_IP25C_BTS_COUNTERS(ZQ_IP25C_IDX);
        OD;
      ELSE
        Q_S0050_AVG_OR_REPL_INT(
                      B_SMPL_PER,
                      ZB_REAL_PER,
                      ZS_AVG);
       Q_S0020_ADD_DP_VALUES(B_IP25A_BTS_COUNTER
                                ,ZB_IP25A);
       Q_S0020_ADD_DP_VALUES(B_IP25B_BTS_COUNTER
                                ,ZB_IP25B);
       DO FOR ZQ_IP25C_IDX := 1 TO 15;
         Q_S0020_ADD_DP_VALUES(
                    B_IP25C_BTS_COUNTERS(ZQ_IP25C_IDX)
                        ,ZB_IP25C(ZQ_IP25C_IDX));
       OD;               
      FI;
    OD;
   FI; 
  OD;  
  ZQ_NBR_BTS := ZQ_NBR_BTS - 1; 
 OD;
OD;
END Q_FILL_GLOB_BTS_BUFFER;
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_FILL_GLOB_BTS_BUFFER_INVALID                      */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                                                                    */
/*     CALLED FROM:                                                   */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_FILL_GLOB_BTS_BUFFER_INVALID : PROC (ZF_LCE_ID M_LCE_ID);

DCL ZQ_NBR_I M_RSL_IDX;
DCL ZQ_NBR_J M_OML_IDX;
DCL ZQ_IP25C_IDX INT;

DCL ZQ_LOC_I INT;
DCL ZQ_FOUND BOOL;

DO FOR ZQ_NBR_I := 1 TO CM_FY32_MAX_TRX_PER_BSC;
 DO WITH Z_R_RSL_LNK_PTR -> ZM_R_RSL_LNK(ZQ_NBR_I); 
  IF D_TCU_ID = ZF_LCE_ID THEN
   IF (D_BEQ_NBR <= CM_FY32_MAX_BTS_PER_BSC) AND
      (D_BEQ_NBR > 0) THEN
    IF ( Q_S0455_CHK_IF_IP_BTS(D_BEQ_NBR)) THEN  
     DO WITH Z_BTS_IP_LAPD_CTRS(D_BEQ_NBR);
        ZB_ACTIVE := TRUE;
        ZB_BTS_IDX := D_BEQ_NBR;
        ZB_REAL_PER := 0;
        ZB_IP25A.B_LOW := ZS_FFFE;
        ZB_IP25A.B_HIGH := ZS_FFFF;
        ZB_IP25B.B_LOW := ZS_FFFE;
        ZB_IP25B.B_HIGH := ZS_FFFF;
        DO FOR ZQ_IP25C_IDX := 1 TO 15;
         ZB_IP25C(ZQ_IP25C_IDX).B_LOW := ZS_FFFE;
         ZB_IP25C(ZQ_IP25C_IDX).B_HIGH := ZS_FFFF;      
        OD;
     OD;
    FI; 
   FI;
  FI;      
 OD;     
OD;   
DO FOR ZQ_NBR_J := 1 TO M_MAX_BTS_PER_BSC;
 DO WITH Z_R_OML_LNK_PTR -> ZM_R_OML_LNK(ZQ_NBR_J);
  IF D_TCU_ID = ZF_LCE_ID THEN
   IF (D_BEQ_NBR <= CM_FY32_MAX_BTS_PER_BSC) AND
      (D_BEQ_NBR > 0) THEN
    IF ( Q_S0455_CHK_IF_IP_BTS(D_BEQ_NBR)) THEN  
     DO WITH Z_BTS_IP_LAPD_CTRS(D_BEQ_NBR);
        ZB_ACTIVE := TRUE;
        ZB_BTS_IDX := D_BEQ_NBR;
        ZB_REAL_PER := 0;
        ZB_IP25A.B_LOW := ZS_FFFE;
        ZB_IP25A.B_HIGH := ZS_FFFF;
        ZB_IP25B.B_LOW := ZS_FFFE;
        ZB_IP25B.B_HIGH := ZS_FFFF;
        DO FOR ZQ_IP25C_IDX := 1 TO 15;
         ZB_IP25C(ZQ_IP25C_IDX).B_LOW := ZS_FFFE;
         ZB_IP25C(ZQ_IP25C_IDX).B_HIGH := ZS_FFFF;
        OD;
     OD;
    FI; 
   FI;
  FI;      
 OD;     
OD;      
END Q_FILL_GLOB_BTS_BUFFER_INVALID;
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_FILL_GLOB_BTS_TO_HIS_TYPE35                       */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                                                                    */
/*     CALLED FROM:                                                   */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_FILL_GLOB_BTS_TO_HIS_TYPE35 :PROC ();
DCL ZQ_NBR_BTS INT;
DCL ZQ_BTS_ID M_BEQ_NBR;
DCL ZQ_IP25C_IDX INT;
DCL ZQ_IP25C_IDX_MAX INT;
DCL ZQ_MAX M_STA_DPVAL;
DCL ZQ_LONG ZM_LONG_DPVAL;
DCL ZQ_NBR_I INT;

DO FOR ZQ_NBR_I := 1 TO M_MAX_BTS_PER_BSC;
 DO WITH Z_BTS_IP_LAPD_CTRS
         (ZM_BTS_INDEX_VALUE(ZQ_NBR_I));
   IF ZB_ACTIVE THEN
    ZQ_BTS_ID := ZB_BTS_IDX;
    /*BEGIN:FR 761944 Change */
    IF(Q_S0455_CHK_IF_IP_BTS(ZB_BTS_IDX))
    THEN
    /*END:FR 761944 Change */
    DO WITH Z_T35_5_PTR->(ZM_BTS_INDEX_VALUE(ZQ_BTS_ID));
      B_BTS_IDX := ZQ_BTS_ID;
       /* CR20/225233 */
      DO WITH Z_R_BEQ_MGT_PTR -> ZM_R_BEQ_MGT(ZQ_BTS_ID);
	/*BEGIN : FR36/307401-307402*/
           B_TC_IDX := M_BYTE(D_TC_ID);
	/*END : FR36/307401-307402*/
      OD;
       /* CR20/225233 */
      DO WITH B_CTRS_PT5_MT_35;
       IF ZB_REAL_PER <= ZS_PER_MAX AND ZB_REAL_PER
                                           >= ZS_PER_MIN THEN
    
          /* START CR_877227 */
    /*   B_IP25A_TO_IP30M(E_MT_35_CTR_IP25A):= ZB_IP25A;
         B_IP25A_TO_IP30M(E_MT_35_CTR_IP25B):= ZB_IP25B; */
      Q_S0020_ADD_DP_VALUES(ZB_IP25A,
                  B_IP25A_TO_IP30M(E_MT_35_CTR_IP25A));
  
      Q_S0020_ADD_DP_VALUES(ZB_IP25B,
                  B_IP25A_TO_IP30M(E_MT_35_CTR_IP25B)); 
   /* END CR_877227 */
    
          DO FOR ZQ_IP25C_IDX := 1 TO 15;
          Q_CALC_MAX_DPVAL(ZB_IP25C(ZQ_IP25C_IDX),
             B_IP25A_TO_IP30M(E_MT_35_CTR_IP25C));
         OD;                                   
       ELSE                                   
        B_IP25A_TO_IP30M(E_MT_35_CTR_IP25A).B_LOW
                                      := ZS_FFFE;
        B_IP25A_TO_IP30M(E_MT_35_CTR_IP25A).B_HIGH
                                      := ZS_FFFF;
        B_IP25A_TO_IP30M(E_MT_35_CTR_IP25B).B_LOW 
                                      := ZS_FFFE;
        B_IP25A_TO_IP30M(E_MT_35_CTR_IP25B).B_HIGH 
                                      := ZS_FFFF;
        B_IP25A_TO_IP30M(E_MT_35_CTR_IP25C).B_LOW 
                                      := ZS_FFFE;
        B_IP25A_TO_IP30M(E_MT_35_CTR_IP25C).B_HIGH 
                                      := ZS_FFFF; 
       FI;
      OD;
    OD; 
   FI;/*FR 761944 Change */
   FI;
 OD;
OD;



END Q_FILL_GLOB_BTS_TO_HIS_TYPE35;
/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_CALC_MAX_DPVAL                                    */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                                                                    */
/*     CALLED FROM:                                                   */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_CALC_MAX_DPVAL: PROC(ZF_X   M_STA_DPVAL ,
                       ZF_MAX M_STA_DPVAL LOC );
                                                         
IF (ZF_MAX.B_LOW = ZS_FFFE AND ZF_MAX.B_HIGH = ZS_FFFF)  OR
   (ZF_X.B_LOW = ZS_FFFF AND ZF_X.B_HIGH = ZS_FFFF)
THEN                                               
  /* IT HAS OVERFLOWED AS INDICATED BY H'FFFF FFFE OR
   * THE SOURCE VALUE IS INVALID.
   */
  /* ADD BY CHENZY FOR B9P1 WITTS 295*/
  IF (ZF_X.B_LOW = ZS_FFFF AND ZF_X.B_HIGH = ZS_FFFF)
  THEN
    ZF_MAX.B_LOW := ZS_FFFE;
    ZF_MAX.B_HIGH := ZS_FFFF;
  FI;
ELSE 
  IF ZF_MAX.B_LOW = ZS_FFFF AND ZF_MAX.B_HIGH = ZS_FFFF
  THEN
    /* IT IS INVALID SO OVERWRITE - NEW FOR R5 */
      ZF_MAX.B_LOW  := ZF_X.B_LOW;
      ZF_MAX.B_HIGH := ZF_X.B_HIGH;
  ELSIF ZF_X.B_HIGH /= 0 OR ZF_MAX.B_HIGH /= 0
  THEN  
     IF ZF_MAX.B_HIGH = 0 THEN
      ZF_MAX.B_LOW  := ZF_X.B_LOW; 
      ZF_MAX.B_HIGH := ZF_X.B_HIGH;   
     ELSIF ZF_X.B_HIGH /= 0 THEN
        IF ZF_MAX.B_HIGH/ZF_X.B_HIGH > 0 OR 
                   ZF_X.B_HIGH/ZF_MAX.B_HIGH > 0 THEN
          /* SAME SIGN FOR BOTH NUMBERS */
          IF ZF_MAX.B_HIGH < ZF_X.B_HIGH
          THEN
            ZF_MAX.B_LOW  := ZF_X.B_LOW; 
            ZF_MAX.B_HIGH := ZF_X.B_HIGH;
          FI;
        ELSIF ZF_X.B_HIGH < 0 
        /* DIFFERENT SIGN: NEG AND POS */
        THEN                   
            ZF_MAX.B_LOW  := ZF_X.B_LOW; 
            ZF_MAX.B_HIGH := ZF_X.B_HIGH;
        FI; 
     FI;   
  ELSIF ZF_X.B_LOW /= 0 OR ZF_MAX.B_LOW /= 0     
  THEN
     IF ZF_MAX.B_LOW = 0 THEN
      ZF_MAX.B_LOW  := ZF_X.B_LOW; 
      ZF_MAX.B_HIGH := ZF_X.B_HIGH;   
     ELSIF ZF_X.B_LOW /= 0 THEN
        IF ZF_MAX.B_LOW/ZF_X.B_LOW > 0 OR 
                   ZF_X.B_LOW/ZF_MAX.B_LOW > 0 THEN
          /* SAME SIGN FOR BOTH NUMBERS */
          IF ZF_MAX.B_LOW < ZF_X.B_LOW
          THEN
            ZF_MAX.B_LOW  := ZF_X.B_LOW; 
            ZF_MAX.B_HIGH := ZF_X.B_HIGH;
          FI;
        ELSIF ZF_X.B_LOW < 0         
        /* DIFFERENT SIGN: NEG AND POS */
        THEN                   
            ZF_MAX.B_LOW  := ZF_X.B_LOW; 
            ZF_MAX.B_HIGH := ZF_X.B_HIGH;
        FI; 
     FI;   
  FI;           
FI;     
END Q_CALC_MAX_DPVAL;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_S0688_UPD_BTSOML_CNTRS                            */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                                                                    */
/*     CALLED FROM:                                                   */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_S0688_UPD_BTSOML_CNTRS : PROC(ZF_LDC_LCE_ID  M_LCE_ID, 
                              ZF_LDC_SEQ_NBR M_BYTE,
                              ZF_VALIDITY    M_PM_DATA_VALIDITY,
                              ZF_LDC_BUF_PTR PTR);

DCL ZQ_ACT_IDX       INT;
                              
                              
IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_IP,
			     ZQ_ACT_IDX)
THEN
  IF ZF_VALIDITY = E_DATA_INVALID
  THEN
    Q_S0558_UPD_T35_IP_TCU_INVALID(ZF_LDC_LCE_ID);
  ELSE
    Q_S0559_UPDATE_CCI_IP_TYPE35(ZF_LDC_BUF_PTR);
  FI;  
FI;
END Q_S0688_UPD_BTSOML_CNTRS;

/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_CALC_MAX_3_INT                                    */        
/*                                                                    */        
/*     PROGRAMMER:                                                    */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 10/07/20                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:calculate max for recieved 4 byte and   */
/*                   return 6 byte value.                             */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/ 
Q_CALC_MAX_3_INT:PROC(ZF_X     M_LONG_INT,                                 
                      ZF_MAX   M_3_INT_CNTR LOC); 

DCL ZF_Y  M_LONG_INT;

ZF_Y.B_LOW  := ZF_MAX(3); 
ZF_Y.B_HIGH := ZF_MAX(2);


IF (ZF_Y.B_LOW = ZS_FFFE AND ZF_Y.B_HIGH = ZS_FFFF) OR                      
   (ZF_X.B_LOW  = ZS_FFFF AND ZF_X.B_HIGH = ZS_FFFF)                            
THEN                                                                            
  /* IT HAS OVERFLOWED AS INDICATED BY H'FFFF FFFE OR                           
   * THE SOURCE VALUE IS INVALID.                                               
   */                                                                           
  /* ADD BY CHENZY FOR B9P1 WITTS 295*/
  IF (ZF_X.B_LOW  = ZS_FFFF AND ZF_X.B_HIGH = ZS_FFFF)
  THEN                                                                           
    ZF_Y.B_LOW := ZS_FFFE;
    ZF_Y.B_HIGH := ZS_FFFF;
  FI;
ELSE                                                                            
  IF ZF_Y.B_LOW = ZS_FFFF AND ZF_Y.B_HIGH = ZS_FFFF                         
  THEN                                                                          
    /* IT IS INVALID SO OVERWRITE - NEW FOR R5 */                               
      ZF_Y.B_LOW  := ZF_X.B_LOW;                                              
      ZF_Y.B_HIGH := ZF_X.B_HIGH;                                             
  ELSIF ZF_X.B_HIGH /= 0 OR ZF_Y.B_HIGH /= 0
  THEN  
     IF ZF_Y.B_HIGH = 0 THEN
      ZF_Y.B_LOW  := ZF_X.B_LOW; 
      ZF_Y.B_HIGH := ZF_X.B_HIGH;   
     ELSIF ZF_X.B_HIGH /= 0 THEN
        IF ZF_Y.B_HIGH/ZF_X.B_HIGH > 0 OR 
                   ZF_X.B_HIGH/ZF_Y.B_HIGH > 0 THEN
          /* SAME SIGN FOR BOTH NUMBERS */
          IF ZF_Y.B_HIGH < ZF_X.B_HIGH
          THEN
            ZF_Y.B_LOW  := ZF_X.B_LOW; 
            ZF_Y.B_HIGH := ZF_X.B_HIGH;
          FI;
        ELSIF ZF_X.B_HIGH < 0 
        /* DIFFERENT SIGN: NEG AND POS */
        THEN                   
            ZF_Y.B_LOW  := ZF_X.B_LOW; 
            ZF_Y.B_HIGH := ZF_X.B_HIGH;
        FI; 
     FI;   
  ELSIF ZF_X.B_LOW /= 0 OR ZF_Y.B_LOW /= 0     
  THEN
     IF ZF_Y.B_LOW = 0 THEN
      ZF_Y.B_LOW  := ZF_X.B_LOW; 
      ZF_Y.B_HIGH := ZF_X.B_HIGH;   
     ELSIF ZF_X.B_LOW /= 0 THEN
        IF ZF_Y.B_LOW/ZF_X.B_LOW > 0 OR 
                   ZF_X.B_LOW/ZF_Y.B_LOW > 0 THEN
          /* SAME SIGN FOR BOTH NUMBERS */
          IF ZF_Y.B_LOW < ZF_X.B_LOW
          THEN
            ZF_Y.B_LOW  := ZF_X.B_LOW; 
            ZF_Y.B_HIGH := ZF_X.B_HIGH;
          FI;
        ELSIF ZF_X.B_LOW < 0         
        /* DIFFERENT SIGN: NEG AND POS */
        THEN                   
            ZF_Y.B_LOW  := ZF_X.B_LOW; 
            ZF_Y.B_HIGH := ZF_X.B_HIGH;
        FI; 
     FI;   
  FI;           
FI;     

/* START CR_886000 BUGFIX */

  IF   ZF_Y.B_LOW = ZS_FFFE
      AND ZF_Y.B_HIGH = ZS_FFFF 
  THEN  
 
ZF_MAX(3) := ZF_Y.B_LOW ;
ZF_MAX(2) := ZF_Y.B_HIGH;
ZF_MAX(1) := ZS_FFFF ; 

ELSE
 
 ZF_MAX(3) := ZF_Y.B_LOW ;
 ZF_MAX(2) := ZF_Y.B_HIGH;
 ZF_MAX(1) := 0 ; 

FI;

/* END CR_886000 BUGFIX */


END Q_CALC_MAX_3_INT;


/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: Q_CALC_MAX_LONT_INT_TO_DPVAL                        */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                                                                    */
/*     CALLED FROM:Q_SO563_UPD_T35_4_SLH_IP                           */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
Q_CALC_MAX_LONG_INT_TO_DPVAL: PROC(ZF_X   M_LONG_INT,
                                   ZF_MAX M_STA_DPVAL LOC );

                                                         
IF (ZF_MAX.B_LOW = ZS_FFFE AND ZF_MAX.B_HIGH = ZS_FFFF)  OR
   (ZF_X.B_LOW = ZS_FFFF AND ZF_X.B_HIGH = ZS_FFFF)
THEN                                               
  /* IT HAS OVERFLOWED AS INDICATED BY H'FFFF FFFE OR
   * THE SOURCE VALUE IS INVALID.
   */
  /* ADD BY CHENZY FOR B9P1 WITTS 295*/
  IF (ZF_X.B_LOW = ZS_FFFF AND ZF_X.B_HIGH = ZS_FFFF)
  THEN
    ZF_MAX.B_LOW := ZS_FFFE;
    ZF_MAX.B_HIGH := ZS_FFFF;
  FI;
ELSE 
  IF ZF_MAX.B_LOW = ZS_FFFF AND ZF_MAX.B_HIGH = ZS_FFFF
  THEN
    /* IT IS INVALID SO OVERWRITE - NEW FOR R5 */
      ZF_MAX.B_LOW  := ZF_X.B_LOW;
      ZF_MAX.B_HIGH := ZF_X.B_HIGH;
  ELSIF ZF_X.B_HIGH /= 0 OR ZF_MAX.B_HIGH /= 0
  THEN  
     IF ZF_MAX.B_HIGH = 0 THEN
      ZF_MAX.B_LOW  := ZF_X.B_LOW; 
      ZF_MAX.B_HIGH := ZF_X.B_HIGH;   
     ELSIF ZF_X.B_HIGH /= 0 THEN
        IF ZF_MAX.B_HIGH/ZF_X.B_HIGH > 0 OR 
                   ZF_X.B_HIGH/ZF_MAX.B_HIGH > 0 THEN
          /* SAME SIGN FOR BOTH NUMBERS */
          IF ZF_MAX.B_HIGH < ZF_X.B_HIGH
          THEN
            ZF_MAX.B_LOW  := ZF_X.B_LOW; 
            ZF_MAX.B_HIGH := ZF_X.B_HIGH;
          FI;
        ELSIF ZF_X.B_HIGH < 0 
        /* DIFFERENT SIGN: NEG AND POS */
        THEN                   
            ZF_MAX.B_LOW  := ZF_X.B_LOW; 
            ZF_MAX.B_HIGH := ZF_X.B_HIGH;
        FI; 
     FI;   
  ELSIF ZF_X.B_LOW /= 0 OR ZF_MAX.B_LOW /= 0     
  THEN
     IF ZF_MAX.B_LOW = 0 THEN
      ZF_MAX.B_LOW  := ZF_X.B_LOW; 
      ZF_MAX.B_HIGH := ZF_X.B_HIGH;   
     ELSIF ZF_X.B_LOW /= 0 THEN
        IF ZF_MAX.B_LOW/ZF_X.B_LOW > 0 OR 
                   ZF_X.B_LOW/ZF_MAX.B_LOW > 0 THEN
          /* SAME SIGN FOR BOTH NUMBERS */
          IF ZF_MAX.B_LOW < ZF_X.B_LOW
          THEN
            ZF_MAX.B_LOW  := ZF_X.B_LOW; 
            ZF_MAX.B_HIGH := ZF_X.B_HIGH;
          FI;
        ELSIF ZF_X.B_LOW < 0         
        /* DIFFERENT SIGN: NEG AND POS */
        THEN                   
            ZF_MAX.B_LOW  := ZF_X.B_LOW; 
            ZF_MAX.B_HIGH := ZF_X.B_HIGH;
        FI; 
     FI;   
  FI;           
FI;     

END Q_CALC_MAX_LONG_INT_TO_DPVAL;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: P_GDXBYX_UPD_BTS_TO_HIS_TYPE35                      */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                                                                    */
/*     CALLED FROM:                                                   */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
P_GDXBYX_UPD_BTS_TO_HIS_TYPE35: INTERFACE_PROC();
DCL ZQ_ACT_IDX       INT;

IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_IP, ZQ_ACT_IDX)THEN
 Q_FILL_GLOB_BTS_TO_HIS_TYPE35();
 Q_INIT_GLOB_BTS_BUFFER();
FI;

END P_GDXBYX_UPD_BTS_TO_HIS_TYPE35;

/**********************************************************************/
/*                                                                    */
/*     PROCEDURE: P_GDXBYX_INIT_GLOB_BTS_BUFFER                       */
/*                                                                    */
/*     FUNCTIONAL DESCRIPTION:                                        */
/*                                                                    */
/*     PARAMETERS:                                                    */
/*                      NONE                                          */
/*     RETURNED VALUE:                                                */
/*                      NONE                                          */
/*     PROCEDURES CALLED:                                             */
/*                                                                    */
/*     CALLED FROM:                                                   */
/*                                                                    */
/******************* END OF PROCEDURE HEADER **************************/
P_GDXBYX_INIT_GLOB_BTS_BUFFER: INTERFACE_PROC();

 Q_INIT_GLOB_BTS_BUFFER();

END P_GDXBYX_INIT_GLOB_BTS_BUFFER;
/* END: ADD-WIPRO-B11-MR0-PKG1-CHANGE */

/**********************************************************************/
/*                                                                    */        
/*     PROCEDURE: P_GDXBYX_UPD_CCI_TC_CTRS :         INTERFACE_PROC   */        
/*                                                                    */        
/*     PROGRAMMER: MALA                                               */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE: 26/05/06                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_LCE_ID M_LCE_ID,                       */        
/*                      ZF_LDC_TYPE M_FMM_SELECTOR,                   */        
/*                      ZF_LDC_SEQ_NBR M_BYTE,                        */        
/*                      ZF_VALIDITY M_PM_DATA_VALIDITY,               */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                      NONE                                          */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0285_UPD_T26_CNTRS                         */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*     CALLED FROM:                                                   */        
/*                      NONE                                          */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
P_GDXBYX_UPD_CCI_TC_MTP2_CTRS: INTERFACE_PROC(                                   
                                   ZF_LDC_LCE_ID  M_LCE_ID,                     
                                   ZF_VALIDITY    M_PM_DATA_VALIDITY,           
                                   ZF_LDC_BUF_PTR PTR,
                                   ZF_TC_ID M_TC_ID,                         
                        /* START : WIPRO B11 IP MR0 PKG1 */
                                   ZF_STATUS M_BYTE);
                        /* END : WIPRO B11 IP MR0 PKG1 */

DCL ZQ_ACT_IDX      INT;
/*for FR 3BKA36FBR224825*/
    /*Z_TC_ID         M_TC_ID;*/
/*for FR 3BKA36FBR224825*/ 
/* START : WIPRO B11 IP MR0 PKG1 */

CASE ZF_STATUS OF
/* START: 3BKA36CBR236941*/
/*START: CR36/274715*/
(E_TC_MTP2/*,E_INVALID_TC_MTP2, E_TC_MTP2_TIMEOUT*/):                                                       
IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_NUMBER7, ZQ_ACT_IDX)
THEN
  IF ZF_VALIDITY = E_DATA_INVALID
  THEN
    Q_S4444_UPD_TC_MTP2_INVALID(ZF_TC_ID);
  ELSE
 /* BEGIN CR230176 */      
    DO WITH ZF_LDC_BUF_PTR -> ZM_TC_PM_DATA;
      IF B_VALID_INDIC = E_DATA_VALID
      THEN 
        Q_S4475_UPD_T9_TC_MTP2(ZF_LDC_BUF_PTR);
      ELSE
        Q_S4444_UPD_TC_MTP2_INVALID(ZF_TC_ID);
      FI;
    OD;
 /* END CR230176 */
  FI;
FI;
/*END: CR36/274715*/
/* END: 3BKA36CBR236941*/

/* START: 3BKA36CBR236941*/
/*(E_TC_IP,E_INVALID_TC_IP,E_TC_IP_TIMEOUT):*/
(E_TC_IP):
/* END: 3BKA36CBR236941*/
IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_IP, ZQ_ACT_IDX)
THEN
  IF ZF_VALIDITY = E_DATA_INVALID
  THEN
    Q_S0568_UPD_TC_IP_INVALID(ZF_TC_ID);
  ELSE
/* BEGIN CR230176 */      
    DO WITH ZF_LDC_BUF_PTR -> M_TC_PM_DATA;
      IF B_VALID_INDIC = E_DATA_VALID
      THEN 
        Q_S0569_UPD_T35_TC_IP(ZF_LDC_BUF_PTR, ZF_TC_ID);
      ELSE
        Q_S0568_UPD_TC_IP_INVALID(ZF_TC_ID);
      FI;
    OD;
 /* END CR230176 */  
  FI;
FI;
/* START: 3BKA36CBR236941*/
/*START: CR36/274715*/
/*IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_NUMBER7, ZQ_ACT_IDX)
THEN
  Q_S4444_UPD_TC_MTP2_ZEROS();
FI;*/
/*END: CR36/274715*/
/* END: 3BKA36CBR236941*/


ELSE;
ESAC;


END P_GDXBYX_UPD_CCI_TC_MTP2_CTRS;

/* START: 3BKA36CBR236941*/
Q_S4444_UPD_TC_MTP2_ZEROS: PROC();
DCL ZQ_SL_IDX    INT;
DCL ZQ_SL_FND    INT;
DCL ZQ_CIC       M_CIC;
DCL ZQ_J         RANGE(E_MT_09_CTR_N1_8:E_MT_09_CTR_N3_5);
DCL ZQ_LCE_ID    M_LCE_ID;
DCL ZQ_IDX       INT;

DO FOR ZQ_IDX := 1 TO CM_FY32_PM_MAX_NBR_DTC_N7;
  DO WITH Z_R_N7_CONF_PTR -> ZM_R_N7_CONF(ZQ_IDX);
    IF D_LCE_ID /= ZS_FFFF
    THEN
      /*CR20/223453*/
      ZQ_CIC := Q_S0140_GET_CIC_FROM_LCEID(D_LCE_ID,D_SLC);
      /*CR20/223453*/
      ZQ_SL_FND := 0;
      DO FOR ZQ_SL_IDX := 1 TO ZS_MAX_SLC_N7 WHILE ZQ_SL_FND = 0;
       DO WITH Z_T9_PTR->(ZQ_SL_IDX);
        DO WITH B_HIS_LINK_MEAS;
         IF B_LINKID = ZQ_CIC OR
            B_LINKID = ZS_NULL_CIC
         THEN
          ZQ_SL_FND := ZQ_SL_IDX; 
          B_LINKID  := ZQ_CIC;
          DO FOR ZQ_J := E_MT_09_CTR_N1_8 TO 
                         E_MT_09_CTR_N3_5;
           B_FROM_N18_TO_N35(ZQ_J).B_LOW  := 0;
           B_FROM_N18_TO_N35(ZQ_J).B_HIGH := 0;
          OD; 
         FI;  
        OD; 
       OD;
     OD;
    FI;
  OD;  
OD;
END Q_S4444_UPD_TC_MTP2_ZEROS;
/* END: 3BKA36CBR236941*/
/*CR20/237798*/
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: Q_S0440_UPD_N7_SCPR_ZEROS                           */        
/*                                                                    */        
/*     PROGRAMMER: J.P. QUINN  (KDC)                                  */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE:          */        
/*                                                                    */        
/*     CREATION DATE:                                                 */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION:                                        */        
/*       UPDATES THE TYPE 9 N7 COUNTERS TO ZEROS                      */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_MEAS_TYPE M_MEAS_TYPE                      */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                                                                    */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0140_GET_CIC_FROM_LCEID                    */        
/*     CALLED FROM:                                                   */        
/*                                                                    */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
Q_S0440_UPD_N7_SCPR_ZEROS: PROC (ZF_MEAS_TYPE  M_MEAS_TYPE);                  
                                                                                
SYNMODE ZM_CHAN_FRIG =   BIN(5);                                                
                                                                                
DCL ZQ_REL_IDX   INT;                                                           
DCL ZQ_SL_IDX    INT;                                                           
DCL ZQ_SL_FND    INT;                                                           
DCL ZQ_CIC       M_CIC;                                                         
DCL ZQ_I         RANGE(E_MT_09_CTR_N1_2:E_MT_09_CTR_N3_7);                      
                                                                                
DO FOR ZQ_REL_IDX := 1 TO CM_FY32_PM_MAX_NBR_DTC_N7;                            
  DO WITH Z_R_N7_CONF_PTR -> ZM_R_N7_CONF(ZQ_REL_IDX);                          
    IF D_LCE_ID /= M_LCE_ID_NULL                                                
    THEN                                                                        
                                                                                
      /*CR20/223453*/
      ZQ_CIC := Q_S0140_GET_CIC_FROM_LCEID(D_LCE_ID,D_SLC);
      /*CR20/223453*/
      ZQ_SL_FND := 0;                                                           
                                                                                
      CASE ZF_MEAS_TYPE OF                                                      
        (E_MT_NUMBER7):                                                         
            DO FOR ZQ_SL_IDX := 1 TO ZS_MAX_SLC_N7 WHILE ZQ_SL_FND = 0;         
              DO WITH Z_T9_PTR->(ZQ_SL_IDX);                                    
                DO WITH B_HIS_LINK_MEAS;                                        
                  IF B_LINKID = ZQ_CIC OR                                       
                     B_LINKID = ZS_NULL_CIC                                     
                  THEN                                                          
                    ZQ_SL_FND := ZQ_SL_IDX;                                     
                    B_LINKID := ZQ_CIC;                                         
                    B_N11.B_LOW := 0;                                     
                    B_N11.B_HIGH := 0;                                    
                    DO FOR ZQ_I := E_MT_09_CTR_N1_2 TO E_MT_09_CTR_N3_7;        
                        B_FROM_N12_TO_N37(ZQ_I) := 0;                     
                    OD;                                                         
                    B_N310.B_LOW := 0;                                    
                    B_N310.B_HIGH := 0;                                   
                    B_N311 := 0;                                          
                  FI;                                                           
                OD;                                                             
                DO WITH B_HIS_LINK_SET;                                         
                  B_LINKSET_ID := 1;                                            
                  B_N42.B_LOW := 0;                                       
                  B_N42.B_HIGH := 0;                                      
                OD;                                                             
                /** ROUT_SET CTRS DELETED   */                                  
              OD;                                                               
            OD;                                                                 
                                                                                
        (E_MT_CELL_TRX_OVERVIEW_COUNTERS):                                      
            DO FOR ZQ_SL_IDX := 1 TO ZS_MAX_SLC_N7 WHILE ZQ_SL_FND = 0;         
              DO WITH Z_T110_5_PTR->(ZQ_SL_IDX);                                
                IF B_LINK_ID = ZQ_CIC OR                                        
                   B_LINK_ID = ZS_NULL_CIC                                      
                THEN                                                            
                  ZQ_SL_FND := ZQ_SL_IDX;                                       
                  B_LINK_ID  := ZQ_CIC;                                         
                  DO WITH B_CTRS_PT5_MT_110;                                    
                    B_MN1_1.B_LOW := 0;                                   
                    B_MN1_1.B_HIGH := 0;                                  
                  OD;                                                           
                FI;                                                             
              OD;                                                               
            OD;                                                                 
                                                                                
        ELSE                                                                    
      ESAC;                                                                     
                                                                                
    FI;                                                                         
  OD;                                                                           
OD;                                                                             
                                                                                
END Q_S0440_UPD_N7_SCPR_ZEROS;

Q_S0565_UPD_SLH_IP_ZEROS: PROC();                       

DCL ZQ_TC_IDX M_TC_ID;

DO FOR ZQ_TC_IDX := 1 TO M_MAX_TCID;
 DO WITH Z_R_TC_MGT_PTR -> ZM_R_TC_MGT(ZM_TC_INDEX_VALUE
         (ZQ_TC_IDX));
  IF (D_TCOM_ST = E_MS_IT OR D_TCOM_ST = E_MS_FIT)
  THEN
     DO WITH Z_T35_4_PTR->(ZM_TC_INDEX_VALUE(ZQ_TC_IDX));
        B_TC_IDX := ZQ_TC_IDX;
        B_FILLER := H'FF;
        DO WITH B_CTRS_PT4_MT_35;

        B_IP21_TO_IP35D(E_MT_35_CTR_IP27B).B_HIGH:=0;
        B_IP21_TO_IP35D(E_MT_35_CTR_IP27B).B_LOW :=0;

        B_IP21_TO_IP35D(E_MT_35_CTR_IP27D).B_HIGH:=0;
        B_IP21_TO_IP35D(E_MT_35_CTR_IP27D).B_LOW :=0;

        B_IP21_TO_IP35D(E_MT_35_CTR_IP27E).B_HIGH:=0;
        B_IP21_TO_IP35D(E_MT_35_CTR_IP27E).B_LOW :=0;

        B_IP21_TO_IP35D(E_MT_35_CTR_IP27G).B_HIGH:=0;
        B_IP21_TO_IP35D(E_MT_35_CTR_IP27G).B_LOW :=0; 
       OD;
      OD;
  FI;
 OD;
OD;

END Q_S0565_UPD_SLH_IP_ZEROS;
Q_S0443_UPD_TP_N7_ZEROS: PROC(ZF_MEAS_TYPE  M_MEAS_TYPE);
                                                                                
DCL ZQ_SL_IDX    INT;                                                           
DCL ZQ_SL_FND    INT;                                                           
DCL ZQ_CIC       M_CIC;                                                         
DCL ZQ_I         M_SCCP_CNTR_NAME;                                              
DCL ZQ_J         RANGE(E_MT_09_CTR_N1_8:E_MT_09_CTR_N3_5);                      
DCL ZQ_Z         RANGE(E_MT_110_CTR_MC350:E_MT_110_CTR_MC351);                  
DCL ZQ_LCE_ID    M_LCE_ID;
DCL ZQ_IDX       INT;

DO FOR ZQ_IDX := 1 TO CM_FY32_PM_MAX_NBR_DTC_N7;
  DO WITH Z_R_N7_CONF_PTR -> ZM_R_N7_CONF(ZQ_IDX);
    IF D_LCE_ID /= ZS_FFFF
    THEN
      /*CR20/223453*/
      ZQ_CIC := Q_S0140_GET_CIC_FROM_LCEID(D_LCE_ID,D_SLC);
      /*CR20/223453*/
      ZQ_SL_FND := 0;
      
      CASE ZF_MEAS_TYPE OF                                                            
       /*START: CR36/274715*/ 
       /* (E_MT_NUMBER7):                                                               
          DO FOR ZQ_SL_IDX := 1 TO ZS_MAX_SLC_N7 WHILE ZQ_SL_FND = 0;           
            DO WITH Z_T9_PTR->(ZQ_SL_IDX);                                      
              DO WITH B_HIS_LINK_MEAS;                                          
                IF B_LINKID = ZQ_CIC OR                                         
                   B_LINKID = ZS_NULL_CIC                                       
                THEN                                                            
                  ZQ_SL_FND := ZQ_SL_IDX;                                       
                  B_LINKID  := ZQ_CIC;                                          
                  DO FOR ZQ_J := E_MT_09_CTR_N1_8 TO                            
                                 E_MT_09_CTR_N3_5;                              
                    B_FROM_N18_TO_N35(ZQ_J).B_LOW  := 0;                  
                    B_FROM_N18_TO_N35(ZQ_J).B_HIGH := 0;                  
                  OD;                                                           
                FI;                                                             
              OD;                                                               
            OD;                                                                 
          OD;*/
        /*END: CR36/274715*/                                                                   
        (E_MT_SCCP):                                                                  
          DO FOR ZQ_SL_IDX := 1 TO ZS_MAX_SLC_N7 WHILE ZQ_SL_FND = 0;           
            DO WITH Z_T25_PTR->(ZQ_SL_IDX);                                     
              DO WITH B_DATA_MT_25;                                             
                IF B_LINK_ID = ZS_NULL_CIC                                      
                  /* THIS IS THE FIRST FREE ENTRY */ OR                         
                   B_LINK_ID = ZQ_CIC                                           
                THEN                                                            
                  ZQ_SL_FND := ZQ_SL_IDX;                                       
                  B_LINK_ID := ZQ_CIC;                                          
                  /*** C153A, C153B   ***/                                                        
                   
/*START: CR20/293868 */
/*                  DO FOR ZQ_I := E_C251_SCCPC_UDT_TX TO                         
                                 E_C258_SCCPC_CREF_RX;*/

		    DO FOR ZQ_I := E_C251_SCCPC_UDT_TX TO                         
                                 E_C153B_N7_CON_EST_FAIL_BSS;
/*END: CR20/293868 */


                    B_HIS_CC(ZQ_I).B_LOW  := 0;                           
                    B_HIS_CC(ZQ_I).B_HIGH := 0;                           
                  OD;                                                           
                FI;                                                             
              OD;                                                               
            OD;                                                                 
          OD;                                                                   
                                                                                
        (E_MT_CELL_TRX_OVERVIEW_COUNTERS):                                            
          DO FOR ZQ_SL_IDX := 1 TO ZS_MAX_SLC_N7 WHILE ZQ_SL_FND = 0;           
            DO WITH Z_T110_5_PTR->(ZQ_SL_IDX);                                  
              IF B_LINK_ID = ZS_NULL_CIC                                        
                 /* THIS IS THE FIRST FREE ENTRY */ OR                          
                 B_LINK_ID = ZQ_CIC                                             
              THEN                                                              
                ZQ_SL_FND := ZQ_SL_IDX;                                         
                B_LINK_ID := ZQ_CIC;                                            
                DO WITH B_CTRS_PT5_MT_110;                                      
                  DO FOR ZQ_Z := E_MT_110_CTR_MC350 TO                          
                                 E_MT_110_CTR_MC351;                            
                    B_MC350_TO_MC351(ZQ_Z).B_LOW  := 0;                   
                    B_MC350_TO_MC351(ZQ_Z).B_HIGH := 0;                   
                  OD;                                                           
                OD;                                                             
              FI;                                                               
            OD;                                                                 
          OD;                                                                   
        ELSE                                                                          
      ESAC;                                                                           
    FI;                                                                        
  OD;                                                                          
OD;                                                                            
END Q_S0443_UPD_TP_N7_ZEROS;                                                 
/*BEGIN: ADD-WIPRO-B10-MX-MR2-CHANGE */
/*CR20/237798*/
/**********************************************************************/        
/*                                                                    */        
/*     PROCEDURE: P_GDXBYX_UPD_CCI_EME_CTRS  :    INTERFACE_PROC      */        
/*                                                                    */        
/*     PROGRAMMER: CHEN ZHANGYI                                       */        
/*                                                                    */        
/*                LAST MODIFIED BY:                    DATE: 10/03/04 */        
/*                                                                    */        
/*     CREATION DATE: 10/03/04                                        */        
/*                                                                    */        
/*     FUNCTIONAL DESCRIPTION: INITIALISES RSMB POINTERS TO NULL.     */        
/*                                                                    */        
/*     GLOBAL DATA:                                                   */        
/*                                                                    */        
/*     PARAMETERS:                                                    */        
/*                      ZF_LDC_LCE_ID M_LCE_ID,                       */        
/*                      ZF_LDC_TYPE M_FMM_SELECTOR,                   */        
/*                      ZF_LDC_SEQ_NBR M_BYTE,                        */        
/*                      ZF_VALIDITY M_PM_DATA_VALIDITY,               */        
/*                      ZF_LDC_BUF_PTR PTR                            */        
/*     RETURNED VALUE:                                                */        
/*                      NONE                                          */        
/*     DECLARED WITHIN PROCEDURE/PROCESS:                             */        
/*                      NONE                                          */        
/*     CONTAINING PROCEDURES:                                         */        
/*                      NONE                                          */        
/*     RECEIVED MESSAGES:                                             */        
/*                      NONE                                          */        
/*     SENT MESSAGES:                                                 */        
/*                      NONE                                          */        
/*     PROCEDURES CALLED:                                             */        
/*                      Q_S0285_UPD_T26_CNTRS                         */        
/*                      Q_S0010_CCDC_ERROR                            */        
/*     CALLED FROM:                                                   */        
/*                      NONE                                          */        
/*     PRIMITIVES CALLED:                                             */        
/*                      NONE                                          */        
/*     DATABASE ACCESS:                                               */        
/*                      NONE                                          */        
/*                                                                    */        
/******************* END OF PROCEDURE HEADER **************************/        
P_GDXBYX_UPD_CCI_EME_CTRS: INTERFACE_PROC(                                   
                                   ZF_LDC_LCE_ID  M_LCE_ID,                     
                                   ZF_LDC_TYPE    M_FMM_SELECTOR,               
                                   ZF_LDC_SEQ_NBR M_BYTE,                       
                                   ZF_VALIDITY    M_PM_DATA_VALIDITY,           
                                   ZF_LDC_BUF_PTR PTR);                         
                                                                                

CASE ZF_LDC_TYPE OF                                                             
  (M_FS_TCU_TRF_LDC):                                                           
    Q_S0610_UPD_T33_CNTRS(ZF_LDC_LCE_ID,                                    
                          ZF_LDC_SEQ_NBR,                                   
                          ZF_VALIDITY,                                      
                          ZF_LDC_BUF_PTR);

    Q_S0687_UPD_MCCH_CNTRS(ZF_LDC_LCE_ID,
               			  ZF_LDC_SEQ_NBR,                                   
                          ZF_VALIDITY,                                      
                          ZF_LDC_BUF_PTR);                                                                            
  
   /* BEGIN: BTS-TRX-TEMP-LOGGING */
   Q_S0688_UPD_TRX_TEMP_CNTRS(ZF_LDC_LCE_ID,
                          ZF_LDC_SEQ_NBR,
                          ZF_VALIDITY,
                          ZF_LDC_BUF_PTR); 

 /* END: BTS-TRX-TEMP-LOGGING */ 
  /*ADDED */
  /* BEGIN : WIPRO B11 IP MR0 PKG1 */
    Q_S0688_UPD_BTSOML_CNTRS(ZF_LDC_LCE_ID,
               		  ZF_LDC_SEQ_NBR,
                          ZF_VALIDITY, 
                          ZF_LDC_BUF_PTR);
  /* END : WIPRO B11 IP MR0 PKG1 */
  /*ADDED */ 
  ELSE                                                                          
  
  /* INVALID LDC TYPE */                                                        
    Q_S0010_CCDC_ERROR(M_ERC6_USER_REC, M_ERT0019_INC_MESS_DATA,                
                      14, 1441);                                                
ESAC;                                                                          
                                                                                
END P_GDXBYX_UPD_CCI_EME_CTRS;

/* START : CR 605005 */

P_GDXBYX_UPD_PM_CPI_CTRS: INTERFACE_PROC(ZF_VALIDITY BOOL,
                                         ZF_BUFF_PTR PTR);

DCL ZQ_ACT_IDX INT;

IF Q_S0090_MEAS_TYPE_RUNNING(E_MT_CELL_TRX_OVERVIEW_COUNTERS,                 
                               ZQ_ACT_IDX)

THEN							   
										 
  IF (ZF_VALIDITY)
  THEN
    Q_S0690_UPD_PM_CPI_CTRS(ZF_BUFF_PTR);
 ELSE
   Q_S0691_UPD_PM_CPI_CTRS_INVALID();
 FI;
FI; 

END P_GDXBYX_UPD_PM_CPI_CTRS;

/* END : CR 605005 */

/**********************************************************************/        
/*                                                                    */        
/*          4.6  END SSM MODULE                                       */        
/*                                                                    */        
/**********************************************************************/        
/*Commented for FR36/313766
SATRT : FR36/292347 
<>RANGECHECK OFF;
END : FR36/292347 
*/                                                                                
END H_M_GDXBYX_CCDC_SSM;                                                        
                                                                                
/**********************************************************************/        
/*                                                                    */        
/*          5.   END SSM                                              */        
/*                                                                    */        
/**********************************************************************/        

END_SSM;
